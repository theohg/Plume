
PlumeSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012904  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030d4  08012a48  08012a48  00013a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015b1c  08015b1c  00016b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08015b24  08015b24  00016b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015b2c  08015b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000258  20000008  08015b30  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000584  20000260  08015d88  00017260  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200007e4  08015d88  000177e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00017260  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039317  00000000  00000000  00017290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006439  00000000  00000000  000505a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030e0  00000000  00000000  000569e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000025f0  00000000  00000000  00059ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ce5a  00000000  00000000  0005c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000342f3  00000000  00000000  00088f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010eff2  00000000  00000000  000bd1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc1ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e4ec  00000000  00000000  001cc234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000079  00000000  00000000  001da720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000260 	.word	0x20000260
 800015c:	00000000 	.word	0x00000000
 8000160:	08012a2c 	.word	0x08012a2c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000264 	.word	0x20000264
 800017c:	08012a2c 	.word	0x08012a2c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bac:	f000 b988 	b.w	8000ec0 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	468e      	mov	lr, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	4688      	mov	r8, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d962      	bls.n	8000ca4 <__udivmoddi4+0xdc>
 8000bde:	fab2 f682 	clz	r6, r2
 8000be2:	b14e      	cbz	r6, 8000bf8 <__udivmoddi4+0x30>
 8000be4:	f1c6 0320 	rsb	r3, r6, #32
 8000be8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bec:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf0:	40b7      	lsls	r7, r6
 8000bf2:	ea43 0808 	orr.w	r8, r3, r8
 8000bf6:	40b4      	lsls	r4, r6
 8000bf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c04:	0c23      	lsrs	r3, r4, #16
 8000c06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c1c:	f080 80ea 	bcs.w	8000df4 <__udivmoddi4+0x22c>
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f240 80e7 	bls.w	8000df4 <__udivmoddi4+0x22c>
 8000c26:	3902      	subs	r1, #2
 8000c28:	443b      	add	r3, r7
 8000c2a:	1a9a      	subs	r2, r3, r2
 8000c2c:	b2a3      	uxth	r3, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3e:	459c      	cmp	ip, r3
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0x8e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c48:	f080 80d6 	bcs.w	8000df8 <__udivmoddi4+0x230>
 8000c4c:	459c      	cmp	ip, r3
 8000c4e:	f240 80d3 	bls.w	8000df8 <__udivmoddi4+0x230>
 8000c52:	443b      	add	r3, r7
 8000c54:	3802      	subs	r0, #2
 8000c56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5a:	eba3 030c 	sub.w	r3, r3, ip
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11d      	cbz	r5, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40f3      	lsrs	r3, r6
 8000c64:	2200      	movs	r2, #0
 8000c66:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d905      	bls.n	8000c7e <__udivmoddi4+0xb6>
 8000c72:	b10d      	cbz	r5, 8000c78 <__udivmoddi4+0xb0>
 8000c74:	e9c5 0100 	strd	r0, r1, [r5]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	e7f5      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000c7e:	fab3 f183 	clz	r1, r3
 8000c82:	2900      	cmp	r1, #0
 8000c84:	d146      	bne.n	8000d14 <__udivmoddi4+0x14c>
 8000c86:	4573      	cmp	r3, lr
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xc8>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 8105 	bhi.w	8000e9a <__udivmoddi4+0x2d2>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4690      	mov	r8, r2
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e5      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000c9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000ca2:	e7e2      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	f000 8090 	beq.w	8000dca <__udivmoddi4+0x202>
 8000caa:	fab2 f682 	clz	r6, r2
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	f040 80a4 	bne.w	8000dfc <__udivmoddi4+0x234>
 8000cb4:	1a8a      	subs	r2, r1, r2
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	b280      	uxth	r0, r0
 8000cbe:	b2bc      	uxth	r4, r7
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cce:	fb04 f20c 	mul.w	r2, r4, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x11e>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x11c>
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	f200 80e0 	bhi.w	8000ea4 <__udivmoddi4+0x2dc>
 8000ce4:	46c4      	mov	ip, r8
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cf0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cf4:	fb02 f404 	mul.w	r4, r2, r4
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x144>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x142>
 8000d04:	429c      	cmp	r4, r3
 8000d06:	f200 80ca 	bhi.w	8000e9e <__udivmoddi4+0x2d6>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d14:	f1c1 0620 	rsb	r6, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	fa0e f401 	lsl.w	r4, lr, r1
 8000d24:	fa20 f306 	lsr.w	r3, r0, r6
 8000d28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fa00 f801 	lsl.w	r8, r0, r1
 8000d36:	fa1f fc87 	uxth.w	ip, r7
 8000d3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x1a0>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d5a:	f080 809c 	bcs.w	8000e96 <__udivmoddi4+0x2ce>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f240 8099 	bls.w	8000e96 <__udivmoddi4+0x2ce>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	fa1f fe83 	uxth.w	lr, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d80:	45a4      	cmp	ip, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1ce>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d8a:	f080 8082 	bcs.w	8000e92 <__udivmoddi4+0x2ca>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d97f      	bls.n	8000e92 <__udivmoddi4+0x2ca>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	443c      	add	r4, r7
 8000d96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000da2:	4564      	cmp	r4, ip
 8000da4:	4673      	mov	r3, lr
 8000da6:	46e1      	mov	r9, ip
 8000da8:	d362      	bcc.n	8000e70 <__udivmoddi4+0x2a8>
 8000daa:	d05f      	beq.n	8000e6c <__udivmoddi4+0x2a4>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x1fe>
 8000dae:	ebb8 0203 	subs.w	r2, r8, r3
 8000db2:	eb64 0409 	sbc.w	r4, r4, r9
 8000db6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dba:	fa22 f301 	lsr.w	r3, r2, r1
 8000dbe:	431e      	orrs	r6, r3
 8000dc0:	40cc      	lsrs	r4, r1
 8000dc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e74f      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000dca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dce:	0c01      	lsrs	r1, r0, #16
 8000dd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dd4:	b280      	uxth	r0, r0
 8000dd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4638      	mov	r0, r7
 8000dde:	463c      	mov	r4, r7
 8000de0:	46b8      	mov	r8, r7
 8000de2:	46be      	mov	lr, r7
 8000de4:	2620      	movs	r6, #32
 8000de6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dea:	eba2 0208 	sub.w	r2, r2, r8
 8000dee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000df2:	e766      	b.n	8000cc2 <__udivmoddi4+0xfa>
 8000df4:	4601      	mov	r1, r0
 8000df6:	e718      	b.n	8000c2a <__udivmoddi4+0x62>
 8000df8:	4610      	mov	r0, r2
 8000dfa:	e72c      	b.n	8000c56 <__udivmoddi4+0x8e>
 8000dfc:	f1c6 0220 	rsb	r2, r6, #32
 8000e00:	fa2e f302 	lsr.w	r3, lr, r2
 8000e04:	40b7      	lsls	r7, r6
 8000e06:	40b1      	lsls	r1, r6
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	430a      	orrs	r2, r1
 8000e12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e16:	b2bc      	uxth	r4, r7
 8000e18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb08 f904 	mul.w	r9, r8, r4
 8000e26:	40b0      	lsls	r0, r6
 8000e28:	4589      	cmp	r9, r1
 8000e2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e2e:	b280      	uxth	r0, r0
 8000e30:	d93e      	bls.n	8000eb0 <__udivmoddi4+0x2e8>
 8000e32:	1879      	adds	r1, r7, r1
 8000e34:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e38:	d201      	bcs.n	8000e3e <__udivmoddi4+0x276>
 8000e3a:	4589      	cmp	r9, r1
 8000e3c:	d81f      	bhi.n	8000e7e <__udivmoddi4+0x2b6>
 8000e3e:	eba1 0109 	sub.w	r1, r1, r9
 8000e42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e46:	fb09 f804 	mul.w	r8, r9, r4
 8000e4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e4e:	b292      	uxth	r2, r2
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d229      	bcs.n	8000eac <__udivmoddi4+0x2e4>
 8000e58:	18ba      	adds	r2, r7, r2
 8000e5a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e5e:	d2c4      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e60:	4542      	cmp	r2, r8
 8000e62:	d2c2      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e64:	f1a9 0102 	sub.w	r1, r9, #2
 8000e68:	443a      	add	r2, r7
 8000e6a:	e7be      	b.n	8000dea <__udivmoddi4+0x222>
 8000e6c:	45f0      	cmp	r8, lr
 8000e6e:	d29d      	bcs.n	8000dac <__udivmoddi4+0x1e4>
 8000e70:	ebbe 0302 	subs.w	r3, lr, r2
 8000e74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e78:	3801      	subs	r0, #1
 8000e7a:	46e1      	mov	r9, ip
 8000e7c:	e796      	b.n	8000dac <__udivmoddi4+0x1e4>
 8000e7e:	eba7 0909 	sub.w	r9, r7, r9
 8000e82:	4449      	add	r1, r9
 8000e84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8c:	fb09 f804 	mul.w	r8, r9, r4
 8000e90:	e7db      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e92:	4673      	mov	r3, lr
 8000e94:	e77f      	b.n	8000d96 <__udivmoddi4+0x1ce>
 8000e96:	4650      	mov	r0, sl
 8000e98:	e766      	b.n	8000d68 <__udivmoddi4+0x1a0>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e6fd      	b.n	8000c9a <__udivmoddi4+0xd2>
 8000e9e:	443b      	add	r3, r7
 8000ea0:	3a02      	subs	r2, #2
 8000ea2:	e733      	b.n	8000d0c <__udivmoddi4+0x144>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	443b      	add	r3, r7
 8000eaa:	e71c      	b.n	8000ce6 <__udivmoddi4+0x11e>
 8000eac:	4649      	mov	r1, r9
 8000eae:	e79c      	b.n	8000dea <__udivmoddi4+0x222>
 8000eb0:	eba1 0109 	sub.w	r1, r1, r9
 8000eb4:	46c4      	mov	ip, r8
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fb09 f804 	mul.w	r8, r9, r4
 8000ebe:	e7c4      	b.n	8000e4a <__udivmoddi4+0x282>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <_ZL20ws2812_send_spi_datahhh>:

// Static variable to track if 5V power for the LED is currently on
static uint8_t s_is_led_power_on = 0;

// Internal helper function to send the SPI data for one LED
static void ws2812_send_spi_data(uint8_t r_scaled, uint8_t g_scaled, uint8_t b_scaled) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	71bb      	strb	r3, [r7, #6]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	717b      	strb	r3, [r7, #5]
    uint32_t color_data = ((uint32_t)g_scaled << 16) | ((uint32_t)r_scaled << 8) | (uint32_t)b_scaled;
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	797b      	ldrb	r3, [r7, #5]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	623b      	str	r3, [r7, #32]
    uint8_t spi_tx_buffer[24]; // Buffer to hold the 24 * 3-bit encoded values

    // This encoding is for the Controllerstech method with ~2.4MHz SPI clock
    for (int i = 0; i < 24; i++) { // Iterate 24 times for 24 WS2812B data bits
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eea:	e019      	b.n	8000f20 <_ZL20ws2812_send_spi_datahhh+0x5c>
        if ((color_data >> (23 - i)) & 0x01) { // Check MSB first
 8000eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eee:	f1c3 0317 	rsb	r3, r3, #23
 8000ef2:	6a3a      	ldr	r2, [r7, #32]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <_ZL20ws2812_send_spi_datahhh+0x4a>
            spi_tx_buffer[i] = 0b00000110; // WS2812B '1' (last 3 bits are 110)
 8000f00:	f107 0208 	add.w	r2, r7, #8
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	4413      	add	r3, r2
 8000f08:	2206      	movs	r2, #6
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	e005      	b.n	8000f1a <_ZL20ws2812_send_spi_datahhh+0x56>
        } else {
            spi_tx_buffer[i] = 0b00000100; // WS2812B '0' (last 3 bits are 100)
 8000f0e:	f107 0208 	add.w	r2, r7, #8
 8000f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f14:	4413      	add	r3, r2
 8000f16:	2204      	movs	r2, #4
 8000f18:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 24; i++) { // Iterate 24 times for 24 WS2812B data bits
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	2b17      	cmp	r3, #23
 8000f24:	dde2      	ble.n	8000eec <_ZL20ws2812_send_spi_datahhh+0x28>
        }
    }

    // Blocking SPI transmit
    HAL_SPI_Transmit(&hspi2, spi_tx_buffer, 24, 100); // 100ms timeout
 8000f26:	f107 0108 	add.w	r1, r7, #8
 8000f2a:	2364      	movs	r3, #100	@ 0x64
 8000f2c:	2218      	movs	r2, #24
 8000f2e:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <_ZL20ws2812_send_spi_datahhh+0x78>)
 8000f30:	f00c fc65 	bl	800d7fe <HAL_SPI_Transmit>
}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	@ 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200004e4 	.word	0x200004e4

08000f40 <_Z15WS2812_SetColorhhhh>:
 * @param r Red component (0-255)
 * @param g Green component (0-255)
 * @param b Blue component (0-255)
 * @param brightness_val Brightness (0-100). If 0, LED will be turned off and power disabled.
 */
void WS2812_SetColor(uint8_t r, uint8_t g, uint8_t b, uint8_t brightness_val) {
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4604      	mov	r4, r0
 8000f48:	4608      	mov	r0, r1
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4623      	mov	r3, r4
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	4603      	mov	r3, r0
 8000f54:	71bb      	strb	r3, [r7, #6]
 8000f56:	460b      	mov	r3, r1
 8000f58:	717b      	strb	r3, [r7, #5]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	713b      	strb	r3, [r7, #4]
    uint8_t r_scaled, g_scaled, b_scaled;

    if (brightness_val == 0 || (r == 0 && g == 0 && b == 0)) {
 8000f5e:	793b      	ldrb	r3, [r7, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d008      	beq.n	8000f76 <_Z15WS2812_SetColorhhhh+0x36>
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d11a      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d117      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d114      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
        // Turn LED completely OFF and disable 5V power
        if (s_is_led_power_on) {
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d049      	beq.n	8001012 <_Z15WS2812_SetColorhhhh+0xd2>
            // Send all zeros to ensure LED is off before cutting power,
            // though just cutting power after last command would also work.
            // This is more explicit.
            ws2812_send_spi_data(0, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ff9e 	bl	8000ec4 <_ZL20ws2812_send_spi_datahhh>
            HAL_Delay(1); // Ensure data is latched/reset (MOSI idle low > 50us)
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f007 f8ad 	bl	80080e8 <HAL_Delay>
            HAL_GPIO_WritePin(LED_5V_EN_GPIO_Port, LED_5V_EN_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2104      	movs	r1, #4
 8000f92:	4823      	ldr	r0, [pc, #140]	@ (8001020 <_Z15WS2812_SetColorhhhh+0xe0>)
 8000f94:	f008 ffbe 	bl	8009f14 <HAL_GPIO_WritePin>
            s_is_led_power_on = 0;
 8000f98:	4b20      	ldr	r3, [pc, #128]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
        }
        return; // Nothing more to do if brightness is 0 or color is black
 8000f9e:	e038      	b.n	8001012 <_Z15WS2812_SetColorhhhh+0xd2>
    }

    // Ensure 5V power is ON if it wasn't already
    if (!s_is_led_power_on) {
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10a      	bne.n	8000fbe <_Z15WS2812_SetColorhhhh+0x7e>
        HAL_GPIO_WritePin(LED_5V_EN_GPIO_Port, LED_5V_EN_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2104      	movs	r1, #4
 8000fac:	481c      	ldr	r0, [pc, #112]	@ (8001020 <_Z15WS2812_SetColorhhhh+0xe0>)
 8000fae:	f008 ffb1 	bl	8009f14 <HAL_GPIO_WritePin>
        HAL_Delay(1); // Allow power to stabilize (adjust if too long/short)
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f007 f898 	bl	80080e8 <HAL_Delay>
        s_is_led_power_on = 1;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
    }

    // Clamp brightness
    if (brightness_val > 100) {
 8000fbe:	793b      	ldrb	r3, [r7, #4]
 8000fc0:	2b64      	cmp	r3, #100	@ 0x64
 8000fc2:	d901      	bls.n	8000fc8 <_Z15WS2812_SetColorhhhh+0x88>
        brightness_val = 100;
 8000fc4:	2364      	movs	r3, #100	@ 0x64
 8000fc6:	713b      	strb	r3, [r7, #4]
    }

    // Scale colors by brightness
    // (uint32_t) cast is important to avoid overflow during multiplication before division
    r_scaled = (uint8_t)(((uint32_t)r * brightness_val) / 100);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	793a      	ldrb	r2, [r7, #4]
 8000fcc:	fb02 f303 	mul.w	r3, r2, r3
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	73fb      	strb	r3, [r7, #15]
    g_scaled = (uint8_t)(((uint32_t)g * brightness_val) / 100);
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	793a      	ldrb	r2, [r7, #4]
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe8:	095b      	lsrs	r3, r3, #5
 8000fea:	73bb      	strb	r3, [r7, #14]
    b_scaled = (uint8_t)(((uint32_t)b * brightness_val) / 100);
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	793a      	ldrb	r2, [r7, #4]
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	737b      	strb	r3, [r7, #13]

    ws2812_send_spi_data(r_scaled, g_scaled, b_scaled);
 8000ffe:	7b7a      	ldrb	r2, [r7, #13]
 8001000:	7bb9      	ldrb	r1, [r7, #14]
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <_ZL20ws2812_send_spi_datahhh>
    // After sending data, a low signal on DIN for >50µs is needed to latch the data
    // and reset the internal shift registers for the next data.
    // HAL_SPI_Transmit is blocking. After it finishes, the SPI MOSI line will
    // typically return to its idle state (which should be low for CPOL=Low).
    // A HAL_Delay(1) is much longer than 50µs and will ensure this latch/reset.
    HAL_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f007 f86c 	bl	80080e8 <HAL_Delay>
 8001010:	e000      	b.n	8001014 <_Z15WS2812_SetColorhhhh+0xd4>
        return; // Nothing more to do if brightness is 0 or color is black
 8001012:	bf00      	nop
    // Power (PC2) remains ON until explicitly turned off by calling with brightness 0 or black.
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	2000027c 	.word	0x2000027c
 8001020:	48000800 	.word	0x48000800
 8001024:	51eb851f 	.word	0x51eb851f

08001028 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001044:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001074:	4a29      	ldr	r2, [pc, #164]	@ (800111c <MX_ADC1_Init+0xc0>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001078:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <MX_ADC1_Init+0xbc>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001084:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800108a:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <MX_ADC1_Init+0xbc>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001090:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001092:	2204      	movs	r2, #4
 8001094:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001096:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001098:	2200      	movs	r2, #0
 800109a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109c:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <MX_ADC1_Init+0xbc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b0:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010bc:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d2:	4811      	ldr	r0, [pc, #68]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010d4:	f007 fa42 	bl	800855c <HAL_ADC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80010de:	f001 fd65 	bl	8002bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_ADC1_Init+0xc4>)
 80010e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e6:	2306      	movs	r3, #6
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80010ea:	2304      	movs	r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ee:	237f      	movs	r3, #127	@ 0x7f
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f2:	2304      	movs	r3, #4
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001100:	f007 fc9a 	bl	8008a38 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800110a:	f001 fd4f 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000280 	.word	0x20000280
 800111c:	50040000 	.word	0x50040000
 8001120:	19200040 	.word	0x19200040

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09c      	sub	sp, #112	@ 0x70
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2250      	movs	r2, #80	@ 0x50
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00f fb2d 	bl	80107a4 <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a1c      	ldr	r2, [pc, #112]	@ (80011c0 <HAL_ADC_MspInit+0x9c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d131      	bne.n	80011b8 <HAL_ADC_MspInit+0x94>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001154:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001158:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800115a:	2318      	movs	r3, #24
 800115c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800115e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001162:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001164:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001168:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800116a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800116e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8001170:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001174:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001176:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800117a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4618      	mov	r0, r3
 8001182:	f00b fe08 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 800118c:	f001 fd0e 	bl	8002bac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001190:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001194:	f7ff ff48 	bl	8001028 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff ff45 	bl	8001028 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BAT_SENSE_Pin;
 800119e:	2302      	movs	r3, #2
 80011a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a2:	2303      	movs	r3, #3
 80011a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(BAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f008 fd26 	bl	8009c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3770      	adds	r7, #112	@ 0x70
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	50040000 	.word	0x50040000

080011c4 <LL_AHB1_GRP1_EnableClock>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4313      	orrs	r3, r2
 80011da:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e8:	68fb      	ldr	r3, [r7, #12]
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011fa:	2004      	movs	r0, #4
 80011fc:	f7ff ffe2 	bl	80011c4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff ffdf 	bl	80011c4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	200b      	movs	r0, #11
 800120c:	f008 fa4b 	bl	80096a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001210:	200b      	movs	r0, #11
 8001212:	f008 fa62 	bl	80096da <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}

0800121a <LL_AHB2_GRP1_EnableClock>:
{
 800121a:	b480      	push	{r7}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001228:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4313      	orrs	r3, r2
 8001230:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001236:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4013      	ands	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	2001      	movs	r0, #1
 8001262:	f7ff ffda 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2004      	movs	r0, #4
 8001268:	f7ff ffd7 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	2002      	movs	r0, #2
 800126e:	f7ff ffd4 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2080      	movs	r0, #128	@ 0x80
 8001274:	f7ff ffd1 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001278:	2008      	movs	r0, #8
 800127a:	f7ff ffce 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800127e:	2010      	movs	r0, #16
 8001280:	f7ff ffcb 	bl	800121a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN2_Pin|EN1_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	210c      	movs	r1, #12
 8001288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128c:	f008 fe42 	bl	8009f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_5V_EN_Pin|nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2184      	movs	r1, #132	@ 0x84
 8001294:	487e      	ldr	r0, [pc, #504]	@ (8001490 <MX_GPIO_Init+0x244>)
 8001296:	f008 fe3d 	bl	8009f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_RESET_GPIO_Port, MUX_RESET_Pin, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f008 fe36 	bl	8009f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2102      	movs	r1, #2
 80012ac:	4879      	ldr	r0, [pc, #484]	@ (8001494 <MX_GPIO_Init+0x248>)
 80012ae:	f008 fe31 	bl	8009f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2102      	movs	r1, #2
 80012b6:	4878      	ldr	r0, [pc, #480]	@ (8001498 <MX_GPIO_Init+0x24c>)
 80012b8:	f008 fe2c 	bl	8009f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN2_Pin MUX_RESET_Pin EN1_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|MUX_RESET_Pin|EN1_Pin;
 80012bc:	f248 030c 	movw	r3, #32780	@ 0x800c
 80012c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d6:	f008 fc95 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_5V_EN_Pin */
  GPIO_InitStruct.Pin = LED_5V_EN_Pin;
 80012da:	2304      	movs	r3, #4
 80012dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e6:	2302      	movs	r3, #2
 80012e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_5V_EN_GPIO_Port, &GPIO_InitStruct);
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4868      	ldr	r0, [pc, #416]	@ (8001490 <MX_GPIO_Init+0x244>)
 80012f0:	f008 fc88 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON5_Pin */
  GPIO_InitStruct.Pin = BUTTON5_Pin;
 80012f4:	2308      	movs	r3, #8
 80012f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON5_GPIO_Port, &GPIO_InitStruct);
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4863      	ldr	r0, [pc, #396]	@ (8001494 <MX_GPIO_Init+0x248>)
 8001308:	f008 fc7c 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800130c:	23b0      	movs	r3, #176	@ 0xb0
 800130e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001310:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001316:	2301      	movs	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	485f      	ldr	r0, [pc, #380]	@ (800149c <MX_GPIO_Init+0x250>)
 8001320:	f008 fc70 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 8001324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001328:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800132e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4855      	ldr	r0, [pc, #340]	@ (8001490 <MX_GPIO_Init+0x244>)
 800133a:	f008 fc63 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT13_Pin nFAULT17_Pin nFAULT3_Pin nFAULT4_Pin
                           nFAULT14_Pin nFAULT1_Pin */
  GPIO_InitStruct.Pin = nFAULT13_Pin|nFAULT17_Pin|nFAULT3_Pin|nFAULT4_Pin
 800133e:	f246 430b 	movw	r3, #25611	@ 0x640b
 8001342:	607b      	str	r3, [r7, #4]
                          |nFAULT14_Pin|nFAULT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001348:	2301      	movs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4853      	ldr	r0, [pc, #332]	@ (80014a0 <MX_GPIO_Init+0x254>)
 8001352:	f008 fc57 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT15_Pin nFAULT8_Pin */
  GPIO_InitStruct.Pin = nFAULT15_Pin|nFAULT8_Pin;
 8001356:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800135a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001360:	2301      	movs	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	484c      	ldr	r0, [pc, #304]	@ (800149c <MX_GPIO_Init+0x250>)
 800136a:	f008 fc4b 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT9_Pin nFAULT7_Pin nFAULT6_Pin */
  GPIO_InitStruct.Pin = nFAULT9_Pin|nFAULT7_Pin|nFAULT6_Pin;
 800136e:	2315      	movs	r3, #21
 8001370:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	4846      	ldr	r0, [pc, #280]	@ (8001498 <MX_GPIO_Init+0x24c>)
 8001380:	f008 fc40 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : nFAULT12_Pin */
  GPIO_InitStruct.Pin = nFAULT12_Pin;
 8001384:	2310      	movs	r3, #16
 8001386:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138c:	2301      	movs	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(nFAULT12_GPIO_Port, &GPIO_InitStruct);
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4619      	mov	r1, r3
 8001394:	483e      	ldr	r0, [pc, #248]	@ (8001490 <MX_GPIO_Init+0x244>)
 8001396:	f008 fc35 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT11_Pin nFAULT16_Pin nFAULT0_Pin nFAULT10_Pin */
  GPIO_InitStruct.Pin = nFAULT11_Pin|nFAULT16_Pin|nFAULT0_Pin|nFAULT10_Pin;
 800139a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800139e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b0:	f008 fc28 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : nFAULT2_Pin */
  GPIO_InitStruct.Pin = nFAULT2_Pin;
 80013b4:	2301      	movs	r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013bc:	2301      	movs	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(nFAULT2_GPIO_Port, &GPIO_InitStruct);
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4619      	mov	r1, r3
 80013c4:	4833      	ldr	r0, [pc, #204]	@ (8001494 <MX_GPIO_Init+0x248>)
 80013c6:	f008 fc1d 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_SENSE_EN_Pin */
  GPIO_InitStruct.Pin = BAT_SENSE_EN_Pin;
 80013ca:	2302      	movs	r3, #2
 80013cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BAT_SENSE_EN_GPIO_Port, &GPIO_InitStruct);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	482d      	ldr	r0, [pc, #180]	@ (8001494 <MX_GPIO_Init+0x248>)
 80013e0:	f008 fc10 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_FRONT_Pin */
  GPIO_InitStruct.Pin = nSLEEP_FRONT_Pin;
 80013e4:	2302      	movs	r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(nSLEEP_FRONT_GPIO_Port, &GPIO_InitStruct);
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	4827      	ldr	r0, [pc, #156]	@ (8001498 <MX_GPIO_Init+0x24c>)
 80013fa:	f008 fc03 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin SWITCH2_Pin CHARGE_STATUS_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|SWITCH2_Pin|CHARGE_STATUS_Pin;
 80013fe:	f249 0310 	movw	r3, #36880	@ 0x9010
 8001402:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4823      	ldr	r0, [pc, #140]	@ (80014a0 <MX_GPIO_Init+0x254>)
 8001412:	f008 fbf7 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_REAR_Pin */
  GPIO_InitStruct.Pin = nSLEEP_REAR_Pin;
 8001416:	2380      	movs	r3, #128	@ 0x80
 8001418:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(nSLEEP_REAR_GPIO_Port, &GPIO_InitStruct);
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4819      	ldr	r0, [pc, #100]	@ (8001490 <MX_GPIO_Init+0x244>)
 800142c:	f008 fbea 	bl	8009c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH1_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin;
 8001430:	2308      	movs	r3, #8
 8001432:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4619      	mov	r1, r3
 8001440:	4815      	ldr	r0, [pc, #84]	@ (8001498 <MX_GPIO_Init+0x24c>)
 8001442:	f008 fbdf 	bl	8009c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2009      	movs	r0, #9
 800144c:	f008 f92b 	bl	80096a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001450:	2009      	movs	r0, #9
 8001452:	f008 f942 	bl	80096da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	200a      	movs	r0, #10
 800145c:	f008 f923 	bl	80096a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001460:	200a      	movs	r0, #10
 8001462:	f008 f93a 	bl	80096da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2017      	movs	r0, #23
 800146c:	f008 f91b 	bl	80096a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001470:	2017      	movs	r0, #23
 8001472:	f008 f932 	bl	80096da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2028      	movs	r0, #40	@ 0x28
 800147c:	f008 f913 	bl	80096a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001480:	2028      	movs	r0, #40	@ 0x28
 8001482:	f008 f92a 	bl	80096da <HAL_NVIC_EnableIRQ>

}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	48000800 	.word	0x48000800
 8001494:	48001c00 	.word	0x48001c00
 8001498:	48001000 	.word	0x48001000
 800149c:	48000400 	.word	0x48000400
 80014a0:	48000c00 	.word	0x48000c00

080014a4 <LL_AHB2_GRP1_EnableClock>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c8:	68fb      	ldr	r3, [r7, #12]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <MX_I2C1_Init+0x74>)
 800150e:	4a1c      	ldr	r2, [pc, #112]	@ (8001580 <MX_I2C1_Init+0x78>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0070133F;
 8001512:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_I2C1_Init+0x74>)
 8001514:	4a1b      	ldr	r2, [pc, #108]	@ (8001584 <MX_I2C1_Init+0x7c>)
 8001516:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <MX_I2C1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_I2C1_Init+0x74>)
 8001520:	2201      	movs	r2, #1
 8001522:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_I2C1_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <MX_I2C1_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_I2C1_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153c:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <MX_I2C1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001542:	480e      	ldr	r0, [pc, #56]	@ (800157c <MX_I2C1_Init+0x74>)
 8001544:	f008 fd3a 	bl	8009fbc <HAL_I2C_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800154e:	f001 fb2d 	bl	8002bac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001552:	2100      	movs	r1, #0
 8001554:	4809      	ldr	r0, [pc, #36]	@ (800157c <MX_I2C1_Init+0x74>)
 8001556:	f009 fe43 	bl	800b1e0 <HAL_I2CEx_ConfigAnalogFilter>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001560:	f001 fb24 	bl	8002bac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001564:	2100      	movs	r1, #0
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_I2C1_Init+0x74>)
 8001568:	f009 fe85 	bl	800b276 <HAL_I2CEx_ConfigDigitalFilter>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001572:	f001 fb1b 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002e4 	.word	0x200002e4
 8001580:	40005400 	.word	0x40005400
 8001584:	0070133f 	.word	0x0070133f

08001588 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_I2C3_Init+0x74>)
 800158e:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <MX_I2C3_Init+0x78>)
 8001590:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0070133F;
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <MX_I2C3_Init+0x74>)
 8001594:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <MX_I2C3_Init+0x7c>)
 8001596:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_I2C3_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015c2:	480e      	ldr	r0, [pc, #56]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015c4:	f008 fcfa 	bl	8009fbc <HAL_I2C_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015ce:	f001 faed 	bl	8002bac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4809      	ldr	r0, [pc, #36]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015d6:	f009 fe03 	bl	800b1e0 <HAL_I2CEx_ConfigAnalogFilter>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015e0:	f001 fae4 	bl	8002bac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015e4:	2100      	movs	r1, #0
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015e8:	f009 fe45 	bl	800b276 <HAL_I2CEx_ConfigDigitalFilter>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015f2:	f001 fadb 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000338 	.word	0x20000338
 8001600:	40005c00 	.word	0x40005c00
 8001604:	0070133f 	.word	0x0070133f

08001608 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b09c      	sub	sp, #112	@ 0x70
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2250      	movs	r2, #80	@ 0x50
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f00f f8bb 	bl	80107a4 <memset>
  if(i2cHandle->Instance==I2C1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a2d      	ldr	r2, [pc, #180]	@ (80016e8 <HAL_I2C_MspInit+0xe0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d127      	bne.n	8001688 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001638:	2304      	movs	r3, #4
 800163a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800163c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4618      	mov	r0, r3
 8001648:	f00b fba5 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001652:	f001 faab 	bl	8002bac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2002      	movs	r0, #2
 8001658:	f7ff ff24 	bl	80014a4 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800165c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001660:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001662:	2312      	movs	r3, #18
 8001664:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166e:	2304      	movs	r3, #4
 8001670:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001676:	4619      	mov	r1, r3
 8001678:	481c      	ldr	r0, [pc, #112]	@ (80016ec <HAL_I2C_MspInit+0xe4>)
 800167a:	f008 fac3 	bl	8009c04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001682:	f7ff ff28 	bl	80014d6 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001686:	e02a      	b.n	80016de <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C3)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a18      	ldr	r2, [pc, #96]	@ (80016f0 <HAL_I2C_MspInit+0xe8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d125      	bne.n	80016de <HAL_I2C_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001692:	2308      	movs	r3, #8
 8001694:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001696:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00b fb78 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 80016ac:	f001 fa7e 	bl	8002bac <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	2004      	movs	r0, #4
 80016b2:	f7ff fef7 	bl	80014a4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80016b6:	2303      	movs	r3, #3
 80016b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016c6:	2304      	movs	r3, #4
 80016c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016ce:	4619      	mov	r1, r3
 80016d0:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <HAL_I2C_MspInit+0xec>)
 80016d2:	f008 fa97 	bl	8009c04 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016d6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80016da:	f7ff fefc 	bl	80014d6 <LL_APB1_GRP1_EnableClock>
}
 80016de:	bf00      	nop
 80016e0:	3770      	adds	r7, #112	@ 0x70
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40005400 	.word	0x40005400
 80016ec:	48000400 	.word	0x48000400
 80016f0:	40005c00 	.word	0x40005c00
 80016f4:	48000800 	.word	0x48000800

080016f8 <LL_AHB3_GRP1_EnableClock>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001704:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001706:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4313      	orrs	r3, r2
 800170e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001714:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800171c:	68fb      	ldr	r3, [r7, #12]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_IPCC_Init+0x20>)
 8001732:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <MX_IPCC_Init+0x24>)
 8001734:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <MX_IPCC_Init+0x20>)
 8001738:	f009 fdea 	bl	800b310 <HAL_IPCC_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001742:	f001 fa33 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000038c 	.word	0x2000038c
 8001750:	58000c00 	.word	0x58000c00

08001754 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <HAL_IPCC_MspInit+0x44>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d113      	bne.n	800178e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001766:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800176a:	f7ff ffc5 	bl	80016f8 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	202c      	movs	r0, #44	@ 0x2c
 8001774:	f007 ff97 	bl	80096a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001778:	202c      	movs	r0, #44	@ 0x2c
 800177a:	f007 ffae 	bl	80096da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	202d      	movs	r0, #45	@ 0x2d
 8001784:	f007 ff8f 	bl	80096a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001788:	202d      	movs	r0, #45	@ 0x2d
 800178a:	f007 ffa6 	bl	80096da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	58000c00 	.word	0x58000c00

0800179c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80017b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80017bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <ITM_SendChar+0x2c>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <ITM_SendChar+0x2e>
 80017c8:	2300      	movs	r3, #0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d010      	beq.n	80017f0 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80017ce:	e000      	b.n	80017d2 <ITM_SendChar+0x36>
    {
      __NOP();
 80017d0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80017d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f4      	bne.n	80017d0 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80017e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_ZN14DRV8214_ConfigC1Ev>:

enum ControlMode { PWM, PH_EN };
enum RegulationMode { CURRENT_FIXED, CURRENT_CYCLES, SPEED, VOLTAGE };
// when using I2C control, the speed/voltage cannot be controlled if using the CURRENT_FIXED or CURRENT_CYCLES regulation mode

struct DRV8214_Config {
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	705a      	strb	r2, [r3, #1]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2202      	movs	r2, #2
 8001816:	709a      	strb	r2, [r3, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	70da      	strb	r2, [r3, #3]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	721a      	strb	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	725a      	strb	r2, [r3, #9]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	729a      	strb	r2, [r3, #10]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	72da      	strb	r2, [r3, #11]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2203      	movs	r2, #3
 8001842:	731a      	strb	r2, [r3, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2280      	movs	r2, #128	@ 0x80
 8001860:	771a      	strb	r2, [r3, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	775a      	strb	r2, [r3, #29]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800186e:	83da      	strh	r2, [r3, #30]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2020 	strb.w	r2, [r3, #32]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	845a      	strh	r2, [r3, #34]	@ 0x22
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	221e      	movs	r2, #30
 8001882:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2203      	movs	r2, #3
 800188a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_ZN7DRV8214C1Ehhthhht>:
        // Private functions
        void drvPrint(const char* message);

    public:
        // Constructor
        DRV8214(uint8_t addr, uint8_t id, uint16_t sense_resistor, uint8_t ripples, uint8_t rm, uint8_t reduction_ratio, uint16_t rpm) : address(addr), driver_ID(id), Ripropri(sense_resistor), ripples_per_revolution(ripples), motor_internal_resistance(rm), motor_reduction_ratio(reduction_ratio), motor_max_rpm(rpm) {}
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	4608      	mov	r0, r1
 80018bc:	4611      	mov	r1, r2
 80018be:	461a      	mov	r2, r3
 80018c0:	4603      	mov	r3, r0
 80018c2:	70fb      	strb	r3, [r7, #3]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70bb      	strb	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	803b      	strh	r3, [r7, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	78ba      	ldrb	r2, [r7, #2]
 80018d6:	705a      	strb	r2, [r3, #1]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	883a      	ldrh	r2, [r7, #0]
 80018dc:	805a      	strh	r2, [r3, #2]
 80018de:	7c3b      	ldrb	r3, [r7, #16]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	809a      	strh	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7d3a      	ldrb	r2, [r7, #20]
 80018ea:	719a      	strb	r2, [r3, #6]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7e3a      	ldrb	r2, [r7, #24]
 80018f0:	71da      	strb	r2, [r3, #7]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	8bba      	ldrh	r2, [r7, #28]
 80018f6:	811a      	strh	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	330c      	adds	r3, #12
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff7e 	bl	80017fe <_ZN14DRV8214_ConfigC1Ev>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190e:	b0b9      	sub	sp, #228	@ 0xe4
 8001910:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001912:	f006 fb63 	bl	8007fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001916:	f000 fcc3 	bl	80022a0 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800191a:	f000 fd37 	bl	800238c <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800191e:	f7ff ff05 	bl	800172c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001922:	f7ff fc93 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 8001926:	f7ff fc66 	bl	80011f6 <MX_DMA_Init>
  MX_ADC1_Init();
 800192a:	f7ff fb97 	bl	800105c <MX_ADC1_Init>
  MX_I2C1_Init();
 800192e:	f7ff fdeb 	bl	8001508 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001932:	f7ff fe29 	bl	8001588 <MX_I2C3_Init>
  MX_RTC_Init();
 8001936:	f001 f9cd 	bl	8002cd4 <MX_RTC_Init>
  MX_TIM2_Init();
 800193a:	f001 fd0b 	bl	8003354 <MX_TIM2_Init>
  MX_SPI2_Init();
 800193e:	f001 fa63 	bl	8002e08 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001942:	f001 fd9f 	bl	8003484 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf(" "); // First empty prinf because a bug causes the first character to be lost
 8001946:	2020      	movs	r0, #32
 8001948:	f00e fec6 	bl	80106d8 <putchar>
  // Default GPIO states
  HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	2102      	movs	r1, #2
 8001950:	48c0      	ldr	r0, [pc, #768]	@ (8001c54 <main+0x348>)
 8001952:	f008 fadf 	bl	8009f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	2180      	movs	r1, #128	@ 0x80
 800195a:	48bf      	ldr	r0, [pc, #764]	@ (8001c58 <main+0x34c>)
 800195c:	f008 fada 	bl	8009f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2102      	movs	r1, #2
 8001964:	48bd      	ldr	r0, [pc, #756]	@ (8001c5c <main+0x350>)
 8001966:	f008 fad5 	bl	8009f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_RESET_GPIO_Port, MUX_RESET_Pin, GPIO_PIN_SET);
 800196a:	2201      	movs	r2, #1
 800196c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001974:	f008 face 	bl	8009f14 <HAL_GPIO_WritePin>

  // Start the timer in interrupt mode
  // Example: if you want to measure every 5 seconds, and your timer is TIM2
  // Configure TIM2 in CubeMX for a 5-second period (e.g., Prescaler & Period values)
  // and enable its update interrupt.
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) { Error_Handler();}
 8001978:	48b9      	ldr	r0, [pc, #740]	@ (8001c60 <main+0x354>)
 800197a:	f00c fb93 	bl	800e0a4 <HAL_TIM_Base_Start_IT>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf14      	ite	ne
 8001984:	2301      	movne	r3, #1
 8001986:	2300      	moveq	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <main+0x86>
 800198e:	f001 f90d 	bl	8002bac <Error_Handler>

  printf("Initializing PCA9546A multiplexer... ");
 8001992:	48b4      	ldr	r0, [pc, #720]	@ (8001c64 <main+0x358>)
 8001994:	f00e fe8e 	bl	80106b4 <iprintf>
  // Initialize the I2C multiplexer structure
  i2c_multiplexer.hi2c = &hi2c1; // Assign the I2C peripheral handle
 8001998:	4bb3      	ldr	r3, [pc, #716]	@ (8001c68 <main+0x35c>)
 800199a:	4ab4      	ldr	r2, [pc, #720]	@ (8001c6c <main+0x360>)
 800199c:	601a      	str	r2, [r3, #0]
  i2c_multiplexer.rst_port = MUX_RESET_GPIO_Port;  // From main.h
 800199e:	4bb2      	ldr	r3, [pc, #712]	@ (8001c68 <main+0x35c>)
 80019a0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019a4:	605a      	str	r2, [r3, #4]
  i2c_multiplexer.rst_pin = MUX_RESET_Pin;         // From main.h
 80019a6:	4bb0      	ldr	r3, [pc, #704]	@ (8001c68 <main+0x35c>)
 80019a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019ac:	811a      	strh	r2, [r3, #8]
  i2c_multiplexer.addr_offset = 0;
 80019ae:	4bae      	ldr	r3, [pc, #696]	@ (8001c68 <main+0x35c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	729a      	strb	r2, [r3, #10]

  // select the desired chanel based on the switch 1 position
  if (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_SET) {
 80019b4:	2108      	movs	r1, #8
 80019b6:	48a7      	ldr	r0, [pc, #668]	@ (8001c54 <main+0x348>)
 80019b8:	f008 fa94 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	bf0c      	ite	eq
 80019c2:	2301      	moveq	r3, #1
 80019c4:	2300      	movne	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00d      	beq.n	80019e8 <main+0xdc>
    i2c_channel_to_use = 0; // Channel 1
 80019cc:	4ba8      	ldr	r3, [pc, #672]	@ (8001c70 <main+0x364>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_SET);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2102      	movs	r1, #2
 80019d6:	489f      	ldr	r0, [pc, #636]	@ (8001c54 <main+0x348>)
 80019d8:	f008 fa9c 	bl	8009f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2180      	movs	r1, #128	@ 0x80
 80019e0:	489d      	ldr	r0, [pc, #628]	@ (8001c58 <main+0x34c>)
 80019e2:	f008 fa97 	bl	8009f14 <HAL_GPIO_WritePin>
 80019e6:	e00c      	b.n	8001a02 <main+0xf6>
  } else {
    i2c_channel_to_use = 1; // Channel 0
 80019e8:	4ba1      	ldr	r3, [pc, #644]	@ (8001c70 <main+0x364>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2102      	movs	r1, #2
 80019f2:	4898      	ldr	r0, [pc, #608]	@ (8001c54 <main+0x348>)
 80019f4:	f008 fa8e 	bl	8009f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_SET);
 80019f8:	2201      	movs	r2, #1
 80019fa:	2180      	movs	r1, #128	@ 0x80
 80019fc:	4896      	ldr	r0, [pc, #600]	@ (8001c58 <main+0x34c>)
 80019fe:	f008 fa89 	bl	8009f14 <HAL_GPIO_WritePin>
  }
  if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
 8001a02:	4b9b      	ldr	r3, [pc, #620]	@ (8001c70 <main+0x364>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	4619      	mov	r1, r3
 8001a08:	4897      	ldr	r0, [pc, #604]	@ (8001c68 <main+0x35c>)
 8001a0a:	f00e f88d 	bl	800fb28 <_Z14i2c_mux_selectP7i2c_muxi>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <main+0x120>
      printf("PCA9546A Initialized Successfully! Channel %d selected.\n", i2c_channel_to_use);
 8001a1e:	4b94      	ldr	r3, [pc, #592]	@ (8001c70 <main+0x364>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4619      	mov	r1, r3
 8001a24:	4893      	ldr	r0, [pc, #588]	@ (8001c74 <main+0x368>)
 8001a26:	f00e fe45 	bl	80106b4 <iprintf>
 8001a2a:	e005      	b.n	8001a38 <main+0x12c>
  } else {
      printf("Failed to select channel %d on I2C multiplexer.\n", i2c_channel_to_use);
 8001a2c:	4b90      	ldr	r3, [pc, #576]	@ (8001c70 <main+0x364>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	4891      	ldr	r0, [pc, #580]	@ (8001c78 <main+0x36c>)
 8001a34:	f00e fe3e 	bl	80106b4 <iprintf>
  }

  // I2C1 scanning
  I2C_Scan(&hi2c1);
 8001a38:	488c      	ldr	r0, [pc, #560]	@ (8001c6c <main+0x360>)
 8001a3a:	f000 fd57 	bl	80024ec <_Z8I2C_ScanP19__I2C_HandleTypeDef>
  // I2C3 scanning
  I2C_Scan(&hi2c3);
 8001a3e:	488f      	ldr	r0, [pc, #572]	@ (8001c7c <main+0x370>)
 8001a40:	f000 fd54 	bl	80024ec <_Z8I2C_ScanP19__I2C_HandleTypeDef>

  printf("Initializing DRV8214 drivers...\n");
 8001a44:	488e      	ldr	r0, [pc, #568]	@ (8001c80 <main+0x374>)
 8001a46:	f00e fea5 	bl	8010794 <puts>
  // Pass the HAL I2C handle to the I2C platform layer
  drv8214_i2c_set_handle(&hi2c1); // &hi2c1 is defined in Core/Src/i2c.c and declared in Core/Inc/i2c.h
 8001a4a:	4888      	ldr	r0, [pc, #544]	@ (8001c6c <main+0x360>)
 8001a4c:	f006 f9e8 	bl	8007e20 <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef>
  for (int i = 0; i < NUM_DRIVERS; i++) {  // Initialize each driver
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a56:	e064      	b.n	8001b22 <main+0x216>
    driver_configs[i] = DRV8214_Config();
 8001a58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a5c:	222c      	movs	r2, #44	@ 0x2c
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f00e fe9f 	bl	80107a4 <memset>
 8001a66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fec7 	bl	80017fe <_ZN14DRV8214_ConfigC1Ev>
 8001a70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001a74:	222c      	movs	r2, #44	@ 0x2c
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	4a82      	ldr	r2, [pc, #520]	@ (8001c84 <main+0x378>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001a82:	469c      	mov	ip, r3
 8001a84:	f104 0e20 	add.w	lr, r4, #32
 8001a88:	4665      	mov	r5, ip
 8001a8a:	4626      	mov	r6, r4
 8001a8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a8e:	6028      	str	r0, [r5, #0]
 8001a90:	6069      	str	r1, [r5, #4]
 8001a92:	60aa      	str	r2, [r5, #8]
 8001a94:	60eb      	str	r3, [r5, #12]
 8001a96:	3410      	adds	r4, #16
 8001a98:	f10c 0c10 	add.w	ip, ip, #16
 8001a9c:	4574      	cmp	r4, lr
 8001a9e:	d1f3      	bne.n	8001a88 <main+0x17c>
 8001aa0:	4662      	mov	r2, ip
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	cb03      	ldmia	r3!, {r0, r1}
 8001aa6:	6010      	str	r0, [r2, #0]
 8001aa8:	6051      	str	r1, [r2, #4]
 8001aaa:	8819      	ldrh	r1, [r3, #0]
 8001aac:	789b      	ldrb	r3, [r3, #2]
 8001aae:	8111      	strh	r1, [r2, #8]
 8001ab0:	7293      	strb	r3, [r2, #10]
    if (drivers[i].init(driver_configs[i]) == DRV8214_OK) {
 8001ab2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	1a9b      	subs	r3, r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4a72      	ldr	r2, [pc, #456]	@ (8001c88 <main+0x37c>)
 8001ac0:	441a      	add	r2, r3
 8001ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ac6:	212c      	movs	r1, #44	@ 0x2c
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	496d      	ldr	r1, [pc, #436]	@ (8001c84 <main+0x378>)
 8001ace:	440b      	add	r3, r1
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f004 fbb6 	bl	8006244 <_ZN7DRV82144initERK14DRV8214_Config>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d010      	beq.n	8001b0a <main+0x1fe>
      drivers[i].resetFaultFlags();
 8001ae8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4a64      	ldr	r2, [pc, #400]	@ (8001c88 <main+0x37c>)
 8001af6:	4413      	add	r3, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 ff8f 	bl	8006a1c <_ZN7DRV821415resetFaultFlagsEv>
      printf("DRV8214 driver %d initialized successfully!\n", i);
 8001afe:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001b02:	4862      	ldr	r0, [pc, #392]	@ (8001c8c <main+0x380>)
 8001b04:	f00e fdd6 	bl	80106b4 <iprintf>
 8001b08:	e006      	b.n	8001b18 <main+0x20c>
    } else {
      printf("Failed to initialize DRV8214 driver %d.\n", i);
 8001b0a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001b0e:	4860      	ldr	r0, [pc, #384]	@ (8001c90 <main+0x384>)
 8001b10:	f00e fdd0 	bl	80106b4 <iprintf>
      Error_Handler();
 8001b14:	f001 f84a 	bl	8002bac <Error_Handler>
  for (int i = 0; i < NUM_DRIVERS; i++) {  // Initialize each driver
 8001b18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	dd96      	ble.n	8001a58 <main+0x14c>
    }
  }

  printf("Initializing BMI270 IMU... ");
 8001b2a:	485a      	ldr	r0, [pc, #360]	@ (8001c94 <main+0x388>)
 8001b2c:	f00e fdc2 	bl	80106b4 <iprintf>
  bmi2_set_i2c_handle(&hi2c3);
 8001b30:	4852      	ldr	r0, [pc, #328]	@ (8001c7c <main+0x370>)
 8001b32:	f004 fadd 	bl	80060f0 <bmi2_set_i2c_handle>
  // Configure the bmi2_dev structure
  bmi270_sensor.intf_ptr = &hi2c3; // Pass a pointer to the I2C HAL handle
 8001b36:	4b58      	ldr	r3, [pc, #352]	@ (8001c98 <main+0x38c>)
 8001b38:	4a50      	ldr	r2, [pc, #320]	@ (8001c7c <main+0x370>)
 8001b3a:	605a      	str	r2, [r3, #4]
  bmi270_sensor.intf = BMI2_I2C_INTF;
 8001b3c:	4b56      	ldr	r3, [pc, #344]	@ (8001c98 <main+0x38c>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	725a      	strb	r2, [r3, #9]
  bmi270_sensor.read = bmi2_i2c_read;
 8001b42:	4b55      	ldr	r3, [pc, #340]	@ (8001c98 <main+0x38c>)
 8001b44:	4a55      	ldr	r2, [pc, #340]	@ (8001c9c <main+0x390>)
 8001b46:	639a      	str	r2, [r3, #56]	@ 0x38
  bmi270_sensor.write = bmi2_i2c_write;
 8001b48:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <main+0x38c>)
 8001b4a:	4a55      	ldr	r2, [pc, #340]	@ (8001ca0 <main+0x394>)
 8001b4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  bmi270_sensor.delay_us = bmi2_delay_us;
 8001b4e:	4b52      	ldr	r3, [pc, #328]	@ (8001c98 <main+0x38c>)
 8001b50:	4a54      	ldr	r2, [pc, #336]	@ (8001ca4 <main+0x398>)
 8001b52:	641a      	str	r2, [r3, #64]	@ 0x40
  bmi270_sensor.read_write_len = 32;    // Max burst read/write length (check BMI270 datasheet, 32 or 64 for features is common)
 8001b54:	4b50      	ldr	r3, [pc, #320]	@ (8001c98 <main+0x38c>)
 8001b56:	2220      	movs	r2, #32
 8001b58:	81da      	strh	r2, [r3, #14]
                                        // For config file loading, this might need to be larger if the API doesn't chunk it.
                                        // The bmi270_config_file is 8KB, the API chunks this. 32 should be fine for most operations.
  bmi270_sensor.config_file_ptr = NULL; // bmi270_init will assign the internal one
 8001b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c98 <main+0x38c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
  int8_t rslt_bmi = bmi270_init(&bmi270_sensor);
 8001b60:	484d      	ldr	r0, [pc, #308]	@ (8001c98 <main+0x38c>)
 8001b62:	f003 facd 	bl	8005100 <bmi270_init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  if (rslt_bmi == BMI2_OK) {
 8001b6c:	f997 30d3 	ldrsb.w	r3, [r7, #211]	@ 0xd3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d106      	bne.n	8001b82 <main+0x276>
      printf("BMI270 initialized successfully! Chip ID: 0x%X\r\n", bmi270_sensor.chip_id);
 8001b74:	4b48      	ldr	r3, [pc, #288]	@ (8001c98 <main+0x38c>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	484b      	ldr	r0, [pc, #300]	@ (8001ca8 <main+0x39c>)
 8001b7c:	f00e fd9a 	bl	80106b4 <iprintf>
 8001b80:	e007      	b.n	8001b92 <main+0x286>
  } else {
      printf("BMI270 initialization failed. Error code: %d\r\n", rslt_bmi);
 8001b82:	f997 30d3 	ldrsb.w	r3, [r7, #211]	@ 0xd3
 8001b86:	4619      	mov	r1, r3
 8001b88:	4848      	ldr	r0, [pc, #288]	@ (8001cac <main+0x3a0>)
 8001b8a:	f00e fd93 	bl	80106b4 <iprintf>
      Error_Handler();
 8001b8e:	f001 f80d 	bl	8002bac <Error_Handler>
  }

  // --- Example: Enable Accelerometer and Gyroscope ---
  if (rslt_bmi == BMI2_OK) {
 8001b92:	f997 30d3 	ldrsb.w	r3, [r7, #211]	@ 0xd3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 8097 	bne.w	8001cca <main+0x3be>
    uint8_t sens_list[] = { BMI2_ACCEL, BMI2_GYRO };
 8001b9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ba0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    rslt_bmi = bmi270_sensor_enable(sens_list, 2, &bmi270_sensor);
 8001ba2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8001c98 <main+0x38c>)
 8001ba8:	2102      	movs	r1, #2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fb06 	bl	80051bc <bmi270_sensor_enable>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    if (rslt_bmi != BMI2_OK) {
 8001bb6:	f997 30d3 	ldrsb.w	r3, [r7, #211]	@ 0xd3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <main+0x2c0>
        printf("BMI270 Sensor Enable failed. Error: %d\r\n", rslt_bmi);
 8001bbe:	f997 30d3 	ldrsb.w	r3, [r7, #211]	@ 0xd3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	483a      	ldr	r0, [pc, #232]	@ (8001cb0 <main+0x3a4>)
 8001bc6:	f00e fd75 	bl	80106b4 <iprintf>
 8001bca:	e002      	b.n	8001bd2 <main+0x2c6>
    } else {
        printf("BMI270 Accel & Gyro enabled.\r\n");
 8001bcc:	4839      	ldr	r0, [pc, #228]	@ (8001cb4 <main+0x3a8>)
 8001bce:	f00e fde1 	bl	8010794 <puts>
    }

    // Configure Accelerometer (example: 2g range, 100Hz ODR, Normal Mode)
    struct bmi2_sens_config sens_cfg;
    sens_cfg.type = BMI2_ACCEL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	713b      	strb	r3, [r7, #4]
    sens_cfg.cfg.acc.range = BMI2_ACC_RANGE_2G;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	72fb      	strb	r3, [r7, #11]
    sens_cfg.cfg.acc.odr = BMI2_ACC_ODR_100HZ;
 8001bda:	2308      	movs	r3, #8
 8001bdc:	723b      	strb	r3, [r7, #8]
    sens_cfg.cfg.acc.bwp = BMI2_ACC_NORMAL_AVG4; // Normal bandwidth parameter
 8001bde:	2302      	movs	r3, #2
 8001be0:	727b      	strb	r3, [r7, #9]
    sens_cfg.cfg.acc.filter_perf = BMI2_PERF_OPT_MODE; // Filter performance mode
 8001be2:	2301      	movs	r3, #1
 8001be4:	72bb      	strb	r3, [r7, #10]
    rslt_bmi = bmi2_set_sensor_config(&sens_cfg, 1, &bmi270_sensor);
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c98 <main+0x38c>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 ff65 	bl	8003abc <bmi2_set_sensor_config>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    if (rslt_bmi != BMI2_OK) {
 8001bf8:	f997 30d3 	ldrsb.w	r3, [r7, #211]	@ 0xd3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <main+0x302>
        printf("BMI270 Accel Config failed. Error: %d\r\n", rslt_bmi);
 8001c00:	f997 30d3 	ldrsb.w	r3, [r7, #211]	@ 0xd3
 8001c04:	4619      	mov	r1, r3
 8001c06:	482c      	ldr	r0, [pc, #176]	@ (8001cb8 <main+0x3ac>)
 8001c08:	f00e fd54 	bl	80106b4 <iprintf>
 8001c0c:	e002      	b.n	8001c14 <main+0x308>
    } else {
        printf("BMI270 Accel configured.\r\n");
 8001c0e:	482b      	ldr	r0, [pc, #172]	@ (8001cbc <main+0x3b0>)
 8001c10:	f00e fdc0 	bl	8010794 <puts>
    }
    
    // Configure Gyroscope (example: 2000dps range, 100Hz ODR, Normal Mode)
    sens_cfg.type = BMI2_GYRO;
 8001c14:	2301      	movs	r3, #1
 8001c16:	713b      	strb	r3, [r7, #4]
    sens_cfg.cfg.gyr.range = BMI2_GYR_RANGE_2000;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	733b      	strb	r3, [r7, #12]
    sens_cfg.cfg.gyr.odr = BMI2_GYR_ODR_100HZ;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	723b      	strb	r3, [r7, #8]
    sens_cfg.cfg.gyr.bwp = BMI2_GYR_NORMAL_MODE; // Normal bandwidth parameter
 8001c20:	2302      	movs	r3, #2
 8001c22:	727b      	strb	r3, [r7, #9]
    sens_cfg.cfg.gyr.filter_perf = BMI2_PERF_OPT_MODE; // Filter performance mode
 8001c24:	2301      	movs	r3, #1
 8001c26:	72bb      	strb	r3, [r7, #10]
    sens_cfg.cfg.gyr.noise_perf = BMI2_POWER_OPT_MODE; // Noise performance mode
 8001c28:	2300      	movs	r3, #0
 8001c2a:	737b      	strb	r3, [r7, #13]
    rslt_bmi = bmi2_set_sensor_config(&sens_cfg, 1, &bmi270_sensor);
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c98 <main+0x38c>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	4618      	mov	r0, r3
 8001c34:	f001 ff42 	bl	8003abc <bmi2_set_sensor_config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    if (rslt_bmi != BMI2_OK) {
 8001c3e:	f997 30d3 	ldrsb.w	r3, [r7, #211]	@ 0xd3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d03e      	beq.n	8001cc4 <main+0x3b8>
        printf("BMI270 Gyro Config Failed. Error: %d\r\n", rslt_bmi);
 8001c46:	f997 30d3 	ldrsb.w	r3, [r7, #211]	@ 0xd3
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481c      	ldr	r0, [pc, #112]	@ (8001cc0 <main+0x3b4>)
 8001c4e:	f00e fd31 	bl	80106b4 <iprintf>
 8001c52:	e03a      	b.n	8001cca <main+0x3be>
 8001c54:	48001000 	.word	0x48001000
 8001c58:	48000800 	.word	0x48000800
 8001c5c:	48001c00 	.word	0x48001c00
 8001c60:	200005ac 	.word	0x200005ac
 8001c64:	08012a48 	.word	0x08012a48
 8001c68:	200003dc 	.word	0x200003dc
 8001c6c:	200002e4 	.word	0x200002e4
 8001c70:	20000010 	.word	0x20000010
 8001c74:	08012a70 	.word	0x08012a70
 8001c78:	08012aac 	.word	0x08012aac
 8001c7c:	20000338 	.word	0x20000338
 8001c80:	08012ae0 	.word	0x08012ae0
 8001c84:	20000024 	.word	0x20000024
 8001c88:	20000450 	.word	0x20000450
 8001c8c:	08012b00 	.word	0x08012b00
 8001c90:	08012b30 	.word	0x08012b30
 8001c94:	08012b5c 	.word	0x08012b5c
 8001c98:	200003e8 	.word	0x200003e8
 8001c9c:	08006111 	.word	0x08006111
 8001ca0:	08006169 	.word	0x08006169
 8001ca4:	080061c1 	.word	0x080061c1
 8001ca8:	08012b78 	.word	0x08012b78
 8001cac:	08012bac 	.word	0x08012bac
 8001cb0:	08012bdc 	.word	0x08012bdc
 8001cb4:	08012c08 	.word	0x08012c08
 8001cb8:	08012c28 	.word	0x08012c28
 8001cbc:	08012c50 	.word	0x08012c50
 8001cc0:	08012c6c 	.word	0x08012c6c
    } else {
        printf("BMI270 Gyro configured.\r\n");
 8001cc4:	48c1      	ldr	r0, [pc, #772]	@ (8001fcc <main+0x6c0>)
 8001cc6:	f00e fd65 	bl	8010794 <puts>
    }
  }

  // Blink the LED to indicate startup finished
  WS2812_SetColor(255, 0, 0, 100);
 8001cca:	2364      	movs	r3, #100	@ 0x64
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	20ff      	movs	r0, #255	@ 0xff
 8001cd2:	f7ff f935 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 8001cd6:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001cda:	f006 fa05 	bl	80080e8 <HAL_Delay>
  WS2812_SetColor(0, 255, 0, 100);
 8001cde:	2364      	movs	r3, #100	@ 0x64
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	21ff      	movs	r1, #255	@ 0xff
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff f92b 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 8001cea:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001cee:	f006 f9fb 	bl	80080e8 <HAL_Delay>
  WS2812_SetColor(0, 0, 255, 100);
 8001cf2:	2364      	movs	r3, #100	@ 0x64
 8001cf4:	22ff      	movs	r2, #255	@ 0xff
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff f921 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 8001cfe:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001d02:	f006 f9f1 	bl	80080e8 <HAL_Delay>
  WS2812_SetColor(0, 0, 0, 100); // Turn off the LED
 8001d06:	2364      	movs	r3, #100	@ 0x64
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7ff f917 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  { 
    if (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_SET && i2c_channel_to_use == 0) {
 8001d12:	2108      	movs	r1, #8
 8001d14:	48ae      	ldr	r0, [pc, #696]	@ (8001fd0 <main+0x6c4>)
 8001d16:	f008 f8e5 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <main+0x420>
 8001d20:	4bac      	ldr	r3, [pc, #688]	@ (8001fd4 <main+0x6c8>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <main+0x420>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <main+0x422>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d07a      	beq.n	8001e28 <main+0x51c>
      i2c_channel_to_use = 1;
 8001d32:	4ba8      	ldr	r3, [pc, #672]	@ (8001fd4 <main+0x6c8>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	48a4      	ldr	r0, [pc, #656]	@ (8001fd0 <main+0x6c4>)
 8001d3e:	f008 f8e9 	bl	8009f14 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2180      	movs	r1, #128	@ 0x80
 8001d46:	48a4      	ldr	r0, [pc, #656]	@ (8001fd8 <main+0x6cc>)
 8001d48:	f008 f8e4 	bl	8009f14 <HAL_GPIO_WritePin>
      if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
 8001d4c:	4ba1      	ldr	r3, [pc, #644]	@ (8001fd4 <main+0x6c8>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	48a2      	ldr	r0, [pc, #648]	@ (8001fdc <main+0x6d0>)
 8001d54:	f00d fee8 	bl	800fb28 <_Z14i2c_mux_selectP7i2c_muxi>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bf0c      	ite	eq
 8001d5e:	2301      	moveq	r3, #1
 8001d60:	2300      	movne	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <main+0x46a>
        printf("Channel %d selected successfully!\n", i2c_channel_to_use);
 8001d68:	4b9a      	ldr	r3, [pc, #616]	@ (8001fd4 <main+0x6c8>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	489c      	ldr	r0, [pc, #624]	@ (8001fe0 <main+0x6d4>)
 8001d70:	f00e fca0 	bl	80106b4 <iprintf>
 8001d74:	e005      	b.n	8001d82 <main+0x476>
      } else {
          printf("Failed to select channel %d on I2C multiplexer.\n", i2c_channel_to_use);
 8001d76:	4b97      	ldr	r3, [pc, #604]	@ (8001fd4 <main+0x6c8>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4899      	ldr	r0, [pc, #612]	@ (8001fe4 <main+0x6d8>)
 8001d7e:	f00e fc99 	bl	80106b4 <iprintf>
      }
      HAL_Delay(10);
 8001d82:	200a      	movs	r0, #10
 8001d84:	f006 f9b0 	bl	80080e8 <HAL_Delay>
      driver_configs[i2c_channel_to_use] = DRV8214_Config();
 8001d88:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d8c:	222c      	movs	r2, #44	@ 0x2c
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f00e fd07 	bl	80107a4 <memset>
 8001d96:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fd2f 	bl	80017fe <_ZN14DRV8214_ConfigC1Ev>
 8001da0:	4b8c      	ldr	r3, [pc, #560]	@ (8001fd4 <main+0x6c8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	232c      	movs	r3, #44	@ 0x2c
 8001da8:	fb02 f303 	mul.w	r3, r2, r3
 8001dac:	4a8e      	ldr	r2, [pc, #568]	@ (8001fe8 <main+0x6dc>)
 8001dae:	4413      	add	r3, r2
 8001db0:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8001db4:	469c      	mov	ip, r3
 8001db6:	f104 0e20 	add.w	lr, r4, #32
 8001dba:	4665      	mov	r5, ip
 8001dbc:	4626      	mov	r6, r4
 8001dbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001dc0:	6028      	str	r0, [r5, #0]
 8001dc2:	6069      	str	r1, [r5, #4]
 8001dc4:	60aa      	str	r2, [r5, #8]
 8001dc6:	60eb      	str	r3, [r5, #12]
 8001dc8:	3410      	adds	r4, #16
 8001dca:	f10c 0c10 	add.w	ip, ip, #16
 8001dce:	4574      	cmp	r4, lr
 8001dd0:	d1f3      	bne.n	8001dba <main+0x4ae>
 8001dd2:	4662      	mov	r2, ip
 8001dd4:	4623      	mov	r3, r4
 8001dd6:	cb03      	ldmia	r3!, {r0, r1}
 8001dd8:	6010      	str	r0, [r2, #0]
 8001dda:	6051      	str	r1, [r2, #4]
 8001ddc:	8819      	ldrh	r1, [r3, #0]
 8001dde:	789b      	ldrb	r3, [r3, #2]
 8001de0:	8111      	strh	r1, [r2, #8]
 8001de2:	7293      	strb	r3, [r2, #10]
      	 drivers[i2c_channel_to_use].init(driver_configs[i2c_channel_to_use]);
 8001de4:	4b7b      	ldr	r3, [pc, #492]	@ (8001fd4 <main+0x6c8>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	1a9b      	subs	r3, r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fec <main+0x6e0>)
 8001df4:	441a      	add	r2, r3
 8001df6:	4b77      	ldr	r3, [pc, #476]	@ (8001fd4 <main+0x6c8>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	232c      	movs	r3, #44	@ 0x2c
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4979      	ldr	r1, [pc, #484]	@ (8001fe8 <main+0x6dc>)
 8001e04:	440b      	add	r3, r1
 8001e06:	4619      	mov	r1, r3
 8001e08:	4610      	mov	r0, r2
 8001e0a:	f004 fa1b 	bl	8006244 <_ZN7DRV82144initERK14DRV8214_Config>
      	 drivers[i2c_channel_to_use].resetFaultFlags();
 8001e0e:	4b71      	ldr	r3, [pc, #452]	@ (8001fd4 <main+0x6c8>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4a73      	ldr	r2, [pc, #460]	@ (8001fec <main+0x6e0>)
 8001e1e:	4413      	add	r3, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f004 fdfb 	bl	8006a1c <_ZN7DRV821415resetFaultFlagsEv>
 8001e26:	e089      	b.n	8001f3c <main+0x630>
   } else if (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_RESET && i2c_channel_to_use == 1) {
 8001e28:	2108      	movs	r1, #8
 8001e2a:	4869      	ldr	r0, [pc, #420]	@ (8001fd0 <main+0x6c4>)
 8001e2c:	f008 f85a 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <main+0x536>
 8001e36:	4b67      	ldr	r3, [pc, #412]	@ (8001fd4 <main+0x6c8>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <main+0x536>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <main+0x538>
 8001e42:	2300      	movs	r3, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d079      	beq.n	8001f3c <main+0x630>
      i2c_channel_to_use = 0;
 8001e48:	4b62      	ldr	r3, [pc, #392]	@ (8001fd4 <main+0x6c8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]

      HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_SET);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2102      	movs	r1, #2
 8001e52:	485f      	ldr	r0, [pc, #380]	@ (8001fd0 <main+0x6c4>)
 8001e54:	f008 f85e 	bl	8009f14 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2180      	movs	r1, #128	@ 0x80
 8001e5c:	485e      	ldr	r0, [pc, #376]	@ (8001fd8 <main+0x6cc>)
 8001e5e:	f008 f859 	bl	8009f14 <HAL_GPIO_WritePin>
      if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
 8001e62:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd4 <main+0x6c8>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4619      	mov	r1, r3
 8001e68:	485c      	ldr	r0, [pc, #368]	@ (8001fdc <main+0x6d0>)
 8001e6a:	f00d fe5d 	bl	800fb28 <_Z14i2c_mux_selectP7i2c_muxi>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <main+0x580>
        printf("Channel %d selected successfully!\n", i2c_channel_to_use);
 8001e7e:	4b55      	ldr	r3, [pc, #340]	@ (8001fd4 <main+0x6c8>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	4619      	mov	r1, r3
 8001e84:	4856      	ldr	r0, [pc, #344]	@ (8001fe0 <main+0x6d4>)
 8001e86:	f00e fc15 	bl	80106b4 <iprintf>
 8001e8a:	e005      	b.n	8001e98 <main+0x58c>
      } else {
          printf("Failed to select channel %d on I2C multiplexer.\n", i2c_channel_to_use);
 8001e8c:	4b51      	ldr	r3, [pc, #324]	@ (8001fd4 <main+0x6c8>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	4854      	ldr	r0, [pc, #336]	@ (8001fe4 <main+0x6d8>)
 8001e94:	f00e fc0e 	bl	80106b4 <iprintf>
      }
      HAL_Delay(10);
 8001e98:	200a      	movs	r0, #10
 8001e9a:	f006 f925 	bl	80080e8 <HAL_Delay>
      driver_configs[i2c_channel_to_use] = DRV8214_Config();
 8001e9e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001ea2:	222c      	movs	r2, #44	@ 0x2c
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f00e fc7c 	bl	80107a4 <memset>
 8001eac:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fca4 	bl	80017fe <_ZN14DRV8214_ConfigC1Ev>
 8001eb6:	4b47      	ldr	r3, [pc, #284]	@ (8001fd4 <main+0x6c8>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	232c      	movs	r3, #44	@ 0x2c
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	4a49      	ldr	r2, [pc, #292]	@ (8001fe8 <main+0x6dc>)
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 8001eca:	469c      	mov	ip, r3
 8001ecc:	f104 0e20 	add.w	lr, r4, #32
 8001ed0:	4665      	mov	r5, ip
 8001ed2:	4626      	mov	r6, r4
 8001ed4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ed6:	6028      	str	r0, [r5, #0]
 8001ed8:	6069      	str	r1, [r5, #4]
 8001eda:	60aa      	str	r2, [r5, #8]
 8001edc:	60eb      	str	r3, [r5, #12]
 8001ede:	3410      	adds	r4, #16
 8001ee0:	f10c 0c10 	add.w	ip, ip, #16
 8001ee4:	4574      	cmp	r4, lr
 8001ee6:	d1f3      	bne.n	8001ed0 <main+0x5c4>
 8001ee8:	4662      	mov	r2, ip
 8001eea:	4623      	mov	r3, r4
 8001eec:	cb03      	ldmia	r3!, {r0, r1}
 8001eee:	6010      	str	r0, [r2, #0]
 8001ef0:	6051      	str	r1, [r2, #4]
 8001ef2:	8819      	ldrh	r1, [r3, #0]
 8001ef4:	789b      	ldrb	r3, [r3, #2]
 8001ef6:	8111      	strh	r1, [r2, #8]
 8001ef8:	7293      	strb	r3, [r2, #10]
	 drivers[i2c_channel_to_use].init(driver_configs[i2c_channel_to_use]);
 8001efa:	4b36      	ldr	r3, [pc, #216]	@ (8001fd4 <main+0x6c8>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4a38      	ldr	r2, [pc, #224]	@ (8001fec <main+0x6e0>)
 8001f0a:	441a      	add	r2, r3
 8001f0c:	4b31      	ldr	r3, [pc, #196]	@ (8001fd4 <main+0x6c8>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	232c      	movs	r3, #44	@ 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4933      	ldr	r1, [pc, #204]	@ (8001fe8 <main+0x6dc>)
 8001f1a:	440b      	add	r3, r1
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f004 f990 	bl	8006244 <_ZN7DRV82144initERK14DRV8214_Config>
	 drivers[i2c_channel_to_use].resetFaultFlags();
 8001f24:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <main+0x6c8>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4a2e      	ldr	r2, [pc, #184]	@ (8001fec <main+0x6e0>)
 8001f34:	4413      	add	r3, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fd70 	bl	8006a1c <_ZN7DRV821415resetFaultFlagsEv>
   }

    if (wakeup_event) {
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff0 <main+0x6e4>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80dc 	beq.w	8002100 <main+0x7f4>
      // Process the wakeup event (button press)
      printf("Button press detected! ID: %d\r\n", button_ID);
 8001f48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <main+0x6e8>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4829      	ldr	r0, [pc, #164]	@ (8001ff8 <main+0x6ec>)
 8001f52:	f00e fbaf 	bl	80106b4 <iprintf>
      wakeup_event = false; // Reset flag AFTER processing it
 8001f56:	4b26      	ldr	r3, [pc, #152]	@ (8001ff0 <main+0x6e4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
      // display LED color based on button press
      switch (button_ID) {
 8001f5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ff4 <main+0x6e8>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	f200 80ba 	bhi.w	80020de <main+0x7d2>
 8001f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f70 <main+0x664>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001f85 	.word	0x08001f85
 8001f74:	0800200d 	.word	0x0800200d
 8001f78:	0800204d 	.word	0x0800204d
 8001f7c:	0800209f 	.word	0x0800209f
 8001f80:	080020b7 	.word	0x080020b7
        case 1:
          WS2812_SetColor(255, 0, 0, 100); // Red
 8001f84:	2364      	movs	r3, #100	@ 0x64
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	20ff      	movs	r0, #255	@ 0xff
 8001f8c:	f7fe ffd8 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          // Move the motor forward
          drivers[i2c_channel_to_use].turnXRipples(ripple_target, stops_after_ripples, true, speed, voltage, current);
 8001f90:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <main+0x6c8>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4a13      	ldr	r2, [pc, #76]	@ (8001fec <main+0x6e0>)
 8001fa0:	1898      	adds	r0, r3, r2
 8001fa2:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <main+0x6f0>)
 8001fa4:	8819      	ldrh	r1, [r3, #0]
 8001fa6:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <main+0x6f4>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	4a16      	ldr	r2, [pc, #88]	@ (8002004 <main+0x6f8>)
 8001fac:	edd2 7a00 	vldr	s15, [r2]
 8001fb0:	4a15      	ldr	r2, [pc, #84]	@ (8002008 <main+0x6fc>)
 8001fb2:	ed92 7a00 	vldr	s14, [r2]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	eef0 0a47 	vmov.f32	s1, s14
 8001fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f005 fc56 	bl	8007874 <_ZN7DRV821412turnXRipplesEtbbtff>
          //drivers[i2c_channel_to_use].turnForward(speed_low, voltage, current);
          break;
 8001fc8:	e090      	b.n	80020ec <main+0x7e0>
 8001fca:	bf00      	nop
 8001fcc:	08012c94 	.word	0x08012c94
 8001fd0:	48001000 	.word	0x48001000
 8001fd4:	20000010 	.word	0x20000010
 8001fd8:	48000800 	.word	0x48000800
 8001fdc:	200003dc 	.word	0x200003dc
 8001fe0:	08012cb0 	.word	0x08012cb0
 8001fe4:	08012aac 	.word	0x08012aac
 8001fe8:	20000024 	.word	0x20000024
 8001fec:	20000450 	.word	0x20000450
 8001ff0:	200003d0 	.word	0x200003d0
 8001ff4:	200003d1 	.word	0x200003d1
 8001ff8:	08012cd4 	.word	0x08012cd4
 8001ffc:	20000020 	.word	0x20000020
 8002000:	20000012 	.word	0x20000012
 8002004:	20000018 	.word	0x20000018
 8002008:	2000001c 	.word	0x2000001c
        case 2:
          WS2812_SetColor(0, 255, 0, 100); // Green
 800200c:	2364      	movs	r3, #100	@ 0x64
 800200e:	2200      	movs	r2, #0
 8002010:	21ff      	movs	r1, #255	@ 0xff
 8002012:	2000      	movs	r0, #0
 8002014:	f7fe ff94 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          // Move the motor backward
          drivers[i2c_channel_to_use].turnReverse(speed_low, voltage, current);
 8002018:	4b8b      	ldr	r3, [pc, #556]	@ (8002248 <main+0x93c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4a89      	ldr	r2, [pc, #548]	@ (800224c <main+0x940>)
 8002028:	4413      	add	r3, r2
 800202a:	4a89      	ldr	r2, [pc, #548]	@ (8002250 <main+0x944>)
 800202c:	8812      	ldrh	r2, [r2, #0]
 800202e:	4989      	ldr	r1, [pc, #548]	@ (8002254 <main+0x948>)
 8002030:	edd1 7a00 	vldr	s15, [r1]
 8002034:	4988      	ldr	r1, [pc, #544]	@ (8002258 <main+0x94c>)
 8002036:	ed91 7a00 	vldr	s14, [r1]
 800203a:	eef0 0a47 	vmov.f32	s1, s14
 800203e:	eeb0 0a67 	vmov.f32	s0, s15
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f005 fb71 	bl	800772c <_ZN7DRV821411turnReverseEtff>
          break;
 800204a:	e04f      	b.n	80020ec <main+0x7e0>
        case 3:
          WS2812_SetColor(0, 0, 255, 100); // Blue
 800204c:	2364      	movs	r3, #100	@ 0x64
 800204e:	22ff      	movs	r2, #255	@ 0xff
 8002050:	2100      	movs	r1, #0
 8002052:	2000      	movs	r0, #0
 8002054:	f7fe ff74 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          printf("Clearing fault flags...\r\n");
 8002058:	4880      	ldr	r0, [pc, #512]	@ (800225c <main+0x950>)
 800205a:	f00e fb9b 	bl	8010794 <puts>
          drivers[i2c_channel_to_use].resetRippleCounter();
 800205e:	4b7a      	ldr	r3, [pc, #488]	@ (8002248 <main+0x93c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4a77      	ldr	r2, [pc, #476]	@ (800224c <main+0x940>)
 800206e:	4413      	add	r3, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f004 fcc4 	bl	80069fe <_ZN7DRV821418resetRippleCounterEv>
          drivers[i2c_channel_to_use].resetFaultFlags();
 8002076:	4b74      	ldr	r3, [pc, #464]	@ (8002248 <main+0x93c>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4a71      	ldr	r2, [pc, #452]	@ (800224c <main+0x940>)
 8002086:	4413      	add	r3, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f004 fcc7 	bl	8006a1c <_ZN7DRV821415resetFaultFlagsEv>
          I2C_Scan(&hi2c1);
 800208e:	4874      	ldr	r0, [pc, #464]	@ (8002260 <main+0x954>)
 8002090:	f000 fa2c 	bl	80024ec <_Z8I2C_ScanP19__I2C_HandleTypeDef>
          HAL_Delay(1000); // Pause to see results
 8002094:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002098:	f006 f826 	bl	80080e8 <HAL_Delay>
          break;
 800209c:	e026      	b.n	80020ec <main+0x7e0>
        case 4:
          WS2812_SetColor(255, 255, 0, 100); // Yellow
 800209e:	2364      	movs	r3, #100	@ 0x64
 80020a0:	2200      	movs	r2, #0
 80020a2:	21ff      	movs	r1, #255	@ 0xff
 80020a4:	20ff      	movs	r0, #255	@ 0xff
 80020a6:	f7fe ff4b 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          printRegisters(i2c_channel_to_use);
 80020aa:	4b67      	ldr	r3, [pc, #412]	@ (8002248 <main+0x93c>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fac8 	bl	8002644 <_Z14printRegistersh>
          break;
 80020b4:	e01a      	b.n	80020ec <main+0x7e0>
        case 5:
          WS2812_SetColor(255, 0, 255, 100); // Magenta
 80020b6:	2364      	movs	r3, #100	@ 0x64
 80020b8:	22ff      	movs	r2, #255	@ 0xff
 80020ba:	2100      	movs	r1, #0
 80020bc:	20ff      	movs	r0, #255	@ 0xff
 80020be:	f7fe ff3f 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          // Stop the motor
          drivers[i2c_channel_to_use].brakeMotor();
 80020c2:	4b61      	ldr	r3, [pc, #388]	@ (8002248 <main+0x93c>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4a5e      	ldr	r2, [pc, #376]	@ (800224c <main+0x940>)
 80020d2:	4413      	add	r3, r2
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f005 fb8c 	bl	80077f4 <_ZN7DRV821410brakeMotorEb>
          break;
 80020dc:	e006      	b.n	80020ec <main+0x7e0>
        default:
          WS2812_SetColor(0, 0, 0, 100); // Off
 80020de:	2364      	movs	r3, #100	@ 0x64
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7fe ff2b 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          break;
 80020ea:	bf00      	nop
      }
      HAL_Delay(1000);
 80020ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020f0:	f005 fffa 	bl	80080e8 <HAL_Delay>
      WS2812_SetColor(0, 0, 0, 100); // Turn off the LED
 80020f4:	2364      	movs	r3, #100	@ 0x64
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7fe ff20 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
    }

    if (rslt_bmi == BMI2_OK) { // Only if initialization and config were successful
 8002100:	f997 30d3 	ldrsb.w	r3, [r7, #211]	@ 0xd3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d130      	bne.n	800216a <main+0x85e>
      int8_t rslt_data;

      // The bmi2_get_sensor_data function will attempt to read data for
      // all sensors that are currently enabled (ACC, GYR, AUX) and sensortime.
      // It populates the fields within the 'sensor_values' union accordingly.
      rslt_data = bmi2_get_sensor_data(&sensor_values, &bmi270_sensor); // Pass the address of the union
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	4956      	ldr	r1, [pc, #344]	@ (8002264 <main+0x958>)
 800210c:	4618      	mov	r0, r3
 800210e:	f001 fe02 	bl	8003d16 <bmi2_get_sensor_data>
 8002112:	4603      	mov	r3, r0
 8002114:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

      if (rslt_data == BMI2_OK) {
 8002118:	f997 30d2 	ldrsb.w	r3, [r7, #210]	@ 0xd2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d11b      	bne.n	8002158 <main+0x84c>
          // You can check dev->sens_en_stat or the PWR_CTRL register if needed,
          // or just assume accel and gyro are enabled based on prior setup.

          // Assuming Accelerometer was enabled
          printf("ACC: X=%d Y=%d Z=%d | ",
                 sensor_values.acc.x,
 8002120:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
          printf("ACC: X=%d Y=%d Z=%d | ",
 8002124:	4619      	mov	r1, r3
                 sensor_values.acc.y,
 8002126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
          printf("ACC: X=%d Y=%d Z=%d | ",
 800212a:	461a      	mov	r2, r3
                 sensor_values.acc.z);
 800212c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
          printf("ACC: X=%d Y=%d Z=%d | ",
 8002130:	484d      	ldr	r0, [pc, #308]	@ (8002268 <main+0x95c>)
 8002132:	f00e fabf 	bl	80106b4 <iprintf>

          // Assuming Gyroscope was enabled
          printf("GYR: X=%d Y=%d Z=%d", // Removed trailing \r\n to add sensortime
                 sensor_values.gyr.x,
 8002136:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
          printf("GYR: X=%d Y=%d Z=%d", // Removed trailing \r\n to add sensortime
 800213a:	4619      	mov	r1, r3
                 sensor_values.gyr.y,
 800213c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
          printf("GYR: X=%d Y=%d Z=%d", // Removed trailing \r\n to add sensortime
 8002140:	461a      	mov	r2, r3
                 sensor_values.gyr.z);
 8002142:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
          printf("GYR: X=%d Y=%d Z=%d", // Removed trailing \r\n to add sensortime
 8002146:	4849      	ldr	r0, [pc, #292]	@ (800226c <main+0x960>)
 8002148:	f00e fab4 	bl	80106b4 <iprintf>

          // Print sensortime (if available and meaningful in your setup)
          // The bmi2_parse_sensor_data in bmi2.c shows how sens_time is populated in the struct.
          // If bmi2_get_sensor_data directly populates it:
          printf(" | ST: %lu\r\n", (unsigned long)sensor_values.sens_time);
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	4847      	ldr	r0, [pc, #284]	@ (8002270 <main+0x964>)
 8002152:	f00e faaf 	bl	80106b4 <iprintf>
 8002156:	e005      	b.n	8002164 <main+0x858>

      } else {
          printf("BMI270 Get Sensor Data Failed. Error: %d\r\n", rslt_data);
 8002158:	f997 30d2 	ldrsb.w	r3, [r7, #210]	@ 0xd2
 800215c:	4619      	mov	r1, r3
 800215e:	4845      	ldr	r0, [pc, #276]	@ (8002274 <main+0x968>)
 8002160:	f00e faa8 	bl	80106b4 <iprintf>
      }
      HAL_Delay(100); // Read data every 100ms
 8002164:	2064      	movs	r0, #100	@ 0x64
 8002166:	f005 ffbf 	bl	80080e8 <HAL_Delay>
    }

    if (g_measure_battery_flag)
 800216a:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <main+0x96c>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	f43f adc9 	beq.w	8001d12 <main+0x406>
    {
        g_measure_battery_flag = 0; // Reset the flag
 8002180:	4b3d      	ldr	r3, [pc, #244]	@ (8002278 <main+0x96c>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]

        // 1. Enable BAT_SENSE circuitry
        HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_SET);
 8002186:	2201      	movs	r2, #1
 8002188:	2102      	movs	r1, #2
 800218a:	483c      	ldr	r0, [pc, #240]	@ (800227c <main+0x970>)
 800218c:	f007 fec2 	bl	8009f14 <HAL_GPIO_WritePin>

        // 2. Wait for voltage to settle (C504 charging)
        // Tau = R_eff * C = 2.31kOhm * 100nF = 0.231 ms. 5*Tau ~ 1.15 ms.
        // Let's use a slightly larger delay for safety margin.
        HAL_Delay(10); 
 8002190:	200a      	movs	r0, #10
 8002192:	f005 ffa9 	bl	80080e8 <HAL_Delay>

        // 3. Start ADC conversion
        if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8002196:	483a      	ldr	r0, [pc, #232]	@ (8002280 <main+0x974>)
 8002198:	f006 fb2c 	bl	80087f4 <HAL_ADC_Start>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	2300      	moveq	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <main+0x8b2>
        {
            printf("ADC Start Error\r\n");
 80021ac:	4835      	ldr	r0, [pc, #212]	@ (8002284 <main+0x978>)
 80021ae:	f00e faf1 	bl	8010794 <puts>
            // Optionally turn off BAT_SENSE_EN here if error occurs early
            HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2102      	movs	r1, #2
 80021b6:	4831      	ldr	r0, [pc, #196]	@ (800227c <main+0x970>)
 80021b8:	f007 feac 	bl	8009f14 <HAL_GPIO_WritePin>
 80021bc:	e03d      	b.n	800223a <main+0x92e>
            // Handle error
        }
        else
        {
            // 4. Poll for ADC conversion complete (timeout e.g., 100ms)
            if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80021be:	2164      	movs	r1, #100	@ 0x64
 80021c0:	482f      	ldr	r0, [pc, #188]	@ (8002280 <main+0x974>)
 80021c2:	f006 fb9e 	bl	8008902 <HAL_ADC_PollForConversion>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d02b      	beq.n	800222e <main+0x922>
            {
                // 5. Read ADC value
                uint32_t adc_raw_value = HAL_ADC_GetValue(&hadc1);
 80021d6:	482a      	ldr	r0, [pc, #168]	@ (8002280 <main+0x974>)
 80021d8:	f006 fc20 	bl	8008a1c <HAL_ADC_GetValue>
 80021dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

                // 6. Calculate voltage
                // V_sense = (ADC_raw / ADC_max_resolution) * V_ref
                float v_sense = ((float)adc_raw_value / ADC_RESOLUTION) * VREF_MCU;
 80021e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021e4:	ee07 3a90 	vmov	s15, r3
 80021e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021ec:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002288 <main+0x97c>
 80021f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800228c <main+0x980>
 80021f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fc:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
                // VBAT = V_sense * (R502 + R503) / R503
                g_battery_voltage = v_sense * BATTERY_SENSE_DIVIDER_RATIO;
 8002200:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8002204:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002290 <main+0x984>
 8002208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220c:	4b21      	ldr	r3, [pc, #132]	@ (8002294 <main+0x988>)
 800220e:	edc3 7a00 	vstr	s15, [r3]

                // For debugging:
                // Convert battery voltage to millivolts (integer)
                uint32_t battery_millivolts = (uint32_t)(g_battery_voltage * 1000.0f);
 8002212:	4b20      	ldr	r3, [pc, #128]	@ (8002294 <main+0x988>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002298 <main+0x98c>
 800221c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002224:	ee17 3a90 	vmov	r3, s15
 8002228:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800222c:	e002      	b.n	8002234 <main+0x928>
//                       adc_raw_value,
//                       battery_millivolts);
            }
            else
            {
                printf("ADC Poll Timeout\r\n");
 800222e:	481b      	ldr	r0, [pc, #108]	@ (800229c <main+0x990>)
 8002230:	f00e fab0 	bl	8010794 <puts>
                // Handle timeout
            }
            // Stop ADC (important if not in continuous mode, good practice anyway)
            HAL_ADC_Stop(&hadc1);
 8002234:	4812      	ldr	r0, [pc, #72]	@ (8002280 <main+0x974>)
 8002236:	f006 fb31 	bl	800889c <HAL_ADC_Stop>
        }

        // 7. Disable BAT_SENSE circuitry to save power
        HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	2102      	movs	r1, #2
 800223e:	480f      	ldr	r0, [pc, #60]	@ (800227c <main+0x970>)
 8002240:	f007 fe68 	bl	8009f14 <HAL_GPIO_WritePin>
//	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002244:	e565      	b.n	8001d12 <main+0x406>
 8002246:	bf00      	nop
 8002248:	20000010 	.word	0x20000010
 800224c:	20000450 	.word	0x20000450
 8002250:	20000014 	.word	0x20000014
 8002254:	20000018 	.word	0x20000018
 8002258:	2000001c 	.word	0x2000001c
 800225c:	08012cf4 	.word	0x08012cf4
 8002260:	200002e4 	.word	0x200002e4
 8002264:	200003e8 	.word	0x200003e8
 8002268:	08012d10 	.word	0x08012d10
 800226c:	08012d28 	.word	0x08012d28
 8002270:	08012d3c 	.word	0x08012d3c
 8002274:	08012d4c 	.word	0x08012d4c
 8002278:	200003c8 	.word	0x200003c8
 800227c:	48001c00 	.word	0x48001c00
 8002280:	20000280 	.word	0x20000280
 8002284:	08012d78 	.word	0x08012d78
 8002288:	457ff000 	.word	0x457ff000
 800228c:	40533333 	.word	0x40533333
 8002290:	3fa66666 	.word	0x3fa66666
 8002294:	200003cc 	.word	0x200003cc
 8002298:	447a0000 	.word	0x447a0000
 800229c:	08012d8c 	.word	0x08012d8c

080022a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b09a      	sub	sp, #104	@ 0x68
 80022a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	2248      	movs	r2, #72	@ 0x48
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f00e fa78 	bl	80107a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	60da      	str	r2, [r3, #12]
 80022c0:	611a      	str	r2, [r3, #16]
 80022c2:	615a      	str	r2, [r3, #20]
 80022c4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c6:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <_Z18SystemClock_Configv+0xe8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022ce:	4a2e      	ldr	r2, [pc, #184]	@ (8002388 <_Z18SystemClock_Configv+0xe8>)
 80022d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002388 <_Z18SystemClock_Configv+0xe8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80022e2:	232b      	movs	r3, #43	@ 0x2b
 80022e4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022f2:	2301      	movs	r3, #1
 80022f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022f6:	2340      	movs	r3, #64	@ 0x40
 80022f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80022fa:	2300      	movs	r3, #0
 80022fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022fe:	2360      	movs	r3, #96	@ 0x60
 8002300:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002302:	2305      	movs	r3, #5
 8002304:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002306:	2302      	movs	r3, #2
 8002308:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800230a:	2301      	movs	r3, #1
 800230c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002312:	231e      	movs	r3, #30
 8002314:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002316:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800231a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800231c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002320:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002322:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002326:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002328:	f107 0320 	add.w	r3, r7, #32
 800232c:	4618      	mov	r0, r3
 800232e:	f009 fd81 	bl	800be34 <HAL_RCC_OscConfig>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8002342:	f000 fc33 	bl	8002bac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002346:	236f      	movs	r3, #111	@ 0x6f
 8002348:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234a:	2303      	movs	r3, #3
 800234c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2102      	movs	r1, #2
 8002366:	4618      	mov	r0, r3
 8002368:	f00a f8d8 	bl	800c51c <HAL_RCC_ClockConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf14      	ite	ne
 8002372:	2301      	movne	r3, #1
 8002374:	2300      	moveq	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <_Z18SystemClock_Configv+0xe0>
  {
    Error_Handler();
 800237c:	f000 fc16 	bl	8002bac <Error_Handler>
  }
}
 8002380:	bf00      	nop
 8002382:	3768      	adds	r7, #104	@ 0x68
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	58000400 	.word	0x58000400

0800238c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b094      	sub	sp, #80	@ 0x50
 8002390:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002392:	463b      	mov	r3, r7
 8002394:	2250      	movs	r2, #80	@ 0x50
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f00e fa03 	bl	80107a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800239e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023a2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80023a4:	2300      	movs	r3, #0
 80023a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80023a8:	2310      	movs	r3, #16
 80023aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ac:	463b      	mov	r3, r7
 80023ae:	4618      	mov	r0, r3
 80023b0:	f00a fcf1 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf14      	ite	ne
 80023ba:	2301      	movne	r3, #1
 80023bc:	2300      	moveq	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <_Z24PeriphCommonClock_Configv+0x3c>
  {
    Error_Handler();
 80023c4:	f000 fbf2 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80023c8:	bf00      	nop
 80023ca:	3750      	adds	r7, #80	@ 0x50
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUTTON1_Pin) // Replace YOUR_BUTTON_PIN with the actual pin, e.g., GPIO_PIN_13
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b80      	cmp	r3, #128	@ 0x80
 80023de:	d109      	bne.n	80023f4 <HAL_GPIO_EXTI_Callback+0x24>
  {
	  wakeup_event = true; // Set flag for next loop iteration
 80023e0:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <HAL_GPIO_EXTI_Callback+0x98>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023e6:	4a21      	ldr	r2, [pc, #132]	@ (800246c <HAL_GPIO_EXTI_Callback+0x9c>)
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	60d3      	str	r3, [r2, #12]
	  button_ID = 1;
 80023ec:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_GPIO_EXTI_Callback+0xa0>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
  else if (GPIO_Pin == BUTTON5_Pin) {
    wakeup_event = true; // Set flag for next loop iteration
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    button_ID = 5;
  }
}
 80023f2:	e033      	b.n	800245c <HAL_GPIO_EXTI_Callback+0x8c>
  } else if (GPIO_Pin == BUTTON2_Pin) {
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d109      	bne.n	800240e <HAL_GPIO_EXTI_Callback+0x3e>
	  wakeup_event = true; // Set flag for next loop iteration
 80023fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_GPIO_EXTI_Callback+0x98>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002400:	4a1a      	ldr	r2, [pc, #104]	@ (800246c <HAL_GPIO_EXTI_Callback+0x9c>)
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	60d3      	str	r3, [r2, #12]
	  button_ID = 2;
 8002406:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002408:	2202      	movs	r2, #2
 800240a:	701a      	strb	r2, [r3, #0]
}
 800240c:	e026      	b.n	800245c <HAL_GPIO_EXTI_Callback+0x8c>
  else if (GPIO_Pin == BUTTON3_Pin) {
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	2b10      	cmp	r3, #16
 8002412:	d109      	bne.n	8002428 <HAL_GPIO_EXTI_Callback+0x58>
	  wakeup_event = true; // Set flag for next loop iteration
 8002414:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <HAL_GPIO_EXTI_Callback+0x98>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800241a:	4a14      	ldr	r2, [pc, #80]	@ (800246c <HAL_GPIO_EXTI_Callback+0x9c>)
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	60d3      	str	r3, [r2, #12]
	  button_ID = 3;
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002422:	2203      	movs	r2, #3
 8002424:	701a      	strb	r2, [r3, #0]
}
 8002426:	e019      	b.n	800245c <HAL_GPIO_EXTI_Callback+0x8c>
  else if (GPIO_Pin == BUTTON4_Pin) {
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800242e:	d109      	bne.n	8002444 <HAL_GPIO_EXTI_Callback+0x74>
	  wakeup_event = true; // Set flag for next loop iteration
 8002430:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <HAL_GPIO_EXTI_Callback+0x98>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002436:	4a0d      	ldr	r2, [pc, #52]	@ (800246c <HAL_GPIO_EXTI_Callback+0x9c>)
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	60d3      	str	r3, [r2, #12]
	  button_ID = 4;
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <HAL_GPIO_EXTI_Callback+0xa0>)
 800243e:	2204      	movs	r2, #4
 8002440:	701a      	strb	r2, [r3, #0]
}
 8002442:	e00b      	b.n	800245c <HAL_GPIO_EXTI_Callback+0x8c>
  else if (GPIO_Pin == BUTTON5_Pin) {
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	2b08      	cmp	r3, #8
 8002448:	d108      	bne.n	800245c <HAL_GPIO_EXTI_Callback+0x8c>
    wakeup_event = true; // Set flag for next loop iteration
 800244a:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <HAL_GPIO_EXTI_Callback+0x98>)
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002450:	4a06      	ldr	r2, [pc, #24]	@ (800246c <HAL_GPIO_EXTI_Callback+0x9c>)
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	60d3      	str	r3, [r2, #12]
    button_ID = 5;
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002458:	2205      	movs	r2, #5
 800245a:	701a      	strb	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	200003d0 	.word	0x200003d0
 800246c:	58000800 	.word	0x58000800
 8002470:	200003d1 	.word	0x200003d1

08002474 <_write>:
#ifdef __cplusplus
  extern "C" {
  #endif
#ifdef USE_SWD
  int _write(int file, char *ptr, int len)
  {
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e009      	b.n	800249a <_write+0x26>
    {
      ITM_SendChar(*ptr++);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	60ba      	str	r2, [r7, #8]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff f984 	bl	800179c <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3301      	adds	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	429a      	cmp	r2, r3
 80024a0:	dbf1      	blt.n	8002486 <_write+0x12>
    }
    return len;
 80024a2:	687b      	ldr	r3, [r7, #4]
  }
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_TIM_PeriodElapsedCallback>:
#ifdef __cplusplus
  }
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  // Check which Systick timer is generating the interrupt
  if (htim->Instance == TIM1) { // Or whatever your HAL_IncTick uses
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a09      	ldr	r2, [pc, #36]	@ (80024e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d102      	bne.n	80024c4 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80024be:	f005 fde7 	bl	8008090 <HAL_IncTick>
  else if (htim->Instance == htim2.Instance) // Check against the specific timer instance
  {
    g_measure_battery_flag = 1;
  }
  // Add other timer callbacks if you have them
}
 80024c2:	e008      	b.n	80024d6 <HAL_TIM_PeriodElapsedCallback+0x2a>
  else if (htim->Instance == htim2.Instance) // Check against the specific timer instance
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d102      	bne.n	80024d6 <HAL_TIM_PeriodElapsedCallback+0x2a>
    g_measure_battery_flag = 1;
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	200005ac 	.word	0x200005ac
 80024e8:	200003c8 	.word	0x200003c8

080024ec <_Z8I2C_ScanP19__I2C_HandleTypeDef>:

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a28      	ldr	r2, [pc, #160]	@ (800259c <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d106      	bne.n	800250c <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x20>
    printf("Scanning I2C Bus 1 (MUX Channel %d)...\r\n", i2c_channel_to_use);
 80024fe:	4b28      	ldr	r3, [pc, #160]	@ (80025a0 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb4>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	4827      	ldr	r0, [pc, #156]	@ (80025a4 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb8>)
 8002506:	f00e f8d5 	bl	80106b4 <iprintf>
 800250a:	e00b      	b.n	8002524 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x38>
  } else if (hi2c->Instance == I2C3) {
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a25      	ldr	r2, [pc, #148]	@ (80025a8 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xbc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d103      	bne.n	800251e <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x32>
    printf("Scanning I2C Bus 3...\r\n");
 8002516:	4825      	ldr	r0, [pc, #148]	@ (80025ac <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xc0>)
 8002518:	f00e f93c 	bl	8010794 <puts>
 800251c:	e002      	b.n	8002524 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x38>
  } else {
    printf("Scanning Unknown I2C Bus...\r\n");
 800251e:	4824      	ldr	r0, [pc, #144]	@ (80025b0 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xc4>)
 8002520:	f00e f938 	bl	8010794 <puts>
  }

  HAL_StatusTypeDef res;
  uint8_t i = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
  for (i = 1; i < 128; i++) {
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	e015      	b.n	800255a <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x6e>
    res = HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i << 1), 2, 10); // 2 trials, 10ms timeout
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	b29b      	uxth	r3, r3
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	b299      	uxth	r1, r3
 8002536:	230a      	movs	r3, #10
 8002538:	2202      	movs	r2, #2
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f008 fa16 	bl	800a96c <HAL_I2C_IsDeviceReady>
 8002540:	4603      	mov	r3, r0
 8002542:	73bb      	strb	r3, [r7, #14]
    if (res == HAL_OK) {
 8002544:	7bbb      	ldrb	r3, [r7, #14]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d104      	bne.n	8002554 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x68>
      printf("I2C Device Found at Address: 0x%02X\r\n", i);
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	4619      	mov	r1, r3
 800254e:	4819      	ldr	r0, [pc, #100]	@ (80025b4 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xc8>)
 8002550:	f00e f8b0 	bl	80106b4 <iprintf>
  for (i = 1; i < 128; i++) {
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	3301      	adds	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	2b00      	cmp	r3, #0
 8002560:	dae5      	bge.n	800252e <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x42>
    }
  }
  if (hi2c->Instance == I2C1) {
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d106      	bne.n	800257a <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x8e>
    printf("I2C Bus 1 (MUX Channel %d) Scan Complete.\r\n", i2c_channel_to_use);
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb4>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	4811      	ldr	r0, [pc, #68]	@ (80025b8 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xcc>)
 8002574:	f00e f89e 	bl	80106b4 <iprintf>
  } else if (hi2c->Instance == I2C3) {
    printf("I2C Bus 3 Scan Complete.\r\n");
  } else {
    printf("Unknown I2C Bus Scan Complete.\r\n");
  }
}
 8002578:	e00b      	b.n	8002592 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xa6>
  } else if (hi2c->Instance == I2C3) {
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xbc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d103      	bne.n	800258c <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xa0>
    printf("I2C Bus 3 Scan Complete.\r\n");
 8002584:	480d      	ldr	r0, [pc, #52]	@ (80025bc <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xd0>)
 8002586:	f00e f905 	bl	8010794 <puts>
}
 800258a:	e002      	b.n	8002592 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xa6>
    printf("Unknown I2C Bus Scan Complete.\r\n");
 800258c:	480c      	ldr	r0, [pc, #48]	@ (80025c0 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xd4>)
 800258e:	f00e f901 	bl	8010794 <puts>
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40005400 	.word	0x40005400
 80025a0:	20000010 	.word	0x20000010
 80025a4:	08012da0 	.word	0x08012da0
 80025a8:	40005c00 	.word	0x40005c00
 80025ac:	08012dcc 	.word	0x08012dcc
 80025b0:	08012de4 	.word	0x08012de4
 80025b4:	08012e04 	.word	0x08012e04
 80025b8:	08012e2c 	.word	0x08012e2c
 80025bc:	08012e58 	.word	0x08012e58
 80025c0:	08012e74 	.word	0x08012e74

080025c4 <_Z17printByteAsBinaryh>:

void printByteAsBinary(uint8_t value) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  for (int i = 7; i >= 0; i--) {
 80025ce:	2307      	movs	r3, #7
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	e00c      	b.n	80025ee <_Z17printByteAsBinaryh+0x2a>
    printf("%d", (value >> i) & 1); // Print 0 or 1
 80025d4:	79fa      	ldrb	r2, [r7, #7]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	fa42 f303 	asr.w	r3, r2, r3
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	4619      	mov	r1, r3
 80025e2:	4807      	ldr	r0, [pc, #28]	@ (8002600 <_Z17printByteAsBinaryh+0x3c>)
 80025e4:	f00e f866 	bl	80106b4 <iprintf>
  for (int i = 7; i >= 0; i--) {
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	daef      	bge.n	80025d4 <_Z17printByteAsBinaryh+0x10>
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	08012e94 	.word	0x08012e94

08002604 <_Z19print2BytesAsBinaryt>:

void print2BytesAsBinary(uint16_t value) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	80fb      	strh	r3, [r7, #6]
  for (int i = 15; i >= 0; i--) {
 800260e:	230f      	movs	r3, #15
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e00c      	b.n	800262e <_Z19print2BytesAsBinaryt+0x2a>
    printf("%d", (value >> i) & 1); // Print 0 or 1
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	fa42 f303 	asr.w	r3, r2, r3
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	4619      	mov	r1, r3
 8002622:	4807      	ldr	r0, [pc, #28]	@ (8002640 <_Z19print2BytesAsBinaryt+0x3c>)
 8002624:	f00e f846 	bl	80106b4 <iprintf>
  for (int i = 15; i >= 0; i--) {
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3b01      	subs	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	daef      	bge.n	8002614 <_Z19print2BytesAsBinaryt+0x10>
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	08012e94 	.word	0x08012e94

08002644 <_Z14printRegistersh>:


void printRegisters(uint8_t driver_id) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b090      	sub	sp, #64	@ 0x40
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]

  // variable to avoid float printing
  char buffer[50];
  printf("Speed of motor: ");
 800264e:	48d1      	ldr	r0, [pc, #836]	@ (8002994 <_Z14printRegistersh+0x350>)
 8002650:	f00e f830 	bl	80106b4 <iprintf>
  printf("%d", drivers[driver_id].getMotorSpeedRPM());
 8002654:	79fa      	ldrb	r2, [r7, #7]
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4ace      	ldr	r2, [pc, #824]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002660:	4413      	add	r3, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f003 fe90 	bl	8006388 <_ZN7DRV821416getMotorSpeedRPMEv>
 8002668:	4603      	mov	r3, r0
 800266a:	4619      	mov	r1, r3
 800266c:	48cb      	ldr	r0, [pc, #812]	@ (800299c <_Z14printRegistersh+0x358>)
 800266e:	f00e f821 	bl	80106b4 <iprintf>
  printf(" RPM or ");
 8002672:	48cb      	ldr	r0, [pc, #812]	@ (80029a0 <_Z14printRegistersh+0x35c>)
 8002674:	f00e f81e 	bl	80106b4 <iprintf>
  printf("%.2f", drivers[driver_id].getMotorSpeedRAD());
 8002678:	79fa      	ldrb	r2, [r7, #7]
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4ac5      	ldr	r2, [pc, #788]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002684:	4413      	add	r3, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f003 feba 	bl	8006400 <_ZN7DRV821416getMotorSpeedRADEv>
 800268c:	4603      	mov	r3, r0
 800268e:	4619      	mov	r1, r3
 8002690:	48c4      	ldr	r0, [pc, #784]	@ (80029a4 <_Z14printRegistersh+0x360>)
 8002692:	f00e f80f 	bl	80106b4 <iprintf>
  printf(" rad/s | ");
 8002696:	48c4      	ldr	r0, [pc, #784]	@ (80029a8 <_Z14printRegistersh+0x364>)
 8002698:	f00e f80c 	bl	80106b4 <iprintf>

  printf("Voltage: ");
 800269c:	48c3      	ldr	r0, [pc, #780]	@ (80029ac <_Z14printRegistersh+0x368>)
 800269e:	f00e f809 	bl	80106b4 <iprintf>
  printf("%.2f", drivers[driver_id].getMotorVoltage());
 80026a2:	79fa      	ldrb	r2, [r7, #7]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4aba      	ldr	r2, [pc, #744]	@ (8002998 <_Z14printRegistersh+0x354>)
 80026ae:	4413      	add	r3, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 ff0f 	bl	80064d4 <_ZN7DRV821415getMotorVoltageEv>
 80026b6:	ee10 3a10 	vmov	r3, s0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd ff1c 	bl	80004f8 <__aeabi_f2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	48b7      	ldr	r0, [pc, #732]	@ (80029a4 <_Z14printRegistersh+0x360>)
 80026c6:	f00d fff5 	bl	80106b4 <iprintf>
  printf(" V | ");
 80026ca:	48b9      	ldr	r0, [pc, #740]	@ (80029b0 <_Z14printRegistersh+0x36c>)
 80026cc:	f00d fff2 	bl	80106b4 <iprintf>

  printf("Current: ");
 80026d0:	48b8      	ldr	r0, [pc, #736]	@ (80029b4 <_Z14printRegistersh+0x370>)
 80026d2:	f00d ffef 	bl	80106b4 <iprintf>
  printf("%.2f", drivers[driver_id].getMotorCurrent());
 80026d6:	79fa      	ldrb	r2, [r7, #7]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4aad      	ldr	r2, [pc, #692]	@ (8002998 <_Z14printRegistersh+0x354>)
 80026e2:	4413      	add	r3, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f003 ff77 	bl	80065d8 <_ZN7DRV821415getMotorCurrentEv>
 80026ea:	ee10 3a10 	vmov	r3, s0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd ff02 	bl	80004f8 <__aeabi_f2d>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	48aa      	ldr	r0, [pc, #680]	@ (80029a4 <_Z14printRegistersh+0x360>)
 80026fa:	f00d ffdb 	bl	80106b4 <iprintf>
  printf(" A | ");
 80026fe:	48ae      	ldr	r0, [pc, #696]	@ (80029b8 <_Z14printRegistersh+0x374>)
 8002700:	f00d ffd8 	bl	80106b4 <iprintf>

  printf("Speed of shaft: ");
 8002704:	48ad      	ldr	r0, [pc, #692]	@ (80029bc <_Z14printRegistersh+0x378>)
 8002706:	f00d ffd5 	bl	80106b4 <iprintf>
  printf("%d", drivers[driver_id].getMotorSpeedShaftRPM());
 800270a:	79fa      	ldrb	r2, [r7, #7]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4aa0      	ldr	r2, [pc, #640]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002716:	4413      	add	r3, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fe8b 	bl	8006434 <_ZN7DRV821421getMotorSpeedShaftRPMEv>
 800271e:	4603      	mov	r3, r0
 8002720:	4619      	mov	r1, r3
 8002722:	489e      	ldr	r0, [pc, #632]	@ (800299c <_Z14printRegistersh+0x358>)
 8002724:	f00d ffc6 	bl	80106b4 <iprintf>
  printf(" RPM or ");
 8002728:	489d      	ldr	r0, [pc, #628]	@ (80029a0 <_Z14printRegistersh+0x35c>)
 800272a:	f00d ffc3 	bl	80106b4 <iprintf>
  printf("%.2f", drivers[driver_id].getMotorSpeedShaftRAD());
 800272e:	79fa      	ldrb	r2, [r7, #7]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4a97      	ldr	r2, [pc, #604]	@ (8002998 <_Z14printRegistersh+0x354>)
 800273a:	4413      	add	r3, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f003 fe8a 	bl	8006456 <_ZN7DRV821421getMotorSpeedShaftRADEv>
 8002742:	4603      	mov	r3, r0
 8002744:	4619      	mov	r1, r3
 8002746:	4897      	ldr	r0, [pc, #604]	@ (80029a4 <_Z14printRegistersh+0x360>)
 8002748:	f00d ffb4 	bl	80106b4 <iprintf>
  printf(" rad/s | ");
 800274c:	4896      	ldr	r0, [pc, #600]	@ (80029a8 <_Z14printRegistersh+0x364>)
 800274e:	f00d ffb1 	bl	80106b4 <iprintf>

  printf("Duty Cycle: ");
 8002752:	489b      	ldr	r0, [pc, #620]	@ (80029c0 <_Z14printRegistersh+0x37c>)
 8002754:	f00d ffae 	bl	80106b4 <iprintf>
  printf("%hhu", drivers[driver_id].getDutyCycle()); // %hhu for uint8_t
 8002758:	79fa      	ldrb	r2, [r7, #7]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4a8d      	ldr	r2, [pc, #564]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002764:	4413      	add	r3, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f003 ff6a 	bl	8006640 <_ZN7DRV821412getDutyCycleEv>
 800276c:	4603      	mov	r3, r0
 800276e:	4619      	mov	r1, r3
 8002770:	4894      	ldr	r0, [pc, #592]	@ (80029c4 <_Z14printRegistersh+0x380>)
 8002772:	f00d ff9f 	bl	80106b4 <iprintf>
  printf("%% | ");
 8002776:	4894      	ldr	r0, [pc, #592]	@ (80029c8 <_Z14printRegistersh+0x384>)
 8002778:	f00d ff9c 	bl	80106b4 <iprintf>

  printf("Tinrush: ");
 800277c:	4893      	ldr	r0, [pc, #588]	@ (80029cc <_Z14printRegistersh+0x388>)
 800277e:	f00d ff99 	bl	80106b4 <iprintf>
  printf("%hu", drivers[driver_id].getInrushDuration()); // %hu for uint16_t
 8002782:	79fa      	ldrb	r2, [r7, #7]
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4a82      	ldr	r2, [pc, #520]	@ (8002998 <_Z14printRegistersh+0x354>)
 800278e:	4413      	add	r3, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f003 ff84 	bl	800669e <_ZN7DRV821417getInrushDurationEv>
 8002796:	4603      	mov	r3, r0
 8002798:	4619      	mov	r1, r3
 800279a:	488d      	ldr	r0, [pc, #564]	@ (80029d0 <_Z14printRegistersh+0x38c>)
 800279c:	f00d ff8a 	bl	80106b4 <iprintf>
  printf(" ms | "); // Added space and separator for consistency
 80027a0:	488c      	ldr	r0, [pc, #560]	@ (80029d4 <_Z14printRegistersh+0x390>)
 80027a2:	f00d ff87 	bl	80106b4 <iprintf>

  printf("RC_STATUS1 (SPEED): 0b");
 80027a6:	488c      	ldr	r0, [pc, #560]	@ (80029d8 <_Z14printRegistersh+0x394>)
 80027a8:	f00d ff84 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getMotorSpeedRegister());
 80027ac:	79fa      	ldrb	r2, [r7, #7]
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	1a9b      	subs	r3, r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4a78      	ldr	r2, [pc, #480]	@ (8002998 <_Z14printRegistersh+0x354>)
 80027b8:	4413      	add	r3, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 fe5d 	bl	800647a <_ZN7DRV821421getMotorSpeedRegisterEv>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fefe 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 80027c8:	4884      	ldr	r0, [pc, #528]	@ (80029dc <_Z14printRegistersh+0x398>)
 80027ca:	f00d ff73 	bl	80106b4 <iprintf>

  printf("REG_STATUS1 (VOLTAGE): 0b");
 80027ce:	4884      	ldr	r0, [pc, #528]	@ (80029e0 <_Z14printRegistersh+0x39c>)
 80027d0:	f00d ff70 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getMotorVoltageRegister());
 80027d4:	79fa      	ldrb	r2, [r7, #7]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4a6e      	ldr	r2, [pc, #440]	@ (8002998 <_Z14printRegistersh+0x354>)
 80027e0:	4413      	add	r3, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 fee8 	bl	80065b8 <_ZN7DRV821423getMotorVoltageRegisterEv>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff feea 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 80027f0:	487a      	ldr	r0, [pc, #488]	@ (80029dc <_Z14printRegistersh+0x398>)
 80027f2:	f00d ff5f 	bl	80106b4 <iprintf>

  printf("REG_STATUS2 (CURRENT): 0b");
 80027f6:	487b      	ldr	r0, [pc, #492]	@ (80029e4 <_Z14printRegistersh+0x3a0>)
 80027f8:	f00d ff5c 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getMotorCurrentRegister());
 80027fc:	79fa      	ldrb	r2, [r7, #7]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4a64      	ldr	r2, [pc, #400]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002808:	4413      	add	r3, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f003 ff08 	bl	8006620 <_ZN7DRV821423getMotorCurrentRegisterEv>
 8002810:	4603      	mov	r3, r0
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fed6 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002818:	4870      	ldr	r0, [pc, #448]	@ (80029dc <_Z14printRegistersh+0x398>)
 800281a:	f00d ff4b 	bl	80106b4 <iprintf>

  printf("Ripple counter: ");
 800281e:	4872      	ldr	r0, [pc, #456]	@ (80029e8 <_Z14printRegistersh+0x3a4>)
 8002820:	f00d ff48 	bl	80106b4 <iprintf>
  printf("%hu", drivers[driver_id].getRippleCount()); // %hu for uint16_t
 8002824:	79fa      	ldrb	r2, [r7, #7]
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4a5a      	ldr	r2, [pc, #360]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002830:	4413      	add	r3, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f003 fe30 	bl	8006498 <_ZN7DRV821414getRippleCountEv>
 8002838:	4603      	mov	r3, r0
 800283a:	4619      	mov	r1, r3
 800283c:	4864      	ldr	r0, [pc, #400]	@ (80029d0 <_Z14printRegistersh+0x38c>)
 800283e:	f00d ff39 	bl	80106b4 <iprintf>
  printf(" | 0b");
 8002842:	486a      	ldr	r0, [pc, #424]	@ (80029ec <_Z14printRegistersh+0x3a8>)
 8002844:	f00d ff36 	bl	80106b4 <iprintf>
  print2BytesAsBinary(drivers[driver_id].getRippleCount());
 8002848:	79fa      	ldrb	r2, [r7, #7]
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4a51      	ldr	r2, [pc, #324]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002854:	4413      	add	r3, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f003 fe1e 	bl	8006498 <_ZN7DRV821414getRippleCountEv>
 800285c:	4603      	mov	r3, r0
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fed0 	bl	8002604 <_Z19print2BytesAsBinaryt>
  printf(" | ");
 8002864:	485d      	ldr	r0, [pc, #372]	@ (80029dc <_Z14printRegistersh+0x398>)
 8002866:	f00d ff25 	bl	80106b4 <iprintf>

  drivers[driver_id].printFaultStatus(); // Assuming this function prints its own content + newline if needed
 800286a:	79fa      	ldrb	r2, [r7, #7]
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4a48      	ldr	r2, [pc, #288]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002876:	4413      	add	r3, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f005 fa25 	bl	8007cc8 <_ZN7DRV821416printFaultStatusEv>

  printf("CONFIG0: 0b");
 800287e:	485c      	ldr	r0, [pc, #368]	@ (80029f0 <_Z14printRegistersh+0x3ac>)
 8002880:	f00d ff18 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getCONFIG0());
 8002884:	79fa      	ldrb	r2, [r7, #7]
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4a42      	ldr	r2, [pc, #264]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002890:	4413      	add	r3, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f003 fef4 	bl	8006680 <_ZN7DRV821410getCONFIG0Ev>
 8002898:	4603      	mov	r3, r0
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fe92 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 80028a0:	484e      	ldr	r0, [pc, #312]	@ (80029dc <_Z14printRegistersh+0x398>)
 80028a2:	f00d ff07 	bl	80106b4 <iprintf>

  printf("CONFIG3: 0b");
 80028a6:	4853      	ldr	r0, [pc, #332]	@ (80029f4 <_Z14printRegistersh+0x3b0>)
 80028a8:	f00d ff04 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getCONFIG3());
 80028ac:	79fa      	ldrb	r2, [r7, #7]
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4a38      	ldr	r2, [pc, #224]	@ (8002998 <_Z14printRegistersh+0x354>)
 80028b8:	4413      	add	r3, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 ff0c 	bl	80066d8 <_ZN7DRV821410getCONFIG3Ev>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fe7e 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 80028c8:	4844      	ldr	r0, [pc, #272]	@ (80029dc <_Z14printRegistersh+0x398>)
 80028ca:	f00d fef3 	bl	80106b4 <iprintf>

  printf("CONFIG4: 0b");
 80028ce:	484a      	ldr	r0, [pc, #296]	@ (80029f8 <_Z14printRegistersh+0x3b4>)
 80028d0:	f00d fef0 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getCONFIG4());
 80028d4:	79fa      	ldrb	r2, [r7, #7]
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4a2e      	ldr	r2, [pc, #184]	@ (8002998 <_Z14printRegistersh+0x354>)
 80028e0:	4413      	add	r3, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 ff07 	bl	80066f6 <_ZN7DRV821410getCONFIG4Ev>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fe6a 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 80028f0:	483a      	ldr	r0, [pc, #232]	@ (80029dc <_Z14printRegistersh+0x398>)
 80028f2:	f00d fedf 	bl	80106b4 <iprintf>

  printf("REG_CTRL0: 0b");
 80028f6:	4841      	ldr	r0, [pc, #260]	@ (80029fc <_Z14printRegistersh+0x3b8>)
 80028f8:	f00d fedc 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getREG_CTRL0());
 80028fc:	79fa      	ldrb	r2, [r7, #7]
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4a24      	ldr	r2, [pc, #144]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002908:	4413      	add	r3, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f003 ff02 	bl	8006714 <_ZN7DRV821412getREG_CTRL0Ev>
 8002910:	4603      	mov	r3, r0
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fe56 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002918:	4830      	ldr	r0, [pc, #192]	@ (80029dc <_Z14printRegistersh+0x398>)
 800291a:	f00d fecb 	bl	80106b4 <iprintf>

  printf("REG_CTRL1 (TARGET SPEED): 0b");
 800291e:	4838      	ldr	r0, [pc, #224]	@ (8002a00 <_Z14printRegistersh+0x3bc>)
 8002920:	f00d fec8 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getREG_CTRL1());
 8002924:	79fa      	ldrb	r2, [r7, #7]
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4a1a      	ldr	r2, [pc, #104]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002930:	4413      	add	r3, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f003 fefd 	bl	8006732 <_ZN7DRV821412getREG_CTRL1Ev>
 8002938:	4603      	mov	r3, r0
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fe42 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002940:	4826      	ldr	r0, [pc, #152]	@ (80029dc <_Z14printRegistersh+0x398>)
 8002942:	f00d feb7 	bl	80106b4 <iprintf>

  printf("REG_CTRL2 (DUTY): 0b");
 8002946:	482f      	ldr	r0, [pc, #188]	@ (8002a04 <_Z14printRegistersh+0x3c0>)
 8002948:	f00d feb4 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getREG_CTRL2());
 800294c:	79fa      	ldrb	r2, [r7, #7]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4a10      	ldr	r2, [pc, #64]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002958:	4413      	add	r3, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fef8 	bl	8006750 <_ZN7DRV821412getREG_CTRL2Ev>
 8002960:	4603      	mov	r3, r0
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fe2e 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002968:	481c      	ldr	r0, [pc, #112]	@ (80029dc <_Z14printRegistersh+0x398>)
 800296a:	f00d fea3 	bl	80106b4 <iprintf>

  printf("RC_CTRL0: 0b");
 800296e:	4826      	ldr	r0, [pc, #152]	@ (8002a08 <_Z14printRegistersh+0x3c4>)
 8002970:	f00d fea0 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL0());
 8002974:	79fa      	ldrb	r2, [r7, #7]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4a06      	ldr	r2, [pc, #24]	@ (8002998 <_Z14printRegistersh+0x354>)
 8002980:	4413      	add	r3, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fef3 	bl	800676e <_ZN7DRV821411getRC_CTRL0Ev>
 8002988:	4603      	mov	r3, r0
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fe1a 	bl	80025c4 <_Z17printByteAsBinaryh>
 8002990:	e03c      	b.n	8002a0c <_Z14printRegistersh+0x3c8>
 8002992:	bf00      	nop
 8002994:	08012e98 	.word	0x08012e98
 8002998:	20000450 	.word	0x20000450
 800299c:	08012e94 	.word	0x08012e94
 80029a0:	08012eac 	.word	0x08012eac
 80029a4:	08012eb8 	.word	0x08012eb8
 80029a8:	08012ec0 	.word	0x08012ec0
 80029ac:	08012ecc 	.word	0x08012ecc
 80029b0:	08012ed8 	.word	0x08012ed8
 80029b4:	08012ee0 	.word	0x08012ee0
 80029b8:	08012eec 	.word	0x08012eec
 80029bc:	08012ef4 	.word	0x08012ef4
 80029c0:	08012f08 	.word	0x08012f08
 80029c4:	08012f18 	.word	0x08012f18
 80029c8:	08012f20 	.word	0x08012f20
 80029cc:	08012f28 	.word	0x08012f28
 80029d0:	08012f34 	.word	0x08012f34
 80029d4:	08012f38 	.word	0x08012f38
 80029d8:	08012f40 	.word	0x08012f40
 80029dc:	08012f58 	.word	0x08012f58
 80029e0:	08012f5c 	.word	0x08012f5c
 80029e4:	08012f78 	.word	0x08012f78
 80029e8:	08012f94 	.word	0x08012f94
 80029ec:	08012fa8 	.word	0x08012fa8
 80029f0:	08012fb0 	.word	0x08012fb0
 80029f4:	08012fbc 	.word	0x08012fbc
 80029f8:	08012fc8 	.word	0x08012fc8
 80029fc:	08012fd4 	.word	0x08012fd4
 8002a00:	08012fe4 	.word	0x08012fe4
 8002a04:	08013004 	.word	0x08013004
 8002a08:	0801301c 	.word	0x0801301c
  printf(" | ");
 8002a0c:	485a      	ldr	r0, [pc, #360]	@ (8002b78 <_Z14printRegistersh+0x534>)
 8002a0e:	f00d fe51 	bl	80106b4 <iprintf>

  printf("KMC: ");
 8002a12:	485a      	ldr	r0, [pc, #360]	@ (8002b7c <_Z14printRegistersh+0x538>)
 8002a14:	f00d fe4e 	bl	80106b4 <iprintf>
  printf("%hhu", drivers[driver_id].getKMC()); // %hhu for uint8_t
 8002a18:	79fa      	ldrb	r2, [r7, #7]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4a57      	ldr	r2, [pc, #348]	@ (8002b80 <_Z14printRegistersh+0x53c>)
 8002a24:	4413      	add	r3, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 ff53 	bl	80068d2 <_ZN7DRV82146getKMCEv>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4854      	ldr	r0, [pc, #336]	@ (8002b84 <_Z14printRegistersh+0x540>)
 8002a32:	f00d fe3f 	bl	80106b4 <iprintf>
  printf(" | Ripple Threshold Scaled: ");
 8002a36:	4854      	ldr	r0, [pc, #336]	@ (8002b88 <_Z14printRegistersh+0x544>)
 8002a38:	f00d fe3c 	bl	80106b4 <iprintf>
  printf("%hu", drivers[driver_id].getRippleThresholdScaled()); // %hu for uint16_t
 8002a3c:	79fa      	ldrb	r2, [r7, #7]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4a4e      	ldr	r2, [pc, #312]	@ (8002b80 <_Z14printRegistersh+0x53c>)
 8002a48:	4413      	add	r3, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 fee1 	bl	8006812 <_ZN7DRV821424getRippleThresholdScaledEv>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4619      	mov	r1, r3
 8002a54:	484d      	ldr	r0, [pc, #308]	@ (8002b8c <_Z14printRegistersh+0x548>)
 8002a56:	f00d fe2d 	bl	80106b4 <iprintf>
  printf(" | Ripples Threshold: ");
 8002a5a:	484d      	ldr	r0, [pc, #308]	@ (8002b90 <_Z14printRegistersh+0x54c>)
 8002a5c:	f00d fe2a 	bl	80106b4 <iprintf>
  printf("%hu", drivers[driver_id].getRippleThreshold()); // %hu for uint16_t
 8002a60:	79fa      	ldrb	r2, [r7, #7]
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4a45      	ldr	r2, [pc, #276]	@ (8002b80 <_Z14printRegistersh+0x53c>)
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 feaa 	bl	80067c8 <_ZN7DRV821418getRippleThresholdEv>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4619      	mov	r1, r3
 8002a78:	4844      	ldr	r0, [pc, #272]	@ (8002b8c <_Z14printRegistersh+0x548>)
 8002a7a:	f00d fe1b 	bl	80106b4 <iprintf>
  printf(" or 0b");
 8002a7e:	4845      	ldr	r0, [pc, #276]	@ (8002b94 <_Z14printRegistersh+0x550>)
 8002a80:	f00d fe18 	bl	80106b4 <iprintf>
  print2BytesAsBinary(drivers[driver_id].getRippleThreshold());
 8002a84:	79fa      	ldrb	r2, [r7, #7]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b80 <_Z14printRegistersh+0x53c>)
 8002a90:	4413      	add	r3, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f003 fe98 	bl	80067c8 <_ZN7DRV821418getRippleThresholdEv>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fdb2 	bl	8002604 <_Z19print2BytesAsBinaryt>
  printf(" | ");
 8002aa0:	4835      	ldr	r0, [pc, #212]	@ (8002b78 <_Z14printRegistersh+0x534>)
 8002aa2:	f00d fe07 	bl	80106b4 <iprintf>

  printf("RC_CTRL1: 0b");
 8002aa6:	483c      	ldr	r0, [pc, #240]	@ (8002b98 <_Z14printRegistersh+0x554>)
 8002aa8:	f00d fe04 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL1());
 8002aac:	79fa      	ldrb	r2, [r7, #7]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4a32      	ldr	r2, [pc, #200]	@ (8002b80 <_Z14printRegistersh+0x53c>)
 8002ab8:	4413      	add	r3, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 fe66 	bl	800678c <_ZN7DRV821411getRC_CTRL1Ev>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fd7e 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002ac8:	482b      	ldr	r0, [pc, #172]	@ (8002b78 <_Z14printRegistersh+0x534>)
 8002aca:	f00d fdf3 	bl	80106b4 <iprintf>

  printf("RC_CTRL2: 0b");
 8002ace:	4833      	ldr	r0, [pc, #204]	@ (8002b9c <_Z14printRegistersh+0x558>)
 8002ad0:	f00d fdf0 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL2());
 8002ad4:	79fa      	ldrb	r2, [r7, #7]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4a28      	ldr	r2, [pc, #160]	@ (8002b80 <_Z14printRegistersh+0x53c>)
 8002ae0:	4413      	add	r3, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f003 fe61 	bl	80067aa <_ZN7DRV821411getRC_CTRL2Ev>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fd6a 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002af0:	4821      	ldr	r0, [pc, #132]	@ (8002b78 <_Z14printRegistersh+0x534>)
 8002af2:	f00d fddf 	bl	80106b4 <iprintf>

  printf("RC_CTRL6: 0b");
 8002af6:	482a      	ldr	r0, [pc, #168]	@ (8002ba0 <_Z14printRegistersh+0x55c>)
 8002af8:	f00d fddc 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL6());
 8002afc:	79fa      	ldrb	r2, [r7, #7]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4a1e      	ldr	r2, [pc, #120]	@ (8002b80 <_Z14printRegistersh+0x53c>)
 8002b08:	4413      	add	r3, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fef0 	bl	80068f0 <_ZN7DRV821411getRC_CTRL6Ev>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fd56 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002b18:	4817      	ldr	r0, [pc, #92]	@ (8002b78 <_Z14printRegistersh+0x534>)
 8002b1a:	f00d fdcb 	bl	80106b4 <iprintf>

  printf("RC_CTRL7: 0b");
 8002b1e:	4821      	ldr	r0, [pc, #132]	@ (8002ba4 <_Z14printRegistersh+0x560>)
 8002b20:	f00d fdc8 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL7());
 8002b24:	79fa      	ldrb	r2, [r7, #7]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4a14      	ldr	r2, [pc, #80]	@ (8002b80 <_Z14printRegistersh+0x53c>)
 8002b30:	4413      	add	r3, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f003 feeb 	bl	800690e <_ZN7DRV821411getRC_CTRL7Ev>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fd42 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002b40:	480d      	ldr	r0, [pc, #52]	@ (8002b78 <_Z14printRegistersh+0x534>)
 8002b42:	f00d fdb7 	bl	80106b4 <iprintf>

  printf("RC_CTRL8: 0b");
 8002b46:	4818      	ldr	r0, [pc, #96]	@ (8002ba8 <_Z14printRegistersh+0x564>)
 8002b48:	f00d fdb4 	bl	80106b4 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL8());
 8002b4c:	79fa      	ldrb	r2, [r7, #7]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4a0a      	ldr	r2, [pc, #40]	@ (8002b80 <_Z14printRegistersh+0x53c>)
 8002b58:	4413      	add	r3, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 fee6 	bl	800692c <_ZN7DRV821411getRC_CTRL8Ev>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fd2e 	bl	80025c4 <_Z17printByteAsBinaryh>
  printf("\n"); // Final newline for the whole block
 8002b68:	200a      	movs	r0, #10
 8002b6a:	f00d fdb5 	bl	80106d8 <putchar>
}
 8002b6e:	bf00      	nop
 8002b70:	3740      	adds	r7, #64	@ 0x40
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	08012f58 	.word	0x08012f58
 8002b7c:	0801302c 	.word	0x0801302c
 8002b80:	20000450 	.word	0x20000450
 8002b84:	08012f18 	.word	0x08012f18
 8002b88:	08013034 	.word	0x08013034
 8002b8c:	08012f34 	.word	0x08012f34
 8002b90:	08013054 	.word	0x08013054
 8002b94:	0801306c 	.word	0x0801306c
 8002b98:	08013074 	.word	0x08013074
 8002b9c:	08013084 	.word	0x08013084
 8002ba0:	08013094 	.word	0x08013094
 8002ba4:	080130a4 	.word	0x080130a4
 8002ba8:	080130b4 	.word	0x080130b4

08002bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb0:	b672      	cpsid	i
}
 8002bb2:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    // red LED ON
    WS2812_SetColor(255, 0, 0, 100); // Red
 8002bb4:	2364      	movs	r3, #100	@ 0x64
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	20ff      	movs	r0, #255	@ 0xff
 8002bbc:	f7fe f9c0 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
    HAL_Delay(200); // Wait for 1 second
 8002bc0:	20c8      	movs	r0, #200	@ 0xc8
 8002bc2:	f005 fa91 	bl	80080e8 <HAL_Delay>
    WS2812_SetColor(0, 0, 0, 100); // Turn off the LED
 8002bc6:	2364      	movs	r3, #100	@ 0x64
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2100      	movs	r1, #0
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fe f9b7 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
    HAL_Delay(200); // Wait for 1 second
 8002bd2:	20c8      	movs	r0, #200	@ 0xc8
 8002bd4:	f005 fa88 	bl	80080e8 <HAL_Delay>
    WS2812_SetColor(255, 0, 0, 100); // Red
 8002bd8:	bf00      	nop
 8002bda:	e7eb      	b.n	8002bb4 <Error_Handler+0x8>

08002bdc <_Z41__static_initialization_and_destruction_0v>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af04      	add	r7, sp, #16
float half_range_ripples = full_range_ripples / 2;
 8002be2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c60 <_Z41__static_initialization_and_destruction_0v+0x84>)
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c64 <_Z41__static_initialization_and_destruction_0v+0x88>)
 8002bf4:	edc3 7a00 	vstr	s15, [r3]
float nb_ripples_per_mm = full_range_ripples / full_range_mm;
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <_Z41__static_initialization_and_destruction_0v+0x84>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c04:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <_Z41__static_initialization_and_destruction_0v+0x8c>)
 8002c06:	ed93 7a00 	vldr	s14, [r3]
 8002c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0e:	4b17      	ldr	r3, [pc, #92]	@ (8002c6c <_Z41__static_initialization_and_destruction_0v+0x90>)
 8002c10:	edc3 7a00 	vstr	s15, [r3]
};
 8002c14:	4c16      	ldr	r4, [pc, #88]	@ (8002c70 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002c16:	f240 4382 	movw	r3, #1154	@ 0x482
 8002c1a:	9303      	str	r3, [sp, #12]
 8002c1c:	231a      	movs	r3, #26
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	2314      	movs	r3, #20
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2306      	movs	r3, #6
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	2138      	movs	r1, #56	@ 0x38
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7fe fe3e 	bl	80018b2 <_ZN7DRV8214C1Ehhthhht>
 8002c36:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002c3a:	f240 4382 	movw	r3, #1154	@ 0x482
 8002c3e:	9303      	str	r3, [sp, #12]
 8002c40:	231a      	movs	r3, #26
 8002c42:	9302      	str	r3, [sp, #8]
 8002c44:	2314      	movs	r3, #20
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	2306      	movs	r3, #6
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8002c50:	2211      	movs	r2, #17
 8002c52:	2138      	movs	r1, #56	@ 0x38
 8002c54:	f7fe fe2d 	bl	80018b2 <_ZN7DRV8214C1Ehhthhht>
}
 8002c58:	bf00      	nop
 8002c5a:	3704      	adds	r7, #4
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd90      	pop	{r4, r7, pc}
 8002c60:	20000008 	.word	0x20000008
 8002c64:	200003d4 	.word	0x200003d4
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	200003d8 	.word	0x200003d8
 8002c70:	20000450 	.word	0x20000450

08002c74 <_GLOBAL__sub_I_g_measure_battery_flag>:
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	f7ff ffb0 	bl	8002bdc <_Z41__static_initialization_and_destruction_0v>
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_APB1_GRP1_EnableClock>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002cae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cbc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
}
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cd8:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <MX_RTC_Init+0x5c>)
 8002cda:	4a16      	ldr	r2, [pc, #88]	@ (8002d34 <MX_RTC_Init+0x60>)
 8002cdc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cde:	4b14      	ldr	r3, [pc, #80]	@ (8002d30 <MX_RTC_Init+0x5c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <MX_RTC_Init+0x5c>)
 8002ce6:	227f      	movs	r2, #127	@ 0x7f
 8002ce8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002cea:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <MX_RTC_Init+0x5c>)
 8002cec:	22ff      	movs	r2, #255	@ 0xff
 8002cee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <MX_RTC_Init+0x5c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <MX_RTC_Init+0x5c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <MX_RTC_Init+0x5c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002d02:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <MX_RTC_Init+0x5c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d08:	4809      	ldr	r0, [pc, #36]	@ (8002d30 <MX_RTC_Init+0x5c>)
 8002d0a:	f00a facb 	bl	800d2a4 <HAL_RTC_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002d14:	f7ff ff4a 	bl	8002bac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4804      	ldr	r0, [pc, #16]	@ (8002d30 <MX_RTC_Init+0x5c>)
 8002d1e:	f00a fbcf 	bl	800d4c0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002d28:	f7ff ff40 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	200004c0 	.word	0x200004c0
 8002d34:	40002800 	.word	0x40002800

08002d38 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b096      	sub	sp, #88	@ 0x58
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d40:	f107 0308 	add.w	r3, r7, #8
 8002d44:	2250      	movs	r2, #80	@ 0x50
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f00d fd2b 	bl	80107a4 <memset>
  if(rtcHandle->Instance==RTC)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a13      	ldr	r2, [pc, #76]	@ (8002da0 <HAL_RTC_MspInit+0x68>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d11f      	bne.n	8002d98 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8002d58:	f008 fc86 	bl	800b668 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d60:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002d62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d66:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d68:	f107 0308 	add.w	r3, r7, #8
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f00a f812 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8002d78:	f7ff ff18 	bl	8002bac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d7c:	f7ff ff7f 	bl	8002c7e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002d80:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002d84:	f7ff ff8c 	bl	8002ca0 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	f006 fc8a 	bl	80096a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002d92:	2003      	movs	r0, #3
 8002d94:	f006 fca1 	bl	80096da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3758      	adds	r7, #88	@ 0x58
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40002800 	.word	0x40002800

08002da4 <LL_AHB2_GRP1_EnableClock>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002db2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_APB1_GRP1_EnableClock>:
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002de4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4013      	ands	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e80 <MX_SPI2_Init+0x78>)
 8002e10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e1a:	4b18      	ldr	r3, [pc, #96]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e20:	4b16      	ldr	r3, [pc, #88]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e22:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e26:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e28:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e34:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e3a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e3e:	2218      	movs	r2, #24
 8002e40:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e48:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002e54:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e56:	2207      	movs	r2, #7
 8002e58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e62:	2208      	movs	r2, #8
 8002e64:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e66:	4805      	ldr	r0, [pc, #20]	@ (8002e7c <MX_SPI2_Init+0x74>)
 8002e68:	f00a fc26 	bl	800d6b8 <HAL_SPI_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002e72:	f7ff fe9b 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200004e4 	.word	0x200004e4
 8002e80:	40003800 	.word	0x40003800

08002e84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a31      	ldr	r2, [pc, #196]	@ (8002f68 <HAL_SPI_MspInit+0xe4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d15b      	bne.n	8002f5e <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ea6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002eaa:	f7ff ff94 	bl	8002dd6 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eae:	2004      	movs	r0, #4
 8002eb0:	f7ff ff78 	bl	8002da4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb4:	2002      	movs	r0, #2
 8002eb6:	f7ff ff75 	bl	8002da4 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002eba:	2308      	movs	r3, #8
 8002ebc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002eca:	2305      	movs	r3, #5
 8002ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4825      	ldr	r0, [pc, #148]	@ (8002f6c <HAL_SPI_MspInit+0xe8>)
 8002ed6:	f006 fe95 	bl	8009c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ede:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002eec:	2305      	movs	r3, #5
 8002eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	481e      	ldr	r0, [pc, #120]	@ (8002f70 <HAL_SPI_MspInit+0xec>)
 8002ef8:	f006 fe84 	bl	8009c04 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8002efc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002efe:	4a1e      	ldr	r2, [pc, #120]	@ (8002f78 <HAL_SPI_MspInit+0xf4>)
 8002f00:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002f02:	4b1c      	ldr	r3, [pc, #112]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002f04:	2209      	movs	r2, #9
 8002f06:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f08:	4b1a      	ldr	r3, [pc, #104]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f0e:	4b19      	ldr	r3, [pc, #100]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f14:	4b17      	ldr	r3, [pc, #92]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002f16:	2280      	movs	r2, #128	@ 0x80
 8002f18:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f1a:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f20:	4b14      	ldr	r3, [pc, #80]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002f26:	4b13      	ldr	r3, [pc, #76]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002f32:	4810      	ldr	r0, [pc, #64]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002f34:	f006 fbec 	bl	8009710 <HAL_DMA_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8002f3e:	f7ff fe35 	bl	8002bac <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a0b      	ldr	r2, [pc, #44]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002f46:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f48:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <HAL_SPI_MspInit+0xf0>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	2023      	movs	r0, #35	@ 0x23
 8002f54:	f006 fba7 	bl	80096a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002f58:	2023      	movs	r0, #35	@ 0x23
 8002f5a:	f006 fbbe 	bl	80096da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002f5e:	bf00      	nop
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40003800 	.word	0x40003800
 8002f6c:	48000800 	.word	0x48000800
 8002f70:	48000400 	.word	0x48000400
 8002f74:	20000548 	.word	0x20000548
 8002f78:	40020008 	.word	0x40020008

08002f7c <LL_AHB3_GRP1_EnableClock>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002fbc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002fc0:	f7ff ffdc 	bl	8002f7c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	202e      	movs	r0, #46	@ 0x2e
 8002fca:	f006 fb6c 	bl	80096a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002fce:	202e      	movs	r0, #46	@ 0x2e
 8002fd0:	f006 fb83 	bl	80096da <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002fdc:	463b      	mov	r3, r7
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f008 fb52 	bl	800b688 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002fe4:	f008 fb92 	bl	800b70c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <NMI_Handler+0x4>

08002ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <HardFault_Handler+0x4>

08003000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <MemManage_Handler+0x4>

08003008 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <BusFault_Handler+0x4>

08003010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <UsageFault_Handler+0x4>

08003018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003046:	f005 f823 	bl	8008090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003054:	4802      	ldr	r0, [pc, #8]	@ (8003060 <RTC_WKUP_IRQHandler+0x10>)
 8003056:	f00a faff 	bl	800d658 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	200004c0 	.word	0x200004c0

08003064 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON5_Pin);
 8003068:	2008      	movs	r0, #8
 800306a:	f006 ff6b 	bl	8009f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}

08003072 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8003076:	2010      	movs	r0, #16
 8003078:	f006 ff64 	bl	8009f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}

08003080 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003084:	4802      	ldr	r0, [pc, #8]	@ (8003090 <DMA1_Channel1_IRQHandler+0x10>)
 8003086:	f006 fca9 	bl	80099dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000548 	.word	0x20000548

08003094 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8003098:	2020      	movs	r0, #32
 800309a:	f006 ff53 	bl	8009f44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800309e:	2080      	movs	r0, #128	@ 0x80
 80030a0:	f006 ff50 	bl	8009f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030ac:	4802      	ldr	r0, [pc, #8]	@ (80030b8 <TIM2_IRQHandler+0x10>)
 80030ae:	f00b f847 	bl	800e140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200005ac 	.word	0x200005ac

080030bc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80030c0:	4802      	ldr	r0, [pc, #8]	@ (80030cc <SPI2_IRQHandler+0x10>)
 80030c2:	f00a fd13 	bl	800daec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200004e4 	.word	0x200004e4

080030d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030d4:	4802      	ldr	r0, [pc, #8]	@ (80030e0 <USART1_IRQHandler+0x10>)
 80030d6:	f00b fc1f 	bl	800e918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200005f8 	.word	0x200005f8

080030e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 80030e8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80030ec:	f006 ff2a 	bl	8009f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80030f8:	4802      	ldr	r0, [pc, #8]	@ (8003104 <IPCC_C1_RX_IRQHandler+0x10>)
 80030fa:	f008 f989 	bl	800b410 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	2000038c 	.word	0x2000038c

08003108 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800310c:	4802      	ldr	r0, [pc, #8]	@ (8003118 <IPCC_C1_TX_IRQHandler+0x10>)
 800310e:	f008 f931 	bl	800b374 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	2000038c 	.word	0x2000038c

0800311c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003120:	f006 ff28 	bl	8009f74 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}

08003128 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return 1;
 800312c:	2301      	movs	r3, #1
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <_kill>:

int _kill(int pid, int sig)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003142:	f00d fb37 	bl	80107b4 <__errno>
 8003146:	4603      	mov	r3, r0
 8003148:	2216      	movs	r2, #22
 800314a:	601a      	str	r2, [r3, #0]
  return -1;
 800314c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <_exit>:

void _exit (int status)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003160:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ffe7 	bl	8003138 <_kill>
  while (1) {}    /* Make sure we hang here */
 800316a:	bf00      	nop
 800316c:	e7fd      	b.n	800316a <_exit+0x12>

0800316e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e00a      	b.n	8003196 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003180:	f3af 8000 	nop.w
 8003184:	4601      	mov	r1, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	60ba      	str	r2, [r7, #8]
 800318c:	b2ca      	uxtb	r2, r1
 800318e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	3301      	adds	r3, #1
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	429a      	cmp	r2, r3
 800319c:	dbf0      	blt.n	8003180 <_read+0x12>
  }

  return len;
 800319e:	687b      	ldr	r3, [r7, #4]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031d0:	605a      	str	r2, [r3, #4]
  return 0;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <_isatty>:

int _isatty(int file)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031e8:	2301      	movs	r3, #1
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003218:	4a14      	ldr	r2, [pc, #80]	@ (800326c <_sbrk+0x5c>)
 800321a:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <_sbrk+0x60>)
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003224:	4b13      	ldr	r3, [pc, #76]	@ (8003274 <_sbrk+0x64>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d102      	bne.n	8003232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800322c:	4b11      	ldr	r3, [pc, #68]	@ (8003274 <_sbrk+0x64>)
 800322e:	4a12      	ldr	r2, [pc, #72]	@ (8003278 <_sbrk+0x68>)
 8003230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003232:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <_sbrk+0x64>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	429a      	cmp	r2, r3
 800323e:	d207      	bcs.n	8003250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003240:	f00d fab8 	bl	80107b4 <__errno>
 8003244:	4603      	mov	r3, r0
 8003246:	220c      	movs	r2, #12
 8003248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800324e:	e009      	b.n	8003264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003250:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <_sbrk+0x64>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003256:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <_sbrk+0x64>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	4a05      	ldr	r2, [pc, #20]	@ (8003274 <_sbrk+0x64>)
 8003260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20030000 	.word	0x20030000
 8003270:	00000400 	.word	0x00000400
 8003274:	200005a8 	.word	0x200005a8
 8003278:	200007e8 	.word	0x200007e8

0800327c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003280:	4b24      	ldr	r3, [pc, #144]	@ (8003314 <SystemInit+0x98>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	4a23      	ldr	r2, [pc, #140]	@ (8003314 <SystemInit+0x98>)
 8003288:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800328c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80032a8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032b4:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <SystemInit+0x9c>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80032ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032c6:	f023 0305 	bic.w	r3, r3, #5
 80032ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80032ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80032e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032e6:	4a0d      	ldr	r2, [pc, #52]	@ (800331c <SystemInit+0xa0>)
 80032e8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ee:	4a0b      	ldr	r2, [pc, #44]	@ (800331c <SystemInit+0xa0>)
 80032f0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003300:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00
 8003318:	faf6fefb 	.word	0xfaf6fefb
 800331c:	22041000 	.word	0x22041000

08003320 <LL_APB1_GRP1_EnableClock>:
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800332c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800332e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4313      	orrs	r3, r2
 8003336:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800333c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4013      	ands	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003344:	68fb      	ldr	r3, [r7, #12]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800335a:	f107 0310 	add.w	r3, r7, #16
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003372:	4b1e      	ldr	r3, [pc, #120]	@ (80033ec <MX_TIM2_Init+0x98>)
 8003374:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003378:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 800337a:	4b1c      	ldr	r3, [pc, #112]	@ (80033ec <MX_TIM2_Init+0x98>)
 800337c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8003380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003382:	4b1a      	ldr	r3, [pc, #104]	@ (80033ec <MX_TIM2_Init+0x98>)
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8003388:	4b18      	ldr	r3, [pc, #96]	@ (80033ec <MX_TIM2_Init+0x98>)
 800338a:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800338e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003390:	4b16      	ldr	r3, [pc, #88]	@ (80033ec <MX_TIM2_Init+0x98>)
 8003392:	2200      	movs	r2, #0
 8003394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003396:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <MX_TIM2_Init+0x98>)
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800339c:	4813      	ldr	r0, [pc, #76]	@ (80033ec <MX_TIM2_Init+0x98>)
 800339e:	f00a fe29 	bl	800dff4 <HAL_TIM_Base_Init>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80033a8:	f7ff fc00 	bl	8002bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033b2:	f107 0310 	add.w	r3, r7, #16
 80033b6:	4619      	mov	r1, r3
 80033b8:	480c      	ldr	r0, [pc, #48]	@ (80033ec <MX_TIM2_Init+0x98>)
 80033ba:	f00a ffc8 	bl	800e34e <HAL_TIM_ConfigClockSource>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80033c4:	f7ff fbf2 	bl	8002bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033c8:	2300      	movs	r3, #0
 80033ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	4619      	mov	r1, r3
 80033d4:	4805      	ldr	r0, [pc, #20]	@ (80033ec <MX_TIM2_Init+0x98>)
 80033d6:	f00b f9b1 	bl	800e73c <HAL_TIMEx_MasterConfigSynchronization>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80033e0:	f7ff fbe4 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033e4:	bf00      	nop
 80033e6:	3720      	adds	r7, #32
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200005ac 	.word	0x200005ac

080033f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003400:	d10a      	bne.n	8003418 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003402:	2001      	movs	r0, #1
 8003404:	f7ff ff8c 	bl	8003320 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003408:	2200      	movs	r2, #0
 800340a:	2100      	movs	r1, #0
 800340c:	201c      	movs	r0, #28
 800340e:	f006 f94a 	bl	80096a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003412:	201c      	movs	r0, #28
 8003414:	f006 f961 	bl	80096da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <LL_AHB2_GRP1_EnableClock>:
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800342c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800342e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4313      	orrs	r3, r2
 8003436:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800343c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4013      	ands	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003444:	68fb      	ldr	r3, [r7, #12]
}
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800345a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800345e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003460:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4313      	orrs	r3, r2
 8003468:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800346a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800346e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4013      	ands	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003476:	68fb      	ldr	r3, [r7, #12]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003488:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 800348a:	4a23      	ldr	r2, [pc, #140]	@ (8003518 <MX_USART1_UART_Init+0x94>)
 800348c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800348e:	4b21      	ldr	r3, [pc, #132]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 8003490:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003496:	4b1f      	ldr	r3, [pc, #124]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800349c:	4b1d      	ldr	r3, [pc, #116]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 80034aa:	220c      	movs	r2, #12
 80034ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ae:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b4:	4b17      	ldr	r3, [pc, #92]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034ba:	4b16      	ldr	r3, [pc, #88]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 80034bc:	2200      	movs	r2, #0
 80034be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034c0:	4b14      	ldr	r3, [pc, #80]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034c6:	4b13      	ldr	r3, [pc, #76]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034cc:	4811      	ldr	r0, [pc, #68]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 80034ce:	f00b f9d3 	bl	800e878 <HAL_UART_Init>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80034d8:	f7ff fb68 	bl	8002bac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034dc:	2100      	movs	r1, #0
 80034de:	480d      	ldr	r0, [pc, #52]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 80034e0:	f00c fa57 	bl	800f992 <HAL_UARTEx_SetTxFifoThreshold>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80034ea:	f7ff fb5f 	bl	8002bac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034ee:	2100      	movs	r1, #0
 80034f0:	4808      	ldr	r0, [pc, #32]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 80034f2:	f00c fa8c 	bl	800fa0e <HAL_UARTEx_SetRxFifoThreshold>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80034fc:	f7ff fb56 	bl	8002bac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003500:	4804      	ldr	r0, [pc, #16]	@ (8003514 <MX_USART1_UART_Init+0x90>)
 8003502:	f00c fa0d 	bl	800f920 <HAL_UARTEx_DisableFifoMode>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800350c:	f7ff fb4e 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003510:	bf00      	nop
 8003512:	bd80      	pop	{r7, pc}
 8003514:	200005f8 	.word	0x200005f8
 8003518:	40013800 	.word	0x40013800

0800351c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b09c      	sub	sp, #112	@ 0x70
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	2250      	movs	r2, #80	@ 0x50
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f00d f931 	bl	80107a4 <memset>
  if(uartHandle->Instance==USART1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <HAL_UART_MspInit+0x98>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d12e      	bne.n	80035aa <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800354c:	2301      	movs	r3, #1
 800354e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003550:	2300      	movs	r3, #0
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003554:	f107 030c 	add.w	r3, r7, #12
 8003558:	4618      	mov	r0, r3
 800355a:	f009 fc1c 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003564:	f7ff fb22 	bl	8002bac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003568:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800356c:	f7ff ff71 	bl	8003452 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003570:	2001      	movs	r0, #1
 8003572:	f7ff ff55 	bl	8003420 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003576:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800357a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	2302      	movs	r3, #2
 800357e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003584:	2302      	movs	r3, #2
 8003586:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003588:	2307      	movs	r3, #7
 800358a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003590:	4619      	mov	r1, r3
 8003592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003596:	f006 fb35 	bl	8009c04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800359a:	2200      	movs	r2, #0
 800359c:	2100      	movs	r1, #0
 800359e:	2024      	movs	r0, #36	@ 0x24
 80035a0:	f006 f881 	bl	80096a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035a4:	2024      	movs	r0, #36	@ 0x24
 80035a6:	f006 f898 	bl	80096da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80035aa:	bf00      	nop
 80035ac:	3770      	adds	r7, #112	@ 0x70
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40013800 	.word	0x40013800

080035b8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80035b8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035ba:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035bc:	3304      	adds	r3, #4

080035be <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035be:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035c0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80035c2:	d3f9      	bcc.n	80035b8 <CopyDataInit>
  bx lr
 80035c4:	4770      	bx	lr

080035c6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80035c6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80035c8:	3004      	adds	r0, #4

080035ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80035ca:	4288      	cmp	r0, r1
  bcc FillZerobss
 80035cc:	d3fb      	bcc.n	80035c6 <FillZerobss>
  bx lr
 80035ce:	4770      	bx	lr

080035d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035d0:	480c      	ldr	r0, [pc, #48]	@ (8003604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80035d4:	f7ff fe52 	bl	800327c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80035d8:	480b      	ldr	r0, [pc, #44]	@ (8003608 <LoopForever+0x6>)
 80035da:	490c      	ldr	r1, [pc, #48]	@ (800360c <LoopForever+0xa>)
 80035dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003610 <LoopForever+0xe>)
 80035de:	2300      	movs	r3, #0
 80035e0:	f7ff ffed 	bl	80035be <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80035e4:	480b      	ldr	r0, [pc, #44]	@ (8003614 <LoopForever+0x12>)
 80035e6:	490c      	ldr	r1, [pc, #48]	@ (8003618 <LoopForever+0x16>)
 80035e8:	4a0c      	ldr	r2, [pc, #48]	@ (800361c <LoopForever+0x1a>)
 80035ea:	2300      	movs	r3, #0
 80035ec:	f7ff ffe7 	bl	80035be <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80035f0:	480b      	ldr	r0, [pc, #44]	@ (8003620 <LoopForever+0x1e>)
 80035f2:	490c      	ldr	r1, [pc, #48]	@ (8003624 <LoopForever+0x22>)
 80035f4:	2300      	movs	r3, #0
 80035f6:	f7ff ffe8 	bl	80035ca <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035fa:	f00d f8e1 	bl	80107c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80035fe:	f7fe f985 	bl	800190c <main>

08003602 <LoopForever>:

LoopForever:
  b LoopForever
 8003602:	e7fe      	b.n	8003602 <LoopForever>
  ldr   r0, =_estack
 8003604:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003608:	20000008 	.word	0x20000008
 800360c:	20000260 	.word	0x20000260
 8003610:	08015b30 	.word	0x08015b30
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003614:	20030000 	.word	0x20030000
 8003618:	20030000 	.word	0x20030000
 800361c:	08015d88 	.word	0x08015d88
  INIT_BSS _sbss, _ebss
 8003620:	20000260 	.word	0x20000260
 8003624:	200007e4 	.word	0x200007e4

08003628 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003628:	e7fe      	b.n	8003628 <ADC1_IRQHandler>
	...

0800362c <bmi2_sec_init>:
 * @brief This API is the entry point for bmi2 sensor. It selects between
 * I2C/SPI interface, based on user selection. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi2_sec_init(struct bmi2_dev *dev)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	73bb      	strb	r3, [r7, #14]

    /* Structure to define the default values for axes re-mapping */
    struct bmi2_axes_remap axes_remap = {
 8003638:	4a2b      	ldr	r2, [pc, #172]	@ (80036e8 <bmi2_sec_init+0xbc>)
 800363a:	f107 0308 	add.w	r3, r7, #8
 800363e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003642:	6018      	str	r0, [r3, #0]
 8003644:	3304      	adds	r3, #4
 8003646:	8019      	strh	r1, [r3, #0]
        .x_axis = BMI2_MAP_X_AXIS, .x_axis_sign = BMI2_POS_SIGN, .y_axis = BMI2_MAP_Y_AXIS,
        .y_axis_sign = BMI2_POS_SIGN, .z_axis = BMI2_MAP_Z_AXIS, .z_axis_sign = BMI2_POS_SIGN
    };

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f001 fc19 	bl	8004e80 <null_ptr_check>
 800364e:	4603      	mov	r3, r0
 8003650:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI2_OK)
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d140      	bne.n	80036dc <bmi2_sec_init+0xb0>
    {
        /* Set APS flag as after reset, the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from I2C interface */
        if (dev->intf == BMI2_SPI_INTF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	7a5b      	ldrb	r3, [r3, #9]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d108      	bne.n	800367c <bmi2_sec_init+0x50>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 800366a:	f107 010e 	add.w	r1, r7, #14
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	2000      	movs	r0, #0
 8003674:	f000 f83a 	bl	80036ec <bmi2_get_regs>
 8003678:	4603      	mov	r3, r0
 800367a:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 800367c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d12b      	bne.n	80036dc <bmi2_sec_init+0xb0>
        {
            /* Read chip-id of the BMI2 sensor */
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003684:	f107 010e 	add.w	r1, r7, #14
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	2000      	movs	r0, #0
 800368e:	f000 f82d 	bl	80036ec <bmi2_get_regs>
 8003692:	4603      	mov	r3, r0
 8003694:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI2_OK)
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11e      	bne.n	80036dc <bmi2_sec_init+0xb0>
            {
                /* Validate chip-id */
                if (chip_id == dev->chip_id)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	781a      	ldrb	r2, [r3, #0]
 80036a2:	7bbb      	ldrb	r3, [r7, #14]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d114      	bne.n	80036d2 <bmi2_sec_init+0xa6>
                {
                    /* Assign resolution to the structure */
                    dev->resolution = 16;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2210      	movs	r2, #16
 80036ac:	731a      	strb	r2, [r3, #12]

                    /* Set manual enable flag */
                    dev->aux_man_en = 1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	76da      	strb	r2, [r3, #27]

                    /* Set the default values for axis
                     *  re-mapping in the device structure
                     */
                    dev->remap = axes_remap;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3328      	adds	r3, #40	@ 0x28
 80036b8:	f107 0208 	add.w	r2, r7, #8
 80036bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036c0:	6018      	str	r0, [r3, #0]
 80036c2:	3304      	adds	r3, #4
 80036c4:	8019      	strh	r1, [r3, #0]

                    /* Perform soft-reset to bring all register values to their
                     * default values
                     */
                    rslt = bmi2_soft_reset(dev);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f906 	bl	80038d8 <bmi2_soft_reset>
 80036cc:	4603      	mov	r3, r0
 80036ce:	73fb      	strb	r3, [r7, #15]
 80036d0:	e004      	b.n	80036dc <bmi2_sec_init+0xb0>
                else
                {
                    /* Storing the chip-id value read from
                     * the register to identify the sensor
                     */
                    dev->chip_id = chip_id;
 80036d2:	7bba      	ldrb	r2, [r7, #14]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	701a      	strb	r2, [r3, #0]
                    rslt = BMI2_E_DEV_NOT_FOUND;
 80036d8:	23fd      	movs	r3, #253	@ 0xfd
 80036da:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80036dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	080130c4 	.word	0x080130c4

080036ec <bmi2_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x26, 0x5E.
 */
int8_t bmi2_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b0a7      	sub	sp, #156	@ 0x9c
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	4603      	mov	r3, r0
 80036f8:	73fb      	strb	r3, [r7, #15]
 80036fa:	4613      	mov	r3, r2
 80036fc:	81bb      	strh	r3, [r7, #12]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define loop */
    uint16_t index = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI2_MAX_LEN];

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f001 fbbb 	bl	8004e80 <null_ptr_check>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if ((rslt == BMI2_OK) && (data != NULL))
 8003710:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8003714:	2b00      	cmp	r3, #0
 8003716:	d153      	bne.n	80037c0 <bmi2_get_regs+0xd4>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d050      	beq.n	80037c0 <bmi2_get_regs+0xd4>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	7a5b      	ldrb	r3, [r3, #9]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <bmi2_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI2_SPI_RD_MASK);
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800372c:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, (len + dev->dummy_byte), dev->intf_ptr);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8003732:	89bb      	ldrh	r3, [r7, #12]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	7ad2      	ldrb	r2, [r2, #11]
 8003738:	4413      	add	r3, r2
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f107 0114 	add.w	r1, r7, #20
 8003744:	7bf8      	ldrb	r0, [r7, #15]
 8003746:	47a0      	blx	r4
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	729a      	strb	r2, [r3, #10]

        if (dev->aps_status == BMI2_ENABLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003756:	2b01      	cmp	r3, #1
 8003758:	d108      	bne.n	800376c <bmi2_get_regs+0x80>
        {
            dev->delay_us(450, dev->intf_ptr);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6852      	ldr	r2, [r2, #4]
 8003762:	4611      	mov	r1, r2
 8003764:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8003768:	4798      	blx	r3
 800376a:	e006      	b.n	800377a <bmi2_get_regs+0x8e>
        }
        else
        {
            dev->delay_us(2, dev->intf_ptr);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6852      	ldr	r2, [r2, #4]
 8003774:	4611      	mov	r1, r2
 8003776:	2002      	movs	r0, #2
 8003778:	4798      	blx	r3
        }

        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d119      	bne.n	80037b8 <bmi2_get_regs+0xcc>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8003784:	e012      	b.n	80037ac <bmi2_get_regs+0xc0>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8003786:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	7ad2      	ldrb	r2, [r2, #11]
 800378e:	441a      	add	r2, r3
 8003790:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	440b      	add	r3, r1
 8003798:	3298      	adds	r2, #152	@ 0x98
 800379a:	443a      	add	r2, r7
 800379c:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 80037a0:	701a      	strb	r2, [r3, #0]
                index++;
 80037a2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80037a6:	3301      	adds	r3, #1
 80037a8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 80037ac:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 80037b0:	89bb      	ldrh	r3, [r7, #12]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d3e7      	bcc.n	8003786 <bmi2_get_regs+0x9a>
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 80037b6:	e006      	b.n	80037c6 <bmi2_get_regs+0xda>
            }
        }
        else
        {
            rslt = BMI2_E_COM_FAIL;
 80037b8:	23fe      	movs	r3, #254	@ 0xfe
 80037ba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 80037be:	e002      	b.n	80037c6 <bmi2_get_regs+0xda>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80037c0:	23ff      	movs	r3, #255	@ 0xff
 80037c2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 80037c6:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	379c      	adds	r7, #156	@ 0x9c
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd90      	pop	{r4, r7, pc}

080037d2 <bmi2_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi2 sensor.
 */
int8_t bmi2_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 80037d2:	b590      	push	{r4, r7, lr}
 80037d4:	b087      	sub	sp, #28
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	4603      	mov	r3, r0
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	4613      	mov	r3, r2
 80037e2:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    uint16_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f001 fb4b 	bl	8004e80 <null_ptr_check>
 80037ea:	4603      	mov	r3, r0
 80037ec:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (data != NULL))
 80037ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d168      	bne.n	80038c8 <bmi2_set_regs+0xf6>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d065      	beq.n	80038c8 <bmi2_set_regs+0xf6>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7a5b      	ldrb	r3, [r3, #9]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <bmi2_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI2_SPI_WR_MASK);
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800380a:	73fb      	strb	r3, [r7, #15]
        }

        /* Writing Byte by byte and delay for Low power mode of the sensor is 450 us */
        if (dev->aps_status == BMI2_ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003812:	2b01      	cmp	r3, #1
 8003814:	d129      	bne.n	800386a <bmi2_set_regs+0x98>
        {
            for (loop = 0; loop < len; loop++)
 8003816:	2300      	movs	r3, #0
 8003818:	82bb      	strh	r3, [r7, #20]
 800381a:	e021      	b.n	8003860 <bmi2_set_regs+0x8e>
            {
                dev->intf_rslt = dev->write((uint8_t)((uint16_t)reg_addr + loop), &data[loop], 1, dev->intf_ptr);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8003820:	8abb      	ldrh	r3, [r7, #20]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	4413      	add	r3, r2
 8003828:	b2d8      	uxtb	r0, r3
 800382a:	8abb      	ldrh	r3, [r7, #20]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	18d1      	adds	r1, r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	47a0      	blx	r4
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	729a      	strb	r2, [r3, #10]
                dev->delay_us(BMI2_POWER_SAVE_MODE_DELAY_IN_US, dev->intf_ptr);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6852      	ldr	r2, [r2, #4]
 8003848:	4611      	mov	r1, r2
 800384a:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800384e:	4798      	blx	r3
                if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11b      	bne.n	8003892 <bmi2_set_regs+0xc0>
            for (loop = 0; loop < len; loop++)
 800385a:	8abb      	ldrh	r3, [r7, #20]
 800385c:	3301      	adds	r3, #1
 800385e:	82bb      	strh	r3, [r7, #20]
 8003860:	8aba      	ldrh	r2, [r7, #20]
 8003862:	89bb      	ldrh	r3, [r7, #12]
 8003864:	429a      	cmp	r2, r3
 8003866:	d3d9      	bcc.n	800381c <bmi2_set_regs+0x4a>
 8003868:	e014      	b.n	8003894 <bmi2_set_regs+0xc2>
            }
        }
        /* Burst write and delay for Normal mode of the sensor is 2 us */
        else
        {
            dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800386e:	89ba      	ldrh	r2, [r7, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	7bf8      	ldrb	r0, [r7, #15]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	47a0      	blx	r4
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	729a      	strb	r2, [r3, #10]
            dev->delay_us(BMI2_NORMAL_MODE_DELAY_IN_US, dev->intf_ptr);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6852      	ldr	r2, [r2, #4]
 800388a:	4611      	mov	r1, r2
 800388c:	2002      	movs	r0, #2
 800388e:	4798      	blx	r3
 8003890:	e000      	b.n	8003894 <bmi2_set_regs+0xc2>
                    break;
 8003892:	bf00      	nop
        }

        /* Updating the advance power saver flag */
        if (reg_addr == BMI2_PWR_CONF_ADDR)
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b7c      	cmp	r3, #124	@ 0x7c
 8003898:	d10e      	bne.n	80038b8 <bmi2_set_regs+0xe6>
        {
            if (*data & BMI2_ADV_POW_EN_MASK)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <bmi2_set_regs+0xde>
            {
                dev->aps_status = BMI2_ENABLE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 80038ae:	e003      	b.n	80038b8 <bmi2_set_regs+0xe6>
            }
            else
            {
                dev->aps_status = BMI2_DISABLE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }

        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <bmi2_set_regs+0xfa>
        {
            rslt = BMI2_E_COM_FAIL;
 80038c2:	23fe      	movs	r3, #254	@ 0xfe
 80038c4:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 80038c6:	e001      	b.n	80038cc <bmi2_set_regs+0xfa>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80038c8:	23ff      	movs	r3, #255	@ 0xff
 80038ca:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80038cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd90      	pop	{r4, r7, pc}

080038d8 <bmi2_soft_reset>:
/*!
 * @brief This API resets bmi2 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi2_soft_reset(struct bmi2_dev *dev)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define soft reset value */
    uint8_t data = BMI2_SOFT_RESET_CMD;
 80038e0:	23b6      	movs	r3, #182	@ 0xb6
 80038e2:	73bb      	strb	r3, [r7, #14]

    /* Variable to read the dummy byte */
    uint8_t dummy_read = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	737b      	strb	r3, [r7, #13]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f001 fac9 	bl	8004e80 <null_ptr_check>
 80038ee:	4603      	mov	r3, r0
 80038f0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80038f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d139      	bne.n	800396e <bmi2_soft_reset+0x96>
    {
        /* Reset bmi2 device */
        rslt = bmi2_set_regs(BMI2_CMD_REG_ADDR, &data, 1, dev);
 80038fa:	f107 010e 	add.w	r1, r7, #14
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	207e      	movs	r0, #126	@ 0x7e
 8003904:	f7ff ff65 	bl	80037d2 <bmi2_set_regs>
 8003908:	4603      	mov	r3, r0
 800390a:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(2000, dev->intf_ptr);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6852      	ldr	r2, [r2, #4]
 8003914:	4611      	mov	r1, r2
 8003916:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800391a:	4798      	blx	r3

        /* Set APS flag as after soft reset the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from
         * I2C after a soft-reset
         */
        if ((rslt == BMI2_OK) && (dev->intf == BMI2_SPI_INTF))
 8003924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10c      	bne.n	8003946 <bmi2_soft_reset+0x6e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	7a5b      	ldrb	r3, [r3, #9]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d108      	bne.n	8003946 <bmi2_soft_reset+0x6e>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &dummy_read, 1, dev);
 8003934:	f107 010d 	add.w	r1, r7, #13
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	2000      	movs	r0, #0
 800393e:	f7ff fed5 	bl	80036ec <bmi2_get_regs>
 8003942:	4603      	mov	r3, r0
 8003944:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8003946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d104      	bne.n	8003958 <bmi2_soft_reset+0x80>
        {
            /* Write the configuration file */
            rslt = bmi2_write_config_file(dev);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f85f 	bl	8003a12 <bmi2_write_config_file>
 8003954:	4603      	mov	r3, r0
 8003956:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the sensor status flag in the device structure */
        if (rslt == BMI2_OK)
 8003958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <bmi2_soft_reset+0x96>
        {
            dev->sens_en_stat = 0;
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        }
    }

    return rslt;
 800396e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <bmi2_set_adv_power_save>:

/*!
 * @brief This API enables/disables the advance power save mode in the sensor.
 */
int8_t bmi2_set_adv_power_save(uint8_t enable, struct bmi2_dev *dev)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	6039      	str	r1, [r7, #0]
 8003984:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800398a:	6838      	ldr	r0, [r7, #0]
 800398c:	f001 fa78 	bl	8004e80 <null_ptr_check>
 8003990:	4603      	mov	r3, r0
 8003992:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8003994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d134      	bne.n	8003a06 <bmi2_set_adv_power_save+0x8c>
    {
        rslt = bmi2_get_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 800399c:	f107 010e 	add.w	r1, r7, #14
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2201      	movs	r2, #1
 80039a4:	207c      	movs	r0, #124	@ 0x7c
 80039a6:	f7ff fea1 	bl	80036ec <bmi2_get_regs>
 80039aa:	4603      	mov	r3, r0
 80039ac:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80039ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d127      	bne.n	8003a06 <bmi2_set_adv_power_save+0x8c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ADV_POW_EN, enable);
 80039b6:	7bbb      	ldrb	r3, [r7, #14]
 80039b8:	b25b      	sxtb	r3, r3
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	b25a      	sxtb	r2, r3
 80039c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	4313      	orrs	r3, r2
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	73bb      	strb	r3, [r7, #14]
            rslt = bmi2_set_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 80039d2:	f107 010e 	add.w	r1, r7, #14
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2201      	movs	r2, #1
 80039da:	207c      	movs	r0, #124	@ 0x7c
 80039dc:	f7ff fef9 	bl	80037d2 <bmi2_set_regs>
 80039e0:	4603      	mov	r3, r0
 80039e2:	73fb      	strb	r3, [r7, #15]

            if (rslt != BMI2_OK)
 80039e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <bmi2_set_adv_power_save+0x76>
            {
                /* Return error if enable/disable APS fails */
                rslt = BMI2_E_SET_APS_FAIL;
 80039ec:	23f3      	movs	r3, #243	@ 0xf3
 80039ee:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BMI2_OK)
 80039f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <bmi2_set_adv_power_save+0x8c>
            {
                dev->aps_status = BMI2_GET_BIT_POS0(reg_data, BMI2_ADV_POW_EN);
 80039f8:	7bbb      	ldrb	r3, [r7, #14]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }
    }

    return rslt;
 8003a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <bmi2_write_config_file>:

/*!
 * @brief This API loads the configuration file into the bmi2 sensor.
 */
int8_t bmi2_write_config_file(struct bmi2_dev *dev)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to know the load status */
    uint8_t load_status = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f001 fa2e 	bl	8004e80 <null_ptr_check>
 8003a24:	4603      	mov	r3, r0
 8003a26:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (dev->config_size != 0))
 8003a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d13b      	bne.n	8003aa8 <bmi2_write_config_file+0x96>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d036      	beq.n	8003aa8 <bmi2_write_config_file+0x96>
    {
        /* Bytes written are multiples of 2 */
        if ((dev->read_write_len % 2) != 0)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	89db      	ldrh	r3, [r3, #14]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <bmi2_write_config_file+0x42>
        {
            dev->read_write_len = dev->read_write_len - 1;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	89db      	ldrh	r3, [r3, #14]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	81da      	strh	r2, [r3, #14]
        }

        if (dev->read_write_len < 2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	89db      	ldrh	r3, [r3, #14]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d802      	bhi.n	8003a62 <bmi2_write_config_file+0x50>
        {
            dev->read_write_len = 2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	81da      	strh	r2, [r3, #14]
        }

        /* Write the configuration file */
        rslt = write_config_file(dev);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fb42 	bl	80040ec <write_config_file>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8003a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d11c      	bne.n	8003aae <bmi2_write_config_file+0x9c>
        {
            /* Check the configuration load status */
            rslt = bmi2_get_internal_status(&load_status, dev);
 8003a74:	f107 030e 	add.w	r3, r7, #14
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fa45 	bl	8003f0a <bmi2_get_internal_status>
 8003a80:	4603      	mov	r3, r0
 8003a82:	73fb      	strb	r3, [r7, #15]

            load_status &= BMI2_CONFIG_LOAD_STATUS_MASK;
 8003a84:	7bbb      	ldrb	r3, [r7, #14]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	73bb      	strb	r3, [r7, #14]

            dev->load_status = load_status;
 8003a8e:	7bba      	ldrb	r2, [r7, #14]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	741a      	strb	r2, [r3, #16]

            /* Return error if loading not successful */
            if ((rslt == BMI2_OK) && (load_status != BMI2_CONFIG_LOAD_SUCCESS))
 8003a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d108      	bne.n	8003aae <bmi2_write_config_file+0x9c>
 8003a9c:	7bbb      	ldrb	r3, [r7, #14]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d005      	beq.n	8003aae <bmi2_write_config_file+0x9c>
            {
                rslt = BMI2_E_CONFIG_LOAD;
 8003aa2:	23f7      	movs	r3, #247	@ 0xf7
 8003aa4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8003aa6:	e002      	b.n	8003aae <bmi2_write_config_file+0x9c>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003aa8:	23ff      	movs	r3, #255	@ 0xff
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e000      	b.n	8003ab0 <bmi2_write_config_file+0x9e>
        if (rslt == BMI2_OK)
 8003aae:	bf00      	nop
    }

    return rslt;
 8003ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <bmi2_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi2_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f001 f9d6 	bl	8004e80 <null_ptr_check>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8003ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f040 8099 	bne.w	8003c14 <bmi2_set_sensor_config+0x158>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8095 	beq.w	8003c14 <bmi2_set_sensor_config+0x158>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003af0:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 8003af2:	2300      	movs	r3, #0
 8003af4:	75bb      	strb	r3, [r7, #22]
 8003af6:	e079      	b.n	8003bec <bmi2_set_sensor_config+0x130>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if (aps_stat == BMI2_ENABLE)
 8003af8:	7d7b      	ldrb	r3, [r7, #21]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <bmi2_set_sensor_config+0x4e>
            {
                /* Disable advance power save if
                 * enabled
                 */
                rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	2000      	movs	r0, #0
 8003b02:	f7ff ff3a 	bl	800397a <bmi2_set_adv_power_save>
 8003b06:	4603      	mov	r3, r0
 8003b08:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BMI2_OK)
 8003b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d165      	bne.n	8003bde <bmi2_set_sensor_config+0x122>
            {
                switch (sens_cfg[loop].type)
 8003b12:	7dba      	ldrb	r2, [r7, #22]
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4413      	add	r3, r2
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b09      	cmp	r3, #9
 8003b26:	d857      	bhi.n	8003bd8 <bmi2_set_sensor_config+0x11c>
 8003b28:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <bmi2_set_sensor_config+0x74>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b59 	.word	0x08003b59
 8003b34:	08003b79 	.word	0x08003b79
 8003b38:	08003b99 	.word	0x08003b99
 8003b3c:	08003bd9 	.word	0x08003bd9
 8003b40:	08003bd9 	.word	0x08003bd9
 8003b44:	08003bd9 	.word	0x08003bd9
 8003b48:	08003bd9 	.word	0x08003bd9
 8003b4c:	08003bd9 	.word	0x08003bd9
 8003b50:	08003bd9 	.word	0x08003bd9
 8003b54:	08003bb9 	.word	0x08003bb9
                {
                    /* Set accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8003b58:	7dba      	ldrb	r2, [r7, #22]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	3304      	adds	r3, #4
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f88a 	bl	8004c86 <set_accel_config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	75fb      	strb	r3, [r7, #23]
                        break;
 8003b76:	e032      	b.n	8003bde <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8003b78:	7dba      	ldrb	r2, [r7, #22]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	3304      	adds	r3, #4
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f001 f8f1 	bl	8004d74 <set_gyro_config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	75fb      	strb	r3, [r7, #23]
                        break;
 8003b96:	e022      	b.n	8003bde <bmi2_set_sensor_config+0x122>

                    /* Set auxiliary configuration */
                    case BMI2_AUX:
                        rslt = set_aux_config(&sens_cfg[loop].cfg.aux, dev);
 8003b98:	7dba      	ldrb	r2, [r7, #22]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3304      	adds	r3, #4
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fc97 	bl	80044e0 <set_aux_config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	75fb      	strb	r3, [r7, #23]
                        break;
 8003bb6:	e012      	b.n	8003bde <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = set_gyro_user_gain_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 8003bb8:	7dba      	ldrb	r2, [r7, #22]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3304      	adds	r3, #4
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fcb6 	bl	800453e <set_gyro_user_gain_config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	75fb      	strb	r3, [r7, #23]
                        break;
 8003bd6:	e002      	b.n	8003bde <bmi2_set_sensor_config+0x122>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 8003bd8:	23f8      	movs	r3, #248	@ 0xf8
 8003bda:	75fb      	strb	r3, [r7, #23]
                        break;
 8003bdc:	bf00      	nop
                }
            }

            /* Return error if any of the set configurations fail */
            if (rslt != BMI2_OK)
 8003bde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d107      	bne.n	8003bf6 <bmi2_set_sensor_config+0x13a>
        for (loop = 0; loop < n_sens; loop++)
 8003be6:	7dbb      	ldrb	r3, [r7, #22]
 8003be8:	3301      	adds	r3, #1
 8003bea:	75bb      	strb	r3, [r7, #22]
 8003bec:	7dba      	ldrb	r2, [r7, #22]
 8003bee:	7afb      	ldrb	r3, [r7, #11]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d381      	bcc.n	8003af8 <bmi2_set_sensor_config+0x3c>
 8003bf4:	e000      	b.n	8003bf8 <bmi2_set_sensor_config+0x13c>
            {
                break;
 8003bf6:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8003bf8:	7d7b      	ldrb	r3, [r7, #21]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d10d      	bne.n	8003c1a <bmi2_set_sensor_config+0x15e>
 8003bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <bmi2_set_sensor_config+0x15e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f7ff feb6 	bl	800397a <bmi2_set_adv_power_save>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8003c12:	e002      	b.n	8003c1a <bmi2_set_sensor_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003c14:	23ff      	movs	r3, #255	@ 0xff
 8003c16:	75fb      	strb	r3, [r7, #23]
 8003c18:	e000      	b.n	8003c1c <bmi2_set_sensor_config+0x160>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8003c1a:	bf00      	nop
    }

    return rslt;
 8003c1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <bmi2_get_feature_data>:

/*!
 * @brief This API gets the feature data gyroscope user-gain update and gyroscope cross sensitivity.
 */
int8_t bmi2_get_feature_data(struct bmi2_feat_sensor_data *feat_sensor_data, uint8_t n_sens, struct bmi2_dev *dev)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	460b      	mov	r3, r1
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f001 f920 	bl	8004e80 <null_ptr_check>
 8003c40:	4603      	mov	r3, r0
 8003c42:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 8003c44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d15c      	bne.n	8003d06 <bmi2_get_feature_data+0xde>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d059      	beq.n	8003d06 <bmi2_get_feature_data+0xde>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003c58:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	75bb      	strb	r3, [r7, #22]
 8003c5e:	e04b      	b.n	8003cf8 <bmi2_get_feature_data+0xd0>
        {
            /* Disable Advance power save if enabled for feature
             * configurations
             */
            if (feat_sensor_data[loop].type >= BMI2_MAIN_SENS_MAX_NUM)
 8003c60:	7dbb      	ldrb	r3, [r7, #22]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d908      	bls.n	8003c80 <bmi2_get_feature_data+0x58>
            {
                if (aps_stat == BMI2_ENABLE)
 8003c6e:	7d7b      	ldrb	r3, [r7, #21]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d105      	bne.n	8003c80 <bmi2_get_feature_data+0x58>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7ff fe7f 	bl	800397a <bmi2_set_adv_power_save>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 8003c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d127      	bne.n	8003cd8 <bmi2_get_feature_data+0xb0>
            {
                switch (feat_sensor_data[loop].type)
 8003c88:	7dbb      	ldrb	r3, [r7, #22]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	d00d      	beq.n	8003cb2 <bmi2_get_feature_data+0x8a>
 8003c96:	2b29      	cmp	r3, #41	@ 0x29
 8003c98:	d117      	bne.n	8003cca <bmi2_get_feature_data+0xa2>
                {
                    case BMI2_GYRO_CROSS_SENSE:

                        /* Get Gyroscope cross sense value of z axis */
                        rslt = get_gyro_cross_sense(&feat_sensor_data[loop].sens_data.correction_factor_zx, dev);
 8003c9a:	7dbb      	ldrb	r3, [r7, #22]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 f9a4 	bl	8004ff4 <get_gyro_cross_sense>
 8003cac:	4603      	mov	r3, r0
 8003cae:	75fb      	strb	r3, [r7, #23]
                        break;
 8003cb0:	e00e      	b.n	8003cd0 <bmi2_get_feature_data+0xa8>

                    case BMI2_GYRO_GAIN_UPDATE:

                        /* Get saturation status of gyroscope user gain update  */
                        rslt =
                            get_gyro_gain_update_status(&feat_sensor_data[loop].sens_data.gyro_user_gain_status, dev);
 8003cb2:	7dbb      	ldrb	r3, [r7, #22]
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	3304      	adds	r3, #4
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 f8fd 	bl	8004ebe <get_gyro_gain_update_status>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]
                        break;
 8003cc8:	e002      	b.n	8003cd0 <bmi2_get_feature_data+0xa8>
                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 8003cca:	23f8      	movs	r3, #248	@ 0xf8
 8003ccc:	75fb      	strb	r3, [r7, #23]
                        break;
 8003cce:	bf00      	nop
                }

                /* Return error if any of the get sensor data fails */
                if (rslt != BMI2_OK)
 8003cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d114      	bne.n	8003d02 <bmi2_get_feature_data+0xda>
            }

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8003cd8:	7d7b      	ldrb	r3, [r7, #21]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d109      	bne.n	8003cf2 <bmi2_get_feature_data+0xca>
 8003cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d105      	bne.n	8003cf2 <bmi2_get_feature_data+0xca>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7ff fe46 	bl	800397a <bmi2_set_adv_power_save>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 8003cf2:	7dbb      	ldrb	r3, [r7, #22]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	75bb      	strb	r3, [r7, #22]
 8003cf8:	7dba      	ldrb	r2, [r7, #22]
 8003cfa:	7afb      	ldrb	r3, [r7, #11]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d3af      	bcc.n	8003c60 <bmi2_get_feature_data+0x38>
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 8003d00:	e003      	b.n	8003d0a <bmi2_get_feature_data+0xe2>
                    break;
 8003d02:	bf00      	nop
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 8003d04:	e001      	b.n	8003d0a <bmi2_get_feature_data+0xe2>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003d06:	23ff      	movs	r3, #255	@ 0xff
 8003d08:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <bmi2_get_sensor_data>:
/*!
 * @brief This API gets the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_get_sensor_data(struct bmi2_sens_data *data, struct bmi2_dev *dev)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b08a      	sub	sp, #40	@ 0x28
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]

    /* Array to hold register sensor data */
    uint8_t sensor_data[BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES];

    /* Null-pointer check */
    if (data != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d018      	beq.n	8003d58 <bmi2_get_sensor_data+0x42>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, sensor_data, BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES, dev);
 8003d26:	f107 010c 	add.w	r1, r7, #12
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2218      	movs	r2, #24
 8003d2e:	2003      	movs	r0, #3
 8003d30:	f7ff fcdc 	bl	80036ec <bmi2_get_regs>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI2_OK)
 8003d3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10d      	bne.n	8003d5e <bmi2_get_sensor_data+0x48>
        {
            rslt = bmi2_parse_sensor_data(sensor_data, data, dev);
 8003d42:	f107 030c 	add.w	r3, r7, #12
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f80d 	bl	8003d6a <bmi2_parse_sensor_data>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003d56:	e002      	b.n	8003d5e <bmi2_get_sensor_data+0x48>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003d58:	23ff      	movs	r3, #255	@ 0xff
 8003d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003d5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3728      	adds	r7, #40	@ 0x28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <bmi2_parse_sensor_data>:
/*!
 * @brief This API parses the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_parse_sensor_data(const uint8_t *sensor_data, struct bmi2_sens_data *data, const struct bmi2_dev *dev)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b088      	sub	sp, #32
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variables to define loop */
    uint8_t count = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	77bb      	strb	r3, [r7, #30]

    uint8_t index = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	777b      	strb	r3, [r7, #29]

    uint32_t sensor_time_byte3 = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]
    uint16_t sensor_time_byte2 = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	82fb      	strh	r3, [r7, #22]
    uint8_t sensor_time_byte1 = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	757b      	strb	r3, [r7, #21]

    rslt = null_ptr_check(dev);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 f878 	bl	8004e80 <null_ptr_check>
 8003d90:	4603      	mov	r3, r0
 8003d92:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMI2_OK) && (data != NULL))
 8003d94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d156      	bne.n	8003e4a <bmi2_parse_sensor_data+0xe0>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d053      	beq.n	8003e4a <bmi2_parse_sensor_data+0xe0>
    {
        /* Update auxiliary sensor data length */
        index = BMI2_AUX_START_INDEX;
 8003da2:	2301      	movs	r3, #1
 8003da4:	777b      	strb	r3, [r7, #29]

        /* Get the 8 bytes of auxiliary data */
        do
        {
            *(data->aux_data + count++) = (sensor_data[index++]);
 8003da6:	7f7b      	ldrb	r3, [r7, #29]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	777a      	strb	r2, [r7, #29]
 8003dac:	461a      	mov	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	441a      	add	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f103 0118 	add.w	r1, r3, #24
 8003db8:	7fbb      	ldrb	r3, [r7, #30]
 8003dba:	1c58      	adds	r0, r3, #1
 8003dbc:	77b8      	strb	r0, [r7, #30]
 8003dbe:	440b      	add	r3, r1
 8003dc0:	7812      	ldrb	r2, [r2, #0]
 8003dc2:	701a      	strb	r2, [r3, #0]
        } while (count < BMI2_AUX_NUM_BYTES);
 8003dc4:	7fbb      	ldrb	r3, [r7, #30]
 8003dc6:	2b07      	cmp	r3, #7
 8003dc8:	d9ed      	bls.n	8003da6 <bmi2_parse_sensor_data+0x3c>

        /* Update accelerometer sensor data length */
        index = BMI2_ACC_START_INDEX;
 8003dca:	2309      	movs	r3, #9
 8003dcc:	777b      	strb	r3, [r7, #29]

        /* Get accelerometer data from the register */
        get_acc_gyr_data(&data->acc, &sensor_data[index]);
 8003dce:	68b8      	ldr	r0, [r7, #8]
 8003dd0:	7f7b      	ldrb	r3, [r7, #29]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f000 fdde 	bl	8004998 <get_acc_gyr_data>

        /* Get the re-mapped accelerometer data */
        get_remapped_data(&data->acc, dev);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fe3d 	bl	8004a60 <get_remapped_data>

        /* Update gyroscope sensor data length */
        index = BMI2_GYR_START_INDEX;
 8003de6:	230f      	movs	r3, #15
 8003de8:	777b      	strb	r3, [r7, #29]

        /* Get gyroscope data from the register */
        get_acc_gyr_data(&data->gyr, &sensor_data[index]);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f103 000c 	add.w	r0, r3, #12
 8003df0:	7f7b      	ldrb	r3, [r7, #29]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4413      	add	r3, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	f000 fdce 	bl	8004998 <get_acc_gyr_data>

        /* Get the compensated gyroscope data */
        comp_gyro_cross_axis_sensitivity(&data->gyr, dev);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fedf 	bl	8004bc6 <comp_gyro_cross_axis_sensitivity>

        /* Get the re-mapped gyroscope data */
        get_remapped_data(&data->gyr, dev);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fe26 	bl	8004a60 <get_remapped_data>

        sensor_time_byte3 = sensor_data[BMI2_PARSE_SENSOR_TIME_MSB_BYTE] << 16;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3317      	adds	r3, #23
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	61bb      	str	r3, [r7, #24]
        sensor_time_byte2 = sensor_data[BMI2_PARSE_SENSOR_TIME_XLSB_BYTE] << 8;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3316      	adds	r3, #22
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	82fb      	strh	r3, [r7, #22]
        sensor_time_byte1 = sensor_data[BMI2_PARSE_SENSOR_TIME_LSB_BYTE];
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3315      	adds	r3, #21
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	757b      	strb	r3, [r7, #21]

        data->sens_time = (uint32_t)(sensor_time_byte3 | sensor_time_byte2 | sensor_time_byte1);
 8003e30:	8afa      	ldrh	r2, [r7, #22]
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	7d7b      	ldrb	r3, [r7, #21]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	621a      	str	r2, [r3, #32]

        /* Store status register value in structure */
        data->status = sensor_data[BMI2_STATUS_INDEX];
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	781a      	ldrb	r2, [r3, #0]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e48:	e001      	b.n	8003e4e <bmi2_parse_sensor_data+0xe4>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003e4a:	23ff      	movs	r3, #255	@ 0xff
 8003e4c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003e4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <bmi2_get_status>:
/*!
 * @brief This API gets the data ready status of accelerometer, gyroscope,
 * auxiliary, command decoder and busy status of auxiliary.
 */
int8_t bmi2_get_status(uint8_t *status, struct bmi2_dev *dev)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003e64:	6838      	ldr	r0, [r7, #0]
 8003e66:	f001 f80b 	bl	8004e80 <null_ptr_check>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (status != NULL))
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <bmi2_get_status+0x34>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <bmi2_get_status+0x34>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, status, 1, dev);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	2003      	movs	r0, #3
 8003e84:	f7ff fc32 	bl	80036ec <bmi2_get_regs>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e001      	b.n	8003e92 <bmi2_get_status+0x38>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003e8e:	23ff      	movs	r3, #255	@ 0xff
 8003e90:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <bmi2_get_gyro_cross_sense>:
/*!
 * @brief This API updates the cross sensitivity coefficient between gyroscope's
 * X and Z axes.
 */
int8_t bmi2_get_gyro_cross_sense(struct bmi2_dev *dev)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b088      	sub	sp, #32
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	77fb      	strb	r3, [r7, #31]
    struct bmi2_feat_sensor_data data;

    /* Check if the feature is supported by this variant */
    if (dev->variant_feature & BMI2_GYRO_CROSS_SENS_ENABLE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <bmi2_get_gyro_cross_sense+0x5c>
    {
        rslt = null_ptr_check(dev);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 ffe1 	bl	8004e80 <null_ptr_check>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8003ec2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d114      	bne.n	8003ef4 <bmi2_get_gyro_cross_sense+0x56>
        {
            /* Select the feature whose data is to be acquired */
            data.type = BMI2_GYRO_CROSS_SENSE;
 8003eca:	2329      	movs	r3, #41	@ 0x29
 8003ecc:	733b      	strb	r3, [r7, #12]

            /* Get the respective data */
            rslt = bmi2_get_feature_data(&data, 1, dev);
 8003ece:	f107 030c 	add.w	r3, r7, #12
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fea6 	bl	8003c28 <bmi2_get_feature_data>
 8003edc:	4603      	mov	r3, r0
 8003ede:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8003ee0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <bmi2_get_gyro_cross_sense+0x60>
            {
                /* Update the gyroscope cross sense value of z axis
                 * in the device structure
                 */
                dev->gyr_cross_sens_zx = data.sens_data.correction_factor_zx;
 8003ee8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8003ef2:	e004      	b.n	8003efe <bmi2_get_gyro_cross_sense+0x60>
            }
        }
        else
        {
            rslt = BMI2_E_NULL_PTR;
 8003ef4:	23ff      	movs	r3, #255	@ 0xff
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e001      	b.n	8003efe <bmi2_get_gyro_cross_sense+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003efa:	23f8      	movs	r3, #248	@ 0xf8
 8003efc:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003efe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <bmi2_get_internal_status>:

/*!
 * @brief This API gets Error bits and message indicating internal status.
 */
int8_t bmi2_get_internal_status(uint8_t *int_stat, struct bmi2_dev *dev)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003f14:	6838      	ldr	r0, [r7, #0]
 8003f16:	f000 ffb3 	bl	8004e80 <null_ptr_check>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (int_stat != NULL))
 8003f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d113      	bne.n	8003f4e <bmi2_get_internal_status+0x44>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d010      	beq.n	8003f4e <bmi2_get_internal_status+0x44>
    {
        /* Wait till ASIC is initialized */
        dev->delay_us(BMI2_INTERNAL_STATUS_READ_DELAY_MS, dev->intf_ptr);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	6852      	ldr	r2, [r2, #4]
 8003f34:	4611      	mov	r1, r2
 8003f36:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8003f3a:	4798      	blx	r3

        /* Get the error bits and message */
        rslt = bmi2_get_regs(BMI2_INTERNAL_STATUS_ADDR, int_stat, 1, dev);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	2021      	movs	r0, #33	@ 0x21
 8003f44:	f7ff fbd2 	bl	80036ec <bmi2_get_regs>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	e001      	b.n	8003f52 <bmi2_get_internal_status+0x48>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003f4e:	23ff      	movs	r3, #255	@ 0xff
 8003f50:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <bmi2_get_feat_config>:
/*!
 * @brief This API is used to get the feature configuration from the
 * selected page.
 */
int8_t bmi2_get_feat_config(uint8_t sw_page, uint8_t *feat_config, struct bmi2_dev *dev)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4603      	mov	r3, r0
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	73fb      	strb	r3, [r7, #15]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define bytes remaining to read */
    uint8_t bytes_remain = BMI2_FEAT_SIZE_IN_BYTES;
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	75bb      	strb	r3, [r7, #22]

    /* Variable to define the read-write length */
    uint8_t read_write_len = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	757b      	strb	r3, [r7, #21]

    /* Variable to define the feature configuration address */
    uint8_t addr = BMI2_FEATURES_REG_ADDR;
 8003f74:	2330      	movs	r3, #48	@ 0x30
 8003f76:	753b      	strb	r3, [r7, #20]

    /* Variable to define index */
    uint8_t index = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	74fb      	strb	r3, [r7, #19]

    if ((feat_config == NULL) || (dev == NULL))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <bmi2_get_feat_config+0x2a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <bmi2_get_feat_config+0x30>
    {
        rslt = BMI2_E_NULL_PTR;
 8003f88:	23ff      	movs	r3, #255	@ 0xff
 8003f8a:	75fb      	strb	r3, [r7, #23]
 8003f8c:	e073      	b.n	8004076 <bmi2_get_feat_config+0x118>
    }
    else
    {
        /* Check whether the page is valid */
        if (sw_page < dev->page_max)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	7e1a      	ldrb	r2, [r3, #24]
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d96c      	bls.n	8004072 <bmi2_get_feat_config+0x114>
        {
            /* Switch page */
            rslt = bmi2_set_regs(BMI2_FEAT_PAGE_ADDR, &sw_page, 1, dev);
 8003f98:	f107 010f 	add.w	r1, r7, #15
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	202f      	movs	r0, #47	@ 0x2f
 8003fa2:	f7ff fc16 	bl	80037d2 <bmi2_set_regs>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	75fb      	strb	r3, [r7, #23]

            /* If user length is less than feature length */
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8003faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d152      	bne.n	8004058 <bmi2_get_feat_config+0xfa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	89db      	ldrh	r3, [r3, #14]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	d84e      	bhi.n	8004058 <bmi2_get_feat_config+0xfa>
            {
                /* Read-write should be even */
                if ((dev->read_write_len % 2) != 0)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	89db      	ldrh	r3, [r3, #14]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d041      	beq.n	800404c <bmi2_get_feat_config+0xee>
                {
                    dev->read_write_len--;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	89db      	ldrh	r3, [r3, #14]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	81da      	strh	r2, [r3, #14]
                }

                while (bytes_remain > 0)
 8003fd4:	e03a      	b.n	800404c <bmi2_get_feat_config+0xee>
                {
                    if (bytes_remain >= dev->read_write_len)
 8003fd6:	7dbb      	ldrb	r3, [r7, #22]
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	89db      	ldrh	r3, [r3, #14]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d31d      	bcc.n	800401e <bmi2_get_feat_config+0xc0>
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, &feat_config[index], dev->read_write_len, dev);
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	18d1      	adds	r1, r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	89da      	ldrh	r2, [r3, #14]
 8003fec:	7d38      	ldrb	r0, [r7, #20]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f7ff fb7c 	bl	80036ec <bmi2_get_regs>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	75fb      	strb	r3, [r7, #23]

                        /* Update index */
                        index += (uint8_t) dev->read_write_len;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	89db      	ldrh	r3, [r3, #14]
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	4413      	add	r3, r2
 8004002:	74fb      	strb	r3, [r7, #19]

                        /* Update address */
                        addr += (uint8_t) dev->read_write_len;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	89db      	ldrh	r3, [r3, #14]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	7d3b      	ldrb	r3, [r7, #20]
 800400c:	4413      	add	r3, r2
 800400e:	753b      	strb	r3, [r7, #20]

                        /* Update read-write length */
                        read_write_len += (uint8_t) dev->read_write_len;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	89db      	ldrh	r3, [r3, #14]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	7d7b      	ldrb	r3, [r7, #21]
 8004018:	4413      	add	r3, r2
 800401a:	757b      	strb	r3, [r7, #21]
 800401c:	e00e      	b.n	800403c <bmi2_get_feat_config+0xde>
                    }
                    else
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, (uint8_t *) (feat_config + index), (uint16_t) bytes_remain, dev);
 800401e:	7cfb      	ldrb	r3, [r7, #19]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	18d1      	adds	r1, r2, r3
 8004024:	7dbb      	ldrb	r3, [r7, #22]
 8004026:	b29a      	uxth	r2, r3
 8004028:	7d38      	ldrb	r0, [r7, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f7ff fb5e 	bl	80036ec <bmi2_get_regs>
 8004030:	4603      	mov	r3, r0
 8004032:	75fb      	strb	r3, [r7, #23]

                        /* Update read-write length */
                        read_write_len += bytes_remain;
 8004034:	7d7a      	ldrb	r2, [r7, #21]
 8004036:	7dbb      	ldrb	r3, [r7, #22]
 8004038:	4413      	add	r3, r2
 800403a:	757b      	strb	r3, [r7, #21]
                    }

                    /* Remaining bytes */
                    bytes_remain = BMI2_FEAT_SIZE_IN_BYTES - read_write_len;
 800403c:	7d7b      	ldrb	r3, [r7, #21]
 800403e:	f1c3 0310 	rsb	r3, r3, #16
 8004042:	75bb      	strb	r3, [r7, #22]

                    if (rslt != BMI2_OK)
 8004044:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d103      	bne.n	8004054 <bmi2_get_feat_config+0xf6>
                while (bytes_remain > 0)
 800404c:	7dbb      	ldrb	r3, [r7, #22]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1c1      	bne.n	8003fd6 <bmi2_get_feat_config+0x78>
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8004052:	e010      	b.n	8004076 <bmi2_get_feat_config+0x118>
                    {
                        break;
 8004054:	bf00      	nop
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8004056:	e00e      	b.n	8004076 <bmi2_get_feat_config+0x118>
                    }
                }
            }
            else if (rslt == BMI2_OK)
 8004058:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <bmi2_get_feat_config+0x118>
            {
                /* Get configuration from the page */
                rslt = bmi2_get_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2210      	movs	r2, #16
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	2030      	movs	r0, #48	@ 0x30
 8004068:	f7ff fb40 	bl	80036ec <bmi2_get_regs>
 800406c:	4603      	mov	r3, r0
 800406e:	75fb      	strb	r3, [r7, #23]
 8004070:	e001      	b.n	8004076 <bmi2_get_feat_config+0x118>
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_PAGE;
 8004072:	23f6      	movs	r3, #246	@ 0xf6
 8004074:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <bmi2_extract_input_feat_config>:
 * @brief This API is used to extract the input feature configuration
 * details from the look-up table.
 */
uint8_t bmi2_extract_input_feat_config(struct bmi2_feature_config *feat_config, uint8_t type,
                                       const struct bmi2_dev *dev)
{
 8004082:	b480      	push	{r7}
 8004084:	b087      	sub	sp, #28
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	460b      	mov	r3, r1
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8004094:	2300      	movs	r3, #0
 8004096:	75bb      	strb	r3, [r7, #22]

    /* Search for the input feature from the input configuration array */
    while (loop < dev->input_sens)
 8004098:	e01c      	b.n	80040d4 <bmi2_extract_input_feat_config+0x52>
    {
        if (dev->feat_config[loop].type == type)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a19      	ldr	r1, [r3, #32]
 800409e:	7dfa      	ldrb	r2, [r7, #23]
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	440b      	add	r3, r1
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	7afa      	ldrb	r2, [r7, #11]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d10e      	bne.n	80040ce <bmi2_extract_input_feat_config+0x4c>
        {
            *feat_config = dev->feat_config[loop];
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a19      	ldr	r1, [r3, #32]
 80040b4:	7dfa      	ldrb	r2, [r7, #23]
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	18ca      	adds	r2, r1, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8811      	ldrh	r1, [r2, #0]
 80040c2:	7892      	ldrb	r2, [r2, #2]
 80040c4:	8019      	strh	r1, [r3, #0]
 80040c6:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 80040c8:	2301      	movs	r3, #1
 80040ca:	75bb      	strb	r3, [r7, #22]
            break;
 80040cc:	e007      	b.n	80040de <bmi2_extract_input_feat_config+0x5c>
        }

        loop++;
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
 80040d0:	3301      	adds	r3, #1
 80040d2:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->input_sens)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7e5b      	ldrb	r3, [r3, #25]
 80040d8:	7dfa      	ldrb	r2, [r7, #23]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d3dd      	bcc.n	800409a <bmi2_extract_input_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 80040de:	7dbb      	ldrb	r3, [r7, #22]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <write_config_file>:

/*!
 * @brief This internal API writes the configuration file.
 */
static int8_t write_config_file(struct bmi2_dev *dev)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to update the configuration file index */
    uint16_t index = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	82bb      	strh	r3, [r7, #20]

    /* config file size */
    uint16_t config_size = dev->config_size;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80040fe:	827b      	strh	r3, [r7, #18]

    /* Variable to get the remainder */
    uint8_t remain = (uint8_t)(config_size % dev->read_write_len);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	89da      	ldrh	r2, [r3, #14]
 8004104:	8a7b      	ldrh	r3, [r7, #18]
 8004106:	fbb3 f1f2 	udiv	r1, r3, r2
 800410a:	fb01 f202 	mul.w	r2, r1, r2
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	b29b      	uxth	r3, r3
 8004112:	747b      	strb	r3, [r7, #17]

    /* Variable to get the balance bytes */
    uint16_t bal_byte = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	81fb      	strh	r3, [r7, #14]

    /* Variable to define temporary read/write length */
    uint16_t read_write_len = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	81bb      	strh	r3, [r7, #12]

    /* Disable advanced power save mode */
    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	2000      	movs	r0, #0
 8004120:	f7ff fc2b 	bl	800397a <bmi2_set_adv_power_save>
 8004124:	4603      	mov	r3, r0
 8004126:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8004128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800412c:	2b00      	cmp	r3, #0
 800412e:	f040 8088 	bne.w	8004242 <write_config_file+0x156>
    {
        /* Disable loading of the configuration */
        rslt = set_config_load(BMI2_DISABLE, dev);
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	2000      	movs	r0, #0
 8004136:	f000 f88a 	bl	800424e <set_config_load>
 800413a:	4603      	mov	r3, r0
 800413c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 800413e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d17d      	bne.n	8004242 <write_config_file+0x156>
        {
            if (!remain)
 8004146:	7c7b      	ldrb	r3, [r7, #17]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d11c      	bne.n	8004186 <write_config_file+0x9a>
            {
                /* Write the configuration file */
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 800414c:	2300      	movs	r3, #0
 800414e:	82bb      	strh	r3, [r7, #20]
 8004150:	e010      	b.n	8004174 <write_config_file+0x88>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	8abb      	ldrh	r3, [r7, #20]
 8004158:	18d0      	adds	r0, r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	89da      	ldrh	r2, [r3, #14]
 800415e:	8ab9      	ldrh	r1, [r7, #20]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f000 f8a6 	bl	80042b2 <upload_file>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	89da      	ldrh	r2, [r3, #14]
 800416e:	8abb      	ldrh	r3, [r7, #20]
 8004170:	4413      	add	r3, r2
 8004172:	82bb      	strh	r3, [r7, #20]
 8004174:	8aba      	ldrh	r2, [r7, #20]
 8004176:	8a7b      	ldrh	r3, [r7, #18]
 8004178:	429a      	cmp	r2, r3
 800417a:	d24e      	bcs.n	800421a <write_config_file+0x12e>
 800417c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0e6      	beq.n	8004152 <write_config_file+0x66>
 8004184:	e049      	b.n	800421a <write_config_file+0x12e>
                }
            }
            else
            {
                /* Get the balance bytes */
                bal_byte = (uint16_t) config_size - (uint16_t) remain;
 8004186:	7c7b      	ldrb	r3, [r7, #17]
 8004188:	b29b      	uxth	r3, r3
 800418a:	8a7a      	ldrh	r2, [r7, #18]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	81fb      	strh	r3, [r7, #14]

                /* Write the configuration file for the balancem bytes */
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8004190:	2300      	movs	r3, #0
 8004192:	82bb      	strh	r3, [r7, #20]
 8004194:	e010      	b.n	80041b8 <write_config_file+0xcc>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	8abb      	ldrh	r3, [r7, #20]
 800419c:	18d0      	adds	r0, r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	89da      	ldrh	r2, [r3, #14]
 80041a2:	8ab9      	ldrh	r1, [r7, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f000 f884 	bl	80042b2 <upload_file>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	89da      	ldrh	r2, [r3, #14]
 80041b2:	8abb      	ldrh	r3, [r7, #20]
 80041b4:	4413      	add	r3, r2
 80041b6:	82bb      	strh	r3, [r7, #20]
 80041b8:	8aba      	ldrh	r2, [r7, #20]
 80041ba:	89fb      	ldrh	r3, [r7, #14]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d203      	bcs.n	80041c8 <write_config_file+0xdc>
 80041c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0e6      	beq.n	8004196 <write_config_file+0xaa>
                }

                if (rslt == BMI2_OK)
 80041c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d124      	bne.n	800421a <write_config_file+0x12e>
                {
                    /* Update length in a temporary variable */
                    read_write_len = dev->read_write_len;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	89db      	ldrh	r3, [r3, #14]
 80041d4:	81bb      	strh	r3, [r7, #12]

                    /* Write the remaining bytes in 2 bytes length */
                    dev->read_write_len = 2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	81da      	strh	r2, [r3, #14]

                    /* Write the configuration file for the remaining bytes */
                    for (index = bal_byte;
 80041dc:	89fb      	ldrh	r3, [r7, #14]
 80041de:	82bb      	strh	r3, [r7, #20]
 80041e0:	e010      	b.n	8004204 <write_config_file+0x118>
                         (index < config_size) && (rslt == BMI2_OK);
                         index += dev->read_write_len)
                    {
                        rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	8abb      	ldrh	r3, [r7, #20]
 80041e8:	18d0      	adds	r0, r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	89da      	ldrh	r2, [r3, #14]
 80041ee:	8ab9      	ldrh	r1, [r7, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f000 f85e 	bl	80042b2 <upload_file>
 80041f6:	4603      	mov	r3, r0
 80041f8:	75fb      	strb	r3, [r7, #23]
                         index += dev->read_write_len)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	89da      	ldrh	r2, [r3, #14]
 80041fe:	8abb      	ldrh	r3, [r7, #20]
 8004200:	4413      	add	r3, r2
 8004202:	82bb      	strh	r3, [r7, #20]
                         (index < config_size) && (rslt == BMI2_OK);
 8004204:	8aba      	ldrh	r2, [r7, #20]
 8004206:	8a7b      	ldrh	r3, [r7, #18]
 8004208:	429a      	cmp	r2, r3
 800420a:	d203      	bcs.n	8004214 <write_config_file+0x128>
 800420c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0e6      	beq.n	80041e2 <write_config_file+0xf6>
                    }

                    /* Restore the user set length back from the temporary variable */
                    dev->read_write_len = read_write_len;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	89ba      	ldrh	r2, [r7, #12]
 8004218:	81da      	strh	r2, [r3, #14]
                }
            }

            if (rslt == BMI2_OK)
 800421a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <write_config_file+0x156>
            {
                /* Enable loading of the configuration */
                rslt = set_config_load(BMI2_ENABLE, dev);
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	2001      	movs	r0, #1
 8004226:	f000 f812 	bl	800424e <set_config_load>
 800422a:	4603      	mov	r3, r0
 800422c:	75fb      	strb	r3, [r7, #23]

                if (rslt == BMI2_OK)
 800422e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d105      	bne.n	8004242 <write_config_file+0x156>
                {
                    /* Enable advanced power save mode */
                    rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	2001      	movs	r0, #1
 800423a:	f7ff fb9e 	bl	800397a <bmi2_set_adv_power_save>
 800423e:	4603      	mov	r3, r0
 8004240:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8004242:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <set_config_load>:
/*!
 * @brief This internal API enables/disables the loading of the configuration
 * file.
 */
static int8_t set_config_load(uint8_t enable, struct bmi2_dev *dev)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	4603      	mov	r3, r0
 8004256:	6039      	str	r1, [r7, #0]
 8004258:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 800425e:	f107 010e 	add.w	r1, r7, #14
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2201      	movs	r2, #1
 8004266:	2059      	movs	r0, #89	@ 0x59
 8004268:	f7ff fa40 	bl	80036ec <bmi2_get_regs>
 800426c:	4603      	mov	r3, r0
 800426e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d116      	bne.n	80042a6 <set_config_load+0x58>
    {
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_CONF_LOAD_EN, enable);
 8004278:	7bbb      	ldrb	r3, [r7, #14]
 800427a:	b25b      	sxtb	r3, r3
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	b25a      	sxtb	r2, r3
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	b25b      	sxtb	r3, r3
 800428c:	4313      	orrs	r3, r2
 800428e:	b25b      	sxtb	r3, r3
 8004290:	b2db      	uxtb	r3, r3
 8004292:	73bb      	strb	r3, [r7, #14]
        rslt = bmi2_set_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8004294:	f107 010e 	add.w	r1, r7, #14
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2201      	movs	r2, #1
 800429c:	2059      	movs	r0, #89	@ 0x59
 800429e:	f7ff fa98 	bl	80037d2 <bmi2_set_regs>
 80042a2:	4603      	mov	r3, r0
 80042a4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <upload_file>:

/*!
 * @brief This internal API loads the configuration file.
 */
static int8_t upload_file(const uint8_t *config_data, uint16_t index, uint16_t write_len, struct bmi2_dev *dev)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	817b      	strh	r3, [r7, #10]
 80042c0:	4613      	mov	r3, r2
 80042c2:	813b      	strh	r3, [r7, #8]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store address */
    uint8_t addr_array[2] = { 0 };
 80042c4:	2300      	movs	r3, #0
 80042c6:	82bb      	strh	r3, [r7, #20]

    if (config_data != NULL)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d024      	beq.n	8004318 <upload_file+0x66>
    {
        /* Store 0 to 3 bits of address in first byte */
        addr_array[0] = (uint8_t)((index / 2) & 0x0F);
 80042ce:	897b      	ldrh	r3, [r7, #10]
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	753b      	strb	r3, [r7, #20]

        /* Store 4 to 11 bits of address in the second byte */
        addr_array[1] = (uint8_t)((index / 2) >> 4);
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	757b      	strb	r3, [r7, #21]

        /* Write the 2 bytes of address in consecutive locations */
        rslt = bmi2_set_regs(BMI2_INIT_ADDR_0, addr_array, 2, dev);
 80042ec:	f107 0114 	add.w	r1, r7, #20
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	205b      	movs	r0, #91	@ 0x5b
 80042f6:	f7ff fa6c 	bl	80037d2 <bmi2_set_regs>
 80042fa:	4603      	mov	r3, r0
 80042fc:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 80042fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <upload_file+0x6a>
        {
            /* Burst write configuration file data corresponding to user set length */
            rslt = bmi2_set_regs(BMI2_INIT_DATA_ADDR, (uint8_t *)config_data, write_len, dev);
 8004306:	893a      	ldrh	r2, [r7, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68f9      	ldr	r1, [r7, #12]
 800430c:	205e      	movs	r0, #94	@ 0x5e
 800430e:	f7ff fa60 	bl	80037d2 <bmi2_set_regs>
 8004312:	4603      	mov	r3, r0
 8004314:	75fb      	strb	r3, [r7, #23]
 8004316:	e001      	b.n	800431c <upload_file+0x6a>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004318:	23ff      	movs	r3, #255	@ 0xff
 800431a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800431c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <validate_bw_perf_mode>:
/*!
 * @brief This internal API validates bandwidth and performance mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_perf_mode(uint8_t *bandwidth, uint8_t *perf_mode, struct bmi2_dev *dev)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(perf_mode, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	2100      	movs	r1, #0
 800433a:	68b8      	ldr	r0, [r7, #8]
 800433c:	f000 fc6c 	bl	8004c18 <check_boundary_val>
 8004340:	4603      	mov	r3, r0
 8004342:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8004344:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d114      	bne.n	8004376 <validate_bw_perf_mode+0x4e>
    {
        /* Validate and auto-correct bandwidth parameter */
        if (*perf_mode == BMI2_PERF_OPT_MODE)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d108      	bne.n	8004366 <validate_bw_perf_mode+0x3e>
        {
            /* Validate for continuous filter mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_CIC_AVG8, dev);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2203      	movs	r2, #3
 8004358:	2100      	movs	r1, #0
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 fc5c 	bl	8004c18 <check_boundary_val>
 8004360:	4603      	mov	r3, r0
 8004362:	75fb      	strb	r3, [r7, #23]
 8004364:	e007      	b.n	8004376 <validate_bw_perf_mode+0x4e>
        }
        else
        {
            /* Validate for CIC averaging mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_RES_AVG128, dev);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2207      	movs	r2, #7
 800436a:	2100      	movs	r1, #0
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fc53 	bl	8004c18 <check_boundary_val>
 8004372:	4603      	mov	r3, r0
 8004374:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <validate_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_odr_range(uint8_t *odr, uint8_t *range, struct bmi2_dev *dev)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto correct ODR */
    rslt = check_boundary_val(odr, BMI2_ACC_ODR_0_78HZ, BMI2_ACC_ODR_1600HZ, dev);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	220c      	movs	r2, #12
 8004392:	2101      	movs	r1, #1
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fc3f 	bl	8004c18 <check_boundary_val>
 800439a:	4603      	mov	r3, r0
 800439c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 800439e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d107      	bne.n	80043b6 <validate_odr_range+0x34>
    {
        /* Validate and auto correct Range */
        rslt = check_boundary_val(range, BMI2_ACC_RANGE_2G, BMI2_ACC_RANGE_16G, dev);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2203      	movs	r2, #3
 80043aa:	2100      	movs	r1, #0
 80043ac:	68b8      	ldr	r0, [r7, #8]
 80043ae:	f000 fc33 	bl	8004c18 <check_boundary_val>
 80043b2:	4603      	mov	r3, r0
 80043b4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80043b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <validate_gyro_config>:
/*!
 * @brief This internal API validates bandwidth, performance mode, low power/
 * high performance mode, ODR, and range set by the user.
 */
static int8_t validate_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(&config->filter_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	1c98      	adds	r0, r3, #2
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2201      	movs	r2, #1
 80043d4:	2100      	movs	r1, #0
 80043d6:	f000 fc1f 	bl	8004c18 <check_boundary_val>
 80043da:	4603      	mov	r3, r0
 80043dc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80043de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d13b      	bne.n	800445e <validate_gyro_config+0x9c>
    {
        /* Validate and auto-correct bandwidth parameter */
        rslt = check_boundary_val(&config->bwp, BMI2_GYR_OSR4_MODE, BMI2_GYR_CIC_MODE, dev);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	1c58      	adds	r0, r3, #1
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2203      	movs	r2, #3
 80043ee:	2100      	movs	r1, #0
 80043f0:	f000 fc12 	bl	8004c18 <check_boundary_val>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80043f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d12e      	bne.n	800445e <validate_gyro_config+0x9c>
        {
            /* Validate and auto-correct low power/high-performance parameter */
            rslt = check_boundary_val(&config->noise_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	1d58      	adds	r0, r3, #5
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2201      	movs	r2, #1
 8004408:	2100      	movs	r1, #0
 800440a:	f000 fc05 	bl	8004c18 <check_boundary_val>
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8004412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d121      	bne.n	800445e <validate_gyro_config+0x9c>
            {
                /* Validate and auto-correct ODR parameter */
                rslt = check_boundary_val(&config->odr, BMI2_GYR_ODR_25HZ, BMI2_GYR_ODR_3200HZ, dev);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	220d      	movs	r2, #13
 8004420:	2106      	movs	r1, #6
 8004422:	f000 fbf9 	bl	8004c18 <check_boundary_val>
 8004426:	4603      	mov	r3, r0
 8004428:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI2_OK)
 800442a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d115      	bne.n	800445e <validate_gyro_config+0x9c>
                {
                    /* Validate and auto-correct OIS range */
                    rslt = check_boundary_val(&config->ois_range, BMI2_GYR_OIS_250, BMI2_GYR_OIS_2000, dev);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	1cd8      	adds	r0, r3, #3
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2201      	movs	r2, #1
 800443a:	2100      	movs	r1, #0
 800443c:	f000 fbec 	bl	8004c18 <check_boundary_val>
 8004440:	4603      	mov	r3, r0
 8004442:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI2_OK)
 8004444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d108      	bne.n	800445e <validate_gyro_config+0x9c>
                    {
                        /* Validate and auto-correct range parameter */
                        rslt = check_boundary_val(&config->range, BMI2_GYR_RANGE_2000, BMI2_GYR_RANGE_125, dev);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	1d18      	adds	r0, r3, #4
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2204      	movs	r2, #4
 8004454:	2100      	movs	r1, #0
 8004456:	f000 fbdf 	bl	8004c18 <check_boundary_val>
 800445a:	4603      	mov	r3, r0
 800445c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800445e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <cfg_error_status>:
/*!
 * @brief This internal API shows the error status when illegal sensor
 * configuration is set.
 */
static int8_t cfg_error_status(struct bmi2_dev *dev)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get error status of the set sensor configuration */
    rslt = bmi2_get_regs(BMI2_EVENT_ADDR, &reg_data, 1, dev);
 8004474:	f107 010e 	add.w	r1, r7, #14
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	201b      	movs	r0, #27
 800447e:	f7ff f935 	bl	80036ec <bmi2_get_regs>
 8004482:	4603      	mov	r3, r0
 8004484:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d121      	bne.n	80044d2 <cfg_error_status+0x66>
    {
        reg_data = BMI2_GET_BITS(reg_data, BMI2_EVENT_FLAG);
 800448e:	7bbb      	ldrb	r3, [r7, #14]
 8004490:	109b      	asrs	r3, r3, #2
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	b2db      	uxtb	r3, r3
 800449a:	73bb      	strb	r3, [r7, #14]
        switch (reg_data)
 800449c:	7bbb      	ldrb	r3, [r7, #14]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d816      	bhi.n	80044d0 <cfg_error_status+0x64>
 80044a2:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <cfg_error_status+0x3c>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044bf 	.word	0x080044bf
 80044b0:	080044c5 	.word	0x080044c5
 80044b4:	080044cb 	.word	0x080044cb
        {
            case BMI2_NO_ERROR:
                rslt = BMI2_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	73fb      	strb	r3, [r7, #15]
                break;
 80044bc:	e009      	b.n	80044d2 <cfg_error_status+0x66>
            case BMI2_ACC_ERROR:
                rslt = BMI2_E_ACC_INVALID_CFG;
 80044be:	23fb      	movs	r3, #251	@ 0xfb
 80044c0:	73fb      	strb	r3, [r7, #15]
                break;
 80044c2:	e006      	b.n	80044d2 <cfg_error_status+0x66>
            case BMI2_GYR_ERROR:
                rslt = BMI2_E_GYRO_INVALID_CFG;
 80044c4:	23fa      	movs	r3, #250	@ 0xfa
 80044c6:	73fb      	strb	r3, [r7, #15]
                break;
 80044c8:	e003      	b.n	80044d2 <cfg_error_status+0x66>
            case BMI2_ACC_GYR_ERROR:
                rslt = BMI2_E_ACC_GYR_INVALID_CFG;
 80044ca:	23f9      	movs	r3, #249	@ 0xf9
 80044cc:	73fb      	strb	r3, [r7, #15]
                break;
 80044ce:	e000      	b.n	80044d2 <cfg_error_status+0x66>
            default:
                break;
 80044d0:	bf00      	nop
        }
    }

    return rslt;
 80044d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop

080044e0 <set_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3)It maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate auxiliary configurations */
    rslt = validate_aux_config(config, dev);
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fa3f 	bl	8004970 <validate_aux_config>
 80044f2:	4603      	mov	r3, r0
 80044f4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80044f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d119      	bne.n	8004532 <set_aux_config+0x52>
    {
        /* Enable/Disable auxiliary interface */
        rslt = set_aux_interface(config, dev);
 80044fe:	6839      	ldr	r1, [r7, #0]
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8f7 	bl	80046f4 <set_aux_interface>
 8004506:	4603      	mov	r3, r0
 8004508:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800450a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <set_aux_config+0x52>
        {
            /* Set the auxiliary interface configurations */
            rslt = config_aux_interface(config, dev);
 8004512:	6839      	ldr	r1, [r7, #0]
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f91f 	bl	8004758 <config_aux_interface>
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 800451e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d105      	bne.n	8004532 <set_aux_config+0x52>
            {
                /* Set read out offset and ODR */
                rslt = config_aux(config, dev);
 8004526:	6839      	ldr	r1, [r7, #0]
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f9db 	bl	80048e4 <config_aux>
 800452e:	4603      	mov	r3, r0
 8004530:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <set_gyro_user_gain_config>:
/*!
 * @brief This internal API sets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t set_gyro_user_gain_config(const struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b08a      	sub	sp, #40	@ 0x28
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8004548:	f107 030c 	add.w	r3, r7, #12
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 8004562:	2300      	movs	r3, #0
 8004564:	723b      	strb	r3, [r7, #8]
 8004566:	2300      	movs	r3, #0
 8004568:	727b      	strb	r3, [r7, #9]
 800456a:	2300      	movs	r3, #0
 800456c:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 800456e:	f107 030c 	add.w	r3, r7, #12
 8004572:	623b      	str	r3, [r7, #32]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 8004574:	f107 0308 	add.w	r3, r7, #8
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	2109      	movs	r1, #9
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fd80 	bl	8004082 <bmi2_extract_input_feat_config>
 8004582:	4603      	mov	r3, r0
 8004584:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80aa 	beq.w	80046e2 <set_gyro_user_gain_config+0x1a4>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 800458e:	7a7b      	ldrb	r3, [r7, #9]
 8004590:	f107 010c 	add.w	r1, r7, #12
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fce1 	bl	8003f5e <bmi2_get_feat_config>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80045a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 809e 	bne.w	80046e8 <set_gyro_user_gain_config+0x1aa>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 80045ac:	7abb      	ldrb	r3, [r7, #10]
 80045ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80045b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_x */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_X, config->ratio_x);
 80045bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	6a3a      	ldr	r2, [r7, #32]
 80045c4:	4413      	add	r3, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b21b      	sxth	r3, r3
 80045ca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80045ce:	f023 0307 	bic.w	r3, r3, #7
 80045d2:	b21a      	sxth	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b21b      	sxth	r3, r3
 80045da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045de:	b21b      	sxth	r3, r3
 80045e0:	4313      	orrs	r3, r2
 80045e2:	b219      	sxth	r1, r3
 80045e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	6a3a      	ldr	r2, [r7, #32]
 80045ec:	4413      	add	r3, r2
 80045ee:	b28a      	uxth	r2, r1
 80045f0:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_y */
            idx++;
 80045f2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80045f6:	3301      	adds	r3, #1
 80045f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_y */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Y, config->ratio_y);
 80045fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	6a3a      	ldr	r2, [r7, #32]
 8004604:	4413      	add	r3, r2
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b21b      	sxth	r3, r3
 800460a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800460e:	f023 0307 	bic.w	r3, r3, #7
 8004612:	b21a      	sxth	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	885b      	ldrh	r3, [r3, #2]
 8004618:	b21b      	sxth	r3, r3
 800461a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800461e:	b21b      	sxth	r3, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	b219      	sxth	r1, r3
 8004624:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	6a3a      	ldr	r2, [r7, #32]
 800462c:	4413      	add	r3, r2
 800462e:	b28a      	uxth	r2, r1
 8004630:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_z */
            idx++;
 8004632:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004636:	3301      	adds	r3, #1
 8004638:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_z */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Z, config->ratio_z);
 800463c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	6a3a      	ldr	r2, [r7, #32]
 8004644:	4413      	add	r3, r2
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b21b      	sxth	r3, r3
 800464a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	b21a      	sxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	889b      	ldrh	r3, [r3, #4]
 8004658:	b21b      	sxth	r3, r3
 800465a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800465e:	b21b      	sxth	r3, r3
 8004660:	4313      	orrs	r3, r2
 8004662:	b219      	sxth	r1, r3
 8004664:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	6a3a      	ldr	r2, [r7, #32]
 800466c:	4413      	add	r3, r2
 800466e:	b28a      	uxth	r2, r1
 8004670:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8004672:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004676:	3301      	adds	r3, #1
 8004678:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - user_gain_config.start_addr;
 800467c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	b2da      	uxtb	r2, r3
 8004684:	7abb      	ldrb	r3, [r7, #10]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 800468c:	2300      	movs	r3, #0
 800468e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004692:	e015      	b.n	80046c0 <set_gyro_user_gain_config+0x182>
            {
                feat_config[user_gain_config.start_addr +
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8004694:	7abb      	ldrb	r3, [r7, #10]
 8004696:	461a      	mov	r2, r3
 8004698:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800469c:	4413      	add	r3, r2
 800469e:	6a3a      	ldr	r2, [r7, #32]
 80046a0:	441a      	add	r2, r3
                feat_config[user_gain_config.start_addr +
 80046a2:	7abb      	ldrb	r3, [r7, #10]
 80046a4:	4619      	mov	r1, r3
 80046a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80046aa:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 80046ac:	7812      	ldrb	r2, [r2, #0]
 80046ae:	3328      	adds	r3, #40	@ 0x28
 80046b0:	443b      	add	r3, r7
 80046b2:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 80046b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80046ba:	3301      	adds	r3, #1
 80046bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80046c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80046c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d3e3      	bcc.n	8004694 <set_gyro_user_gain_config+0x156>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80046cc:	f107 010c 	add.w	r1, r7, #12
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2210      	movs	r2, #16
 80046d4:	2030      	movs	r0, #48	@ 0x30
 80046d6:	f7ff f87c 	bl	80037d2 <bmi2_set_regs>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046e0:	e002      	b.n	80046e8 <set_gyro_user_gain_config+0x1aa>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80046e2:	23f8      	movs	r3, #248	@ 0xf8
 80046e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80046e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3728      	adds	r7, #40	@ 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <set_aux_interface>:

/*!
 * @brief This internal API enables/disables auxiliary interface.
 */
static int8_t set_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 80046fe:	f107 010e 	add.w	r1, r7, #14
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2201      	movs	r2, #1
 8004706:	206b      	movs	r0, #107	@ 0x6b
 8004708:	f7fe fff0 	bl	80036ec <bmi2_get_regs>
 800470c:	4603      	mov	r3, r0
 800470e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d119      	bne.n	800474c <set_aux_interface+0x58>
    {
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_IF_EN, config->aux_en);
 8004718:	7bbb      	ldrb	r3, [r7, #14]
 800471a:	b25b      	sxtb	r3, r3
 800471c:	f023 0320 	bic.w	r3, r3, #32
 8004720:	b25a      	sxtb	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b25b      	sxtb	r3, r3
 8004728:	015b      	lsls	r3, r3, #5
 800472a:	b25b      	sxtb	r3, r3
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	b25b      	sxtb	r3, r3
 8004732:	4313      	orrs	r3, r2
 8004734:	b25b      	sxtb	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	73bb      	strb	r3, [r7, #14]

        /* Enable/Disable auxiliary interface */
        rslt = bmi2_set_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 800473a:	f107 010e 	add.w	r1, r7, #14
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2201      	movs	r2, #1
 8004742:	206b      	movs	r0, #107	@ 0x6b
 8004744:	f7ff f845 	bl	80037d2 <bmi2_set_regs>
 8004748:	4603      	mov	r3, r0
 800474a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800474c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <config_aux_interface>:
 *
 * @note Auxiliary sensor should not be busy when configuring aux_i2c_addr,
 * man_rd_burst_len, aux_rd_burst_len and aux_rd_addr.
 */
static int8_t config_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8004762:	2300      	movs	r3, #0
 8004764:	81bb      	strh	r3, [r7, #12]

    /* Variable to store status */
    uint8_t status = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	72fb      	strb	r3, [r7, #11]

    /* Variable to define count */
    uint8_t count = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 800476e:	f107 010c 	add.w	r1, r7, #12
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2202      	movs	r2, #2
 8004776:	204b      	movs	r0, #75	@ 0x4b
 8004778:	f7fe ffb8 	bl	80036ec <bmi2_get_regs>
 800477c:	4603      	mov	r3, r0
 800477e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 80a7 	bne.w	80048d8 <config_aux_interface+0x180>
    {
        /* Set I2C address for AUX sensor */
        reg_data[0] = BMI2_SET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR, config->i2c_device_addr);
 800478a:	7b3b      	ldrb	r3, [r7, #12]
 800478c:	b25b      	sxtb	r3, r3
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	b25a      	sxtb	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	79db      	ldrb	r3, [r3, #7]
 8004798:	b25b      	sxtb	r3, r3
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	b25b      	sxtb	r3, r3
 800479e:	4313      	orrs	r3, r2
 80047a0:	b25b      	sxtb	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	733b      	strb	r3, [r7, #12]

        /* Set the AUX IF to either manual or auto mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN, config->manual_en);
 80047a6:	7b7b      	ldrb	r3, [r7, #13]
 80047a8:	b25b      	sxtb	r3, r3
 80047aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ae:	b25a      	sxtb	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	785b      	ldrb	r3, [r3, #1]
 80047b4:	b25b      	sxtb	r3, r3
 80047b6:	01db      	lsls	r3, r3, #7
 80047b8:	b25b      	sxtb	r3, r3
 80047ba:	4313      	orrs	r3, r2
 80047bc:	b25b      	sxtb	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	737b      	strb	r3, [r7, #13]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN, config->fcu_write_en);
 80047c2:	7b7b      	ldrb	r3, [r7, #13]
 80047c4:	b25b      	sxtb	r3, r3
 80047c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ca:	b25a      	sxtb	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	789b      	ldrb	r3, [r3, #2]
 80047d0:	b25b      	sxtb	r3, r3
 80047d2:	019b      	lsls	r3, r3, #6
 80047d4:	b25b      	sxtb	r3, r3
 80047d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047da:	b25b      	sxtb	r3, r3
 80047dc:	4313      	orrs	r3, r2
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for manual mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST, config->man_rd_burst);
 80047e4:	7b7b      	ldrb	r3, [r7, #13]
 80047e6:	b25b      	sxtb	r3, r3
 80047e8:	f023 030c 	bic.w	r3, r3, #12
 80047ec:	b25a      	sxtb	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	78db      	ldrb	r3, [r3, #3]
 80047f2:	b25b      	sxtb	r3, r3
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	b25b      	sxtb	r3, r3
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	b25b      	sxtb	r3, r3
 80047fe:	4313      	orrs	r3, r2
 8004800:	b25b      	sxtb	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for data mode */
        reg_data[1] = BMI2_SET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST, config->aux_rd_burst);
 8004806:	7b7b      	ldrb	r3, [r7, #13]
 8004808:	b25b      	sxtb	r3, r3
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	b25a      	sxtb	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	791b      	ldrb	r3, [r3, #4]
 8004814:	b25b      	sxtb	r3, r3
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	b25b      	sxtb	r3, r3
 800481c:	4313      	orrs	r3, r2
 800481e:	b25b      	sxtb	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	737b      	strb	r3, [r7, #13]
        for (;;)
        {
            /* Check if auxiliary sensor is busy */
            rslt = bmi2_get_status(&status, dev);
 8004824:	f107 030b 	add.w	r3, r7, #11
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fb15 	bl	8003e5a <bmi2_get_status>
 8004830:	4603      	mov	r3, r0
 8004832:	73fb      	strb	r3, [r7, #15]
            if ((rslt == BMI2_OK) && (!(status & BMI2_AUX_BUSY)))
 8004834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d13b      	bne.n	80048b4 <config_aux_interface+0x15c>
 800483c:	7afb      	ldrb	r3, [r7, #11]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d136      	bne.n	80048b4 <config_aux_interface+0x15c>
            {
                /* Set the configurations if AUX is not busy */
                rslt = bmi2_set_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 8004846:	f107 010c 	add.w	r1, r7, #12
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2202      	movs	r2, #2
 800484e:	204b      	movs	r0, #75	@ 0x4b
 8004850:	f7fe ffbf 	bl	80037d2 <bmi2_set_regs>
 8004854:	4603      	mov	r3, r0
 8004856:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(1000, dev->intf_ptr);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	6852      	ldr	r2, [r2, #4]
 8004860:	4611      	mov	r1, r2
 8004862:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004866:	4798      	blx	r3
                if (rslt == BMI2_OK)
 8004868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d132      	bne.n	80048d6 <config_aux_interface+0x17e>
                {
                    /* If data mode */
                    if (!config->manual_en)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d115      	bne.n	80048a4 <config_aux_interface+0x14c>
                    {
                        /* Disable manual enable flag in device structure */
                        dev->aux_man_en = 0;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2200      	movs	r2, #0
 800487c:	76da      	strb	r2, [r3, #27]

                        /* Set the read address of the AUX sensor */
                        rslt = bmi2_set_regs(BMI2_AUX_RD_ADDR, (uint8_t *) &config->read_addr, 1, dev);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f103 0108 	add.w	r1, r3, #8
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2201      	movs	r2, #1
 8004888:	204d      	movs	r0, #77	@ 0x4d
 800488a:	f7fe ffa2 	bl	80037d2 <bmi2_set_regs>
 800488e:	4603      	mov	r3, r0
 8004890:	73fb      	strb	r3, [r7, #15]
                        dev->delay_us(1000, dev->intf_ptr);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	6852      	ldr	r2, [r2, #4]
 800489a:	4611      	mov	r1, r2
 800489c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80048a0:	4798      	blx	r3
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
                    }
                }

                /* Break after setting the register */
                break;
 80048a2:	e018      	b.n	80048d6 <config_aux_interface+0x17e>
                        dev->aux_man_en = 1;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2201      	movs	r2, #1
 80048a8:	76da      	strb	r2, [r3, #27]
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	78da      	ldrb	r2, [r3, #3]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	771a      	strb	r2, [r3, #28]
                break;
 80048b2:	e010      	b.n	80048d6 <config_aux_interface+0x17e>
            }

            /* Increment count after every 10 seconds */
            dev->delay_us(10000, dev->intf_ptr);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	6852      	ldr	r2, [r2, #4]
 80048bc:	4611      	mov	r1, r2
 80048be:	f242 7010 	movw	r0, #10000	@ 0x2710
 80048c2:	4798      	blx	r3
            count++;
 80048c4:	7bbb      	ldrb	r3, [r7, #14]
 80048c6:	3301      	adds	r3, #1
 80048c8:	73bb      	strb	r3, [r7, #14]

            /* Break after 2 seconds if AUX still busy - since slowest ODR is 0.78Hz*/
            if (count > 20)
 80048ca:	7bbb      	ldrb	r3, [r7, #14]
 80048cc:	2b14      	cmp	r3, #20
 80048ce:	d9a9      	bls.n	8004824 <config_aux_interface+0xcc>
            {
                rslt = BMI2_E_AUX_BUSY;
 80048d0:	23f1      	movs	r3, #241	@ 0xf1
 80048d2:	73fb      	strb	r3, [r7, #15]
                break;
 80048d4:	e000      	b.n	80048d8 <config_aux_interface+0x180>
                break;
 80048d6:	bf00      	nop
            }
        }
    }

    return rslt;
 80048d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <config_aux>:
/*!
 * @brief This internal API triggers read out offset and sets ODR of the
 * auxiliary sensor.
 */
static int8_t config_aux(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 80048ee:	f107 010e 	add.w	r1, r7, #14
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2201      	movs	r2, #1
 80048f6:	2044      	movs	r0, #68	@ 0x44
 80048f8:	f7fe fef8 	bl	80036ec <bmi2_get_regs>
 80048fc:	4603      	mov	r3, r0
 80048fe:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d12d      	bne.n	8004964 <config_aux+0x80>
    {
        /* Trigger read out offset */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT, config->offset);
 8004908:	7bbb      	ldrb	r3, [r7, #14]
 800490a:	b25b      	sxtb	r3, r3
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	b25a      	sxtb	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	799b      	ldrb	r3, [r3, #6]
 8004916:	b25b      	sxtb	r3, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	b25b      	sxtb	r3, r3
 800491c:	4313      	orrs	r3, r2
 800491e:	b25b      	sxtb	r3, r3
 8004920:	b2db      	uxtb	r3, r3
 8004922:	73bb      	strb	r3, [r7, #14]

        /* Set ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN, config->odr);
 8004924:	7bbb      	ldrb	r3, [r7, #14]
 8004926:	b25b      	sxtb	r3, r3
 8004928:	f023 030f 	bic.w	r3, r3, #15
 800492c:	b25a      	sxtb	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	795b      	ldrb	r3, [r3, #5]
 8004932:	b25b      	sxtb	r3, r3
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	b25b      	sxtb	r3, r3
 800493a:	4313      	orrs	r3, r2
 800493c:	b25b      	sxtb	r3, r3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	73bb      	strb	r3, [r7, #14]

        /* Set auxiliary configuration register */
        rslt = bmi2_set_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 8004942:	f107 010e 	add.w	r1, r7, #14
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2201      	movs	r2, #1
 800494a:	2044      	movs	r0, #68	@ 0x44
 800494c:	f7fe ff41 	bl	80037d2 <bmi2_set_regs>
 8004950:	4603      	mov	r3, r0
 8004952:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(1000, dev->intf_ptr);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	6852      	ldr	r2, [r2, #4]
 800495c:	4611      	mov	r1, r2
 800495e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004962:	4798      	blx	r3
    }

    return rslt;
 8004964:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <validate_aux_config>:

/*!
 * @brief This internal API validates auxiliary configuration set by the user.
 */
static int8_t validate_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate ODR for auxiliary sensor */
    rslt = check_boundary_val(&config->odr, BMI2_AUX_ODR_0_78HZ, BMI2_AUX_ODR_800HZ, dev);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	1d58      	adds	r0, r3, #5
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	220b      	movs	r2, #11
 8004982:	2101      	movs	r1, #1
 8004984:	f000 f948 	bl	8004c18 <check_boundary_val>
 8004988:	4603      	mov	r3, r0
 800498a:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800498c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <get_acc_gyr_data>:

/*!
 * @brief This internal API gets the accelerometer/gyroscope data.
 */
static void get_acc_gyr_data(struct bmi2_sens_axes_data *data, const uint8_t *reg_data)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]

    /* Variables to store both msb and lsb value */
    uint16_t msb_lsb;

    /* Variables to define index */
    uint8_t index = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]

    /* Read x-axis data */
    lsb = reg_data[index++];
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	73fa      	strb	r2, [r7, #15]
 80049ac:	461a      	mov	r2, r3
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	4413      	add	r3, r2
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	73fa      	strb	r2, [r7, #15]
 80049bc:	461a      	mov	r2, r3
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	4413      	add	r3, r2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80049c6:	7b7b      	ldrb	r3, [r7, #13]
 80049c8:	b21b      	sxth	r3, r3
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	b21a      	sxth	r2, r3
 80049ce:	7bbb      	ldrb	r3, [r7, #14]
 80049d0:	b21b      	sxth	r3, r3
 80049d2:	4313      	orrs	r3, r2
 80049d4:	b21b      	sxth	r3, r3
 80049d6:	817b      	strh	r3, [r7, #10]
    data->x = (int16_t) msb_lsb;
 80049d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	801a      	strh	r2, [r3, #0]

    /* Read y-axis data */
    lsb = reg_data[index++];
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	73fa      	strb	r2, [r7, #15]
 80049e6:	461a      	mov	r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4413      	add	r3, r2
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	73fa      	strb	r2, [r7, #15]
 80049f6:	461a      	mov	r2, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	4413      	add	r3, r2
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 8004a00:	7b7b      	ldrb	r3, [r7, #13]
 8004a02:	b21b      	sxth	r3, r3
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	b21a      	sxth	r2, r3
 8004a08:	7bbb      	ldrb	r3, [r7, #14]
 8004a0a:	b21b      	sxth	r3, r3
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	b21b      	sxth	r3, r3
 8004a10:	817b      	strh	r3, [r7, #10]
    data->y = (int16_t) msb_lsb;
 8004a12:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	805a      	strh	r2, [r3, #2]

    /* Read z-axis data */
    lsb = reg_data[index++];
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	73fa      	strb	r2, [r7, #15]
 8004a20:	461a      	mov	r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	4413      	add	r3, r2
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	73fa      	strb	r2, [r7, #15]
 8004a30:	461a      	mov	r2, r3
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	4413      	add	r3, r2
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 8004a3a:	7b7b      	ldrb	r3, [r7, #13]
 8004a3c:	b21b      	sxth	r3, r3
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	b21a      	sxth	r2, r3
 8004a42:	7bbb      	ldrb	r3, [r7, #14]
 8004a44:	b21b      	sxth	r3, r3
 8004a46:	4313      	orrs	r3, r2
 8004a48:	b21b      	sxth	r3, r3
 8004a4a:	817b      	strh	r3, [r7, #10]
    data->z = (int16_t) msb_lsb;
 8004a4c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	809a      	strh	r2, [r3, #4]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <get_remapped_data>:

/*!
 * @brief This internal API gets the re-mapped accelerometer/gyroscope data.
 */
static void get_remapped_data(struct bmi2_sens_axes_data *data, const struct bmi2_dev *dev)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
    /* Array to defined the re-mapped sensor data */
    int16_t remap_data[3] = { 0 };
 8004a6a:	f107 030c 	add.w	r3, r7, #12
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	809a      	strh	r2, [r3, #4]
    int16_t pos_multiplier = INT16_C(1);
 8004a74:	2301      	movs	r3, #1
 8004a76:	82fb      	strh	r3, [r7, #22]
    int16_t neg_multiplier = INT16_C(-1);
 8004a78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a7c:	82bb      	strh	r3, [r7, #20]

    /* Fill the array with the un-mapped sensor data */
    remap_data[0] = data->x;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a84:	81bb      	strh	r3, [r7, #12]
    remap_data[1] = data->y;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a8c:	81fb      	strh	r3, [r7, #14]
    remap_data[2] = data->z;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a94:	823b      	strh	r3, [r7, #16]

    /* Get the re-mapped x axis data */
    if (dev->remap.x_axis_sign == BMI2_POS_SIGN)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d110      	bne.n	8004ac2 <get_remapped_data+0x62>
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * pos_multiplier);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	3318      	adds	r3, #24
 8004aaa:	443b      	add	r3, r7
 8004aac:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	8afb      	ldrh	r3, [r7, #22]
 8004ab4:	fb12 f303 	smulbb	r3, r2, r3
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	b21a      	sxth	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	e00f      	b.n	8004ae2 <get_remapped_data+0x82>
    }
    else
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * neg_multiplier);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	3318      	adds	r3, #24
 8004acc:	443b      	add	r3, r7
 8004ace:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	8abb      	ldrh	r3, [r7, #20]
 8004ad6:	fb12 f303 	smulbb	r3, r2, r3
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	b21a      	sxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	801a      	strh	r2, [r3, #0]
    }

    /* Get the re-mapped y axis data */
    if (dev->remap.y_axis_sign == BMI2_POS_SIGN)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d110      	bne.n	8004b0e <get_remapped_data+0xae>
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * pos_multiplier);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	3318      	adds	r3, #24
 8004af6:	443b      	add	r3, r7
 8004af8:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	8afb      	ldrh	r3, [r7, #22]
 8004b00:	fb12 f303 	smulbb	r3, r2, r3
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	b21a      	sxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	805a      	strh	r2, [r3, #2]
 8004b0c:	e00f      	b.n	8004b2e <get_remapped_data+0xce>
    }
    else
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * neg_multiplier);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	3318      	adds	r3, #24
 8004b18:	443b      	add	r3, r7
 8004b1a:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	8abb      	ldrh	r3, [r7, #20]
 8004b22:	fb12 f303 	smulbb	r3, r2, r3
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	b21a      	sxth	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	805a      	strh	r2, [r3, #2]
    }

    /* Get the re-mapped z axis data */
    if (dev->remap.z_axis_sign == BMI2_POS_SIGN)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d110      	bne.n	8004b5a <get_remapped_data+0xfa>
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * pos_multiplier);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	3318      	adds	r3, #24
 8004b42:	443b      	add	r3, r7
 8004b44:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	8afb      	ldrh	r3, [r7, #22]
 8004b4c:	fb12 f303 	smulbb	r3, r2, r3
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	b21a      	sxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
    }
}
 8004b58:	e00f      	b.n	8004b7a <get_remapped_data+0x11a>
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	3318      	adds	r3, #24
 8004b64:	443b      	add	r3, r7
 8004b66:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	8abb      	ldrh	r3, [r7, #20]
 8004b6e:	fb12 f303 	smulbb	r3, r2, r3
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	b21a      	sxth	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	809a      	strh	r2, [r3, #4]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <saturate>:

/*!
 * @brief This internal API clips the gyroscope cross-axis sensitivity within signed 16-bit limit
 */
static int16_t saturate(int32_t value, uint16_t saturation_val)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	807b      	strh	r3, [r7, #2]
    int16_t retval = (int16_t)value;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	81fb      	strh	r3, [r7, #14]

    if (value > (int32_t)saturation_val)
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	dd02      	ble.n	8004ba4 <saturate+0x1e>
    {
        retval = (int16_t)saturation_val;
 8004b9e:	887b      	ldrh	r3, [r7, #2]
 8004ba0:	81fb      	strh	r3, [r7, #14]
 8004ba2:	e008      	b.n	8004bb6 <saturate+0x30>
    }
    else if (value < (-(int32_t)saturation_val - 1))
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	da03      	bge.n	8004bb6 <saturate+0x30>
    {
        retval = -(int16_t)saturation_val - 1;
 8004bae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	81fb      	strh	r3, [r7, #14]
    }

    return retval;
 8004bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <comp_gyro_cross_axis_sensitivity>:
/*!
 * @brief This internal API corrects the gyroscope cross-axis sensitivity
 * between the z and the x axis.
 */
static void comp_gyro_cross_axis_sensitivity(struct bmi2_sens_axes_data *gyr_data, const struct bmi2_dev *dev)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	6039      	str	r1, [r7, #0]
    uint16_t int16_max = UINT16_C(32767);
 8004bd0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8004bd4:	81fb      	strh	r3, [r7, #14]

    /* Get the compensated gyroscope x-axis */
    gyr_data->x =
        saturate((int32_t)(gyr_data->x - (int16_t)(((int32_t) dev->gyr_cross_sens_zx * (int32_t) gyr_data->z) / 512)),
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8004be4:	4619      	mov	r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	da01      	bge.n	8004bf8 <comp_gyro_cross_axis_sensitivity+0x32>
 8004bf4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8004bf8:	125b      	asrs	r3, r3, #9
 8004bfa:	b21b      	sxth	r3, r3
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	89fa      	ldrh	r2, [r7, #14]
 8004c00:	4611      	mov	r1, r2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff ffbf 	bl	8004b86 <saturate>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	461a      	mov	r2, r3
    gyr_data->x =
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	801a      	strh	r2, [r3, #0]
                 int16_max);
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi2_dev *dev)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	460b      	mov	r3, r1
 8004c24:	72fb      	strb	r3, [r7, #11]
 8004c26:	4613      	mov	r3, r2
 8004c28:	72bb      	strb	r3, [r7, #10]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	75fb      	strb	r3, [r7, #23]

    if (val != NULL)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01e      	beq.n	8004c72 <check_boundary_val+0x5a>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	7afa      	ldrb	r2, [r7, #11]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d909      	bls.n	8004c52 <check_boundary_val+0x3a>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	7afa      	ldrb	r2, [r7, #11]
 8004c42:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MIN_VALUE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	7a1b      	ldrb	r3, [r3, #8]
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	7aba      	ldrb	r2, [r7, #10]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d20c      	bcs.n	8004c76 <check_boundary_val+0x5e>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	7aba      	ldrb	r2, [r7, #10]
 8004c60:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MAX_VALUE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	7a1b      	ldrb	r3, [r3, #8]
 8004c66:	f043 0302 	orr.w	r3, r3, #2
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	721a      	strb	r2, [r3, #8]
 8004c70:	e001      	b.n	8004c76 <check_boundary_val+0x5e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004c72:	23ff      	movs	r3, #255	@ 0xff
 8004c74:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t set_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
    uint8_t reg_data;

    /* Array to store the default value of accelerometer configuration
     * reserved registers
     */
    uint8_t data_array[2] = { 0 };
 8004c90:	2300      	movs	r3, #0
 8004c92:	81bb      	strh	r3, [r7, #12]

    /* Validate bandwidth and performance mode */
    rslt = validate_bw_perf_mode(&config->bwp, &config->filter_perf, dev);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1c58      	adds	r0, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f7ff fb42 	bl	8004328 <validate_bw_perf_mode>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d15b      	bne.n	8004d68 <set_accel_config+0xe2>
    {
        /* Validate ODR and range */
        rslt = validate_odr_range(&config->odr, &config->range, dev);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3303      	adds	r3, #3
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f7ff fb62 	bl	8004382 <validate_odr_range>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8004cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d14e      	bne.n	8004d68 <set_accel_config+0xe2>
        {
            /* Set accelerometer performance mode */
            reg_data = BMI2_SET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE, config->filter_perf);
 8004cca:	7b3b      	ldrb	r3, [r7, #12]
 8004ccc:	b25b      	sxtb	r3, r3
 8004cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd2:	b25a      	sxtb	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	789b      	ldrb	r3, [r3, #2]
 8004cd8:	b25b      	sxtb	r3, r3
 8004cda:	01db      	lsls	r3, r3, #7
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	b25b      	sxtb	r3, r3
 8004ce2:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer bandwidth */
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_BW_PARAM, config->bwp);
 8004ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cec:	b25a      	sxtb	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	785b      	ldrb	r3, [r3, #1]
 8004cf2:	b25b      	sxtb	r3, r3
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	b25b      	sxtb	r3, r3
 8004cf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cfc:	b25b      	sxtb	r3, r3
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	b25b      	sxtb	r3, r3
 8004d02:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer ODR */
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ACC_ODR, config->odr);
 8004d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d08:	f023 030f 	bic.w	r3, r3, #15
 8004d0c:	b25a      	sxtb	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	b25b      	sxtb	r3, r3
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	b25b      	sxtb	r3, r3
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	b25b      	sxtb	r3, r3
 8004d1e:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[0] = reg_data;
 8004d20:	7bbb      	ldrb	r3, [r7, #14]
 8004d22:	733b      	strb	r3, [r7, #12]

            /* Set accelerometer range */
            reg_data = BMI2_SET_BIT_POS0(data_array[1], BMI2_ACC_RANGE, config->range);
 8004d24:	7b7b      	ldrb	r3, [r7, #13]
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	f023 0303 	bic.w	r3, r3, #3
 8004d2c:	b25a      	sxtb	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	78db      	ldrb	r3, [r3, #3]
 8004d32:	b25b      	sxtb	r3, r3
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	b25b      	sxtb	r3, r3
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	b25b      	sxtb	r3, r3
 8004d3e:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[1] = reg_data;
 8004d40:	7bbb      	ldrb	r3, [r7, #14]
 8004d42:	737b      	strb	r3, [r7, #13]

            /* Write accelerometer configuration to ACC_CONFand
             * ACC_RANGE registers simultaneously as they lie in consecutive places
             */
            rslt = bmi2_set_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 8004d44:	f107 010c 	add.w	r1, r7, #12
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	2040      	movs	r0, #64	@ 0x40
 8004d4e:	f7fe fd40 	bl	80037d2 <bmi2_set_regs>
 8004d52:	4603      	mov	r3, r0
 8004d54:	73fb      	strb	r3, [r7, #15]

            /* Get error status to check for invalid configurations */
            if (rslt == BMI2_OK)
 8004d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <set_accel_config+0xe2>
            {
                rslt = cfg_error_status(dev);
 8004d5e:	6838      	ldr	r0, [r7, #0]
 8004d60:	f7ff fb84 	bl	800446c <cfg_error_status>
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <set_gyro_config>:
 * @brief This internal API sets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range. It also
 * maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Array to store the default value of gyroscope configuration reserved registers  */
    uint8_t data_array[2] = { 0 };
 8004d7e:	2300      	movs	r3, #0
 8004d80:	81bb      	strh	r3, [r7, #12]

    /* Validate gyroscope configurations */
    rslt = validate_gyro_config(config, dev);
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff fb1c 	bl	80043c2 <validate_gyro_config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d16e      	bne.n	8004e74 <set_gyro_config+0x100>
    {
        /* Set gyroscope performance mode */
        reg_data = BMI2_SET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE, config->filter_perf);
 8004d96:	7b3b      	ldrb	r3, [r7, #12]
 8004d98:	b25b      	sxtb	r3, r3
 8004d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d9e:	b25a      	sxtb	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	789b      	ldrb	r3, [r3, #2]
 8004da4:	b25b      	sxtb	r3, r3
 8004da6:	01db      	lsls	r3, r3, #7
 8004da8:	b25b      	sxtb	r3, r3
 8004daa:	4313      	orrs	r3, r2
 8004dac:	b25b      	sxtb	r3, r3
 8004dae:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope noise performance mode */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_NOISE_PERF_MODE, config->noise_perf);
 8004db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004db4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004db8:	b25a      	sxtb	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	795b      	ldrb	r3, [r3, #5]
 8004dbe:	b25b      	sxtb	r3, r3
 8004dc0:	019b      	lsls	r3, r3, #6
 8004dc2:	b25b      	sxtb	r3, r3
 8004dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc8:	b25b      	sxtb	r3, r3
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	b25b      	sxtb	r3, r3
 8004dce:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope bandwidth */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_BW_PARAM, config->bwp);
 8004dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dd4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004dd8:	b25a      	sxtb	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	b25b      	sxtb	r3, r3
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	b25b      	sxtb	r3, r3
 8004de4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	4313      	orrs	r3, r2
 8004dec:	b25b      	sxtb	r3, r3
 8004dee:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_ODR, config->odr);
 8004df0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004df4:	f023 030f 	bic.w	r3, r3, #15
 8004df8:	b25a      	sxtb	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b25b      	sxtb	r3, r3
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	b25b      	sxtb	r3, r3
 8004e06:	4313      	orrs	r3, r2
 8004e08:	b25b      	sxtb	r3, r3
 8004e0a:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[0] = reg_data;
 8004e0c:	7bbb      	ldrb	r3, [r7, #14]
 8004e0e:	733b      	strb	r3, [r7, #12]

        /* Set gyroscope OIS range */
        reg_data = BMI2_SET_BITS(data_array[1], BMI2_GYR_OIS_RANGE, config->ois_range);
 8004e10:	7b7b      	ldrb	r3, [r7, #13]
 8004e12:	b25b      	sxtb	r3, r3
 8004e14:	f023 0308 	bic.w	r3, r3, #8
 8004e18:	b25a      	sxtb	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	78db      	ldrb	r3, [r3, #3]
 8004e1e:	b25b      	sxtb	r3, r3
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	b25b      	sxtb	r3, r3
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	b25b      	sxtb	r3, r3
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope range */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_RANGE, config->range);
 8004e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e34:	f023 0307 	bic.w	r3, r3, #7
 8004e38:	b25a      	sxtb	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	791b      	ldrb	r3, [r3, #4]
 8004e3e:	b25b      	sxtb	r3, r3
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	4313      	orrs	r3, r2
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[1] = reg_data;
 8004e4c:	7bbb      	ldrb	r3, [r7, #14]
 8004e4e:	737b      	strb	r3, [r7, #13]

        /* Write accelerometer configuration to GYR_CONF and GYR_RANGE
         * registers simultaneously as they lie in consecutive places
         */
        rslt = bmi2_set_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 8004e50:	f107 010c 	add.w	r1, r7, #12
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2202      	movs	r2, #2
 8004e58:	2042      	movs	r0, #66	@ 0x42
 8004e5a:	f7fe fcba 	bl	80037d2 <bmi2_set_regs>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73fb      	strb	r3, [r7, #15]

        /* Get error status to check for invalid configurations */
        if (rslt == BMI2_OK)
 8004e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d104      	bne.n	8004e74 <set_gyro_config+0x100>
        {
            rslt = cfg_error_status(dev);
 8004e6a:	6838      	ldr	r0, [r7, #0]
 8004e6c:	f7ff fafe 	bl	800446c <cfg_error_status>
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI2_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <null_ptr_check+0x2a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <null_ptr_check+0x2a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <null_ptr_check+0x2a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 8004eaa:	23ff      	movs	r3, #255	@ 0xff
 8004eac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <get_gyro_gain_update_status>:
/*!
 * @brief This internal API gets the saturation status for the gyroscope user
 * gain update.
 */
static int8_t get_gyro_gain_update_status(struct bmi2_gyr_user_gain_status *user_gain_stat, struct bmi2_dev *dev)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b088      	sub	sp, #32
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
 8004ed4:	60da      	str	r2, [r3, #12]

    /* Variables to define index */
    uint8_t idx = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature output for gyroscope user gain status */
    struct bmi2_feature_config user_gain_cfg = { 0, 0, 0 };
 8004eda:	2300      	movs	r3, #0
 8004edc:	723b      	strb	r3, [r7, #8]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	727b      	strb	r3, [r7, #9]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	72bb      	strb	r3, [r7, #10]

    /* Search for gyroscope user gain status output feature and extract its
     * configuration details
     */
    feat_found = extract_output_feat_config(&user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	2109      	movs	r1, #9
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f84b 	bl	8004f8a <extract_output_feat_config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8004ef8:	7f7b      	ldrb	r3, [r7, #29]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d03d      	beq.n	8004f7a <get_gyro_gain_update_status+0xbc>
    {
        /* Get the feature output configuration for gyroscope user gain  status */
        rslt = bmi2_get_feat_config(user_gain_cfg.page, feat_config, dev);
 8004efe:	7a7b      	ldrb	r3, [r7, #9]
 8004f00:	f107 010c 	add.w	r1, r7, #12
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff f829 	bl	8003f5e <bmi2_get_feat_config>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8004f10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d132      	bne.n	8004f7e <get_gyro_gain_update_status+0xc0>
        {
            /* Define the offset in bytes for gyroscope user gain status */
            idx = user_gain_cfg.start_addr;
 8004f18:	7abb      	ldrb	r3, [r7, #10]
 8004f1a:	77bb      	strb	r3, [r7, #30]

            /* Get the saturation status for x-axis */
            user_gain_stat->sat_x = BMI2_GET_BIT_POS0(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_X);
 8004f1c:	7fbb      	ldrb	r3, [r7, #30]
 8004f1e:	3320      	adds	r3, #32
 8004f20:	443b      	add	r3, r7
 8004f22:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	701a      	strb	r2, [r3, #0]

            /* Get the saturation status for y-axis */
            user_gain_stat->sat_y = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Y);
 8004f30:	7fbb      	ldrb	r3, [r7, #30]
 8004f32:	3320      	adds	r3, #32
 8004f34:	443b      	add	r3, r7
 8004f36:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8004f3a:	105b      	asrs	r3, r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	705a      	strb	r2, [r3, #1]

            /* Get the saturation status for z-axis */
            user_gain_stat->sat_z = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Z);
 8004f48:	7fbb      	ldrb	r3, [r7, #30]
 8004f4a:	3320      	adds	r3, #32
 8004f4c:	443b      	add	r3, r7
 8004f4e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8004f52:	109b      	asrs	r3, r3, #2
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	709a      	strb	r2, [r3, #2]

            /* Get g trigger status */
            user_gain_stat->g_trigger_status = BMI2_GET_BITS(feat_config[idx], BMI2_G_TRIGGER_STAT);
 8004f60:	7fbb      	ldrb	r3, [r7, #30]
 8004f62:	3320      	adds	r3, #32
 8004f64:	443b      	add	r3, r7
 8004f66:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8004f6a:	10db      	asrs	r3, r3, #3
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	70da      	strb	r2, [r3, #3]
 8004f78:	e001      	b.n	8004f7e <get_gyro_gain_update_status+0xc0>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8004f7a:	23f8      	movs	r3, #248	@ 0xf8
 8004f7c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8004f7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <extract_output_feat_config>:
 * details from the look-up table.
 */
static uint8_t extract_output_feat_config(struct bmi2_feature_config *feat_output,
                                          uint8_t type,
                                          const struct bmi2_dev *dev)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b087      	sub	sp, #28
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	460b      	mov	r3, r1
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	75bb      	strb	r3, [r7, #22]

    /* Search for the output feature from the output configuration array */
    while (loop < dev->out_sens)
 8004fa0:	e01c      	b.n	8004fdc <extract_output_feat_config+0x52>
    {
        if (dev->feat_output[loop].type == type)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004fa6:	7dfa      	ldrb	r2, [r7, #23]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	4413      	add	r3, r2
 8004fae:	440b      	add	r3, r1
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	7afa      	ldrb	r2, [r7, #11]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d10e      	bne.n	8004fd6 <extract_output_feat_config+0x4c>
        {
            *feat_output = dev->feat_output[loop];
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004fbc:	7dfa      	ldrb	r2, [r7, #23]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4413      	add	r3, r2
 8004fc4:	18ca      	adds	r2, r1, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8811      	ldrh	r1, [r2, #0]
 8004fca:	7892      	ldrb	r2, [r2, #2]
 8004fcc:	8019      	strh	r1, [r3, #0]
 8004fce:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	75bb      	strb	r3, [r7, #22]
            break;
 8004fd4:	e007      	b.n	8004fe6 <extract_output_feat_config+0x5c>
        }

        loop++;
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->out_sens)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	7e9b      	ldrb	r3, [r3, #26]
 8004fe0:	7dfa      	ldrb	r2, [r7, #23]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d3dd      	bcc.n	8004fa2 <extract_output_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 8004fe6:	7dbb      	ldrb	r3, [r7, #22]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <get_gyro_cross_sense>:
/*!
 * @brief This internal API gets the cross sensitivity coefficient between
 * gyroscope's X and Z axes.
 */
static int8_t get_gyro_cross_sense(int16_t *cross_sense, struct bmi2_dev *dev)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8004ffe:	f107 030c 	add.w	r3, r7, #12
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	605a      	str	r2, [r3, #4]
 8005008:	609a      	str	r2, [r3, #8]
 800500a:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t idx = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	77bb      	strb	r3, [r7, #30]
    uint8_t feat_found;

    uint8_t corr_fact_zx;

    /* Initialize feature output for gyroscope cross sensitivity */
    struct bmi2_feature_config cross_sense_out_config = { 0, 0, 0 };
 8005010:	2300      	movs	r3, #0
 8005012:	723b      	strb	r3, [r7, #8]
 8005014:	2300      	movs	r3, #0
 8005016:	727b      	strb	r3, [r7, #9]
 8005018:	2300      	movs	r3, #0
 800501a:	72bb      	strb	r3, [r7, #10]

    if (dev->variant_feature & BMI2_MAXIMUM_FIFO_VARIANT)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01d      	beq.n	8005066 <get_gyro_cross_sense+0x72>
    {
        /* For maximum_fifo variant fetch the correction factor from GPIO0 */
        rslt = bmi2_get_regs(BMI2_GYR_CAS_GPIO0_ADDR, &corr_fact_zx, 1, dev);
 800502a:	f107 010b 	add.w	r1, r7, #11
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2201      	movs	r2, #1
 8005032:	201e      	movs	r0, #30
 8005034:	f7fe fb5a 	bl	80036ec <bmi2_get_regs>
 8005038:	4603      	mov	r3, r0
 800503a:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800503c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d157      	bne.n	80050f4 <get_gyro_cross_sense+0x100>
        {
            /* Get the gyroscope cross sensitivity coefficient */
            if (corr_fact_zx & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8005044:	7afb      	ldrb	r3, [r7, #11]
 8005046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	d006      	beq.n	800505c <get_gyro_cross_sense+0x68>
            {
                *cross_sense = (int16_t)(((int16_t)corr_fact_zx) - 128);
 800504e:	7afb      	ldrb	r3, [r7, #11]
 8005050:	3b80      	subs	r3, #128	@ 0x80
 8005052:	b29b      	uxth	r3, r3
 8005054:	b21a      	sxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	e04b      	b.n	80050f4 <get_gyro_cross_sense+0x100>
            }
            else
            {
                *cross_sense = (int16_t)(corr_fact_zx);
 800505c:	7afb      	ldrb	r3, [r7, #11]
 800505e:	b21a      	sxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	e046      	b.n	80050f4 <get_gyro_cross_sense+0x100>
        }
    }
    else
    {
        /* Search for gyroscope cross sensitivity feature and extract its configuration details */
        feat_found = extract_output_feat_config(&cross_sense_out_config, BMI2_GYRO_CROSS_SENSE, dev);
 8005066:	f107 0308 	add.w	r3, r7, #8
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	2129      	movs	r1, #41	@ 0x29
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff ff8b 	bl	8004f8a <extract_output_feat_config>
 8005074:	4603      	mov	r3, r0
 8005076:	777b      	strb	r3, [r7, #29]
        if (feat_found)
 8005078:	7f7b      	ldrb	r3, [r7, #29]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d038      	beq.n	80050f0 <get_gyro_cross_sense+0xfc>
        {
            /* Get the feature output configuration for gyroscope cross sensitivity
             * feature */
            rslt = bmi2_get_feat_config(cross_sense_out_config.page, feat_config, dev);
 800507e:	7a7b      	ldrb	r3, [r7, #9]
 8005080:	f107 010c 	add.w	r1, r7, #12
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe ff69 	bl	8003f5e <bmi2_get_feat_config>
 800508c:	4603      	mov	r3, r0
 800508e:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8005090:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d12d      	bne.n	80050f4 <get_gyro_cross_sense+0x100>
            {
                /* Define the offset in bytes for gyroscope cross sensitivity output */
                idx = cross_sense_out_config.start_addr;
 8005098:	7abb      	ldrb	r3, [r7, #10]
 800509a:	77bb      	strb	r3, [r7, #30]

                /* discard the MSB as GYR_CAS is of only 7 bit */
                feat_config[idx] = feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_MASK;
 800509c:	7fbb      	ldrb	r3, [r7, #30]
 800509e:	3320      	adds	r3, #32
 80050a0:	443b      	add	r3, r7
 80050a2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80050a6:	7fbb      	ldrb	r3, [r7, #30]
 80050a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	3320      	adds	r3, #32
 80050b0:	443b      	add	r3, r7
 80050b2:	f803 2c14 	strb.w	r2, [r3, #-20]

                /* Get the gyroscope cross sensitivity coefficient */
                if (feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 80050b6:	7fbb      	ldrb	r3, [r7, #30]
 80050b8:	3320      	adds	r3, #32
 80050ba:	443b      	add	r3, r7
 80050bc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80050c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <get_gyro_cross_sense+0xea>
                {
                    *cross_sense = (int16_t)(((int16_t)feat_config[idx]) - 128);
 80050c8:	7fbb      	ldrb	r3, [r7, #30]
 80050ca:	3320      	adds	r3, #32
 80050cc:	443b      	add	r3, r7
 80050ce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80050d2:	3b80      	subs	r3, #128	@ 0x80
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	b21a      	sxth	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	801a      	strh	r2, [r3, #0]
 80050dc:	e00a      	b.n	80050f4 <get_gyro_cross_sense+0x100>
                }
                else
                {
                    *cross_sense = (int16_t)(feat_config[idx]);
 80050de:	7fbb      	ldrb	r3, [r7, #30]
 80050e0:	3320      	adds	r3, #32
 80050e2:	443b      	add	r3, r7
 80050e4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80050e8:	b21a      	sxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	801a      	strh	r2, [r3, #0]
 80050ee:	e001      	b.n	80050f4 <get_gyro_cross_sense+0x100>
                }
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_SENSOR;
 80050f0:	23f8      	movs	r3, #248	@ 0xf8
 80050f2:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80050f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <bmi270_init>:
 *  3) Writes the configuration file.
 *  4) Updates the feature offset parameters in the device structure.
 *  5) Updates the maximum number of pages, in the device structure.
 */
int8_t bmi270_init(struct bmi2_dev *dev)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f88d 	bl	8005228 <null_ptr_check>
 800510e:	4603      	mov	r3, r0
 8005110:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8005112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d141      	bne.n	800519e <bmi270_init+0x9e>
    {
        /* Assign chip id of BMI270 */
        dev->chip_id = BMI270_CHIP_ID;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2224      	movs	r2, #36	@ 0x24
 800511e:	701a      	strb	r2, [r3, #0]

        /* get the size of config array */
        dev->config_size = sizeof(bmi270_config_file);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005126:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

        /* Enable the variant specific features if any */
        dev->variant_feature = BMI2_GYRO_CROSS_SENS_ENABLE | BMI2_CRT_RTOSK_ENABLE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2203      	movs	r2, #3
 800512e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI2_SPI_INTF)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	7a5b      	ldrb	r3, [r3, #9]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <bmi270_init+0x42>
        {
            dev->dummy_byte = 1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	72da      	strb	r2, [r3, #11]
 8005140:	e002      	b.n	8005148 <bmi270_init+0x48>
        }
        else
        {
            dev->dummy_byte = 0;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	72da      	strb	r2, [r3, #11]
        }

        /* If configuration file pointer is not assigned any address */
        if (!dev->config_file_ptr)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d102      	bne.n	8005156 <bmi270_init+0x56>
        {
            /* Give the address of the configuration file array to
             * the device pointer
             */
            dev->config_file_ptr = bmi270_config_file;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a16      	ldr	r2, [pc, #88]	@ (80051ac <bmi270_init+0xac>)
 8005154:	615a      	str	r2, [r3, #20]
        }

        /* Initialize BMI2 sensor */
        rslt = bmi2_sec_init(dev);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fe fa68 	bl	800362c <bmi2_sec_init>
 800515c:	4603      	mov	r3, r0
 800515e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8005160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d11a      	bne.n	800519e <bmi270_init+0x9e>
        {
            /* Assign the offsets of the feature input
             * configuration to the device structure
             */
            dev->feat_config = bmi270_feat_in;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a11      	ldr	r2, [pc, #68]	@ (80051b0 <bmi270_init+0xb0>)
 800516c:	621a      	str	r2, [r3, #32]

            /* Assign the offsets of the feature output to
             * the device structure
             */
            dev->feat_output = bmi270_feat_out;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a10      	ldr	r2, [pc, #64]	@ (80051b4 <bmi270_init+0xb4>)
 8005172:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Assign the maximum number of pages to the
             * device structure
             */
            dev->page_max = BMI270_MAX_PAGE_NUM;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2208      	movs	r2, #8
 8005178:	761a      	strb	r2, [r3, #24]

            /* Assign maximum number of input sensors/
             * features to device structure
             */
            dev->input_sens = BMI270_MAX_FEAT_IN;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2211      	movs	r2, #17
 800517e:	765a      	strb	r2, [r3, #25]

            /* Assign maximum number of output sensors/
             * features to device structure
             */
            dev->out_sens = BMI270_MAX_FEAT_OUT;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2207      	movs	r2, #7
 8005184:	769a      	strb	r2, [r3, #26]

            /* Assign the offsets of the feature interrupt
             * to the device structure
             */
            dev->map_int = bmi270_map_int;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a0b      	ldr	r2, [pc, #44]	@ (80051b8 <bmi270_init+0xb8>)
 800518a:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Assign maximum number of feature interrupts
             * to device structure
             */
            dev->sens_int_map = BMI270_MAX_INT_MAP;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2208      	movs	r2, #8
 8005190:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            /* Get the gyroscope cross axis sensitivity */
            rslt = bmi2_get_gyro_cross_sense(dev);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7fe fe82 	bl	8003e9e <bmi2_get_gyro_cross_sense>
 800519a:	4603      	mov	r3, r0
 800519c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800519e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	08013734 	.word	0x08013734
 80051b0:	08015734 	.word	0x08015734
 80051b4:	08015768 	.word	0x08015768
 80051b8:	20000080 	.word	0x20000080

080051bc <bmi270_sensor_enable>:

/*!
 * @brief This API selects the sensors/features to be enabled.
 */
int8_t bmi270_sensor_enable(const uint8_t *sens_list, uint8_t n_sens, struct bmi2_dev *dev)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	460b      	mov	r3, r1
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to select sensor */
    uint64_t sensor_sel = 0;
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f826 	bl	8005228 <null_ptr_check>
 80051dc:	4603      	mov	r3, r0
 80051de:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMI2_OK) && (sens_list != NULL))
 80051e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d117      	bne.n	8005218 <bmi270_sensor_enable+0x5c>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d014      	beq.n	8005218 <bmi270_sensor_enable+0x5c>
    {
        /* Get the selected sensors */
        rslt = select_sensor(sens_list, n_sens, &sensor_sel);
 80051ee:	f107 0210 	add.w	r2, r7, #16
 80051f2:	7afb      	ldrb	r3, [r7, #11]
 80051f4:	4619      	mov	r1, r3
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f836 	bl	8005268 <select_sensor>
 80051fc:	4603      	mov	r3, r0
 80051fe:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005200:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d109      	bne.n	800521c <bmi270_sensor_enable+0x60>
        {
            /* Enable the selected sensors */
            rslt = sensor_enable(sensor_sel, dev);
 8005208:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	f000 f953 	bl	80054b8 <sensor_enable>
 8005212:	4603      	mov	r3, r0
 8005214:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005216:	e001      	b.n	800521c <bmi270_sensor_enable+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005218:	23ff      	movs	r3, #255	@ 0xff
 800521a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800521c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3720      	adds	r7, #32
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <null_ptr_check+0x2a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <null_ptr_check+0x2a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <null_ptr_check+0x2a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 8005252:	23ff      	movs	r3, #255	@ 0xff
 8005254:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
	...

08005268 <select_sensor>:
/*!
 * @brief This internal API selects the sensor/features to be enabled or
 * disabled.
 */
static int8_t select_sensor(const uint8_t *sens_list, uint8_t n_sens, uint64_t *sensor_sel)
{
 8005268:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800526c:	b09d      	sub	sp, #116	@ 0x74
 800526e:	af00      	add	r7, sp, #0
 8005270:	6678      	str	r0, [r7, #100]	@ 0x64
 8005272:	460b      	mov	r3, r1
 8005274:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005276:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    /* Variable to define loop */
    uint8_t count;

    for (count = 0; count < n_sens; count++)
 8005280:	2300      	movs	r3, #0
 8005282:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8005286:	e107      	b.n	8005498 <select_sensor+0x230>
    {
        switch (sens_list[count])
 8005288:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800528c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800528e:	4413      	add	r3, r2
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b22      	cmp	r3, #34	@ 0x22
 8005294:	f200 80f7 	bhi.w	8005486 <select_sensor+0x21e>
 8005298:	a201      	add	r2, pc, #4	@ (adr r2, 80052a0 <select_sensor+0x38>)
 800529a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529e:	bf00      	nop
 80052a0:	0800532d 	.word	0x0800532d
 80052a4:	08005341 	.word	0x08005341
 80052a8:	08005355 	.word	0x08005355
 80052ac:	08005383 	.word	0x08005383
 80052b0:	0800539d 	.word	0x0800539d
 80052b4:	080053b7 	.word	0x080053b7
 80052b8:	080053d1 	.word	0x080053d1
 80052bc:	080053eb 	.word	0x080053eb
 80052c0:	08005405 	.word	0x08005405
 80052c4:	0800541f 	.word	0x0800541f
 80052c8:	08005487 	.word	0x08005487
 80052cc:	08005487 	.word	0x08005487
 80052d0:	08005487 	.word	0x08005487
 80052d4:	08005487 	.word	0x08005487
 80052d8:	08005487 	.word	0x08005487
 80052dc:	08005487 	.word	0x08005487
 80052e0:	08005487 	.word	0x08005487
 80052e4:	08005487 	.word	0x08005487
 80052e8:	08005487 	.word	0x08005487
 80052ec:	08005453 	.word	0x08005453
 80052f0:	0800546d 	.word	0x0800546d
 80052f4:	08005487 	.word	0x08005487
 80052f8:	08005487 	.word	0x08005487
 80052fc:	08005487 	.word	0x08005487
 8005300:	08005487 	.word	0x08005487
 8005304:	08005487 	.word	0x08005487
 8005308:	08005487 	.word	0x08005487
 800530c:	08005487 	.word	0x08005487
 8005310:	08005487 	.word	0x08005487
 8005314:	08005487 	.word	0x08005487
 8005318:	08005487 	.word	0x08005487
 800531c:	08005487 	.word	0x08005487
 8005320:	08005369 	.word	0x08005369
 8005324:	08005487 	.word	0x08005487
 8005328:	08005439 	.word	0x08005439
        {
            case BMI2_ACCEL:
                *sensor_sel |= BMI2_ACCEL_SENS_SEL;
 800532c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	f042 0401 	orr.w	r4, r2, #1
 8005336:	461d      	mov	r5, r3
 8005338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800533a:	e9c3 4500 	strd	r4, r5, [r3]
                break;
 800533e:	e0a6      	b.n	800548e <select_sensor+0x226>
            case BMI2_GYRO:
                *sensor_sel |= BMI2_GYRO_SENS_SEL;
 8005340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f042 0802 	orr.w	r8, r2, #2
 800534a:	4699      	mov	r9, r3
 800534c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800534e:	e9c3 8900 	strd	r8, r9, [r3]
                break;
 8005352:	e09c      	b.n	800548e <select_sensor+0x226>
            case BMI2_AUX:
                *sensor_sel |= BMI2_AUX_SENS_SEL;
 8005354:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	f042 0a04 	orr.w	sl, r2, #4
 800535e:	469b      	mov	fp, r3
 8005360:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005362:	e9c3 ab00 	strd	sl, fp, [r3]
                break;
 8005366:	e092      	b.n	800548e <select_sensor+0x226>
            case BMI2_TEMP:
                *sensor_sel |= BMI2_TEMP_SENS_SEL;
 8005368:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	653a      	str	r2, [r7, #80]	@ 0x50
 8005370:	f043 0301 	orr.w	r3, r3, #1
 8005374:	657b      	str	r3, [r7, #84]	@ 0x54
 8005376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005378:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800537c:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005380:	e085      	b.n	800548e <select_sensor+0x226>
            case BMI2_SIG_MOTION:
                *sensor_sel |= BMI2_SIG_MOTION_SEL;
 8005382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f042 0108 	orr.w	r1, r2, #8
 800538c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800538e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005390:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005392:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005396:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 800539a:	e078      	b.n	800548e <select_sensor+0x226>
            case BMI2_ANY_MOTION:
                *sensor_sel |= BMI2_ANY_MOT_SEL;
 800539c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	f042 0110 	orr.w	r1, r2, #16
 80053a6:	6439      	str	r1, [r7, #64]	@ 0x40
 80053a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80053aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80053b0:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 80053b4:	e06b      	b.n	800548e <select_sensor+0x226>
            case BMI2_NO_MOTION:
                *sensor_sel |= BMI2_NO_MOT_SEL;
 80053b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	f042 0120 	orr.w	r1, r2, #32
 80053c0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80053ca:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 80053ce:	e05e      	b.n	800548e <select_sensor+0x226>
            case BMI2_STEP_DETECTOR:
                *sensor_sel |= BMI2_STEP_DETECT_SEL;
 80053d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f042 0140 	orr.w	r1, r2, #64	@ 0x40
 80053da:	6339      	str	r1, [r7, #48]	@ 0x30
 80053dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80053e4:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 80053e8:	e051      	b.n	800548e <select_sensor+0x226>
            case BMI2_STEP_COUNTER:
                *sensor_sel |= BMI2_STEP_COUNT_SEL;
 80053ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f042 0180 	orr.w	r1, r2, #128	@ 0x80
 80053f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80053f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80053fe:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005402:	e044      	b.n	800548e <select_sensor+0x226>
            case BMI2_STEP_ACTIVITY:
                *sensor_sel |= BMI2_STEP_ACT_SEL;
 8005404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f442 7180 	orr.w	r1, r2, #256	@ 0x100
 800540e:	6239      	str	r1, [r7, #32]
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
 8005412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005414:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005418:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 800541c:	e037      	b.n	800548e <select_sensor+0x226>
            case BMI2_GYRO_GAIN_UPDATE:
                *sensor_sel |= BMI2_GYRO_GAIN_UPDATE_SEL;
 800541e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f442 7100 	orr.w	r1, r2, #512	@ 0x200
 8005428:	61b9      	str	r1, [r7, #24]
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800542e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005432:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005436:	e02a      	b.n	800548e <select_sensor+0x226>
            case BMI2_GYRO_SELF_OFF:
                *sensor_sel |= BMI2_GYRO_SELF_OFF_SEL;
 8005438:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	613a      	str	r2, [r7, #16]
 8005440:	f043 0304 	orr.w	r3, r3, #4
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005448:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800544c:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005450:	e01d      	b.n	800548e <select_sensor+0x226>
            case BMI2_WRIST_GESTURE:
                *sensor_sel |= BMI2_WRIST_GEST_SEL;
 8005452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f442 2100 	orr.w	r1, r2, #524288	@ 0x80000
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005462:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005466:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 800546a:	e010      	b.n	800548e <select_sensor+0x226>
            case BMI2_WRIST_WEAR_WAKE_UP:
                *sensor_sel |= BMI2_WRIST_WEAR_WAKE_UP_SEL;
 800546c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	f442 1180 	orr.w	r1, r2, #1048576	@ 0x100000
 8005476:	6039      	str	r1, [r7, #0]
 8005478:	607b      	str	r3, [r7, #4]
 800547a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800547c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005480:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005484:	e003      	b.n	800548e <select_sensor+0x226>
            default:
                rslt = BMI2_E_INVALID_SENSOR;
 8005486:	23f8      	movs	r3, #248	@ 0xf8
 8005488:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                break;
 800548c:	bf00      	nop
    for (count = 0; count < n_sens; count++)
 800548e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8005492:	3301      	adds	r3, #1
 8005494:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8005498:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800549c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80054a0:	429a      	cmp	r2, r3
 80054a2:	f4ff aef1 	bcc.w	8005288 <select_sensor+0x20>
        }
    }

    return rslt;
 80054a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3774      	adds	r7, #116	@ 0x74
 80054ae:	46bd      	mov	sp, r7
 80054b0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop

080054b8 <sensor_enable>:

/*!
 * @brief This internal API enables the selected sensor/features.
 */
static int8_t sensor_enable(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 80054b8:	b5b0      	push	{r4, r5, r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	75bb      	strb	r3, [r7, #22]

    rslt = enable_main_sensors(sensor_sel, dev);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054ce:	f000 fcd5 	bl	8005e7c <enable_main_sensors>
 80054d2:	4603      	mov	r3, r0
 80054d4:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI2_OK) && (sensor_sel & ~(BMI2_MAIN_SENSORS)))
 80054d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d12d      	bne.n	800553a <sensor_enable+0x82>
 80054de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054e2:	f022 0407 	bic.w	r4, r2, #7
 80054e6:	f023 0501 	bic.w	r5, r3, #1
 80054ea:	ea54 0305 	orrs.w	r3, r4, r5
 80054ee:	d024      	beq.n	800553a <sensor_enable+0x82>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80054f6:	75bb      	strb	r3, [r7, #22]
        if (aps_stat == BMI2_ENABLE)
 80054f8:	7dbb      	ldrb	r3, [r7, #22]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d105      	bne.n	800550a <sensor_enable+0x52>
        {
            /* Disable advance power save if enabled */
            rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	2000      	movs	r0, #0
 8005502:	f7fe fa3a 	bl	800397a <bmi2_set_adv_power_save>
 8005506:	4603      	mov	r3, r0
 8005508:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI2_OK)
 800550a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d113      	bne.n	800553a <sensor_enable+0x82>
        {
            rslt = enable_sensor_features(sensor_sel, dev);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005518:	f000 fd25 	bl	8005f66 <enable_sensor_features>
 800551c:	4603      	mov	r3, r0
 800551e:	75fb      	strb	r3, [r7, #23]

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8005520:	7dbb      	ldrb	r3, [r7, #22]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d109      	bne.n	800553a <sensor_enable+0x82>
 8005526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d105      	bne.n	800553a <sensor_enable+0x82>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	2001      	movs	r0, #1
 8005532:	f7fe fa22 	bl	800397a <bmi2_set_adv_power_save>
 8005536:	4603      	mov	r3, r0
 8005538:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800553a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bdb0      	pop	{r4, r5, r7, pc}

08005546 <set_any_motion>:

/*!
 * @brief This internal API is used to enable/disable any motion feature.
 */
static int8_t set_any_motion(uint8_t enable, struct bmi2_dev *dev)
{
 8005546:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	6039      	str	r1, [r7, #0]
 8005552:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005554:	f107 030c 	add.w	r3, r7, #12
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	605a      	str	r2, [r3, #4]
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any-motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 8005566:	2300      	movs	r3, #0
 8005568:	723b      	strb	r3, [r7, #8]
 800556a:	2300      	movs	r3, #0
 800556c:	727b      	strb	r3, [r7, #9]
 800556e:	2300      	movs	r3, #0
 8005570:	72bb      	strb	r3, [r7, #10]

    /* Search for any-motion feature and extract its configurations details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 8005572:	f107 0308 	add.w	r3, r7, #8
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	2104      	movs	r1, #4
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe fd81 	bl	8004082 <bmi2_extract_input_feat_config>
 8005580:	4603      	mov	r3, r0
 8005582:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8005584:	7f7b      	ldrb	r3, [r7, #29]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d048      	beq.n	800561c <set_any_motion+0xd6>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 800558a:	7a7b      	ldrb	r3, [r7, #9]
 800558c:	f107 010c 	add.w	r1, r7, #12
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe fce3 	bl	8003f5e <bmi2_get_feat_config>
 8005598:	4603      	mov	r3, r0
 800559a:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800559c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d13d      	bne.n	8005620 <set_any_motion+0xda>
        {
            /* Define the offset for enable/disable of any-motion axes */
            idx = any_mot_config.start_addr + BMI2_ANY_MOT_FEAT_EN_OFFSET;
 80055a4:	7abb      	ldrb	r3, [r7, #10]
 80055a6:	3303      	adds	r3, #3
 80055a8:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_ANY_NO_MOT_EN, enable);
 80055aa:	7fbb      	ldrb	r3, [r7, #30]
 80055ac:	3320      	adds	r3, #32
 80055ae:	443b      	add	r3, r7
 80055b0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80055b4:	b25b      	sxtb	r3, r3
 80055b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ba:	b25a      	sxtb	r2, r3
 80055bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c0:	01db      	lsls	r3, r3, #7
 80055c2:	b25b      	sxtb	r3, r3
 80055c4:	4313      	orrs	r3, r2
 80055c6:	b25a      	sxtb	r2, r3
 80055c8:	7fbb      	ldrb	r3, [r7, #30]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	3320      	adds	r3, #32
 80055ce:	443b      	add	r3, r7
 80055d0:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80055d4:	f107 010c 	add.w	r1, r7, #12
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2210      	movs	r2, #16
 80055dc:	2030      	movs	r0, #48	@ 0x30
 80055de:	f7fe f8f8 	bl	80037d2 <bmi2_set_regs>
 80055e2:	4603      	mov	r3, r0
 80055e4:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80055e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10c      	bne.n	8005608 <set_any_motion+0xc2>
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d109      	bne.n	8005608 <set_any_motion+0xc2>
            {
                dev->sens_en_stat |= BMI2_ANY_MOT_SEL;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80055fa:	f042 0810 	orr.w	r8, r2, #16
 80055fe:	4699      	mov	r9, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8005606:	e00b      	b.n	8005620 <set_any_motion+0xda>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_ANY_MOT_SEL;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800560e:	f022 0410 	bic.w	r4, r2, #16
 8005612:	461d      	mov	r5, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 800561a:	e001      	b.n	8005620 <set_any_motion+0xda>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800561c:	23f8      	movs	r3, #248	@ 0xf8
 800561e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005620:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800562e <set_no_motion>:

/*!
 * @brief This internal API is used to enable/disable no-motion feature.
 */
static int8_t set_no_motion(uint8_t enable, struct bmi2_dev *dev)
{
 800562e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	6039      	str	r1, [r7, #0]
 800563a:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800563c:	f107 030c 	add.w	r3, r7, #12
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 800564e:	2300      	movs	r3, #0
 8005650:	723b      	strb	r3, [r7, #8]
 8005652:	2300      	movs	r3, #0
 8005654:	727b      	strb	r3, [r7, #9]
 8005656:	2300      	movs	r3, #0
 8005658:	72bb      	strb	r3, [r7, #10]

    /* Search for no-motion feature and extract its configurations details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 800565a:	f107 0308 	add.w	r3, r7, #8
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	2105      	movs	r1, #5
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe fd0d 	bl	8004082 <bmi2_extract_input_feat_config>
 8005668:	4603      	mov	r3, r0
 800566a:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 800566c:	7f7b      	ldrb	r3, [r7, #29]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d048      	beq.n	8005704 <set_no_motion+0xd6>
    {
        /* Get the configuration from the page where any/no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 8005672:	7a7b      	ldrb	r3, [r7, #9]
 8005674:	f107 010c 	add.w	r1, r7, #12
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe fc6f 	bl	8003f5e <bmi2_get_feat_config>
 8005680:	4603      	mov	r3, r0
 8005682:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005684:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d13d      	bne.n	8005708 <set_no_motion+0xda>
        {
            /* Define the offset for enable/disable of no-motion axes */
            idx = no_mot_config.start_addr + BMI2_NO_MOT_FEAT_EN_OFFSET;
 800568c:	7abb      	ldrb	r3, [r7, #10]
 800568e:	3303      	adds	r3, #3
 8005690:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_ANY_NO_MOT_EN, enable);
 8005692:	7fbb      	ldrb	r3, [r7, #30]
 8005694:	3320      	adds	r3, #32
 8005696:	443b      	add	r3, r7
 8005698:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800569c:	b25b      	sxtb	r3, r3
 800569e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056a2:	b25a      	sxtb	r2, r3
 80056a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a8:	01db      	lsls	r3, r3, #7
 80056aa:	b25b      	sxtb	r3, r3
 80056ac:	4313      	orrs	r3, r2
 80056ae:	b25a      	sxtb	r2, r3
 80056b0:	7fbb      	ldrb	r3, [r7, #30]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	3320      	adds	r3, #32
 80056b6:	443b      	add	r3, r7
 80056b8:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80056bc:	f107 010c 	add.w	r1, r7, #12
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2210      	movs	r2, #16
 80056c4:	2030      	movs	r0, #48	@ 0x30
 80056c6:	f7fe f884 	bl	80037d2 <bmi2_set_regs>
 80056ca:	4603      	mov	r3, r0
 80056cc:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80056ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10c      	bne.n	80056f0 <set_no_motion+0xc2>
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d109      	bne.n	80056f0 <set_no_motion+0xc2>
            {
                dev->sens_en_stat |= BMI2_NO_MOT_SEL;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80056e2:	f042 0820 	orr.w	r8, r2, #32
 80056e6:	4699      	mov	r9, r3
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 80056ee:	e00b      	b.n	8005708 <set_no_motion+0xda>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_NO_MOT_SEL;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80056f6:	f022 0420 	bic.w	r4, r2, #32
 80056fa:	461d      	mov	r5, r3
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8005702:	e001      	b.n	8005708 <set_no_motion+0xda>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8005704:	23f8      	movs	r3, #248	@ 0xf8
 8005706:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005708:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005716 <set_step_detector>:

/*!
 * @brief This internal API is used to enable/disable step detector feature.
 */
static int8_t set_step_detector(uint8_t enable, struct bmi2_dev *dev)
{
 8005716:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	6039      	str	r1, [r7, #0]
 8005722:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	609a      	str	r2, [r3, #8]
 8005730:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step detector */
    struct bmi2_feature_config step_det_config = { 0, 0, 0 };
 8005736:	2300      	movs	r3, #0
 8005738:	723b      	strb	r3, [r7, #8]
 800573a:	2300      	movs	r3, #0
 800573c:	727b      	strb	r3, [r7, #9]
 800573e:	2300      	movs	r3, #0
 8005740:	72bb      	strb	r3, [r7, #10]

    /* Search for step detector feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_det_config, BMI2_STEP_DETECTOR, dev);
 8005742:	f107 0308 	add.w	r3, r7, #8
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	2106      	movs	r1, #6
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fc99 	bl	8004082 <bmi2_extract_input_feat_config>
 8005750:	4603      	mov	r3, r0
 8005752:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8005754:	7f7b      	ldrb	r3, [r7, #29]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d04b      	beq.n	80057f2 <set_step_detector+0xdc>
    {
        /* Get the configuration from the page where step detector feature resides */
        rslt = bmi2_get_feat_config(step_det_config.page, feat_config, dev);
 800575a:	7a7b      	ldrb	r3, [r7, #9]
 800575c:	f107 010c 	add.w	r1, r7, #12
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fbfb 	bl	8003f5e <bmi2_get_feat_config>
 8005768:	4603      	mov	r3, r0
 800576a:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800576c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d140      	bne.n	80057f6 <set_step_detector+0xe0>
        {
            /* Define the offset for enable/disable of step detector */
            idx = step_det_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 8005774:	7abb      	ldrb	r3, [r7, #10]
 8005776:	3301      	adds	r3, #1
 8005778:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_DET_FEAT_EN, enable);
 800577a:	7fbb      	ldrb	r3, [r7, #30]
 800577c:	3320      	adds	r3, #32
 800577e:	443b      	add	r3, r7
 8005780:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005784:	b25b      	sxtb	r3, r3
 8005786:	f023 0308 	bic.w	r3, r3, #8
 800578a:	b25a      	sxtb	r2, r3
 800578c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	b25b      	sxtb	r3, r3
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	b25b      	sxtb	r3, r3
 800579a:	4313      	orrs	r3, r2
 800579c:	b25a      	sxtb	r2, r3
 800579e:	7fbb      	ldrb	r3, [r7, #30]
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	3320      	adds	r3, #32
 80057a4:	443b      	add	r3, r7
 80057a6:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80057aa:	f107 010c 	add.w	r1, r7, #12
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2210      	movs	r2, #16
 80057b2:	2030      	movs	r0, #48	@ 0x30
 80057b4:	f7fe f80d 	bl	80037d2 <bmi2_set_regs>
 80057b8:	4603      	mov	r3, r0
 80057ba:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80057bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10c      	bne.n	80057de <set_step_detector+0xc8>
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d109      	bne.n	80057de <set_step_detector+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_DETECT_SEL;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80057d0:	f042 0840 	orr.w	r8, r2, #64	@ 0x40
 80057d4:	4699      	mov	r9, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 80057dc:	e00b      	b.n	80057f6 <set_step_detector+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_DETECT_SEL;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80057e4:	f022 0440 	bic.w	r4, r2, #64	@ 0x40
 80057e8:	461d      	mov	r5, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 80057f0:	e001      	b.n	80057f6 <set_step_detector+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80057f2:	23f8      	movs	r3, #248	@ 0xf8
 80057f4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80057f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005804 <set_step_counter>:

/*!
 * @brief This internal API is used to enable/disable step counter feature.
 */
static int8_t set_step_counter(uint8_t enable, struct bmi2_dev *dev)
{
 8005804:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005808:	b088      	sub	sp, #32
 800580a:	af00      	add	r7, sp, #0
 800580c:	4603      	mov	r3, r0
 800580e:	6039      	str	r1, [r7, #0]
 8005810:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005812:	f107 030c 	add.w	r3, r7, #12
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	609a      	str	r2, [r3, #8]
 800581e:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 8005824:	2300      	movs	r3, #0
 8005826:	723b      	strb	r3, [r7, #8]
 8005828:	2300      	movs	r3, #0
 800582a:	727b      	strb	r3, [r7, #9]
 800582c:	2300      	movs	r3, #0
 800582e:	72bb      	strb	r3, [r7, #10]

    /* Search for step counter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 8005830:	f107 0308 	add.w	r3, r7, #8
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	2107      	movs	r1, #7
 8005838:	4618      	mov	r0, r3
 800583a:	f7fe fc22 	bl	8004082 <bmi2_extract_input_feat_config>
 800583e:	4603      	mov	r3, r0
 8005840:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8005842:	7f7b      	ldrb	r3, [r7, #29]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d04b      	beq.n	80058e0 <set_step_counter+0xdc>
    {
        /* Get the configuration from the page where step-counter feature resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 8005848:	7a7b      	ldrb	r3, [r7, #9]
 800584a:	f107 010c 	add.w	r1, r7, #12
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe fb84 	bl	8003f5e <bmi2_get_feat_config>
 8005856:	4603      	mov	r3, r0
 8005858:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800585a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d140      	bne.n	80058e4 <set_step_counter+0xe0>
        {
            /* Define the offset for enable/disable of step counter */
            idx = step_count_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 8005862:	7abb      	ldrb	r3, [r7, #10]
 8005864:	3301      	adds	r3, #1
 8005866:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_COUNT_FEAT_EN, enable);
 8005868:	7fbb      	ldrb	r3, [r7, #30]
 800586a:	3320      	adds	r3, #32
 800586c:	443b      	add	r3, r7
 800586e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005872:	b25b      	sxtb	r3, r3
 8005874:	f023 0310 	bic.w	r3, r3, #16
 8005878:	b25a      	sxtb	r2, r3
 800587a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	b25b      	sxtb	r3, r3
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	b25b      	sxtb	r3, r3
 8005888:	4313      	orrs	r3, r2
 800588a:	b25a      	sxtb	r2, r3
 800588c:	7fbb      	ldrb	r3, [r7, #30]
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	3320      	adds	r3, #32
 8005892:	443b      	add	r3, r7
 8005894:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8005898:	f107 010c 	add.w	r1, r7, #12
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2210      	movs	r2, #16
 80058a0:	2030      	movs	r0, #48	@ 0x30
 80058a2:	f7fd ff96 	bl	80037d2 <bmi2_set_regs>
 80058a6:	4603      	mov	r3, r0
 80058a8:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80058aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10c      	bne.n	80058cc <set_step_counter+0xc8>
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d109      	bne.n	80058cc <set_step_counter+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_COUNT_SEL;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80058be:	f042 0880 	orr.w	r8, r2, #128	@ 0x80
 80058c2:	4699      	mov	r9, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 80058ca:	e00b      	b.n	80058e4 <set_step_counter+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_COUNT_SEL;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80058d2:	f022 0480 	bic.w	r4, r2, #128	@ 0x80
 80058d6:	461d      	mov	r5, r3
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 80058de:	e001      	b.n	80058e4 <set_step_counter+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80058e0:	23f8      	movs	r3, #248	@ 0xf8
 80058e2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80058e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080058f2 <set_sig_motion>:

/*!
 * @brief This internal API is used to enable/disable sig-motion feature.
 */
static int8_t set_sig_motion(uint8_t enable, struct bmi2_dev *dev)
{
 80058f2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	6039      	str	r1, [r7, #0]
 80058fe:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005900:	f107 030c 	add.w	r3, r7, #12
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	609a      	str	r2, [r3, #8]
 800590c:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 8005912:	2300      	movs	r3, #0
 8005914:	723b      	strb	r3, [r7, #8]
 8005916:	2300      	movs	r3, #0
 8005918:	727b      	strb	r3, [r7, #9]
 800591a:	2300      	movs	r3, #0
 800591c:	72bb      	strb	r3, [r7, #10]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 800591e:	f107 0308 	add.w	r3, r7, #8
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	2103      	movs	r1, #3
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe fbab 	bl	8004082 <bmi2_extract_input_feat_config>
 800592c:	4603      	mov	r3, r0
 800592e:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8005930:	7f7b      	ldrb	r3, [r7, #29]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d049      	beq.n	80059ca <set_sig_motion+0xd8>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 8005936:	7a7b      	ldrb	r3, [r7, #9]
 8005938:	f107 010c 	add.w	r1, r7, #12
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe fb0d 	bl	8003f5e <bmi2_get_feat_config>
 8005944:	4603      	mov	r3, r0
 8005946:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005948:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d13e      	bne.n	80059ce <set_sig_motion+0xdc>
        {
            /* Define the offset for enable/disable of sig-motion */
            idx = sig_mot_config.start_addr + BMI2_SIG_MOT_FEAT_EN_OFFSET;
 8005950:	7abb      	ldrb	r3, [r7, #10]
 8005952:	330a      	adds	r3, #10
 8005954:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BIT_POS0(feat_config[idx], BMI2_SIG_MOT_FEAT_EN, enable);
 8005956:	7fbb      	ldrb	r3, [r7, #30]
 8005958:	3320      	adds	r3, #32
 800595a:	443b      	add	r3, r7
 800595c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005960:	b25b      	sxtb	r3, r3
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	b25a      	sxtb	r2, r3
 8005968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	b25b      	sxtb	r3, r3
 8005972:	4313      	orrs	r3, r2
 8005974:	b25a      	sxtb	r2, r3
 8005976:	7fbb      	ldrb	r3, [r7, #30]
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	3320      	adds	r3, #32
 800597c:	443b      	add	r3, r7
 800597e:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8005982:	f107 010c 	add.w	r1, r7, #12
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2210      	movs	r2, #16
 800598a:	2030      	movs	r0, #48	@ 0x30
 800598c:	f7fd ff21 	bl	80037d2 <bmi2_set_regs>
 8005990:	4603      	mov	r3, r0
 8005992:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8005994:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10c      	bne.n	80059b6 <set_sig_motion+0xc4>
 800599c:	79fb      	ldrb	r3, [r7, #7]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d109      	bne.n	80059b6 <set_sig_motion+0xc4>
            {
                dev->sens_en_stat |= BMI2_SIG_MOTION_SEL;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80059a8:	f042 0808 	orr.w	r8, r2, #8
 80059ac:	4699      	mov	r9, r3
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 80059b4:	e00b      	b.n	80059ce <set_sig_motion+0xdc>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_SIG_MOTION_SEL;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80059bc:	f022 0408 	bic.w	r4, r2, #8
 80059c0:	461d      	mov	r5, r3
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 80059c8:	e001      	b.n	80059ce <set_sig_motion+0xdc>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80059ca:	23f8      	movs	r3, #248	@ 0xf8
 80059cc:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80059ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080059dc <set_step_activity>:

/*!
 * @brief This internal API is used to enable/disable step activity detection.
 */
static int8_t set_step_activity(uint8_t enable, struct bmi2_dev *dev)
{
 80059dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80059e0:	b088      	sub	sp, #32
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	4603      	mov	r3, r0
 80059e6:	6039      	str	r1, [r7, #0]
 80059e8:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80059ea:	f107 030c 	add.w	r3, r7, #12
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	605a      	str	r2, [r3, #4]
 80059f4:	609a      	str	r2, [r3, #8]
 80059f6:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step activity */
    struct bmi2_feature_config step_act_config = { 0, 0, 0 };
 80059fc:	2300      	movs	r3, #0
 80059fe:	723b      	strb	r3, [r7, #8]
 8005a00:	2300      	movs	r3, #0
 8005a02:	727b      	strb	r3, [r7, #9]
 8005a04:	2300      	movs	r3, #0
 8005a06:	72bb      	strb	r3, [r7, #10]

    /* Search for step activity feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_act_config, BMI2_STEP_ACTIVITY, dev);
 8005a08:	f107 0308 	add.w	r3, r7, #8
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	2108      	movs	r1, #8
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe fb36 	bl	8004082 <bmi2_extract_input_feat_config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8005a1a:	7f7b      	ldrb	r3, [r7, #29]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d04b      	beq.n	8005ab8 <set_step_activity+0xdc>
    {
        /* Get the configuration from the page where step-activity
         * feature resides
         */
        rslt = bmi2_get_feat_config(step_act_config.page, feat_config, dev);
 8005a20:	7a7b      	ldrb	r3, [r7, #9]
 8005a22:	f107 010c 	add.w	r1, r7, #12
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe fa98 	bl	8003f5e <bmi2_get_feat_config>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005a32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d140      	bne.n	8005abc <set_step_activity+0xe0>
        {
            /* Define the offset for enable/disable of step activity */
            idx = step_act_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 8005a3a:	7abb      	ldrb	r3, [r7, #10]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_ACT_FEAT_EN, enable);
 8005a40:	7fbb      	ldrb	r3, [r7, #30]
 8005a42:	3320      	adds	r3, #32
 8005a44:	443b      	add	r3, r7
 8005a46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005a4a:	b25b      	sxtb	r3, r3
 8005a4c:	f023 0320 	bic.w	r3, r3, #32
 8005a50:	b25a      	sxtb	r2, r3
 8005a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a56:	015b      	lsls	r3, r3, #5
 8005a58:	b25b      	sxtb	r3, r3
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	b25b      	sxtb	r3, r3
 8005a60:	4313      	orrs	r3, r2
 8005a62:	b25a      	sxtb	r2, r3
 8005a64:	7fbb      	ldrb	r3, [r7, #30]
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	3320      	adds	r3, #32
 8005a6a:	443b      	add	r3, r7
 8005a6c:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8005a70:	f107 010c 	add.w	r1, r7, #12
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2210      	movs	r2, #16
 8005a78:	2030      	movs	r0, #48	@ 0x30
 8005a7a:	f7fd feaa 	bl	80037d2 <bmi2_set_regs>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8005a82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10c      	bne.n	8005aa4 <set_step_activity+0xc8>
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d109      	bne.n	8005aa4 <set_step_activity+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_ACT_SEL;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005a96:	f442 7880 	orr.w	r8, r2, #256	@ 0x100
 8005a9a:	4699      	mov	r9, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8005aa2:	e00b      	b.n	8005abc <set_step_activity+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_ACT_SEL;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005aaa:	f422 7480 	bic.w	r4, r2, #256	@ 0x100
 8005aae:	461d      	mov	r5, r3
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8005ab6:	e001      	b.n	8005abc <set_step_activity+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8005ab8:	23f8      	movs	r3, #248	@ 0xf8
 8005aba:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005abc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005aca <set_gyro_self_offset_corr>:
/*!
 * @brief This internal API gives an option to enable self-offset correction
 * feature of gyroscope, either internally or by the host.
 */
static int8_t set_gyro_self_offset_corr(uint8_t enable, struct bmi2_dev *dev)
{
 8005aca:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	6039      	str	r1, [r7, #0]
 8005ad6:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005ad8:	f107 030c 	add.w	r3, r7, #12
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	605a      	str	r2, [r3, #4]
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for self-offset correction */
    struct bmi2_feature_config self_off_corr_cfg = { 0, 0, 0 };
 8005aea:	2300      	movs	r3, #0
 8005aec:	723b      	strb	r3, [r7, #8]
 8005aee:	2300      	movs	r3, #0
 8005af0:	727b      	strb	r3, [r7, #9]
 8005af2:	2300      	movs	r3, #0
 8005af4:	72bb      	strb	r3, [r7, #10]

    /* Search for self-offset correction and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&self_off_corr_cfg, BMI2_GYRO_SELF_OFF, dev);
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	2122      	movs	r1, #34	@ 0x22
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fabf 	bl	8004082 <bmi2_extract_input_feat_config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8005b08:	7f7b      	ldrb	r3, [r7, #29]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d04a      	beq.n	8005ba4 <set_gyro_self_offset_corr+0xda>
    {
        /* Get the configuration from the page where self-offset
         * correction feature resides
         */
        rslt = bmi2_get_feat_config(self_off_corr_cfg.page, feat_config, dev);
 8005b0e:	7a7b      	ldrb	r3, [r7, #9]
 8005b10:	f107 010c 	add.w	r1, r7, #12
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe fa21 	bl	8003f5e <bmi2_get_feat_config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005b20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d13f      	bne.n	8005ba8 <set_gyro_self_offset_corr+0xde>
        {
            /* Define the offset for enable/disable of self-offset correction */
            idx = self_off_corr_cfg.start_addr;
 8005b28:	7abb      	ldrb	r3, [r7, #10]
 8005b2a:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_GYR_SELF_OFF_CORR_FEAT_EN, enable);
 8005b2c:	7fbb      	ldrb	r3, [r7, #30]
 8005b2e:	3320      	adds	r3, #32
 8005b30:	443b      	add	r3, r7
 8005b32:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005b36:	b25b      	sxtb	r3, r3
 8005b38:	f023 0302 	bic.w	r3, r3, #2
 8005b3c:	b25a      	sxtb	r2, r3
 8005b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	b25b      	sxtb	r3, r3
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	b25b      	sxtb	r3, r3
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	b25a      	sxtb	r2, r3
 8005b50:	7fbb      	ldrb	r3, [r7, #30]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	3320      	adds	r3, #32
 8005b56:	443b      	add	r3, r7
 8005b58:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8005b5c:	f107 010c 	add.w	r1, r7, #12
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2210      	movs	r2, #16
 8005b64:	2030      	movs	r0, #48	@ 0x30
 8005b66:	f7fd fe34 	bl	80037d2 <bmi2_set_regs>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8005b6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10c      	bne.n	8005b90 <set_gyro_self_offset_corr+0xc6>
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d109      	bne.n	8005b90 <set_gyro_self_offset_corr+0xc6>
            {
                dev->sens_en_stat |= BMI2_GYRO_SELF_OFF_SEL;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005b82:	4690      	mov	r8, r2
 8005b84:	f043 0904 	orr.w	r9, r3, #4
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8005b8e:	e00b      	b.n	8005ba8 <set_gyro_self_offset_corr+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_GYRO_SELF_OFF_SEL;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005b96:	4614      	mov	r4, r2
 8005b98:	f023 0504 	bic.w	r5, r3, #4
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8005ba2:	e001      	b.n	8005ba8 <set_gyro_self_offset_corr+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8005ba4:	23f8      	movs	r3, #248	@ 0xf8
 8005ba6:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005ba8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3720      	adds	r7, #32
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005bb6 <set_wrist_gesture>:

/*!
 * @brief This internal API enables the wrist gesture feature.
 */
static int8_t set_wrist_gesture(uint8_t enable, struct bmi2_dev *dev)
{
 8005bb6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	6039      	str	r1, [r7, #0]
 8005bc2:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005bc4:	f107 030c 	add.w	r3, r7, #12
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_cfg = { 0, 0, 0 };
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	723b      	strb	r3, [r7, #8]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	727b      	strb	r3, [r7, #9]
 8005bde:	2300      	movs	r3, #0
 8005be0:	72bb      	strb	r3, [r7, #10]

    /* Search for wrist gesture and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_cfg, BMI2_WRIST_GESTURE, dev);
 8005be2:	f107 0308 	add.w	r3, r7, #8
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	2113      	movs	r1, #19
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fa49 	bl	8004082 <bmi2_extract_input_feat_config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8005bf4:	7f7b      	ldrb	r3, [r7, #29]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d04a      	beq.n	8005c90 <set_wrist_gesture+0xda>
    {
        /* Get the configuration from the page where wrist gesture feature resides */
        rslt = bmi2_get_feat_config(wrist_gest_cfg.page, feat_config, dev);
 8005bfa:	7a7b      	ldrb	r3, [r7, #9]
 8005bfc:	f107 010c 	add.w	r1, r7, #12
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fe f9ab 	bl	8003f5e <bmi2_get_feat_config>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005c0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d13f      	bne.n	8005c94 <set_wrist_gesture+0xde>
        {
            /* Define the offset for enable/disable of wrist gesture */
            idx = wrist_gest_cfg.start_addr;
 8005c14:	7abb      	ldrb	r3, [r7, #10]
 8005c16:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_WRIST_GEST_FEAT_EN, enable);
 8005c18:	7fbb      	ldrb	r3, [r7, #30]
 8005c1a:	3320      	adds	r3, #32
 8005c1c:	443b      	add	r3, r7
 8005c1e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005c22:	b25b      	sxtb	r3, r3
 8005c24:	f023 0320 	bic.w	r3, r3, #32
 8005c28:	b25a      	sxtb	r2, r3
 8005c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2e:	015b      	lsls	r3, r3, #5
 8005c30:	b25b      	sxtb	r3, r3
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	b25b      	sxtb	r3, r3
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	b25a      	sxtb	r2, r3
 8005c3c:	7fbb      	ldrb	r3, [r7, #30]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	3320      	adds	r3, #32
 8005c42:	443b      	add	r3, r7
 8005c44:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8005c48:	f107 010c 	add.w	r1, r7, #12
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2210      	movs	r2, #16
 8005c50:	2030      	movs	r0, #48	@ 0x30
 8005c52:	f7fd fdbe 	bl	80037d2 <bmi2_set_regs>
 8005c56:	4603      	mov	r3, r0
 8005c58:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8005c5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10c      	bne.n	8005c7c <set_wrist_gesture+0xc6>
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d109      	bne.n	8005c7c <set_wrist_gesture+0xc6>
            {
                dev->sens_en_stat |= BMI2_WRIST_GEST_SEL;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005c6e:	f442 2800 	orr.w	r8, r2, #524288	@ 0x80000
 8005c72:	4699      	mov	r9, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8005c7a:	e00b      	b.n	8005c94 <set_wrist_gesture+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_WRIST_GEST_SEL;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005c82:	f422 2400 	bic.w	r4, r2, #524288	@ 0x80000
 8005c86:	461d      	mov	r5, r3
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8005c8e:	e001      	b.n	8005c94 <set_wrist_gesture+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8005c90:	23f8      	movs	r3, #248	@ 0xf8
 8005c92:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005c94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3720      	adds	r7, #32
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005ca2 <set_wrist_wear_wake_up>:

/*!
 * @brief This internal API enables the wrist wear wake up feature.
 */
static int8_t set_wrist_wear_wake_up(uint8_t enable, struct bmi2_dev *dev)
{
 8005ca2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005cb0:	f107 030c 	add.w	r3, r7, #12
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	609a      	str	r2, [r3, #8]
 8005cbc:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake up */
    struct bmi2_feature_config wrist_wake_up_cfg = { 0, 0, 0 };
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	723b      	strb	r3, [r7, #8]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	727b      	strb	r3, [r7, #9]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	72bb      	strb	r3, [r7, #10]

    /* Search for wrist wear wake up and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_cfg, BMI2_WRIST_WEAR_WAKE_UP, dev);
 8005cce:	f107 0308 	add.w	r3, r7, #8
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	2114      	movs	r1, #20
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe f9d3 	bl	8004082 <bmi2_extract_input_feat_config>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8005ce0:	7f7b      	ldrb	r3, [r7, #29]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d04a      	beq.n	8005d7c <set_wrist_wear_wake_up+0xda>
    {
        /* Get the configuration from the page where wrist wear wake up
         * feature resides
         */
        rslt = bmi2_get_feat_config(wrist_wake_up_cfg.page, feat_config, dev);
 8005ce6:	7a7b      	ldrb	r3, [r7, #9]
 8005ce8:	f107 010c 	add.w	r1, r7, #12
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe f935 	bl	8003f5e <bmi2_get_feat_config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005cf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d13f      	bne.n	8005d80 <set_wrist_wear_wake_up+0xde>
        {
            /* Define the offset for enable/disable of wrist wear wake up */
            idx = wrist_wake_up_cfg.start_addr;
 8005d00:	7abb      	ldrb	r3, [r7, #10]
 8005d02:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_WRIST_WEAR_WAKE_UP_FEAT_EN, enable);
 8005d04:	7fbb      	ldrb	r3, [r7, #30]
 8005d06:	3320      	adds	r3, #32
 8005d08:	443b      	add	r3, r7
 8005d0a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005d0e:	b25b      	sxtb	r3, r3
 8005d10:	f023 0310 	bic.w	r3, r3, #16
 8005d14:	b25a      	sxtb	r2, r3
 8005d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	b25b      	sxtb	r3, r3
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	b25b      	sxtb	r3, r3
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b25a      	sxtb	r2, r3
 8005d28:	7fbb      	ldrb	r3, [r7, #30]
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	3320      	adds	r3, #32
 8005d2e:	443b      	add	r3, r7
 8005d30:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8005d34:	f107 010c 	add.w	r1, r7, #12
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2210      	movs	r2, #16
 8005d3c:	2030      	movs	r0, #48	@ 0x30
 8005d3e:	f7fd fd48 	bl	80037d2 <bmi2_set_regs>
 8005d42:	4603      	mov	r3, r0
 8005d44:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8005d46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10c      	bne.n	8005d68 <set_wrist_wear_wake_up+0xc6>
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d109      	bne.n	8005d68 <set_wrist_wear_wake_up+0xc6>
            {
                dev->sens_en_stat |= BMI2_WRIST_WEAR_WAKE_UP_SEL;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005d5a:	f442 1880 	orr.w	r8, r2, #1048576	@ 0x100000
 8005d5e:	4699      	mov	r9, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8005d66:	e00b      	b.n	8005d80 <set_wrist_wear_wake_up+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_WRIST_WEAR_WAKE_UP_SEL;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005d6e:	f422 1480 	bic.w	r4, r2, #1048576	@ 0x100000
 8005d72:	461d      	mov	r5, r3
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8005d7a:	e001      	b.n	8005d80 <set_wrist_wear_wake_up+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8005d7c:	23f8      	movs	r3, #248	@ 0xf8
 8005d7e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005d80:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3720      	adds	r7, #32
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005d8e <set_gyro_user_gain>:
/*!
 * @brief This internal API is used to enable/disable gyroscope user gain
 * feature.
 */
static int8_t set_gyro_user_gain(uint8_t enable, struct bmi2_dev *dev)
{
 8005d8e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	4603      	mov	r3, r0
 8005d98:	6039      	str	r1, [r7, #0]
 8005d9a:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005d9c:	f107 030c 	add.w	r3, r7, #12
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for gyroscope user gain */
    struct bmi2_feature_config gyr_user_gain_cfg = { 0, 0, 0 };
 8005dae:	2300      	movs	r3, #0
 8005db0:	723b      	strb	r3, [r7, #8]
 8005db2:	2300      	movs	r3, #0
 8005db4:	727b      	strb	r3, [r7, #9]
 8005db6:	2300      	movs	r3, #0
 8005db8:	72bb      	strb	r3, [r7, #10]

    /* Search for user gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&gyr_user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 8005dba:	f107 0308 	add.w	r3, r7, #8
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	2109      	movs	r1, #9
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fe f95d 	bl	8004082 <bmi2_extract_input_feat_config>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8005dcc:	7f7b      	ldrb	r3, [r7, #29]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d04b      	beq.n	8005e6a <set_gyro_user_gain+0xdc>
    {
        /* Get the configuration from the page where user gain feature resides */
        rslt = bmi2_get_feat_config(gyr_user_gain_cfg.page, feat_config, dev);
 8005dd2:	7a7b      	ldrb	r3, [r7, #9]
 8005dd4:	f107 010c 	add.w	r1, r7, #12
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe f8bf 	bl	8003f5e <bmi2_get_feat_config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005de4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d140      	bne.n	8005e6e <set_gyro_user_gain+0xe0>
        {
            /* Define the offset for enable/disable of user gain */
            idx = gyr_user_gain_cfg.start_addr + BMI2_GYR_USER_GAIN_FEAT_EN_OFFSET;
 8005dec:	7abb      	ldrb	r3, [r7, #10]
 8005dee:	3305      	adds	r3, #5
 8005df0:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_FEAT_EN, enable);
 8005df2:	7fbb      	ldrb	r3, [r7, #30]
 8005df4:	3320      	adds	r3, #32
 8005df6:	443b      	add	r3, r7
 8005df8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005dfc:	b25b      	sxtb	r3, r3
 8005dfe:	f023 0308 	bic.w	r3, r3, #8
 8005e02:	b25a      	sxtb	r2, r3
 8005e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	b25b      	sxtb	r3, r3
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	b25b      	sxtb	r3, r3
 8005e12:	4313      	orrs	r3, r2
 8005e14:	b25a      	sxtb	r2, r3
 8005e16:	7fbb      	ldrb	r3, [r7, #30]
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	3320      	adds	r3, #32
 8005e1c:	443b      	add	r3, r7
 8005e1e:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8005e22:	f107 010c 	add.w	r1, r7, #12
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2210      	movs	r2, #16
 8005e2a:	2030      	movs	r0, #48	@ 0x30
 8005e2c:	f7fd fcd1 	bl	80037d2 <bmi2_set_regs>
 8005e30:	4603      	mov	r3, r0
 8005e32:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8005e34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10c      	bne.n	8005e56 <set_gyro_user_gain+0xc8>
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d109      	bne.n	8005e56 <set_gyro_user_gain+0xc8>
            {
                dev->sens_en_stat |= BMI2_GYRO_GAIN_UPDATE_SEL;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005e48:	f442 7800 	orr.w	r8, r2, #512	@ 0x200
 8005e4c:	4699      	mov	r9, r3
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8005e54:	e00b      	b.n	8005e6e <set_gyro_user_gain+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_GYRO_GAIN_UPDATE_SEL;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005e5c:	f422 7400 	bic.w	r4, r2, #512	@ 0x200
 8005e60:	461d      	mov	r5, r3
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8005e68:	e001      	b.n	8005e6e <set_gyro_user_gain+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8005e6a:	23f8      	movs	r3, #248	@ 0xf8
 8005e6c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005e6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005e7c <enable_main_sensors>:

/*!
 * @brief This internal API is used to enable main sensors like accel, gyro, aux and temperature.
 */
static int8_t enable_main_sensors(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8005e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e80:	b08a      	sub	sp, #40	@ 0x28
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8005e88:	617a      	str	r2, [r7, #20]
    int8_t rslt;

    /* Variable to store register values */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8005e8a:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2201      	movs	r2, #1
 8005e92:	207d      	movs	r0, #125	@ 0x7d
 8005e94:	f7fd fc2a 	bl	80036ec <bmi2_get_regs>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMI2_OK)
 8005e9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d158      	bne.n	8005f58 <enable_main_sensors+0xdc>
    {
        /* Enable accelerometer */
        if (sensor_sel & BMI2_ACCEL_SENS_SEL)
 8005ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eaa:	f002 0301 	and.w	r3, r2, #1
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	d006      	beq.n	8005ecc <enable_main_sensors+0x50>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_EN, BMI2_ENABLE);
 8005ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ec2:	f043 0304 	orr.w	r3, r3, #4
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable gyroscope */
        if (sensor_sel & BMI2_GYRO_SENS_SEL)
 8005ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed0:	f002 0302 	and.w	r3, r2, #2
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	d006      	beq.n	8005ef2 <enable_main_sensors+0x76>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_EN, BMI2_ENABLE);
 8005ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ee8:	f043 0302 	orr.w	r3, r3, #2
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable auxiliary sensor */
        if (sensor_sel & BMI2_AUX_SENS_SEL)
 8005ef2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ef6:	f002 0a04 	and.w	sl, r2, #4
 8005efa:	f04f 0b00 	mov.w	fp, #0
 8005efe:	ea5a 030b 	orrs.w	r3, sl, fp
 8005f02:	d006      	beq.n	8005f12 <enable_main_sensors+0x96>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_EN, BMI2_ENABLE);
 8005f04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable temperature sensor */
        if (sensor_sel & BMI2_TEMP_SENS_SEL)
 8005f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f16:	f04f 0800 	mov.w	r8, #0
 8005f1a:	f003 0901 	and.w	r9, r3, #1
 8005f1e:	ea58 0309 	orrs.w	r3, r8, r9
 8005f22:	d006      	beq.n	8005f32 <enable_main_sensors+0xb6>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_TEMP_EN, BMI2_ENABLE);
 8005f24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f28:	f043 0308 	orr.w	r3, r3, #8
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable the sensors that are set in the power control register */
        if (sensor_sel & BMI2_MAIN_SENSORS)
 8005f32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f36:	f002 0407 	and.w	r4, r2, #7
 8005f3a:	f003 0501 	and.w	r5, r3, #1
 8005f3e:	ea54 0305 	orrs.w	r3, r4, r5
 8005f42:	d009      	beq.n	8005f58 <enable_main_sensors+0xdc>
        {
            rslt = bmi2_set_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8005f44:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	207d      	movs	r0, #125	@ 0x7d
 8005f4e:	f7fd fc40 	bl	80037d2 <bmi2_set_regs>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 8005f58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3728      	adds	r7, #40	@ 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005f66 <enable_sensor_features>:

/*!
 * @brief This internal API is used to enable sensor features.
 */
static int8_t enable_sensor_features(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8005f66:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f6a:	b094      	sub	sp, #80	@ 0x50
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8005f72:	63fa      	str	r2, [r7, #60]	@ 0x3c
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    /* Enable sig-motion feature */
    if (sensor_sel & BMI2_SIG_MOTION_SEL)
 8005f7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f7e:	f002 0408 	and.w	r4, r2, #8
 8005f82:	2500      	movs	r5, #0
 8005f84:	ea54 0305 	orrs.w	r3, r4, r5
 8005f88:	d006      	beq.n	8005f98 <enable_sensor_features+0x32>
    {
        rslt = set_sig_motion(BMI2_ENABLE, dev);
 8005f8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	f7ff fcb0 	bl	80058f2 <set_sig_motion>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable any motion feature */
    if (sensor_sel & BMI2_ANY_MOT_SEL)
 8005f98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f9c:	f002 0810 	and.w	r8, r2, #16
 8005fa0:	f04f 0900 	mov.w	r9, #0
 8005fa4:	ea58 0309 	orrs.w	r3, r8, r9
 8005fa8:	d006      	beq.n	8005fb8 <enable_sensor_features+0x52>
    {
        rslt = set_any_motion(BMI2_ENABLE, dev);
 8005faa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fac:	2001      	movs	r0, #1
 8005fae:	f7ff faca 	bl	8005546 <set_any_motion>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable no motion feature */
    if (sensor_sel & BMI2_NO_MOT_SEL)
 8005fb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fbc:	f002 0a20 	and.w	sl, r2, #32
 8005fc0:	f04f 0b00 	mov.w	fp, #0
 8005fc4:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fc8:	d006      	beq.n	8005fd8 <enable_sensor_features+0x72>
    {
        rslt = set_no_motion(BMI2_ENABLE, dev);
 8005fca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fcc:	2001      	movs	r0, #1
 8005fce:	f7ff fb2e 	bl	800562e <set_no_motion>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step detector feature */
    if (sensor_sel & BMI2_STEP_DETECT_SEL)
 8005fd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fdc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005fea:	460b      	mov	r3, r1
 8005fec:	4313      	orrs	r3, r2
 8005fee:	d006      	beq.n	8005ffe <enable_sensor_features+0x98>
    {
        rslt = set_step_detector(BMI2_ENABLE, dev);
 8005ff0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	f7ff fb8f 	bl	8005716 <set_step_detector>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step counter feature */
    if (sensor_sel & BMI2_STEP_COUNT_SEL)
 8005ffe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006002:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006006:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006008:	2300      	movs	r3, #0
 800600a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800600c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006010:	460b      	mov	r3, r1
 8006012:	4313      	orrs	r3, r2
 8006014:	d006      	beq.n	8006024 <enable_sensor_features+0xbe>
    {
        rslt = set_step_counter(BMI2_ENABLE, dev);
 8006016:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006018:	2001      	movs	r0, #1
 800601a:	f7ff fbf3 	bl	8005804 <set_step_counter>
 800601e:	4603      	mov	r3, r0
 8006020:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step activity feature */
    if (sensor_sel & BMI2_STEP_ACT_SEL)
 8006024:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006028:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800602c:	623b      	str	r3, [r7, #32]
 800602e:	2300      	movs	r3, #0
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
 8006032:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006036:	460b      	mov	r3, r1
 8006038:	4313      	orrs	r3, r2
 800603a:	d006      	beq.n	800604a <enable_sensor_features+0xe4>
    {
        rslt = set_step_activity(BMI2_ENABLE, dev);
 800603c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800603e:	2001      	movs	r0, #1
 8006040:	f7ff fccc 	bl	80059dc <set_step_activity>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable gyroscope user gain */
    if (sensor_sel & BMI2_GYRO_GAIN_UPDATE_SEL)
 800604a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800604e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	2300      	movs	r3, #0
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800605c:	460b      	mov	r3, r1
 800605e:	4313      	orrs	r3, r2
 8006060:	d006      	beq.n	8006070 <enable_sensor_features+0x10a>
    {
        rslt = set_gyro_user_gain(BMI2_ENABLE, dev);
 8006062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006064:	2001      	movs	r0, #1
 8006066:	f7ff fe92 	bl	8005d8e <set_gyro_user_gain>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable gyroscope self-offset correction feature */
    if (sensor_sel & BMI2_GYRO_SELF_OFF_SEL)
 8006070:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006074:	2100      	movs	r1, #0
 8006076:	6139      	str	r1, [r7, #16]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006082:	460b      	mov	r3, r1
 8006084:	4313      	orrs	r3, r2
 8006086:	d006      	beq.n	8006096 <enable_sensor_features+0x130>
    {
        rslt = set_gyro_self_offset_corr(BMI2_ENABLE, dev);
 8006088:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800608a:	2001      	movs	r0, #1
 800608c:	f7ff fd1d 	bl	8005aca <set_gyro_self_offset_corr>
 8006090:	4603      	mov	r3, r0
 8006092:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable wrist gesture feature for wearable variant */
    if (sensor_sel & BMI2_WRIST_GEST_SEL)
 8006096:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800609a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800609e:	60bb      	str	r3, [r7, #8]
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060a8:	460b      	mov	r3, r1
 80060aa:	4313      	orrs	r3, r2
 80060ac:	d006      	beq.n	80060bc <enable_sensor_features+0x156>
    {
        rslt = set_wrist_gesture(BMI2_ENABLE, dev);
 80060ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060b0:	2001      	movs	r0, #1
 80060b2:	f7ff fd80 	bl	8005bb6 <set_wrist_gesture>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable wrist wear wake-up feature */
    if (sensor_sel & BMI2_WRIST_WEAR_WAKE_UP_SEL)
 80060bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80060c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80060c4:	603b      	str	r3, [r7, #0]
 80060c6:	2300      	movs	r3, #0
 80060c8:	607b      	str	r3, [r7, #4]
 80060ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80060ce:	460b      	mov	r3, r1
 80060d0:	4313      	orrs	r3, r2
 80060d2:	d006      	beq.n	80060e2 <enable_sensor_features+0x17c>
    {
        rslt = set_wrist_wear_wake_up(BMI2_ENABLE, dev);
 80060d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060d6:	2001      	movs	r0, #1
 80060d8:	f7ff fde3 	bl	8005ca2 <set_wrist_wear_wake_up>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    return rslt;
 80060e2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3750      	adds	r7, #80	@ 0x50
 80060ea:	46bd      	mov	sp, r7
 80060ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080060f0 <bmi2_set_i2c_handle>:
#include "i2c.h" // Assuming your I2C_HandleTypeDef hi2c3 is declared here or in main.h

// Static pointer to the I2C handle for BMI270
static I2C_HandleTypeDef* bmi2_i2c_hal_handle = NULL;

void bmi2_set_i2c_handle(I2C_HandleTypeDef* hi2c_bmi) {
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
    bmi2_i2c_hal_handle = hi2c_bmi;
 80060f8:	4a04      	ldr	r2, [pc, #16]	@ (800610c <bmi2_set_i2c_handle+0x1c>)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6013      	str	r3, [r2, #0]
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	2000068c 	.word	0x2000068c

08006110 <bmi2_i2c_read>:

BMI2_INTF_RETURN_TYPE bmi2_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af04      	add	r7, sp, #16
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]
    (void)intf_ptr; // intf_ptr is the I2C handle passed via bmi2_dev structure, we use the static one

    if (bmi2_i2c_hal_handle == NULL) {
 8006120:	4b10      	ldr	r3, [pc, #64]	@ (8006164 <bmi2_i2c_read+0x54>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <bmi2_i2c_read+0x1e>
        return BMI2_E_NULL_PTR; // Or a specific error for uninitialized handle
 8006128:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800612c:	e016      	b.n	800615c <bmi2_i2c_read+0x4c>
    }

    // STM32 HAL I2C read function typically requires the device address to be shifted left by 1
    // The HAL_I2C_Mem_Read function is suitable here.
    if (HAL_I2C_Mem_Read(bmi2_i2c_hal_handle, (uint16_t)(BMI270_I2C_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) == HAL_OK) {
 800612e:	4b0d      	ldr	r3, [pc, #52]	@ (8006164 <bmi2_i2c_read+0x54>)
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	b29a      	uxth	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	b29b      	uxth	r3, r3
 800613a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800613e:	9102      	str	r1, [sp, #8]
 8006140:	9301      	str	r3, [sp, #4]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	2301      	movs	r3, #1
 8006148:	21d0      	movs	r1, #208	@ 0xd0
 800614a:	f004 faf5 	bl	800a738 <HAL_I2C_Mem_Read>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <bmi2_i2c_read+0x48>
        return BMI2_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	e001      	b.n	800615c <bmi2_i2c_read+0x4c>
    } else {
        return BMI2_E_COM_FAIL;
 8006158:	f06f 0301 	mvn.w	r3, #1
    }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	2000068c 	.word	0x2000068c

08006168 <bmi2_i2c_write>:

BMI2_INTF_RETURN_TYPE bmi2_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af04      	add	r7, sp, #16
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]
    (void)intf_ptr; // intf_ptr is the I2C handle passed via bmi2_dev structure, we use the static one

    if (bmi2_i2c_hal_handle == NULL) {
 8006178:	4b10      	ldr	r3, [pc, #64]	@ (80061bc <bmi2_i2c_write+0x54>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <bmi2_i2c_write+0x1e>
        return BMI2_E_NULL_PTR; // Or a specific error for uninitialized handle
 8006180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006184:	e016      	b.n	80061b4 <bmi2_i2c_write+0x4c>
    }
    
    // STM32 HAL I2C write function
    // The HAL_I2C_Mem_Write function is suitable here.
    if (HAL_I2C_Mem_Write(bmi2_i2c_hal_handle, (uint16_t)(BMI270_I2C_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)reg_data, len, HAL_MAX_DELAY) == HAL_OK) {
 8006186:	4b0d      	ldr	r3, [pc, #52]	@ (80061bc <bmi2_i2c_write+0x54>)
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006196:	9102      	str	r1, [sp, #8]
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	2301      	movs	r3, #1
 80061a0:	21d0      	movs	r1, #208	@ 0xd0
 80061a2:	f004 f9b5 	bl	800a510 <HAL_I2C_Mem_Write>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <bmi2_i2c_write+0x48>
        return BMI2_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	e001      	b.n	80061b4 <bmi2_i2c_write+0x4c>
    } else {
        return BMI2_E_COM_FAIL;
 80061b0:	f06f 0301 	mvn.w	r3, #1
    }
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	2000068c 	.word	0x2000068c

080061c0 <bmi2_delay_us>:

void bmi2_delay_us(uint32_t period_us, void *intf_ptr) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
    (void)intf_ptr; // Not used in this simple implementation
    
    // HAL_Delay is in milliseconds. For microsecond delay, a more precise timer is needed.
    // For initial testing, if period_us is large enough:
    if (period_us >= 1000) {
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061d0:	d308      	bcc.n	80061e4 <bmi2_delay_us+0x24>
        HAL_Delay(period_us / 1000);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a18      	ldr	r2, [pc, #96]	@ (8006238 <bmi2_delay_us+0x78>)
 80061d6:	fba2 2303 	umull	r2, r3, r2, r3
 80061da:	099b      	lsrs	r3, r3, #6
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 ff83 	bl	80080e8 <HAL_Delay>
             for (i = 0; i < 10; ++i) { // minimal delay
                __NOP();
             }
        }
    }
 80061e2:	e024      	b.n	800622e <bmi2_delay_us+0x6e>
        uint32_t delay_cycles = period_us * (SystemCoreClock / 1000000U / 5U); // Approximate factor
 80061e4:	4b15      	ldr	r3, [pc, #84]	@ (800623c <bmi2_delay_us+0x7c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a15      	ldr	r2, [pc, #84]	@ (8006240 <bmi2_delay_us+0x80>)
 80061ea:	fba2 2303 	umull	r2, r3, r2, r3
 80061ee:	0d5a      	lsrs	r2, r3, #21
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	fb02 f303 	mul.w	r3, r2, r3
 80061f6:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < delay_cycles; ++i) {
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	e003      	b.n	8006206 <bmi2_delay_us+0x46>
            __NOP();
 80061fe:	bf00      	nop
        for (i = 0; i < delay_cycles; ++i) {
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	429a      	cmp	r2, r3
 800620c:	d3f7      	bcc.n	80061fe <bmi2_delay_us+0x3e>
        if (period_us > 0 && delay_cycles == 0) { // ensure at least minimal delay for very small period_us
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00c      	beq.n	800622e <bmi2_delay_us+0x6e>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d109      	bne.n	800622e <bmi2_delay_us+0x6e>
             for (i = 0; i < 10; ++i) { // minimal delay
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	e003      	b.n	8006228 <bmi2_delay_us+0x68>
                __NOP();
 8006220:	bf00      	nop
             for (i = 0; i < 10; ++i) { // minimal delay
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b09      	cmp	r3, #9
 800622c:	d9f8      	bls.n	8006220 <bmi2_delay_us+0x60>
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	10624dd3 	.word	0x10624dd3
 800623c:	2000007c 	.word	0x2000007c
 8006240:	6b5fca6b 	.word	0x6b5fca6b

08006244 <_ZN7DRV82144initERK14DRV8214_Config>:
 */

#include "drv8214.h"

// Initialize the motor driver with default settings
uint8_t DRV8214::init(const DRV8214_Config& cfg) {
 8006244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]

    // Store the configuration settings
    config = cfg;
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	f102 000c 	add.w	r0, r2, #12
 8006256:	f103 0420 	add.w	r4, r3, #32
 800625a:	4602      	mov	r2, r0
 800625c:	4619      	mov	r1, r3
 800625e:	f8d1 c000 	ldr.w	ip, [r1]
 8006262:	684e      	ldr	r6, [r1, #4]
 8006264:	688d      	ldr	r5, [r1, #8]
 8006266:	68c9      	ldr	r1, [r1, #12]
 8006268:	f8c2 c000 	str.w	ip, [r2]
 800626c:	6056      	str	r6, [r2, #4]
 800626e:	6095      	str	r5, [r2, #8]
 8006270:	60d1      	str	r1, [r2, #12]
 8006272:	3310      	adds	r3, #16
 8006274:	3010      	adds	r0, #16
 8006276:	42a3      	cmp	r3, r4
 8006278:	d1ef      	bne.n	800625a <_ZN7DRV82144initERK14DRV8214_Config+0x16>
 800627a:	4602      	mov	r2, r0
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	6859      	ldr	r1, [r3, #4]
 8006280:	6010      	str	r0, [r2, #0]
 8006282:	6051      	str	r1, [r2, #4]
 8006284:	8919      	ldrh	r1, [r3, #8]
 8006286:	7a9b      	ldrb	r3, [r3, #10]
 8006288:	8111      	strh	r1, [r2, #8]
 800628a:	7293      	strb	r3, [r2, #10]

    disableHbridge(); // Disable H-bridge to be able to configure the driver
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fb6b 	bl	8006968 <_ZN7DRV821414disableHbridgeEv>
    setControlMode(config.control_mode, config.I2CControlled); // Default to PWM control with I2C enabled
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7b59      	ldrb	r1, [r3, #13]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	7b1b      	ldrb	r3, [r3, #12]
 800629a:	461a      	mov	r2, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 f986 	bl	80075ae <_ZN7DRV821414setControlModeE11ControlModeb>
    setRegulationMode(config.regulation_mode); // Default to SPEED regulation
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	7b9b      	ldrb	r3, [r3, #14]
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 f9a3 	bl	80075f4 <_ZN7DRV821417setRegulationModeE14RegulationMode>
    setVoltageRange(config.voltage_range);  // Default to 0 V - 3.92 V range
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	7bdb      	ldrb	r3, [r3, #15]
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fb7a 	bl	80069ae <_ZN7DRV821415setVoltageRangeEb>
    setOvervoltageProtection(config.ovp_enabled); // Default to overvoltage protection enabled
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	7d5b      	ldrb	r3, [r3, #21]
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fb88 	bl	80069d6 <_ZN7DRV821424setOvervoltageProtectionEb>
    setCurrentRegMode(config.current_reg_mode); // Default to no current regulation
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	7e1b      	ldrb	r3, [r3, #24]
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fbd7 	bl	8006a80 <_ZN7DRV821417setCurrentRegModeEh>
    setStallDetection(config.stall_enabled); // Default to stall detection enabled
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	7d1b      	ldrb	r3, [r3, #20]
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fb54 	bl	8006986 <_ZN7DRV821417setStallDetectionEb>
    setStallBehavior(config.stall_behavior); // Default to outputs disabled on stall
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	7d9b      	ldrb	r3, [r3, #22]
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fc09 	bl	8006afc <_ZN7DRV821416setStallBehaviorEb>
    enableStallInterrupt(); // Default to enable stall interrupt
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fc73 	bl	8006bd6 <_ZN7DRV821420enableStallInterruptEv>
    enableCountThresholdInterrupt(); // Default to enable count threshold interrupt
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fc7f 	bl	8006bf4 <_ZN7DRV821429enableCountThresholdInterruptEv>
    setBridgeBehaviorThresholdReached(config.bridge_behavior_thr_reached); // Default to H-bridge stays enabled when RC_CNT exceeds threshold
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	7ddb      	ldrb	r3, [r3, #23]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fc88 	bl	8006c12 <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>
    setInternalVoltageReference(0); // Default to internal voltage reference of 500mV
 8006302:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8006384 <_ZN7DRV82144initERK14DRV8214_Config+0x140>
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fc0c 	bl	8006b24 <_ZN7DRV821427setInternalVoltageReferenceEf>
    setSoftStartStop(config.soft_start_stop_enabled); // Default to soft start/stop disbaled
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fc90 	bl	8006c3a <_ZN7DRV821416setSoftStartStopEb>
    setInrushDuration(config.inrush_duration); // Default to 500 ms
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fb90 	bl	8006a46 <_ZN7DRV821417setInrushDurationEt>
    setResistanceRelatedParameters(); // configure the INV_R and INV_R_SCALE values
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 f8b2 	bl	8007490 <_ZN7DRV821430setResistanceRelatedParametersEv>
    enableRippleCount(); // Default to enable ripple counting
 800632c:	2101      	movs	r1, #1
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 ff66 	bl	8007200 <_ZN7DRV821417enableRippleCountEb>
    resetRippleCounter(); // Default to reset ripple counter
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fb62 	bl	80069fe <_ZN7DRV821418resetRippleCounterEv>
    setKMC(config.kmc); // Default to KMC = 30
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 f922 	bl	800758c <_ZN7DRV82146setKMCEh>
    setKMCScale(config.kmc_scale); // Default to KMC scale factor = 24 x 2^13
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 f863 	bl	800741c <_ZN7DRV821411setKMCScaleEh>
    brakeMotor(true); // Default to brake motor
 8006356:	2101      	movs	r1, #1
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 fa4b 	bl	80077f4 <_ZN7DRV821410brakeMotorEb>
    enableErrorCorrection(false); // Default to disable error correction
 800635e:	2100      	movs	r1, #0
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 ff5e 	bl	8007222 <_ZN7DRV821421enableErrorCorrectionEb>
    if (config.verbose) {printMotorConfig(true);}
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <_ZN7DRV82144initERK14DRV8214_Config+0x134>
 8006370:	2101      	movs	r1, #1
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 fabc 	bl	80078f0 <_ZN7DRV821416printMotorConfigEb>

    return DRV8214_OK; // Return success code
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006382:	bf00      	nop
 8006384:	00000000 	.word	0x00000000

08006388 <_ZN7DRV821416getMotorSpeedRPMEv>:

uint8_t DRV8214::getFaultStatus() {
    return drv8214_i2c_read_register(address, DRV8214_FAULT);
}

uint32_t DRV8214::getMotorSpeedRPM() {
 8006388:	b5b0      	push	{r4, r5, r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
    return ((drv8214_i2c_read_register(address, DRV8214_RC_STATUS1) * config.w_scale * 60) / (2 * M_PI * ripples_per_revolution));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2101      	movs	r1, #1
 8006396:	4618      	mov	r0, r3
 8006398:	f001 fd78 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 800639c:	4603      	mov	r3, r0
 800639e:	461a      	mov	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063a6:	fb03 f202 	mul.w	r2, r3, r2
 80063aa:	4613      	mov	r3, r2
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	1a9b      	subs	r3, r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fa f88e 	bl	80004d4 <__aeabi_i2d>
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	889b      	ldrh	r3, [r3, #4]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fa f887 	bl	80004d4 <__aeabi_i2d>
 80063c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80063f8 <_ZN7DRV821416getMotorSpeedRPMEv+0x70>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f7fa f8ec 	bl	80005a8 <__aeabi_dmul>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4620      	mov	r0, r4
 80063d6:	4629      	mov	r1, r5
 80063d8:	f7fa fa10 	bl	80007fc <__aeabi_ddiv>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4610      	mov	r0, r2
 80063e2:	4619      	mov	r1, r3
 80063e4:	f7fa fbb8 	bl	8000b58 <__aeabi_d2uiz>
 80063e8:	4603      	mov	r3, r0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bdb0      	pop	{r4, r5, r7, pc}
 80063f2:	bf00      	nop
 80063f4:	f3af 8000 	nop.w
 80063f8:	54442d18 	.word	0x54442d18
 80063fc:	401921fb 	.word	0x401921fb

08006400 <_ZN7DRV821416getMotorSpeedRADEv>:

uint16_t DRV8214::getMotorSpeedRAD() {
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
    return ((drv8214_i2c_read_register(address, DRV8214_RC_STATUS1) * config.w_scale) / ripples_per_revolution);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2101      	movs	r1, #1
 800640e:	4618      	mov	r0, r3
 8006410:	f001 fd3c 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006414:	4603      	mov	r3, r0
 8006416:	461a      	mov	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	8892      	ldrh	r2, [r2, #4]
 8006426:	fb93 f3f2 	sdiv	r3, r3, r2
 800642a:	b29b      	uxth	r3, r3
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <_ZN7DRV821421getMotorSpeedShaftRPMEv>:

uint16_t DRV8214::getMotorSpeedShaftRPM() {
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
    return (getMotorSpeedRPM() / motor_reduction_ratio);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff ffa3 	bl	8006388 <_ZN7DRV821416getMotorSpeedRPMEv>
 8006442:	4602      	mov	r2, r0
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	79db      	ldrb	r3, [r3, #7]
 8006448:	fbb2 f3f3 	udiv	r3, r2, r3
 800644c:	b29b      	uxth	r3, r3
}
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <_ZN7DRV821421getMotorSpeedShaftRADEv>:

uint16_t DRV8214::getMotorSpeedShaftRAD() {
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
    return (getMotorSpeedRAD() / motor_reduction_ratio);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff ffce 	bl	8006400 <_ZN7DRV821416getMotorSpeedRADEv>
 8006464:	4603      	mov	r3, r0
 8006466:	461a      	mov	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	79db      	ldrb	r3, [r3, #7]
 800646c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006470:	b29b      	uxth	r3, r3
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <_ZN7DRV821421getMotorSpeedRegisterEv>:

uint8_t DRV8214::getMotorSpeedRegister() {
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_STATUS1);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2101      	movs	r1, #1
 8006488:	4618      	mov	r0, r3
 800648a:	f001 fcff 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 800648e:	4603      	mov	r3, r0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <_ZN7DRV821414getRippleCountEv>:

uint16_t DRV8214::getRippleCount() {
 8006498:	b590      	push	{r4, r7, lr}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
    return (drv8214_i2c_read_register(address, DRV8214_RC_STATUS3) << 8) | drv8214_i2c_read_register(address, DRV8214_RC_STATUS2);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2103      	movs	r1, #3
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 fcf0 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80064ac:	4603      	mov	r3, r0
 80064ae:	b21b      	sxth	r3, r3
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	b21c      	sxth	r4, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2102      	movs	r1, #2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 fce6 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80064c0:	4603      	mov	r3, r0
 80064c2:	b21b      	sxth	r3, r3
 80064c4:	4323      	orrs	r3, r4
 80064c6:	b21b      	sxth	r3, r3
 80064c8:	b29b      	uxth	r3, r3
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd90      	pop	{r4, r7, pc}
	...

080064d4 <_ZN7DRV821415getMotorVoltageEv>:

float DRV8214::getMotorVoltage() {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
    if (config.voltage_range) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	7bdb      	ldrb	r3, [r3, #15]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d016      	beq.n	8006512 <_ZN7DRV821415getMotorVoltageEv+0x3e>
        float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 255.0f) * 3.92f;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2104      	movs	r1, #4
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 fcce 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80064f0:	4603      	mov	r3, r0
 80064f2:	ee07 3a90 	vmov	s15, r3
 80064f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064fa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80065a4 <_ZN7DRV821415getMotorVoltageEv+0xd0>
 80064fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006502:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80065a8 <_ZN7DRV821415getMotorVoltageEv+0xd4>
 8006506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800650a:	edc7 7a03 	vstr	s15, [r7, #12]
        return voltage;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	e040      	b.n	8006594 <_ZN7DRV821415getMotorVoltageEv+0xc0>
    } else {
        if (config.ovp_enabled) {
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	7d5b      	ldrb	r3, [r3, #21]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d026      	beq.n	8006568 <_ZN7DRV821415getMotorVoltageEv+0x94>
            // If OVP is enabled, the maximum voltage is 11 V
            if (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) > 0xB0) {
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2104      	movs	r1, #4
 8006520:	4618      	mov	r0, r3
 8006522:	f001 fcb3 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006526:	4603      	mov	r3, r0
 8006528:	2bb0      	cmp	r3, #176	@ 0xb0
 800652a:	bf8c      	ite	hi
 800652c:	2301      	movhi	r3, #1
 800652e:	2300      	movls	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <_ZN7DRV821415getMotorVoltageEv+0x66>
                return 11.0f;
 8006536:	4b1d      	ldr	r3, [pc, #116]	@ (80065ac <_ZN7DRV821415getMotorVoltageEv+0xd8>)
 8006538:	e02c      	b.n	8006594 <_ZN7DRV821415getMotorVoltageEv+0xc0>
            } else {     // 00h corresponds to 0 V and B0h corresponds to 11 V.
                float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 176.0f) * 11.0f;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2104      	movs	r1, #4
 8006540:	4618      	mov	r0, r3
 8006542:	f001 fca3 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006546:	4603      	mov	r3, r0
 8006548:	ee07 3a90 	vmov	s15, r3
 800654c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006550:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80065b0 <_ZN7DRV821415getMotorVoltageEv+0xdc>
 8006554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006558:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 800655c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006560:	edc7 7a04 	vstr	s15, [r7, #16]
                return voltage;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	e015      	b.n	8006594 <_ZN7DRV821415getMotorVoltageEv+0xc0>
            }
        } else {
            float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 255.0f) * 15.7f;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2104      	movs	r1, #4
 800656e:	4618      	mov	r0, r3
 8006570:	f001 fc8c 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006574:	4603      	mov	r3, r0
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800657e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80065a4 <_ZN7DRV821415getMotorVoltageEv+0xd0>
 8006582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006586:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80065b4 <_ZN7DRV821415getMotorVoltageEv+0xe0>
 800658a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800658e:	edc7 7a05 	vstr	s15, [r7, #20]
            return voltage;
 8006592:	697b      	ldr	r3, [r7, #20]
        }
    }
}
 8006594:	ee07 3a90 	vmov	s15, r3
 8006598:	eeb0 0a67 	vmov.f32	s0, s15
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	437f0000 	.word	0x437f0000
 80065a8:	407ae148 	.word	0x407ae148
 80065ac:	41300000 	.word	0x41300000
 80065b0:	43300000 	.word	0x43300000
 80065b4:	417b3333 	.word	0x417b3333

080065b8 <_ZN7DRV821423getMotorVoltageRegisterEv>:

uint8_t DRV8214::getMotorVoltageRegister() {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_STATUS1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2104      	movs	r1, #4
 80065c6:	4618      	mov	r0, r3
 80065c8:	f001 fc60 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80065cc:	4603      	mov	r3, r0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <_ZN7DRV821415getMotorCurrentEv>:

float DRV8214::getMotorCurrent() {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
    // 00h corresponds to 0 A and C0h corresponds to the maximum value set by the CS_GAIN_SEL bit
    float current = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS2) / 192.0f) * config.MaxCurrent;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2105      	movs	r1, #5
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fc50 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80065ec:	4603      	mov	r3, r0
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065f6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800661c <_ZN7DRV821415getMotorCurrentEv+0x44>
 80065fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006608:	edc7 7a03 	vstr	s15, [r7, #12]
    return current;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	ee07 3a90 	vmov	s15, r3
}
 8006612:	eeb0 0a67 	vmov.f32	s0, s15
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	43400000 	.word	0x43400000

08006620 <_ZN7DRV821423getMotorCurrentRegisterEv>:

uint8_t DRV8214::getMotorCurrentRegister() {
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_STATUS2);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2105      	movs	r1, #5
 800662e:	4618      	mov	r0, r3
 8006630:	f001 fc2c 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006634:	4603      	mov	r3, r0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <_ZN7DRV821412getDutyCycleEv>:

uint8_t DRV8214::getDutyCycle() {
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
    uint8_t dutyCycle = drv8214_i2c_read_register(address, DRV8214_REG_STATUS3) & REG_STATUS3_IN_DUTY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2106      	movs	r1, #6
 800664e:	4618      	mov	r0, r3
 8006650:	f001 fc1c 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006654:	4603      	mov	r3, r0
 8006656:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800665a:	73fb      	strb	r3, [r7, #15]
    return (dutyCycle * 100) / 63; // Convert 6-bit value to percentage
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	2264      	movs	r2, #100	@ 0x64
 8006660:	fb02 f303 	mul.w	r3, r2, r3
 8006664:	4a05      	ldr	r2, [pc, #20]	@ (800667c <_ZN7DRV821412getDutyCycleEv+0x3c>)
 8006666:	fb82 1203 	smull	r1, r2, r2, r3
 800666a:	441a      	add	r2, r3
 800666c:	1152      	asrs	r2, r2, #5
 800666e:	17db      	asrs	r3, r3, #31
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	b2db      	uxtb	r3, r3
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	82082083 	.word	0x82082083

08006680 <_ZN7DRV821410getCONFIG0Ev>:

uint8_t DRV8214::getCONFIG0() {
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_CONFIG0);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2109      	movs	r1, #9
 800668e:	4618      	mov	r0, r3
 8006690:	f001 fbfc 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006694:	4603      	mov	r3, r0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <_ZN7DRV821417getInrushDurationEv>:

uint16_t DRV8214::getInrushDuration() {
 800669e:	b590      	push	{r4, r7, lr}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
    return (drv8214_i2c_read_register(address, DRV8214_CONFIG1) << 8) | drv8214_i2c_read_register(address, DRV8214_CONFIG2);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	210a      	movs	r1, #10
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 fbed 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80066b2:	4603      	mov	r3, r0
 80066b4:	b21b      	sxth	r3, r3
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	b21c      	sxth	r4, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	210b      	movs	r1, #11
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 fbe3 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80066c6:	4603      	mov	r3, r0
 80066c8:	b21b      	sxth	r3, r3
 80066ca:	4323      	orrs	r3, r4
 80066cc:	b21b      	sxth	r3, r3
 80066ce:	b29b      	uxth	r3, r3
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd90      	pop	{r4, r7, pc}

080066d8 <_ZN7DRV821410getCONFIG3Ev>:

uint8_t DRV8214::getCONFIG3() {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_CONFIG3);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	210c      	movs	r1, #12
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 fbd0 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80066ec:	4603      	mov	r3, r0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <_ZN7DRV821410getCONFIG4Ev>:

uint8_t DRV8214::getCONFIG4() {
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_CONFIG4);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	210d      	movs	r1, #13
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fbc1 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 800670a:	4603      	mov	r3, r0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <_ZN7DRV821412getREG_CTRL0Ev>:

uint8_t DRV8214::getREG_CTRL0() {
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL0);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	210e      	movs	r1, #14
 8006722:	4618      	mov	r0, r3
 8006724:	f001 fbb2 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006728:	4603      	mov	r3, r0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <_ZN7DRV821412getREG_CTRL1Ev>:

uint8_t DRV8214::getREG_CTRL1() {
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL1);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	210f      	movs	r1, #15
 8006740:	4618      	mov	r0, r3
 8006742:	f001 fba3 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006746:	4603      	mov	r3, r0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <_ZN7DRV821412getREG_CTRL2Ev>:

uint8_t DRV8214::getREG_CTRL2() {
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL2);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2110      	movs	r1, #16
 800675e:	4618      	mov	r0, r3
 8006760:	f001 fb94 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006764:	4603      	mov	r3, r0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <_ZN7DRV821411getRC_CTRL0Ev>:

uint8_t DRV8214::getRC_CTRL0() {
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL0);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2111      	movs	r1, #17
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fb85 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006782:	4603      	mov	r3, r0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <_ZN7DRV821411getRC_CTRL1Ev>:

uint8_t DRV8214::getRC_CTRL1() {
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL1);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2112      	movs	r1, #18
 800679a:	4618      	mov	r0, r3
 800679c:	f001 fb76 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80067a0:	4603      	mov	r3, r0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <_ZN7DRV821411getRC_CTRL2Ev>:

uint8_t DRV8214::getRC_CTRL2() {
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL2);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2113      	movs	r1, #19
 80067b8:	4618      	mov	r0, r3
 80067ba:	f001 fb67 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80067be:	4603      	mov	r3, r0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <_ZN7DRV821418getRippleThresholdEv>:

uint16_t DRV8214::getRippleThreshold()
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
    uint8_t ctrl2 = drv8214_i2c_read_register(address, DRV8214_RC_CTRL2);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2113      	movs	r1, #19
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 fb58 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80067dc:	4603      	mov	r3, r0
 80067de:	73fb      	strb	r3, [r7, #15]
    uint8_t ctrl1 = drv8214_i2c_read_register(address, DRV8214_RC_CTRL1);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2112      	movs	r1, #18
 80067e6:	4618      	mov	r0, r3
 80067e8:	f001 fb50 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80067ec:	4603      	mov	r3, r0
 80067ee:	73bb      	strb	r3, [r7, #14]
    // top two bits are bits 1..0 in ctrl2
    uint16_t thr_high = (ctrl2 & 0x03) << 8; // shift them to bits 9..8
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067fc:	81bb      	strh	r3, [r7, #12]
    uint16_t thr_low  = ctrl1;               // bits 7..0
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	817b      	strh	r3, [r7, #10]
    return (thr_high | thr_low); 
 8006802:	89ba      	ldrh	r2, [r7, #12]
 8006804:	897b      	ldrh	r3, [r7, #10]
 8006806:	4313      	orrs	r3, r2
 8006808:	b29b      	uxth	r3, r3
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <_ZN7DRV821424getRippleThresholdScaledEv>:

uint16_t DRV8214::getRippleThresholdScaled() {
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
    getRippleThresholdScale();
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f83f 	bl	800689e <_ZN7DRV821423getRippleThresholdScaleEv>
    if (config.ripple_threshold_scale  == 0) { return getRippleThreshold() * 2;  }
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <_ZN7DRV821424getRippleThresholdScaledEv+0x26>
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff ffcc 	bl	80067c8 <_ZN7DRV821418getRippleThresholdEv>
 8006830:	4603      	mov	r3, r0
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	b29b      	uxth	r3, r3
 8006836:	e02e      	b.n	8006896 <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    if (config.ripple_threshold_scale  == 1) { return getRippleThreshold() * 8;  }
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800683e:	2b01      	cmp	r3, #1
 8006840:	d106      	bne.n	8006850 <_ZN7DRV821424getRippleThresholdScaledEv+0x3e>
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff ffc0 	bl	80067c8 <_ZN7DRV821418getRippleThresholdEv>
 8006848:	4603      	mov	r3, r0
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	b29b      	uxth	r3, r3
 800684e:	e022      	b.n	8006896 <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    if (config.ripple_threshold_scale  == 2) { return getRippleThreshold() * 16; }
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006856:	2b02      	cmp	r3, #2
 8006858:	d106      	bne.n	8006868 <_ZN7DRV821424getRippleThresholdScaledEv+0x56>
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff ffb4 	bl	80067c8 <_ZN7DRV821418getRippleThresholdEv>
 8006860:	4603      	mov	r3, r0
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	b29b      	uxth	r3, r3
 8006866:	e016      	b.n	8006896 <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    if (config.ripple_threshold_scale  == 3) { return getRippleThreshold() * 64; }
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800686e:	2b03      	cmp	r3, #3
 8006870:	d106      	bne.n	8006880 <_ZN7DRV821424getRippleThresholdScaledEv+0x6e>
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff ffa8 	bl	80067c8 <_ZN7DRV821418getRippleThresholdEv>
 8006878:	4603      	mov	r3, r0
 800687a:	019b      	lsls	r3, r3, #6
 800687c:	b29b      	uxth	r3, r3
 800687e:	e00a      	b.n	8006896 <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    return getRippleThreshold() * config.ripple_threshold_scale;
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff ffa1 	bl	80067c8 <_ZN7DRV821418getRippleThresholdEv>
 8006886:	4603      	mov	r3, r0
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006890:	fb12 f303 	smulbb	r3, r2, r3
 8006894:	b29b      	uxth	r3, r3
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <_ZN7DRV821423getRippleThresholdScaleEv>:

uint16_t DRV8214::getRippleThresholdScale() {
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
    config.ripple_threshold_scale = (drv8214_i2c_read_register(address, DRV8214_RC_CTRL2) & RC_CTRL2_RC_THR_SCALE) >> 2;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2113      	movs	r1, #19
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 faed 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80068b2:	4603      	mov	r3, r0
 80068b4:	089b      	lsrs	r3, r3, #2
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    return config.ripple_threshold_scale;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <_ZN7DRV82146getKMCEv>:

uint8_t DRV8214::getKMC() {
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL4);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2115      	movs	r1, #21
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 fad3 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 80068e6:	4603      	mov	r3, r0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <_ZN7DRV821411getRC_CTRL6Ev>:

uint8_t DRV8214::getFilterDamping() {
    return (drv8214_i2c_read_register(address, DRV8214_RC_CTRL5) >> 4) & 0x0F;
}

uint8_t DRV8214::getRC_CTRL6() {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL6);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2117      	movs	r1, #23
 80068fe:	4618      	mov	r0, r3
 8006900:	f001 fac4 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006904:	4603      	mov	r3, r0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <_ZN7DRV821411getRC_CTRL7Ev>:

uint8_t DRV8214::getRC_CTRL7() {
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL7);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2118      	movs	r1, #24
 800691c:	4618      	mov	r0, r3
 800691e:	f001 fab5 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006922:	4603      	mov	r3, r0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <_ZN7DRV821411getRC_CTRL8Ev>:

uint8_t DRV8214::getRC_CTRL8() {
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL8);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2119      	movs	r1, #25
 800693a:	4618      	mov	r0, r3
 800693c:	f001 faa6 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8006940:	4603      	mov	r3, r0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <_ZN7DRV821413enableHbridgeEv>:

// --- Control Functions ---
void DRV8214::enableHbridge() {
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OUT, true);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	7818      	ldrb	r0, [r3, #0]
 8006956:	2301      	movs	r3, #1
 8006958:	2280      	movs	r2, #128	@ 0x80
 800695a:	2109      	movs	r1, #9
 800695c:	f001 fada 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <_ZN7DRV821414disableHbridgeEv>:

void DRV8214::disableHbridge() {
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OUT, false);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	7818      	ldrb	r0, [r3, #0]
 8006974:	2300      	movs	r3, #0
 8006976:	2280      	movs	r2, #128	@ 0x80
 8006978:	2109      	movs	r1, #9
 800697a:	f001 facb 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <_ZN7DRV821417setStallDetectionEb>:

void DRV8214::setStallDetection(bool stall_en) {
 8006986:	b580      	push	{r7, lr}
 8006988:	b082      	sub	sp, #8
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	460b      	mov	r3, r1
 8006990:	70fb      	strb	r3, [r7, #3]
    config.stall_enabled = stall_en;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	78fa      	ldrb	r2, [r7, #3]
 8006996:	751a      	strb	r2, [r3, #20]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG0_EN_STALL, stall_en);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	7818      	ldrb	r0, [r3, #0]
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	2220      	movs	r2, #32
 80069a0:	210c      	movs	r1, #12
 80069a2:	f001 fab7 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 80069a6:	bf00      	nop
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <_ZN7DRV821415setVoltageRangeEb>:

void DRV8214::setVoltageRange(bool range) {
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
    config.voltage_range = range;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	78fa      	ldrb	r2, [r7, #3]
 80069be:	73da      	strb	r2, [r3, #15]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_VM_GAIN_SEL, range);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	7818      	ldrb	r0, [r3, #0]
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	2208      	movs	r2, #8
 80069c8:	2109      	movs	r1, #9
 80069ca:	f001 faa3 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <_ZN7DRV821424setOvervoltageProtectionEb>:

void DRV8214::setOvervoltageProtection(bool OVP) {
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
    config.ovp_enabled = OVP;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	78fa      	ldrb	r2, [r7, #3]
 80069e6:	755a      	strb	r2, [r3, #21]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OVP, true);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7818      	ldrb	r0, [r3, #0]
 80069ec:	2301      	movs	r3, #1
 80069ee:	2240      	movs	r2, #64	@ 0x40
 80069f0:	2109      	movs	r1, #9
 80069f2:	f001 fa8f 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <_ZN7DRV821418resetRippleCounterEv>:

void DRV8214::resetRippleCounter() {
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_CLR_CNT, true);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	7818      	ldrb	r0, [r3, #0]
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	2109      	movs	r1, #9
 8006a10:	f001 fa80 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8006a14:	bf00      	nop
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <_ZN7DRV821415resetFaultFlagsEv>:

void DRV8214::resetFaultFlags() {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
    disableHbridge();
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff ff9f 	bl	8006968 <_ZN7DRV821414disableHbridgeEv>
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_CLR_FLT, true);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	7818      	ldrb	r0, [r3, #0]
 8006a2e:	2301      	movs	r3, #1
 8006a30:	2202      	movs	r2, #2
 8006a32:	2109      	movs	r1, #9
 8006a34:	f001 fa6e 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
    enableHbridge();
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff ff86 	bl	800694a <_ZN7DRV821413enableHbridgeEv>
}
 8006a3e:	bf00      	nop
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <_ZN7DRV821417setInrushDurationEt>:

void DRV8214::disableDutyCycleControl() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_DUTY_CTRL, false);
}

void DRV8214::setInrushDuration(uint16_t threshold) {
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	807b      	strh	r3, [r7, #2]
    drv8214_i2c_write_register(address, DRV8214_CONFIG1, (threshold >> 8) & 0xFF);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	7818      	ldrb	r0, [r3, #0]
 8006a56:	887b      	ldrh	r3, [r7, #2]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	210a      	movs	r1, #10
 8006a62:	f001 f9ed 	bl	8007e40 <_Z26drv8214_i2c_write_registerhhh>
    drv8214_i2c_write_register(address, DRV8214_CONFIG2, threshold & 0xFF);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	887a      	ldrh	r2, [r7, #2]
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	210b      	movs	r1, #11
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 f9e5 	bl	8007e40 <_Z26drv8214_i2c_write_registerhhh>
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <_ZN7DRV821417setCurrentRegModeEh>:

void DRV8214::setCurrentRegMode(uint8_t mode) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]

    if (mode > 3) { mode = 3; } // Cap mode to 3
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d901      	bls.n	8006a96 <_ZN7DRV821417setCurrentRegModeEh+0x16>
 8006a92:	2303      	movs	r3, #3
 8006a94:	70fb      	strb	r3, [r7, #3]
    switch (mode){
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d823      	bhi.n	8006ae4 <_ZN7DRV821417setCurrentRegModeEh+0x64>
 8006a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa4 <_ZN7DRV821417setCurrentRegModeEh+0x24>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006ab5 	.word	0x08006ab5
 8006aa8:	08006ac1 	.word	0x08006ac1
 8006aac:	08006acd 	.word	0x08006acd
 8006ab0:	08006ad9 	.word	0x08006ad9
    case 0: // 0b00
        mode = 0x00; // No current regulation at anytime
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 0;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	761a      	strb	r2, [r3, #24]
        break;
 8006abe:	e012      	b.n	8006ae6 <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 1: // 0b01
        mode = 0x40; // Current regulation at all time if stall detection is desabled
 8006ac0:	2340      	movs	r3, #64	@ 0x40
 8006ac2:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 1; // Current regulation during tinrush only if stall detection is enabled
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	761a      	strb	r2, [r3, #24]
        break;       
 8006aca:	e00c      	b.n	8006ae6 <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 2: // 0b10
        mode = 0x80; // Current regulation at all time
 8006acc:	2380      	movs	r3, #128	@ 0x80
 8006ace:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	761a      	strb	r2, [r3, #24]
        break;
 8006ad6:	e006      	b.n	8006ae6 <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 3: // 0b11
        mode = 0xC0; // Current regulation at all time
 8006ad8:	23c0      	movs	r3, #192	@ 0xc0
 8006ada:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 3;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2203      	movs	r2, #3
 8006ae0:	761a      	strb	r2, [r3, #24]
        break;
 8006ae2:	e000      	b.n	8006ae6 <_ZN7DRV821417setCurrentRegModeEh+0x66>
    default:
        break;
 8006ae4:	bf00      	nop
    }
    drv8214_i2c_modify_register_bits(address, DRV8214_CONFIG3, CONFIG3_IMODE, mode);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	7818      	ldrb	r0, [r3, #0]
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	22c0      	movs	r2, #192	@ 0xc0
 8006aee:	210c      	movs	r1, #12
 8006af0:	f001 fa42 	bl	8007f78 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <_ZN7DRV821416setStallBehaviorEb>:

void DRV8214::setStallBehavior(bool behavior) {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
    // The SMODE bit programs the device's response to a stall condition. 
    // When SMODE = 0b, the STALL bit becomes 1b, the outputs are disabled
    // When SMODE = 1b, the STALL bit becomes 1b, but the outputs continue to drive current into the motor
    config.stall_behavior = behavior;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	759a      	strb	r2, [r3, #22]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_SMODE, behavior);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	7818      	ldrb	r0, [r3, #0]
 8006b12:	78fb      	ldrb	r3, [r7, #3]
 8006b14:	2220      	movs	r2, #32
 8006b16:	210c      	movs	r1, #12
 8006b18:	f001 f9fc 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <_ZN7DRV821427setInternalVoltageReferenceEf>:

void DRV8214::setInternalVoltageReference(float reference_voltage) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	ed87 0a00 	vstr	s0, [r7]
    // VVREF must be lower than VVM by at least 1.25 V. The maximum recommended value of VVREF is 3.3 V. 
    // If INT_VREF bit is set to 1b, VVREF is internally selected with a fixed value of 500 mV.
    if (reference_voltage == 0) { 
 8006b30:	edd7 7a00 	vldr	s15, [r7]
 8006b34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b3c:	d10b      	bne.n	8006b56 <_ZN7DRV821427setInternalVoltageReferenceEf+0x32>
        config.Vref = 0.5f; // Default
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8006b44:	611a      	str	r2, [r3, #16]
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, true);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7818      	ldrb	r0, [r3, #0]
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	2210      	movs	r2, #16
 8006b4e:	210c      	movs	r1, #12
 8006b50:	f001 f9e0 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
    } else { 
        config.Vref = reference_voltage;
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, false);
    }
}
 8006b54:	e009      	b.n	8006b6a <_ZN7DRV821427setInternalVoltageReferenceEf+0x46>
        config.Vref = reference_voltage;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	611a      	str	r2, [r3, #16]
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, false);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	7818      	ldrb	r0, [r3, #0]
 8006b60:	2300      	movs	r3, #0
 8006b62:	2210      	movs	r2, #16
 8006b64:	210c      	movs	r1, #12
 8006b66:	f001 f9d5 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <_ZN7DRV821413setI2CControlEb>:

void DRV8214::configureConfig3(uint8_t config3) {
    drv8214_i2c_write_register(address, DRV8214_CONFIG3, config3);
}

void DRV8214::setI2CControl(bool I2CControl) {
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	70fb      	strb	r3, [r7, #3]
    config.I2CControlled = I2CControl;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	731a      	strb	r2, [r3, #12]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_BC, I2CControl);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	7818      	ldrb	r0, [r3, #0]
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	210d      	movs	r1, #13
 8006b8e:	f001 f9c1 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8006b92:	bf00      	nop
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <_ZN7DRV821416enablePWMControlEv>:

void DRV8214::enablePWMControl() {
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_PMODE, true);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	7818      	ldrb	r0, [r3, #0]
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	2208      	movs	r2, #8
 8006baa:	210d      	movs	r1, #13
 8006bac:	f001 f9b2 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <_ZN7DRV821417enablePHENControlEv>:

void DRV8214::enablePHENControl() {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_PMODE, false);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7818      	ldrb	r0, [r3, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2208      	movs	r2, #8
 8006bc8:	210d      	movs	r1, #13
 8006bca:	f001 f9a3 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8006bce:	bf00      	nop
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <_ZN7DRV821420enableStallInterruptEv>:

void DRV8214::enableStallInterrupt() {
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_STALL_REP, true);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	7818      	ldrb	r0, [r3, #0]
 8006be2:	2301      	movs	r3, #1
 8006be4:	2220      	movs	r2, #32
 8006be6:	210d      	movs	r1, #13
 8006be8:	f001 f994 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8006bec:	bf00      	nop
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <_ZN7DRV821429enableCountThresholdInterruptEv>:

void DRV8214::disableStallInterrupt() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_STALL_REP, false);
}

void DRV8214::enableCountThresholdInterrupt() {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register_bits(address, DRV8214_CONFIG4, CONFIG4_RC_REP, 0b10000000);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	7818      	ldrb	r0, [r3, #0]
 8006c00:	2380      	movs	r3, #128	@ 0x80
 8006c02:	22c0      	movs	r2, #192	@ 0xc0
 8006c04:	210d      	movs	r1, #13
 8006c06:	f001 f9b7 	bl	8007f78 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8006c0a:	bf00      	nop
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>:

void DRV8214::disableCountThresholdInterrupt() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_RC_REP, false);
}

void DRV8214::setBridgeBehaviorThresholdReached(bool stops) {
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	70fb      	strb	r3, [r7, #3]
    // stops = 0b: H-bridge stays enabled when RC_CNT exceeds threshold
    // stops = 1b: H-bridge is disabled (High-Z) when RC_CNT exceeds threshold
    config.bridge_behavior_thr_reached = stops; 
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	78fa      	ldrb	r2, [r7, #3]
 8006c22:	75da      	strb	r2, [r3, #23]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_RC_HIZ, stops);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7818      	ldrb	r0, [r3, #0]
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	2111      	movs	r1, #17
 8006c2e:	f001 f971 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <_ZN7DRV821416setSoftStartStopEb>:

void DRV8214::setSoftStartStop(bool enable) {
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_REG_CTRL0, REG_CTRL0_EN_SS, enable);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	7818      	ldrb	r0, [r3, #0]
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	210e      	movs	r1, #14
 8006c50:	f001 f960 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <_ZN7DRV821428setRegulationAndStallCurrentEf>:

void DRV8214::configureControl0(uint8_t control0) {
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL0, control0);
}

void DRV8214::setRegulationAndStallCurrent(float requested_current) {
 8006c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c60:	b0cd      	sub	sp, #308	@ 0x134
 8006c62:	af08      	add	r7, sp, #32
 8006c64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006c6c:	6018      	str	r0, [r3, #0]
 8006c6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c72:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006c76:	ed83 0a00 	vstr	s0, [r3]
    //   1X1b => 5560 μA/A, max current 0.125 A

    uint8_t cs_gain_sel;

    // Clamp very low currents (<0.125 A) to the lowest recommended setting:
    if (requested_current < 0.125f) {
 8006c7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c7e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006c82:	edd3 7a00 	vldr	s15, [r3]
 8006c86:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8006c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c92:	d512      	bpl.n	8006cba <_ZN7DRV821428setRegulationAndStallCurrentEf+0x5e>
        cs_gain_sel = 0b111; // 5560 μA/A, max current 0.125 A
 8006c94:	2307      	movs	r3, #7
 8006c96:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 5560e-6; // Convert μA/A to A/A
 8006c9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a89      	ldr	r2, [pc, #548]	@ (8006ecc <_ZN7DRV821428setRegulationAndStallCurrentEf+0x270>)
 8006ca6:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.125f;
 8006ca8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006cac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 8006cb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8006cb8:	e091      	b.n	8006dde <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 0.25f) {
 8006cba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006cbe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006cc2:	edd3 7a00 	vldr	s15, [r3]
 8006cc6:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8006cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd2:	d512      	bpl.n	8006cfa <_ZN7DRV821428setRegulationAndStallCurrentEf+0x9e>
        cs_gain_sel = 0b110; // 5560 μA/A, max current 0.25 A
 8006cd4:	2306      	movs	r3, #6
 8006cd6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 5560e-6;
 8006cda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006cde:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a79      	ldr	r2, [pc, #484]	@ (8006ecc <_ZN7DRV821428setRegulationAndStallCurrentEf+0x270>)
 8006ce6:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.25f;
 8006ce8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006cec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8006cf6:	625a      	str	r2, [r3, #36]	@ 0x24
 8006cf8:	e071      	b.n	8006dde <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 0.5f) {
 8006cfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006cfe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006d02:	edd3 7a00 	vldr	s15, [r3]
 8006d06:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d12:	d512      	bpl.n	8006d3a <_ZN7DRV821428setRegulationAndStallCurrentEf+0xde>
        cs_gain_sel = 0b011; // 1125 μA/A, max current 0.5 A
 8006d14:	2303      	movs	r3, #3
 8006d16:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 1125e-6;
 8006d1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a6a      	ldr	r2, [pc, #424]	@ (8006ed0 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x274>)
 8006d26:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.5f;
 8006d28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8006d36:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d38:	e051      	b.n	8006dde <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 1.0f) {
 8006d3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006d42:	edd3 7a00 	vldr	s15, [r3]
 8006d46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d52:	d512      	bpl.n	8006d7a <_ZN7DRV821428setRegulationAndStallCurrentEf+0x11e>
        cs_gain_sel = 0b010; // 1125 μA/A, max current 1 A
 8006d54:	2302      	movs	r3, #2
 8006d56:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 1125e-6;
 8006d5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a5a      	ldr	r2, [pc, #360]	@ (8006ed0 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x274>)
 8006d66:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 1.0f;
 8006d68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006d76:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d78:	e031      	b.n	8006dde <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 2.0f) {
 8006d7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d7e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006d82:	edd3 7a00 	vldr	s15, [r3]
 8006d86:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8006d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d92:	d512      	bpl.n	8006dba <_ZN7DRV821428setRegulationAndStallCurrentEf+0x15e>
        cs_gain_sel = 0b001; // 225 μA/A, max current 2 A
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 225e-6;
 8006d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a4b      	ldr	r2, [pc, #300]	@ (8006ed4 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x278>)
 8006da6:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 2.0f;
 8006da8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006dac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006db6:	625a      	str	r2, [r3, #36]	@ 0x24
 8006db8:	e011      	b.n	8006dde <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else {
        // For >= 2.0 A, recommended setting is 000b (max current 4 A).
        // Also clamp above 4 A to the same setting (since 4 A is the top of the recommended range).
        cs_gain_sel = 0b000; // 225 μA/A, max current 4 A
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 225e-6;
 8006dc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006dc4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a42      	ldr	r2, [pc, #264]	@ (8006ed4 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x278>)
 8006dcc:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 4.0f;
 8006dce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006dd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8006ddc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL0, RC_CTRL0_CS_GAIN_SEL, cs_gain_sel);
 8006dde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006de2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	7818      	ldrb	r0, [r3, #0]
 8006dea:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8006dee:	2207      	movs	r2, #7
 8006df0:	2111      	movs	r1, #17
 8006df2:	f001 f8c1 	bl	8007f78 <_Z32drv8214_i2c_modify_register_bitshhhh>

    // Update Itrip calculation with the new scale
    config.Itrip = config.Vref / (Ripropri * config.Aipropri);
 8006df6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006dfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	edd3 6a04 	vldr	s13, [r3, #16]
 8006e04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e08:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	885b      	ldrh	r3, [r3, #2]
 8006e10:	ee07 3a90 	vmov	s15, r3
 8006e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	edd3 7a07 	vldr	s15, [r3, #28]
 8006e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	edc3 7a08 	vstr	s15, [r3, #32]

    if (config.verbose) {
 8006e3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d038      	beq.n	8006ec0 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x264>
        char buffer[256];
        snprintf(buffer, sizeof(buffer), "Requested Itrip = %f A => Chosen CS_GAIN_SEL: 0b%d => Aipropri = %f uA/A => Actual Itrip = %f A\n", requested_current, cs_gain_sel, config.Aipropri, config.Itrip);
 8006e4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	f7f9 fb4e 	bl	80004f8 <__aeabi_f2d>
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	460d      	mov	r5, r1
 8006e60:	f897 610f 	ldrb.w	r6, [r7, #271]	@ 0x10f
 8006e64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7f9 fb41 	bl	80004f8 <__aeabi_f2d>
 8006e76:	4680      	mov	r8, r0
 8006e78:	4689      	mov	r9, r1
 8006e7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7f9 fb36 	bl	80004f8 <__aeabi_f2d>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	f107 000c 	add.w	r0, r7, #12
 8006e94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e98:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8006e9c:	9602      	str	r6, [sp, #8]
 8006e9e:	e9cd 4500 	strd	r4, r5, [sp]
 8006ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8006ed8 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x27c>)
 8006ea4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006ea8:	f009 fb0c 	bl	80104c4 <sniprintf>
        drvPrint(buffer);
 8006eac:	f107 020c 	add.w	r2, r7, #12
 8006eb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006eb4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006eb8:	4611      	mov	r1, r2
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	f000 fef4 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    }
}
 8006ec0:	bf00      	nop
 8006ec2:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ecc:	3bb630a9 	.word	0x3bb630a9
 8006ed0:	3a9374bc 	.word	0x3a9374bc
 8006ed4:	396bedfa 	.word	0x396bedfa
 8006ed8:	080130cc 	.word	0x080130cc
 8006edc:	00000000 	.word	0x00000000

08006ee0 <_ZN7DRV821414setRippleSpeedEt>:

void DRV8214::setRippleSpeed(uint16_t speed) {
 8006ee0:	b5b0      	push	{r4, r5, r7, lr}
 8006ee2:	b0d2      	sub	sp, #328	@ 0x148
 8006ee4:	af04      	add	r7, sp, #16
 8006ee6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006eea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006eee:	6018      	str	r0, [r3, #0]
 8006ef0:	460a      	mov	r2, r1
 8006ef2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ef6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8006efa:	801a      	strh	r2, [r3, #0]
    if (speed > motor_max_rpm) { speed = motor_max_rpm; } // Cap speed to the maximum RPM of the motor
 8006efc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f00:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	891b      	ldrh	r3, [r3, #8]
 8006f08:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006f0c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8006f10:	8812      	ldrh	r2, [r2, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d90a      	bls.n	8006f2c <_ZN7DRV821414setRippleSpeedEt+0x4c>
 8006f16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f1a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8006f1e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006f22:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8006f26:	6812      	ldr	r2, [r2, #0]
 8006f28:	8912      	ldrh	r2, [r2, #8]
 8006f2a:	801a      	strh	r2, [r3, #0]

    // Find the corresponding ripples frequency (Hz) value
    uint32_t ripple_speed = (speed * motor_reduction_ratio * ripples_per_revolution * 2 * M_PI) / 60;
 8006f2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f30:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006f3a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8006f3e:	6812      	ldr	r2, [r2, #0]
 8006f40:	79d2      	ldrb	r2, [r2, #7]
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006f4a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	8892      	ldrh	r2, [r2, #4]
 8006f52:	fb02 f303 	mul.w	r3, r2, r3
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7f9 fabb 	bl	80004d4 <__aeabi_i2d>
 8006f5e:	a36d      	add	r3, pc, #436	@ (adr r3, 8007114 <_ZN7DRV821414setRippleSpeedEt+0x234>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f7f9 fb20 	bl	80005a8 <__aeabi_dmul>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4619      	mov	r1, r3
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	4b64      	ldr	r3, [pc, #400]	@ (8007108 <_ZN7DRV821414setRippleSpeedEt+0x228>)
 8006f76:	f7f9 fc41 	bl	80007fc <__aeabi_ddiv>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4610      	mov	r0, r2
 8006f80:	4619      	mov	r1, r3
 8006f82:	f7f9 fde9 	bl	8000b58 <__aeabi_d2uiz>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    // Define max feasible ripple speed based on 8-bit WSET_VSET and max scaling factor (128)
    const uint16_t MAX_SPEED = 32640; // 255 * 128 = 32640 rad/s
 8006f8c:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 8006f90:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    
    // Cap threshold to the maximum feasible value
    if (ripple_speed > MAX_SPEED) { ripple_speed = MAX_SPEED; }
 8006f94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006f98:	f5b3 4fff 	cmp.w	r3, #32640	@ 0x7f80
 8006f9c:	d903      	bls.n	8006fa6 <_ZN7DRV821414setRippleSpeedEt+0xc6>
 8006f9e:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 8006fa2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    struct ScaleOption {
        uint16_t scale;
        uint8_t bits;
    };

    ScaleOption scaleOptions[] = {
 8006fa6:	4b59      	ldr	r3, [pc, #356]	@ (800710c <_ZN7DRV821414setRippleSpeedEt+0x22c>)
 8006fa8:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 8006fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {64, 0b10},
        {128, 0b11}
    };

    // Find the optimal scaling factor and 10-bit value
    uint16_t WSET_VSET = ripple_speed;
 8006fb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006fb6:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    uint8_t W_SCALE = 0b00;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131

    for (const auto &option : scaleOptions) {
 8006fc0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006fc4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006fc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006fcc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006fd0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006fd4:	3310      	adds	r3, #16
 8006fd6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006fda:	e024      	b.n	8007026 <_ZN7DRV821414setRippleSpeedEt+0x146>
 8006fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006fe0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        if (ripple_speed >= option.scale) {
 8006fe4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d313      	bcc.n	800701c <_ZN7DRV821414setRippleSpeedEt+0x13c>
            WSET_VSET = ripple_speed / option.scale;
 8006ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007000:	fbb3 f3f2 	udiv	r3, r3, r2
 8007004:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
            if (WSET_VSET <= 255) { // Ensure WSET_VSET fits within 8 bits
 8007008:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 800700c:	2bff      	cmp	r3, #255	@ 0xff
 800700e:	d805      	bhi.n	800701c <_ZN7DRV821414setRippleSpeedEt+0x13c>
                W_SCALE = option.bits;
 8007010:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007014:	789b      	ldrb	r3, [r3, #2]
 8007016:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
                break;
 800701a:	e00a      	b.n	8007032 <_ZN7DRV821414setRippleSpeedEt+0x152>
    for (const auto &option : scaleOptions) {
 800701c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007020:	3304      	adds	r3, #4
 8007022:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007026:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800702a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800702e:	429a      	cmp	r2, r3
 8007030:	d1d4      	bne.n	8006fdc <_ZN7DRV821414setRippleSpeedEt+0xfc>
            }
        }
    }
    config.w_scale = scaleOptions[W_SCALE].scale;
 8007032:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800703c:	443b      	add	r3, r7
 800703e:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8007042:	b2da      	uxtb	r2, r3
 8007044:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007048:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    WSET_VSET = WSET_VSET & 0xFF; // Ensure WSET_VSET fits within 8 bits
 8007052:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8007056:	b2db      	uxtb	r3, r3
 8007058:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132

    if (config.verbose) {
 800705c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007060:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800706a:	2b00      	cmp	r3, #0
 800706c:	d02b      	beq.n	80070c6 <_ZN7DRV821414setRippleSpeedEt+0x1e6>
        char buffer[256];  // Adjust the buffer size as needed
        snprintf(buffer, sizeof(buffer), "WSET_VSET: %d | W_SCALE: %d or 0b%d | Effective Target Speed: %d rad/s\n", WSET_VSET, config.w_scale, W_SCALE, WSET_VSET * config.w_scale);
 800706e:	f8b7 4132 	ldrh.w	r4, [r7, #306]	@ 0x132
 8007072:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007076:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007080:	461d      	mov	r5, r3
 8007082:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 8007086:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 800708a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800708e:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8007092:	6809      	ldr	r1, [r1, #0]
 8007094:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 8007098:	fb01 f202 	mul.w	r2, r1, r2
 800709c:	f107 000c 	add.w	r0, r7, #12
 80070a0:	9202      	str	r2, [sp, #8]
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	9500      	str	r5, [sp, #0]
 80070a6:	4623      	mov	r3, r4
 80070a8:	4a19      	ldr	r2, [pc, #100]	@ (8007110 <_ZN7DRV821414setRippleSpeedEt+0x230>)
 80070aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80070ae:	f009 fa09 	bl	80104c4 <sniprintf>
        drvPrint(buffer);
 80070b2:	f107 020c 	add.w	r2, r7, #12
 80070b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80070be:	4611      	mov	r1, r2
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	f000 fdf1 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    }
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, WSET_VSET);
 80070c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070ca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	210f      	movs	r1, #15
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 feb0 	bl	8007e40 <_Z26drv8214_i2c_write_registerhhh>
    drv8214_i2c_modify_register_bits(address, DRV8214_REG_CTRL0, REG_CTRL0_W_SCALE, W_SCALE);
 80070e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	7818      	ldrb	r0, [r3, #0]
 80070ec:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 80070f0:	2203      	movs	r2, #3
 80070f2:	210e      	movs	r1, #14
 80070f4:	f000 ff40 	bl	8007f78 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 80070f8:	bf00      	nop
 80070fa:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80070fe:	46bd      	mov	sp, r7
 8007100:	bdb0      	pop	{r4, r5, r7, pc}
 8007102:	bf00      	nop
 8007104:	f3af 8000 	nop.w
 8007108:	404e0000 	.word	0x404e0000
 800710c:	08013178 	.word	0x08013178
 8007110:	08013130 	.word	0x08013130
 8007114:	54442d18 	.word	0x54442d18
 8007118:	400921fb 	.word	0x400921fb

0800711c <_ZN7DRV821415setVoltageSpeedEf>:

void DRV8214::setVoltageSpeed(float voltage) {
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	ed87 0a02 	vstr	s0, [r7, #8]
    if (voltage < 0.0f) { voltage = 0.0f; } // Ensure voltage is non-negative
 8007128:	edd7 7a02 	vldr	s15, [r7, #8]
 800712c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007134:	d502      	bpl.n	800713c <_ZN7DRV821415setVoltageSpeedEf+0x20>
 8007136:	f04f 0300 	mov.w	r3, #0
 800713a:	60bb      	str	r3, [r7, #8]

    // Depending on the VM_GAIN_SEL bit (voltage_range), clamp and scale accordingly
    if (config.voltage_range) {
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	7bdb      	ldrb	r3, [r3, #15]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d026      	beq.n	8007192 <_ZN7DRV821415setVoltageSpeedEf+0x76>
        // VM_GAIN_SEL = 1 → Range: 0 to 3.92 V
        if (voltage > 3.92f) { voltage = 3.92f; }
 8007144:	edd7 7a02 	vldr	s15, [r7, #8]
 8007148:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80071e8 <_ZN7DRV821415setVoltageSpeedEf+0xcc>
 800714c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007154:	dd01      	ble.n	800715a <_ZN7DRV821415setVoltageSpeedEf+0x3e>
 8007156:	4b25      	ldr	r3, [pc, #148]	@ (80071ec <_ZN7DRV821415setVoltageSpeedEf+0xd0>)
 8007158:	60bb      	str	r3, [r7, #8]
        // Apply formula from table 8-23: WSET_VSET = voltage * (255 / 3.92)
        float scaled = voltage * (255.0f / 3.92f);
 800715a:	edd7 7a02 	vldr	s15, [r7, #8]
 800715e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80071f0 <_ZN7DRV821415setVoltageSpeedEf+0xd4>
 8007162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007166:	edc7 7a05 	vstr	s15, [r7, #20]
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
 800716a:	edd7 7a05 	vldr	s15, [r7, #20]
 800716e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007172:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800717a:	edc7 7a01 	vstr	s15, [r7, #4]
 800717e:	793b      	ldrb	r3, [r7, #4]
 8007180:	74fb      	strb	r3, [r7, #19]
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	7cfa      	ldrb	r2, [r7, #19]
 8007188:	210f      	movs	r1, #15
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fe58 	bl	8007e40 <_Z26drv8214_i2c_write_registerhhh>
        // Apply formula from table 8-23: WSET_VSET = voltage * (255 / 15.7)
        float scaled = voltage * (255.0f / 15.7f);
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
    }
}
 8007190:	e025      	b.n	80071de <_ZN7DRV821415setVoltageSpeedEf+0xc2>
        if (voltage > 15.7f) { voltage = 11.0f; } // Cap voltage to 11 V because of Overvoltage Protection
 8007192:	edd7 7a02 	vldr	s15, [r7, #8]
 8007196:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80071f4 <_ZN7DRV821415setVoltageSpeedEf+0xd8>
 800719a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800719e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a2:	dd01      	ble.n	80071a8 <_ZN7DRV821415setVoltageSpeedEf+0x8c>
 80071a4:	4b14      	ldr	r3, [pc, #80]	@ (80071f8 <_ZN7DRV821415setVoltageSpeedEf+0xdc>)
 80071a6:	60bb      	str	r3, [r7, #8]
        float scaled = voltage * (255.0f / 15.7f);
 80071a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80071ac:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80071fc <_ZN7DRV821415setVoltageSpeedEf+0xe0>
 80071b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071b4:	edc7 7a07 	vstr	s15, [r7, #28]
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
 80071b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80071bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80071c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80071cc:	793b      	ldrb	r3, [r7, #4]
 80071ce:	76fb      	strb	r3, [r7, #27]
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	7efa      	ldrb	r2, [r7, #27]
 80071d6:	210f      	movs	r1, #15
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fe31 	bl	8007e40 <_Z26drv8214_i2c_write_registerhhh>
}
 80071de:	bf00      	nop
 80071e0:	3720      	adds	r7, #32
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	407ae148 	.word	0x407ae148
 80071ec:	407ae148 	.word	0x407ae148
 80071f0:	42821a1f 	.word	0x42821a1f
 80071f4:	417b3333 	.word	0x417b3333
 80071f8:	41300000 	.word	0x41300000
 80071fc:	4181efb2 	.word	0x4181efb2

08007200 <_ZN7DRV821417enableRippleCountEb>:

void DRV8214::configureControl2(uint8_t control2) {
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL2, control2);
}

void DRV8214::enableRippleCount(bool enable) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_EN_RC, enable);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	7818      	ldrb	r0, [r3, #0]
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	2280      	movs	r2, #128	@ 0x80
 8007214:	2111      	movs	r1, #17
 8007216:	f000 fe7d 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <_ZN7DRV821421enableErrorCorrectionEb>:

void DRV8214::enableErrorCorrection(bool enable) {
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_DIS_EC, !enable);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	7818      	ldrb	r0, [r3, #0]
 8007232:	78fb      	ldrb	r3, [r7, #3]
 8007234:	f083 0301 	eor.w	r3, r3, #1
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2240      	movs	r2, #64	@ 0x40
 800723c:	2111      	movs	r1, #17
 800723e:	f000 fe69 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <_ZN7DRV821423setRippleCountThresholdEt>:

void DRV8214::configureRippleCount0(uint8_t ripple0) {
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL0, ripple0);
}

void DRV8214::setRippleCountThreshold(uint16_t threshold) {
 800724c:	b590      	push	{r4, r7, lr}
 800724e:	b0d1      	sub	sp, #324	@ 0x144
 8007250:	af02      	add	r7, sp, #8
 8007252:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007256:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800725a:	6018      	str	r0, [r3, #0]
 800725c:	460a      	mov	r2, r1
 800725e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007262:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8007266:	801a      	strh	r2, [r3, #0]
    // Define max feasible threshold based on 10-bit RC_THR and max scaling factor (64)
    const uint16_t MAX_THRESHOLD = 65535; // 1024 * 64 = 65536
 8007268:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800726c:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    struct ScaleOption {
        uint16_t scale;
        uint8_t bits;
    };

    ScaleOption scaleOptions[] = {
 8007270:	4b5c      	ldr	r3, [pc, #368]	@ (80073e4 <_ZN7DRV821423setRippleCountThresholdEt+0x198>)
 8007272:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 8007276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {16, 0b10},
        {64, 0b11}
    };
    
    // Find the optimal scaling factor and 10-bit value
    uint16_t rc_thr = threshold;
 800727c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007280:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    uint8_t rc_thr_scale_bits = 0b00;
 800728a:	2300      	movs	r3, #0
 800728c:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135

    for (const auto &option : scaleOptions) {
 8007290:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8007294:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8007298:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800729c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80072a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072a4:	3310      	adds	r3, #16
 80072a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80072aa:	e029      	b.n	8007300 <_ZN7DRV821423setRippleCountThresholdEt+0xb4>
 80072ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        if (threshold >= option.scale) {
 80072b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80072be:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80072c2:	8812      	ldrh	r2, [r2, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d316      	bcc.n	80072f6 <_ZN7DRV821423setRippleCountThresholdEt+0xaa>
            rc_thr = threshold / option.scale;
 80072c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80072d2:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80072d6:	8812      	ldrh	r2, [r2, #0]
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
            if (rc_thr < 1024) { // Ensure it fits in 10 bits
 80072e0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80072e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072e8:	d205      	bcs.n	80072f6 <_ZN7DRV821423setRippleCountThresholdEt+0xaa>
                rc_thr_scale_bits = option.bits;
 80072ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80072ee:	789b      	ldrb	r3, [r3, #2]
 80072f0:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
                break;
 80072f4:	e00a      	b.n	800730c <_ZN7DRV821423setRippleCountThresholdEt+0xc0>
    for (const auto &option : scaleOptions) {
 80072f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072fa:	3304      	adds	r3, #4
 80072fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007300:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007304:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007308:	429a      	cmp	r2, r3
 800730a:	d1cf      	bne.n	80072ac <_ZN7DRV821423setRippleCountThresholdEt+0x60>
            }
        }
    }
    if (config.verbose) {
 800730c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007310:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800731a:	2b00      	cmp	r3, #0
 800731c:	d016      	beq.n	800734c <_ZN7DRV821423setRippleCountThresholdEt+0x100>
        char buffer[256];  // Adjust the buffer size as needed
        snprintf(buffer, sizeof(buffer), "RC_THR: %d | RC_THR_SCALE: %d ", rc_thr, rc_thr_scale_bits);
 800731e:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8007322:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8007326:	f107 000c 	add.w	r0, r7, #12
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	4613      	mov	r3, r2
 800732e:	4a2e      	ldr	r2, [pc, #184]	@ (80073e8 <_ZN7DRV821423setRippleCountThresholdEt+0x19c>)
 8007330:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007334:	f009 f8c6 	bl	80104c4 <sniprintf>
        drvPrint(buffer);
 8007338:	f107 020c 	add.w	r2, r7, #12
 800733c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007340:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007344:	4611      	mov	r1, r2
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	f000 fcae 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    }
    config.ripple_threshold = rc_thr;
 800734c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007350:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 800735a:	869a      	strh	r2, [r3, #52]	@ 0x34
    config.ripple_threshold_scale = rc_thr_scale_bits;
 800735c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007360:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 800736a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    // Ensure rc_thr fits within 10 bits
    rc_thr = rc_thr & 0x3FF;
 800736e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8007372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007376:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    
    // Split into lower 8 bits and upper 2 bits
    uint8_t rc_thr_low  = rc_thr & 0xFF;         // bits 7..0
 800737a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800737e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    uint8_t rc_thr_high = (rc_thr >> 8) & 0x03;  // bits 9..8
 8007382:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	b29b      	uxth	r3, r3
 800738a:	b2db      	uxtb	r3, r3
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL1, rc_thr_low);
 8007394:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007398:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 80073a4:	2112      	movs	r1, #18
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fd4a 	bl	8007e40 <_Z26drv8214_i2c_write_registerhhh>
    setRippleThresholdScale(rc_thr_scale_bits);
 80073ac:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 80073b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80073b8:	4611      	mov	r1, r2
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	f000 f816 	bl	80073ec <_ZN7DRV821423setRippleThresholdScaleEh>
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_RC_THR_HIGH, rc_thr_high);
 80073c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	7818      	ldrb	r0, [r3, #0]
 80073cc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80073d0:	2203      	movs	r2, #3
 80073d2:	2113      	movs	r1, #19
 80073d4:	f000 fdd0 	bl	8007f78 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 80073d8:	bf00      	nop
 80073da:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd90      	pop	{r4, r7, pc}
 80073e2:	bf00      	nop
 80073e4:	080131a8 	.word	0x080131a8
 80073e8:	08013188 	.word	0x08013188

080073ec <_ZN7DRV821423setRippleThresholdScaleEh>:

void DRV8214::setRippleThresholdScale(uint8_t scale) {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
    scale = scale & 0x03;
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	70fb      	strb	r3, [r7, #3]
    scale = scale << 2; //make sure the 2 bits of scale are placed on bit 2 and 3
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_RC_THR_SCALE, scale);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	7818      	ldrb	r0, [r3, #0]
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	220c      	movs	r2, #12
 800740e:	2113      	movs	r1, #19
 8007410:	f000 fdb2 	bl	8007f78 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <_ZN7DRV821411setKMCScaleEh>:

void DRV8214::setKMCScale(uint8_t scale) {
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
    scale = scale << 4; //make sure the 2 bits of scale are placed on bit 4 and 5
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_KMC_SCALE, scale);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	7818      	ldrb	r0, [r3, #0]
 8007432:	78fb      	ldrb	r3, [r7, #3]
 8007434:	2230      	movs	r2, #48	@ 0x30
 8007436:	2113      	movs	r1, #19
 8007438:	f000 fd9e 	bl	8007f78 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <_ZN7DRV821425setMotorInverseResistanceEh>:

void DRV8214::setMotorInverseResistance(uint8_t resistance) {
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL3, resistance);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	78fa      	ldrb	r2, [r7, #3]
 8007456:	2114      	movs	r1, #20
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fcf1 	bl	8007e40 <_Z26drv8214_i2c_write_registerhhh>
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <_ZN7DRV821430setMotorInverseResistanceScaleEh>:

void DRV8214::setMotorInverseResistanceScale(uint8_t scale) {
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
    scale = scale << 6; //make sure the 2 bits of scale are placed on bit 6 and 7
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	019b      	lsls	r3, r3, #6
 8007476:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_INV_R_SCALE, scale);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	7818      	ldrb	r0, [r3, #0]
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	22c0      	movs	r2, #192	@ 0xc0
 8007480:	2113      	movs	r1, #19
 8007482:	f000 fd79 	bl	8007f78 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <_ZN7DRV821430setResistanceRelatedParametersEv>:

void DRV8214::setResistanceRelatedParameters() {
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	@ 0x28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
    // Possible values of INV_R_SCALE and corresponding register bit settings
    const uint16_t scaleValues[4] = {2, 64, 1024, 8192};
 8007498:	4a39      	ldr	r2, [pc, #228]	@ (8007580 <_ZN7DRV821430setResistanceRelatedParametersEv+0xf0>)
 800749a:	f107 0310 	add.w	r3, r7, #16
 800749e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074a2:	e883 0003 	stmia.w	r3, {r0, r1}
    const uint8_t scaleBits[4] = {0b00, 0b01, 0b10, 0b11};
 80074a6:	4b37      	ldr	r3, [pc, #220]	@ (8007584 <_ZN7DRV821430setResistanceRelatedParametersEv+0xf4>)
 80074a8:	60fb      	str	r3, [r7, #12]

    // Default values (minimum valid values)
    uint8_t bestScaleBits = 0b00;  // Default to scale 2
 80074aa:	2300      	movs	r3, #0
 80074ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t bestInvR = 1;          // Minimum valid INV_R
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    // Iterate from largest scale to smallest for best resolution
    for (int i = 3; i >= 0; --i)
 80074b6:	2303      	movs	r3, #3
 80074b8:	623b      	str	r3, [r7, #32]
 80074ba:	e03f      	b.n	800753c <_ZN7DRV821430setResistanceRelatedParametersEv+0xac>
    {
        float candidate = scaleValues[i] / motor_internal_resistance;
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	3328      	adds	r3, #40	@ 0x28
 80074c2:	443b      	add	r3, r7
 80074c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80074c8:	461a      	mov	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	799b      	ldrb	r3, [r3, #6]
 80074ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074da:	edc7 7a06 	vstr	s15, [r7, #24]
        float rounded = roundf(candidate);
 80074de:	ed97 0a06 	vldr	s0, [r7, #24]
 80074e2:	f008 fb75 	bl	800fbd0 <roundf>
 80074e6:	ed87 0a07 	vstr	s0, [r7, #28]

        // Ensure the value is at least 1
        if (rounded < 1.0f) {
 80074ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80074ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fa:	d502      	bpl.n	8007502 <_ZN7DRV821430setResistanceRelatedParametersEv+0x72>
            rounded = 1.0f;
 80074fc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007500:	61fb      	str	r3, [r7, #28]
        }

        // If within valid range, select this scale and break
        if (rounded <= 255.0f)
 8007502:	edd7 7a07 	vldr	s15, [r7, #28]
 8007506:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8007588 <_ZN7DRV821430setResistanceRelatedParametersEv+0xf8>
 800750a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800750e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007512:	d810      	bhi.n	8007536 <_ZN7DRV821430setResistanceRelatedParametersEv+0xa6>
        {
            bestScaleBits = scaleBits[i];
 8007514:	f107 020c 	add.w	r2, r7, #12
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	4413      	add	r3, r2
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            bestInvR = static_cast<uint8_t>(rounded);
 8007522:	edd7 7a07 	vldr	s15, [r7, #28]
 8007526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752a:	edc7 7a00 	vstr	s15, [r7]
 800752e:	783b      	ldrb	r3, [r7, #0]
 8007530:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            break;
 8007534:	e005      	b.n	8007542 <_ZN7DRV821430setResistanceRelatedParametersEv+0xb2>
    for (int i = 3; i >= 0; --i)
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	3b01      	subs	r3, #1
 800753a:	623b      	str	r3, [r7, #32]
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	2b00      	cmp	r3, #0
 8007540:	dabc      	bge.n	80074bc <_ZN7DRV821430setResistanceRelatedParametersEv+0x2c>
        }
    }
    config.inv_r = bestInvR;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007548:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    config.inv_r_scale = scaleValues[bestScaleBits];
 800754c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	3328      	adds	r3, #40	@ 0x28
 8007554:	443b      	add	r3, r7
 8007556:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    // Set the selected INV_R and INV_R_SCALE
    setMotorInverseResistanceScale(bestScaleBits);
 800755e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7ff ff7e 	bl	8007466 <_ZN7DRV821430setMotorInverseResistanceScaleEh>
    setMotorInverseResistance(bestInvR);
 800756a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff ff67 	bl	8007444 <_ZN7DRV821425setMotorInverseResistanceEh>
}
 8007576:	bf00      	nop
 8007578:	3728      	adds	r7, #40	@ 0x28
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	080131b8 	.word	0x080131b8
 8007584:	03020100 	.word	0x03020100
 8007588:	437f0000 	.word	0x437f0000

0800758c <_ZN7DRV82146setKMCEh>:

void DRV8214::setKMC(uint8_t factor) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL4, factor);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	78fa      	ldrb	r2, [r7, #3]
 800759e:	2115      	movs	r1, #21
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fc4d 	bl	8007e40 <_Z26drv8214_i2c_write_registerhhh>
}
 80075a6:	bf00      	nop
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <_ZN7DRV821414setControlModeE11ControlModeb>:
void DRV8214::configureRippleCount8(uint8_t ripple8) {
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL8, ripple8);
}

// --- Motor Control Functions ---
void DRV8214::setControlMode(ControlMode mode, bool I2CControl) {
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	70fb      	strb	r3, [r7, #3]
 80075ba:	4613      	mov	r3, r2
 80075bc:	70bb      	strb	r3, [r7, #2]
    config.control_mode = mode;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	78fa      	ldrb	r2, [r7, #3]
 80075c2:	735a      	strb	r2, [r3, #13]
    setI2CControl(I2CControl);
 80075c4:	78bb      	ldrb	r3, [r7, #2]
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff fad2 	bl	8006b72 <_ZN7DRV821413setI2CControlEb>
    switch (mode) {
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <_ZN7DRV821414setControlModeE11ControlModeb+0x2c>
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d004      	beq.n	80075e2 <_ZN7DRV821414setControlModeE11ControlModeb+0x34>
            break;
        case PH_EN:
            enablePHENControl();
            break;
    }
}
 80075d8:	e007      	b.n	80075ea <_ZN7DRV821414setControlModeE11ControlModeb+0x3c>
            enablePWMControl();
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff fadd 	bl	8006b9a <_ZN7DRV821416enablePWMControlEv>
            break;
 80075e0:	e003      	b.n	80075ea <_ZN7DRV821414setControlModeE11ControlModeb+0x3c>
            enablePHENControl();
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff fae8 	bl	8006bb8 <_ZN7DRV821417enablePHENControlEv>
            break;
 80075e8:	bf00      	nop
}
 80075ea:	bf00      	nop
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <_ZN7DRV821417setRegulationModeE14RegulationMode>:

void DRV8214::setRegulationMode(RegulationMode regulation) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
    uint8_t reg_ctrl = 0;  // Default value
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]
    switch (regulation) {
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	2b03      	cmp	r3, #3
 8007608:	d81a      	bhi.n	8007640 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
 800760a:	a201      	add	r2, pc, #4	@ (adr r2, 8007610 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x1c>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007621 	.word	0x08007621
 8007614:	08007627 	.word	0x08007627
 8007618:	0800762d 	.word	0x0800762d
 800761c:	0800763b 	.word	0x0800763b
        case CURRENT_FIXED:
            reg_ctrl = (0b00 << 3);  // Fixed Off-Time Current Regulation
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
            break;
 8007624:	e00c      	b.n	8007640 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case CURRENT_CYCLES:
            reg_ctrl = (0b01 << 3);  // Cycle-By-Cycle Current Regulation
 8007626:	2308      	movs	r3, #8
 8007628:	73fb      	strb	r3, [r7, #15]
            break;
 800762a:	e009      	b.n	8007640 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case SPEED:
            reg_ctrl = (0b10 << 3);  // Speed Regulation
 800762c:	2310      	movs	r3, #16
 800762e:	73fb      	strb	r3, [r7, #15]
            enableRippleCount();
 8007630:	2101      	movs	r1, #1
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff fde4 	bl	8007200 <_ZN7DRV821417enableRippleCountEb>
            break;
 8007638:	e002      	b.n	8007640 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case VOLTAGE:
            reg_ctrl = (0b11 << 3);  // Voltage Regulation
 800763a:	2318      	movs	r3, #24
 800763c:	73fb      	strb	r3, [r7, #15]
            break;
 800763e:	bf00      	nop
    }
    config.regulation_mode = regulation;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	78fa      	ldrb	r2, [r7, #3]
 8007644:	739a      	strb	r2, [r3, #14]
    drv8214_i2c_modify_register_bits(address, DRV8214_REG_CTRL0, REG_CTRL0_REG_CTRL, reg_ctrl);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7818      	ldrb	r0, [r3, #0]
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	2218      	movs	r2, #24
 800764e:	210e      	movs	r1, #14
 8007650:	f000 fc92 	bl	8007f78 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8007654:	bf00      	nop
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <_ZN7DRV821411turnForwardEtff>:

void DRV8214::turnForward(uint16_t speed, float voltage, float requested_current) {
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	460b      	mov	r3, r1
 8007666:	ed87 0a01 	vstr	s0, [r7, #4]
 800766a:	edc7 0a00 	vstr	s1, [r7]
 800766e:	817b      	strh	r3, [r7, #10]
    disableHbridge();
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f7ff f979 	bl	8006968 <_ZN7DRV821414disableHbridgeEv>
    switch (config.regulation_mode) {
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	7b9b      	ldrb	r3, [r3, #14]
 800767a:	2b03      	cmp	r3, #3
 800767c:	d822      	bhi.n	80076c4 <_ZN7DRV821411turnForwardEtff+0x68>
 800767e:	a201      	add	r2, pc, #4	@ (adr r2, 8007684 <_ZN7DRV821411turnForwardEtff+0x28>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	08007695 	.word	0x08007695
 8007688:	080076a1 	.word	0x080076a1
 800768c:	080076ad 	.word	0x080076ad
 8007690:	080076b9 	.word	0x080076b9
        case CURRENT_FIXED: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 8007694:	ed97 0a00 	vldr	s0, [r7]
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7ff fadf 	bl	8006c5c <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 800769e:	e011      	b.n	80076c4 <_ZN7DRV821411turnForwardEtff+0x68>
        case CURRENT_CYCLES: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 80076a0:	ed97 0a00 	vldr	s0, [r7]
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff fad9 	bl	8006c5c <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 80076aa:	e00b      	b.n	80076c4 <_ZN7DRV821411turnForwardEtff+0x68>
        case SPEED: 
            setRippleSpeed(speed);
 80076ac:	897b      	ldrh	r3, [r7, #10]
 80076ae:	4619      	mov	r1, r3
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff fc15 	bl	8006ee0 <_ZN7DRV821414setRippleSpeedEt>
            break;
 80076b6:	e005      	b.n	80076c4 <_ZN7DRV821411turnForwardEtff+0x68>
        case VOLTAGE:
            setVoltageSpeed(voltage);
 80076b8:	ed97 0a01 	vldr	s0, [r7, #4]
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff fd2d 	bl	800711c <_ZN7DRV821415setVoltageSpeedEf>
            break;
 80076c2:	bf00      	nop
    }
    
    if (config.control_mode == PWM) {
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	7b5b      	ldrb	r3, [r3, #13]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10e      	bne.n	80076ea <_ZN7DRV821411turnForwardEtff+0x8e>
        // Table 8-5 => Forward => Input1=1, Input2=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);  // Input1=1
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	7818      	ldrb	r0, [r3, #0]
 80076d0:	2301      	movs	r3, #1
 80076d2:	2202      	movs	r2, #2
 80076d4:	210d      	movs	r1, #13
 80076d6:	f000 fc1d 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false); // Input2=0
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	7818      	ldrb	r0, [r3, #0]
 80076de:	2300      	movs	r3, #0
 80076e0:	2201      	movs	r2, #1
 80076e2:	210d      	movs	r1, #13
 80076e4:	f000 fc16 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
 80076e8:	e00d      	b.n	8007706 <_ZN7DRV821411turnForwardEtff+0xaa>
    } 
    else { // PH/EN mode
        // Table 8-4 => Forward => EN=1, PH=1
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true); // EN=1
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	7818      	ldrb	r0, [r3, #0]
 80076ee:	2301      	movs	r3, #1
 80076f0:	2202      	movs	r2, #2
 80076f2:	210d      	movs	r1, #13
 80076f4:	f000 fc0e 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true); // PH=1
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	7818      	ldrb	r0, [r3, #0]
 80076fc:	2301      	movs	r3, #1
 80076fe:	2201      	movs	r2, #1
 8007700:	210d      	movs	r1, #13
 8007702:	f000 fc07 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
    }
    enableHbridge();
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff f91f 	bl	800694a <_ZN7DRV821413enableHbridgeEv>
    if (config.verbose) { drvPrint("Turning Forward\n"); }
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <_ZN7DRV821411turnForwardEtff+0xc2>
 8007716:	4904      	ldr	r1, [pc, #16]	@ (8007728 <_ZN7DRV821411turnForwardEtff+0xcc>)
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fac5 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	080131c0 	.word	0x080131c0

0800772c <_ZN7DRV821411turnReverseEtff>:

void DRV8214::turnReverse(uint16_t speed, float voltage, float requested_current) {
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	460b      	mov	r3, r1
 8007736:	ed87 0a01 	vstr	s0, [r7, #4]
 800773a:	edc7 0a00 	vstr	s1, [r7]
 800773e:	817b      	strh	r3, [r7, #10]
    enableHbridge();
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff f902 	bl	800694a <_ZN7DRV821413enableHbridgeEv>
    switch (config.regulation_mode) {
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	7b9b      	ldrb	r3, [r3, #14]
 800774a:	2b03      	cmp	r3, #3
 800774c:	d822      	bhi.n	8007794 <_ZN7DRV821411turnReverseEtff+0x68>
 800774e:	a201      	add	r2, pc, #4	@ (adr r2, 8007754 <_ZN7DRV821411turnReverseEtff+0x28>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	08007765 	.word	0x08007765
 8007758:	08007771 	.word	0x08007771
 800775c:	0800777d 	.word	0x0800777d
 8007760:	08007789 	.word	0x08007789
        case CURRENT_FIXED: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 8007764:	ed97 0a00 	vldr	s0, [r7]
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fa77 	bl	8006c5c <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 800776e:	e011      	b.n	8007794 <_ZN7DRV821411turnReverseEtff+0x68>
        case CURRENT_CYCLES: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 8007770:	ed97 0a00 	vldr	s0, [r7]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7ff fa71 	bl	8006c5c <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 800777a:	e00b      	b.n	8007794 <_ZN7DRV821411turnReverseEtff+0x68>
        case SPEED: 
            setRippleSpeed(speed);
 800777c:	897b      	ldrh	r3, [r7, #10]
 800777e:	4619      	mov	r1, r3
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff fbad 	bl	8006ee0 <_ZN7DRV821414setRippleSpeedEt>
            break;
 8007786:	e005      	b.n	8007794 <_ZN7DRV821411turnReverseEtff+0x68>
        case VOLTAGE:
            setVoltageSpeed(voltage);
 8007788:	ed97 0a01 	vldr	s0, [r7, #4]
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7ff fcc5 	bl	800711c <_ZN7DRV821415setVoltageSpeedEf>
            break;
 8007792:	bf00      	nop
    }
    if (config.control_mode == PWM) {
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	7b5b      	ldrb	r3, [r3, #13]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10e      	bne.n	80077ba <_ZN7DRV821411turnReverseEtff+0x8e>
        // Table 8-5 => Reverse => Input1=0, Input2=1
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, false);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	7818      	ldrb	r0, [r3, #0]
 80077a0:	2300      	movs	r3, #0
 80077a2:	2202      	movs	r2, #2
 80077a4:	210d      	movs	r1, #13
 80077a6:	f000 fbb5 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	7818      	ldrb	r0, [r3, #0]
 80077ae:	2301      	movs	r3, #1
 80077b0:	2201      	movs	r2, #1
 80077b2:	210d      	movs	r1, #13
 80077b4:	f000 fbae 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
 80077b8:	e00d      	b.n	80077d6 <_ZN7DRV821411turnReverseEtff+0xaa>
    } 
    else { // PH/EN mode
        // Table 8-4 => Reverse => EN=1, PH=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	7818      	ldrb	r0, [r3, #0]
 80077be:	2301      	movs	r3, #1
 80077c0:	2202      	movs	r2, #2
 80077c2:	210d      	movs	r1, #13
 80077c4:	f000 fba6 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	7818      	ldrb	r0, [r3, #0]
 80077cc:	2300      	movs	r3, #0
 80077ce:	2201      	movs	r2, #1
 80077d0:	210d      	movs	r1, #13
 80077d2:	f000 fb9f 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
    }
    if (config.verbose) { drvPrint("Turning Reverse\n"); }
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <_ZN7DRV821411turnReverseEtff+0xbc>
 80077e0:	4903      	ldr	r1, [pc, #12]	@ (80077f0 <_ZN7DRV821411turnReverseEtff+0xc4>)
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 fa60 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
}
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	080131d4 	.word	0x080131d4

080077f4 <_ZN7DRV821410brakeMotorEb>:

void DRV8214::brakeMotor(bool initial_config) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
    enableHbridge();
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff f8a2 	bl	800694a <_ZN7DRV821413enableHbridgeEv>
    if (config.control_mode == PWM) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7b5b      	ldrb	r3, [r3, #13]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10e      	bne.n	800782c <_ZN7DRV821410brakeMotorEb+0x38>
        // Table 8-5 => Brake => Input1=1, Input2=1 => both outputs low
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	7818      	ldrb	r0, [r3, #0]
 8007812:	2301      	movs	r3, #1
 8007814:	2202      	movs	r2, #2
 8007816:	210d      	movs	r1, #13
 8007818:	f000 fb7c 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7818      	ldrb	r0, [r3, #0]
 8007820:	2301      	movs	r3, #1
 8007822:	2201      	movs	r2, #1
 8007824:	210d      	movs	r1, #13
 8007826:	f000 fb75 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
 800782a:	e00d      	b.n	8007848 <_ZN7DRV821410brakeMotorEb+0x54>
    }
    else { // PH/EN mode
        // Table 8-4 => Brake => EN=0 => outputs go low
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, false);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7818      	ldrb	r0, [r3, #0]
 8007830:	2300      	movs	r3, #0
 8007832:	2202      	movs	r2, #2
 8007834:	210d      	movs	r1, #13
 8007836:	f000 fb6d 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
        // PH can be 0 or 1, the datasheet shows "X" => still brake with EN=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	7818      	ldrb	r0, [r3, #0]
 800783e:	2300      	movs	r3, #0
 8007840:	2201      	movs	r2, #1
 8007842:	210d      	movs	r1, #13
 8007844:	f000 fb66 	bl	8007f14 <_Z27drv8214_i2c_modify_registerhhhh>
    }
    if (config.verbose & !initial_config) { drvPrint("Braking Motor\n"); }
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800784e:	461a      	mov	r2, r3
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	f083 0301 	eor.w	r3, r3, #1
 8007856:	b2db      	uxtb	r3, r3
 8007858:	4013      	ands	r3, r2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <_ZN7DRV821410brakeMotorEb+0x72>
 800785e:	4904      	ldr	r1, [pc, #16]	@ (8007870 <_ZN7DRV821410brakeMotorEb+0x7c>)
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fa21 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	080131e8 	.word	0x080131e8

08007874 <_ZN7DRV821412turnXRipplesEtbbtff>:
        drvPrint("PH/EN mode does not support coast (High-Z) while awake.");
    }
    if (config.verbose) { drvPrint("Coasting Motor\n"); }
}

void DRV8214::turnXRipples(uint16_t ripples_target, bool stops, bool direction, uint16_t speed, float voltage, float requested_current) {
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	4608      	mov	r0, r1
 800787e:	4611      	mov	r1, r2
 8007880:	461a      	mov	r2, r3
 8007882:	ed87 0a01 	vstr	s0, [r7, #4]
 8007886:	edc7 0a00 	vstr	s1, [r7]
 800788a:	4603      	mov	r3, r0
 800788c:	817b      	strh	r3, [r7, #10]
 800788e:	460b      	mov	r3, r1
 8007890:	727b      	strb	r3, [r7, #9]
 8007892:	4613      	mov	r3, r2
 8007894:	723b      	strb	r3, [r7, #8]
    setRippleCountThreshold(ripples_target);
 8007896:	897b      	ldrh	r3, [r7, #10]
 8007898:	4619      	mov	r1, r3
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7ff fcd6 	bl	800724c <_ZN7DRV821423setRippleCountThresholdEt>
    resetRippleCounter();
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f7ff f8ac 	bl	80069fe <_ZN7DRV821418resetRippleCounterEv>
    if (stops != config.bridge_behavior_thr_reached) { setBridgeBehaviorThresholdReached(stops); } // Set bridge behavior if different
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	7ddb      	ldrb	r3, [r3, #23]
 80078aa:	7a7a      	ldrb	r2, [r7, #9]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d004      	beq.n	80078ba <_ZN7DRV821412turnXRipplesEtbbtff+0x46>
 80078b0:	7a7b      	ldrb	r3, [r7, #9]
 80078b2:	4619      	mov	r1, r3
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f7ff f9ac 	bl	8006c12 <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>
    if (direction) { turnForward(speed, voltage, requested_current); } else { turnReverse(speed, voltage, requested_current); }
 80078ba:	7a3b      	ldrb	r3, [r7, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d009      	beq.n	80078d4 <_ZN7DRV821412turnXRipplesEtbbtff+0x60>
 80078c0:	8b3b      	ldrh	r3, [r7, #24]
 80078c2:	edd7 0a00 	vldr	s1, [r7]
 80078c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80078ca:	4619      	mov	r1, r3
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f7ff fec5 	bl	800765c <_ZN7DRV821411turnForwardEtff>
}
 80078d2:	e008      	b.n	80078e6 <_ZN7DRV821412turnXRipplesEtbbtff+0x72>
    if (direction) { turnForward(speed, voltage, requested_current); } else { turnReverse(speed, voltage, requested_current); }
 80078d4:	8b3b      	ldrh	r3, [r7, #24]
 80078d6:	edd7 0a00 	vldr	s1, [r7]
 80078da:	ed97 0a01 	vldr	s0, [r7, #4]
 80078de:	4619      	mov	r1, r3
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7ff ff23 	bl	800772c <_ZN7DRV821411turnReverseEtff>
}
 80078e6:	bf00      	nop
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <_ZN7DRV821416printMotorConfigEb>:

    uint8_t ripples_target = revolutions_target * ripples_per_revolution * motor_reduction_ratio;
    turnXRipples(ripples_target, stops, direction, speed, voltage, requested_current);
}

void DRV8214::printMotorConfig(bool initial_config) {
 80078f0:	b590      	push	{r4, r7, lr}
 80078f2:	b0c7      	sub	sp, #284	@ 0x11c
 80078f4:	af04      	add	r7, sp, #16
 80078f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078fe:	6018      	str	r0, [r3, #0]
 8007900:	460a      	mov	r2, r1
 8007902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007906:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800790a:	701a      	strb	r2, [r3, #0]
    char buffer[256];  // Adjust the buffer size as needed
    
    if (initial_config) {
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d017      	beq.n	800794a <_ZN7DRV821416printMotorConfigEb+0x5a>
        // Using snprintf to safely format the string
        snprintf(buffer, sizeof(buffer), "----- Finished initialized driver %d -----\n", driver_ID);
 800791a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	785b      	ldrb	r3, [r3, #1]
 8007926:	f107 0008 	add.w	r0, r7, #8
 800792a:	4a94      	ldr	r2, [pc, #592]	@ (8007b7c <_ZN7DRV821416printMotorConfigEb+0x28c>)
 800792c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007930:	f008 fdc8 	bl	80104c4 <sniprintf>
        drvPrint(buffer);
 8007934:	f107 0208 	add.w	r2, r7, #8
 8007938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007940:	4611      	mov	r1, r2
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	f000 f9b0 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
 8007948:	e016      	b.n	8007978 <_ZN7DRV821416printMotorConfigEb+0x88>
    } else {
        snprintf(buffer, sizeof(buffer), "DRV8214 Driver %d", driver_ID);
 800794a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	785b      	ldrb	r3, [r3, #1]
 8007956:	f107 0008 	add.w	r0, r7, #8
 800795a:	4a89      	ldr	r2, [pc, #548]	@ (8007b80 <_ZN7DRV821416printMotorConfigEb+0x290>)
 800795c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007960:	f008 fdb0 	bl	80104c4 <sniprintf>
        drvPrint(buffer);
 8007964:	f107 0208 	add.w	r2, r7, #8
 8007968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007970:	4611      	mov	r1, r2
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	f000 f998 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    }
    snprintf(buffer, sizeof(buffer),
        "Address: 0x%02X | Sense Resistor: %d Ohms | Ripples per Rotor Revolution: %d | Ripples per Shaft Revolution: %d\n",
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 8007978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer),
 8007984:	461c      	mov	r4, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 8007986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	885b      	ldrh	r3, [r3, #2]
    snprintf(buffer, sizeof(buffer),
 8007992:	461a      	mov	r2, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	889b      	ldrh	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer),
 80079a0:	4619      	mov	r1, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 80079a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	889b      	ldrh	r3, [r3, #4]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	79db      	ldrb	r3, [r3, #7]
    snprintf(buffer, sizeof(buffer),
 80079bc:	fb00 f303 	mul.w	r3, r0, r3
 80079c0:	f107 0008 	add.w	r0, r7, #8
 80079c4:	9302      	str	r3, [sp, #8]
 80079c6:	9101      	str	r1, [sp, #4]
 80079c8:	9200      	str	r2, [sp, #0]
 80079ca:	4623      	mov	r3, r4
 80079cc:	4a6d      	ldr	r2, [pc, #436]	@ (8007b84 <_ZN7DRV821416printMotorConfigEb+0x294>)
 80079ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80079d2:	f008 fd77 	bl	80104c4 <sniprintf>
    drvPrint(buffer);
 80079d6:	f107 0208 	add.w	r2, r7, #8
 80079da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079e2:	4611      	mov	r1, r2
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	f000 f95f 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
        config.voltage_range ? "Enabled" : "Disabled",
 80079ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	7bdb      	ldrb	r3, [r3, #15]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <_ZN7DRV821416printMotorConfigEb+0x10e>
 80079fa:	4c63      	ldr	r4, [pc, #396]	@ (8007b88 <_ZN7DRV821416printMotorConfigEb+0x298>)
 80079fc:	e000      	b.n	8007a00 <_ZN7DRV821416printMotorConfigEb+0x110>
 80079fe:	4c63      	ldr	r4, [pc, #396]	@ (8007b8c <_ZN7DRV821416printMotorConfigEb+0x29c>)
        config.stall_enabled ? "Enabled" : "Disabled",
 8007a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	7d1b      	ldrb	r3, [r3, #20]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <_ZN7DRV821416printMotorConfigEb+0x124>
 8007a10:	4b5d      	ldr	r3, [pc, #372]	@ (8007b88 <_ZN7DRV821416printMotorConfigEb+0x298>)
 8007a12:	e000      	b.n	8007a16 <_ZN7DRV821416printMotorConfigEb+0x126>
 8007a14:	4b5d      	ldr	r3, [pc, #372]	@ (8007b8c <_ZN7DRV821416printMotorConfigEb+0x29c>)
        config.I2CControlled ? "Yes" : "No",
 8007a16:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8007a1a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	7b12      	ldrb	r2, [r2, #12]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 8007a22:	2a00      	cmp	r2, #0
 8007a24:	d001      	beq.n	8007a2a <_ZN7DRV821416printMotorConfigEb+0x13a>
 8007a26:	4a5a      	ldr	r2, [pc, #360]	@ (8007b90 <_ZN7DRV821416printMotorConfigEb+0x2a0>)
 8007a28:	e000      	b.n	8007a2c <_ZN7DRV821416printMotorConfigEb+0x13c>
 8007a2a:	4a5a      	ldr	r2, [pc, #360]	@ (8007b94 <_ZN7DRV821416printMotorConfigEb+0x2a4>)
        (config.control_mode == PWM) ? "PWM" : "PH_EN");
 8007a2c:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8007a30:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 8007a34:	6809      	ldr	r1, [r1, #0]
 8007a36:	7b49      	ldrb	r1, [r1, #13]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	d101      	bne.n	8007a40 <_ZN7DRV821416printMotorConfigEb+0x150>
 8007a3c:	4956      	ldr	r1, [pc, #344]	@ (8007b98 <_ZN7DRV821416printMotorConfigEb+0x2a8>)
 8007a3e:	e000      	b.n	8007a42 <_ZN7DRV821416printMotorConfigEb+0x152>
 8007a40:	4956      	ldr	r1, [pc, #344]	@ (8007b9c <_ZN7DRV821416printMotorConfigEb+0x2ac>)
 8007a42:	f107 0008 	add.w	r0, r7, #8
 8007a46:	9102      	str	r1, [sp, #8]
 8007a48:	9201      	str	r2, [sp, #4]
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	4a54      	ldr	r2, [pc, #336]	@ (8007ba0 <_ZN7DRV821416printMotorConfigEb+0x2b0>)
 8007a50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007a54:	f008 fd36 	bl	80104c4 <sniprintf>
    drvPrint(buffer);
 8007a58:	f107 0208 	add.w	r2, r7, #8
 8007a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a64:	4611      	mov	r1, r2
 8007a66:	6818      	ldr	r0, [r3, #0]
 8007a68:	f000 f91e 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    
    // Regulation mode details
    drvPrint(" | Regulation: ");
 8007a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a74:	494b      	ldr	r1, [pc, #300]	@ (8007ba4 <_ZN7DRV821416printMotorConfigEb+0x2b4>)
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	f000 f916 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    switch (config.regulation_mode) {
 8007a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	7b9b      	ldrb	r3, [r3, #14]
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d82f      	bhi.n	8007aec <_ZN7DRV821416printMotorConfigEb+0x1fc>
 8007a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a94 <_ZN7DRV821416printMotorConfigEb+0x1a4>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007aa5 	.word	0x08007aa5
 8007a98:	08007ab7 	.word	0x08007ab7
 8007a9c:	08007ac9 	.word	0x08007ac9
 8007aa0:	08007adb 	.word	0x08007adb
        case CURRENT_FIXED:   drvPrint("CURRENT_FIXED\n"); break;
 8007aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aac:	493e      	ldr	r1, [pc, #248]	@ (8007ba8 <_ZN7DRV821416printMotorConfigEb+0x2b8>)
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	f000 f8fa 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
 8007ab4:	e01a      	b.n	8007aec <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case CURRENT_CYCLES:  drvPrint("CURRENT_CYCLES\n"); break;
 8007ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007abe:	493b      	ldr	r1, [pc, #236]	@ (8007bac <_ZN7DRV821416printMotorConfigEb+0x2bc>)
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	f000 f8f1 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
 8007ac6:	e011      	b.n	8007aec <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case SPEED:           drvPrint("SPEED\n"); break;
 8007ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007acc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad0:	4937      	ldr	r1, [pc, #220]	@ (8007bb0 <_ZN7DRV821416printMotorConfigEb+0x2c0>)
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	f000 f8e8 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
 8007ad8:	e008      	b.n	8007aec <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case VOLTAGE:         drvPrint("VOLTAGE\n"); break;
 8007ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae2:	4934      	ldr	r1, [pc, #208]	@ (8007bb4 <_ZN7DRV821416printMotorConfigEb+0x2c4>)
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	f000 f8df 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
 8007aea:	bf00      	nop
    }
    
    snprintf(buffer, sizeof(buffer),
        "Vref: %.3f | Current Reg. Mode: %d | VRange: %s \n",
            config.Vref, config.current_reg_mode,
 8007aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	691b      	ldr	r3, [r3, #16]
    snprintf(buffer, sizeof(buffer),
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7f8 fcfd 	bl	80004f8 <__aeabi_f2d>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
            config.Vref, config.current_reg_mode,
 8007b02:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8007b06:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 8007b0a:	6809      	ldr	r1, [r1, #0]
 8007b0c:	7e09      	ldrb	r1, [r1, #24]
    snprintf(buffer, sizeof(buffer),
 8007b0e:	460c      	mov	r4, r1
            config.voltage_range ? "0V-3.92V" : "0V-15.7V");
 8007b10:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8007b14:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 8007b18:	6809      	ldr	r1, [r1, #0]
 8007b1a:	7bc9      	ldrb	r1, [r1, #15]
    snprintf(buffer, sizeof(buffer),
 8007b1c:	2900      	cmp	r1, #0
 8007b1e:	d001      	beq.n	8007b24 <_ZN7DRV821416printMotorConfigEb+0x234>
 8007b20:	4925      	ldr	r1, [pc, #148]	@ (8007bb8 <_ZN7DRV821416printMotorConfigEb+0x2c8>)
 8007b22:	e000      	b.n	8007b26 <_ZN7DRV821416printMotorConfigEb+0x236>
 8007b24:	4925      	ldr	r1, [pc, #148]	@ (8007bbc <_ZN7DRV821416printMotorConfigEb+0x2cc>)
 8007b26:	f107 0008 	add.w	r0, r7, #8
 8007b2a:	9103      	str	r1, [sp, #12]
 8007b2c:	9402      	str	r4, [sp, #8]
 8007b2e:	e9cd 2300 	strd	r2, r3, [sp]
 8007b32:	4a23      	ldr	r2, [pc, #140]	@ (8007bc0 <_ZN7DRV821416printMotorConfigEb+0x2d0>)
 8007b34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007b38:	f008 fcc4 	bl	80104c4 <sniprintf>
    drvPrint(buffer);
 8007b3c:	f107 0208 	add.w	r2, r7, #8
 8007b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b48:	4611      	mov	r1, r2
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	f000 f8ac 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "Stall Behavior: %s | Bridge Behavior Thr. reached: %s\n",
        config.stall_behavior ? "Drive current" : "Disable outputs",
 8007b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	7d9b      	ldrb	r3, [r3, #22]
    snprintf(buffer, sizeof(buffer),
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <_ZN7DRV821416printMotorConfigEb+0x274>
 8007b60:	4a18      	ldr	r2, [pc, #96]	@ (8007bc4 <_ZN7DRV821416printMotorConfigEb+0x2d4>)
 8007b62:	e000      	b.n	8007b66 <_ZN7DRV821416printMotorConfigEb+0x276>
 8007b64:	4a18      	ldr	r2, [pc, #96]	@ (8007bc8 <_ZN7DRV821416printMotorConfigEb+0x2d8>)
        config.bridge_behavior_thr_reached ? "H-bridge disabled" : "H-bridge stays enabled");
 8007b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	7ddb      	ldrb	r3, [r3, #23]
    snprintf(buffer, sizeof(buffer),
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d02c      	beq.n	8007bd0 <_ZN7DRV821416printMotorConfigEb+0x2e0>
 8007b76:	4b15      	ldr	r3, [pc, #84]	@ (8007bcc <_ZN7DRV821416printMotorConfigEb+0x2dc>)
 8007b78:	e02b      	b.n	8007bd2 <_ZN7DRV821416printMotorConfigEb+0x2e2>
 8007b7a:	bf00      	nop
 8007b7c:	08013240 	.word	0x08013240
 8007b80:	0801326c 	.word	0x0801326c
 8007b84:	08013280 	.word	0x08013280
 8007b88:	080132f4 	.word	0x080132f4
 8007b8c:	080132fc 	.word	0x080132fc
 8007b90:	08013308 	.word	0x08013308
 8007b94:	0801330c 	.word	0x0801330c
 8007b98:	08013310 	.word	0x08013310
 8007b9c:	08013314 	.word	0x08013314
 8007ba0:	0801331c 	.word	0x0801331c
 8007ba4:	08013368 	.word	0x08013368
 8007ba8:	08013378 	.word	0x08013378
 8007bac:	08013388 	.word	0x08013388
 8007bb0:	08013398 	.word	0x08013398
 8007bb4:	080133a0 	.word	0x080133a0
 8007bb8:	080133ac 	.word	0x080133ac
 8007bbc:	080133b8 	.word	0x080133b8
 8007bc0:	080133c4 	.word	0x080133c4
 8007bc4:	080133f8 	.word	0x080133f8
 8007bc8:	08013408 	.word	0x08013408
 8007bcc:	08013418 	.word	0x08013418
 8007bd0:	4b31      	ldr	r3, [pc, #196]	@ (8007c98 <_ZN7DRV821416printMotorConfigEb+0x3a8>)
 8007bd2:	f107 0008 	add.w	r0, r7, #8
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	4a30      	ldr	r2, [pc, #192]	@ (8007c9c <_ZN7DRV821416printMotorConfigEb+0x3ac>)
 8007bdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007be0:	f008 fc70 	bl	80104c4 <sniprintf>
    drvPrint(buffer);
 8007be4:	f107 0208 	add.w	r2, r7, #8
 8007be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	f000 f858 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "Inrush Duration: %d ms | INV_R: %d | INV_R_SCALE: %d\n",
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 8007bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
    snprintf(buffer, sizeof(buffer),
 8007c04:	4619      	mov	r1, r3
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 8007c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    snprintf(buffer, sizeof(buffer),
 8007c14:	461a      	mov	r2, r3
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 8007c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
    snprintf(buffer, sizeof(buffer),
 8007c22:	f107 0008 	add.w	r0, r7, #8
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	9200      	str	r2, [sp, #0]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ca0 <_ZN7DRV821416printMotorConfigEb+0x3b0>)
 8007c2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007c32:	f008 fc47 	bl	80104c4 <sniprintf>
    drvPrint(buffer);
 8007c36:	f107 0208 	add.w	r2, r7, #8
 8007c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c42:	4611      	mov	r1, r2
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	f000 f82f 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "KMC: %d | KMCScale: %d\n",
        config.kmc, config.kmc_scale);
 8007c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
    snprintf(buffer, sizeof(buffer),
 8007c58:	461a      	mov	r2, r3
        config.kmc, config.kmc_scale);
 8007c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
    snprintf(buffer, sizeof(buffer),
 8007c68:	f107 0008 	add.w	r0, r7, #8
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca4 <_ZN7DRV821416printMotorConfigEb+0x3b4>)
 8007c72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007c76:	f008 fc25 	bl	80104c4 <sniprintf>
    drvPrint(buffer);
 8007c7a:	f107 0208 	add.w	r2, r7, #8
 8007c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c86:	4611      	mov	r1, r2
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	f000 f80d 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
}
 8007c8e:	bf00      	nop
 8007c90:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd90      	pop	{r4, r7, pc}
 8007c98:	0801342c 	.word	0x0801342c
 8007c9c:	08013444 	.word	0x08013444
 8007ca0:	0801347c 	.word	0x0801347c
 8007ca4:	080134b4 	.word	0x080134b4

08007ca8 <_ZN7DRV82148drvPrintEPKc>:

void DRV8214::drvPrint(const char* msg) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
    #elif defined(DRV8214_PLATFORM_STM32)
        // Option 1: Using HAL_UART_Transmit directly
        // HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    
        // Option 2: If you have retargeted printf to UART, you could simply use:
        printf("%s", msg);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	4803      	ldr	r0, [pc, #12]	@ (8007cc4 <_ZN7DRV82148drvPrintEPKc+0x1c>)
 8007cb6:	f008 fcfd 	bl	80106b4 <iprintf>
    #endif
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	080134cc 	.word	0x080134cc

08007cc8 <_ZN7DRV821416printFaultStatusEv>:

void DRV8214::printFaultStatus() {
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b0c4      	sub	sp, #272	@ 0x110
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007cd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007cd6:	6018      	str	r0, [r3, #0]
    char buffer[256];  // Buffer for formatted output
    uint8_t faultReg = drv8214_i2c_read_register(address, DRV8214_FAULT);
 8007cd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007cdc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 f8d0 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

    snprintf(buffer, sizeof(buffer), "DRV8214 Driver %d - FAULT Register Status:\n", driver_ID);
 8007cf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007cf6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	f107 000c 	add.w	r0, r7, #12
 8007d02:	4a3e      	ldr	r2, [pc, #248]	@ (8007dfc <_ZN7DRV821416printFaultStatusEv+0x134>)
 8007d04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007d08:	f008 fbdc 	bl	80104c4 <sniprintf>
    drvPrint(buffer);
 8007d0c:	f107 020c 	add.w	r2, r7, #12
 8007d10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007d14:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d18:	4611      	mov	r1, r2
 8007d1a:	6818      	ldr	r0, [r3, #0]
 8007d1c:	f7ff ffc4 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>

    if (faultReg & (1 << 7)) {
 8007d20:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	da08      	bge.n	8007d3a <_ZN7DRV821416printFaultStatusEv+0x72>
        drvPrint(" - FAULT: General fault detected.\n");
 8007d28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007d2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d30:	4933      	ldr	r1, [pc, #204]	@ (8007e00 <_ZN7DRV821416printFaultStatusEv+0x138>)
 8007d32:	6818      	ldr	r0, [r3, #0]
 8007d34:	f7ff ffb8 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
 8007d38:	e007      	b.n	8007d4a <_ZN7DRV821416printFaultStatusEv+0x82>
    } else {
        drvPrint(" - FAULT: No faults detected.\n");
 8007d3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007d3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d42:	4930      	ldr	r1, [pc, #192]	@ (8007e04 <_ZN7DRV821416printFaultStatusEv+0x13c>)
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	f7ff ffaf 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 5)) {
 8007d4a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d007      	beq.n	8007d66 <_ZN7DRV821416printFaultStatusEv+0x9e>
        drvPrint(" - STALL: Motor stall detected.\n");
 8007d56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007d5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d5e:	492a      	ldr	r1, [pc, #168]	@ (8007e08 <_ZN7DRV821416printFaultStatusEv+0x140>)
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	f7ff ffa1 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 4)) {
 8007d66:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007d6a:	f003 0310 	and.w	r3, r3, #16
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d007      	beq.n	8007d82 <_ZN7DRV821416printFaultStatusEv+0xba>
        drvPrint(" - OCP: Overcurrent protection (OCP) event occurred.\n");
 8007d72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007d76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d7a:	4924      	ldr	r1, [pc, #144]	@ (8007e0c <_ZN7DRV821416printFaultStatusEv+0x144>)
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	f7ff ff93 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 3)) {
 8007d82:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d007      	beq.n	8007d9e <_ZN7DRV821416printFaultStatusEv+0xd6>
        drvPrint(" - OVP: Overvoltage protection (OVP) event occurred.\n");
 8007d8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007d92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d96:	491e      	ldr	r1, [pc, #120]	@ (8007e10 <_ZN7DRV821416printFaultStatusEv+0x148>)
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	f7ff ff85 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 2)) {
 8007d9e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007da2:	f003 0304 	and.w	r3, r3, #4
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d007      	beq.n	8007dba <_ZN7DRV821416printFaultStatusEv+0xf2>
        drvPrint(" - TSD: Thermal shutdown (TSD) event occurred.\n");
 8007daa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007dae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007db2:	4918      	ldr	r1, [pc, #96]	@ (8007e14 <_ZN7DRV821416printFaultStatusEv+0x14c>)
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	f7ff ff77 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 1)) {
 8007dba:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <_ZN7DRV821416printFaultStatusEv+0x10e>
        drvPrint(" - NPOR: Device is in power-on reset (NPOR).\n");
 8007dc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007dca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007dce:	4912      	ldr	r1, [pc, #72]	@ (8007e18 <_ZN7DRV821416printFaultStatusEv+0x150>)
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	f7ff ff69 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 0)) {
 8007dd6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d007      	beq.n	8007df2 <_ZN7DRV821416printFaultStatusEv+0x12a>
        drvPrint(" - CNT_DONE: Ripple counting threshold exceeded.\n");
 8007de2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007de6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007dea:	490c      	ldr	r1, [pc, #48]	@ (8007e1c <_ZN7DRV821416printFaultStatusEv+0x154>)
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	f7ff ff5b 	bl	8007ca8 <_ZN7DRV82148drvPrintEPKc>
    }
}
 8007df2:	bf00      	nop
 8007df4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	080134d0 	.word	0x080134d0
 8007e00:	080134fc 	.word	0x080134fc
 8007e04:	08013520 	.word	0x08013520
 8007e08:	08013540 	.word	0x08013540
 8007e0c:	08013564 	.word	0x08013564
 8007e10:	0801359c 	.word	0x0801359c
 8007e14:	080135d4 	.word	0x080135d4
 8007e18:	08013604 	.word	0x08013604
 8007e1c:	08013634 	.word	0x08013634

08007e20 <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef>:
#include "drv8214_platform_i2c.h"

#ifdef DRV8214_PLATFORM_STM32
    static I2C_HandleTypeDef* drv_i2c_handle = NULL; // Static pointer to the I2C handle

    void drv8214_i2c_set_handle(I2C_HandleTypeDef* hi2c) {
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
        drv_i2c_handle = hi2c;
 8007e28:	4a04      	ldr	r2, [pc, #16]	@ (8007e3c <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef+0x1c>)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6013      	str	r3, [r2, #0]
    }
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	20000690 	.word	0x20000690

08007e40 <_Z26drv8214_i2c_write_registerhhh>:
#endif

void drv8214_i2c_write_register(uint8_t device_address, uint8_t reg, uint8_t value) {
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af02      	add	r7, sp, #8
 8007e46:	4603      	mov	r3, r0
 8007e48:	71fb      	strb	r3, [r7, #7]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	71bb      	strb	r3, [r7, #6]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	717b      	strb	r3, [r7, #5]
    if (drv_i2c_handle == NULL) {
 8007e52:	4b0d      	ldr	r3, [pc, #52]	@ (8007e88 <_Z26drv8214_i2c_write_registerhhh+0x48>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d012      	beq.n	8007e80 <_Z26drv8214_i2c_write_registerhhh+0x40>
    Wire.beginTransmission(device_address);
    Wire.write(reg);
    Wire.write(value);
    Wire.endTransmission();
#elif defined(DRV8214_PLATFORM_STM32)
    uint8_t data[2] = { reg, value };
 8007e5a:	79bb      	ldrb	r3, [r7, #6]
 8007e5c:	733b      	strb	r3, [r7, #12]
 8007e5e:	797b      	ldrb	r3, [r7, #5]
 8007e60:	737b      	strb	r3, [r7, #13]
    // STM32 HAL expects the 7-bit address to be shifted left by 1
    HAL_I2C_Master_Transmit(drv_i2c_handle, (uint16_t)(device_address << 1), data, 2, HAL_MAX_DELAY);
 8007e62:	4b09      	ldr	r3, [pc, #36]	@ (8007e88 <_Z26drv8214_i2c_write_registerhhh+0x48>)
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	b299      	uxth	r1, r3
 8007e6e:	f107 020c 	add.w	r2, r7, #12
 8007e72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	2302      	movs	r3, #2
 8007e7a:	f002 f93b 	bl	800a0f4 <HAL_I2C_Master_Transmit>
 8007e7e:	e000      	b.n	8007e82 <_Z26drv8214_i2c_write_registerhhh+0x42>
        return;
 8007e80:	bf00      	nop
    // Add error handling for HAL_StatusTypeDef if needed
#endif
}
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000690 	.word	0x20000690

08007e8c <_Z25drv8214_i2c_read_registerhh>:

uint8_t drv8214_i2c_read_register(uint8_t device_address, uint8_t reg) {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	4603      	mov	r3, r0
 8007e94:	460a      	mov	r2, r1
 8007e96:	71fb      	strb	r3, [r7, #7]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	71bb      	strb	r3, [r7, #6]
    if (drv_i2c_handle == NULL) {
 8007e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8007f10 <_Z25drv8214_i2c_read_registerhh+0x84>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <_Z25drv8214_i2c_read_registerhh+0x1c>
         // Handle error: I2C handle not set
        return 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e02f      	b.n	8007f08 <_Z25drv8214_i2c_read_registerhh+0x7c>
    if (Wire.available()) {
        return Wire.read();
    }
    return 0; // Error or no data
#elif defined(DRV8214_PLATFORM_STM32)
    uint8_t data = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73fb      	strb	r3, [r7, #15]
    // STM32 HAL I2C typically uses separate Transmit then Receive for this,
    // or HAL_I2C_Mem_Read for register-based reads.
    // Your Arduino code pattern translates better to separate Transmit/Receive.
    if (HAL_I2C_Master_Transmit(drv_i2c_handle, (uint16_t)(device_address << 1), &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 8007eac:	4b18      	ldr	r3, [pc, #96]	@ (8007f10 <_Z25drv8214_i2c_read_registerhh+0x84>)
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	b299      	uxth	r1, r3
 8007eb8:	1dba      	adds	r2, r7, #6
 8007eba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f002 f917 	bl	800a0f4 <HAL_I2C_Master_Transmit>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bf0c      	ite	eq
 8007ecc:	2301      	moveq	r3, #1
 8007ece:	2300      	movne	r3, #0
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d017      	beq.n	8007f06 <_Z25drv8214_i2c_read_registerhh+0x7a>
        if (HAL_I2C_Master_Receive(drv_i2c_handle, (uint16_t)(device_address << 1), &data, 1, HAL_MAX_DELAY) == HAL_OK) {
 8007ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8007f10 <_Z25drv8214_i2c_read_registerhh+0x84>)
 8007ed8:	6818      	ldr	r0, [r3, #0]
 8007eda:	79fb      	ldrb	r3, [r7, #7]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	b299      	uxth	r1, r3
 8007ee2:	f107 020f 	add.w	r2, r7, #15
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	2301      	movs	r3, #1
 8007eee:	f002 fa19 	bl	800a324 <HAL_I2C_Master_Receive>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	bf0c      	ite	eq
 8007ef8:	2301      	moveq	r3, #1
 8007efa:	2300      	movne	r3, #0
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <_Z25drv8214_i2c_read_registerhh+0x7a>
            return data;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	e000      	b.n	8007f08 <_Z25drv8214_i2c_read_registerhh+0x7c>
        }
    }
    // Consider using HAL_I2C_Mem_Read for more robustness:
    // HAL_I2C_Mem_Read(drv_i2c_handle, (uint16_t)(device_address << 1), reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
    return 0; // Error
 8007f06:	2300      	movs	r3, #0
#endif
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	20000690 	.word	0x20000690

08007f14 <_Z27drv8214_i2c_modify_registerhhhh>:

void drv8214_i2c_modify_register(uint8_t device_address, uint8_t reg, uint8_t mask, uint8_t enable_bits) {
 8007f14:	b590      	push	{r4, r7, lr}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	461a      	mov	r2, r3
 8007f22:	4623      	mov	r3, r4
 8007f24:	71fb      	strb	r3, [r7, #7]
 8007f26:	4603      	mov	r3, r0
 8007f28:	71bb      	strb	r3, [r7, #6]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	717b      	strb	r3, [r7, #5]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	713b      	strb	r3, [r7, #4]
    uint8_t current_value = drv8214_i2c_read_register(device_address, reg);
 8007f32:	79ba      	ldrb	r2, [r7, #6]
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	4611      	mov	r1, r2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff ffa7 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73fb      	strb	r3, [r7, #15]
    if (enable_bits) {
 8007f42:	793b      	ldrb	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d004      	beq.n	8007f52 <_Z27drv8214_i2c_modify_registerhhhh+0x3e>
        current_value |= mask;  // Set bits
 8007f48:	7bfa      	ldrb	r2, [r7, #15]
 8007f4a:	797b      	ldrb	r3, [r7, #5]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	73fb      	strb	r3, [r7, #15]
 8007f50:	e008      	b.n	8007f64 <_Z27drv8214_i2c_modify_registerhhhh+0x50>
    } else {
        current_value &= ~mask; // Clear bits
 8007f52:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8007f56:	43db      	mvns	r3, r3
 8007f58:	b25a      	sxtb	r2, r3
 8007f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	b25b      	sxtb	r3, r3
 8007f62:	73fb      	strb	r3, [r7, #15]
    }
    drv8214_i2c_write_register(device_address, reg, current_value);
 8007f64:	7bfa      	ldrb	r2, [r7, #15]
 8007f66:	79b9      	ldrb	r1, [r7, #6]
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff ff68 	bl	8007e40 <_Z26drv8214_i2c_write_registerhhh>
}
 8007f70:	bf00      	nop
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd90      	pop	{r4, r7, pc}

08007f78 <_Z32drv8214_i2c_modify_register_bitshhhh>:

void drv8214_i2c_modify_register_bits(uint8_t device_address, uint8_t reg, uint8_t mask, uint8_t new_value) {
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	4611      	mov	r1, r2
 8007f84:	461a      	mov	r2, r3
 8007f86:	4623      	mov	r3, r4
 8007f88:	71fb      	strb	r3, [r7, #7]
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	71bb      	strb	r3, [r7, #6]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	717b      	strb	r3, [r7, #5]
 8007f92:	4613      	mov	r3, r2
 8007f94:	713b      	strb	r3, [r7, #4]
    uint8_t current_value = drv8214_i2c_read_register(device_address, reg);
 8007f96:	79ba      	ldrb	r2, [r7, #6]
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff ff75 	bl	8007e8c <_Z25drv8214_i2c_read_registerhh>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73fb      	strb	r3, [r7, #15]
    current_value = (current_value & ~mask) | (new_value & mask); // Apply new value only to masked bits
 8007fa6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8007faa:	43db      	mvns	r3, r3
 8007fac:	b25a      	sxtb	r2, r3
 8007fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	b25a      	sxtb	r2, r3
 8007fb6:	7939      	ldrb	r1, [r7, #4]
 8007fb8:	797b      	ldrb	r3, [r7, #5]
 8007fba:	400b      	ands	r3, r1
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	b25b      	sxtb	r3, r3
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	73fb      	strb	r3, [r7, #15]
    drv8214_i2c_write_register(device_address, reg, current_value);
 8007fc6:	7bfa      	ldrb	r2, [r7, #15]
 8007fc8:	79b9      	ldrb	r1, [r7, #6]
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff ff37 	bl	8007e40 <_Z26drv8214_i2c_write_registerhhh>
}
 8007fd2:	bf00      	nop
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd90      	pop	{r4, r7, pc}
	...

08007fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8008018 <HAL_Init+0x3c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a0b      	ldr	r2, [pc, #44]	@ (8008018 <HAL_Init+0x3c>)
 8007fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ff0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ff2:	2003      	movs	r0, #3
 8007ff4:	f001 fb4c 	bl	8009690 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007ff8:	200f      	movs	r0, #15
 8007ffa:	f000 f80f 	bl	800801c <HAL_InitTick>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d002      	beq.n	800800a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	71fb      	strb	r3, [r7, #7]
 8008008:	e001      	b.n	800800e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800800a:	f7fa ffd0 	bl	8002fae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800800e:	79fb      	ldrb	r3, [r7, #7]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	58004000 	.word	0x58004000

0800801c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8008028:	4b17      	ldr	r3, [pc, #92]	@ (8008088 <HAL_InitTick+0x6c>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d024      	beq.n	800807a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008030:	f004 fc20 	bl	800c874 <HAL_RCC_GetHCLKFreq>
 8008034:	4602      	mov	r2, r0
 8008036:	4b14      	ldr	r3, [pc, #80]	@ (8008088 <HAL_InitTick+0x6c>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	4619      	mov	r1, r3
 800803c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008040:	fbb3 f3f1 	udiv	r3, r3, r1
 8008044:	fbb2 f3f3 	udiv	r3, r2, r3
 8008048:	4618      	mov	r0, r3
 800804a:	f001 fb54 	bl	80096f6 <HAL_SYSTICK_Config>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10f      	bne.n	8008074 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b0f      	cmp	r3, #15
 8008058:	d809      	bhi.n	800806e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800805a:	2200      	movs	r2, #0
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008062:	f001 fb20 	bl	80096a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008066:	4a09      	ldr	r2, [pc, #36]	@ (800808c <HAL_InitTick+0x70>)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	e007      	b.n	800807e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	73fb      	strb	r3, [r7, #15]
 8008072:	e004      	b.n	800807e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
 8008078:	e001      	b.n	800807e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800807e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	20000094 	.word	0x20000094
 800808c:	20000090 	.word	0x20000090

08008090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008090:	b480      	push	{r7}
 8008092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008094:	4b06      	ldr	r3, [pc, #24]	@ (80080b0 <HAL_IncTick+0x20>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	4b06      	ldr	r3, [pc, #24]	@ (80080b4 <HAL_IncTick+0x24>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4413      	add	r3, r2
 80080a0:	4a04      	ldr	r2, [pc, #16]	@ (80080b4 <HAL_IncTick+0x24>)
 80080a2:	6013      	str	r3, [r2, #0]
}
 80080a4:	bf00      	nop
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20000094 	.word	0x20000094
 80080b4:	20000694 	.word	0x20000694

080080b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
  return uwTick;
 80080bc:	4b03      	ldr	r3, [pc, #12]	@ (80080cc <HAL_GetTick+0x14>)
 80080be:	681b      	ldr	r3, [r3, #0]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20000694 	.word	0x20000694

080080d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80080d4:	4b03      	ldr	r3, [pc, #12]	@ (80080e4 <HAL_GetTickPrio+0x14>)
 80080d6:	681b      	ldr	r3, [r3, #0]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	20000090 	.word	0x20000090

080080e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80080f0:	f7ff ffe2 	bl	80080b8 <HAL_GetTick>
 80080f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008100:	d005      	beq.n	800810e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008102:	4b0a      	ldr	r3, [pc, #40]	@ (800812c <HAL_Delay+0x44>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800810e:	bf00      	nop
 8008110:	f7ff ffd2 	bl	80080b8 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	429a      	cmp	r2, r3
 800811e:	d8f7      	bhi.n	8008110 <HAL_Delay+0x28>
  {
  }
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000094 	.word	0x20000094

08008130 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	431a      	orrs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	609a      	str	r2, [r3, #8]
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3360      	adds	r3, #96	@ 0x60
 80081aa:	461a      	mov	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	4b08      	ldr	r3, [pc, #32]	@ (80081dc <LL_ADC_SetOffset+0x44>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80081d0:	bf00      	nop
 80081d2:	371c      	adds	r7, #28
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	03fff000 	.word	0x03fff000

080081e0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3360      	adds	r3, #96	@ 0x60
 80081ee:	461a      	mov	r2, r3
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800820c:	b480      	push	{r7}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3360      	adds	r3, #96	@ 0x60
 800821c:	461a      	mov	r2, r3
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	431a      	orrs	r2, r3
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800825a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3330      	adds	r3, #48	@ 0x30
 8008278:	461a      	mov	r2, r3
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	0a1b      	lsrs	r3, r3, #8
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	f003 030c 	and.w	r3, r3, #12
 8008284:	4413      	add	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f003 031f 	and.w	r3, r3, #31
 8008292:	211f      	movs	r1, #31
 8008294:	fa01 f303 	lsl.w	r3, r1, r3
 8008298:	43db      	mvns	r3, r3
 800829a:	401a      	ands	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	0e9b      	lsrs	r3, r3, #26
 80082a0:	f003 011f 	and.w	r1, r3, #31
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f003 031f 	and.w	r3, r3, #31
 80082aa:	fa01 f303 	lsl.w	r3, r1, r3
 80082ae:	431a      	orrs	r2, r3
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80082b4:	bf00      	nop
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3314      	adds	r3, #20
 80082d0:	461a      	mov	r2, r3
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	0e5b      	lsrs	r3, r3, #25
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	4413      	add	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	0d1b      	lsrs	r3, r3, #20
 80082e8:	f003 031f 	and.w	r3, r3, #31
 80082ec:	2107      	movs	r1, #7
 80082ee:	fa01 f303 	lsl.w	r3, r1, r3
 80082f2:	43db      	mvns	r3, r3
 80082f4:	401a      	ands	r2, r3
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	0d1b      	lsrs	r3, r3, #20
 80082fa:	f003 031f 	and.w	r3, r3, #31
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	fa01 f303 	lsl.w	r3, r1, r3
 8008304:	431a      	orrs	r2, r3
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800830a:	bf00      	nop
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
	...

08008318 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008330:	43db      	mvns	r3, r3
 8008332:	401a      	ands	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f003 0318 	and.w	r3, r3, #24
 800833a:	4908      	ldr	r1, [pc, #32]	@ (800835c <LL_ADC_SetChannelSingleDiff+0x44>)
 800833c:	40d9      	lsrs	r1, r3
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	400b      	ands	r3, r1
 8008342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008346:	431a      	orrs	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800834e:	bf00      	nop
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	0007ffff 	.word	0x0007ffff

08008360 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008370:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6093      	str	r3, [r2, #8]
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008398:	d101      	bne.n	800839e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800839a:	2301      	movs	r3, #1
 800839c:	e000      	b.n	80083a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80083bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80083c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083e8:	d101      	bne.n	80083ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80083ea:	2301      	movs	r3, #1
 80083ec:	e000      	b.n	80083f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800840c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008410:	f043 0201 	orr.w	r2, r3, #1
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008434:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008438:	f043 0202 	orr.w	r2, r3, #2
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b01      	cmp	r3, #1
 800845e:	d101      	bne.n	8008464 <LL_ADC_IsEnabled+0x18>
 8008460:	2301      	movs	r3, #1
 8008462:	e000      	b.n	8008466 <LL_ADC_IsEnabled+0x1a>
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b02      	cmp	r3, #2
 8008484:	d101      	bne.n	800848a <LL_ADC_IsDisableOngoing+0x18>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <LL_ADC_IsDisableOngoing+0x1a>
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80084ac:	f043 0204 	orr.w	r2, r3, #4
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80084d4:	f043 0210 	orr.w	r2, r3, #16
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d101      	bne.n	8008500 <LL_ADC_REG_IsConversionOngoing+0x18>
 80084fc:	2301      	movs	r3, #1
 80084fe:	e000      	b.n	8008502 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800851e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008522:	f043 0220 	orr.w	r2, r3, #32
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	2b08      	cmp	r3, #8
 8008548:	d101      	bne.n	800854e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800854a:	2301      	movs	r3, #1
 800854c:	e000      	b.n	8008550 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8008568:	2300      	movs	r3, #0
 800856a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800856c:	2300      	movs	r3, #0
 800856e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e12e      	b.n	80087d8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008584:	2b00      	cmp	r3, #0
 8008586:	d109      	bne.n	800859c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7f8 fdcb 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7ff feef 	bl	8008384 <LL_ADC_IsDeepPowerDownEnabled>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d004      	beq.n	80085b6 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff fed5 	bl	8008360 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff ff0a 	bl	80083d4 <LL_ADC_IsInternalRegulatorEnabled>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d115      	bne.n	80085f2 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7ff feee 	bl	80083ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80085d0:	4b83      	ldr	r3, [pc, #524]	@ (80087e0 <HAL_ADC_Init+0x284>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	099b      	lsrs	r3, r3, #6
 80085d6:	4a83      	ldr	r2, [pc, #524]	@ (80087e4 <HAL_ADC_Init+0x288>)
 80085d8:	fba2 2303 	umull	r2, r3, r2, r3
 80085dc:	099b      	lsrs	r3, r3, #6
 80085de:	3301      	adds	r3, #1
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80085e4:	e002      	b.n	80085ec <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1f9      	bne.n	80085e6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff feec 	bl	80083d4 <LL_ADC_IsInternalRegulatorEnabled>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10d      	bne.n	800861e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008606:	f043 0210 	orr.w	r2, r3, #16
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008612:	f043 0201 	orr.w	r2, r3, #1
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff ff60 	bl	80084e8 <LL_ADC_REG_IsConversionOngoing>
 8008628:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800862e:	f003 0310 	and.w	r3, r3, #16
 8008632:	2b00      	cmp	r3, #0
 8008634:	f040 80c7 	bne.w	80087c6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f040 80c3 	bne.w	80087c6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008644:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008648:	f043 0202 	orr.w	r2, r3, #2
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff fef9 	bl	800844c <LL_ADC_IsEnabled>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10b      	bne.n	8008678 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008660:	4861      	ldr	r0, [pc, #388]	@ (80087e8 <HAL_ADC_Init+0x28c>)
 8008662:	f7ff fef3 	bl	800844c <LL_ADC_IsEnabled>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d105      	bne.n	8008678 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	4619      	mov	r1, r3
 8008672:	485e      	ldr	r0, [pc, #376]	@ (80087ec <HAL_ADC_Init+0x290>)
 8008674:	f7ff fd5c 	bl	8008130 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	7e5b      	ldrb	r3, [r3, #25]
 800867c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008682:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008688:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800868e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008696:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8008698:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	4313      	orrs	r3, r2
 800869e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d106      	bne.n	80086b8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ae:	3b01      	subs	r3, #1
 80086b0:	045b      	lsls	r3, r3, #17
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d009      	beq.n	80086d4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	4b45      	ldr	r3, [pc, #276]	@ (80087f0 <HAL_ADC_Init+0x294>)
 80086dc:	4013      	ands	r3, r2
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6812      	ldr	r2, [r2, #0]
 80086e2:	69b9      	ldr	r1, [r7, #24]
 80086e4:	430b      	orrs	r3, r1
 80086e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7ff fefb 	bl	80084e8 <LL_ADC_REG_IsConversionOngoing>
 80086f2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff ff1c 	bl	8008536 <LL_ADC_INJ_IsConversionOngoing>
 80086fe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d13d      	bne.n	8008782 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d13a      	bne.n	8008782 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008710:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008718:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800871a:	4313      	orrs	r3, r2
 800871c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008728:	f023 0302 	bic.w	r3, r3, #2
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	6812      	ldr	r2, [r2, #0]
 8008730:	69b9      	ldr	r1, [r7, #24]
 8008732:	430b      	orrs	r3, r1
 8008734:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800873c:	2b01      	cmp	r3, #1
 800873e:	d118      	bne.n	8008772 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800874a:	f023 0304 	bic.w	r3, r3, #4
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008756:	4311      	orrs	r1, r2
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800875c:	4311      	orrs	r1, r2
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008762:	430a      	orrs	r2, r1
 8008764:	431a      	orrs	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0201 	orr.w	r2, r2, #1
 800876e:	611a      	str	r2, [r3, #16]
 8008770:	e007      	b.n	8008782 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f022 0201 	bic.w	r2, r2, #1
 8008780:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d10c      	bne.n	80087a4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008790:	f023 010f 	bic.w	r1, r3, #15
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	1e5a      	subs	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80087a2:	e007      	b.n	80087b4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f022 020f 	bic.w	r2, r2, #15
 80087b2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087b8:	f023 0303 	bic.w	r3, r3, #3
 80087bc:	f043 0201 	orr.w	r2, r3, #1
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80087c4:	e007      	b.n	80087d6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ca:	f043 0210 	orr.w	r2, r3, #16
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80087d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3720      	adds	r7, #32
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	2000007c 	.word	0x2000007c
 80087e4:	053e2d63 	.word	0x053e2d63
 80087e8:	50040000 	.word	0x50040000
 80087ec:	50040300 	.word	0x50040300
 80087f0:	fff0c007 	.word	0xfff0c007

080087f4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f7ff fe71 	bl	80084e8 <LL_ADC_REG_IsConversionOngoing>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d140      	bne.n	800888e <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008812:	2b01      	cmp	r3, #1
 8008814:	d101      	bne.n	800881a <HAL_ADC_Start+0x26>
 8008816:	2302      	movs	r3, #2
 8008818:	e03c      	b.n	8008894 <HAL_ADC_Start+0xa0>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fd8a 	bl	800933c <ADC_Enable>
 8008828:	4603      	mov	r3, r0
 800882a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d128      	bne.n	8008884 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008836:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800883a:	f023 0301 	bic.w	r3, r3, #1
 800883e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800884a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800884e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008852:	d106      	bne.n	8008862 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008858:	f023 0206 	bic.w	r2, r3, #6
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	659a      	str	r2, [r3, #88]	@ 0x58
 8008860:	e002      	b.n	8008868 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	221c      	movs	r2, #28
 800886e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff fe0b 	bl	8008498 <LL_ADC_REG_StartConversion>
 8008882:	e006      	b.n	8008892 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800888c:	e001      	b.n	8008892 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800888e:	2302      	movs	r3, #2
 8008890:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8008892:	7bfb      	ldrb	r3, [r7, #15]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <HAL_ADC_Stop+0x16>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e023      	b.n	80088fa <HAL_ADC_Stop+0x5e>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80088ba:	2103      	movs	r1, #3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fc81 	bl	80091c4 <ADC_ConversionStop>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d111      	bne.n	80088f0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fdaf 	bl	8009430 <ADC_Disable>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d109      	bne.n	80088f0 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088e0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80088e4:	f023 0301 	bic.w	r3, r3, #1
 80088e8:	f043 0201 	orr.w	r2, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	2b08      	cmp	r3, #8
 8008912:	d102      	bne.n	800891a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8008914:	2308      	movs	r3, #8
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	e010      	b.n	800893c <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	2b00      	cmp	r3, #0
 8008926:	d007      	beq.n	8008938 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800892c:	f043 0220 	orr.w	r2, r3, #32
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e06d      	b.n	8008a14 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8008938:	2304      	movs	r3, #4
 800893a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800893c:	f7ff fbbc 	bl	80080b8 <HAL_GetTick>
 8008940:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008942:	e021      	b.n	8008988 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800894a:	d01d      	beq.n	8008988 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800894c:	f7ff fbb4 	bl	80080b8 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	429a      	cmp	r2, r3
 800895a:	d302      	bcc.n	8008962 <HAL_ADC_PollForConversion+0x60>
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d112      	bne.n	8008988 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	4013      	ands	r3, r2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008974:	f043 0204 	orr.w	r2, r3, #4
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e045      	b.n	8008a14 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	4013      	ands	r3, r2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0d6      	beq.n	8008944 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800899a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff fc4b 	bl	8008242 <LL_ADC_REG_IsTriggerSourceSWStart>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d01c      	beq.n	80089ec <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	7e5b      	ldrb	r3, [r3, #25]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d118      	bne.n	80089ec <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0308 	and.w	r3, r3, #8
 80089c4:	2b08      	cmp	r3, #8
 80089c6:	d111      	bne.n	80089ec <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d105      	bne.n	80089ec <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e4:	f043 0201 	orr.w	r2, r3, #1
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b08      	cmp	r3, #8
 80089f0:	d104      	bne.n	80089fc <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2208      	movs	r2, #8
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	e00a      	b.n	8008a12 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d103      	bne.n	8008a12 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	220c      	movs	r2, #12
 8008a10:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
	...

08008a38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b0b6      	sub	sp, #216	@ 0xd8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d101      	bne.n	8008a5a <HAL_ADC_ConfigChannel+0x22>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e39f      	b.n	800919a <HAL_ADC_ConfigChannel+0x762>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff fd3e 	bl	80084e8 <LL_ADC_REG_IsConversionOngoing>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f040 8384 	bne.w	800917c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	6859      	ldr	r1, [r3, #4]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	461a      	mov	r2, r3
 8008a82:	f7ff fbf1 	bl	8008268 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fd2c 	bl	80084e8 <LL_ADC_REG_IsConversionOngoing>
 8008a90:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7ff fd4c 	bl	8008536 <LL_ADC_INJ_IsConversionOngoing>
 8008a9e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008aa2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f040 81a6 	bne.w	8008df8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008aac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f040 81a1 	bne.w	8008df8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6818      	ldr	r0, [r3, #0]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6819      	ldr	r1, [r3, #0]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f7ff fbfc 	bl	80082c0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	695a      	ldr	r2, [r3, #20]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	08db      	lsrs	r3, r3, #3
 8008ad4:	f003 0303 	and.w	r3, r3, #3
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	fa02 f303 	lsl.w	r3, r2, r3
 8008ade:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	d00a      	beq.n	8008b00 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	6919      	ldr	r1, [r3, #16]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008afa:	f7ff fb4d 	bl	8008198 <LL_ADC_SetOffset>
 8008afe:	e17b      	b.n	8008df8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2100      	movs	r1, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff fb6a 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10a      	bne.n	8008b2c <HAL_ADC_ConfigChannel+0xf4>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff fb5f 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008b22:	4603      	mov	r3, r0
 8008b24:	0e9b      	lsrs	r3, r3, #26
 8008b26:	f003 021f 	and.w	r2, r3, #31
 8008b2a:	e01e      	b.n	8008b6a <HAL_ADC_ConfigChannel+0x132>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2100      	movs	r1, #0
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7ff fb54 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008b42:	fa93 f3a3 	rbit	r3, r3
 8008b46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008b4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008b52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8008b5a:	2320      	movs	r3, #32
 8008b5c:	e004      	b.n	8008b68 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8008b5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b62:	fab3 f383 	clz	r3, r3
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d105      	bne.n	8008b82 <HAL_ADC_ConfigChannel+0x14a>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	0e9b      	lsrs	r3, r3, #26
 8008b7c:	f003 031f 	and.w	r3, r3, #31
 8008b80:	e018      	b.n	8008bb4 <HAL_ADC_ConfigChannel+0x17c>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008b8e:	fa93 f3a3 	rbit	r3, r3
 8008b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8008b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8008b9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8008ba6:	2320      	movs	r3, #32
 8008ba8:	e004      	b.n	8008bb4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8008baa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008bae:	fab3 f383 	clz	r3, r3
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d106      	bne.n	8008bc6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7ff fb23 	bl	800820c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2101      	movs	r1, #1
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff fb07 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <HAL_ADC_ConfigChannel+0x1ba>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2101      	movs	r1, #1
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff fafc 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008be8:	4603      	mov	r3, r0
 8008bea:	0e9b      	lsrs	r3, r3, #26
 8008bec:	f003 021f 	and.w	r2, r3, #31
 8008bf0:	e01e      	b.n	8008c30 <HAL_ADC_ConfigChannel+0x1f8>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2101      	movs	r1, #1
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff faf1 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c08:	fa93 f3a3 	rbit	r3, r3
 8008c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8008c10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8008c18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8008c20:	2320      	movs	r3, #32
 8008c22:	e004      	b.n	8008c2e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8008c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c28:	fab3 f383 	clz	r3, r3
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	461a      	mov	r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d105      	bne.n	8008c48 <HAL_ADC_ConfigChannel+0x210>
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	0e9b      	lsrs	r3, r3, #26
 8008c42:	f003 031f 	and.w	r3, r3, #31
 8008c46:	e018      	b.n	8008c7a <HAL_ADC_ConfigChannel+0x242>
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c54:	fa93 f3a3 	rbit	r3, r3
 8008c58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8008c5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8008c64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8008c6c:	2320      	movs	r3, #32
 8008c6e:	e004      	b.n	8008c7a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8008c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c74:	fab3 f383 	clz	r3, r3
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d106      	bne.n	8008c8c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2200      	movs	r2, #0
 8008c84:	2101      	movs	r1, #1
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7ff fac0 	bl	800820c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2102      	movs	r1, #2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff faa4 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10a      	bne.n	8008cb8 <HAL_ADC_ConfigChannel+0x280>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2102      	movs	r1, #2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff fa99 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	0e9b      	lsrs	r3, r3, #26
 8008cb2:	f003 021f 	and.w	r2, r3, #31
 8008cb6:	e01e      	b.n	8008cf6 <HAL_ADC_ConfigChannel+0x2be>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2102      	movs	r1, #2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff fa8e 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cce:	fa93 f3a3 	rbit	r3, r3
 8008cd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8008cd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8008cde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8008ce6:	2320      	movs	r3, #32
 8008ce8:	e004      	b.n	8008cf4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8008cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008cee:	fab3 f383 	clz	r3, r3
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d105      	bne.n	8008d0e <HAL_ADC_ConfigChannel+0x2d6>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	0e9b      	lsrs	r3, r3, #26
 8008d08:	f003 031f 	and.w	r3, r3, #31
 8008d0c:	e016      	b.n	8008d3c <HAL_ADC_ConfigChannel+0x304>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008d1a:	fa93 f3a3 	rbit	r3, r3
 8008d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8008d20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008d22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8008d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8008d2e:	2320      	movs	r3, #32
 8008d30:	e004      	b.n	8008d3c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8008d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d36:	fab3 f383 	clz	r3, r3
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d106      	bne.n	8008d4e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2200      	movs	r2, #0
 8008d46:	2102      	movs	r1, #2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff fa5f 	bl	800820c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2103      	movs	r1, #3
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7ff fa43 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <HAL_ADC_ConfigChannel+0x342>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2103      	movs	r1, #3
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff fa38 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008d70:	4603      	mov	r3, r0
 8008d72:	0e9b      	lsrs	r3, r3, #26
 8008d74:	f003 021f 	and.w	r2, r3, #31
 8008d78:	e017      	b.n	8008daa <HAL_ADC_ConfigChannel+0x372>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2103      	movs	r1, #3
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff fa2d 	bl	80081e0 <LL_ADC_GetOffsetChannel>
 8008d86:	4603      	mov	r3, r0
 8008d88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d8c:	fa93 f3a3 	rbit	r3, r3
 8008d90:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8008d92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d94:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8008d96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8008d9c:	2320      	movs	r3, #32
 8008d9e:	e003      	b.n	8008da8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8008da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008da2:	fab3 f383 	clz	r3, r3
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <HAL_ADC_ConfigChannel+0x38a>
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	0e9b      	lsrs	r3, r3, #26
 8008dbc:	f003 031f 	and.w	r3, r3, #31
 8008dc0:	e011      	b.n	8008de6 <HAL_ADC_ConfigChannel+0x3ae>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dca:	fa93 f3a3 	rbit	r3, r3
 8008dce:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8008dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8008dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8008dda:	2320      	movs	r3, #32
 8008ddc:	e003      	b.n	8008de6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8008dde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008de0:	fab3 f383 	clz	r3, r3
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d106      	bne.n	8008df8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2200      	movs	r2, #0
 8008df0:	2103      	movs	r1, #3
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7ff fa0a 	bl	800820c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7ff fb25 	bl	800844c <LL_ADC_IsEnabled>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f040 81c2 	bne.w	800918e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	6819      	ldr	r1, [r3, #0]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	461a      	mov	r2, r3
 8008e18:	f7ff fa7e 	bl	8008318 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	4a8e      	ldr	r2, [pc, #568]	@ (800905c <HAL_ADC_ConfigChannel+0x624>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	f040 8130 	bne.w	8009088 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10b      	bne.n	8008e50 <HAL_ADC_ConfigChannel+0x418>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	0e9b      	lsrs	r3, r3, #26
 8008e3e:	3301      	adds	r3, #1
 8008e40:	f003 031f 	and.w	r3, r3, #31
 8008e44:	2b09      	cmp	r3, #9
 8008e46:	bf94      	ite	ls
 8008e48:	2301      	movls	r3, #1
 8008e4a:	2300      	movhi	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	e019      	b.n	8008e84 <HAL_ADC_ConfigChannel+0x44c>
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e58:	fa93 f3a3 	rbit	r3, r3
 8008e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8008e5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e60:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8008e62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8008e68:	2320      	movs	r3, #32
 8008e6a:	e003      	b.n	8008e74 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8008e6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e6e:	fab3 f383 	clz	r3, r3
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	3301      	adds	r3, #1
 8008e76:	f003 031f 	and.w	r3, r3, #31
 8008e7a:	2b09      	cmp	r3, #9
 8008e7c:	bf94      	ite	ls
 8008e7e:	2301      	movls	r3, #1
 8008e80:	2300      	movhi	r3, #0
 8008e82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d079      	beq.n	8008f7c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d107      	bne.n	8008ea4 <HAL_ADC_ConfigChannel+0x46c>
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	0e9b      	lsrs	r3, r3, #26
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	069b      	lsls	r3, r3, #26
 8008e9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008ea2:	e015      	b.n	8008ed0 <HAL_ADC_ConfigChannel+0x498>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eac:	fa93 f3a3 	rbit	r3, r3
 8008eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8008eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eb4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8008eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008ebc:	2320      	movs	r3, #32
 8008ebe:	e003      	b.n	8008ec8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8008ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ec2:	fab3 f383 	clz	r3, r3
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	3301      	adds	r3, #1
 8008eca:	069b      	lsls	r3, r3, #26
 8008ecc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d109      	bne.n	8008ef0 <HAL_ADC_ConfigChannel+0x4b8>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	0e9b      	lsrs	r3, r3, #26
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	f003 031f 	and.w	r3, r3, #31
 8008ee8:	2101      	movs	r1, #1
 8008eea:	fa01 f303 	lsl.w	r3, r1, r3
 8008eee:	e017      	b.n	8008f20 <HAL_ADC_ConfigChannel+0x4e8>
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ef8:	fa93 f3a3 	rbit	r3, r3
 8008efc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8008efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f00:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8008f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8008f08:	2320      	movs	r3, #32
 8008f0a:	e003      	b.n	8008f14 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8008f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f0e:	fab3 f383 	clz	r3, r3
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	3301      	adds	r3, #1
 8008f16:	f003 031f 	and.w	r3, r3, #31
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f20:	ea42 0103 	orr.w	r1, r2, r3
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <HAL_ADC_ConfigChannel+0x50e>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	0e9b      	lsrs	r3, r3, #26
 8008f36:	3301      	adds	r3, #1
 8008f38:	f003 021f 	and.w	r2, r3, #31
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	4413      	add	r3, r2
 8008f42:	051b      	lsls	r3, r3, #20
 8008f44:	e018      	b.n	8008f78 <HAL_ADC_ConfigChannel+0x540>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4e:	fa93 f3a3 	rbit	r3, r3
 8008f52:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8008f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8008f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8008f5e:	2320      	movs	r3, #32
 8008f60:	e003      	b.n	8008f6a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8008f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f64:	fab3 f383 	clz	r3, r3
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	f003 021f 	and.w	r2, r3, #31
 8008f70:	4613      	mov	r3, r2
 8008f72:	005b      	lsls	r3, r3, #1
 8008f74:	4413      	add	r3, r2
 8008f76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f78:	430b      	orrs	r3, r1
 8008f7a:	e080      	b.n	800907e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d107      	bne.n	8008f98 <HAL_ADC_ConfigChannel+0x560>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	0e9b      	lsrs	r3, r3, #26
 8008f8e:	3301      	adds	r3, #1
 8008f90:	069b      	lsls	r3, r3, #26
 8008f92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008f96:	e015      	b.n	8008fc4 <HAL_ADC_ConfigChannel+0x58c>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa0:	fa93 f3a3 	rbit	r3, r3
 8008fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8008fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8008faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8008fb0:	2320      	movs	r3, #32
 8008fb2:	e003      	b.n	8008fbc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb6:	fab3 f383 	clz	r3, r3
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	069b      	lsls	r3, r3, #26
 8008fc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d109      	bne.n	8008fe4 <HAL_ADC_ConfigChannel+0x5ac>
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	0e9b      	lsrs	r3, r3, #26
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	f003 031f 	and.w	r3, r3, #31
 8008fdc:	2101      	movs	r1, #1
 8008fde:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe2:	e017      	b.n	8009014 <HAL_ADC_ConfigChannel+0x5dc>
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	fa93 f3a3 	rbit	r3, r3
 8008ff0:	61fb      	str	r3, [r7, #28]
  return result;
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8008ffc:	2320      	movs	r3, #32
 8008ffe:	e003      	b.n	8009008 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	fab3 f383 	clz	r3, r3
 8009006:	b2db      	uxtb	r3, r3
 8009008:	3301      	adds	r3, #1
 800900a:	f003 031f 	and.w	r3, r3, #31
 800900e:	2101      	movs	r1, #1
 8009010:	fa01 f303 	lsl.w	r3, r1, r3
 8009014:	ea42 0103 	orr.w	r1, r2, r3
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10d      	bne.n	8009040 <HAL_ADC_ConfigChannel+0x608>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	0e9b      	lsrs	r3, r3, #26
 800902a:	3301      	adds	r3, #1
 800902c:	f003 021f 	and.w	r2, r3, #31
 8009030:	4613      	mov	r3, r2
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	4413      	add	r3, r2
 8009036:	3b1e      	subs	r3, #30
 8009038:	051b      	lsls	r3, r3, #20
 800903a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800903e:	e01d      	b.n	800907c <HAL_ADC_ConfigChannel+0x644>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	fa93 f3a3 	rbit	r3, r3
 800904c:	613b      	str	r3, [r7, #16]
  return result;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d103      	bne.n	8009060 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8009058:	2320      	movs	r3, #32
 800905a:	e005      	b.n	8009068 <HAL_ADC_ConfigChannel+0x630>
 800905c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	fab3 f383 	clz	r3, r3
 8009066:	b2db      	uxtb	r3, r3
 8009068:	3301      	adds	r3, #1
 800906a:	f003 021f 	and.w	r2, r3, #31
 800906e:	4613      	mov	r3, r2
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	4413      	add	r3, r2
 8009074:	3b1e      	subs	r3, #30
 8009076:	051b      	lsls	r3, r3, #20
 8009078:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800907c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009082:	4619      	mov	r1, r3
 8009084:	f7ff f91c 	bl	80082c0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	4b45      	ldr	r3, [pc, #276]	@ (80091a4 <HAL_ADC_ConfigChannel+0x76c>)
 800908e:	4013      	ands	r3, r2
 8009090:	2b00      	cmp	r3, #0
 8009092:	d07c      	beq.n	800918e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009094:	4844      	ldr	r0, [pc, #272]	@ (80091a8 <HAL_ADC_ConfigChannel+0x770>)
 8009096:	f7ff f871 	bl	800817c <LL_ADC_GetCommonPathInternalCh>
 800909a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800909e:	4843      	ldr	r0, [pc, #268]	@ (80091ac <HAL_ADC_ConfigChannel+0x774>)
 80090a0:	f7ff f9d4 	bl	800844c <LL_ADC_IsEnabled>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d15e      	bne.n	8009168 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a40      	ldr	r2, [pc, #256]	@ (80091b0 <HAL_ADC_ConfigChannel+0x778>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d127      	bne.n	8009104 <HAL_ADC_ConfigChannel+0x6cc>
 80090b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80090b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d121      	bne.n	8009104 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a39      	ldr	r2, [pc, #228]	@ (80091ac <HAL_ADC_ConfigChannel+0x774>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d161      	bne.n	800918e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80090ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80090ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80090d2:	4619      	mov	r1, r3
 80090d4:	4834      	ldr	r0, [pc, #208]	@ (80091a8 <HAL_ADC_ConfigChannel+0x770>)
 80090d6:	f7ff f83e 	bl	8008156 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80090da:	4b36      	ldr	r3, [pc, #216]	@ (80091b4 <HAL_ADC_ConfigChannel+0x77c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	099b      	lsrs	r3, r3, #6
 80090e0:	4a35      	ldr	r2, [pc, #212]	@ (80091b8 <HAL_ADC_ConfigChannel+0x780>)
 80090e2:	fba2 2303 	umull	r2, r3, r2, r3
 80090e6:	099b      	lsrs	r3, r3, #6
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	4613      	mov	r3, r2
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80090f4:	e002      	b.n	80090fc <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1f9      	bne.n	80090f6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009102:	e044      	b.n	800918e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a2c      	ldr	r2, [pc, #176]	@ (80091bc <HAL_ADC_ConfigChannel+0x784>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d113      	bne.n	8009136 <HAL_ADC_ConfigChannel+0x6fe>
 800910e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10d      	bne.n	8009136 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a23      	ldr	r2, [pc, #140]	@ (80091ac <HAL_ADC_ConfigChannel+0x774>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d134      	bne.n	800918e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8009124:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009128:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800912c:	4619      	mov	r1, r3
 800912e:	481e      	ldr	r0, [pc, #120]	@ (80091a8 <HAL_ADC_ConfigChannel+0x770>)
 8009130:	f7ff f811 	bl	8008156 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009134:	e02b      	b.n	800918e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a21      	ldr	r2, [pc, #132]	@ (80091c0 <HAL_ADC_ConfigChannel+0x788>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d126      	bne.n	800918e <HAL_ADC_ConfigChannel+0x756>
 8009140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d120      	bne.n	800918e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a16      	ldr	r2, [pc, #88]	@ (80091ac <HAL_ADC_ConfigChannel+0x774>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d11b      	bne.n	800918e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8009156:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800915a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800915e:	4619      	mov	r1, r3
 8009160:	4811      	ldr	r0, [pc, #68]	@ (80091a8 <HAL_ADC_ConfigChannel+0x770>)
 8009162:	f7fe fff8 	bl	8008156 <LL_ADC_SetCommonPathInternalCh>
 8009166:	e012      	b.n	800918e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800916c:	f043 0220 	orr.w	r2, r3, #32
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800917a:	e008      	b.n	800918e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009180:	f043 0220 	orr.w	r2, r3, #32
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8009196:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800919a:	4618      	mov	r0, r3
 800919c:	37d8      	adds	r7, #216	@ 0xd8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	80080000 	.word	0x80080000
 80091a8:	50040300 	.word	0x50040300
 80091ac:	50040000 	.word	0x50040000
 80091b0:	c7520000 	.word	0xc7520000
 80091b4:	2000007c 	.word	0x2000007c
 80091b8:	053e2d63 	.word	0x053e2d63
 80091bc:	cb840000 	.word	0xcb840000
 80091c0:	80000001 	.word	0x80000001

080091c4 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80091ce:	2300      	movs	r3, #0
 80091d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff f984 	bl	80084e8 <LL_ADC_REG_IsConversionOngoing>
 80091e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff f9a5 	bl	8008536 <LL_ADC_INJ_IsConversionOngoing>
 80091ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d103      	bne.n	80091fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 8098 	beq.w	800932c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d02a      	beq.n	8009260 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7e5b      	ldrb	r3, [r3, #25]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d126      	bne.n	8009260 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	7e1b      	ldrb	r3, [r3, #24]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d122      	bne.n	8009260 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800921a:	2301      	movs	r3, #1
 800921c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800921e:	e014      	b.n	800924a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	4a45      	ldr	r2, [pc, #276]	@ (8009338 <ADC_ConversionStop+0x174>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d90d      	bls.n	8009244 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800922c:	f043 0210 	orr.w	r2, r3, #16
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009238:	f043 0201 	orr.w	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e074      	b.n	800932e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	3301      	adds	r3, #1
 8009248:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009254:	2b40      	cmp	r3, #64	@ 0x40
 8009256:	d1e3      	bne.n	8009220 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2240      	movs	r2, #64	@ 0x40
 800925e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	2b02      	cmp	r3, #2
 8009264:	d014      	beq.n	8009290 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4618      	mov	r0, r3
 800926c:	f7ff f93c 	bl	80084e8 <LL_ADC_REG_IsConversionOngoing>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00c      	beq.n	8009290 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4618      	mov	r0, r3
 800927c:	f7ff f8f9 	bl	8008472 <LL_ADC_IsDisableOngoing>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d104      	bne.n	8009290 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff f918 	bl	80084c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	2b01      	cmp	r3, #1
 8009294:	d014      	beq.n	80092c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff f94b 	bl	8008536 <LL_ADC_INJ_IsConversionOngoing>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00c      	beq.n	80092c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff f8e1 	bl	8008472 <LL_ADC_IsDisableOngoing>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d104      	bne.n	80092c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff f927 	bl	800850e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d005      	beq.n	80092d2 <ADC_ConversionStop+0x10e>
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d105      	bne.n	80092d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80092cc:	230c      	movs	r3, #12
 80092ce:	617b      	str	r3, [r7, #20]
        break;
 80092d0:	e005      	b.n	80092de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80092d2:	2308      	movs	r3, #8
 80092d4:	617b      	str	r3, [r7, #20]
        break;
 80092d6:	e002      	b.n	80092de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80092d8:	2304      	movs	r3, #4
 80092da:	617b      	str	r3, [r7, #20]
        break;
 80092dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80092de:	f7fe feeb 	bl	80080b8 <HAL_GetTick>
 80092e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80092e4:	e01b      	b.n	800931e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80092e6:	f7fe fee7 	bl	80080b8 <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	2b05      	cmp	r3, #5
 80092f2:	d914      	bls.n	800931e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689a      	ldr	r2, [r3, #8]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	4013      	ands	r3, r2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00d      	beq.n	800931e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009306:	f043 0210 	orr.w	r2, r3, #16
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009312:	f043 0201 	orr.w	r2, r3, #1
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e007      	b.n	800932e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689a      	ldr	r2, [r3, #8]
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	4013      	ands	r3, r2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1dc      	bne.n	80092e6 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	a33fffff 	.word	0xa33fffff

0800933c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009344:	2300      	movs	r3, #0
 8009346:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff f87d 	bl	800844c <LL_ADC_IsEnabled>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d15e      	bne.n	8009416 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	4b30      	ldr	r3, [pc, #192]	@ (8009420 <ADC_Enable+0xe4>)
 8009360:	4013      	ands	r3, r2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00d      	beq.n	8009382 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800936a:	f043 0210 	orr.w	r2, r3, #16
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009376:	f043 0201 	orr.w	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e04a      	b.n	8009418 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff f838 	bl	80083fc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800938c:	4825      	ldr	r0, [pc, #148]	@ (8009424 <ADC_Enable+0xe8>)
 800938e:	f7fe fef5 	bl	800817c <LL_ADC_GetCommonPathInternalCh>
 8009392:	4603      	mov	r3, r0
 8009394:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00f      	beq.n	80093bc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800939c:	4b22      	ldr	r3, [pc, #136]	@ (8009428 <ADC_Enable+0xec>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	099b      	lsrs	r3, r3, #6
 80093a2:	4a22      	ldr	r2, [pc, #136]	@ (800942c <ADC_Enable+0xf0>)
 80093a4:	fba2 2303 	umull	r2, r3, r2, r3
 80093a8:	099b      	lsrs	r3, r3, #6
 80093aa:	3301      	adds	r3, #1
 80093ac:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80093ae:	e002      	b.n	80093b6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1f9      	bne.n	80093b0 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80093bc:	f7fe fe7c 	bl	80080b8 <HAL_GetTick>
 80093c0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80093c2:	e021      	b.n	8009408 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff f83f 	bl	800844c <LL_ADC_IsEnabled>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4618      	mov	r0, r3
 80093da:	f7ff f80f 	bl	80083fc <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80093de:	f7fe fe6b 	bl	80080b8 <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d90d      	bls.n	8009408 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093f0:	f043 0210 	orr.w	r2, r3, #16
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093fc:	f043 0201 	orr.w	r2, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e007      	b.n	8009418 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b01      	cmp	r3, #1
 8009414:	d1d6      	bne.n	80093c4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	8000003f 	.word	0x8000003f
 8009424:	50040300 	.word	0x50040300
 8009428:	2000007c 	.word	0x2000007c
 800942c:	053e2d63 	.word	0x053e2d63

08009430 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff f818 	bl	8008472 <LL_ADC_IsDisableOngoing>
 8009442:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4618      	mov	r0, r3
 800944a:	f7fe ffff 	bl	800844c <LL_ADC_IsEnabled>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d047      	beq.n	80094e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d144      	bne.n	80094e4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f003 030d 	and.w	r3, r3, #13
 8009464:	2b01      	cmp	r3, #1
 8009466:	d10c      	bne.n	8009482 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe ffd9 	bl	8008424 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2203      	movs	r2, #3
 8009478:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800947a:	f7fe fe1d 	bl	80080b8 <HAL_GetTick>
 800947e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009480:	e029      	b.n	80094d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009486:	f043 0210 	orr.w	r2, r3, #16
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009492:	f043 0201 	orr.w	r2, r3, #1
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e023      	b.n	80094e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800949e:	f7fe fe0b 	bl	80080b8 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d914      	bls.n	80094d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00d      	beq.n	80094d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094be:	f043 0210 	orr.w	r2, r3, #16
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ca:	f043 0201 	orr.w	r2, r3, #1
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e007      	b.n	80094e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f003 0301 	and.w	r3, r3, #1
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1dc      	bne.n	800949e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
	...

080094f0 <__NVIC_SetPriorityGrouping>:
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f003 0307 	and.w	r3, r3, #7
 80094fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009500:	4b0c      	ldr	r3, [pc, #48]	@ (8009534 <__NVIC_SetPriorityGrouping+0x44>)
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800950c:	4013      	ands	r3, r2
 800950e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800951c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009522:	4a04      	ldr	r2, [pc, #16]	@ (8009534 <__NVIC_SetPriorityGrouping+0x44>)
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	60d3      	str	r3, [r2, #12]
}
 8009528:	bf00      	nop
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	e000ed00 	.word	0xe000ed00

08009538 <__NVIC_GetPriorityGrouping>:
{
 8009538:	b480      	push	{r7}
 800953a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800953c:	4b04      	ldr	r3, [pc, #16]	@ (8009550 <__NVIC_GetPriorityGrouping+0x18>)
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	0a1b      	lsrs	r3, r3, #8
 8009542:	f003 0307 	and.w	r3, r3, #7
}
 8009546:	4618      	mov	r0, r3
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	e000ed00 	.word	0xe000ed00

08009554 <__NVIC_EnableIRQ>:
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800955e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009562:	2b00      	cmp	r3, #0
 8009564:	db0b      	blt.n	800957e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009566:	79fb      	ldrb	r3, [r7, #7]
 8009568:	f003 021f 	and.w	r2, r3, #31
 800956c:	4907      	ldr	r1, [pc, #28]	@ (800958c <__NVIC_EnableIRQ+0x38>)
 800956e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	2001      	movs	r0, #1
 8009576:	fa00 f202 	lsl.w	r2, r0, r2
 800957a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800957e:	bf00      	nop
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	e000e100 	.word	0xe000e100

08009590 <__NVIC_SetPriority>:
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	6039      	str	r1, [r7, #0]
 800959a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800959c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	db0a      	blt.n	80095ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	490c      	ldr	r1, [pc, #48]	@ (80095dc <__NVIC_SetPriority+0x4c>)
 80095aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095ae:	0112      	lsls	r2, r2, #4
 80095b0:	b2d2      	uxtb	r2, r2
 80095b2:	440b      	add	r3, r1
 80095b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80095b8:	e00a      	b.n	80095d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	4908      	ldr	r1, [pc, #32]	@ (80095e0 <__NVIC_SetPriority+0x50>)
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	f003 030f 	and.w	r3, r3, #15
 80095c6:	3b04      	subs	r3, #4
 80095c8:	0112      	lsls	r2, r2, #4
 80095ca:	b2d2      	uxtb	r2, r2
 80095cc:	440b      	add	r3, r1
 80095ce:	761a      	strb	r2, [r3, #24]
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	e000e100 	.word	0xe000e100
 80095e0:	e000ed00 	.word	0xe000ed00

080095e4 <NVIC_EncodePriority>:
{
 80095e4:	b480      	push	{r7}
 80095e6:	b089      	sub	sp, #36	@ 0x24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	f1c3 0307 	rsb	r3, r3, #7
 80095fe:	2b04      	cmp	r3, #4
 8009600:	bf28      	it	cs
 8009602:	2304      	movcs	r3, #4
 8009604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	3304      	adds	r3, #4
 800960a:	2b06      	cmp	r3, #6
 800960c:	d902      	bls.n	8009614 <NVIC_EncodePriority+0x30>
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	3b03      	subs	r3, #3
 8009612:	e000      	b.n	8009616 <NVIC_EncodePriority+0x32>
 8009614:	2300      	movs	r3, #0
 8009616:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009618:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	fa02 f303 	lsl.w	r3, r2, r3
 8009622:	43da      	mvns	r2, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	401a      	ands	r2, r3
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800962c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	fa01 f303 	lsl.w	r3, r1, r3
 8009636:	43d9      	mvns	r1, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800963c:	4313      	orrs	r3, r2
}
 800963e:	4618      	mov	r0, r3
 8009640:	3724      	adds	r7, #36	@ 0x24
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
	...

0800964c <SysTick_Config>:
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3b01      	subs	r3, #1
 8009658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800965c:	d301      	bcc.n	8009662 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800965e:	2301      	movs	r3, #1
 8009660:	e00f      	b.n	8009682 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009662:	4a0a      	ldr	r2, [pc, #40]	@ (800968c <SysTick_Config+0x40>)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3b01      	subs	r3, #1
 8009668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800966a:	210f      	movs	r1, #15
 800966c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009670:	f7ff ff8e 	bl	8009590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009674:	4b05      	ldr	r3, [pc, #20]	@ (800968c <SysTick_Config+0x40>)
 8009676:	2200      	movs	r2, #0
 8009678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800967a:	4b04      	ldr	r3, [pc, #16]	@ (800968c <SysTick_Config+0x40>)
 800967c:	2207      	movs	r2, #7
 800967e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	e000e010 	.word	0xe000e010

08009690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7ff ff29 	bl	80094f0 <__NVIC_SetPriorityGrouping>
}
 800969e:	bf00      	nop
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b086      	sub	sp, #24
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	4603      	mov	r3, r0
 80096ae:	60b9      	str	r1, [r7, #8]
 80096b0:	607a      	str	r2, [r7, #4]
 80096b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80096b4:	f7ff ff40 	bl	8009538 <__NVIC_GetPriorityGrouping>
 80096b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	68b9      	ldr	r1, [r7, #8]
 80096be:	6978      	ldr	r0, [r7, #20]
 80096c0:	f7ff ff90 	bl	80095e4 <NVIC_EncodePriority>
 80096c4:	4602      	mov	r2, r0
 80096c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ca:	4611      	mov	r1, r2
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7ff ff5f 	bl	8009590 <__NVIC_SetPriority>
}
 80096d2:	bf00      	nop
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	4603      	mov	r3, r0
 80096e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff ff33 	bl	8009554 <__NVIC_EnableIRQ>
}
 80096ee:	bf00      	nop
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff ffa4 	bl	800964c <SysTick_Config>
 8009704:	4603      	mov	r3, r0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e08e      	b.n	8009840 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	4b47      	ldr	r3, [pc, #284]	@ (8009848 <HAL_DMA_Init+0x138>)
 800972a:	429a      	cmp	r2, r3
 800972c:	d80f      	bhi.n	800974e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	4b45      	ldr	r3, [pc, #276]	@ (800984c <HAL_DMA_Init+0x13c>)
 8009736:	4413      	add	r3, r2
 8009738:	4a45      	ldr	r2, [pc, #276]	@ (8009850 <HAL_DMA_Init+0x140>)
 800973a:	fba2 2303 	umull	r2, r3, r2, r3
 800973e:	091b      	lsrs	r3, r3, #4
 8009740:	009a      	lsls	r2, r3, #2
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a42      	ldr	r2, [pc, #264]	@ (8009854 <HAL_DMA_Init+0x144>)
 800974a:	641a      	str	r2, [r3, #64]	@ 0x40
 800974c:	e00e      	b.n	800976c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	4b40      	ldr	r3, [pc, #256]	@ (8009858 <HAL_DMA_Init+0x148>)
 8009756:	4413      	add	r3, r2
 8009758:	4a3d      	ldr	r2, [pc, #244]	@ (8009850 <HAL_DMA_Init+0x140>)
 800975a:	fba2 2303 	umull	r2, r3, r2, r3
 800975e:	091b      	lsrs	r3, r3, #4
 8009760:	009a      	lsls	r2, r3, #2
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a3c      	ldr	r2, [pc, #240]	@ (800985c <HAL_DMA_Init+0x14c>)
 800976a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009786:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800979c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f9bc 	bl	8009b3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097cc:	d102      	bne.n	80097d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097dc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80097e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80097ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d010      	beq.n	8009816 <HAL_DMA_Init+0x106>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	2b04      	cmp	r3, #4
 80097fa:	d80c      	bhi.n	8009816 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f9db 	bl	8009bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009806:	2200      	movs	r2, #0
 8009808:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009812:	605a      	str	r2, [r3, #4]
 8009814:	e008      	b.n	8009828 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	40020407 	.word	0x40020407
 800984c:	bffdfff8 	.word	0xbffdfff8
 8009850:	cccccccd 	.word	0xcccccccd
 8009854:	40020000 	.word	0x40020000
 8009858:	bffdfbf8 	.word	0xbffdfbf8
 800985c:	40020400 	.word	0x40020400

08009860 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e04f      	b.n	8009912 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b02      	cmp	r3, #2
 800987c:	d008      	beq.n	8009890 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2204      	movs	r2, #4
 8009882:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e040      	b.n	8009912 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 020e 	bic.w	r2, r2, #14
 800989e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80098ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 0201 	bic.w	r2, r2, #1
 80098be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098c4:	f003 021c 	and.w	r2, r3, #28
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098cc:	2101      	movs	r1, #1
 80098ce:	fa01 f202 	lsl.w	r2, r1, r2
 80098d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80098dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00c      	beq.n	8009900 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80098f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80098fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b02      	cmp	r3, #2
 8009934:	d005      	beq.n	8009942 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2204      	movs	r2, #4
 800993a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	73fb      	strb	r3, [r7, #15]
 8009940:	e047      	b.n	80099d2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f022 020e 	bic.w	r2, r2, #14
 8009950:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0201 	bic.w	r2, r2, #1
 8009960:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800996c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009970:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009976:	f003 021c 	and.w	r2, r3, #28
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997e:	2101      	movs	r1, #1
 8009980:	fa01 f202 	lsl.w	r2, r1, r2
 8009984:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800998e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00c      	beq.n	80099b2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80099a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80099b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	4798      	blx	r3
    }
  }
  return status;
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099f8:	f003 031c 	and.w	r3, r3, #28
 80099fc:	2204      	movs	r2, #4
 80099fe:	409a      	lsls	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	4013      	ands	r3, r2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d026      	beq.n	8009a56 <HAL_DMA_IRQHandler+0x7a>
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	f003 0304 	and.w	r3, r3, #4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d021      	beq.n	8009a56 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d107      	bne.n	8009a30 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f022 0204 	bic.w	r2, r2, #4
 8009a2e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a34:	f003 021c 	and.w	r2, r3, #28
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3c:	2104      	movs	r1, #4
 8009a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8009a42:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d071      	beq.n	8009b30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009a54:	e06c      	b.n	8009b30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a5a:	f003 031c 	and.w	r3, r3, #28
 8009a5e:	2202      	movs	r2, #2
 8009a60:	409a      	lsls	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	4013      	ands	r3, r2
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d02e      	beq.n	8009ac8 <HAL_DMA_IRQHandler+0xec>
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	f003 0302 	and.w	r3, r3, #2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d029      	beq.n	8009ac8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0320 	and.w	r3, r3, #32
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10b      	bne.n	8009a9a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 020a 	bic.w	r2, r2, #10
 8009a90:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a9e:	f003 021c 	and.w	r2, r3, #28
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa6:	2102      	movs	r1, #2
 8009aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8009aac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d038      	beq.n	8009b30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009ac6:	e033      	b.n	8009b30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009acc:	f003 031c 	and.w	r3, r3, #28
 8009ad0:	2208      	movs	r2, #8
 8009ad2:	409a      	lsls	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d02a      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x156>
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	f003 0308 	and.w	r3, r3, #8
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d025      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 020e 	bic.w	r2, r2, #14
 8009af4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009afa:	f003 021c 	and.w	r2, r3, #28
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b02:	2101      	movs	r1, #1
 8009b04:	fa01 f202 	lsl.w	r2, r1, r2
 8009b08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d004      	beq.n	8009b32 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
}
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	4b17      	ldr	r3, [pc, #92]	@ (8009ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d80a      	bhi.n	8009b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b54:	089b      	lsrs	r3, r3, #2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009b5c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	6493      	str	r3, [r2, #72]	@ 0x48
 8009b64:	e007      	b.n	8009b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b6a:	089b      	lsrs	r3, r3, #2
 8009b6c:	009a      	lsls	r2, r3, #2
 8009b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8009bac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009b70:	4413      	add	r3, r2
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	3b08      	subs	r3, #8
 8009b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8009bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009b80:	fba2 2303 	umull	r2, r3, r2, r3
 8009b84:	091b      	lsrs	r3, r3, #4
 8009b86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8009bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009b8c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f003 031f 	and.w	r3, r3, #31
 8009b94:	2201      	movs	r2, #1
 8009b96:	409a      	lsls	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009b9c:	bf00      	nop
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	40020407 	.word	0x40020407
 8009bac:	4002081c 	.word	0x4002081c
 8009bb0:	cccccccd 	.word	0xcccccccd
 8009bb4:	40020880 	.word	0x40020880

08009bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bc8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8009bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a09      	ldr	r2, [pc, #36]	@ (8009c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8009bdc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	f003 0303 	and.w	r3, r3, #3
 8009be6:	2201      	movs	r2, #1
 8009be8:	409a      	lsls	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8009bee:	bf00      	nop
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	1000823f 	.word	0x1000823f
 8009c00:	40020940 	.word	0x40020940

08009c04 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c12:	e14c      	b.n	8009eae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	2101      	movs	r1, #1
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c20:	4013      	ands	r3, r2
 8009c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 813e 	beq.w	8009ea8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	f003 0303 	and.w	r3, r3, #3
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d005      	beq.n	8009c44 <HAL_GPIO_Init+0x40>
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f003 0303 	and.w	r3, r3, #3
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d130      	bne.n	8009ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	005b      	lsls	r3, r3, #1
 8009c4e:	2203      	movs	r2, #3
 8009c50:	fa02 f303 	lsl.w	r3, r2, r3
 8009c54:	43db      	mvns	r3, r3
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	4013      	ands	r3, r2
 8009c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	68da      	ldr	r2, [r3, #12]
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	005b      	lsls	r3, r3, #1
 8009c64:	fa02 f303 	lsl.w	r3, r2, r3
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c82:	43db      	mvns	r3, r3
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	4013      	ands	r3, r2
 8009c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	091b      	lsrs	r3, r3, #4
 8009c90:	f003 0201 	and.w	r2, r3, #1
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f003 0303 	and.w	r3, r3, #3
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d017      	beq.n	8009ce2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	005b      	lsls	r3, r3, #1
 8009cbc:	2203      	movs	r2, #3
 8009cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc2:	43db      	mvns	r3, r3
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	689a      	ldr	r2, [r3, #8]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f003 0303 	and.w	r3, r3, #3
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d123      	bne.n	8009d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	08da      	lsrs	r2, r3, #3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	3208      	adds	r2, #8
 8009cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	220f      	movs	r2, #15
 8009d06:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0a:	43db      	mvns	r3, r3
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	4013      	ands	r3, r2
 8009d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	691a      	ldr	r2, [r3, #16]
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	08da      	lsrs	r2, r3, #3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	3208      	adds	r2, #8
 8009d30:	6939      	ldr	r1, [r7, #16]
 8009d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	005b      	lsls	r3, r3, #1
 8009d40:	2203      	movs	r2, #3
 8009d42:	fa02 f303 	lsl.w	r3, r2, r3
 8009d46:	43db      	mvns	r3, r3
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f003 0203 	and.w	r2, r3, #3
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f000 8098 	beq.w	8009ea8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8009d78:	4a54      	ldr	r2, [pc, #336]	@ (8009ecc <HAL_GPIO_Init+0x2c8>)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	089b      	lsrs	r3, r3, #2
 8009d7e:	3302      	adds	r3, #2
 8009d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f003 0303 	and.w	r3, r3, #3
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	220f      	movs	r2, #15
 8009d90:	fa02 f303 	lsl.w	r3, r2, r3
 8009d94:	43db      	mvns	r3, r3
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009da2:	d019      	beq.n	8009dd8 <HAL_GPIO_Init+0x1d4>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a4a      	ldr	r2, [pc, #296]	@ (8009ed0 <HAL_GPIO_Init+0x2cc>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d013      	beq.n	8009dd4 <HAL_GPIO_Init+0x1d0>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a49      	ldr	r2, [pc, #292]	@ (8009ed4 <HAL_GPIO_Init+0x2d0>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d00d      	beq.n	8009dd0 <HAL_GPIO_Init+0x1cc>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a48      	ldr	r2, [pc, #288]	@ (8009ed8 <HAL_GPIO_Init+0x2d4>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d007      	beq.n	8009dcc <HAL_GPIO_Init+0x1c8>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a47      	ldr	r2, [pc, #284]	@ (8009edc <HAL_GPIO_Init+0x2d8>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d101      	bne.n	8009dc8 <HAL_GPIO_Init+0x1c4>
 8009dc4:	2304      	movs	r3, #4
 8009dc6:	e008      	b.n	8009dda <HAL_GPIO_Init+0x1d6>
 8009dc8:	2307      	movs	r3, #7
 8009dca:	e006      	b.n	8009dda <HAL_GPIO_Init+0x1d6>
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e004      	b.n	8009dda <HAL_GPIO_Init+0x1d6>
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	e002      	b.n	8009dda <HAL_GPIO_Init+0x1d6>
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e000      	b.n	8009dda <HAL_GPIO_Init+0x1d6>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	f002 0203 	and.w	r2, r2, #3
 8009de0:	0092      	lsls	r2, r2, #2
 8009de2:	4093      	lsls	r3, r2
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009dea:	4938      	ldr	r1, [pc, #224]	@ (8009ecc <HAL_GPIO_Init+0x2c8>)
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	089b      	lsrs	r3, r3, #2
 8009df0:	3302      	adds	r3, #2
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009df8:	4b39      	ldr	r3, [pc, #228]	@ (8009ee0 <HAL_GPIO_Init+0x2dc>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	43db      	mvns	r3, r3
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	4013      	ands	r3, r2
 8009e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009e1c:	4a30      	ldr	r2, [pc, #192]	@ (8009ee0 <HAL_GPIO_Init+0x2dc>)
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009e22:	4b2f      	ldr	r3, [pc, #188]	@ (8009ee0 <HAL_GPIO_Init+0x2dc>)
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	43db      	mvns	r3, r3
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	4013      	ands	r3, r2
 8009e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009e46:	4a26      	ldr	r2, [pc, #152]	@ (8009ee0 <HAL_GPIO_Init+0x2dc>)
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009e4c:	4b24      	ldr	r3, [pc, #144]	@ (8009ee0 <HAL_GPIO_Init+0x2dc>)
 8009e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	43db      	mvns	r3, r3
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009e72:	4a1b      	ldr	r2, [pc, #108]	@ (8009ee0 <HAL_GPIO_Init+0x2dc>)
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8009e7a:	4b19      	ldr	r3, [pc, #100]	@ (8009ee0 <HAL_GPIO_Init+0x2dc>)
 8009e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	43db      	mvns	r3, r3
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	4013      	ands	r3, r2
 8009e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8009ee0 <HAL_GPIO_Init+0x2dc>)
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f47f aeab 	bne.w	8009c14 <HAL_GPIO_Init+0x10>
  }
}
 8009ebe:	bf00      	nop
 8009ec0:	bf00      	nop
 8009ec2:	371c      	adds	r7, #28
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	40010000 	.word	0x40010000
 8009ed0:	48000400 	.word	0x48000400
 8009ed4:	48000800 	.word	0x48000800
 8009ed8:	48000c00 	.word	0x48000c00
 8009edc:	48001000 	.word	0x48001000
 8009ee0:	58000800 	.word	0x58000800

08009ee4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	691a      	ldr	r2, [r3, #16]
 8009ef4:	887b      	ldrh	r3, [r7, #2]
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009efc:	2301      	movs	r3, #1
 8009efe:	73fb      	strb	r3, [r7, #15]
 8009f00:	e001      	b.n	8009f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	807b      	strh	r3, [r7, #2]
 8009f20:	4613      	mov	r3, r2
 8009f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009f24:	787b      	ldrb	r3, [r7, #1]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009f2a:	887a      	ldrh	r2, [r7, #2]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009f30:	e002      	b.n	8009f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009f32:	887a      	ldrh	r2, [r7, #2]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009f4e:	4b08      	ldr	r3, [pc, #32]	@ (8009f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	88fb      	ldrh	r3, [r7, #6]
 8009f54:	4013      	ands	r3, r2
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d006      	beq.n	8009f68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009f5a:	4a05      	ldr	r2, [pc, #20]	@ (8009f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009f5c:	88fb      	ldrh	r3, [r7, #6]
 8009f5e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009f60:	88fb      	ldrh	r3, [r7, #6]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7f8 fa34 	bl	80023d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	58000800 	.word	0x58000800

08009f74 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8009f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009fa4 <HAL_HSEM_IRQHandler+0x30>)
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009f80:	4b08      	ldr	r3, [pc, #32]	@ (8009fa4 <HAL_HSEM_IRQHandler+0x30>)
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	43db      	mvns	r3, r3
 8009f88:	4906      	ldr	r1, [pc, #24]	@ (8009fa4 <HAL_HSEM_IRQHandler+0x30>)
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8009f8e:	4a05      	ldr	r2, [pc, #20]	@ (8009fa4 <HAL_HSEM_IRQHandler+0x30>)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f807 	bl	8009fa8 <HAL_HSEM_FreeCallback>
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	58001500 	.word	0x58001500

08009fa8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e08d      	b.n	800a0ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d106      	bne.n	8009fe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7f7 fb10 	bl	8001608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2224      	movs	r2, #36	@ 0x24
 8009fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f022 0201 	bic.w	r2, r2, #1
 8009ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a00c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a01c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d107      	bne.n	800a036 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a032:	609a      	str	r2, [r3, #8]
 800a034:	e006      	b.n	800a044 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	689a      	ldr	r2, [r3, #8]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a042:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d108      	bne.n	800a05e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a05a:	605a      	str	r2, [r3, #4]
 800a05c:	e007      	b.n	800a06e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	685a      	ldr	r2, [r3, #4]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a06c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a07c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a080:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68da      	ldr	r2, [r3, #12]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a090:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	691a      	ldr	r2, [r3, #16]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	69d9      	ldr	r1, [r3, #28]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a1a      	ldr	r2, [r3, #32]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0201 	orr.w	r2, r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af02      	add	r7, sp, #8
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	607a      	str	r2, [r7, #4]
 800a0fe:	461a      	mov	r2, r3
 800a100:	460b      	mov	r3, r1
 800a102:	817b      	strh	r3, [r7, #10]
 800a104:	4613      	mov	r3, r2
 800a106:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b20      	cmp	r3, #32
 800a112:	f040 80fd 	bne.w	800a310 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d101      	bne.n	800a124 <HAL_I2C_Master_Transmit+0x30>
 800a120:	2302      	movs	r3, #2
 800a122:	e0f6      	b.n	800a312 <HAL_I2C_Master_Transmit+0x21e>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a12c:	f7fd ffc4 	bl	80080b8 <HAL_GetTick>
 800a130:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	2319      	movs	r3, #25
 800a138:	2201      	movs	r2, #1
 800a13a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 fdcc 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e0e1      	b.n	800a312 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2221      	movs	r2, #33	@ 0x21
 800a152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2210      	movs	r2, #16
 800a15a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	893a      	ldrh	r2, [r7, #8]
 800a16e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	2bff      	cmp	r3, #255	@ 0xff
 800a17e:	d906      	bls.n	800a18e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	22ff      	movs	r2, #255	@ 0xff
 800a184:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a186:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	e007      	b.n	800a19e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a192:	b29a      	uxth	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a198:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a19c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d024      	beq.n	800a1f0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1aa:	781a      	ldrb	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	3301      	adds	r3, #1
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	8979      	ldrh	r1, [r7, #10]
 800a1e2:	4b4e      	ldr	r3, [pc, #312]	@ (800a31c <HAL_I2C_Master_Transmit+0x228>)
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f000 ffc7 	bl	800b17c <I2C_TransferConfig>
 800a1ee:	e066      	b.n	800a2be <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	8979      	ldrh	r1, [r7, #10]
 800a1f8:	4b48      	ldr	r3, [pc, #288]	@ (800a31c <HAL_I2C_Master_Transmit+0x228>)
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 ffbc 	bl	800b17c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800a204:	e05b      	b.n	800a2be <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	6a39      	ldr	r1, [r7, #32]
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 fdbf 	bl	800ad8e <I2C_WaitOnTXISFlagUntilTimeout>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e07b      	b.n	800a312 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21e:	781a      	ldrb	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a234:	b29b      	uxth	r3, r3
 800a236:	3b01      	subs	r3, #1
 800a238:	b29a      	uxth	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a242:	3b01      	subs	r3, #1
 800a244:	b29a      	uxth	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a24e:	b29b      	uxth	r3, r3
 800a250:	2b00      	cmp	r3, #0
 800a252:	d034      	beq.n	800a2be <HAL_I2C_Master_Transmit+0x1ca>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d130      	bne.n	800a2be <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	6a3b      	ldr	r3, [r7, #32]
 800a262:	2200      	movs	r2, #0
 800a264:	2180      	movs	r1, #128	@ 0x80
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f000 fd38 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e04d      	b.n	800a312 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	2bff      	cmp	r3, #255	@ 0xff
 800a27e:	d90e      	bls.n	800a29e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	22ff      	movs	r2, #255	@ 0xff
 800a284:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	8979      	ldrh	r1, [r7, #10]
 800a28e:	2300      	movs	r3, #0
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f000 ff70 	bl	800b17c <I2C_TransferConfig>
 800a29c:	e00f      	b.n	800a2be <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	8979      	ldrh	r1, [r7, #10]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f000 ff5f 	bl	800b17c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d19e      	bne.n	800a206 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	6a39      	ldr	r1, [r7, #32]
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 fda5 	bl	800ae1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d001      	beq.n	800a2dc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e01a      	b.n	800a312 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2220      	movs	r2, #32
 800a2e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6859      	ldr	r1, [r3, #4]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a320 <HAL_I2C_Master_Transmit+0x22c>)
 800a2f0:	400b      	ands	r3, r1
 800a2f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2220      	movs	r2, #32
 800a2f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	e000      	b.n	800a312 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800a310:	2302      	movs	r3, #2
  }
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	80002000 	.word	0x80002000
 800a320:	fe00e800 	.word	0xfe00e800

0800a324 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b088      	sub	sp, #32
 800a328:	af02      	add	r7, sp, #8
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	607a      	str	r2, [r7, #4]
 800a32e:	461a      	mov	r2, r3
 800a330:	460b      	mov	r3, r1
 800a332:	817b      	strh	r3, [r7, #10]
 800a334:	4613      	mov	r3, r2
 800a336:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b20      	cmp	r3, #32
 800a342:	f040 80db 	bne.w	800a4fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d101      	bne.n	800a354 <HAL_I2C_Master_Receive+0x30>
 800a350:	2302      	movs	r3, #2
 800a352:	e0d4      	b.n	800a4fe <HAL_I2C_Master_Receive+0x1da>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a35c:	f7fd feac 	bl	80080b8 <HAL_GetTick>
 800a360:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	2319      	movs	r3, #25
 800a368:	2201      	movs	r2, #1
 800a36a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f000 fcb4 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e0bf      	b.n	800a4fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2222      	movs	r2, #34	@ 0x22
 800a382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2210      	movs	r2, #16
 800a38a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	893a      	ldrh	r2, [r7, #8]
 800a39e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	2bff      	cmp	r3, #255	@ 0xff
 800a3ae:	d90e      	bls.n	800a3ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	22ff      	movs	r2, #255	@ 0xff
 800a3b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	8979      	ldrh	r1, [r7, #10]
 800a3be:	4b52      	ldr	r3, [pc, #328]	@ (800a508 <HAL_I2C_Master_Receive+0x1e4>)
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 fed8 	bl	800b17c <I2C_TransferConfig>
 800a3cc:	e06d      	b.n	800a4aa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	8979      	ldrh	r1, [r7, #10]
 800a3e0:	4b49      	ldr	r3, [pc, #292]	@ (800a508 <HAL_I2C_Master_Receive+0x1e4>)
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f000 fec7 	bl	800b17c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a3ee:	e05c      	b.n	800a4aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	6a39      	ldr	r1, [r7, #32]
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f000 fd55 	bl	800aea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e07c      	b.n	800a4fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a420:	3b01      	subs	r3, #1
 800a422:	b29a      	uxth	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	3b01      	subs	r3, #1
 800a430:	b29a      	uxth	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d034      	beq.n	800a4aa <HAL_I2C_Master_Receive+0x186>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a444:	2b00      	cmp	r3, #0
 800a446:	d130      	bne.n	800a4aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	2200      	movs	r2, #0
 800a450:	2180      	movs	r1, #128	@ 0x80
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 fc42 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e04d      	b.n	800a4fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a466:	b29b      	uxth	r3, r3
 800a468:	2bff      	cmp	r3, #255	@ 0xff
 800a46a:	d90e      	bls.n	800a48a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	22ff      	movs	r2, #255	@ 0xff
 800a470:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a476:	b2da      	uxtb	r2, r3
 800a478:	8979      	ldrh	r1, [r7, #10]
 800a47a:	2300      	movs	r3, #0
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 fe7a 	bl	800b17c <I2C_TransferConfig>
 800a488:	e00f      	b.n	800a4aa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a48e:	b29a      	uxth	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	8979      	ldrh	r1, [r7, #10]
 800a49c:	2300      	movs	r3, #0
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 fe69 	bl	800b17c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d19d      	bne.n	800a3f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	6a39      	ldr	r1, [r7, #32]
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 fcaf 	bl	800ae1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e01a      	b.n	800a4fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6859      	ldr	r1, [r3, #4]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	4b0c      	ldr	r3, [pc, #48]	@ (800a50c <HAL_I2C_Master_Receive+0x1e8>)
 800a4dc:	400b      	ands	r3, r1
 800a4de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	e000      	b.n	800a4fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a4fc:	2302      	movs	r3, #2
  }
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3718      	adds	r7, #24
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	80002400 	.word	0x80002400
 800a50c:	fe00e800 	.word	0xfe00e800

0800a510 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af02      	add	r7, sp, #8
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	4608      	mov	r0, r1
 800a51a:	4611      	mov	r1, r2
 800a51c:	461a      	mov	r2, r3
 800a51e:	4603      	mov	r3, r0
 800a520:	817b      	strh	r3, [r7, #10]
 800a522:	460b      	mov	r3, r1
 800a524:	813b      	strh	r3, [r7, #8]
 800a526:	4613      	mov	r3, r2
 800a528:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a530:	b2db      	uxtb	r3, r3
 800a532:	2b20      	cmp	r3, #32
 800a534:	f040 80f9 	bne.w	800a72a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d002      	beq.n	800a544 <HAL_I2C_Mem_Write+0x34>
 800a53e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a540:	2b00      	cmp	r3, #0
 800a542:	d105      	bne.n	800a550 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a54a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e0ed      	b.n	800a72c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a556:	2b01      	cmp	r3, #1
 800a558:	d101      	bne.n	800a55e <HAL_I2C_Mem_Write+0x4e>
 800a55a:	2302      	movs	r3, #2
 800a55c:	e0e6      	b.n	800a72c <HAL_I2C_Mem_Write+0x21c>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a566:	f7fd fda7 	bl	80080b8 <HAL_GetTick>
 800a56a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	2319      	movs	r3, #25
 800a572:	2201      	movs	r2, #1
 800a574:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 fbaf 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e0d1      	b.n	800a72c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2221      	movs	r2, #33	@ 0x21
 800a58c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2240      	movs	r2, #64	@ 0x40
 800a594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6a3a      	ldr	r2, [r7, #32]
 800a5a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a5a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a5b0:	88f8      	ldrh	r0, [r7, #6]
 800a5b2:	893a      	ldrh	r2, [r7, #8]
 800a5b4:	8979      	ldrh	r1, [r7, #10]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	4603      	mov	r3, r0
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f000 fabf 	bl	800ab44 <I2C_RequestMemoryWrite>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d005      	beq.n	800a5d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e0a9      	b.n	800a72c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	2bff      	cmp	r3, #255	@ 0xff
 800a5e0:	d90e      	bls.n	800a600 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	22ff      	movs	r2, #255	@ 0xff
 800a5e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	8979      	ldrh	r1, [r7, #10]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 fdbf 	bl	800b17c <I2C_TransferConfig>
 800a5fe:	e00f      	b.n	800a620 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a604:	b29a      	uxth	r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	8979      	ldrh	r1, [r7, #10]
 800a612:	2300      	movs	r3, #0
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 fdae 	bl	800b17c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 fbb2 	bl	800ad8e <I2C_WaitOnTXISFlagUntilTimeout>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e07b      	b.n	800a72c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a638:	781a      	ldrb	r2, [r3, #0]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a644:	1c5a      	adds	r2, r3, #1
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a64e:	b29b      	uxth	r3, r3
 800a650:	3b01      	subs	r3, #1
 800a652:	b29a      	uxth	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a65c:	3b01      	subs	r3, #1
 800a65e:	b29a      	uxth	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a668:	b29b      	uxth	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d034      	beq.n	800a6d8 <HAL_I2C_Mem_Write+0x1c8>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a672:	2b00      	cmp	r3, #0
 800a674:	d130      	bne.n	800a6d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67c:	2200      	movs	r2, #0
 800a67e:	2180      	movs	r1, #128	@ 0x80
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 fb2b 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e04d      	b.n	800a72c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a694:	b29b      	uxth	r3, r3
 800a696:	2bff      	cmp	r3, #255	@ 0xff
 800a698:	d90e      	bls.n	800a6b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	22ff      	movs	r2, #255	@ 0xff
 800a69e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	8979      	ldrh	r1, [r7, #10]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 fd63 	bl	800b17c <I2C_TransferConfig>
 800a6b6:	e00f      	b.n	800a6d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	8979      	ldrh	r1, [r7, #10]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 fd52 	bl	800b17c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d19e      	bne.n	800a620 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f000 fb98 	bl	800ae1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e01a      	b.n	800a72c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6859      	ldr	r1, [r3, #4]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	4b0a      	ldr	r3, [pc, #40]	@ (800a734 <HAL_I2C_Mem_Write+0x224>)
 800a70a:	400b      	ands	r3, r1
 800a70c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2220      	movs	r2, #32
 800a712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	e000      	b.n	800a72c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a72a:	2302      	movs	r3, #2
  }
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	fe00e800 	.word	0xfe00e800

0800a738 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b088      	sub	sp, #32
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	4608      	mov	r0, r1
 800a742:	4611      	mov	r1, r2
 800a744:	461a      	mov	r2, r3
 800a746:	4603      	mov	r3, r0
 800a748:	817b      	strh	r3, [r7, #10]
 800a74a:	460b      	mov	r3, r1
 800a74c:	813b      	strh	r3, [r7, #8]
 800a74e:	4613      	mov	r3, r2
 800a750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b20      	cmp	r3, #32
 800a75c:	f040 80fd 	bne.w	800a95a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d002      	beq.n	800a76c <HAL_I2C_Mem_Read+0x34>
 800a766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d105      	bne.n	800a778 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a772:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e0f1      	b.n	800a95c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d101      	bne.n	800a786 <HAL_I2C_Mem_Read+0x4e>
 800a782:	2302      	movs	r3, #2
 800a784:	e0ea      	b.n	800a95c <HAL_I2C_Mem_Read+0x224>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a78e:	f7fd fc93 	bl	80080b8 <HAL_GetTick>
 800a792:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	2319      	movs	r3, #25
 800a79a:	2201      	movs	r2, #1
 800a79c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 fa9b 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e0d5      	b.n	800a95c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2222      	movs	r2, #34	@ 0x22
 800a7b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2240      	movs	r2, #64	@ 0x40
 800a7bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6a3a      	ldr	r2, [r7, #32]
 800a7ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a7d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a7d8:	88f8      	ldrh	r0, [r7, #6]
 800a7da:	893a      	ldrh	r2, [r7, #8]
 800a7dc:	8979      	ldrh	r1, [r7, #10]
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f000 f9ff 	bl	800abec <I2C_RequestMemoryRead>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d005      	beq.n	800a800 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e0ad      	b.n	800a95c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a804:	b29b      	uxth	r3, r3
 800a806:	2bff      	cmp	r3, #255	@ 0xff
 800a808:	d90e      	bls.n	800a828 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	22ff      	movs	r2, #255	@ 0xff
 800a80e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a814:	b2da      	uxtb	r2, r3
 800a816:	8979      	ldrh	r1, [r7, #10]
 800a818:	4b52      	ldr	r3, [pc, #328]	@ (800a964 <HAL_I2C_Mem_Read+0x22c>)
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 fcab 	bl	800b17c <I2C_TransferConfig>
 800a826:	e00f      	b.n	800a848 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a836:	b2da      	uxtb	r2, r3
 800a838:	8979      	ldrh	r1, [r7, #10]
 800a83a:	4b4a      	ldr	r3, [pc, #296]	@ (800a964 <HAL_I2C_Mem_Read+0x22c>)
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 fc9a 	bl	800b17c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84e:	2200      	movs	r2, #0
 800a850:	2104      	movs	r1, #4
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 fa42 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e07c      	b.n	800a95c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86c:	b2d2      	uxtb	r2, r2
 800a86e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a87e:	3b01      	subs	r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	3b01      	subs	r3, #1
 800a88e:	b29a      	uxth	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a898:	b29b      	uxth	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d034      	beq.n	800a908 <HAL_I2C_Mem_Read+0x1d0>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d130      	bne.n	800a908 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2180      	movs	r1, #128	@ 0x80
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f000 fa13 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e04d      	b.n	800a95c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	2bff      	cmp	r3, #255	@ 0xff
 800a8c8:	d90e      	bls.n	800a8e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	22ff      	movs	r2, #255	@ 0xff
 800a8ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	8979      	ldrh	r1, [r7, #10]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 fc4b 	bl	800b17c <I2C_TransferConfig>
 800a8e6:	e00f      	b.n	800a908 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	8979      	ldrh	r1, [r7, #10]
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 fc3a 	bl	800b17c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d19a      	bne.n	800a848 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 fa80 	bl	800ae1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e01a      	b.n	800a95c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2220      	movs	r2, #32
 800a92c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6859      	ldr	r1, [r3, #4]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	4b0b      	ldr	r3, [pc, #44]	@ (800a968 <HAL_I2C_Mem_Read+0x230>)
 800a93a:	400b      	ands	r3, r1
 800a93c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2220      	movs	r2, #32
 800a942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	e000      	b.n	800a95c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a95a:	2302      	movs	r3, #2
  }
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	80002400 	.word	0x80002400
 800a968:	fe00e800 	.word	0xfe00e800

0800a96c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08a      	sub	sp, #40	@ 0x28
 800a970:	af02      	add	r7, sp, #8
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	607a      	str	r2, [r7, #4]
 800a976:	603b      	str	r3, [r7, #0]
 800a978:	460b      	mov	r3, r1
 800a97a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b20      	cmp	r3, #32
 800a98a:	f040 80d6 	bne.w	800ab3a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a99c:	d101      	bne.n	800a9a2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800a99e:	2302      	movs	r3, #2
 800a9a0:	e0cc      	b.n	800ab3c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d101      	bne.n	800a9b0 <HAL_I2C_IsDeviceReady+0x44>
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	e0c5      	b.n	800ab3c <HAL_I2C_IsDeviceReady+0x1d0>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2224      	movs	r2, #36	@ 0x24
 800a9bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d107      	bne.n	800a9de <HAL_I2C_IsDeviceReady+0x72>
 800a9ce:	897b      	ldrh	r3, [r7, #10]
 800a9d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a9d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a9dc:	e006      	b.n	800a9ec <HAL_I2C_IsDeviceReady+0x80>
 800a9de:	897b      	ldrh	r3, [r7, #10]
 800a9e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a9e8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	6812      	ldr	r2, [r2, #0]
 800a9f0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800a9f2:	f7fd fb61 	bl	80080b8 <HAL_GetTick>
 800a9f6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	f003 0320 	and.w	r3, r3, #32
 800aa02:	2b20      	cmp	r3, #32
 800aa04:	bf0c      	ite	eq
 800aa06:	2301      	moveq	r3, #1
 800aa08:	2300      	movne	r3, #0
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	f003 0310 	and.w	r3, r3, #16
 800aa18:	2b10      	cmp	r3, #16
 800aa1a:	bf0c      	ite	eq
 800aa1c:	2301      	moveq	r3, #1
 800aa1e:	2300      	movne	r3, #0
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800aa24:	e034      	b.n	800aa90 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa2c:	d01a      	beq.n	800aa64 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aa2e:	f7fd fb43 	bl	80080b8 <HAL_GetTick>
 800aa32:	4602      	mov	r2, r0
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d302      	bcc.n	800aa44 <HAL_I2C_IsDeviceReady+0xd8>
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10f      	bne.n	800aa64 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2220      	movs	r2, #32
 800aa48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa50:	f043 0220 	orr.w	r2, r3, #32
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e06b      	b.n	800ab3c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	f003 0320 	and.w	r3, r3, #32
 800aa6e:	2b20      	cmp	r3, #32
 800aa70:	bf0c      	ite	eq
 800aa72:	2301      	moveq	r3, #1
 800aa74:	2300      	movne	r3, #0
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	f003 0310 	and.w	r3, r3, #16
 800aa84:	2b10      	cmp	r3, #16
 800aa86:	bf0c      	ite	eq
 800aa88:	2301      	moveq	r3, #1
 800aa8a:	2300      	movne	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800aa90:	7ffb      	ldrb	r3, [r7, #31]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d102      	bne.n	800aa9c <HAL_I2C_IsDeviceReady+0x130>
 800aa96:	7fbb      	ldrb	r3, [r7, #30]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d0c4      	beq.n	800aa26 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	f003 0310 	and.w	r3, r3, #16
 800aaa6:	2b10      	cmp	r3, #16
 800aaa8:	d01a      	beq.n	800aae0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	2200      	movs	r2, #0
 800aab2:	2120      	movs	r1, #32
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f000 f911 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d001      	beq.n	800aac4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e03b      	b.n	800ab3c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2220      	movs	r2, #32
 800aaca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2220      	movs	r2, #32
 800aad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	e02d      	b.n	800ab3c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	2200      	movs	r2, #0
 800aae8:	2120      	movs	r1, #32
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f000 f8f6 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e020      	b.n	800ab3c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2210      	movs	r2, #16
 800ab00:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2220      	movs	r2, #32
 800ab08:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	f63f af56 	bhi.w	800a9c6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2220      	movs	r2, #32
 800ab1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab26:	f043 0220 	orr.w	r2, r3, #32
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e000      	b.n	800ab3c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800ab3a:	2302      	movs	r3, #2
  }
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af02      	add	r7, sp, #8
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	4608      	mov	r0, r1
 800ab4e:	4611      	mov	r1, r2
 800ab50:	461a      	mov	r2, r3
 800ab52:	4603      	mov	r3, r0
 800ab54:	817b      	strh	r3, [r7, #10]
 800ab56:	460b      	mov	r3, r1
 800ab58:	813b      	strh	r3, [r7, #8]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ab5e:	88fb      	ldrh	r3, [r7, #6]
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	8979      	ldrh	r1, [r7, #10]
 800ab64:	4b20      	ldr	r3, [pc, #128]	@ (800abe8 <I2C_RequestMemoryWrite+0xa4>)
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f000 fb05 	bl	800b17c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	69b9      	ldr	r1, [r7, #24]
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 f909 	bl	800ad8e <I2C_WaitOnTXISFlagUntilTimeout>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e02c      	b.n	800abe0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab86:	88fb      	ldrh	r3, [r7, #6]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d105      	bne.n	800ab98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ab8c:	893b      	ldrh	r3, [r7, #8]
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	629a      	str	r2, [r3, #40]	@ 0x28
 800ab96:	e015      	b.n	800abc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ab98:	893b      	ldrh	r3, [r7, #8]
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	b2da      	uxtb	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aba6:	69fa      	ldr	r2, [r7, #28]
 800aba8:	69b9      	ldr	r1, [r7, #24]
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 f8ef 	bl	800ad8e <I2C_WaitOnTXISFlagUntilTimeout>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e012      	b.n	800abe0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800abba:	893b      	ldrh	r3, [r7, #8]
 800abbc:	b2da      	uxtb	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	2200      	movs	r2, #0
 800abcc:	2180      	movs	r1, #128	@ 0x80
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f000 f884 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d001      	beq.n	800abde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	e000      	b.n	800abe0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	80002000 	.word	0x80002000

0800abec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b086      	sub	sp, #24
 800abf0:	af02      	add	r7, sp, #8
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	4608      	mov	r0, r1
 800abf6:	4611      	mov	r1, r2
 800abf8:	461a      	mov	r2, r3
 800abfa:	4603      	mov	r3, r0
 800abfc:	817b      	strh	r3, [r7, #10]
 800abfe:	460b      	mov	r3, r1
 800ac00:	813b      	strh	r3, [r7, #8]
 800ac02:	4613      	mov	r3, r2
 800ac04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ac06:	88fb      	ldrh	r3, [r7, #6]
 800ac08:	b2da      	uxtb	r2, r3
 800ac0a:	8979      	ldrh	r1, [r7, #10]
 800ac0c:	4b20      	ldr	r3, [pc, #128]	@ (800ac90 <I2C_RequestMemoryRead+0xa4>)
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	2300      	movs	r3, #0
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f000 fab2 	bl	800b17c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac18:	69fa      	ldr	r2, [r7, #28]
 800ac1a:	69b9      	ldr	r1, [r7, #24]
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f000 f8b6 	bl	800ad8e <I2C_WaitOnTXISFlagUntilTimeout>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e02c      	b.n	800ac86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ac2c:	88fb      	ldrh	r3, [r7, #6]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d105      	bne.n	800ac3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ac32:	893b      	ldrh	r3, [r7, #8]
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	629a      	str	r2, [r3, #40]	@ 0x28
 800ac3c:	e015      	b.n	800ac6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ac3e:	893b      	ldrh	r3, [r7, #8]
 800ac40:	0a1b      	lsrs	r3, r3, #8
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac4c:	69fa      	ldr	r2, [r7, #28]
 800ac4e:	69b9      	ldr	r1, [r7, #24]
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 f89c 	bl	800ad8e <I2C_WaitOnTXISFlagUntilTimeout>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e012      	b.n	800ac86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ac60:	893b      	ldrh	r3, [r7, #8]
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	2200      	movs	r2, #0
 800ac72:	2140      	movs	r1, #64	@ 0x40
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 f831 	bl	800acdc <I2C_WaitOnFlagUntilTimeout>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e000      	b.n	800ac86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	80002000 	.word	0x80002000

0800ac94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	f003 0302 	and.w	r3, r3, #2
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d103      	bne.n	800acb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2200      	movs	r2, #0
 800acb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	699b      	ldr	r3, [r3, #24]
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d007      	beq.n	800acd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	699a      	ldr	r2, [r3, #24]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f042 0201 	orr.w	r2, r2, #1
 800acce:	619a      	str	r2, [r3, #24]
  }
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	603b      	str	r3, [r7, #0]
 800ace8:	4613      	mov	r3, r2
 800acea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800acec:	e03b      	b.n	800ad66 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800acee:	69ba      	ldr	r2, [r7, #24]
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f000 f962 	bl	800afbc <I2C_IsErrorOccurred>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e041      	b.n	800ad86 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad08:	d02d      	beq.n	800ad66 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad0a:	f7fd f9d5 	bl	80080b8 <HAL_GetTick>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d302      	bcc.n	800ad20 <I2C_WaitOnFlagUntilTimeout+0x44>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d122      	bne.n	800ad66 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	699a      	ldr	r2, [r3, #24]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	4013      	ands	r3, r2
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	bf0c      	ite	eq
 800ad30:	2301      	moveq	r3, #1
 800ad32:	2300      	movne	r3, #0
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	461a      	mov	r2, r3
 800ad38:	79fb      	ldrb	r3, [r7, #7]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d113      	bne.n	800ad66 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad42:	f043 0220 	orr.w	r2, r3, #32
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2220      	movs	r2, #32
 800ad4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e00f      	b.n	800ad86 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	699a      	ldr	r2, [r3, #24]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	4013      	ands	r3, r2
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	bf0c      	ite	eq
 800ad76:	2301      	moveq	r3, #1
 800ad78:	2300      	movne	r3, #0
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	79fb      	ldrb	r3, [r7, #7]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d0b4      	beq.n	800acee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b084      	sub	sp, #16
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	60f8      	str	r0, [r7, #12]
 800ad96:	60b9      	str	r1, [r7, #8]
 800ad98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ad9a:	e033      	b.n	800ae04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	68b9      	ldr	r1, [r7, #8]
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f000 f90b 	bl	800afbc <I2C_IsErrorOccurred>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d001      	beq.n	800adb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	e031      	b.n	800ae14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adb6:	d025      	beq.n	800ae04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adb8:	f7fd f97e 	bl	80080b8 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d302      	bcc.n	800adce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d11a      	bne.n	800ae04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	f003 0302 	and.w	r3, r3, #2
 800add8:	2b02      	cmp	r3, #2
 800adda:	d013      	beq.n	800ae04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ade0:	f043 0220 	orr.w	r2, r3, #32
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2220      	movs	r2, #32
 800adec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	e007      	b.n	800ae14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	f003 0302 	and.w	r3, r3, #2
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d1c4      	bne.n	800ad9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae28:	e02f      	b.n	800ae8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	68b9      	ldr	r1, [r7, #8]
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f000 f8c4 	bl	800afbc <I2C_IsErrorOccurred>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d001      	beq.n	800ae3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e02d      	b.n	800ae9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae3e:	f7fd f93b 	bl	80080b8 <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d302      	bcc.n	800ae54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d11a      	bne.n	800ae8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	f003 0320 	and.w	r3, r3, #32
 800ae5e:	2b20      	cmp	r3, #32
 800ae60:	d013      	beq.n	800ae8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae66:	f043 0220 	orr.w	r2, r3, #32
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2220      	movs	r2, #32
 800ae72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e007      	b.n	800ae9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	f003 0320 	and.w	r3, r3, #32
 800ae94:	2b20      	cmp	r3, #32
 800ae96:	d1c8      	bne.n	800ae2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
	...

0800aea4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800aeb4:	e071      	b.n	800af9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	68b9      	ldr	r1, [r7, #8]
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f000 f87e 	bl	800afbc <I2C_IsErrorOccurred>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	f003 0320 	and.w	r3, r3, #32
 800aed4:	2b20      	cmp	r3, #32
 800aed6:	d13b      	bne.n	800af50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d138      	bne.n	800af50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	f003 0304 	and.w	r3, r3, #4
 800aee8:	2b04      	cmp	r3, #4
 800aeea:	d105      	bne.n	800aef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	699b      	ldr	r3, [r3, #24]
 800aefe:	f003 0310 	and.w	r3, r3, #16
 800af02:	2b10      	cmp	r3, #16
 800af04:	d121      	bne.n	800af4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2210      	movs	r2, #16
 800af0c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2204      	movs	r2, #4
 800af12:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2220      	movs	r2, #32
 800af1a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6859      	ldr	r1, [r3, #4]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	4b24      	ldr	r3, [pc, #144]	@ (800afb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800af28:	400b      	ands	r3, r1
 800af2a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2220      	movs	r2, #32
 800af30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	75fb      	strb	r3, [r7, #23]
 800af48:	e002      	b.n	800af50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800af50:	f7fd f8b2 	bl	80080b8 <HAL_GetTick>
 800af54:	4602      	mov	r2, r0
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d302      	bcc.n	800af66 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d119      	bne.n	800af9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d116      	bne.n	800af9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	f003 0304 	and.w	r3, r3, #4
 800af76:	2b04      	cmp	r3, #4
 800af78:	d00f      	beq.n	800af9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af7e:	f043 0220 	orr.w	r2, r3, #32
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2220      	movs	r2, #32
 800af8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	d002      	beq.n	800afae <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d083      	beq.n	800aeb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800afae:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	fe00e800 	.word	0xfe00e800

0800afbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08a      	sub	sp, #40	@ 0x28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	f003 0310 	and.w	r3, r3, #16
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d068      	beq.n	800b0ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2210      	movs	r2, #16
 800afee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aff0:	e049      	b.n	800b086 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aff8:	d045      	beq.n	800b086 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800affa:	f7fd f85d 	bl	80080b8 <HAL_GetTick>
 800affe:	4602      	mov	r2, r0
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	429a      	cmp	r2, r3
 800b008:	d302      	bcc.n	800b010 <I2C_IsErrorOccurred+0x54>
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d13a      	bne.n	800b086 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b01a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b022:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b02e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b032:	d121      	bne.n	800b078 <I2C_IsErrorOccurred+0xbc>
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b03a:	d01d      	beq.n	800b078 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b03c:	7cfb      	ldrb	r3, [r7, #19]
 800b03e:	2b20      	cmp	r3, #32
 800b040:	d01a      	beq.n	800b078 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b050:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b052:	f7fd f831 	bl	80080b8 <HAL_GetTick>
 800b056:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b058:	e00e      	b.n	800b078 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b05a:	f7fd f82d 	bl	80080b8 <HAL_GetTick>
 800b05e:	4602      	mov	r2, r0
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	2b19      	cmp	r3, #25
 800b066:	d907      	bls.n	800b078 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b068:	6a3b      	ldr	r3, [r7, #32]
 800b06a:	f043 0320 	orr.w	r3, r3, #32
 800b06e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b076:	e006      	b.n	800b086 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	f003 0320 	and.w	r3, r3, #32
 800b082:	2b20      	cmp	r3, #32
 800b084:	d1e9      	bne.n	800b05a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	f003 0320 	and.w	r3, r3, #32
 800b090:	2b20      	cmp	r3, #32
 800b092:	d003      	beq.n	800b09c <I2C_IsErrorOccurred+0xe0>
 800b094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d0aa      	beq.n	800aff2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b09c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d103      	bne.n	800b0ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2220      	movs	r2, #32
 800b0aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	f043 0304 	orr.w	r3, r3, #4
 800b0b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00b      	beq.n	800b0e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	f043 0301 	orr.w	r3, r3, #1
 800b0d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b0dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00b      	beq.n	800b106 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	f043 0308 	orr.w	r3, r3, #8
 800b0f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b0fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00b      	beq.n	800b128 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b110:	6a3b      	ldr	r3, [r7, #32]
 800b112:	f043 0302 	orr.w	r3, r3, #2
 800b116:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b120:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d01c      	beq.n	800b16a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7ff fdaf 	bl	800ac94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6859      	ldr	r1, [r3, #4]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	4b0d      	ldr	r3, [pc, #52]	@ (800b178 <I2C_IsErrorOccurred+0x1bc>)
 800b142:	400b      	ands	r3, r1
 800b144:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b14a:	6a3b      	ldr	r3, [r7, #32]
 800b14c:	431a      	orrs	r2, r3
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2220      	movs	r2, #32
 800b156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b16a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3728      	adds	r7, #40	@ 0x28
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	fe00e800 	.word	0xfe00e800

0800b17c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b087      	sub	sp, #28
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	607b      	str	r3, [r7, #4]
 800b186:	460b      	mov	r3, r1
 800b188:	817b      	strh	r3, [r7, #10]
 800b18a:	4613      	mov	r3, r2
 800b18c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b18e:	897b      	ldrh	r3, [r7, #10]
 800b190:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b194:	7a7b      	ldrb	r3, [r7, #9]
 800b196:	041b      	lsls	r3, r3, #16
 800b198:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b19c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1a2:	6a3b      	ldr	r3, [r7, #32]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	685a      	ldr	r2, [r3, #4]
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	0d5b      	lsrs	r3, r3, #21
 800b1b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b1ba:	4b08      	ldr	r3, [pc, #32]	@ (800b1dc <I2C_TransferConfig+0x60>)
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	43db      	mvns	r3, r3
 800b1c0:	ea02 0103 	and.w	r1, r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	430a      	orrs	r2, r1
 800b1cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b1ce:	bf00      	nop
 800b1d0:	371c      	adds	r7, #28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	03ff63ff 	.word	0x03ff63ff

0800b1e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	2b20      	cmp	r3, #32
 800b1f4:	d138      	bne.n	800b268 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d101      	bne.n	800b204 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b200:	2302      	movs	r3, #2
 800b202:	e032      	b.n	800b26a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2224      	movs	r2, #36	@ 0x24
 800b210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 0201 	bic.w	r2, r2, #1
 800b222:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b232:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6819      	ldr	r1, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	430a      	orrs	r2, r1
 800b242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f042 0201 	orr.w	r2, r2, #1
 800b252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2220      	movs	r2, #32
 800b258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b264:	2300      	movs	r3, #0
 800b266:	e000      	b.n	800b26a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b268:	2302      	movs	r3, #2
  }
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b276:	b480      	push	{r7}
 800b278:	b085      	sub	sp, #20
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b20      	cmp	r3, #32
 800b28a:	d139      	bne.n	800b300 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b292:	2b01      	cmp	r3, #1
 800b294:	d101      	bne.n	800b29a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b296:	2302      	movs	r3, #2
 800b298:	e033      	b.n	800b302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2224      	movs	r2, #36	@ 0x24
 800b2a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f022 0201 	bic.w	r2, r2, #1
 800b2b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b2c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	021b      	lsls	r3, r3, #8
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f042 0201 	orr.w	r2, r2, #1
 800b2ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2220      	movs	r2, #32
 800b2f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	e000      	b.n	800b302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b300:	2302      	movs	r3, #2
  }
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
	...

0800b310 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800b318:	2300      	movs	r3, #0
 800b31a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d01e      	beq.n	800b360 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800b322:	4b13      	ldr	r3, [pc, #76]	@ (800b370 <HAL_IPCC_Init+0x60>)
 800b324:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d102      	bne.n	800b338 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7f6 fa0e 	bl	8001754 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800b338:	68b8      	ldr	r0, [r7, #8]
 800b33a:	f000 f8f5 	bl	800b528 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f8c6 	bl	800b4dc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b35e:	e001      	b.n	800b364 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800b364:	7bfb      	ldrb	r3, [r7, #15]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	58000c00 	.word	0x58000c00

0800b374 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800b37c:	2300      	movs	r3, #0
 800b37e:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800b380:	4b22      	ldr	r3, [pc, #136]	@ (800b40c <HAL_IPCC_TX_IRQHandler+0x98>)
 800b382:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	43db      	mvns	r3, r3
 800b38a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800b38e:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	041b      	lsls	r3, r3, #16
 800b396:	43db      	mvns	r3, r3
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	4013      	ands	r3, r2
 800b39c:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800b39e:	e02c      	b.n	800b3fa <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f003 030f 	and.w	r3, r3, #15
 800b3a6:	3310      	adds	r3, #16
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ae:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d01c      	beq.n	800b3f4 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	685a      	ldr	r2, [r3, #4]
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	431a      	orrs	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	3306      	adds	r3, #6
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d009      	beq.n	800b3ea <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	3306      	adds	r3, #6
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	6939      	ldr	r1, [r7, #16]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	43db      	mvns	r3, r3
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1cf      	bne.n	800b3a0 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 800b400:	bf00      	nop
 800b402:	bf00      	nop
 800b404:	3718      	adds	r7, #24
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	58000c00 	.word	0x58000c00

0800b410 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b088      	sub	sp, #32
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800b418:	2300      	movs	r3, #0
 800b41a:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800b41c:	4b20      	ldr	r3, [pc, #128]	@ (800b4a0 <HAL_IPCC_RX_IRQHandler+0x90>)
 800b41e:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 800b420:	4b20      	ldr	r3, [pc, #128]	@ (800b4a4 <HAL_IPCC_RX_IRQHandler+0x94>)
 800b422:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	43db      	mvns	r3, r3
 800b42a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b42e:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	69fa      	ldr	r2, [r7, #28]
 800b436:	4013      	ands	r3, r2
 800b438:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800b43a:	e029      	b.n	800b490 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	f003 030f 	and.w	r3, r3, #15
 800b442:	2201      	movs	r2, #1
 800b444:	fa02 f303 	lsl.w	r3, r2, r3
 800b448:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 800b44a:	69fa      	ldr	r2, [r7, #28]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	4013      	ands	r3, r2
 800b450:	2b00      	cmp	r3, #0
 800b452:	d01a      	beq.n	800b48a <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	685a      	ldr	r2, [r3, #4]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	431a      	orrs	r2, r3
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4413      	add	r3, r2
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d008      	beq.n	800b480 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4413      	add	r3, r2
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	69b9      	ldr	r1, [r7, #24]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	43db      	mvns	r3, r3
 800b484:	69fa      	ldr	r2, [r7, #28]
 800b486:	4013      	ands	r3, r2
 800b488:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	3301      	adds	r3, #1
 800b48e:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1d2      	bne.n	800b43c <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 800b496:	bf00      	nop
 800b498:	bf00      	nop
 800b49a:	3720      	adds	r7, #32
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	58000c00 	.word	0x58000c00
 800b4a4:	58000c10 	.word	0x58000c10

0800b4a8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b085      	sub	sp, #20
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	60f8      	str	r0, [r7, #12]
 800b4ca:	60b9      	str	r1, [r7, #8]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800b4d0:	bf00      	nop
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	60fb      	str	r3, [r7, #12]
 800b4e8:	e00f      	b.n	800b50a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	4a0b      	ldr	r2, [pc, #44]	@ (800b520 <IPCC_SetDefaultCallbacks+0x44>)
 800b4f4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3306      	adds	r3, #6
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	4a08      	ldr	r2, [pc, #32]	@ (800b524 <IPCC_SetDefaultCallbacks+0x48>)
 800b502:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	3301      	adds	r3, #1
 800b508:	60fb      	str	r3, [r7, #12]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b05      	cmp	r3, #5
 800b50e:	d9ec      	bls.n	800b4ea <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800b510:	bf00      	nop
 800b512:	bf00      	nop
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	0800b4a9 	.word	0x0800b4a9
 800b524:	0800b4c3 	.word	0x0800b4c3

0800b528 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800b53c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	223f      	movs	r2, #63	@ 0x3f
 800b542:	609a      	str	r2, [r3, #8]
}
 800b544:	bf00      	nop
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800b558:	4b06      	ldr	r3, [pc, #24]	@ (800b574 <LL_EXTI_EnableIT_0_31+0x24>)
 800b55a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800b55e:	4905      	ldr	r1, [pc, #20]	@ (800b574 <LL_EXTI_EnableIT_0_31+0x24>)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4313      	orrs	r3, r2
 800b564:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	58000800 	.word	0x58000800

0800b578 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800b580:	4b07      	ldr	r3, [pc, #28]	@ (800b5a0 <LL_EXTI_DisableIT_0_31+0x28>)
 800b582:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	43db      	mvns	r3, r3
 800b58a:	4905      	ldr	r1, [pc, #20]	@ (800b5a0 <LL_EXTI_DisableIT_0_31+0x28>)
 800b58c:	4013      	ands	r3, r2
 800b58e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800b592:	bf00      	nop
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	58000800 	.word	0x58000800

0800b5a4 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 800b5ac:	4b07      	ldr	r3, [pc, #28]	@ (800b5cc <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800b5ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	43db      	mvns	r3, r3
 800b5b6:	4905      	ldr	r1, [pc, #20]	@ (800b5cc <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
}
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	58000800 	.word	0x58000800

0800b5d0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800b5d8:	4b05      	ldr	r3, [pc, #20]	@ (800b5f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	4904      	ldr	r1, [pc, #16]	@ (800b5f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	600b      	str	r3, [r1, #0]

}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	58000800 	.word	0x58000800

0800b5f4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800b5fc:	4b06      	ldr	r3, [pc, #24]	@ (800b618 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	43db      	mvns	r3, r3
 800b604:	4904      	ldr	r1, [pc, #16]	@ (800b618 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800b606:	4013      	ands	r3, r2
 800b608:	600b      	str	r3, [r1, #0]

}
 800b60a:	bf00      	nop
 800b60c:	370c      	adds	r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	58000800 	.word	0x58000800

0800b61c <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800b624:	4b05      	ldr	r3, [pc, #20]	@ (800b63c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800b626:	685a      	ldr	r2, [r3, #4]
 800b628:	4904      	ldr	r1, [pc, #16]	@ (800b63c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	604b      	str	r3, [r1, #4]
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	58000800 	.word	0x58000800

0800b640 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800b648:	4b06      	ldr	r3, [pc, #24]	@ (800b664 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800b64a:	685a      	ldr	r2, [r3, #4]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	43db      	mvns	r3, r3
 800b650:	4904      	ldr	r1, [pc, #16]	@ (800b664 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800b652:	4013      	ands	r3, r2
 800b654:	604b      	str	r3, [r1, #4]
}
 800b656:	bf00      	nop
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	58000800 	.word	0x58000800

0800b668 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b668:	b480      	push	{r7}
 800b66a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b66c:	4b05      	ldr	r3, [pc, #20]	@ (800b684 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a04      	ldr	r2, [pc, #16]	@ (800b684 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b676:	6013      	str	r3, [r2, #0]
}
 800b678:	bf00      	nop
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	58000400 	.word	0x58000400

0800b688 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800b690:	4b1d      	ldr	r3, [pc, #116]	@ (800b708 <HAL_PWR_ConfigPVD+0x80>)
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	f023 020e 	bic.w	r2, r3, #14
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	491a      	ldr	r1, [pc, #104]	@ (800b708 <HAL_PWR_ConfigPVD+0x80>)
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 800b6a2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b6a6:	f7ff ff67 	bl	800b578 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 800b6aa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b6ae:	f7ff ff79 	bl	800b5a4 <LL_C2_EXTI_DisableIT_0_31>

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800b6b2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b6b6:	f7ff ffc3 	bl	800b640 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800b6ba:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b6be:	f7ff ff99 	bl	800b5f4 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d003      	beq.n	800b6d6 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800b6ce:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b6d2:	f7ff ff3d 	bl	800b550 <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d003      	beq.n	800b6ea <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800b6e2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b6e6:	f7ff ff73 	bl	800b5d0 <LL_EXTI_EnableRisingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	f003 0302 	and.w	r3, r3, #2
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d003      	beq.n	800b6fe <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800b6f6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b6fa:	f7ff ff8f 	bl	800b61c <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	58000400 	.word	0x58000400

0800b70c <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800b70c:	b480      	push	{r7}
 800b70e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800b710:	4b05      	ldr	r3, [pc, #20]	@ (800b728 <HAL_PWR_EnablePVD+0x1c>)
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	4a04      	ldr	r2, [pc, #16]	@ (800b728 <HAL_PWR_EnablePVD+0x1c>)
 800b716:	f043 0301 	orr.w	r3, r3, #1
 800b71a:	6053      	str	r3, [r2, #4]
}
 800b71c:	bf00      	nop
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	58000400 	.word	0x58000400

0800b72c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b72c:	b480      	push	{r7}
 800b72e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800b730:	4b04      	ldr	r3, [pc, #16]	@ (800b744 <HAL_PWREx_GetVoltageRange+0x18>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800b738:	4618      	mov	r0, r3
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	58000400 	.word	0x58000400

0800b748 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800b748:	b480      	push	{r7}
 800b74a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800b74c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b75a:	d101      	bne.n	800b760 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800b75c:	2301      	movs	r3, #1
 800b75e:	e000      	b.n	800b762 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800b760:	2300      	movs	r3, #0
}
 800b762:	4618      	mov	r0, r3
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <LL_RCC_HSE_Enable>:
{
 800b76c:	b480      	push	{r7}
 800b76e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b77a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b77e:	6013      	str	r3, [r2, #0]
}
 800b780:	bf00      	nop
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <LL_RCC_HSE_Disable>:
{
 800b78a:	b480      	push	{r7}
 800b78c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b78e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b79c:	6013      	str	r3, [r2, #0]
}
 800b79e:	bf00      	nop
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <LL_RCC_HSE_IsReady>:
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b7ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7ba:	d101      	bne.n	800b7c0 <LL_RCC_HSE_IsReady+0x18>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e000      	b.n	800b7c2 <LL_RCC_HSE_IsReady+0x1a>
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <LL_RCC_HSI_Enable>:
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b7d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7de:	6013      	str	r3, [r2, #0]
}
 800b7e0:	bf00      	nop
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <LL_RCC_HSI_Disable>:
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b7ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7fc:	6013      	str	r3, [r2, #0]
}
 800b7fe:	bf00      	nop
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <LL_RCC_HSI_IsReady>:
{
 800b808:	b480      	push	{r7}
 800b80a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b80c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b81a:	d101      	bne.n	800b820 <LL_RCC_HSI_IsReady+0x18>
 800b81c:	2301      	movs	r3, #1
 800b81e:	e000      	b.n	800b822 <LL_RCC_HSI_IsReady+0x1a>
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <LL_RCC_HSI_SetCalibTrimming>:
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	061b      	lsls	r3, r3, #24
 800b842:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b846:	4313      	orrs	r3, r2
 800b848:	604b      	str	r3, [r1, #4]
}
 800b84a:	bf00      	nop
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <LL_RCC_HSI48_Enable>:
{
 800b856:	b480      	push	{r7}
 800b858:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b85a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b85e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b862:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b866:	f043 0301 	orr.w	r3, r3, #1
 800b86a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b86e:	bf00      	nop
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <LL_RCC_HSI48_Disable>:
{
 800b878:	b480      	push	{r7}
 800b87a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b87c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b880:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b884:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b888:	f023 0301 	bic.w	r3, r3, #1
 800b88c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b890:	bf00      	nop
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <LL_RCC_HSI48_IsReady>:
{
 800b89a:	b480      	push	{r7}
 800b89c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b89e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b8a6:	f003 0302 	and.w	r3, r3, #2
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d101      	bne.n	800b8b2 <LL_RCC_HSI48_IsReady+0x18>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e000      	b.n	800b8b4 <LL_RCC_HSI48_IsReady+0x1a>
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <LL_RCC_LSE_Enable>:
{
 800b8be:	b480      	push	{r7}
 800b8c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b8c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8ce:	f043 0301 	orr.w	r3, r3, #1
 800b8d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b8d6:	bf00      	nop
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <LL_RCC_LSE_Disable>:
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b8e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8f0:	f023 0301 	bic.w	r3, r3, #1
 800b8f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b8f8:	bf00      	nop
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <LL_RCC_LSE_EnableBypass>:
{
 800b902:	b480      	push	{r7}
 800b904:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b90a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b90e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b912:	f043 0304 	orr.w	r3, r3, #4
 800b916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b91a:	bf00      	nop
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <LL_RCC_LSE_DisableBypass>:
{
 800b924:	b480      	push	{r7}
 800b926:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b930:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b934:	f023 0304 	bic.w	r3, r3, #4
 800b938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b93c:	bf00      	nop
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <LL_RCC_LSE_IsReady>:
{
 800b946:	b480      	push	{r7}
 800b948:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b94a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b02      	cmp	r3, #2
 800b958:	d101      	bne.n	800b95e <LL_RCC_LSE_IsReady+0x18>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <LL_RCC_LSE_IsReady+0x1a>
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr

0800b96a <LL_RCC_LSI1_Enable>:
{
 800b96a:	b480      	push	{r7}
 800b96c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b96e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b976:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b97a:	f043 0301 	orr.w	r3, r3, #1
 800b97e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b982:	bf00      	nop
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <LL_RCC_LSI1_Disable>:
{
 800b98c:	b480      	push	{r7}
 800b98e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b998:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b99c:	f023 0301 	bic.w	r3, r3, #1
 800b9a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b9a4:	bf00      	nop
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <LL_RCC_LSI1_IsReady>:
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b9b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9ba:	f003 0302 	and.w	r3, r3, #2
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d101      	bne.n	800b9c6 <LL_RCC_LSI1_IsReady+0x18>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e000      	b.n	800b9c8 <LL_RCC_LSI1_IsReady+0x1a>
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <LL_RCC_LSI2_Enable>:
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b9d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9e2:	f043 0304 	orr.w	r3, r3, #4
 800b9e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b9ea:	bf00      	nop
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <LL_RCC_LSI2_Disable>:
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b9f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba04:	f023 0304 	bic.w	r3, r3, #4
 800ba08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ba0c:	bf00      	nop
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <LL_RCC_LSI2_IsReady>:
{
 800ba16:	b480      	push	{r7}
 800ba18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800ba1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba22:	f003 0308 	and.w	r3, r3, #8
 800ba26:	2b08      	cmp	r3, #8
 800ba28:	d101      	bne.n	800ba2e <LL_RCC_LSI2_IsReady+0x18>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e000      	b.n	800ba30 <LL_RCC_LSI2_IsReady+0x1a>
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <LL_RCC_LSI2_SetTrimming>:
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800ba42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	021b      	lsls	r3, r3, #8
 800ba52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba56:	4313      	orrs	r3, r2
 800ba58:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <LL_RCC_MSI_Enable>:
{
 800ba68:	b480      	push	{r7}
 800ba6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800ba6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba76:	f043 0301 	orr.w	r3, r3, #1
 800ba7a:	6013      	str	r3, [r2, #0]
}
 800ba7c:	bf00      	nop
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <LL_RCC_MSI_Disable>:
{
 800ba86:	b480      	push	{r7}
 800ba88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800ba8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba94:	f023 0301 	bic.w	r3, r3, #1
 800ba98:	6013      	str	r3, [r2, #0]
}
 800ba9a:	bf00      	nop
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <LL_RCC_MSI_IsReady>:
{
 800baa4:	b480      	push	{r7}
 800baa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800baa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 0302 	and.w	r3, r3, #2
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d101      	bne.n	800baba <LL_RCC_MSI_IsReady+0x16>
 800bab6:	2301      	movs	r3, #1
 800bab8:	e000      	b.n	800babc <LL_RCC_MSI_IsReady+0x18>
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <LL_RCC_MSI_SetRange>:
{
 800bac6:	b480      	push	{r7}
 800bac8:	b083      	sub	sp, #12
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800bace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4313      	orrs	r3, r2
 800bae0:	600b      	str	r3, [r1, #0]
}
 800bae2:	bf00      	nop
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <LL_RCC_MSI_GetRange>:
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800baf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bafe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2bb0      	cmp	r3, #176	@ 0xb0
 800bb04:	d901      	bls.n	800bb0a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800bb06:	23b0      	movs	r3, #176	@ 0xb0
 800bb08:	607b      	str	r3, [r7, #4]
  return msiRange;
 800bb0a:	687b      	ldr	r3, [r7, #4]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <LL_RCC_MSI_SetCalibTrimming>:
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800bb20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	021b      	lsls	r3, r3, #8
 800bb2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb32:	4313      	orrs	r3, r2
 800bb34:	604b      	str	r3, [r1, #4]
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <LL_RCC_SetSysClkSource>:
{
 800bb42:	b480      	push	{r7}
 800bb44:	b083      	sub	sp, #12
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bb4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	f023 0203 	bic.w	r2, r3, #3
 800bb54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	608b      	str	r3, [r1, #8]
}
 800bb5e:	bf00      	nop
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <LL_RCC_GetSysClkSource>:
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bb6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f003 030c 	and.w	r3, r3, #12
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <LL_RCC_SetAHBPrescaler>:
{
 800bb82:	b480      	push	{r7}
 800bb84:	b083      	sub	sp, #12
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800bb8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bb94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	608b      	str	r3, [r1, #8]
}
 800bb9e:	bf00      	nop
 800bba0:	370c      	adds	r7, #12
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr

0800bbaa <LL_C2_RCC_SetAHBPrescaler>:
{
 800bbaa:	b480      	push	{r7}
 800bbac:	b083      	sub	sp, #12
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800bbb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bbba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bbbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bbca:	bf00      	nop
 800bbcc:	370c      	adds	r7, #12
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr

0800bbd6 <LL_RCC_SetAHB4Prescaler>:
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800bbde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbe2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bbe6:	f023 020f 	bic.w	r2, r3, #15
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	091b      	lsrs	r3, r3, #4
 800bbee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <LL_RCC_SetAPB1Prescaler>:
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bc0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bc16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	608b      	str	r3, [r1, #8]
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <LL_RCC_SetAPB2Prescaler>:
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800bc34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bc3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	608b      	str	r3, [r1, #8]
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <LL_RCC_GetAHBPrescaler>:
{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800bc58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <LL_RCC_GetAHB4Prescaler>:
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800bc70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc74:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bc78:	011b      	lsls	r3, r3, #4
 800bc7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <LL_RCC_GetAPB1Prescaler>:
{
 800bc88:	b480      	push	{r7}
 800bc8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800bc8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <LL_RCC_GetAPB2Prescaler>:
{
 800bca0:	b480      	push	{r7}
 800bca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800bca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800bcbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bcc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bcca:	6013      	str	r3, [r2, #0]
}
 800bccc:	bf00      	nop
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800bcda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bce4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bce8:	6013      	str	r3, [r2, #0]
}
 800bcea:	bf00      	nop
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800bcf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd06:	d101      	bne.n	800bd0c <LL_RCC_PLL_IsReady+0x18>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e000      	b.n	800bd0e <LL_RCC_PLL_IsReady+0x1a>
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bd1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800bd32:	b480      	push	{r7}
 800bd34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800bd36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800bd4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800bd62:	b480      	push	{r7}
 800bd64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bd66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f003 0303 	and.w	r3, r3, #3
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800bd7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd8c:	d101      	bne.n	800bd92 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e000      	b.n	800bd94 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800bda2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bda6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bdaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdb2:	d101      	bne.n	800bdb8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e000      	b.n	800bdba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800bdc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdcc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bdd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bdd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdd8:	d101      	bne.n	800bdde <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800bdda:	2301      	movs	r3, #1
 800bddc:	e000      	b.n	800bde0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800bdea:	b480      	push	{r7}
 800bdec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800bdee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdfc:	d101      	bne.n	800be02 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800bdfe:	2301      	movs	r3, #1
 800be00:	e000      	b.n	800be04 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800be0e:	b480      	push	{r7}
 800be10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800be12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800be1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be20:	d101      	bne.n	800be26 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800be22:	2301      	movs	r3, #1
 800be24:	e000      	b.n	800be28 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800be26:	2300      	movs	r3, #0
}
 800be28:	4618      	mov	r0, r3
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
	...

0800be34 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800be34:	b590      	push	{r4, r7, lr}
 800be36:	b08d      	sub	sp, #52	@ 0x34
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d101      	bne.n	800be46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e363      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 0320 	and.w	r3, r3, #32
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 808d 	beq.w	800bf6e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800be54:	f7ff fe89 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800be58:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800be5a:	f7ff ff82 	bl	800bd62 <LL_RCC_PLL_GetMainSource>
 800be5e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800be60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be62:	2b00      	cmp	r3, #0
 800be64:	d005      	beq.n	800be72 <HAL_RCC_OscConfig+0x3e>
 800be66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be68:	2b0c      	cmp	r3, #12
 800be6a:	d147      	bne.n	800befc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800be6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d144      	bne.n	800befc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	69db      	ldr	r3, [r3, #28]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e347      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800be82:	f7ff fe34 	bl	800baee <LL_RCC_MSI_GetRange>
 800be86:	4603      	mov	r3, r0
 800be88:	429c      	cmp	r4, r3
 800be8a:	d914      	bls.n	800beb6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be90:	4618      	mov	r0, r3
 800be92:	f000 fd2f 	bl	800c8f4 <RCC_SetFlashLatencyFromMSIRange>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d001      	beq.n	800bea0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e336      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff fe0e 	bl	800bac6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff fe32 	bl	800bb18 <LL_RCC_MSI_SetCalibTrimming>
 800beb4:	e013      	b.n	800bede <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beba:	4618      	mov	r0, r3
 800bebc:	f7ff fe03 	bl	800bac6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a1b      	ldr	r3, [r3, #32]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff fe27 	bl	800bb18 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 fd10 	bl	800c8f4 <RCC_SetFlashLatencyFromMSIRange>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e317      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800bede:	f000 fcc9 	bl	800c874 <HAL_RCC_GetHCLKFreq>
 800bee2:	4603      	mov	r3, r0
 800bee4:	4aa4      	ldr	r2, [pc, #656]	@ (800c178 <HAL_RCC_OscConfig+0x344>)
 800bee6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bee8:	4ba4      	ldr	r3, [pc, #656]	@ (800c17c <HAL_RCC_OscConfig+0x348>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4618      	mov	r0, r3
 800beee:	f7fc f895 	bl	800801c <HAL_InitTick>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d039      	beq.n	800bf6c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	e308      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	69db      	ldr	r3, [r3, #28]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d01e      	beq.n	800bf42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bf04:	f7ff fdb0 	bl	800ba68 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bf08:	f7fc f8d6 	bl	80080b8 <HAL_GetTick>
 800bf0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800bf0e:	e008      	b.n	800bf22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bf10:	f7fc f8d2 	bl	80080b8 <HAL_GetTick>
 800bf14:	4602      	mov	r2, r0
 800bf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	2b02      	cmp	r3, #2
 800bf1c:	d901      	bls.n	800bf22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	e2f5      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800bf22:	f7ff fdbf 	bl	800baa4 <LL_RCC_MSI_IsReady>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d0f1      	beq.n	800bf10 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff fdc8 	bl	800bac6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7ff fdec 	bl	800bb18 <LL_RCC_MSI_SetCalibTrimming>
 800bf40:	e015      	b.n	800bf6e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bf42:	f7ff fda0 	bl	800ba86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bf46:	f7fc f8b7 	bl	80080b8 <HAL_GetTick>
 800bf4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800bf4c:	e008      	b.n	800bf60 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bf4e:	f7fc f8b3 	bl	80080b8 <HAL_GetTick>
 800bf52:	4602      	mov	r2, r0
 800bf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	d901      	bls.n	800bf60 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	e2d6      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800bf60:	f7ff fda0 	bl	800baa4 <LL_RCC_MSI_IsReady>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1f1      	bne.n	800bf4e <HAL_RCC_OscConfig+0x11a>
 800bf6a:	e000      	b.n	800bf6e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bf6c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f003 0301 	and.w	r3, r3, #1
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d047      	beq.n	800c00a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf7a:	f7ff fdf6 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800bf7e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bf80:	f7ff feef 	bl	800bd62 <LL_RCC_PLL_GetMainSource>
 800bf84:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	2b08      	cmp	r3, #8
 800bf8a:	d005      	beq.n	800bf98 <HAL_RCC_OscConfig+0x164>
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
 800bf8e:	2b0c      	cmp	r3, #12
 800bf90:	d108      	bne.n	800bfa4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	d105      	bne.n	800bfa4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d134      	bne.n	800c00a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e2b4      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfac:	d102      	bne.n	800bfb4 <HAL_RCC_OscConfig+0x180>
 800bfae:	f7ff fbdd 	bl	800b76c <LL_RCC_HSE_Enable>
 800bfb2:	e001      	b.n	800bfb8 <HAL_RCC_OscConfig+0x184>
 800bfb4:	f7ff fbe9 	bl	800b78a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d012      	beq.n	800bfe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfc0:	f7fc f87a 	bl	80080b8 <HAL_GetTick>
 800bfc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800bfc6:	e008      	b.n	800bfda <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfc8:	f7fc f876 	bl	80080b8 <HAL_GetTick>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	2b64      	cmp	r3, #100	@ 0x64
 800bfd4:	d901      	bls.n	800bfda <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	e299      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800bfda:	f7ff fbe5 	bl	800b7a8 <LL_RCC_HSE_IsReady>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0f1      	beq.n	800bfc8 <HAL_RCC_OscConfig+0x194>
 800bfe4:	e011      	b.n	800c00a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfe6:	f7fc f867 	bl	80080b8 <HAL_GetTick>
 800bfea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800bfec:	e008      	b.n	800c000 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfee:	f7fc f863 	bl	80080b8 <HAL_GetTick>
 800bff2:	4602      	mov	r2, r0
 800bff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	2b64      	cmp	r3, #100	@ 0x64
 800bffa:	d901      	bls.n	800c000 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bffc:	2303      	movs	r3, #3
 800bffe:	e286      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c000:	f7ff fbd2 	bl	800b7a8 <LL_RCC_HSE_IsReady>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1f1      	bne.n	800bfee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 0302 	and.w	r3, r3, #2
 800c012:	2b00      	cmp	r3, #0
 800c014:	d04c      	beq.n	800c0b0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c016:	f7ff fda8 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800c01a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c01c:	f7ff fea1 	bl	800bd62 <LL_RCC_PLL_GetMainSource>
 800c020:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	2b04      	cmp	r3, #4
 800c026:	d005      	beq.n	800c034 <HAL_RCC_OscConfig+0x200>
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	2b0c      	cmp	r3, #12
 800c02c:	d10e      	bne.n	800c04c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	2b02      	cmp	r3, #2
 800c032:	d10b      	bne.n	800c04c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e266      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff fbf1 	bl	800b82c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c04a:	e031      	b.n	800c0b0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d019      	beq.n	800c088 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c054:	f7ff fbba 	bl	800b7cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c058:	f7fc f82e 	bl	80080b8 <HAL_GetTick>
 800c05c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c05e:	e008      	b.n	800c072 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c060:	f7fc f82a 	bl	80080b8 <HAL_GetTick>
 800c064:	4602      	mov	r2, r0
 800c066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d901      	bls.n	800c072 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c06e:	2303      	movs	r3, #3
 800c070:	e24d      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c072:	f7ff fbc9 	bl	800b808 <LL_RCC_HSI_IsReady>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d0f1      	beq.n	800c060 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	4618      	mov	r0, r3
 800c082:	f7ff fbd3 	bl	800b82c <LL_RCC_HSI_SetCalibTrimming>
 800c086:	e013      	b.n	800c0b0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c088:	f7ff fbaf 	bl	800b7ea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c08c:	f7fc f814 	bl	80080b8 <HAL_GetTick>
 800c090:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c092:	e008      	b.n	800c0a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c094:	f7fc f810 	bl	80080b8 <HAL_GetTick>
 800c098:	4602      	mov	r2, r0
 800c09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09c:	1ad3      	subs	r3, r2, r3
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	d901      	bls.n	800c0a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	e233      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c0a6:	f7ff fbaf 	bl	800b808 <LL_RCC_HSI_IsReady>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1f1      	bne.n	800c094 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 0308 	and.w	r3, r3, #8
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d106      	bne.n	800c0ca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 80a3 	beq.w	800c210 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d076      	beq.n	800c1c0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f003 0310 	and.w	r3, r3, #16
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d046      	beq.n	800c16c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c0de:	f7ff fc66 	bl	800b9ae <LL_RCC_LSI1_IsReady>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d113      	bne.n	800c110 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c0e8:	f7ff fc3f 	bl	800b96a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c0ec:	f7fb ffe4 	bl	80080b8 <HAL_GetTick>
 800c0f0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c0f2:	e008      	b.n	800c106 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c0f4:	f7fb ffe0 	bl	80080b8 <HAL_GetTick>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d901      	bls.n	800c106 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c102:	2303      	movs	r3, #3
 800c104:	e203      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c106:	f7ff fc52 	bl	800b9ae <LL_RCC_LSI1_IsReady>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d0f1      	beq.n	800c0f4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c110:	f7ff fc5f 	bl	800b9d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c114:	f7fb ffd0 	bl	80080b8 <HAL_GetTick>
 800c118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c11a:	e008      	b.n	800c12e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c11c:	f7fb ffcc 	bl	80080b8 <HAL_GetTick>
 800c120:	4602      	mov	r2, r0
 800c122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	2b03      	cmp	r3, #3
 800c128:	d901      	bls.n	800c12e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c12a:	2303      	movs	r3, #3
 800c12c:	e1ef      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c12e:	f7ff fc72 	bl	800ba16 <LL_RCC_LSI2_IsReady>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d0f1      	beq.n	800c11c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff fc7c 	bl	800ba3a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c142:	f7ff fc23 	bl	800b98c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c146:	f7fb ffb7 	bl	80080b8 <HAL_GetTick>
 800c14a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c14c:	e008      	b.n	800c160 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c14e:	f7fb ffb3 	bl	80080b8 <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d901      	bls.n	800c160 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e1d6      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c160:	f7ff fc25 	bl	800b9ae <LL_RCC_LSI1_IsReady>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1f1      	bne.n	800c14e <HAL_RCC_OscConfig+0x31a>
 800c16a:	e051      	b.n	800c210 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c16c:	f7ff fbfd 	bl	800b96a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c170:	f7fb ffa2 	bl	80080b8 <HAL_GetTick>
 800c174:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c176:	e00c      	b.n	800c192 <HAL_RCC_OscConfig+0x35e>
 800c178:	2000007c 	.word	0x2000007c
 800c17c:	20000090 	.word	0x20000090
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c180:	f7fb ff9a 	bl	80080b8 <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d901      	bls.n	800c192 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c18e:	2303      	movs	r3, #3
 800c190:	e1bd      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c192:	f7ff fc0c 	bl	800b9ae <LL_RCC_LSI1_IsReady>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d0f1      	beq.n	800c180 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c19c:	f7ff fc2a 	bl	800b9f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c1a0:	e008      	b.n	800c1b4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c1a2:	f7fb ff89 	bl	80080b8 <HAL_GetTick>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	2b03      	cmp	r3, #3
 800c1ae:	d901      	bls.n	800c1b4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	e1ac      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c1b4:	f7ff fc2f 	bl	800ba16 <LL_RCC_LSI2_IsReady>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1f1      	bne.n	800c1a2 <HAL_RCC_OscConfig+0x36e>
 800c1be:	e027      	b.n	800c210 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c1c0:	f7ff fc18 	bl	800b9f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1c4:	f7fb ff78 	bl	80080b8 <HAL_GetTick>
 800c1c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c1ca:	e008      	b.n	800c1de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c1cc:	f7fb ff74 	bl	80080b8 <HAL_GetTick>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d901      	bls.n	800c1de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	e197      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c1de:	f7ff fc1a 	bl	800ba16 <LL_RCC_LSI2_IsReady>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1f1      	bne.n	800c1cc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c1e8:	f7ff fbd0 	bl	800b98c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1ec:	f7fb ff64 	bl	80080b8 <HAL_GetTick>
 800c1f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c1f2:	e008      	b.n	800c206 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c1f4:	f7fb ff60 	bl	80080b8 <HAL_GetTick>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	d901      	bls.n	800c206 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c202:	2303      	movs	r3, #3
 800c204:	e183      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c206:	f7ff fbd2 	bl	800b9ae <LL_RCC_LSI1_IsReady>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1f1      	bne.n	800c1f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 0304 	and.w	r3, r3, #4
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d05b      	beq.n	800c2d4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c21c:	4ba7      	ldr	r3, [pc, #668]	@ (800c4bc <HAL_RCC_OscConfig+0x688>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c224:	2b00      	cmp	r3, #0
 800c226:	d114      	bne.n	800c252 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c228:	f7ff fa1e 	bl	800b668 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c22c:	f7fb ff44 	bl	80080b8 <HAL_GetTick>
 800c230:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c232:	e008      	b.n	800c246 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c234:	f7fb ff40 	bl	80080b8 <HAL_GetTick>
 800c238:	4602      	mov	r2, r0
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	2b02      	cmp	r3, #2
 800c240:	d901      	bls.n	800c246 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c242:	2303      	movs	r3, #3
 800c244:	e163      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c246:	4b9d      	ldr	r3, [pc, #628]	@ (800c4bc <HAL_RCC_OscConfig+0x688>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d0f0      	beq.n	800c234 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d102      	bne.n	800c260 <HAL_RCC_OscConfig+0x42c>
 800c25a:	f7ff fb30 	bl	800b8be <LL_RCC_LSE_Enable>
 800c25e:	e00c      	b.n	800c27a <HAL_RCC_OscConfig+0x446>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	2b05      	cmp	r3, #5
 800c266:	d104      	bne.n	800c272 <HAL_RCC_OscConfig+0x43e>
 800c268:	f7ff fb4b 	bl	800b902 <LL_RCC_LSE_EnableBypass>
 800c26c:	f7ff fb27 	bl	800b8be <LL_RCC_LSE_Enable>
 800c270:	e003      	b.n	800c27a <HAL_RCC_OscConfig+0x446>
 800c272:	f7ff fb35 	bl	800b8e0 <LL_RCC_LSE_Disable>
 800c276:	f7ff fb55 	bl	800b924 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d014      	beq.n	800c2ac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c282:	f7fb ff19 	bl	80080b8 <HAL_GetTick>
 800c286:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c288:	e00a      	b.n	800c2a0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c28a:	f7fb ff15 	bl	80080b8 <HAL_GetTick>
 800c28e:	4602      	mov	r2, r0
 800c290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c298:	4293      	cmp	r3, r2
 800c29a:	d901      	bls.n	800c2a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c29c:	2303      	movs	r3, #3
 800c29e:	e136      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c2a0:	f7ff fb51 	bl	800b946 <LL_RCC_LSE_IsReady>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0ef      	beq.n	800c28a <HAL_RCC_OscConfig+0x456>
 800c2aa:	e013      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2ac:	f7fb ff04 	bl	80080b8 <HAL_GetTick>
 800c2b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c2b2:	e00a      	b.n	800c2ca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2b4:	f7fb ff00 	bl	80080b8 <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d901      	bls.n	800c2ca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	e121      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c2ca:	f7ff fb3c 	bl	800b946 <LL_RCC_LSE_IsReady>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1ef      	bne.n	800c2b4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d02c      	beq.n	800c33a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d014      	beq.n	800c312 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c2e8:	f7ff fab5 	bl	800b856 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2ec:	f7fb fee4 	bl	80080b8 <HAL_GetTick>
 800c2f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c2f2:	e008      	b.n	800c306 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c2f4:	f7fb fee0 	bl	80080b8 <HAL_GetTick>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d901      	bls.n	800c306 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	e103      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c306:	f7ff fac8 	bl	800b89a <LL_RCC_HSI48_IsReady>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d0f1      	beq.n	800c2f4 <HAL_RCC_OscConfig+0x4c0>
 800c310:	e013      	b.n	800c33a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c312:	f7ff fab1 	bl	800b878 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c316:	f7fb fecf 	bl	80080b8 <HAL_GetTick>
 800c31a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c31c:	e008      	b.n	800c330 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c31e:	f7fb fecb 	bl	80080b8 <HAL_GetTick>
 800c322:	4602      	mov	r2, r0
 800c324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d901      	bls.n	800c330 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e0ee      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c330:	f7ff fab3 	bl	800b89a <LL_RCC_HSI48_IsReady>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1f1      	bne.n	800c31e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 80e4 	beq.w	800c50c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c344:	f7ff fc11 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800c348:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c34a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c356:	2b02      	cmp	r3, #2
 800c358:	f040 80b4 	bne.w	800c4c4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f003 0203 	and.w	r2, r3, #3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c366:	429a      	cmp	r2, r3
 800c368:	d123      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c374:	429a      	cmp	r2, r3
 800c376:	d11c      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	0a1b      	lsrs	r3, r3, #8
 800c37c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c384:	429a      	cmp	r2, r3
 800c386:	d114      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c392:	429a      	cmp	r2, r3
 800c394:	d10d      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d106      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d05d      	beq.n	800c46e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	2b0c      	cmp	r3, #12
 800c3b6:	d058      	beq.n	800c46a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c3b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e0a1      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c3ca:	f7ff fc84 	bl	800bcd6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c3ce:	f7fb fe73 	bl	80080b8 <HAL_GetTick>
 800c3d2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c3d4:	e008      	b.n	800c3e8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3d6:	f7fb fe6f 	bl	80080b8 <HAL_GetTick>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d901      	bls.n	800c3e8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e092      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c3e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1ef      	bne.n	800c3d6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c3f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3fa:	68da      	ldr	r2, [r3, #12]
 800c3fc:	4b30      	ldr	r3, [pc, #192]	@ (800c4c0 <HAL_RCC_OscConfig+0x68c>)
 800c3fe:	4013      	ands	r3, r2
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c408:	4311      	orrs	r1, r2
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c40e:	0212      	lsls	r2, r2, #8
 800c410:	4311      	orrs	r1, r2
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c416:	4311      	orrs	r1, r2
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c41c:	4311      	orrs	r1, r2
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c422:	430a      	orrs	r2, r1
 800c424:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c428:	4313      	orrs	r3, r2
 800c42a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c42c:	f7ff fc44 	bl	800bcb8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c43a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c43e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c440:	f7fb fe3a 	bl	80080b8 <HAL_GetTick>
 800c444:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c446:	e008      	b.n	800c45a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c448:	f7fb fe36 	bl	80080b8 <HAL_GetTick>
 800c44c:	4602      	mov	r2, r0
 800c44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	2b02      	cmp	r3, #2
 800c454:	d901      	bls.n	800c45a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c456:	2303      	movs	r3, #3
 800c458:	e059      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c45a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0ef      	beq.n	800c448 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c468:	e050      	b.n	800c50c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	e04f      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c46e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d147      	bne.n	800c50c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c47c:	f7ff fc1c 	bl	800bcb8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c48a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c48e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c490:	f7fb fe12 	bl	80080b8 <HAL_GetTick>
 800c494:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c496:	e008      	b.n	800c4aa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c498:	f7fb fe0e 	bl	80080b8 <HAL_GetTick>
 800c49c:	4602      	mov	r2, r0
 800c49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d901      	bls.n	800c4aa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c4a6:	2303      	movs	r3, #3
 800c4a8:	e031      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d0ef      	beq.n	800c498 <HAL_RCC_OscConfig+0x664>
 800c4b8:	e028      	b.n	800c50c <HAL_RCC_OscConfig+0x6d8>
 800c4ba:	bf00      	nop
 800c4bc:	58000400 	.word	0x58000400
 800c4c0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	2b0c      	cmp	r3, #12
 800c4c8:	d01e      	beq.n	800c508 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c4ca:	f7ff fc04 	bl	800bcd6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4ce:	f7fb fdf3 	bl	80080b8 <HAL_GetTick>
 800c4d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c4d4:	e008      	b.n	800c4e8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4d6:	f7fb fdef 	bl	80080b8 <HAL_GetTick>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d901      	bls.n	800c4e8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	e012      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c4e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1ef      	bne.n	800c4d6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c4f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4fa:	68da      	ldr	r2, [r3, #12]
 800c4fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c500:	4b05      	ldr	r3, [pc, #20]	@ (800c518 <HAL_RCC_OscConfig+0x6e4>)
 800c502:	4013      	ands	r3, r2
 800c504:	60cb      	str	r3, [r1, #12]
 800c506:	e001      	b.n	800c50c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	e000      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3734      	adds	r7, #52	@ 0x34
 800c512:	46bd      	mov	sp, r7
 800c514:	bd90      	pop	{r4, r7, pc}
 800c516:	bf00      	nop
 800c518:	eefefffc 	.word	0xeefefffc

0800c51c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d101      	bne.n	800c530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e12d      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c530:	4b98      	ldr	r3, [pc, #608]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 0307 	and.w	r3, r3, #7
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d91b      	bls.n	800c576 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c53e:	4b95      	ldr	r3, [pc, #596]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f023 0207 	bic.w	r2, r3, #7
 800c546:	4993      	ldr	r1, [pc, #588]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c54e:	f7fb fdb3 	bl	80080b8 <HAL_GetTick>
 800c552:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c554:	e008      	b.n	800c568 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c556:	f7fb fdaf 	bl	80080b8 <HAL_GetTick>
 800c55a:	4602      	mov	r2, r0
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	1ad3      	subs	r3, r2, r3
 800c560:	2b02      	cmp	r3, #2
 800c562:	d901      	bls.n	800c568 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c564:	2303      	movs	r3, #3
 800c566:	e111      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c568:	4b8a      	ldr	r3, [pc, #552]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0307 	and.w	r3, r3, #7
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	429a      	cmp	r2, r3
 800c574:	d1ef      	bne.n	800c556 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 0302 	and.w	r3, r3, #2
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d016      	beq.n	800c5b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff fafb 	bl	800bb82 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c58c:	f7fb fd94 	bl	80080b8 <HAL_GetTick>
 800c590:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c592:	e008      	b.n	800c5a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c594:	f7fb fd90 	bl	80080b8 <HAL_GetTick>
 800c598:	4602      	mov	r2, r0
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d901      	bls.n	800c5a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c5a2:	2303      	movs	r3, #3
 800c5a4:	e0f2      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c5a6:	f7ff fbe8 	bl	800bd7a <LL_RCC_IsActiveFlag_HPRE>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d0f1      	beq.n	800c594 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 0320 	and.w	r3, r3, #32
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d016      	beq.n	800c5ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	695b      	ldr	r3, [r3, #20]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7ff faf2 	bl	800bbaa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c5c6:	f7fb fd77 	bl	80080b8 <HAL_GetTick>
 800c5ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c5cc:	e008      	b.n	800c5e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c5ce:	f7fb fd73 	bl	80080b8 <HAL_GetTick>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	1ad3      	subs	r3, r2, r3
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d901      	bls.n	800c5e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c5dc:	2303      	movs	r3, #3
 800c5de:	e0d5      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c5e0:	f7ff fbdd 	bl	800bd9e <LL_RCC_IsActiveFlag_C2HPRE>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0f1      	beq.n	800c5ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d016      	beq.n	800c624 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7ff faeb 	bl	800bbd6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c600:	f7fb fd5a 	bl	80080b8 <HAL_GetTick>
 800c604:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c606:	e008      	b.n	800c61a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c608:	f7fb fd56 	bl	80080b8 <HAL_GetTick>
 800c60c:	4602      	mov	r2, r0
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	2b02      	cmp	r3, #2
 800c614:	d901      	bls.n	800c61a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c616:	2303      	movs	r3, #3
 800c618:	e0b8      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c61a:	f7ff fbd3 	bl	800bdc4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d0f1      	beq.n	800c608 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d016      	beq.n	800c65e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	4618      	mov	r0, r3
 800c636:	f7ff fae5 	bl	800bc04 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c63a:	f7fb fd3d 	bl	80080b8 <HAL_GetTick>
 800c63e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c640:	e008      	b.n	800c654 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c642:	f7fb fd39 	bl	80080b8 <HAL_GetTick>
 800c646:	4602      	mov	r2, r0
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d901      	bls.n	800c654 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e09b      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c654:	f7ff fbc9 	bl	800bdea <LL_RCC_IsActiveFlag_PPRE1>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d0f1      	beq.n	800c642 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f003 0308 	and.w	r3, r3, #8
 800c666:	2b00      	cmp	r3, #0
 800c668:	d017      	beq.n	800c69a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	00db      	lsls	r3, r3, #3
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff fadb 	bl	800bc2c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c676:	f7fb fd1f 	bl	80080b8 <HAL_GetTick>
 800c67a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c67c:	e008      	b.n	800c690 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c67e:	f7fb fd1b 	bl	80080b8 <HAL_GetTick>
 800c682:	4602      	mov	r2, r0
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d901      	bls.n	800c690 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e07d      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c690:	f7ff fbbd 	bl	800be0e <LL_RCC_IsActiveFlag_PPRE2>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d0f1      	beq.n	800c67e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 0301 	and.w	r3, r3, #1
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d043      	beq.n	800c72e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d106      	bne.n	800c6bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800c6ae:	f7ff f87b 	bl	800b7a8 <LL_RCC_HSE_IsReady>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d11e      	bne.n	800c6f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e067      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	2b03      	cmp	r3, #3
 800c6c2:	d106      	bne.n	800c6d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800c6c4:	f7ff fb16 	bl	800bcf4 <LL_RCC_PLL_IsReady>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d113      	bne.n	800c6f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e05c      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d106      	bne.n	800c6e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800c6da:	f7ff f9e3 	bl	800baa4 <LL_RCC_MSI_IsReady>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d108      	bne.n	800c6f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e051      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800c6e8:	f7ff f88e 	bl	800b808 <LL_RCC_HSI_IsReady>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d101      	bne.n	800c6f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e04a      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7ff fa21 	bl	800bb42 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c700:	f7fb fcda 	bl	80080b8 <HAL_GetTick>
 800c704:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c706:	e00a      	b.n	800c71e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c708:	f7fb fcd6 	bl	80080b8 <HAL_GetTick>
 800c70c:	4602      	mov	r2, r0
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c716:	4293      	cmp	r3, r2
 800c718:	d901      	bls.n	800c71e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800c71a:	2303      	movs	r3, #3
 800c71c:	e036      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c71e:	f7ff fa24 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800c722:	4602      	mov	r2, r0
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d1ec      	bne.n	800c708 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c72e:	4b19      	ldr	r3, [pc, #100]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f003 0307 	and.w	r3, r3, #7
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d21b      	bcs.n	800c774 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c73c:	4b15      	ldr	r3, [pc, #84]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f023 0207 	bic.w	r2, r3, #7
 800c744:	4913      	ldr	r1, [pc, #76]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	4313      	orrs	r3, r2
 800c74a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c74c:	f7fb fcb4 	bl	80080b8 <HAL_GetTick>
 800c750:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c752:	e008      	b.n	800c766 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c754:	f7fb fcb0 	bl	80080b8 <HAL_GetTick>
 800c758:	4602      	mov	r2, r0
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d901      	bls.n	800c766 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800c762:	2303      	movs	r3, #3
 800c764:	e012      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c766:	4b0b      	ldr	r3, [pc, #44]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 0307 	and.w	r3, r3, #7
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	429a      	cmp	r2, r3
 800c772:	d1ef      	bne.n	800c754 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c774:	f000 f87e 	bl	800c874 <HAL_RCC_GetHCLKFreq>
 800c778:	4603      	mov	r3, r0
 800c77a:	4a07      	ldr	r2, [pc, #28]	@ (800c798 <HAL_RCC_ClockConfig+0x27c>)
 800c77c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800c77e:	f7fb fca7 	bl	80080d0 <HAL_GetTickPrio>
 800c782:	4603      	mov	r3, r0
 800c784:	4618      	mov	r0, r3
 800c786:	f7fb fc49 	bl	800801c <HAL_InitTick>
 800c78a:	4603      	mov	r3, r0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	58004000 	.word	0x58004000
 800c798:	2000007c 	.word	0x2000007c

0800c79c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c79c:	b590      	push	{r4, r7, lr}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7a2:	f7ff f9e2 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800c7a6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10a      	bne.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c7ae:	f7ff f99e 	bl	800baee <LL_RCC_MSI_GetRange>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	091b      	lsrs	r3, r3, #4
 800c7b6:	f003 030f 	and.w	r3, r3, #15
 800c7ba:	4a2b      	ldr	r2, [pc, #172]	@ (800c868 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7c0:	60fb      	str	r3, [r7, #12]
 800c7c2:	e04b      	b.n	800c85c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b04      	cmp	r3, #4
 800c7c8:	d102      	bne.n	800c7d0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c7ca:	4b28      	ldr	r3, [pc, #160]	@ (800c86c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c7cc:	60fb      	str	r3, [r7, #12]
 800c7ce:	e045      	b.n	800c85c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b08      	cmp	r3, #8
 800c7d4:	d10a      	bne.n	800c7ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c7d6:	f7fe ffb7 	bl	800b748 <LL_RCC_HSE_IsEnabledDiv2>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d102      	bne.n	800c7e6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800c7e0:	4b22      	ldr	r3, [pc, #136]	@ (800c86c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	e03a      	b.n	800c85c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800c7e6:	4b22      	ldr	r3, [pc, #136]	@ (800c870 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c7e8:	60fb      	str	r3, [r7, #12]
 800c7ea:	e037      	b.n	800c85c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800c7ec:	f7ff fab9 	bl	800bd62 <LL_RCC_PLL_GetMainSource>
 800c7f0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d003      	beq.n	800c800 <HAL_RCC_GetSysClockFreq+0x64>
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d003      	beq.n	800c806 <HAL_RCC_GetSysClockFreq+0x6a>
 800c7fe:	e00d      	b.n	800c81c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800c800:	4b1a      	ldr	r3, [pc, #104]	@ (800c86c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c802:	60bb      	str	r3, [r7, #8]
        break;
 800c804:	e015      	b.n	800c832 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c806:	f7fe ff9f 	bl	800b748 <LL_RCC_HSE_IsEnabledDiv2>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d102      	bne.n	800c816 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800c810:	4b16      	ldr	r3, [pc, #88]	@ (800c86c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c812:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800c814:	e00d      	b.n	800c832 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800c816:	4b16      	ldr	r3, [pc, #88]	@ (800c870 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c818:	60bb      	str	r3, [r7, #8]
        break;
 800c81a:	e00a      	b.n	800c832 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c81c:	f7ff f967 	bl	800baee <LL_RCC_MSI_GetRange>
 800c820:	4603      	mov	r3, r0
 800c822:	091b      	lsrs	r3, r3, #4
 800c824:	f003 030f 	and.w	r3, r3, #15
 800c828:	4a0f      	ldr	r2, [pc, #60]	@ (800c868 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c82a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c82e:	60bb      	str	r3, [r7, #8]
        break;
 800c830:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800c832:	f7ff fa71 	bl	800bd18 <LL_RCC_PLL_GetN>
 800c836:	4602      	mov	r2, r0
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	fb03 f402 	mul.w	r4, r3, r2
 800c83e:	f7ff fa84 	bl	800bd4a <LL_RCC_PLL_GetDivider>
 800c842:	4603      	mov	r3, r0
 800c844:	091b      	lsrs	r3, r3, #4
 800c846:	3301      	adds	r3, #1
 800c848:	fbb4 f4f3 	udiv	r4, r4, r3
 800c84c:	f7ff fa71 	bl	800bd32 <LL_RCC_PLL_GetR>
 800c850:	4603      	mov	r3, r0
 800c852:	0f5b      	lsrs	r3, r3, #29
 800c854:	3301      	adds	r3, #1
 800c856:	fbb4 f3f3 	udiv	r3, r4, r3
 800c85a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800c85c:	68fb      	ldr	r3, [r7, #12]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	bd90      	pop	{r4, r7, pc}
 800c866:	bf00      	nop
 800c868:	080136f4 	.word	0x080136f4
 800c86c:	00f42400 	.word	0x00f42400
 800c870:	01e84800 	.word	0x01e84800

0800c874 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c874:	b598      	push	{r3, r4, r7, lr}
 800c876:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c878:	f7ff ff90 	bl	800c79c <HAL_RCC_GetSysClockFreq>
 800c87c:	4604      	mov	r4, r0
 800c87e:	f7ff f9e9 	bl	800bc54 <LL_RCC_GetAHBPrescaler>
 800c882:	4603      	mov	r3, r0
 800c884:	091b      	lsrs	r3, r3, #4
 800c886:	f003 030f 	and.w	r3, r3, #15
 800c88a:	4a03      	ldr	r2, [pc, #12]	@ (800c898 <HAL_RCC_GetHCLKFreq+0x24>)
 800c88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c890:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800c894:	4618      	mov	r0, r3
 800c896:	bd98      	pop	{r3, r4, r7, pc}
 800c898:	08013694 	.word	0x08013694

0800c89c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c89c:	b598      	push	{r3, r4, r7, lr}
 800c89e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c8a0:	f7ff ffe8 	bl	800c874 <HAL_RCC_GetHCLKFreq>
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	f7ff f9ef 	bl	800bc88 <LL_RCC_GetAPB1Prescaler>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	0a1b      	lsrs	r3, r3, #8
 800c8ae:	f003 0307 	and.w	r3, r3, #7
 800c8b2:	4a04      	ldr	r2, [pc, #16]	@ (800c8c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8b8:	f003 031f 	and.w	r3, r3, #31
 800c8bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	bd98      	pop	{r3, r4, r7, pc}
 800c8c4:	080136d4 	.word	0x080136d4

0800c8c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c8c8:	b598      	push	{r3, r4, r7, lr}
 800c8ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c8cc:	f7ff ffd2 	bl	800c874 <HAL_RCC_GetHCLKFreq>
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	f7ff f9e5 	bl	800bca0 <LL_RCC_GetAPB2Prescaler>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	0adb      	lsrs	r3, r3, #11
 800c8da:	f003 0307 	and.w	r3, r3, #7
 800c8de:	4a04      	ldr	r2, [pc, #16]	@ (800c8f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8e4:	f003 031f 	and.w	r3, r3, #31
 800c8e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	bd98      	pop	{r3, r4, r7, pc}
 800c8f0:	080136d4 	.word	0x080136d4

0800c8f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c8f4:	b590      	push	{r4, r7, lr}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2bb0      	cmp	r3, #176	@ 0xb0
 800c900:	d903      	bls.n	800c90a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c902:	4b15      	ldr	r3, [pc, #84]	@ (800c958 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c906:	60fb      	str	r3, [r7, #12]
 800c908:	e007      	b.n	800c91a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	091b      	lsrs	r3, r3, #4
 800c90e:	f003 030f 	and.w	r3, r3, #15
 800c912:	4a11      	ldr	r2, [pc, #68]	@ (800c958 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c918:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c91a:	f7ff f9a7 	bl	800bc6c <LL_RCC_GetAHB4Prescaler>
 800c91e:	4603      	mov	r3, r0
 800c920:	091b      	lsrs	r3, r3, #4
 800c922:	f003 030f 	and.w	r3, r3, #15
 800c926:	4a0d      	ldr	r2, [pc, #52]	@ (800c95c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c932:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	4a0a      	ldr	r2, [pc, #40]	@ (800c960 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c938:	fba2 2303 	umull	r2, r3, r2, r3
 800c93c:	0c9c      	lsrs	r4, r3, #18
 800c93e:	f7fe fef5 	bl	800b72c <HAL_PWREx_GetVoltageRange>
 800c942:	4603      	mov	r3, r0
 800c944:	4619      	mov	r1, r3
 800c946:	4620      	mov	r0, r4
 800c948:	f000 f80c 	bl	800c964 <RCC_SetFlashLatency>
 800c94c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3714      	adds	r7, #20
 800c952:	46bd      	mov	sp, r7
 800c954:	bd90      	pop	{r4, r7, pc}
 800c956:	bf00      	nop
 800c958:	080136f4 	.word	0x080136f4
 800c95c:	08013694 	.word	0x08013694
 800c960:	431bde83 	.word	0x431bde83

0800c964 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c964:	b590      	push	{r4, r7, lr}
 800c966:	b093      	sub	sp, #76	@ 0x4c
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c96e:	4b37      	ldr	r3, [pc, #220]	@ (800ca4c <RCC_SetFlashLatency+0xe8>)
 800c970:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c976:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c97a:	4a35      	ldr	r2, [pc, #212]	@ (800ca50 <RCC_SetFlashLatency+0xec>)
 800c97c:	f107 031c 	add.w	r3, r7, #28
 800c980:	ca07      	ldmia	r2, {r0, r1, r2}
 800c982:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c986:	4b33      	ldr	r3, [pc, #204]	@ (800ca54 <RCC_SetFlashLatency+0xf0>)
 800c988:	f107 040c 	add.w	r4, r7, #12
 800c98c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c98e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800c992:	2300      	movs	r3, #0
 800c994:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c99c:	d11a      	bne.n	800c9d4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c99e:	2300      	movs	r3, #0
 800c9a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9a2:	e013      	b.n	800c9cc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800c9a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	3348      	adds	r3, #72	@ 0x48
 800c9aa:	443b      	add	r3, r7
 800c9ac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d807      	bhi.n	800c9c6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	3348      	adds	r3, #72	@ 0x48
 800c9bc:	443b      	add	r3, r7
 800c9be:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c9c2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c9c4:	e020      	b.n	800ca08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c9c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d9e8      	bls.n	800c9a4 <RCC_SetFlashLatency+0x40>
 800c9d2:	e019      	b.n	800ca08 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9d8:	e013      	b.n	800ca02 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800c9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	3348      	adds	r3, #72	@ 0x48
 800c9e0:	443b      	add	r3, r7
 800c9e2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d807      	bhi.n	800c9fc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	3348      	adds	r3, #72	@ 0x48
 800c9f2:	443b      	add	r3, r7
 800c9f4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c9f8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c9fa:	e005      	b.n	800ca08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9fe:	3301      	adds	r3, #1
 800ca00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d9e8      	bls.n	800c9da <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800ca08:	4b13      	ldr	r3, [pc, #76]	@ (800ca58 <RCC_SetFlashLatency+0xf4>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f023 0207 	bic.w	r2, r3, #7
 800ca10:	4911      	ldr	r1, [pc, #68]	@ (800ca58 <RCC_SetFlashLatency+0xf4>)
 800ca12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca14:	4313      	orrs	r3, r2
 800ca16:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ca18:	f7fb fb4e 	bl	80080b8 <HAL_GetTick>
 800ca1c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ca1e:	e008      	b.n	800ca32 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ca20:	f7fb fb4a 	bl	80080b8 <HAL_GetTick>
 800ca24:	4602      	mov	r2, r0
 800ca26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca28:	1ad3      	subs	r3, r2, r3
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d901      	bls.n	800ca32 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800ca2e:	2303      	movs	r3, #3
 800ca30:	e007      	b.n	800ca42 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ca32:	4b09      	ldr	r3, [pc, #36]	@ (800ca58 <RCC_SetFlashLatency+0xf4>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f003 0307 	and.w	r3, r3, #7
 800ca3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d1ef      	bne.n	800ca20 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	374c      	adds	r7, #76	@ 0x4c
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd90      	pop	{r4, r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	08013668 	.word	0x08013668
 800ca50:	08013678 	.word	0x08013678
 800ca54:	08013684 	.word	0x08013684
 800ca58:	58004000 	.word	0x58004000

0800ca5c <LL_RCC_LSE_IsEnabled>:
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800ca60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca68:	f003 0301 	and.w	r3, r3, #1
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d101      	bne.n	800ca74 <LL_RCC_LSE_IsEnabled+0x18>
 800ca70:	2301      	movs	r3, #1
 800ca72:	e000      	b.n	800ca76 <LL_RCC_LSE_IsEnabled+0x1a>
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <LL_RCC_LSE_IsReady>:
{
 800ca80:	b480      	push	{r7}
 800ca82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ca84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca8c:	f003 0302 	and.w	r3, r3, #2
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d101      	bne.n	800ca98 <LL_RCC_LSE_IsReady+0x18>
 800ca94:	2301      	movs	r3, #1
 800ca96:	e000      	b.n	800ca9a <LL_RCC_LSE_IsReady+0x1a>
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <LL_RCC_SetRFWKPClockSource>:
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800caac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cab4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800cab8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <LL_RCC_SetSMPSClockSource>:
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800cad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cade:	f023 0203 	bic.w	r2, r3, #3
 800cae2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4313      	orrs	r3, r2
 800caea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800caec:	bf00      	nop
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <LL_RCC_SetSMPSPrescaler>:
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800cb00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb06:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800cb0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <LL_RCC_SetUSARTClockSource>:
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800cb28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb30:	f023 0203 	bic.w	r2, r3, #3
 800cb34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <LL_RCC_SetLPUARTClockSource>:
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800cb54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cb60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <LL_RCC_SetI2CClockSource>:
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800cb80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	091b      	lsrs	r3, r3, #4
 800cb8c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cb90:	43db      	mvns	r3, r3
 800cb92:	401a      	ands	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	011b      	lsls	r3, r3, #4
 800cb98:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cb9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cba0:	4313      	orrs	r3, r2
 800cba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cba6:	bf00      	nop
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <LL_RCC_SetLPTIMClockSource>:
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	b083      	sub	sp, #12
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800cbba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	0c1b      	lsrs	r3, r3, #16
 800cbc6:	041b      	lsls	r3, r3, #16
 800cbc8:	43db      	mvns	r3, r3
 800cbca:	401a      	ands	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	041b      	lsls	r3, r3, #16
 800cbd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cbda:	bf00      	nop
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr

0800cbe6 <LL_RCC_SetSAIClockSource>:
{
 800cbe6:	b480      	push	{r7}
 800cbe8:	b083      	sub	sp, #12
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800cbee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbf6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cbfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc06:	bf00      	nop
 800cc08:	370c      	adds	r7, #12
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr

0800cc12 <LL_RCC_SetRNGClockSource>:
{
 800cc12:	b480      	push	{r7}
 800cc14:	b083      	sub	sp, #12
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800cc1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc22:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800cc26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc32:	bf00      	nop
 800cc34:	370c      	adds	r7, #12
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <LL_RCC_SetCLK48ClockSource>:
{
 800cc3e:	b480      	push	{r7}
 800cc40:	b083      	sub	sp, #12
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800cc46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cc52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc5e:	bf00      	nop
 800cc60:	370c      	adds	r7, #12
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr

0800cc6a <LL_RCC_SetUSBClockSource>:
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b082      	sub	sp, #8
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7ff ffe3 	bl	800cc3e <LL_RCC_SetCLK48ClockSource>
}
 800cc78:	bf00      	nop
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <LL_RCC_SetADCClockSource>:
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800cc88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc90:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800cc94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <LL_RCC_SetRTCClockSource>:
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800ccb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ccc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800cccc:	bf00      	nop
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <LL_RCC_GetRTCClockSource>:
{
 800ccd8:	b480      	push	{r7}
 800ccda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800ccdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <LL_RCC_ForceBackupDomainReset>:
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ccf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800cd0a:	bf00      	nop
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <LL_RCC_ReleaseBackupDomainReset>:
{
 800cd14:	b480      	push	{r7}
 800cd16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cd18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cd28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800cd2c:	bf00      	nop
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <LL_RCC_PLLSAI1_Enable>:
{
 800cd36:	b480      	push	{r7}
 800cd38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cd3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cd48:	6013      	str	r3, [r2, #0]
}
 800cd4a:	bf00      	nop
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <LL_RCC_PLLSAI1_Disable>:
{
 800cd54:	b480      	push	{r7}
 800cd56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cd58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd66:	6013      	str	r3, [r2, #0]
}
 800cd68:	bf00      	nop
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <LL_RCC_PLLSAI1_IsReady>:
{
 800cd72:	b480      	push	{r7}
 800cd74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800cd76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd84:	d101      	bne.n	800cd8a <LL_RCC_PLLSAI1_IsReady+0x18>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e000      	b.n	800cd8c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b088      	sub	sp, #32
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800cd9e:	2300      	movs	r3, #0
 800cda0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800cda2:	2300      	movs	r3, #0
 800cda4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d034      	beq.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cdba:	d021      	beq.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800cdbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cdc0:	d81b      	bhi.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cdc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cdc6:	d01d      	beq.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800cdc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cdcc:	d815      	bhi.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00b      	beq.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x54>
 800cdd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cdd6:	d110      	bne.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800cdd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cde2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cde6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800cde8:	e00d      	b.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	3304      	adds	r3, #4
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 f947 	bl	800d082 <RCCEx_PLLSAI1_ConfigNP>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800cdf8:	e005      	b.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	77fb      	strb	r3, [r7, #31]
        break;
 800cdfe:	e002      	b.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ce00:	bf00      	nop
 800ce02:	e000      	b.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ce04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce06:	7ffb      	ldrb	r3, [r7, #31]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d105      	bne.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7ff fee8 	bl	800cbe6 <LL_RCC_SetSAIClockSource>
 800ce16:	e001      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce18:	7ffb      	ldrb	r3, [r7, #31]
 800ce1a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d046      	beq.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800ce28:	f7ff ff56 	bl	800ccd8 <LL_RCC_GetRTCClockSource>
 800ce2c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce32:	69ba      	ldr	r2, [r7, #24]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d03c      	beq.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ce38:	f7fe fc16 	bl	800b668 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d105      	bne.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7ff ff30 	bl	800ccac <LL_RCC_SetRTCClockSource>
 800ce4c:	e02e      	b.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800ce4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce56:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800ce58:	f7ff ff4b 	bl	800ccf2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800ce5c:	f7ff ff5a 	bl	800cd14 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800ce6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800ce78:	f7ff fdf0 	bl	800ca5c <LL_RCC_LSE_IsEnabled>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d114      	bne.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ce82:	f7fb f919 	bl	80080b8 <HAL_GetTick>
 800ce86:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800ce88:	e00b      	b.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce8a:	f7fb f915 	bl	80080b8 <HAL_GetTick>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d902      	bls.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800ce9c:	2303      	movs	r3, #3
 800ce9e:	77fb      	strb	r3, [r7, #31]
              break;
 800cea0:	e004      	b.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800cea2:	f7ff fded 	bl	800ca80 <LL_RCC_LSE_IsReady>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d1ee      	bne.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800ceac:	7ffb      	ldrb	r3, [r7, #31]
 800ceae:	77bb      	strb	r3, [r7, #30]
 800ceb0:	e001      	b.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ceb2:	7ffb      	ldrb	r3, [r7, #31]
 800ceb4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d004      	beq.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	699b      	ldr	r3, [r3, #24]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7ff fe2a 	bl	800cb20 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f003 0302 	and.w	r3, r3, #2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d004      	beq.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	69db      	ldr	r3, [r3, #28]
 800cedc:	4618      	mov	r0, r3
 800cede:	f7ff fe35 	bl	800cb4c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0310 	and.w	r3, r3, #16
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d004      	beq.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff fe5d 	bl	800cbb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f003 0320 	and.w	r3, r3, #32
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d004      	beq.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7ff fe52 	bl	800cbb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f003 0304 	and.w	r3, r3, #4
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d004      	beq.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a1b      	ldr	r3, [r3, #32]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7ff fe2a 	bl	800cb78 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f003 0308 	and.w	r3, r3, #8
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d004      	beq.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7ff fe1f 	bl	800cb78 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d022      	beq.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff fe8d 	bl	800cc6a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf58:	d107      	bne.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800cf5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cf64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf68:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cf72:	d10b      	bne.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	3304      	adds	r3, #4
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f000 f8dd 	bl	800d138 <RCCEx_PLLSAI1_ConfigNQ>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800cf82:	7ffb      	ldrb	r3, [r7, #31]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800cf88:	7ffb      	ldrb	r3, [r7, #31]
 800cf8a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d02b      	beq.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfa0:	d008      	beq.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cfaa:	d003      	beq.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d105      	bne.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7ff fe2a 	bl	800cc12 <LL_RCC_SetRNGClockSource>
 800cfbe:	e00a      	b.n	800cfd6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cfc8:	60fb      	str	r3, [r7, #12]
 800cfca:	2000      	movs	r0, #0
 800cfcc:	f7ff fe21 	bl	800cc12 <LL_RCC_SetRNGClockSource>
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f7ff fe34 	bl	800cc3e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfda:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800cfde:	d107      	bne.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800cfe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cfea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cfee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d022      	beq.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d000:	4618      	mov	r0, r3
 800d002:	f7ff fe3d 	bl	800cc80 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d00a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d00e:	d107      	bne.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d01a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d01e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d028:	d10b      	bne.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	3304      	adds	r3, #4
 800d02e:	4618      	mov	r0, r3
 800d030:	f000 f8dd 	bl	800d1ee <RCCEx_PLLSAI1_ConfigNR>
 800d034:	4603      	mov	r3, r0
 800d036:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d038:	7ffb      	ldrb	r3, [r7, #31]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d03e:	7ffb      	ldrb	r3, [r7, #31]
 800d040:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d004      	beq.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff fd26 	bl	800caa4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d060:	2b00      	cmp	r3, #0
 800d062:	d009      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff fd45 	bl	800caf8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d072:	4618      	mov	r0, r3
 800d074:	f7ff fd2c 	bl	800cad0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d078:	7fbb      	ldrb	r3, [r7, #30]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3720      	adds	r7, #32
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b084      	sub	sp, #16
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d08e:	f7ff fe61 	bl	800cd54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d092:	f7fb f811 	bl	80080b8 <HAL_GetTick>
 800d096:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d098:	e009      	b.n	800d0ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d09a:	f7fb f80d 	bl	80080b8 <HAL_GetTick>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	1ad3      	subs	r3, r2, r3
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d902      	bls.n	800d0ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d0ac:	e004      	b.n	800d0b8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d0ae:	f7ff fe60 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1f0      	bne.n	800d09a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d0b8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d137      	bne.n	800d12e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d0be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0c2:	691b      	ldr	r3, [r3, #16]
 800d0c4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	021b      	lsls	r3, r3, #8
 800d0ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d0d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d0ec:	f7ff fe23 	bl	800cd36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0f0:	f7fa ffe2 	bl	80080b8 <HAL_GetTick>
 800d0f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d0f6:	e009      	b.n	800d10c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d0f8:	f7fa ffde 	bl	80080b8 <HAL_GetTick>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	2b02      	cmp	r3, #2
 800d104:	d902      	bls.n	800d10c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d106:	2303      	movs	r3, #3
 800d108:	73fb      	strb	r3, [r7, #15]
        break;
 800d10a:	e004      	b.n	800d116 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d10c:	f7ff fe31 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d110:	4603      	mov	r3, r0
 800d112:	2b01      	cmp	r3, #1
 800d114:	d1f0      	bne.n	800d0f8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d116:	7bfb      	ldrb	r3, [r7, #15]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d108      	bne.n	800d12e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d11c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d120:	691a      	ldr	r2, [r3, #16]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d12a:	4313      	orrs	r3, r2
 800d12c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d144:	f7ff fe06 	bl	800cd54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d148:	f7fa ffb6 	bl	80080b8 <HAL_GetTick>
 800d14c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d14e:	e009      	b.n	800d164 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d150:	f7fa ffb2 	bl	80080b8 <HAL_GetTick>
 800d154:	4602      	mov	r2, r0
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	d902      	bls.n	800d164 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d15e:	2303      	movs	r3, #3
 800d160:	73fb      	strb	r3, [r7, #15]
      break;
 800d162:	e004      	b.n	800d16e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d164:	f7ff fe05 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d1f0      	bne.n	800d150 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d16e:	7bfb      	ldrb	r3, [r7, #15]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d137      	bne.n	800d1e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	021b      	lsls	r3, r3, #8
 800d184:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d188:	4313      	orrs	r3, r2
 800d18a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d18c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d1a2:	f7ff fdc8 	bl	800cd36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1a6:	f7fa ff87 	bl	80080b8 <HAL_GetTick>
 800d1aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d1ac:	e009      	b.n	800d1c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d1ae:	f7fa ff83 	bl	80080b8 <HAL_GetTick>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	2b02      	cmp	r3, #2
 800d1ba:	d902      	bls.n	800d1c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d1bc:	2303      	movs	r3, #3
 800d1be:	73fb      	strb	r3, [r7, #15]
        break;
 800d1c0:	e004      	b.n	800d1cc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d1c2:	f7ff fdd6 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d1f0      	bne.n	800d1ae <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d1cc:	7bfb      	ldrb	r3, [r7, #15]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d108      	bne.n	800d1e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d1d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1d6:	691a      	ldr	r2, [r3, #16]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b084      	sub	sp, #16
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d1fa:	f7ff fdab 	bl	800cd54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d1fe:	f7fa ff5b 	bl	80080b8 <HAL_GetTick>
 800d202:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d204:	e009      	b.n	800d21a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d206:	f7fa ff57 	bl	80080b8 <HAL_GetTick>
 800d20a:	4602      	mov	r2, r0
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	1ad3      	subs	r3, r2, r3
 800d210:	2b02      	cmp	r3, #2
 800d212:	d902      	bls.n	800d21a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d214:	2303      	movs	r3, #3
 800d216:	73fb      	strb	r3, [r7, #15]
      break;
 800d218:	e004      	b.n	800d224 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d21a:	f7ff fdaa 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d1f0      	bne.n	800d206 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d224:	7bfb      	ldrb	r3, [r7, #15]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d137      	bne.n	800d29a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d22a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	021b      	lsls	r3, r3, #8
 800d23a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d23e:	4313      	orrs	r3, r2
 800d240:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d254:	4313      	orrs	r3, r2
 800d256:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d258:	f7ff fd6d 	bl	800cd36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d25c:	f7fa ff2c 	bl	80080b8 <HAL_GetTick>
 800d260:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d262:	e009      	b.n	800d278 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d264:	f7fa ff28 	bl	80080b8 <HAL_GetTick>
 800d268:	4602      	mov	r2, r0
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	2b02      	cmp	r3, #2
 800d270:	d902      	bls.n	800d278 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d272:	2303      	movs	r3, #3
 800d274:	73fb      	strb	r3, [r7, #15]
        break;
 800d276:	e004      	b.n	800d282 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d278:	f7ff fd7b 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d1f0      	bne.n	800d264 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d282:	7bfb      	ldrb	r3, [r7, #15]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d108      	bne.n	800d29a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d28c:	691a      	ldr	r2, [r3, #16]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d296:	4313      	orrs	r3, r2
 800d298:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3710      	adds	r7, #16
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d101      	bne.n	800d2ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e07a      	b.n	800d3b0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d106      	bne.n	800d2d4 <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7f5 fd32 	bl	8002d38 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2202      	movs	r2, #2
 800d2d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	f003 0310 	and.w	r3, r3, #16
 800d2e6:	2b10      	cmp	r3, #16
 800d2e8:	d058      	beq.n	800d39c <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	22ca      	movs	r2, #202	@ 0xca
 800d2f0:	625a      	str	r2, [r3, #36]	@ 0x24
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2253      	movs	r2, #83	@ 0x53
 800d2f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f882 	bl	800d404 <RTC_EnterInitMode>
 800d300:	4603      	mov	r3, r0
 800d302:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d304:	7bfb      	ldrb	r3, [r7, #15]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d12c      	bne.n	800d364 <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	6812      	ldr	r2, [r2, #0]
 800d314:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d31c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	6899      	ldr	r1, [r3, #8]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685a      	ldr	r2, [r3, #4]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	431a      	orrs	r2, r3
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	699b      	ldr	r3, [r3, #24]
 800d332:	431a      	orrs	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	430a      	orrs	r2, r1
 800d33a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	68d2      	ldr	r2, [r2, #12]
 800d344:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6919      	ldr	r1, [r3, #16]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	041a      	lsls	r2, r3, #16
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	430a      	orrs	r2, r1
 800d358:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f88a 	bl	800d474 <RTC_ExitInitMode>
 800d360:	4603      	mov	r3, r0
 800d362:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d364:	7bfb      	ldrb	r3, [r7, #15]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d113      	bne.n	800d392 <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f022 0203 	bic.w	r2, r2, #3
 800d378:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	69da      	ldr	r2, [r3, #28]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	695b      	ldr	r3, [r3, #20]
 800d388:	431a      	orrs	r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	430a      	orrs	r2, r1
 800d390:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	22ff      	movs	r2, #255	@ 0xff
 800d398:	625a      	str	r2, [r3, #36]	@ 0x24
 800d39a:	e001      	b.n	800d3a0 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800d39c:	2300      	movs	r3, #0
 800d39e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d103      	bne.n	800d3ae <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a0d      	ldr	r2, [pc, #52]	@ (800d400 <HAL_RTC_WaitForSynchro+0x48>)
 800d3ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d3cc:	f7fa fe74 	bl	80080b8 <HAL_GetTick>
 800d3d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d3d2:	e009      	b.n	800d3e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d3d4:	f7fa fe70 	bl	80080b8 <HAL_GetTick>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d3e2:	d901      	bls.n	800d3e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	e007      	b.n	800d3f8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	f003 0320 	and.w	r3, r3, #32
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d0ee      	beq.n	800d3d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800d3f6:	2300      	movs	r3, #0
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	0001ff5f 	.word	0x0001ff5f

0800d404 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d40c:	2300      	movs	r3, #0
 800d40e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d410:	2300      	movs	r3, #0
 800d412:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d123      	bne.n	800d46a <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	68da      	ldr	r2, [r3, #12]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d430:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d432:	f7fa fe41 	bl	80080b8 <HAL_GetTick>
 800d436:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d438:	e00d      	b.n	800d456 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d43a:	f7fa fe3d 	bl	80080b8 <HAL_GetTick>
 800d43e:	4602      	mov	r2, r0
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d448:	d905      	bls.n	800d456 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2204      	movs	r2, #4
 800d44e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d460:	2b00      	cmp	r3, #0
 800d462:	d102      	bne.n	800d46a <RTC_EnterInitMode+0x66>
 800d464:	7bfb      	ldrb	r3, [r7, #15]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d1e7      	bne.n	800d43a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800d46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d47c:	2300      	movs	r3, #0
 800d47e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68da      	ldr	r2, [r3, #12]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d48e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	f003 0320 	and.w	r3, r3, #32
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d10b      	bne.n	800d4b6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f7ff ff8a 	bl	800d3b8 <HAL_RTC_WaitForSynchro>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d005      	beq.n	800d4b6 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2204      	movs	r2, #4
 800d4ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800d4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800d4cc:	4b5f      	ldr	r3, [pc, #380]	@ (800d64c <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a5f      	ldr	r2, [pc, #380]	@ (800d650 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800d4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d6:	0adb      	lsrs	r3, r3, #11
 800d4d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d4dc:	fb02 f303 	mul.w	r3, r2, r3
 800d4e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d101      	bne.n	800d4f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 800d4ec:	2302      	movs	r3, #2
 800d4ee:	e0a7      	b.n	800d640 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2202      	movs	r2, #2
 800d4fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	22ca      	movs	r2, #202	@ 0xca
 800d506:	625a      	str	r2, [r3, #36]	@ 0x24
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2253      	movs	r2, #83	@ 0x53
 800d50e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d01a      	beq.n	800d554 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	3b01      	subs	r3, #1
 800d522:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d10d      	bne.n	800d546 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	22ff      	movs	r2, #255	@ 0xff
 800d530:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2203      	movs	r2, #3
 800d536:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800d542:	2303      	movs	r3, #3
 800d544:	e07c      	b.n	800d640 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	f003 0304 	and.w	r3, r3, #4
 800d550:	2b00      	cmp	r3, #0
 800d552:	d1e4      	bne.n	800d51e <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	689a      	ldr	r2, [r3, #8]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d562:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800d574:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800d576:	4b35      	ldr	r3, [pc, #212]	@ (800d64c <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4a35      	ldr	r2, [pc, #212]	@ (800d650 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800d57c:	fba2 2303 	umull	r2, r3, r2, r3
 800d580:	0adb      	lsrs	r3, r3, #11
 800d582:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d586:	fb02 f303 	mul.w	r3, r2, r3
 800d58a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	3b01      	subs	r3, #1
 800d590:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d10d      	bne.n	800d5b4 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	22ff      	movs	r2, #255	@ 0xff
 800d59e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2203      	movs	r2, #3
 800d5a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800d5b0:	2303      	movs	r3, #3
 800d5b2:	e045      	b.n	800d640 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	f003 0304 	and.w	r3, r3, #4
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d0e4      	beq.n	800d58c <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	689a      	ldr	r2, [r3, #8]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f022 0207 	bic.w	r2, r2, #7
 800d5d0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	6899      	ldr	r1, [r3, #8]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	430a      	orrs	r2, r1
 800d5e0:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	68ba      	ldr	r2, [r7, #8]
 800d5e8:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d5ea:	4b1a      	ldr	r3, [pc, #104]	@ (800d654 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5f0:	4a18      	ldr	r2, [pc, #96]	@ (800d654 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d5f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d5f6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800d5fa:	4b16      	ldr	r3, [pc, #88]	@ (800d654 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a15      	ldr	r2, [pc, #84]	@ (800d654 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d600:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d604:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	689a      	ldr	r2, [r3, #8]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d614:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	689a      	ldr	r2, [r3, #8]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d624:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	22ff      	movs	r2, #255	@ 0xff
 800d62c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2201      	movs	r2, #1
 800d632:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800d63e:	2300      	movs	r3, #0
}
 800d640:	4618      	mov	r0, r3
 800d642:	371c      	adds	r7, #28
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	2000007c 	.word	0x2000007c
 800d650:	10624dd3 	.word	0x10624dd3
 800d654:	58000800 	.word	0x58000800

0800d658 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800d660:	4b0f      	ldr	r3, [pc, #60]	@ (800d6a0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800d662:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800d666:	60da      	str	r2, [r3, #12]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00b      	beq.n	800d68e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	b2da      	uxtb	r2, r3
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800d686:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 f80b 	bl	800d6a4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800d696:	bf00      	nop
 800d698:	3708      	adds	r7, #8
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	58000800 	.word	0x58000800

0800d6a4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800d6ac:	bf00      	nop
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d101      	bne.n	800d6ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e095      	b.n	800d7f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d108      	bne.n	800d6e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d6da:	d009      	beq.n	800d6f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	61da      	str	r2, [r3, #28]
 800d6e2:	e005      	b.n	800d6f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d106      	bne.n	800d710 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7f5 fbba 	bl	8002e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2202      	movs	r2, #2
 800d714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d726:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d730:	d902      	bls.n	800d738 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d732:	2300      	movs	r3, #0
 800d734:	60fb      	str	r3, [r7, #12]
 800d736:	e002      	b.n	800d73e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d73c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d746:	d007      	beq.n	800d758 <HAL_SPI_Init+0xa0>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d750:	d002      	beq.n	800d758 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d768:	431a      	orrs	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	691b      	ldr	r3, [r3, #16]
 800d76e:	f003 0302 	and.w	r3, r3, #2
 800d772:	431a      	orrs	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	695b      	ldr	r3, [r3, #20]
 800d778:	f003 0301 	and.w	r3, r3, #1
 800d77c:	431a      	orrs	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	699b      	ldr	r3, [r3, #24]
 800d782:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d786:	431a      	orrs	r2, r3
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	69db      	ldr	r3, [r3, #28]
 800d78c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d790:	431a      	orrs	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a1b      	ldr	r3, [r3, #32]
 800d796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d79a:	ea42 0103 	orr.w	r1, r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	430a      	orrs	r2, r1
 800d7ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	699b      	ldr	r3, [r3, #24]
 800d7b2:	0c1b      	lsrs	r3, r3, #16
 800d7b4:	f003 0204 	and.w	r2, r3, #4
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7bc:	f003 0310 	and.w	r3, r3, #16
 800d7c0:	431a      	orrs	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7c6:	f003 0308 	and.w	r3, r3, #8
 800d7ca:	431a      	orrs	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d7d4:	ea42 0103 	orr.w	r1, r2, r3
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	430a      	orrs	r2, r1
 800d7e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d7f4:	2300      	movs	r3, #0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b088      	sub	sp, #32
 800d802:	af00      	add	r7, sp, #0
 800d804:	60f8      	str	r0, [r7, #12]
 800d806:	60b9      	str	r1, [r7, #8]
 800d808:	603b      	str	r3, [r7, #0]
 800d80a:	4613      	mov	r3, r2
 800d80c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d80e:	f7fa fc53 	bl	80080b8 <HAL_GetTick>
 800d812:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d814:	88fb      	ldrh	r3, [r7, #6]
 800d816:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	2b01      	cmp	r3, #1
 800d822:	d001      	beq.n	800d828 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d824:	2302      	movs	r3, #2
 800d826:	e15c      	b.n	800dae2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d002      	beq.n	800d834 <HAL_SPI_Transmit+0x36>
 800d82e:	88fb      	ldrh	r3, [r7, #6]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d834:	2301      	movs	r3, #1
 800d836:	e154      	b.n	800dae2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d101      	bne.n	800d846 <HAL_SPI_Transmit+0x48>
 800d842:	2302      	movs	r3, #2
 800d844:	e14d      	b.n	800dae2 <HAL_SPI_Transmit+0x2e4>
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2203      	movs	r2, #3
 800d852:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2200      	movs	r2, #0
 800d85a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	88fa      	ldrh	r2, [r7, #6]
 800d866:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	88fa      	ldrh	r2, [r7, #6]
 800d86c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2200      	movs	r2, #0
 800d872:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2200      	movs	r2, #0
 800d878:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2200      	movs	r2, #0
 800d880:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2200      	movs	r2, #0
 800d888:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2200      	movs	r2, #0
 800d88e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d898:	d10f      	bne.n	800d8ba <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d8a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d8b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8c4:	2b40      	cmp	r3, #64	@ 0x40
 800d8c6:	d007      	beq.n	800d8d8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d8d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d8e0:	d952      	bls.n	800d988 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d002      	beq.n	800d8f0 <HAL_SPI_Transmit+0xf2>
 800d8ea:	8b7b      	ldrh	r3, [r7, #26]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d145      	bne.n	800d97c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8f4:	881a      	ldrh	r2, [r3, #0]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d900:	1c9a      	adds	r2, r3, #2
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	3b01      	subs	r3, #1
 800d90e:	b29a      	uxth	r2, r3
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d914:	e032      	b.n	800d97c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	f003 0302 	and.w	r3, r3, #2
 800d920:	2b02      	cmp	r3, #2
 800d922:	d112      	bne.n	800d94a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d928:	881a      	ldrh	r2, [r3, #0]
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d934:	1c9a      	adds	r2, r3, #2
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d93e:	b29b      	uxth	r3, r3
 800d940:	3b01      	subs	r3, #1
 800d942:	b29a      	uxth	r2, r3
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d948:	e018      	b.n	800d97c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d94a:	f7fa fbb5 	bl	80080b8 <HAL_GetTick>
 800d94e:	4602      	mov	r2, r0
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	683a      	ldr	r2, [r7, #0]
 800d956:	429a      	cmp	r2, r3
 800d958:	d803      	bhi.n	800d962 <HAL_SPI_Transmit+0x164>
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d960:	d102      	bne.n	800d968 <HAL_SPI_Transmit+0x16a>
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d109      	bne.n	800d97c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2200      	movs	r2, #0
 800d974:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d978:	2303      	movs	r3, #3
 800d97a:	e0b2      	b.n	800dae2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d980:	b29b      	uxth	r3, r3
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1c7      	bne.n	800d916 <HAL_SPI_Transmit+0x118>
 800d986:	e083      	b.n	800da90 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d002      	beq.n	800d996 <HAL_SPI_Transmit+0x198>
 800d990:	8b7b      	ldrh	r3, [r7, #26]
 800d992:	2b01      	cmp	r3, #1
 800d994:	d177      	bne.n	800da86 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d912      	bls.n	800d9c6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9a4:	881a      	ldrh	r2, [r3, #0]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9b0:	1c9a      	adds	r2, r3, #2
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	3b02      	subs	r3, #2
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d9c4:	e05f      	b.n	800da86 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	330c      	adds	r3, #12
 800d9d0:	7812      	ldrb	r2, [r2, #0]
 800d9d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d8:	1c5a      	adds	r2, r3, #1
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	3b01      	subs	r3, #1
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d9ec:	e04b      	b.n	800da86 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	f003 0302 	and.w	r3, r3, #2
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	d12b      	bne.n	800da54 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da00:	b29b      	uxth	r3, r3
 800da02:	2b01      	cmp	r3, #1
 800da04:	d912      	bls.n	800da2c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da0a:	881a      	ldrh	r2, [r3, #0]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da16:	1c9a      	adds	r2, r3, #2
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da20:	b29b      	uxth	r3, r3
 800da22:	3b02      	subs	r3, #2
 800da24:	b29a      	uxth	r2, r3
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800da2a:	e02c      	b.n	800da86 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	330c      	adds	r3, #12
 800da36:	7812      	ldrb	r2, [r2, #0]
 800da38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da3e:	1c5a      	adds	r2, r3, #1
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da48:	b29b      	uxth	r3, r3
 800da4a:	3b01      	subs	r3, #1
 800da4c:	b29a      	uxth	r2, r3
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800da52:	e018      	b.n	800da86 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da54:	f7fa fb30 	bl	80080b8 <HAL_GetTick>
 800da58:	4602      	mov	r2, r0
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	1ad3      	subs	r3, r2, r3
 800da5e:	683a      	ldr	r2, [r7, #0]
 800da60:	429a      	cmp	r2, r3
 800da62:	d803      	bhi.n	800da6c <HAL_SPI_Transmit+0x26e>
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da6a:	d102      	bne.n	800da72 <HAL_SPI_Transmit+0x274>
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d109      	bne.n	800da86 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2201      	movs	r2, #1
 800da76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800da82:	2303      	movs	r3, #3
 800da84:	e02d      	b.n	800dae2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1ae      	bne.n	800d9ee <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da90:	69fa      	ldr	r2, [r7, #28]
 800da92:	6839      	ldr	r1, [r7, #0]
 800da94:	68f8      	ldr	r0, [r7, #12]
 800da96:	f000 fa67 	bl	800df68 <SPI_EndRxTxTransaction>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2220      	movs	r2, #32
 800daa4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10a      	bne.n	800dac4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800daae:	2300      	movs	r3, #0
 800dab0:	617b      	str	r3, [r7, #20]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	617b      	str	r3, [r7, #20]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	617b      	str	r3, [r7, #20]
 800dac2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800dae0:	2300      	movs	r3, #0
  }
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3720      	adds	r7, #32
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
	...

0800daec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b088      	sub	sp, #32
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	689b      	ldr	r3, [r3, #8]
 800db02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	099b      	lsrs	r3, r3, #6
 800db08:	f003 0301 	and.w	r3, r3, #1
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10f      	bne.n	800db30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00a      	beq.n	800db30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	099b      	lsrs	r3, r3, #6
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	2b00      	cmp	r3, #0
 800db24:	d004      	beq.n	800db30 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	4798      	blx	r3
    return;
 800db2e:	e0d7      	b.n	800dce0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	085b      	lsrs	r3, r3, #1
 800db34:	f003 0301 	and.w	r3, r3, #1
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00a      	beq.n	800db52 <HAL_SPI_IRQHandler+0x66>
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	09db      	lsrs	r3, r3, #7
 800db40:	f003 0301 	and.w	r3, r3, #1
 800db44:	2b00      	cmp	r3, #0
 800db46:	d004      	beq.n	800db52 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	4798      	blx	r3
    return;
 800db50:	e0c6      	b.n	800dce0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	095b      	lsrs	r3, r3, #5
 800db56:	f003 0301 	and.w	r3, r3, #1
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10c      	bne.n	800db78 <HAL_SPI_IRQHandler+0x8c>
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	099b      	lsrs	r3, r3, #6
 800db62:	f003 0301 	and.w	r3, r3, #1
 800db66:	2b00      	cmp	r3, #0
 800db68:	d106      	bne.n	800db78 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	0a1b      	lsrs	r3, r3, #8
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	2b00      	cmp	r3, #0
 800db74:	f000 80b4 	beq.w	800dce0 <HAL_SPI_IRQHandler+0x1f4>
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	095b      	lsrs	r3, r3, #5
 800db7c:	f003 0301 	and.w	r3, r3, #1
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 80ad 	beq.w	800dce0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	099b      	lsrs	r3, r3, #6
 800db8a:	f003 0301 	and.w	r3, r3, #1
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d023      	beq.n	800dbda <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	2b03      	cmp	r3, #3
 800db9c:	d011      	beq.n	800dbc2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dba2:	f043 0204 	orr.w	r2, r3, #4
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dbaa:	2300      	movs	r3, #0
 800dbac:	617b      	str	r3, [r7, #20]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	617b      	str	r3, [r7, #20]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	617b      	str	r3, [r7, #20]
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	e00b      	b.n	800dbda <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	613b      	str	r3, [r7, #16]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	613b      	str	r3, [r7, #16]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	613b      	str	r3, [r7, #16]
 800dbd6:	693b      	ldr	r3, [r7, #16]
        return;
 800dbd8:	e082      	b.n	800dce0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	095b      	lsrs	r3, r3, #5
 800dbde:	f003 0301 	and.w	r3, r3, #1
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d014      	beq.n	800dc10 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dbea:	f043 0201 	orr.w	r2, r3, #1
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	60fb      	str	r3, [r7, #12]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	60fb      	str	r3, [r7, #12]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc0c:	601a      	str	r2, [r3, #0]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	0a1b      	lsrs	r3, r3, #8
 800dc14:	f003 0301 	and.w	r3, r3, #1
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00c      	beq.n	800dc36 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dc20:	f043 0208 	orr.w	r2, r3, #8
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dc28:	2300      	movs	r3, #0
 800dc2a:	60bb      	str	r3, [r7, #8]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	60bb      	str	r3, [r7, #8]
 800dc34:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d04f      	beq.n	800dcde <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dc4c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2201      	movs	r2, #1
 800dc52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	f003 0302 	and.w	r3, r3, #2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d104      	bne.n	800dc6a <HAL_SPI_IRQHandler+0x17e>
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	f003 0301 	and.w	r3, r3, #1
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d034      	beq.n	800dcd4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	685a      	ldr	r2, [r3, #4]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f022 0203 	bic.w	r2, r2, #3
 800dc78:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d011      	beq.n	800dca6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc86:	4a18      	ldr	r2, [pc, #96]	@ (800dce8 <HAL_SPI_IRQHandler+0x1fc>)
 800dc88:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7fb fe45 	bl	800991e <HAL_DMA_Abort_IT>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d005      	beq.n	800dca6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dc9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d016      	beq.n	800dcdc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcb2:	4a0d      	ldr	r2, [pc, #52]	@ (800dce8 <HAL_SPI_IRQHandler+0x1fc>)
 800dcb4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fb fe2f 	bl	800991e <HAL_DMA_Abort_IT>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00a      	beq.n	800dcdc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dcca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800dcd2:	e003      	b.n	800dcdc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 f809 	bl	800dcec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800dcda:	e000      	b.n	800dcde <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800dcdc:	bf00      	nop
    return;
 800dcde:	bf00      	nop
  }
}
 800dce0:	3720      	adds	r7, #32
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	0800dd01 	.word	0x0800dd01

0800dcec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2200      	movs	r2, #0
 800dd12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	f7ff ffe5 	bl	800dcec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dd22:	bf00      	nop
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
	...

0800dd2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b088      	sub	sp, #32
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	603b      	str	r3, [r7, #0]
 800dd38:	4613      	mov	r3, r2
 800dd3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dd3c:	f7fa f9bc 	bl	80080b8 <HAL_GetTick>
 800dd40:	4602      	mov	r2, r0
 800dd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd44:	1a9b      	subs	r3, r3, r2
 800dd46:	683a      	ldr	r2, [r7, #0]
 800dd48:	4413      	add	r3, r2
 800dd4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dd4c:	f7fa f9b4 	bl	80080b8 <HAL_GetTick>
 800dd50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dd52:	4b39      	ldr	r3, [pc, #228]	@ (800de38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	015b      	lsls	r3, r3, #5
 800dd58:	0d1b      	lsrs	r3, r3, #20
 800dd5a:	69fa      	ldr	r2, [r7, #28]
 800dd5c:	fb02 f303 	mul.w	r3, r2, r3
 800dd60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dd62:	e054      	b.n	800de0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd6a:	d050      	beq.n	800de0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dd6c:	f7fa f9a4 	bl	80080b8 <HAL_GetTick>
 800dd70:	4602      	mov	r2, r0
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	69fa      	ldr	r2, [r7, #28]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d902      	bls.n	800dd82 <SPI_WaitFlagStateUntilTimeout+0x56>
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d13d      	bne.n	800ddfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dd90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dd9a:	d111      	bne.n	800ddc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dda4:	d004      	beq.n	800ddb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddae:	d107      	bne.n	800ddc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ddbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddc8:	d10f      	bne.n	800ddea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ddd8:	601a      	str	r2, [r3, #0]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dde8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2201      	movs	r2, #1
 800ddee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ddfa:	2303      	movs	r3, #3
 800ddfc:	e017      	b.n	800de2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d101      	bne.n	800de08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800de04:	2300      	movs	r3, #0
 800de06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	3b01      	subs	r3, #1
 800de0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	689a      	ldr	r2, [r3, #8]
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	4013      	ands	r3, r2
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	bf0c      	ite	eq
 800de1e:	2301      	moveq	r3, #1
 800de20:	2300      	movne	r3, #0
 800de22:	b2db      	uxtb	r3, r3
 800de24:	461a      	mov	r2, r3
 800de26:	79fb      	ldrb	r3, [r7, #7]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d19b      	bne.n	800dd64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3720      	adds	r7, #32
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	2000007c 	.word	0x2000007c

0800de3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b08a      	sub	sp, #40	@ 0x28
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
 800de48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800de4a:	2300      	movs	r3, #0
 800de4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800de4e:	f7fa f933 	bl	80080b8 <HAL_GetTick>
 800de52:	4602      	mov	r2, r0
 800de54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de56:	1a9b      	subs	r3, r3, r2
 800de58:	683a      	ldr	r2, [r7, #0]
 800de5a:	4413      	add	r3, r2
 800de5c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800de5e:	f7fa f92b 	bl	80080b8 <HAL_GetTick>
 800de62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	330c      	adds	r3, #12
 800de6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800de6c:	4b3d      	ldr	r3, [pc, #244]	@ (800df64 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	4613      	mov	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	4413      	add	r3, r2
 800de76:	00da      	lsls	r2, r3, #3
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	0d1b      	lsrs	r3, r3, #20
 800de7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de7e:	fb02 f303 	mul.w	r3, r2, r3
 800de82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800de84:	e060      	b.n	800df48 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800de8c:	d107      	bne.n	800de9e <SPI_WaitFifoStateUntilTimeout+0x62>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d104      	bne.n	800de9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800de9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dea4:	d050      	beq.n	800df48 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dea6:	f7fa f907 	bl	80080b8 <HAL_GetTick>
 800deaa:	4602      	mov	r2, r0
 800deac:	6a3b      	ldr	r3, [r7, #32]
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d902      	bls.n	800debc <SPI_WaitFifoStateUntilTimeout+0x80>
 800deb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d13d      	bne.n	800df38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	685a      	ldr	r2, [r3, #4]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800deca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ded4:	d111      	bne.n	800defa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dede:	d004      	beq.n	800deea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dee8:	d107      	bne.n	800defa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800def8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800defe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df02:	d10f      	bne.n	800df24 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800df12:	601a      	str	r2, [r3, #0]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800df22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2200      	movs	r2, #0
 800df30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800df34:	2303      	movs	r3, #3
 800df36:	e010      	b.n	800df5a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d101      	bne.n	800df42 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800df3e:	2300      	movs	r3, #0
 800df40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	3b01      	subs	r3, #1
 800df46:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	689a      	ldr	r2, [r3, #8]
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	4013      	ands	r3, r2
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	429a      	cmp	r2, r3
 800df56:	d196      	bne.n	800de86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3728      	adds	r7, #40	@ 0x28
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	2000007c 	.word	0x2000007c

0800df68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af02      	add	r7, sp, #8
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f7ff ff5b 	bl	800de3c <SPI_WaitFifoStateUntilTimeout>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d007      	beq.n	800df9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df90:	f043 0220 	orr.w	r2, r3, #32
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800df98:	2303      	movs	r3, #3
 800df9a:	e027      	b.n	800dfec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	2180      	movs	r1, #128	@ 0x80
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f7ff fec0 	bl	800dd2c <SPI_WaitFlagStateUntilTimeout>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d007      	beq.n	800dfc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dfb6:	f043 0220 	orr.w	r2, r3, #32
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800dfbe:	2303      	movs	r3, #3
 800dfc0:	e014      	b.n	800dfec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f7ff ff34 	bl	800de3c <SPI_WaitFifoStateUntilTimeout>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d007      	beq.n	800dfea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dfde:	f043 0220 	orr.w	r2, r3, #32
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800dfe6:	2303      	movs	r3, #3
 800dfe8:	e000      	b.n	800dfec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800dfea:	2300      	movs	r3, #0
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3710      	adds	r7, #16
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d101      	bne.n	800e006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e002:	2301      	movs	r3, #1
 800e004:	e049      	b.n	800e09a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d106      	bne.n	800e020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7f5 f9e8 	bl	80033f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2202      	movs	r2, #2
 800e024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	3304      	adds	r3, #4
 800e030:	4619      	mov	r1, r3
 800e032:	4610      	mov	r0, r2
 800e034:	f000 fa7c 	bl	800e530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2201      	movs	r2, #1
 800e04c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2201      	movs	r2, #1
 800e06c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2201      	movs	r2, #1
 800e084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2201      	movs	r2, #1
 800e08c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e098:	2300      	movs	r3, #0
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
	...

0800e0a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d001      	beq.n	800e0bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	e036      	b.n	800e12a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2202      	movs	r2, #2
 800e0c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68da      	ldr	r2, [r3, #12]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f042 0201 	orr.w	r2, r2, #1
 800e0d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a17      	ldr	r2, [pc, #92]	@ (800e138 <HAL_TIM_Base_Start_IT+0x94>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d004      	beq.n	800e0e8 <HAL_TIM_Base_Start_IT+0x44>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0e6:	d115      	bne.n	800e114 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	689a      	ldr	r2, [r3, #8]
 800e0ee:	4b13      	ldr	r3, [pc, #76]	@ (800e13c <HAL_TIM_Base_Start_IT+0x98>)
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2b06      	cmp	r3, #6
 800e0f8:	d015      	beq.n	800e126 <HAL_TIM_Base_Start_IT+0x82>
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e100:	d011      	beq.n	800e126 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f042 0201 	orr.w	r2, r2, #1
 800e110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e112:	e008      	b.n	800e126 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f042 0201 	orr.w	r2, r2, #1
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	e000      	b.n	800e128 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e126:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3714      	adds	r7, #20
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	40012c00 	.word	0x40012c00
 800e13c:	00010007 	.word	0x00010007

0800e140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	691b      	ldr	r3, [r3, #16]
 800e156:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	f003 0302 	and.w	r3, r3, #2
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d020      	beq.n	800e1a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f003 0302 	and.w	r3, r3, #2
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d01b      	beq.n	800e1a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f06f 0202 	mvn.w	r2, #2
 800e174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	699b      	ldr	r3, [r3, #24]
 800e182:	f003 0303 	and.w	r3, r3, #3
 800e186:	2b00      	cmp	r3, #0
 800e188:	d003      	beq.n	800e192 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 f9b2 	bl	800e4f4 <HAL_TIM_IC_CaptureCallback>
 800e190:	e005      	b.n	800e19e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f9a4 	bl	800e4e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 f9b5 	bl	800e508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	f003 0304 	and.w	r3, r3, #4
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d020      	beq.n	800e1f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f003 0304 	and.w	r3, r3, #4
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d01b      	beq.n	800e1f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f06f 0204 	mvn.w	r2, #4
 800e1c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2202      	movs	r2, #2
 800e1c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	699b      	ldr	r3, [r3, #24]
 800e1ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d003      	beq.n	800e1de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f98c 	bl	800e4f4 <HAL_TIM_IC_CaptureCallback>
 800e1dc:	e005      	b.n	800e1ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 f97e 	bl	800e4e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 f98f 	bl	800e508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	f003 0308 	and.w	r3, r3, #8
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d020      	beq.n	800e23c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f003 0308 	and.w	r3, r3, #8
 800e200:	2b00      	cmp	r3, #0
 800e202:	d01b      	beq.n	800e23c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f06f 0208 	mvn.w	r2, #8
 800e20c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2204      	movs	r2, #4
 800e212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	69db      	ldr	r3, [r3, #28]
 800e21a:	f003 0303 	and.w	r3, r3, #3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d003      	beq.n	800e22a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f966 	bl	800e4f4 <HAL_TIM_IC_CaptureCallback>
 800e228:	e005      	b.n	800e236 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 f958 	bl	800e4e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 f969 	bl	800e508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2200      	movs	r2, #0
 800e23a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	f003 0310 	and.w	r3, r3, #16
 800e242:	2b00      	cmp	r3, #0
 800e244:	d020      	beq.n	800e288 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f003 0310 	and.w	r3, r3, #16
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d01b      	beq.n	800e288 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f06f 0210 	mvn.w	r2, #16
 800e258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2208      	movs	r2, #8
 800e25e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	69db      	ldr	r3, [r3, #28]
 800e266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d003      	beq.n	800e276 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 f940 	bl	800e4f4 <HAL_TIM_IC_CaptureCallback>
 800e274:	e005      	b.n	800e282 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 f932 	bl	800e4e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 f943 	bl	800e508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2200      	movs	r2, #0
 800e286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	f003 0301 	and.w	r3, r3, #1
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00c      	beq.n	800e2ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f003 0301 	and.w	r3, r3, #1
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d007      	beq.n	800e2ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f06f 0201 	mvn.w	r2, #1
 800e2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7f4 f900 	bl	80024ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d104      	bne.n	800e2c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00c      	beq.n	800e2da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d007      	beq.n	800e2da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e2d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 fa9b 	bl	800e810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00c      	beq.n	800e2fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d007      	beq.n	800e2fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e2f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 fa93 	bl	800e824 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e304:	2b00      	cmp	r3, #0
 800e306:	d00c      	beq.n	800e322 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d007      	beq.n	800e322 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e31a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 f8fd 	bl	800e51c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	f003 0320 	and.w	r3, r3, #32
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00c      	beq.n	800e346 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f003 0320 	and.w	r3, r3, #32
 800e332:	2b00      	cmp	r3, #0
 800e334:	d007      	beq.n	800e346 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f06f 0220 	mvn.w	r2, #32
 800e33e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 fa5b 	bl	800e7fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e346:	bf00      	nop
 800e348:	3710      	adds	r7, #16
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b084      	sub	sp, #16
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
 800e356:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e358:	2300      	movs	r3, #0
 800e35a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e362:	2b01      	cmp	r3, #1
 800e364:	d101      	bne.n	800e36a <HAL_TIM_ConfigClockSource+0x1c>
 800e366:	2302      	movs	r3, #2
 800e368:	e0b6      	b.n	800e4d8 <HAL_TIM_ConfigClockSource+0x18a>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2201      	movs	r2, #1
 800e36e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2202      	movs	r2, #2
 800e376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e388:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e38c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e394:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e3a6:	d03e      	beq.n	800e426 <HAL_TIM_ConfigClockSource+0xd8>
 800e3a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e3ac:	f200 8087 	bhi.w	800e4be <HAL_TIM_ConfigClockSource+0x170>
 800e3b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3b4:	f000 8086 	beq.w	800e4c4 <HAL_TIM_ConfigClockSource+0x176>
 800e3b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3bc:	d87f      	bhi.n	800e4be <HAL_TIM_ConfigClockSource+0x170>
 800e3be:	2b70      	cmp	r3, #112	@ 0x70
 800e3c0:	d01a      	beq.n	800e3f8 <HAL_TIM_ConfigClockSource+0xaa>
 800e3c2:	2b70      	cmp	r3, #112	@ 0x70
 800e3c4:	d87b      	bhi.n	800e4be <HAL_TIM_ConfigClockSource+0x170>
 800e3c6:	2b60      	cmp	r3, #96	@ 0x60
 800e3c8:	d050      	beq.n	800e46c <HAL_TIM_ConfigClockSource+0x11e>
 800e3ca:	2b60      	cmp	r3, #96	@ 0x60
 800e3cc:	d877      	bhi.n	800e4be <HAL_TIM_ConfigClockSource+0x170>
 800e3ce:	2b50      	cmp	r3, #80	@ 0x50
 800e3d0:	d03c      	beq.n	800e44c <HAL_TIM_ConfigClockSource+0xfe>
 800e3d2:	2b50      	cmp	r3, #80	@ 0x50
 800e3d4:	d873      	bhi.n	800e4be <HAL_TIM_ConfigClockSource+0x170>
 800e3d6:	2b40      	cmp	r3, #64	@ 0x40
 800e3d8:	d058      	beq.n	800e48c <HAL_TIM_ConfigClockSource+0x13e>
 800e3da:	2b40      	cmp	r3, #64	@ 0x40
 800e3dc:	d86f      	bhi.n	800e4be <HAL_TIM_ConfigClockSource+0x170>
 800e3de:	2b30      	cmp	r3, #48	@ 0x30
 800e3e0:	d064      	beq.n	800e4ac <HAL_TIM_ConfigClockSource+0x15e>
 800e3e2:	2b30      	cmp	r3, #48	@ 0x30
 800e3e4:	d86b      	bhi.n	800e4be <HAL_TIM_ConfigClockSource+0x170>
 800e3e6:	2b20      	cmp	r3, #32
 800e3e8:	d060      	beq.n	800e4ac <HAL_TIM_ConfigClockSource+0x15e>
 800e3ea:	2b20      	cmp	r3, #32
 800e3ec:	d867      	bhi.n	800e4be <HAL_TIM_ConfigClockSource+0x170>
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d05c      	beq.n	800e4ac <HAL_TIM_ConfigClockSource+0x15e>
 800e3f2:	2b10      	cmp	r3, #16
 800e3f4:	d05a      	beq.n	800e4ac <HAL_TIM_ConfigClockSource+0x15e>
 800e3f6:	e062      	b.n	800e4be <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e408:	f000 f978 	bl	800e6fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e41a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	609a      	str	r2, [r3, #8]
      break;
 800e424:	e04f      	b.n	800e4c6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e436:	f000 f961 	bl	800e6fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	689a      	ldr	r2, [r3, #8]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e448:	609a      	str	r2, [r3, #8]
      break;
 800e44a:	e03c      	b.n	800e4c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e458:	461a      	mov	r2, r3
 800e45a:	f000 f8d3 	bl	800e604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2150      	movs	r1, #80	@ 0x50
 800e464:	4618      	mov	r0, r3
 800e466:	f000 f92c 	bl	800e6c2 <TIM_ITRx_SetConfig>
      break;
 800e46a:	e02c      	b.n	800e4c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e478:	461a      	mov	r2, r3
 800e47a:	f000 f8f2 	bl	800e662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2160      	movs	r1, #96	@ 0x60
 800e484:	4618      	mov	r0, r3
 800e486:	f000 f91c 	bl	800e6c2 <TIM_ITRx_SetConfig>
      break;
 800e48a:	e01c      	b.n	800e4c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e498:	461a      	mov	r2, r3
 800e49a:	f000 f8b3 	bl	800e604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2140      	movs	r1, #64	@ 0x40
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f000 f90c 	bl	800e6c2 <TIM_ITRx_SetConfig>
      break;
 800e4aa:	e00c      	b.n	800e4c6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	4610      	mov	r0, r2
 800e4b8:	f000 f903 	bl	800e6c2 <TIM_ITRx_SetConfig>
      break;
 800e4bc:	e003      	b.n	800e4c6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	73fb      	strb	r3, [r7, #15]
      break;
 800e4c2:	e000      	b.n	800e4c6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e4c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e4e8:	bf00      	nop
 800e4ea:	370c      	adds	r7, #12
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b083      	sub	sp, #12
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e4fc:	bf00      	nop
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e510:	bf00      	nop
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e524:	bf00      	nop
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e530:	b480      	push	{r7}
 800e532:	b085      	sub	sp, #20
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	4a2d      	ldr	r2, [pc, #180]	@ (800e5f8 <TIM_Base_SetConfig+0xc8>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d003      	beq.n	800e550 <TIM_Base_SetConfig+0x20>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e54e:	d108      	bne.n	800e562 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	4313      	orrs	r3, r2
 800e560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a24      	ldr	r2, [pc, #144]	@ (800e5f8 <TIM_Base_SetConfig+0xc8>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d00b      	beq.n	800e582 <TIM_Base_SetConfig+0x52>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e570:	d007      	beq.n	800e582 <TIM_Base_SetConfig+0x52>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4a21      	ldr	r2, [pc, #132]	@ (800e5fc <TIM_Base_SetConfig+0xcc>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d003      	beq.n	800e582 <TIM_Base_SetConfig+0x52>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4a20      	ldr	r2, [pc, #128]	@ (800e600 <TIM_Base_SetConfig+0xd0>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d108      	bne.n	800e594 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	4313      	orrs	r3, r2
 800e592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	695b      	ldr	r3, [r3, #20]
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	689a      	ldr	r2, [r3, #8]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4a10      	ldr	r2, [pc, #64]	@ (800e5f8 <TIM_Base_SetConfig+0xc8>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d007      	beq.n	800e5ca <TIM_Base_SetConfig+0x9a>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4a0f      	ldr	r2, [pc, #60]	@ (800e5fc <TIM_Base_SetConfig+0xcc>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d003      	beq.n	800e5ca <TIM_Base_SetConfig+0x9a>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4a0e      	ldr	r2, [pc, #56]	@ (800e600 <TIM_Base_SetConfig+0xd0>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d103      	bne.n	800e5d2 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	691a      	ldr	r2, [r3, #16]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f043 0204 	orr.w	r2, r3, #4
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	68fa      	ldr	r2, [r7, #12]
 800e5e8:	601a      	str	r2, [r3, #0]
}
 800e5ea:	bf00      	nop
 800e5ec:	3714      	adds	r7, #20
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop
 800e5f8:	40012c00 	.word	0x40012c00
 800e5fc:	40014400 	.word	0x40014400
 800e600:	40014800 	.word	0x40014800

0800e604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e604:	b480      	push	{r7}
 800e606:	b087      	sub	sp, #28
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6a1b      	ldr	r3, [r3, #32]
 800e614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6a1b      	ldr	r3, [r3, #32]
 800e61a:	f023 0201 	bic.w	r2, r3, #1
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	699b      	ldr	r3, [r3, #24]
 800e626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e62e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	011b      	lsls	r3, r3, #4
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	4313      	orrs	r3, r2
 800e638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	f023 030a 	bic.w	r3, r3, #10
 800e640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e642:	697a      	ldr	r2, [r7, #20]
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	4313      	orrs	r3, r2
 800e648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	693a      	ldr	r2, [r7, #16]
 800e64e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	621a      	str	r2, [r3, #32]
}
 800e656:	bf00      	nop
 800e658:	371c      	adds	r7, #28
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr

0800e662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e662:	b480      	push	{r7}
 800e664:	b087      	sub	sp, #28
 800e666:	af00      	add	r7, sp, #0
 800e668:	60f8      	str	r0, [r7, #12]
 800e66a:	60b9      	str	r1, [r7, #8]
 800e66c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	6a1b      	ldr	r3, [r3, #32]
 800e672:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6a1b      	ldr	r3, [r3, #32]
 800e678:	f023 0210 	bic.w	r2, r3, #16
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e68c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	031b      	lsls	r3, r3, #12
 800e692:	693a      	ldr	r2, [r7, #16]
 800e694:	4313      	orrs	r3, r2
 800e696:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e69e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	011b      	lsls	r3, r3, #4
 800e6a4:	697a      	ldr	r2, [r7, #20]
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	693a      	ldr	r2, [r7, #16]
 800e6ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	697a      	ldr	r2, [r7, #20]
 800e6b4:	621a      	str	r2, [r3, #32]
}
 800e6b6:	bf00      	nop
 800e6b8:	371c      	adds	r7, #28
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr

0800e6c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e6c2:	b480      	push	{r7}
 800e6c4:	b085      	sub	sp, #20
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e6d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e6dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	f043 0307 	orr.w	r3, r3, #7
 800e6e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	609a      	str	r2, [r3, #8]
}
 800e6f0:	bf00      	nop
 800e6f2:	3714      	adds	r7, #20
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b087      	sub	sp, #28
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	021a      	lsls	r2, r3, #8
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	431a      	orrs	r2, r3
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	4313      	orrs	r3, r2
 800e724:	697a      	ldr	r2, [r7, #20]
 800e726:	4313      	orrs	r3, r2
 800e728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	697a      	ldr	r2, [r7, #20]
 800e72e:	609a      	str	r2, [r3, #8]
}
 800e730:	bf00      	nop
 800e732:	371c      	adds	r7, #28
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d101      	bne.n	800e754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e750:	2302      	movs	r3, #2
 800e752:	e04a      	b.n	800e7ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2201      	movs	r2, #1
 800e758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2202      	movs	r2, #2
 800e760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	689b      	ldr	r3, [r3, #8]
 800e772:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4a1f      	ldr	r2, [pc, #124]	@ (800e7f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d108      	bne.n	800e790 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e784:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	4313      	orrs	r3, r2
 800e78e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a12      	ldr	r2, [pc, #72]	@ (800e7f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d004      	beq.n	800e7be <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7bc:	d10c      	bne.n	800e7d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e7c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	689b      	ldr	r3, [r3, #8]
 800e7ca:	68ba      	ldr	r2, [r7, #8]
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	40012c00 	.word	0x40012c00

0800e7fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e804:	bf00      	nop
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <LL_RCC_GetUSARTClockSource>:
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800e840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e844:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	4013      	ands	r3, r2
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	370c      	adds	r7, #12
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <LL_RCC_GetLPUARTClockSource>:
{
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800e860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e864:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4013      	ands	r3, r2
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	370c      	adds	r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d101      	bne.n	800e88a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e886:	2301      	movs	r3, #1
 800e888:	e042      	b.n	800e910 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e890:	2b00      	cmp	r3, #0
 800e892:	d106      	bne.n	800e8a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f7f4 fe3d 	bl	800351c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2224      	movs	r2, #36	@ 0x24
 800e8a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f022 0201 	bic.w	r2, r2, #1
 800e8b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d002      	beq.n	800e8c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 fdb2 	bl	800f42c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 fb87 	bl	800efdc <UART_SetConfig>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d101      	bne.n	800e8d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e01b      	b.n	800e910 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	685a      	ldr	r2, [r3, #4]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e8e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	689a      	ldr	r2, [r3, #8]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e8f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f042 0201 	orr.w	r2, r2, #1
 800e906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f000 fe31 	bl	800f570 <UART_CheckIdleState>
 800e90e:	4603      	mov	r3, r0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b0ba      	sub	sp, #232	@ 0xe8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	69db      	ldr	r3, [r3, #28]
 800e926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	689b      	ldr	r3, [r3, #8]
 800e93a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e93e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e942:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e946:	4013      	ands	r3, r2
 800e948:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e94c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e950:	2b00      	cmp	r3, #0
 800e952:	d11b      	bne.n	800e98c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e958:	f003 0320 	and.w	r3, r3, #32
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d015      	beq.n	800e98c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e964:	f003 0320 	and.w	r3, r3, #32
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d105      	bne.n	800e978 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e96c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e974:	2b00      	cmp	r3, #0
 800e976:	d009      	beq.n	800e98c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f000 8300 	beq.w	800ef82 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	4798      	blx	r3
      }
      return;
 800e98a:	e2fa      	b.n	800ef82 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e98c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e990:	2b00      	cmp	r3, #0
 800e992:	f000 8123 	beq.w	800ebdc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e996:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e99a:	4b8d      	ldr	r3, [pc, #564]	@ (800ebd0 <HAL_UART_IRQHandler+0x2b8>)
 800e99c:	4013      	ands	r3, r2
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d106      	bne.n	800e9b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e9a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e9a6:	4b8b      	ldr	r3, [pc, #556]	@ (800ebd4 <HAL_UART_IRQHandler+0x2bc>)
 800e9a8:	4013      	ands	r3, r2
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 8116 	beq.w	800ebdc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e9b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e9b4:	f003 0301 	and.w	r3, r3, #1
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d011      	beq.n	800e9e0 <HAL_UART_IRQHandler+0xc8>
 800e9bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e9c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d00b      	beq.n	800e9e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9d6:	f043 0201 	orr.w	r2, r3, #1
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e9e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e9e4:	f003 0302 	and.w	r3, r3, #2
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d011      	beq.n	800ea10 <HAL_UART_IRQHandler+0xf8>
 800e9ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e9f0:	f003 0301 	and.w	r3, r3, #1
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d00b      	beq.n	800ea10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2202      	movs	r2, #2
 800e9fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea06:	f043 0204 	orr.w	r2, r3, #4
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea14:	f003 0304 	and.w	r3, r3, #4
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d011      	beq.n	800ea40 <HAL_UART_IRQHandler+0x128>
 800ea1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ea20:	f003 0301 	and.w	r3, r3, #1
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00b      	beq.n	800ea40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2204      	movs	r2, #4
 800ea2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea36:	f043 0202 	orr.w	r2, r3, #2
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ea40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea44:	f003 0308 	and.w	r3, r3, #8
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d017      	beq.n	800ea7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ea4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea50:	f003 0320 	and.w	r3, r3, #32
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d105      	bne.n	800ea64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ea58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ea5c:	4b5c      	ldr	r3, [pc, #368]	@ (800ebd0 <HAL_UART_IRQHandler+0x2b8>)
 800ea5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d00b      	beq.n	800ea7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2208      	movs	r2, #8
 800ea6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea72:	f043 0208 	orr.w	r2, r3, #8
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ea7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d012      	beq.n	800eaae <HAL_UART_IRQHandler+0x196>
 800ea88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00c      	beq.n	800eaae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ea9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eaa4:	f043 0220 	orr.w	r2, r3, #32
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f000 8266 	beq.w	800ef86 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eaba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eabe:	f003 0320 	and.w	r3, r3, #32
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d013      	beq.n	800eaee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eaca:	f003 0320 	and.w	r3, r3, #32
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d105      	bne.n	800eade <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ead2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ead6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d007      	beq.n	800eaee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d003      	beq.n	800eaee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eaf4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb02:	2b40      	cmp	r3, #64	@ 0x40
 800eb04:	d005      	beq.n	800eb12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eb06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eb0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d054      	beq.n	800ebbc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 fe43 	bl	800f79e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb22:	2b40      	cmp	r3, #64	@ 0x40
 800eb24:	d146      	bne.n	800ebb4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	3308      	adds	r3, #8
 800eb2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800eb34:	e853 3f00 	ldrex	r3, [r3]
 800eb38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800eb3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eb40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	3308      	adds	r3, #8
 800eb4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800eb52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800eb56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800eb5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800eb62:	e841 2300 	strex	r3, r2, [r1]
 800eb66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800eb6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1d9      	bne.n	800eb26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d017      	beq.n	800ebac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb82:	4a15      	ldr	r2, [pc, #84]	@ (800ebd8 <HAL_UART_IRQHandler+0x2c0>)
 800eb84:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7fa fec6 	bl	800991e <HAL_DMA_Abort_IT>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d019      	beq.n	800ebcc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800eba6:	4610      	mov	r0, r2
 800eba8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebaa:	e00f      	b.n	800ebcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 f9ff 	bl	800efb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebb2:	e00b      	b.n	800ebcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f000 f9fb 	bl	800efb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebba:	e007      	b.n	800ebcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f000 f9f7 	bl	800efb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ebca:	e1dc      	b.n	800ef86 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebcc:	bf00      	nop
    return;
 800ebce:	e1da      	b.n	800ef86 <HAL_UART_IRQHandler+0x66e>
 800ebd0:	10000001 	.word	0x10000001
 800ebd4:	04000120 	.word	0x04000120
 800ebd8:	0800f86b 	.word	0x0800f86b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	f040 8170 	bne.w	800eec6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ebe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebea:	f003 0310 	and.w	r3, r3, #16
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f000 8169 	beq.w	800eec6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ebf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebf8:	f003 0310 	and.w	r3, r3, #16
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f000 8162 	beq.w	800eec6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2210      	movs	r2, #16
 800ec08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec14:	2b40      	cmp	r3, #64	@ 0x40
 800ec16:	f040 80d8 	bne.w	800edca <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ec28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	f000 80af 	beq.w	800ed90 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ec38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	f080 80a7 	bcs.w	800ed90 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ec48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f003 0320 	and.w	r3, r3, #32
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f040 8087 	bne.w	800ed6e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ec6c:	e853 3f00 	ldrex	r3, [r3]
 800ec70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ec74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ec78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	461a      	mov	r2, r3
 800ec86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ec8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec8e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ec96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ec9a:	e841 2300 	strex	r3, r2, [r1]
 800ec9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800eca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1da      	bne.n	800ec60 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	3308      	adds	r3, #8
 800ecb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ecb4:	e853 3f00 	ldrex	r3, [r3]
 800ecb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ecba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ecbc:	f023 0301 	bic.w	r3, r3, #1
 800ecc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	3308      	adds	r3, #8
 800ecca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ecce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ecd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ecd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ecda:	e841 2300 	strex	r3, r2, [r1]
 800ecde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ece0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1e1      	bne.n	800ecaa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	3308      	adds	r3, #8
 800ecec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ecf0:	e853 3f00 	ldrex	r3, [r3]
 800ecf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ecf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ecf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ecfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	3308      	adds	r3, #8
 800ed06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ed0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ed0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ed10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ed12:	e841 2300 	strex	r3, r2, [r1]
 800ed16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ed18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d1e3      	bne.n	800ece6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2220      	movs	r2, #32
 800ed22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed34:	e853 3f00 	ldrex	r3, [r3]
 800ed38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ed3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed3c:	f023 0310 	bic.w	r3, r3, #16
 800ed40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	461a      	mov	r2, r3
 800ed4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ed50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ed54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ed56:	e841 2300 	strex	r3, r2, [r1]
 800ed5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ed5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1e4      	bne.n	800ed2c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7fa fd79 	bl	8009860 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2202      	movs	r2, #2
 800ed72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	4619      	mov	r1, r3
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 f91b 	bl	800efc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ed8e:	e0fc      	b.n	800ef8a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	f040 80f5 	bne.w	800ef8a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f003 0320 	and.w	r3, r3, #32
 800edae:	2b20      	cmp	r3, #32
 800edb0:	f040 80eb 	bne.w	800ef8a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2202      	movs	r2, #2
 800edb8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800edc0:	4619      	mov	r1, r3
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 f8fe 	bl	800efc4 <HAL_UARTEx_RxEventCallback>
      return;
 800edc8:	e0df      	b.n	800ef8a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	1ad3      	subs	r3, r2, r3
 800edda:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f000 80d1 	beq.w	800ef8e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800edec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	f000 80cc 	beq.w	800ef8e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edfe:	e853 3f00 	ldrex	r3, [r3]
 800ee02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ee04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	461a      	mov	r2, r3
 800ee14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ee18:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ee1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee20:	e841 2300 	strex	r3, r2, [r1]
 800ee24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ee26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1e4      	bne.n	800edf6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	3308      	adds	r3, #8
 800ee32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee36:	e853 3f00 	ldrex	r3, [r3]
 800ee3a:	623b      	str	r3, [r7, #32]
   return(result);
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ee42:	f023 0301 	bic.w	r3, r3, #1
 800ee46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	3308      	adds	r3, #8
 800ee50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ee54:	633a      	str	r2, [r7, #48]	@ 0x30
 800ee56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee5c:	e841 2300 	strex	r3, r2, [r1]
 800ee60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ee62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1e1      	bne.n	800ee2c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2220      	movs	r2, #32
 800ee6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	e853 3f00 	ldrex	r3, [r3]
 800ee88:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f023 0310 	bic.w	r3, r3, #16
 800ee90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	461a      	mov	r2, r3
 800ee9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ee9e:	61fb      	str	r3, [r7, #28]
 800eea0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea2:	69b9      	ldr	r1, [r7, #24]
 800eea4:	69fa      	ldr	r2, [r7, #28]
 800eea6:	e841 2300 	strex	r3, r2, [r1]
 800eeaa:	617b      	str	r3, [r7, #20]
   return(result);
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d1e4      	bne.n	800ee7c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2202      	movs	r2, #2
 800eeb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eeb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eebc:	4619      	mov	r1, r3
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 f880 	bl	800efc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eec4:	e063      	b.n	800ef8e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eeca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00e      	beq.n	800eef0 <HAL_UART_IRQHandler+0x5d8>
 800eed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d008      	beq.n	800eef0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800eee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fcfb 	bl	800f8e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eeee:	e051      	b.n	800ef94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d014      	beq.n	800ef26 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eefc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d105      	bne.n	800ef14 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ef08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d008      	beq.n	800ef26 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d03a      	beq.n	800ef92 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	4798      	blx	r3
    }
    return;
 800ef24:	e035      	b.n	800ef92 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ef26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d009      	beq.n	800ef46 <HAL_UART_IRQHandler+0x62e>
 800ef32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d003      	beq.n	800ef46 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 fca5 	bl	800f88e <UART_EndTransmit_IT>
    return;
 800ef44:	e026      	b.n	800ef94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ef46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d009      	beq.n	800ef66 <HAL_UART_IRQHandler+0x64e>
 800ef52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d003      	beq.n	800ef66 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f000 fcd4 	bl	800f90c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ef64:	e016      	b.n	800ef94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ef66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d010      	beq.n	800ef94 <HAL_UART_IRQHandler+0x67c>
 800ef72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	da0c      	bge.n	800ef94 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 fcbc 	bl	800f8f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ef80:	e008      	b.n	800ef94 <HAL_UART_IRQHandler+0x67c>
      return;
 800ef82:	bf00      	nop
 800ef84:	e006      	b.n	800ef94 <HAL_UART_IRQHandler+0x67c>
    return;
 800ef86:	bf00      	nop
 800ef88:	e004      	b.n	800ef94 <HAL_UART_IRQHandler+0x67c>
      return;
 800ef8a:	bf00      	nop
 800ef8c:	e002      	b.n	800ef94 <HAL_UART_IRQHandler+0x67c>
      return;
 800ef8e:	bf00      	nop
 800ef90:	e000      	b.n	800ef94 <HAL_UART_IRQHandler+0x67c>
    return;
 800ef92:	bf00      	nop
  }
}
 800ef94:	37e8      	adds	r7, #232	@ 0xe8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop

0800ef9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800efa4:	bf00      	nop
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800efb8:	bf00      	nop
 800efba:	370c      	adds	r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	460b      	mov	r3, r1
 800efce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800efd0:	bf00      	nop
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800efdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800efe0:	b08c      	sub	sp, #48	@ 0x30
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800efe6:	2300      	movs	r3, #0
 800efe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	689a      	ldr	r2, [r3, #8]
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	691b      	ldr	r3, [r3, #16]
 800eff4:	431a      	orrs	r2, r3
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	695b      	ldr	r3, [r3, #20]
 800effa:	431a      	orrs	r2, r3
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	69db      	ldr	r3, [r3, #28]
 800f000:	4313      	orrs	r3, r2
 800f002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	4baf      	ldr	r3, [pc, #700]	@ (800f2c8 <UART_SetConfig+0x2ec>)
 800f00c:	4013      	ands	r3, r2
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	6812      	ldr	r2, [r2, #0]
 800f012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f014:	430b      	orrs	r3, r1
 800f016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	68da      	ldr	r2, [r3, #12]
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	430a      	orrs	r2, r1
 800f02c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4aa4      	ldr	r2, [pc, #656]	@ (800f2cc <UART_SetConfig+0x2f0>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d004      	beq.n	800f048 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	6a1b      	ldr	r3, [r3, #32]
 800f042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f044:	4313      	orrs	r3, r2
 800f046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f052:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	6812      	ldr	r2, [r2, #0]
 800f05a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f05c:	430b      	orrs	r3, r1
 800f05e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f066:	f023 010f 	bic.w	r1, r3, #15
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	430a      	orrs	r2, r1
 800f074:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a95      	ldr	r2, [pc, #596]	@ (800f2d0 <UART_SetConfig+0x2f4>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d125      	bne.n	800f0cc <UART_SetConfig+0xf0>
 800f080:	2003      	movs	r0, #3
 800f082:	f7ff fbd9 	bl	800e838 <LL_RCC_GetUSARTClockSource>
 800f086:	4603      	mov	r3, r0
 800f088:	2b03      	cmp	r3, #3
 800f08a:	d81b      	bhi.n	800f0c4 <UART_SetConfig+0xe8>
 800f08c:	a201      	add	r2, pc, #4	@ (adr r2, 800f094 <UART_SetConfig+0xb8>)
 800f08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f092:	bf00      	nop
 800f094:	0800f0a5 	.word	0x0800f0a5
 800f098:	0800f0b5 	.word	0x0800f0b5
 800f09c:	0800f0ad 	.word	0x0800f0ad
 800f0a0:	0800f0bd 	.word	0x0800f0bd
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0aa:	e042      	b.n	800f132 <UART_SetConfig+0x156>
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0b2:	e03e      	b.n	800f132 <UART_SetConfig+0x156>
 800f0b4:	2304      	movs	r3, #4
 800f0b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0ba:	e03a      	b.n	800f132 <UART_SetConfig+0x156>
 800f0bc:	2308      	movs	r3, #8
 800f0be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0c2:	e036      	b.n	800f132 <UART_SetConfig+0x156>
 800f0c4:	2310      	movs	r3, #16
 800f0c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0ca:	e032      	b.n	800f132 <UART_SetConfig+0x156>
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	4a7e      	ldr	r2, [pc, #504]	@ (800f2cc <UART_SetConfig+0x2f0>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d12a      	bne.n	800f12c <UART_SetConfig+0x150>
 800f0d6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800f0da:	f7ff fbbd 	bl	800e858 <LL_RCC_GetLPUARTClockSource>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f0e4:	d01a      	beq.n	800f11c <UART_SetConfig+0x140>
 800f0e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f0ea:	d81b      	bhi.n	800f124 <UART_SetConfig+0x148>
 800f0ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0f0:	d00c      	beq.n	800f10c <UART_SetConfig+0x130>
 800f0f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0f6:	d815      	bhi.n	800f124 <UART_SetConfig+0x148>
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d003      	beq.n	800f104 <UART_SetConfig+0x128>
 800f0fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f100:	d008      	beq.n	800f114 <UART_SetConfig+0x138>
 800f102:	e00f      	b.n	800f124 <UART_SetConfig+0x148>
 800f104:	2300      	movs	r3, #0
 800f106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f10a:	e012      	b.n	800f132 <UART_SetConfig+0x156>
 800f10c:	2302      	movs	r3, #2
 800f10e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f112:	e00e      	b.n	800f132 <UART_SetConfig+0x156>
 800f114:	2304      	movs	r3, #4
 800f116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f11a:	e00a      	b.n	800f132 <UART_SetConfig+0x156>
 800f11c:	2308      	movs	r3, #8
 800f11e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f122:	e006      	b.n	800f132 <UART_SetConfig+0x156>
 800f124:	2310      	movs	r3, #16
 800f126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f12a:	e002      	b.n	800f132 <UART_SetConfig+0x156>
 800f12c:	2310      	movs	r3, #16
 800f12e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4a65      	ldr	r2, [pc, #404]	@ (800f2cc <UART_SetConfig+0x2f0>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	f040 8097 	bne.w	800f26c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f13e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f142:	2b08      	cmp	r3, #8
 800f144:	d823      	bhi.n	800f18e <UART_SetConfig+0x1b2>
 800f146:	a201      	add	r2, pc, #4	@ (adr r2, 800f14c <UART_SetConfig+0x170>)
 800f148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f14c:	0800f171 	.word	0x0800f171
 800f150:	0800f18f 	.word	0x0800f18f
 800f154:	0800f179 	.word	0x0800f179
 800f158:	0800f18f 	.word	0x0800f18f
 800f15c:	0800f17f 	.word	0x0800f17f
 800f160:	0800f18f 	.word	0x0800f18f
 800f164:	0800f18f 	.word	0x0800f18f
 800f168:	0800f18f 	.word	0x0800f18f
 800f16c:	0800f187 	.word	0x0800f187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f170:	f7fd fb94 	bl	800c89c <HAL_RCC_GetPCLK1Freq>
 800f174:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f176:	e010      	b.n	800f19a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f178:	4b56      	ldr	r3, [pc, #344]	@ (800f2d4 <UART_SetConfig+0x2f8>)
 800f17a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f17c:	e00d      	b.n	800f19a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f17e:	f7fd fb0d 	bl	800c79c <HAL_RCC_GetSysClockFreq>
 800f182:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f184:	e009      	b.n	800f19a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f186:	f248 0306 	movw	r3, #32774	@ 0x8006
 800f18a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f18c:	e005      	b.n	800f19a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800f18e:	2300      	movs	r3, #0
 800f190:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f192:	2301      	movs	r3, #1
 800f194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f198:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	f000 812b 	beq.w	800f3f8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a6:	4a4c      	ldr	r2, [pc, #304]	@ (800f2d8 <UART_SetConfig+0x2fc>)
 800f1a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	685a      	ldr	r2, [r3, #4]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	005b      	lsls	r3, r3, #1
 800f1be:	4413      	add	r3, r2
 800f1c0:	69ba      	ldr	r2, [r7, #24]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d305      	bcc.n	800f1d2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f1cc:	69ba      	ldr	r2, [r7, #24]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d903      	bls.n	800f1da <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f1d8:	e10e      	b.n	800f3f8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1dc:	2200      	movs	r2, #0
 800f1de:	60bb      	str	r3, [r7, #8]
 800f1e0:	60fa      	str	r2, [r7, #12]
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1e6:	4a3c      	ldr	r2, [pc, #240]	@ (800f2d8 <UART_SetConfig+0x2fc>)
 800f1e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	603b      	str	r3, [r7, #0]
 800f1f2:	607a      	str	r2, [r7, #4]
 800f1f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f1fc:	f7f1 fccc 	bl	8000b98 <__aeabi_uldivmod>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	4610      	mov	r0, r2
 800f206:	4619      	mov	r1, r3
 800f208:	f04f 0200 	mov.w	r2, #0
 800f20c:	f04f 0300 	mov.w	r3, #0
 800f210:	020b      	lsls	r3, r1, #8
 800f212:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f216:	0202      	lsls	r2, r0, #8
 800f218:	6979      	ldr	r1, [r7, #20]
 800f21a:	6849      	ldr	r1, [r1, #4]
 800f21c:	0849      	lsrs	r1, r1, #1
 800f21e:	2000      	movs	r0, #0
 800f220:	460c      	mov	r4, r1
 800f222:	4605      	mov	r5, r0
 800f224:	eb12 0804 	adds.w	r8, r2, r4
 800f228:	eb43 0905 	adc.w	r9, r3, r5
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	2200      	movs	r2, #0
 800f232:	469a      	mov	sl, r3
 800f234:	4693      	mov	fp, r2
 800f236:	4652      	mov	r2, sl
 800f238:	465b      	mov	r3, fp
 800f23a:	4640      	mov	r0, r8
 800f23c:	4649      	mov	r1, r9
 800f23e:	f7f1 fcab 	bl	8000b98 <__aeabi_uldivmod>
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	4613      	mov	r3, r2
 800f248:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f24a:	6a3b      	ldr	r3, [r7, #32]
 800f24c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f250:	d308      	bcc.n	800f264 <UART_SetConfig+0x288>
 800f252:	6a3b      	ldr	r3, [r7, #32]
 800f254:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f258:	d204      	bcs.n	800f264 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	6a3a      	ldr	r2, [r7, #32]
 800f260:	60da      	str	r2, [r3, #12]
 800f262:	e0c9      	b.n	800f3f8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800f264:	2301      	movs	r3, #1
 800f266:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f26a:	e0c5      	b.n	800f3f8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	69db      	ldr	r3, [r3, #28]
 800f270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f274:	d16d      	bne.n	800f352 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800f276:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f27a:	3b01      	subs	r3, #1
 800f27c:	2b07      	cmp	r3, #7
 800f27e:	d82d      	bhi.n	800f2dc <UART_SetConfig+0x300>
 800f280:	a201      	add	r2, pc, #4	@ (adr r2, 800f288 <UART_SetConfig+0x2ac>)
 800f282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f286:	bf00      	nop
 800f288:	0800f2a9 	.word	0x0800f2a9
 800f28c:	0800f2b1 	.word	0x0800f2b1
 800f290:	0800f2dd 	.word	0x0800f2dd
 800f294:	0800f2b7 	.word	0x0800f2b7
 800f298:	0800f2dd 	.word	0x0800f2dd
 800f29c:	0800f2dd 	.word	0x0800f2dd
 800f2a0:	0800f2dd 	.word	0x0800f2dd
 800f2a4:	0800f2bf 	.word	0x0800f2bf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2a8:	f7fd fb0e 	bl	800c8c8 <HAL_RCC_GetPCLK2Freq>
 800f2ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f2ae:	e01b      	b.n	800f2e8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f2b0:	4b08      	ldr	r3, [pc, #32]	@ (800f2d4 <UART_SetConfig+0x2f8>)
 800f2b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f2b4:	e018      	b.n	800f2e8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f2b6:	f7fd fa71 	bl	800c79c <HAL_RCC_GetSysClockFreq>
 800f2ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f2bc:	e014      	b.n	800f2e8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2be:	f248 0306 	movw	r3, #32774	@ 0x8006
 800f2c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f2c4:	e010      	b.n	800f2e8 <UART_SetConfig+0x30c>
 800f2c6:	bf00      	nop
 800f2c8:	cfff69f3 	.word	0xcfff69f3
 800f2cc:	40008000 	.word	0x40008000
 800f2d0:	40013800 	.word	0x40013800
 800f2d4:	00f42400 	.word	0x00f42400
 800f2d8:	08015780 	.word	0x08015780
      default:
        pclk = 0U;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f2e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f000 8084 	beq.w	800f3f8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2f4:	4a4b      	ldr	r2, [pc, #300]	@ (800f424 <UART_SetConfig+0x448>)
 800f2f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800f302:	005a      	lsls	r2, r3, #1
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	085b      	lsrs	r3, r3, #1
 800f30a:	441a      	add	r2, r3
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	fbb2 f3f3 	udiv	r3, r2, r3
 800f314:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f316:	6a3b      	ldr	r3, [r7, #32]
 800f318:	2b0f      	cmp	r3, #15
 800f31a:	d916      	bls.n	800f34a <UART_SetConfig+0x36e>
 800f31c:	6a3b      	ldr	r3, [r7, #32]
 800f31e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f322:	d212      	bcs.n	800f34a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f324:	6a3b      	ldr	r3, [r7, #32]
 800f326:	b29b      	uxth	r3, r3
 800f328:	f023 030f 	bic.w	r3, r3, #15
 800f32c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f32e:	6a3b      	ldr	r3, [r7, #32]
 800f330:	085b      	lsrs	r3, r3, #1
 800f332:	b29b      	uxth	r3, r3
 800f334:	f003 0307 	and.w	r3, r3, #7
 800f338:	b29a      	uxth	r2, r3
 800f33a:	8bfb      	ldrh	r3, [r7, #30]
 800f33c:	4313      	orrs	r3, r2
 800f33e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	8bfa      	ldrh	r2, [r7, #30]
 800f346:	60da      	str	r2, [r3, #12]
 800f348:	e056      	b.n	800f3f8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f34a:	2301      	movs	r3, #1
 800f34c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f350:	e052      	b.n	800f3f8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f352:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f356:	3b01      	subs	r3, #1
 800f358:	2b07      	cmp	r3, #7
 800f35a:	d822      	bhi.n	800f3a2 <UART_SetConfig+0x3c6>
 800f35c:	a201      	add	r2, pc, #4	@ (adr r2, 800f364 <UART_SetConfig+0x388>)
 800f35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f362:	bf00      	nop
 800f364:	0800f385 	.word	0x0800f385
 800f368:	0800f38d 	.word	0x0800f38d
 800f36c:	0800f3a3 	.word	0x0800f3a3
 800f370:	0800f393 	.word	0x0800f393
 800f374:	0800f3a3 	.word	0x0800f3a3
 800f378:	0800f3a3 	.word	0x0800f3a3
 800f37c:	0800f3a3 	.word	0x0800f3a3
 800f380:	0800f39b 	.word	0x0800f39b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f384:	f7fd faa0 	bl	800c8c8 <HAL_RCC_GetPCLK2Freq>
 800f388:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f38a:	e010      	b.n	800f3ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f38c:	4b26      	ldr	r3, [pc, #152]	@ (800f428 <UART_SetConfig+0x44c>)
 800f38e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f390:	e00d      	b.n	800f3ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f392:	f7fd fa03 	bl	800c79c <HAL_RCC_GetSysClockFreq>
 800f396:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f398:	e009      	b.n	800f3ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f39a:	f248 0306 	movw	r3, #32774	@ 0x8006
 800f39e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f3a0:	e005      	b.n	800f3ae <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f3ac:	bf00      	nop
    }

    if (pclk != 0U)
 800f3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d021      	beq.n	800f3f8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3b8:	4a1a      	ldr	r2, [pc, #104]	@ (800f424 <UART_SetConfig+0x448>)
 800f3ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3be:	461a      	mov	r2, r3
 800f3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	085b      	lsrs	r3, r3, #1
 800f3cc:	441a      	add	r2, r3
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f3d8:	6a3b      	ldr	r3, [r7, #32]
 800f3da:	2b0f      	cmp	r3, #15
 800f3dc:	d909      	bls.n	800f3f2 <UART_SetConfig+0x416>
 800f3de:	6a3b      	ldr	r3, [r7, #32]
 800f3e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f3e4:	d205      	bcs.n	800f3f2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f3e6:	6a3b      	ldr	r3, [r7, #32]
 800f3e8:	b29a      	uxth	r2, r3
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	60da      	str	r2, [r3, #12]
 800f3f0:	e002      	b.n	800f3f8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	2201      	movs	r2, #1
 800f404:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	2200      	movs	r2, #0
 800f40c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	2200      	movs	r2, #0
 800f412:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f414:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3730      	adds	r7, #48	@ 0x30
 800f41c:	46bd      	mov	sp, r7
 800f41e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f422:	bf00      	nop
 800f424:	08015780 	.word	0x08015780
 800f428:	00f42400 	.word	0x00f42400

0800f42c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f438:	f003 0308 	and.w	r3, r3, #8
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00a      	beq.n	800f456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	430a      	orrs	r2, r1
 800f454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f45a:	f003 0301 	and.w	r3, r3, #1
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00a      	beq.n	800f478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	430a      	orrs	r2, r1
 800f476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f47c:	f003 0302 	and.w	r3, r3, #2
 800f480:	2b00      	cmp	r3, #0
 800f482:	d00a      	beq.n	800f49a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	430a      	orrs	r2, r1
 800f498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f49e:	f003 0304 	and.w	r3, r3, #4
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d00a      	beq.n	800f4bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	430a      	orrs	r2, r1
 800f4ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4c0:	f003 0310 	and.w	r3, r3, #16
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00a      	beq.n	800f4de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	430a      	orrs	r2, r1
 800f4dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4e2:	f003 0320 	and.w	r3, r3, #32
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00a      	beq.n	800f500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	689b      	ldr	r3, [r3, #8]
 800f4f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	430a      	orrs	r2, r1
 800f4fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d01a      	beq.n	800f542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	430a      	orrs	r2, r1
 800f520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f52a:	d10a      	bne.n	800f542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	430a      	orrs	r2, r1
 800f540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00a      	beq.n	800f564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	430a      	orrs	r2, r1
 800f562:	605a      	str	r2, [r3, #4]
  }
}
 800f564:	bf00      	nop
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b098      	sub	sp, #96	@ 0x60
 800f574:	af02      	add	r7, sp, #8
 800f576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f580:	f7f8 fd9a 	bl	80080b8 <HAL_GetTick>
 800f584:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f003 0308 	and.w	r3, r3, #8
 800f590:	2b08      	cmp	r3, #8
 800f592:	d12f      	bne.n	800f5f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f594:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f598:	9300      	str	r3, [sp, #0]
 800f59a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f59c:	2200      	movs	r2, #0
 800f59e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 f88e 	bl	800f6c4 <UART_WaitOnFlagUntilTimeout>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d022      	beq.n	800f5f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b6:	e853 3f00 	ldrex	r3, [r3]
 800f5ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f5c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f5cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800f5ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f5d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f5d4:	e841 2300 	strex	r3, r2, [r1]
 800f5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d1e6      	bne.n	800f5ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2220      	movs	r2, #32
 800f5e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5f0:	2303      	movs	r3, #3
 800f5f2:	e063      	b.n	800f6bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f003 0304 	and.w	r3, r3, #4
 800f5fe:	2b04      	cmp	r3, #4
 800f600:	d149      	bne.n	800f696 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f602:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f60a:	2200      	movs	r2, #0
 800f60c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 f857 	bl	800f6c4 <UART_WaitOnFlagUntilTimeout>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d03c      	beq.n	800f696 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f624:	e853 3f00 	ldrex	r3, [r3]
 800f628:	623b      	str	r3, [r7, #32]
   return(result);
 800f62a:	6a3b      	ldr	r3, [r7, #32]
 800f62c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f630:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	461a      	mov	r2, r3
 800f638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f63a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f63c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f63e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f642:	e841 2300 	strex	r3, r2, [r1]
 800f646:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d1e6      	bne.n	800f61c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	3308      	adds	r3, #8
 800f654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	e853 3f00 	ldrex	r3, [r3]
 800f65c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f023 0301 	bic.w	r3, r3, #1
 800f664:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	3308      	adds	r3, #8
 800f66c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f66e:	61fa      	str	r2, [r7, #28]
 800f670:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f672:	69b9      	ldr	r1, [r7, #24]
 800f674:	69fa      	ldr	r2, [r7, #28]
 800f676:	e841 2300 	strex	r3, r2, [r1]
 800f67a:	617b      	str	r3, [r7, #20]
   return(result);
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1e5      	bne.n	800f64e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2220      	movs	r2, #32
 800f686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f692:	2303      	movs	r3, #3
 800f694:	e012      	b.n	800f6bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2220      	movs	r2, #32
 800f69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2220      	movs	r2, #32
 800f6a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3758      	adds	r7, #88	@ 0x58
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	603b      	str	r3, [r7, #0]
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6d4:	e04f      	b.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f6dc:	d04b      	beq.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f6de:	f7f8 fceb 	bl	80080b8 <HAL_GetTick>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	1ad3      	subs	r3, r2, r3
 800f6e8:	69ba      	ldr	r2, [r7, #24]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d302      	bcc.n	800f6f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800f6ee:	69bb      	ldr	r3, [r7, #24]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d101      	bne.n	800f6f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f6f4:	2303      	movs	r3, #3
 800f6f6:	e04e      	b.n	800f796 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f003 0304 	and.w	r3, r3, #4
 800f702:	2b00      	cmp	r3, #0
 800f704:	d037      	beq.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	2b80      	cmp	r3, #128	@ 0x80
 800f70a:	d034      	beq.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	2b40      	cmp	r3, #64	@ 0x40
 800f710:	d031      	beq.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	69db      	ldr	r3, [r3, #28]
 800f718:	f003 0308 	and.w	r3, r3, #8
 800f71c:	2b08      	cmp	r3, #8
 800f71e:	d110      	bne.n	800f742 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2208      	movs	r2, #8
 800f726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f728:	68f8      	ldr	r0, [r7, #12]
 800f72a:	f000 f838 	bl	800f79e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2208      	movs	r2, #8
 800f732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2200      	movs	r2, #0
 800f73a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f73e:	2301      	movs	r3, #1
 800f740:	e029      	b.n	800f796 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	69db      	ldr	r3, [r3, #28]
 800f748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f74c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f750:	d111      	bne.n	800f776 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f75a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	f000 f81e 	bl	800f79e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2220      	movs	r2, #32
 800f766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f772:	2303      	movs	r3, #3
 800f774:	e00f      	b.n	800f796 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	69da      	ldr	r2, [r3, #28]
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	4013      	ands	r3, r2
 800f780:	68ba      	ldr	r2, [r7, #8]
 800f782:	429a      	cmp	r2, r3
 800f784:	bf0c      	ite	eq
 800f786:	2301      	moveq	r3, #1
 800f788:	2300      	movne	r3, #0
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	461a      	mov	r2, r3
 800f78e:	79fb      	ldrb	r3, [r7, #7]
 800f790:	429a      	cmp	r2, r3
 800f792:	d0a0      	beq.n	800f6d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f794:	2300      	movs	r3, #0
}
 800f796:	4618      	mov	r0, r3
 800f798:	3710      	adds	r7, #16
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f79e:	b480      	push	{r7}
 800f7a0:	b095      	sub	sp, #84	@ 0x54
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7ae:	e853 3f00 	ldrex	r3, [r3]
 800f7b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f7ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f7c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f7ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f7cc:	e841 2300 	strex	r3, r2, [r1]
 800f7d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d1e6      	bne.n	800f7a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	3308      	adds	r3, #8
 800f7de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e0:	6a3b      	ldr	r3, [r7, #32]
 800f7e2:	e853 3f00 	ldrex	r3, [r3]
 800f7e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f7ee:	f023 0301 	bic.w	r3, r3, #1
 800f7f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	3308      	adds	r3, #8
 800f7fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f7fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f7fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f804:	e841 2300 	strex	r3, r2, [r1]
 800f808:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d1e3      	bne.n	800f7d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f814:	2b01      	cmp	r3, #1
 800f816:	d118      	bne.n	800f84a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	e853 3f00 	ldrex	r3, [r3]
 800f824:	60bb      	str	r3, [r7, #8]
   return(result);
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	f023 0310 	bic.w	r3, r3, #16
 800f82c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	461a      	mov	r2, r3
 800f834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f836:	61bb      	str	r3, [r7, #24]
 800f838:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f83a:	6979      	ldr	r1, [r7, #20]
 800f83c:	69ba      	ldr	r2, [r7, #24]
 800f83e:	e841 2300 	strex	r3, r2, [r1]
 800f842:	613b      	str	r3, [r7, #16]
   return(result);
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1e6      	bne.n	800f818 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2220      	movs	r2, #32
 800f84e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2200      	movs	r2, #0
 800f856:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2200      	movs	r2, #0
 800f85c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f85e:	bf00      	nop
 800f860:	3754      	adds	r7, #84	@ 0x54
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr

0800f86a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b084      	sub	sp, #16
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f876:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2200      	movs	r2, #0
 800f87c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f7ff fb95 	bl	800efb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f886:	bf00      	nop
 800f888:	3710      	adds	r7, #16
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}

0800f88e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f88e:	b580      	push	{r7, lr}
 800f890:	b088      	sub	sp, #32
 800f892:	af00      	add	r7, sp, #0
 800f894:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	e853 3f00 	ldrex	r3, [r3]
 800f8a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f8aa:	61fb      	str	r3, [r7, #28]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	61bb      	str	r3, [r7, #24]
 800f8b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b8:	6979      	ldr	r1, [r7, #20]
 800f8ba:	69ba      	ldr	r2, [r7, #24]
 800f8bc:	e841 2300 	strex	r3, r2, [r1]
 800f8c0:	613b      	str	r3, [r7, #16]
   return(result);
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d1e6      	bne.n	800f896 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2220      	movs	r2, #32
 800f8cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f7ff fb60 	bl	800ef9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f8dc:	bf00      	nop
 800f8de:	3720      	adds	r7, #32
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f8ec:	bf00      	nop
 800f8ee:	370c      	adds	r7, #12
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f900:	bf00      	nop
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f914:	bf00      	nop
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d101      	bne.n	800f936 <HAL_UARTEx_DisableFifoMode+0x16>
 800f932:	2302      	movs	r3, #2
 800f934:	e027      	b.n	800f986 <HAL_UARTEx_DisableFifoMode+0x66>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2201      	movs	r2, #1
 800f93a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2224      	movs	r2, #36	@ 0x24
 800f942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f022 0201 	bic.w	r2, r2, #1
 800f95c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f964:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2200      	movs	r2, #0
 800f96a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2220      	movs	r2, #32
 800f978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f984:	2300      	movs	r3, #0
}
 800f986:	4618      	mov	r0, r3
 800f988:	3714      	adds	r7, #20
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr

0800f992 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f992:	b580      	push	{r7, lr}
 800f994:	b084      	sub	sp, #16
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
 800f99a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d101      	bne.n	800f9aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f9a6:	2302      	movs	r3, #2
 800f9a8:	e02d      	b.n	800fa06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2224      	movs	r2, #36	@ 0x24
 800f9b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f022 0201 	bic.w	r2, r2, #1
 800f9d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	689b      	ldr	r3, [r3, #8]
 800f9d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	683a      	ldr	r2, [r7, #0]
 800f9e2:	430a      	orrs	r2, r1
 800f9e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 f850 	bl	800fa8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	68fa      	ldr	r2, [r7, #12]
 800f9f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2220      	movs	r2, #32
 800f9f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa04:	2300      	movs	r3, #0
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3710      	adds	r7, #16
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}

0800fa0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa0e:	b580      	push	{r7, lr}
 800fa10:	b084      	sub	sp, #16
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
 800fa16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d101      	bne.n	800fa26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa22:	2302      	movs	r3, #2
 800fa24:	e02d      	b.n	800fa82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2201      	movs	r2, #1
 800fa2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2224      	movs	r2, #36	@ 0x24
 800fa32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f022 0201 	bic.w	r2, r2, #1
 800fa4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	683a      	ldr	r2, [r7, #0]
 800fa5e:	430a      	orrs	r2, r1
 800fa60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 f812 	bl	800fa8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2220      	movs	r2, #32
 800fa74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa80:	2300      	movs	r3, #0
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3710      	adds	r7, #16
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
	...

0800fa8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b085      	sub	sp, #20
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d108      	bne.n	800faae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2201      	movs	r2, #1
 800faa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2201      	movs	r2, #1
 800faa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800faac:	e031      	b.n	800fb12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800faae:	2308      	movs	r3, #8
 800fab0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fab2:	2308      	movs	r3, #8
 800fab4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	689b      	ldr	r3, [r3, #8]
 800fabc:	0e5b      	lsrs	r3, r3, #25
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	f003 0307 	and.w	r3, r3, #7
 800fac4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	689b      	ldr	r3, [r3, #8]
 800facc:	0f5b      	lsrs	r3, r3, #29
 800face:	b2db      	uxtb	r3, r3
 800fad0:	f003 0307 	and.w	r3, r3, #7
 800fad4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fad6:	7bbb      	ldrb	r3, [r7, #14]
 800fad8:	7b3a      	ldrb	r2, [r7, #12]
 800fada:	4911      	ldr	r1, [pc, #68]	@ (800fb20 <UARTEx_SetNbDataToProcess+0x94>)
 800fadc:	5c8a      	ldrb	r2, [r1, r2]
 800fade:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fae2:	7b3a      	ldrb	r2, [r7, #12]
 800fae4:	490f      	ldr	r1, [pc, #60]	@ (800fb24 <UARTEx_SetNbDataToProcess+0x98>)
 800fae6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fae8:	fb93 f3f2 	sdiv	r3, r3, r2
 800faec:	b29a      	uxth	r2, r3
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800faf4:	7bfb      	ldrb	r3, [r7, #15]
 800faf6:	7b7a      	ldrb	r2, [r7, #13]
 800faf8:	4909      	ldr	r1, [pc, #36]	@ (800fb20 <UARTEx_SetNbDataToProcess+0x94>)
 800fafa:	5c8a      	ldrb	r2, [r1, r2]
 800fafc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb00:	7b7a      	ldrb	r2, [r7, #13]
 800fb02:	4908      	ldr	r1, [pc, #32]	@ (800fb24 <UARTEx_SetNbDataToProcess+0x98>)
 800fb04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb06:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb0a:	b29a      	uxth	r2, r3
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fb12:	bf00      	nop
 800fb14:	3714      	adds	r7, #20
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	08015798 	.word	0x08015798
 800fb24:	080157a0 	.word	0x080157a0

0800fb28 <_Z14i2c_mux_selectP7i2c_muxi>:

	// Ensure all channels are disabled by default
	return i2c_mux_select_multi(mux, 0);
}

int i2c_mux_select(i2c_mux_t* mux, int ch) {
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]

	// If ch is in range 0-7 then one channel is enabled, else all are disabled
	uint8_t mask = 1 << ch;
 800fb32:	2201      	movs	r2, #1
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	fa02 f303 	lsl.w	r3, r2, r3
 800fb3a:	73fb      	strb	r3, [r7, #15]
	return i2c_mux_select_multi(mux, mask);
 800fb3c:	7bfb      	ldrb	r3, [r7, #15]
 800fb3e:	4619      	mov	r1, r3
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f000 f805 	bl	800fb50 <_Z20i2c_mux_select_multiP7i2c_muxh>
 800fb46:	4603      	mov	r3, r0
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3710      	adds	r7, #16
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <_Z20i2c_mux_select_multiP7i2c_muxh>:

int i2c_mux_select_multi(i2c_mux_t* mux, uint8_t mask) {
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b086      	sub	sp, #24
 800fb54:	af02      	add	r7, sp, #8
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	460b      	mov	r3, r1
 800fb5a:	70fb      	strb	r3, [r7, #3]
	if (mux->hi2c == NULL) return 1;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d101      	bne.n	800fb68 <_Z20i2c_mux_select_multiP7i2c_muxh+0x18>
 800fb64:	2301      	movs	r3, #1
 800fb66:	e02f      	b.n	800fbc8 <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>

	// Transmit bitmask to multiplexer
	uint8_t addr = (I2C_MUX_BASE_ADDR + mux->addr_offset) << 1;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	7a9b      	ldrb	r3, [r3, #10]
 800fb6c:	3370      	adds	r3, #112	@ 0x70
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	005b      	lsls	r3, r3, #1
 800fb72:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(mux->hi2c, addr, &mask, 1, I2C_MUX_TIMEOUT);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6818      	ldr	r0, [r3, #0]
 800fb78:	7bfb      	ldrb	r3, [r7, #15]
 800fb7a:	b299      	uxth	r1, r3
 800fb7c:	1cfa      	adds	r2, r7, #3
 800fb7e:	2301      	movs	r3, #1
 800fb80:	9300      	str	r3, [sp, #0]
 800fb82:	2301      	movs	r3, #1
 800fb84:	f7fa fab6 	bl	800a0f4 <HAL_I2C_Master_Transmit>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK) return 1;
 800fb8c:	7bbb      	ldrb	r3, [r7, #14]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d001      	beq.n	800fb96 <_Z20i2c_mux_select_multiP7i2c_muxh+0x46>
 800fb92:	2301      	movs	r3, #1
 800fb94:	e018      	b.n	800fbc8 <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>

	// Read back bitmask from multiplexer to verify
	uint8_t mask_check = 0;
 800fb96:	2300      	movs	r3, #0
 800fb98:	737b      	strb	r3, [r7, #13]
	res = HAL_I2C_Master_Receive(mux->hi2c, addr, &mask_check, 1, I2C_MUX_TIMEOUT);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6818      	ldr	r0, [r3, #0]
 800fb9e:	7bfb      	ldrb	r3, [r7, #15]
 800fba0:	b299      	uxth	r1, r3
 800fba2:	f107 020d 	add.w	r2, r7, #13
 800fba6:	2301      	movs	r3, #1
 800fba8:	9300      	str	r3, [sp, #0]
 800fbaa:	2301      	movs	r3, #1
 800fbac:	f7fa fbba 	bl	800a324 <HAL_I2C_Master_Receive>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK || mask_check != mask) return 1;
 800fbb4:	7bbb      	ldrb	r3, [r7, #14]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d103      	bne.n	800fbc2 <_Z20i2c_mux_select_multiP7i2c_muxh+0x72>
 800fbba:	7b7a      	ldrb	r2, [r7, #13]
 800fbbc:	78fb      	ldrb	r3, [r7, #3]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d001      	beq.n	800fbc6 <_Z20i2c_mux_select_multiP7i2c_muxh+0x76>
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	e000      	b.n	800fbc8 <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>
	return 0;
 800fbc6:	2300      	movs	r3, #0
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3710      	adds	r7, #16
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <roundf>:
 800fbd0:	ee10 0a10 	vmov	r0, s0
 800fbd4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800fbd8:	3a7f      	subs	r2, #127	@ 0x7f
 800fbda:	2a16      	cmp	r2, #22
 800fbdc:	dc15      	bgt.n	800fc0a <roundf+0x3a>
 800fbde:	2a00      	cmp	r2, #0
 800fbe0:	da08      	bge.n	800fbf4 <roundf+0x24>
 800fbe2:	3201      	adds	r2, #1
 800fbe4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800fbe8:	d101      	bne.n	800fbee <roundf+0x1e>
 800fbea:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800fbee:	ee00 3a10 	vmov	s0, r3
 800fbf2:	4770      	bx	lr
 800fbf4:	4907      	ldr	r1, [pc, #28]	@ (800fc14 <roundf+0x44>)
 800fbf6:	4111      	asrs	r1, r2
 800fbf8:	4201      	tst	r1, r0
 800fbfa:	d0fa      	beq.n	800fbf2 <roundf+0x22>
 800fbfc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800fc00:	4113      	asrs	r3, r2
 800fc02:	4403      	add	r3, r0
 800fc04:	ea23 0301 	bic.w	r3, r3, r1
 800fc08:	e7f1      	b.n	800fbee <roundf+0x1e>
 800fc0a:	2a80      	cmp	r2, #128	@ 0x80
 800fc0c:	d1f1      	bne.n	800fbf2 <roundf+0x22>
 800fc0e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc12:	4770      	bx	lr
 800fc14:	007fffff 	.word	0x007fffff

0800fc18 <__cvt>:
 800fc18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc1c:	ec57 6b10 	vmov	r6, r7, d0
 800fc20:	2f00      	cmp	r7, #0
 800fc22:	460c      	mov	r4, r1
 800fc24:	4619      	mov	r1, r3
 800fc26:	463b      	mov	r3, r7
 800fc28:	bfbb      	ittet	lt
 800fc2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fc2e:	461f      	movlt	r7, r3
 800fc30:	2300      	movge	r3, #0
 800fc32:	232d      	movlt	r3, #45	@ 0x2d
 800fc34:	700b      	strb	r3, [r1, #0]
 800fc36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fc3c:	4691      	mov	r9, r2
 800fc3e:	f023 0820 	bic.w	r8, r3, #32
 800fc42:	bfbc      	itt	lt
 800fc44:	4632      	movlt	r2, r6
 800fc46:	4616      	movlt	r6, r2
 800fc48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fc4c:	d005      	beq.n	800fc5a <__cvt+0x42>
 800fc4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fc52:	d100      	bne.n	800fc56 <__cvt+0x3e>
 800fc54:	3401      	adds	r4, #1
 800fc56:	2102      	movs	r1, #2
 800fc58:	e000      	b.n	800fc5c <__cvt+0x44>
 800fc5a:	2103      	movs	r1, #3
 800fc5c:	ab03      	add	r3, sp, #12
 800fc5e:	9301      	str	r3, [sp, #4]
 800fc60:	ab02      	add	r3, sp, #8
 800fc62:	9300      	str	r3, [sp, #0]
 800fc64:	ec47 6b10 	vmov	d0, r6, r7
 800fc68:	4653      	mov	r3, sl
 800fc6a:	4622      	mov	r2, r4
 800fc6c:	f000 fe5c 	bl	8010928 <_dtoa_r>
 800fc70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fc74:	4605      	mov	r5, r0
 800fc76:	d119      	bne.n	800fcac <__cvt+0x94>
 800fc78:	f019 0f01 	tst.w	r9, #1
 800fc7c:	d00e      	beq.n	800fc9c <__cvt+0x84>
 800fc7e:	eb00 0904 	add.w	r9, r0, r4
 800fc82:	2200      	movs	r2, #0
 800fc84:	2300      	movs	r3, #0
 800fc86:	4630      	mov	r0, r6
 800fc88:	4639      	mov	r1, r7
 800fc8a:	f7f0 fef5 	bl	8000a78 <__aeabi_dcmpeq>
 800fc8e:	b108      	cbz	r0, 800fc94 <__cvt+0x7c>
 800fc90:	f8cd 900c 	str.w	r9, [sp, #12]
 800fc94:	2230      	movs	r2, #48	@ 0x30
 800fc96:	9b03      	ldr	r3, [sp, #12]
 800fc98:	454b      	cmp	r3, r9
 800fc9a:	d31e      	bcc.n	800fcda <__cvt+0xc2>
 800fc9c:	9b03      	ldr	r3, [sp, #12]
 800fc9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fca0:	1b5b      	subs	r3, r3, r5
 800fca2:	4628      	mov	r0, r5
 800fca4:	6013      	str	r3, [r2, #0]
 800fca6:	b004      	add	sp, #16
 800fca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fcb0:	eb00 0904 	add.w	r9, r0, r4
 800fcb4:	d1e5      	bne.n	800fc82 <__cvt+0x6a>
 800fcb6:	7803      	ldrb	r3, [r0, #0]
 800fcb8:	2b30      	cmp	r3, #48	@ 0x30
 800fcba:	d10a      	bne.n	800fcd2 <__cvt+0xba>
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	4639      	mov	r1, r7
 800fcc4:	f7f0 fed8 	bl	8000a78 <__aeabi_dcmpeq>
 800fcc8:	b918      	cbnz	r0, 800fcd2 <__cvt+0xba>
 800fcca:	f1c4 0401 	rsb	r4, r4, #1
 800fcce:	f8ca 4000 	str.w	r4, [sl]
 800fcd2:	f8da 3000 	ldr.w	r3, [sl]
 800fcd6:	4499      	add	r9, r3
 800fcd8:	e7d3      	b.n	800fc82 <__cvt+0x6a>
 800fcda:	1c59      	adds	r1, r3, #1
 800fcdc:	9103      	str	r1, [sp, #12]
 800fcde:	701a      	strb	r2, [r3, #0]
 800fce0:	e7d9      	b.n	800fc96 <__cvt+0x7e>

0800fce2 <__exponent>:
 800fce2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fce4:	2900      	cmp	r1, #0
 800fce6:	bfba      	itte	lt
 800fce8:	4249      	neglt	r1, r1
 800fcea:	232d      	movlt	r3, #45	@ 0x2d
 800fcec:	232b      	movge	r3, #43	@ 0x2b
 800fcee:	2909      	cmp	r1, #9
 800fcf0:	7002      	strb	r2, [r0, #0]
 800fcf2:	7043      	strb	r3, [r0, #1]
 800fcf4:	dd29      	ble.n	800fd4a <__exponent+0x68>
 800fcf6:	f10d 0307 	add.w	r3, sp, #7
 800fcfa:	461d      	mov	r5, r3
 800fcfc:	270a      	movs	r7, #10
 800fcfe:	461a      	mov	r2, r3
 800fd00:	fbb1 f6f7 	udiv	r6, r1, r7
 800fd04:	fb07 1416 	mls	r4, r7, r6, r1
 800fd08:	3430      	adds	r4, #48	@ 0x30
 800fd0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fd0e:	460c      	mov	r4, r1
 800fd10:	2c63      	cmp	r4, #99	@ 0x63
 800fd12:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800fd16:	4631      	mov	r1, r6
 800fd18:	dcf1      	bgt.n	800fcfe <__exponent+0x1c>
 800fd1a:	3130      	adds	r1, #48	@ 0x30
 800fd1c:	1e94      	subs	r4, r2, #2
 800fd1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fd22:	1c41      	adds	r1, r0, #1
 800fd24:	4623      	mov	r3, r4
 800fd26:	42ab      	cmp	r3, r5
 800fd28:	d30a      	bcc.n	800fd40 <__exponent+0x5e>
 800fd2a:	f10d 0309 	add.w	r3, sp, #9
 800fd2e:	1a9b      	subs	r3, r3, r2
 800fd30:	42ac      	cmp	r4, r5
 800fd32:	bf88      	it	hi
 800fd34:	2300      	movhi	r3, #0
 800fd36:	3302      	adds	r3, #2
 800fd38:	4403      	add	r3, r0
 800fd3a:	1a18      	subs	r0, r3, r0
 800fd3c:	b003      	add	sp, #12
 800fd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd40:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fd44:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fd48:	e7ed      	b.n	800fd26 <__exponent+0x44>
 800fd4a:	2330      	movs	r3, #48	@ 0x30
 800fd4c:	3130      	adds	r1, #48	@ 0x30
 800fd4e:	7083      	strb	r3, [r0, #2]
 800fd50:	70c1      	strb	r1, [r0, #3]
 800fd52:	1d03      	adds	r3, r0, #4
 800fd54:	e7f1      	b.n	800fd3a <__exponent+0x58>
	...

0800fd58 <_printf_float>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	b08d      	sub	sp, #52	@ 0x34
 800fd5e:	460c      	mov	r4, r1
 800fd60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fd64:	4616      	mov	r6, r2
 800fd66:	461f      	mov	r7, r3
 800fd68:	4605      	mov	r5, r0
 800fd6a:	f000 fd51 	bl	8010810 <_localeconv_r>
 800fd6e:	6803      	ldr	r3, [r0, #0]
 800fd70:	9304      	str	r3, [sp, #16]
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7f0 fa54 	bl	8000220 <strlen>
 800fd78:	2300      	movs	r3, #0
 800fd7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd7c:	f8d8 3000 	ldr.w	r3, [r8]
 800fd80:	9005      	str	r0, [sp, #20]
 800fd82:	3307      	adds	r3, #7
 800fd84:	f023 0307 	bic.w	r3, r3, #7
 800fd88:	f103 0208 	add.w	r2, r3, #8
 800fd8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fd90:	f8d4 b000 	ldr.w	fp, [r4]
 800fd94:	f8c8 2000 	str.w	r2, [r8]
 800fd98:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fda0:	9307      	str	r3, [sp, #28]
 800fda2:	f8cd 8018 	str.w	r8, [sp, #24]
 800fda6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fdaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdae:	4b9c      	ldr	r3, [pc, #624]	@ (8010020 <_printf_float+0x2c8>)
 800fdb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fdb4:	f7f0 fe92 	bl	8000adc <__aeabi_dcmpun>
 800fdb8:	bb70      	cbnz	r0, 800fe18 <_printf_float+0xc0>
 800fdba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdbe:	4b98      	ldr	r3, [pc, #608]	@ (8010020 <_printf_float+0x2c8>)
 800fdc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fdc4:	f7f0 fe6c 	bl	8000aa0 <__aeabi_dcmple>
 800fdc8:	bb30      	cbnz	r0, 800fe18 <_printf_float+0xc0>
 800fdca:	2200      	movs	r2, #0
 800fdcc:	2300      	movs	r3, #0
 800fdce:	4640      	mov	r0, r8
 800fdd0:	4649      	mov	r1, r9
 800fdd2:	f7f0 fe5b 	bl	8000a8c <__aeabi_dcmplt>
 800fdd6:	b110      	cbz	r0, 800fdde <_printf_float+0x86>
 800fdd8:	232d      	movs	r3, #45	@ 0x2d
 800fdda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fdde:	4a91      	ldr	r2, [pc, #580]	@ (8010024 <_printf_float+0x2cc>)
 800fde0:	4b91      	ldr	r3, [pc, #580]	@ (8010028 <_printf_float+0x2d0>)
 800fde2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fde6:	bf8c      	ite	hi
 800fde8:	4690      	movhi	r8, r2
 800fdea:	4698      	movls	r8, r3
 800fdec:	2303      	movs	r3, #3
 800fdee:	6123      	str	r3, [r4, #16]
 800fdf0:	f02b 0304 	bic.w	r3, fp, #4
 800fdf4:	6023      	str	r3, [r4, #0]
 800fdf6:	f04f 0900 	mov.w	r9, #0
 800fdfa:	9700      	str	r7, [sp, #0]
 800fdfc:	4633      	mov	r3, r6
 800fdfe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fe00:	4621      	mov	r1, r4
 800fe02:	4628      	mov	r0, r5
 800fe04:	f000 f9d2 	bl	80101ac <_printf_common>
 800fe08:	3001      	adds	r0, #1
 800fe0a:	f040 808d 	bne.w	800ff28 <_printf_float+0x1d0>
 800fe0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe12:	b00d      	add	sp, #52	@ 0x34
 800fe14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe18:	4642      	mov	r2, r8
 800fe1a:	464b      	mov	r3, r9
 800fe1c:	4640      	mov	r0, r8
 800fe1e:	4649      	mov	r1, r9
 800fe20:	f7f0 fe5c 	bl	8000adc <__aeabi_dcmpun>
 800fe24:	b140      	cbz	r0, 800fe38 <_printf_float+0xe0>
 800fe26:	464b      	mov	r3, r9
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	bfbc      	itt	lt
 800fe2c:	232d      	movlt	r3, #45	@ 0x2d
 800fe2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fe32:	4a7e      	ldr	r2, [pc, #504]	@ (801002c <_printf_float+0x2d4>)
 800fe34:	4b7e      	ldr	r3, [pc, #504]	@ (8010030 <_printf_float+0x2d8>)
 800fe36:	e7d4      	b.n	800fde2 <_printf_float+0x8a>
 800fe38:	6863      	ldr	r3, [r4, #4]
 800fe3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fe3e:	9206      	str	r2, [sp, #24]
 800fe40:	1c5a      	adds	r2, r3, #1
 800fe42:	d13b      	bne.n	800febc <_printf_float+0x164>
 800fe44:	2306      	movs	r3, #6
 800fe46:	6063      	str	r3, [r4, #4]
 800fe48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	6022      	str	r2, [r4, #0]
 800fe50:	9303      	str	r3, [sp, #12]
 800fe52:	ab0a      	add	r3, sp, #40	@ 0x28
 800fe54:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fe58:	ab09      	add	r3, sp, #36	@ 0x24
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	6861      	ldr	r1, [r4, #4]
 800fe5e:	ec49 8b10 	vmov	d0, r8, r9
 800fe62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fe66:	4628      	mov	r0, r5
 800fe68:	f7ff fed6 	bl	800fc18 <__cvt>
 800fe6c:	9b06      	ldr	r3, [sp, #24]
 800fe6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe70:	2b47      	cmp	r3, #71	@ 0x47
 800fe72:	4680      	mov	r8, r0
 800fe74:	d129      	bne.n	800feca <_printf_float+0x172>
 800fe76:	1cc8      	adds	r0, r1, #3
 800fe78:	db02      	blt.n	800fe80 <_printf_float+0x128>
 800fe7a:	6863      	ldr	r3, [r4, #4]
 800fe7c:	4299      	cmp	r1, r3
 800fe7e:	dd41      	ble.n	800ff04 <_printf_float+0x1ac>
 800fe80:	f1aa 0a02 	sub.w	sl, sl, #2
 800fe84:	fa5f fa8a 	uxtb.w	sl, sl
 800fe88:	3901      	subs	r1, #1
 800fe8a:	4652      	mov	r2, sl
 800fe8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fe90:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe92:	f7ff ff26 	bl	800fce2 <__exponent>
 800fe96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe98:	1813      	adds	r3, r2, r0
 800fe9a:	2a01      	cmp	r2, #1
 800fe9c:	4681      	mov	r9, r0
 800fe9e:	6123      	str	r3, [r4, #16]
 800fea0:	dc02      	bgt.n	800fea8 <_printf_float+0x150>
 800fea2:	6822      	ldr	r2, [r4, #0]
 800fea4:	07d2      	lsls	r2, r2, #31
 800fea6:	d501      	bpl.n	800feac <_printf_float+0x154>
 800fea8:	3301      	adds	r3, #1
 800feaa:	6123      	str	r3, [r4, #16]
 800feac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d0a2      	beq.n	800fdfa <_printf_float+0xa2>
 800feb4:	232d      	movs	r3, #45	@ 0x2d
 800feb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800feba:	e79e      	b.n	800fdfa <_printf_float+0xa2>
 800febc:	9a06      	ldr	r2, [sp, #24]
 800febe:	2a47      	cmp	r2, #71	@ 0x47
 800fec0:	d1c2      	bne.n	800fe48 <_printf_float+0xf0>
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d1c0      	bne.n	800fe48 <_printf_float+0xf0>
 800fec6:	2301      	movs	r3, #1
 800fec8:	e7bd      	b.n	800fe46 <_printf_float+0xee>
 800feca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fece:	d9db      	bls.n	800fe88 <_printf_float+0x130>
 800fed0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fed4:	d118      	bne.n	800ff08 <_printf_float+0x1b0>
 800fed6:	2900      	cmp	r1, #0
 800fed8:	6863      	ldr	r3, [r4, #4]
 800feda:	dd0b      	ble.n	800fef4 <_printf_float+0x19c>
 800fedc:	6121      	str	r1, [r4, #16]
 800fede:	b913      	cbnz	r3, 800fee6 <_printf_float+0x18e>
 800fee0:	6822      	ldr	r2, [r4, #0]
 800fee2:	07d0      	lsls	r0, r2, #31
 800fee4:	d502      	bpl.n	800feec <_printf_float+0x194>
 800fee6:	3301      	adds	r3, #1
 800fee8:	440b      	add	r3, r1
 800feea:	6123      	str	r3, [r4, #16]
 800feec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800feee:	f04f 0900 	mov.w	r9, #0
 800fef2:	e7db      	b.n	800feac <_printf_float+0x154>
 800fef4:	b913      	cbnz	r3, 800fefc <_printf_float+0x1a4>
 800fef6:	6822      	ldr	r2, [r4, #0]
 800fef8:	07d2      	lsls	r2, r2, #31
 800fefa:	d501      	bpl.n	800ff00 <_printf_float+0x1a8>
 800fefc:	3302      	adds	r3, #2
 800fefe:	e7f4      	b.n	800feea <_printf_float+0x192>
 800ff00:	2301      	movs	r3, #1
 800ff02:	e7f2      	b.n	800feea <_printf_float+0x192>
 800ff04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ff08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff0a:	4299      	cmp	r1, r3
 800ff0c:	db05      	blt.n	800ff1a <_printf_float+0x1c2>
 800ff0e:	6823      	ldr	r3, [r4, #0]
 800ff10:	6121      	str	r1, [r4, #16]
 800ff12:	07d8      	lsls	r0, r3, #31
 800ff14:	d5ea      	bpl.n	800feec <_printf_float+0x194>
 800ff16:	1c4b      	adds	r3, r1, #1
 800ff18:	e7e7      	b.n	800feea <_printf_float+0x192>
 800ff1a:	2900      	cmp	r1, #0
 800ff1c:	bfd4      	ite	le
 800ff1e:	f1c1 0202 	rsble	r2, r1, #2
 800ff22:	2201      	movgt	r2, #1
 800ff24:	4413      	add	r3, r2
 800ff26:	e7e0      	b.n	800feea <_printf_float+0x192>
 800ff28:	6823      	ldr	r3, [r4, #0]
 800ff2a:	055a      	lsls	r2, r3, #21
 800ff2c:	d407      	bmi.n	800ff3e <_printf_float+0x1e6>
 800ff2e:	6923      	ldr	r3, [r4, #16]
 800ff30:	4642      	mov	r2, r8
 800ff32:	4631      	mov	r1, r6
 800ff34:	4628      	mov	r0, r5
 800ff36:	47b8      	blx	r7
 800ff38:	3001      	adds	r0, #1
 800ff3a:	d12b      	bne.n	800ff94 <_printf_float+0x23c>
 800ff3c:	e767      	b.n	800fe0e <_printf_float+0xb6>
 800ff3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ff42:	f240 80dd 	bls.w	8010100 <_printf_float+0x3a8>
 800ff46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	f7f0 fd93 	bl	8000a78 <__aeabi_dcmpeq>
 800ff52:	2800      	cmp	r0, #0
 800ff54:	d033      	beq.n	800ffbe <_printf_float+0x266>
 800ff56:	4a37      	ldr	r2, [pc, #220]	@ (8010034 <_printf_float+0x2dc>)
 800ff58:	2301      	movs	r3, #1
 800ff5a:	4631      	mov	r1, r6
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	47b8      	blx	r7
 800ff60:	3001      	adds	r0, #1
 800ff62:	f43f af54 	beq.w	800fe0e <_printf_float+0xb6>
 800ff66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ff6a:	4543      	cmp	r3, r8
 800ff6c:	db02      	blt.n	800ff74 <_printf_float+0x21c>
 800ff6e:	6823      	ldr	r3, [r4, #0]
 800ff70:	07d8      	lsls	r0, r3, #31
 800ff72:	d50f      	bpl.n	800ff94 <_printf_float+0x23c>
 800ff74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff78:	4631      	mov	r1, r6
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	47b8      	blx	r7
 800ff7e:	3001      	adds	r0, #1
 800ff80:	f43f af45 	beq.w	800fe0e <_printf_float+0xb6>
 800ff84:	f04f 0900 	mov.w	r9, #0
 800ff88:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ff8c:	f104 0a1a 	add.w	sl, r4, #26
 800ff90:	45c8      	cmp	r8, r9
 800ff92:	dc09      	bgt.n	800ffa8 <_printf_float+0x250>
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	079b      	lsls	r3, r3, #30
 800ff98:	f100 8103 	bmi.w	80101a2 <_printf_float+0x44a>
 800ff9c:	68e0      	ldr	r0, [r4, #12]
 800ff9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ffa0:	4298      	cmp	r0, r3
 800ffa2:	bfb8      	it	lt
 800ffa4:	4618      	movlt	r0, r3
 800ffa6:	e734      	b.n	800fe12 <_printf_float+0xba>
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	4652      	mov	r2, sl
 800ffac:	4631      	mov	r1, r6
 800ffae:	4628      	mov	r0, r5
 800ffb0:	47b8      	blx	r7
 800ffb2:	3001      	adds	r0, #1
 800ffb4:	f43f af2b 	beq.w	800fe0e <_printf_float+0xb6>
 800ffb8:	f109 0901 	add.w	r9, r9, #1
 800ffbc:	e7e8      	b.n	800ff90 <_printf_float+0x238>
 800ffbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	dc39      	bgt.n	8010038 <_printf_float+0x2e0>
 800ffc4:	4a1b      	ldr	r2, [pc, #108]	@ (8010034 <_printf_float+0x2dc>)
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	4631      	mov	r1, r6
 800ffca:	4628      	mov	r0, r5
 800ffcc:	47b8      	blx	r7
 800ffce:	3001      	adds	r0, #1
 800ffd0:	f43f af1d 	beq.w	800fe0e <_printf_float+0xb6>
 800ffd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ffd8:	ea59 0303 	orrs.w	r3, r9, r3
 800ffdc:	d102      	bne.n	800ffe4 <_printf_float+0x28c>
 800ffde:	6823      	ldr	r3, [r4, #0]
 800ffe0:	07d9      	lsls	r1, r3, #31
 800ffe2:	d5d7      	bpl.n	800ff94 <_printf_float+0x23c>
 800ffe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffe8:	4631      	mov	r1, r6
 800ffea:	4628      	mov	r0, r5
 800ffec:	47b8      	blx	r7
 800ffee:	3001      	adds	r0, #1
 800fff0:	f43f af0d 	beq.w	800fe0e <_printf_float+0xb6>
 800fff4:	f04f 0a00 	mov.w	sl, #0
 800fff8:	f104 0b1a 	add.w	fp, r4, #26
 800fffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fffe:	425b      	negs	r3, r3
 8010000:	4553      	cmp	r3, sl
 8010002:	dc01      	bgt.n	8010008 <_printf_float+0x2b0>
 8010004:	464b      	mov	r3, r9
 8010006:	e793      	b.n	800ff30 <_printf_float+0x1d8>
 8010008:	2301      	movs	r3, #1
 801000a:	465a      	mov	r2, fp
 801000c:	4631      	mov	r1, r6
 801000e:	4628      	mov	r0, r5
 8010010:	47b8      	blx	r7
 8010012:	3001      	adds	r0, #1
 8010014:	f43f aefb 	beq.w	800fe0e <_printf_float+0xb6>
 8010018:	f10a 0a01 	add.w	sl, sl, #1
 801001c:	e7ee      	b.n	800fffc <_printf_float+0x2a4>
 801001e:	bf00      	nop
 8010020:	7fefffff 	.word	0x7fefffff
 8010024:	080157ac 	.word	0x080157ac
 8010028:	080157a8 	.word	0x080157a8
 801002c:	080157b4 	.word	0x080157b4
 8010030:	080157b0 	.word	0x080157b0
 8010034:	080157b8 	.word	0x080157b8
 8010038:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801003a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801003e:	4553      	cmp	r3, sl
 8010040:	bfa8      	it	ge
 8010042:	4653      	movge	r3, sl
 8010044:	2b00      	cmp	r3, #0
 8010046:	4699      	mov	r9, r3
 8010048:	dc36      	bgt.n	80100b8 <_printf_float+0x360>
 801004a:	f04f 0b00 	mov.w	fp, #0
 801004e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010052:	f104 021a 	add.w	r2, r4, #26
 8010056:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010058:	9306      	str	r3, [sp, #24]
 801005a:	eba3 0309 	sub.w	r3, r3, r9
 801005e:	455b      	cmp	r3, fp
 8010060:	dc31      	bgt.n	80100c6 <_printf_float+0x36e>
 8010062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010064:	459a      	cmp	sl, r3
 8010066:	dc3a      	bgt.n	80100de <_printf_float+0x386>
 8010068:	6823      	ldr	r3, [r4, #0]
 801006a:	07da      	lsls	r2, r3, #31
 801006c:	d437      	bmi.n	80100de <_printf_float+0x386>
 801006e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010070:	ebaa 0903 	sub.w	r9, sl, r3
 8010074:	9b06      	ldr	r3, [sp, #24]
 8010076:	ebaa 0303 	sub.w	r3, sl, r3
 801007a:	4599      	cmp	r9, r3
 801007c:	bfa8      	it	ge
 801007e:	4699      	movge	r9, r3
 8010080:	f1b9 0f00 	cmp.w	r9, #0
 8010084:	dc33      	bgt.n	80100ee <_printf_float+0x396>
 8010086:	f04f 0800 	mov.w	r8, #0
 801008a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801008e:	f104 0b1a 	add.w	fp, r4, #26
 8010092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010094:	ebaa 0303 	sub.w	r3, sl, r3
 8010098:	eba3 0309 	sub.w	r3, r3, r9
 801009c:	4543      	cmp	r3, r8
 801009e:	f77f af79 	ble.w	800ff94 <_printf_float+0x23c>
 80100a2:	2301      	movs	r3, #1
 80100a4:	465a      	mov	r2, fp
 80100a6:	4631      	mov	r1, r6
 80100a8:	4628      	mov	r0, r5
 80100aa:	47b8      	blx	r7
 80100ac:	3001      	adds	r0, #1
 80100ae:	f43f aeae 	beq.w	800fe0e <_printf_float+0xb6>
 80100b2:	f108 0801 	add.w	r8, r8, #1
 80100b6:	e7ec      	b.n	8010092 <_printf_float+0x33a>
 80100b8:	4642      	mov	r2, r8
 80100ba:	4631      	mov	r1, r6
 80100bc:	4628      	mov	r0, r5
 80100be:	47b8      	blx	r7
 80100c0:	3001      	adds	r0, #1
 80100c2:	d1c2      	bne.n	801004a <_printf_float+0x2f2>
 80100c4:	e6a3      	b.n	800fe0e <_printf_float+0xb6>
 80100c6:	2301      	movs	r3, #1
 80100c8:	4631      	mov	r1, r6
 80100ca:	4628      	mov	r0, r5
 80100cc:	9206      	str	r2, [sp, #24]
 80100ce:	47b8      	blx	r7
 80100d0:	3001      	adds	r0, #1
 80100d2:	f43f ae9c 	beq.w	800fe0e <_printf_float+0xb6>
 80100d6:	9a06      	ldr	r2, [sp, #24]
 80100d8:	f10b 0b01 	add.w	fp, fp, #1
 80100dc:	e7bb      	b.n	8010056 <_printf_float+0x2fe>
 80100de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100e2:	4631      	mov	r1, r6
 80100e4:	4628      	mov	r0, r5
 80100e6:	47b8      	blx	r7
 80100e8:	3001      	adds	r0, #1
 80100ea:	d1c0      	bne.n	801006e <_printf_float+0x316>
 80100ec:	e68f      	b.n	800fe0e <_printf_float+0xb6>
 80100ee:	9a06      	ldr	r2, [sp, #24]
 80100f0:	464b      	mov	r3, r9
 80100f2:	4442      	add	r2, r8
 80100f4:	4631      	mov	r1, r6
 80100f6:	4628      	mov	r0, r5
 80100f8:	47b8      	blx	r7
 80100fa:	3001      	adds	r0, #1
 80100fc:	d1c3      	bne.n	8010086 <_printf_float+0x32e>
 80100fe:	e686      	b.n	800fe0e <_printf_float+0xb6>
 8010100:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010104:	f1ba 0f01 	cmp.w	sl, #1
 8010108:	dc01      	bgt.n	801010e <_printf_float+0x3b6>
 801010a:	07db      	lsls	r3, r3, #31
 801010c:	d536      	bpl.n	801017c <_printf_float+0x424>
 801010e:	2301      	movs	r3, #1
 8010110:	4642      	mov	r2, r8
 8010112:	4631      	mov	r1, r6
 8010114:	4628      	mov	r0, r5
 8010116:	47b8      	blx	r7
 8010118:	3001      	adds	r0, #1
 801011a:	f43f ae78 	beq.w	800fe0e <_printf_float+0xb6>
 801011e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010122:	4631      	mov	r1, r6
 8010124:	4628      	mov	r0, r5
 8010126:	47b8      	blx	r7
 8010128:	3001      	adds	r0, #1
 801012a:	f43f ae70 	beq.w	800fe0e <_printf_float+0xb6>
 801012e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010132:	2200      	movs	r2, #0
 8010134:	2300      	movs	r3, #0
 8010136:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801013a:	f7f0 fc9d 	bl	8000a78 <__aeabi_dcmpeq>
 801013e:	b9c0      	cbnz	r0, 8010172 <_printf_float+0x41a>
 8010140:	4653      	mov	r3, sl
 8010142:	f108 0201 	add.w	r2, r8, #1
 8010146:	4631      	mov	r1, r6
 8010148:	4628      	mov	r0, r5
 801014a:	47b8      	blx	r7
 801014c:	3001      	adds	r0, #1
 801014e:	d10c      	bne.n	801016a <_printf_float+0x412>
 8010150:	e65d      	b.n	800fe0e <_printf_float+0xb6>
 8010152:	2301      	movs	r3, #1
 8010154:	465a      	mov	r2, fp
 8010156:	4631      	mov	r1, r6
 8010158:	4628      	mov	r0, r5
 801015a:	47b8      	blx	r7
 801015c:	3001      	adds	r0, #1
 801015e:	f43f ae56 	beq.w	800fe0e <_printf_float+0xb6>
 8010162:	f108 0801 	add.w	r8, r8, #1
 8010166:	45d0      	cmp	r8, sl
 8010168:	dbf3      	blt.n	8010152 <_printf_float+0x3fa>
 801016a:	464b      	mov	r3, r9
 801016c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010170:	e6df      	b.n	800ff32 <_printf_float+0x1da>
 8010172:	f04f 0800 	mov.w	r8, #0
 8010176:	f104 0b1a 	add.w	fp, r4, #26
 801017a:	e7f4      	b.n	8010166 <_printf_float+0x40e>
 801017c:	2301      	movs	r3, #1
 801017e:	4642      	mov	r2, r8
 8010180:	e7e1      	b.n	8010146 <_printf_float+0x3ee>
 8010182:	2301      	movs	r3, #1
 8010184:	464a      	mov	r2, r9
 8010186:	4631      	mov	r1, r6
 8010188:	4628      	mov	r0, r5
 801018a:	47b8      	blx	r7
 801018c:	3001      	adds	r0, #1
 801018e:	f43f ae3e 	beq.w	800fe0e <_printf_float+0xb6>
 8010192:	f108 0801 	add.w	r8, r8, #1
 8010196:	68e3      	ldr	r3, [r4, #12]
 8010198:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801019a:	1a5b      	subs	r3, r3, r1
 801019c:	4543      	cmp	r3, r8
 801019e:	dcf0      	bgt.n	8010182 <_printf_float+0x42a>
 80101a0:	e6fc      	b.n	800ff9c <_printf_float+0x244>
 80101a2:	f04f 0800 	mov.w	r8, #0
 80101a6:	f104 0919 	add.w	r9, r4, #25
 80101aa:	e7f4      	b.n	8010196 <_printf_float+0x43e>

080101ac <_printf_common>:
 80101ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b0:	4616      	mov	r6, r2
 80101b2:	4698      	mov	r8, r3
 80101b4:	688a      	ldr	r2, [r1, #8]
 80101b6:	690b      	ldr	r3, [r1, #16]
 80101b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80101bc:	4293      	cmp	r3, r2
 80101be:	bfb8      	it	lt
 80101c0:	4613      	movlt	r3, r2
 80101c2:	6033      	str	r3, [r6, #0]
 80101c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80101c8:	4607      	mov	r7, r0
 80101ca:	460c      	mov	r4, r1
 80101cc:	b10a      	cbz	r2, 80101d2 <_printf_common+0x26>
 80101ce:	3301      	adds	r3, #1
 80101d0:	6033      	str	r3, [r6, #0]
 80101d2:	6823      	ldr	r3, [r4, #0]
 80101d4:	0699      	lsls	r1, r3, #26
 80101d6:	bf42      	ittt	mi
 80101d8:	6833      	ldrmi	r3, [r6, #0]
 80101da:	3302      	addmi	r3, #2
 80101dc:	6033      	strmi	r3, [r6, #0]
 80101de:	6825      	ldr	r5, [r4, #0]
 80101e0:	f015 0506 	ands.w	r5, r5, #6
 80101e4:	d106      	bne.n	80101f4 <_printf_common+0x48>
 80101e6:	f104 0a19 	add.w	sl, r4, #25
 80101ea:	68e3      	ldr	r3, [r4, #12]
 80101ec:	6832      	ldr	r2, [r6, #0]
 80101ee:	1a9b      	subs	r3, r3, r2
 80101f0:	42ab      	cmp	r3, r5
 80101f2:	dc26      	bgt.n	8010242 <_printf_common+0x96>
 80101f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80101f8:	6822      	ldr	r2, [r4, #0]
 80101fa:	3b00      	subs	r3, #0
 80101fc:	bf18      	it	ne
 80101fe:	2301      	movne	r3, #1
 8010200:	0692      	lsls	r2, r2, #26
 8010202:	d42b      	bmi.n	801025c <_printf_common+0xb0>
 8010204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010208:	4641      	mov	r1, r8
 801020a:	4638      	mov	r0, r7
 801020c:	47c8      	blx	r9
 801020e:	3001      	adds	r0, #1
 8010210:	d01e      	beq.n	8010250 <_printf_common+0xa4>
 8010212:	6823      	ldr	r3, [r4, #0]
 8010214:	6922      	ldr	r2, [r4, #16]
 8010216:	f003 0306 	and.w	r3, r3, #6
 801021a:	2b04      	cmp	r3, #4
 801021c:	bf02      	ittt	eq
 801021e:	68e5      	ldreq	r5, [r4, #12]
 8010220:	6833      	ldreq	r3, [r6, #0]
 8010222:	1aed      	subeq	r5, r5, r3
 8010224:	68a3      	ldr	r3, [r4, #8]
 8010226:	bf0c      	ite	eq
 8010228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801022c:	2500      	movne	r5, #0
 801022e:	4293      	cmp	r3, r2
 8010230:	bfc4      	itt	gt
 8010232:	1a9b      	subgt	r3, r3, r2
 8010234:	18ed      	addgt	r5, r5, r3
 8010236:	2600      	movs	r6, #0
 8010238:	341a      	adds	r4, #26
 801023a:	42b5      	cmp	r5, r6
 801023c:	d11a      	bne.n	8010274 <_printf_common+0xc8>
 801023e:	2000      	movs	r0, #0
 8010240:	e008      	b.n	8010254 <_printf_common+0xa8>
 8010242:	2301      	movs	r3, #1
 8010244:	4652      	mov	r2, sl
 8010246:	4641      	mov	r1, r8
 8010248:	4638      	mov	r0, r7
 801024a:	47c8      	blx	r9
 801024c:	3001      	adds	r0, #1
 801024e:	d103      	bne.n	8010258 <_printf_common+0xac>
 8010250:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010258:	3501      	adds	r5, #1
 801025a:	e7c6      	b.n	80101ea <_printf_common+0x3e>
 801025c:	18e1      	adds	r1, r4, r3
 801025e:	1c5a      	adds	r2, r3, #1
 8010260:	2030      	movs	r0, #48	@ 0x30
 8010262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010266:	4422      	add	r2, r4
 8010268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801026c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010270:	3302      	adds	r3, #2
 8010272:	e7c7      	b.n	8010204 <_printf_common+0x58>
 8010274:	2301      	movs	r3, #1
 8010276:	4622      	mov	r2, r4
 8010278:	4641      	mov	r1, r8
 801027a:	4638      	mov	r0, r7
 801027c:	47c8      	blx	r9
 801027e:	3001      	adds	r0, #1
 8010280:	d0e6      	beq.n	8010250 <_printf_common+0xa4>
 8010282:	3601      	adds	r6, #1
 8010284:	e7d9      	b.n	801023a <_printf_common+0x8e>
	...

08010288 <_printf_i>:
 8010288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801028c:	7e0f      	ldrb	r7, [r1, #24]
 801028e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010290:	2f78      	cmp	r7, #120	@ 0x78
 8010292:	4691      	mov	r9, r2
 8010294:	4680      	mov	r8, r0
 8010296:	460c      	mov	r4, r1
 8010298:	469a      	mov	sl, r3
 801029a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801029e:	d807      	bhi.n	80102b0 <_printf_i+0x28>
 80102a0:	2f62      	cmp	r7, #98	@ 0x62
 80102a2:	d80a      	bhi.n	80102ba <_printf_i+0x32>
 80102a4:	2f00      	cmp	r7, #0
 80102a6:	f000 80d1 	beq.w	801044c <_printf_i+0x1c4>
 80102aa:	2f58      	cmp	r7, #88	@ 0x58
 80102ac:	f000 80b8 	beq.w	8010420 <_printf_i+0x198>
 80102b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80102b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80102b8:	e03a      	b.n	8010330 <_printf_i+0xa8>
 80102ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80102be:	2b15      	cmp	r3, #21
 80102c0:	d8f6      	bhi.n	80102b0 <_printf_i+0x28>
 80102c2:	a101      	add	r1, pc, #4	@ (adr r1, 80102c8 <_printf_i+0x40>)
 80102c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80102c8:	08010321 	.word	0x08010321
 80102cc:	08010335 	.word	0x08010335
 80102d0:	080102b1 	.word	0x080102b1
 80102d4:	080102b1 	.word	0x080102b1
 80102d8:	080102b1 	.word	0x080102b1
 80102dc:	080102b1 	.word	0x080102b1
 80102e0:	08010335 	.word	0x08010335
 80102e4:	080102b1 	.word	0x080102b1
 80102e8:	080102b1 	.word	0x080102b1
 80102ec:	080102b1 	.word	0x080102b1
 80102f0:	080102b1 	.word	0x080102b1
 80102f4:	08010433 	.word	0x08010433
 80102f8:	0801035f 	.word	0x0801035f
 80102fc:	080103ed 	.word	0x080103ed
 8010300:	080102b1 	.word	0x080102b1
 8010304:	080102b1 	.word	0x080102b1
 8010308:	08010455 	.word	0x08010455
 801030c:	080102b1 	.word	0x080102b1
 8010310:	0801035f 	.word	0x0801035f
 8010314:	080102b1 	.word	0x080102b1
 8010318:	080102b1 	.word	0x080102b1
 801031c:	080103f5 	.word	0x080103f5
 8010320:	6833      	ldr	r3, [r6, #0]
 8010322:	1d1a      	adds	r2, r3, #4
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	6032      	str	r2, [r6, #0]
 8010328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801032c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010330:	2301      	movs	r3, #1
 8010332:	e09c      	b.n	801046e <_printf_i+0x1e6>
 8010334:	6833      	ldr	r3, [r6, #0]
 8010336:	6820      	ldr	r0, [r4, #0]
 8010338:	1d19      	adds	r1, r3, #4
 801033a:	6031      	str	r1, [r6, #0]
 801033c:	0606      	lsls	r6, r0, #24
 801033e:	d501      	bpl.n	8010344 <_printf_i+0xbc>
 8010340:	681d      	ldr	r5, [r3, #0]
 8010342:	e003      	b.n	801034c <_printf_i+0xc4>
 8010344:	0645      	lsls	r5, r0, #25
 8010346:	d5fb      	bpl.n	8010340 <_printf_i+0xb8>
 8010348:	f9b3 5000 	ldrsh.w	r5, [r3]
 801034c:	2d00      	cmp	r5, #0
 801034e:	da03      	bge.n	8010358 <_printf_i+0xd0>
 8010350:	232d      	movs	r3, #45	@ 0x2d
 8010352:	426d      	negs	r5, r5
 8010354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010358:	4858      	ldr	r0, [pc, #352]	@ (80104bc <_printf_i+0x234>)
 801035a:	230a      	movs	r3, #10
 801035c:	e011      	b.n	8010382 <_printf_i+0xfa>
 801035e:	6821      	ldr	r1, [r4, #0]
 8010360:	6833      	ldr	r3, [r6, #0]
 8010362:	0608      	lsls	r0, r1, #24
 8010364:	f853 5b04 	ldr.w	r5, [r3], #4
 8010368:	d402      	bmi.n	8010370 <_printf_i+0xe8>
 801036a:	0649      	lsls	r1, r1, #25
 801036c:	bf48      	it	mi
 801036e:	b2ad      	uxthmi	r5, r5
 8010370:	2f6f      	cmp	r7, #111	@ 0x6f
 8010372:	4852      	ldr	r0, [pc, #328]	@ (80104bc <_printf_i+0x234>)
 8010374:	6033      	str	r3, [r6, #0]
 8010376:	bf14      	ite	ne
 8010378:	230a      	movne	r3, #10
 801037a:	2308      	moveq	r3, #8
 801037c:	2100      	movs	r1, #0
 801037e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010382:	6866      	ldr	r6, [r4, #4]
 8010384:	60a6      	str	r6, [r4, #8]
 8010386:	2e00      	cmp	r6, #0
 8010388:	db05      	blt.n	8010396 <_printf_i+0x10e>
 801038a:	6821      	ldr	r1, [r4, #0]
 801038c:	432e      	orrs	r6, r5
 801038e:	f021 0104 	bic.w	r1, r1, #4
 8010392:	6021      	str	r1, [r4, #0]
 8010394:	d04b      	beq.n	801042e <_printf_i+0x1a6>
 8010396:	4616      	mov	r6, r2
 8010398:	fbb5 f1f3 	udiv	r1, r5, r3
 801039c:	fb03 5711 	mls	r7, r3, r1, r5
 80103a0:	5dc7      	ldrb	r7, [r0, r7]
 80103a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80103a6:	462f      	mov	r7, r5
 80103a8:	42bb      	cmp	r3, r7
 80103aa:	460d      	mov	r5, r1
 80103ac:	d9f4      	bls.n	8010398 <_printf_i+0x110>
 80103ae:	2b08      	cmp	r3, #8
 80103b0:	d10b      	bne.n	80103ca <_printf_i+0x142>
 80103b2:	6823      	ldr	r3, [r4, #0]
 80103b4:	07df      	lsls	r7, r3, #31
 80103b6:	d508      	bpl.n	80103ca <_printf_i+0x142>
 80103b8:	6923      	ldr	r3, [r4, #16]
 80103ba:	6861      	ldr	r1, [r4, #4]
 80103bc:	4299      	cmp	r1, r3
 80103be:	bfde      	ittt	le
 80103c0:	2330      	movle	r3, #48	@ 0x30
 80103c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80103c6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80103ca:	1b92      	subs	r2, r2, r6
 80103cc:	6122      	str	r2, [r4, #16]
 80103ce:	f8cd a000 	str.w	sl, [sp]
 80103d2:	464b      	mov	r3, r9
 80103d4:	aa03      	add	r2, sp, #12
 80103d6:	4621      	mov	r1, r4
 80103d8:	4640      	mov	r0, r8
 80103da:	f7ff fee7 	bl	80101ac <_printf_common>
 80103de:	3001      	adds	r0, #1
 80103e0:	d14a      	bne.n	8010478 <_printf_i+0x1f0>
 80103e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80103e6:	b004      	add	sp, #16
 80103e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ec:	6823      	ldr	r3, [r4, #0]
 80103ee:	f043 0320 	orr.w	r3, r3, #32
 80103f2:	6023      	str	r3, [r4, #0]
 80103f4:	4832      	ldr	r0, [pc, #200]	@ (80104c0 <_printf_i+0x238>)
 80103f6:	2778      	movs	r7, #120	@ 0x78
 80103f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80103fc:	6823      	ldr	r3, [r4, #0]
 80103fe:	6831      	ldr	r1, [r6, #0]
 8010400:	061f      	lsls	r7, r3, #24
 8010402:	f851 5b04 	ldr.w	r5, [r1], #4
 8010406:	d402      	bmi.n	801040e <_printf_i+0x186>
 8010408:	065f      	lsls	r7, r3, #25
 801040a:	bf48      	it	mi
 801040c:	b2ad      	uxthmi	r5, r5
 801040e:	6031      	str	r1, [r6, #0]
 8010410:	07d9      	lsls	r1, r3, #31
 8010412:	bf44      	itt	mi
 8010414:	f043 0320 	orrmi.w	r3, r3, #32
 8010418:	6023      	strmi	r3, [r4, #0]
 801041a:	b11d      	cbz	r5, 8010424 <_printf_i+0x19c>
 801041c:	2310      	movs	r3, #16
 801041e:	e7ad      	b.n	801037c <_printf_i+0xf4>
 8010420:	4826      	ldr	r0, [pc, #152]	@ (80104bc <_printf_i+0x234>)
 8010422:	e7e9      	b.n	80103f8 <_printf_i+0x170>
 8010424:	6823      	ldr	r3, [r4, #0]
 8010426:	f023 0320 	bic.w	r3, r3, #32
 801042a:	6023      	str	r3, [r4, #0]
 801042c:	e7f6      	b.n	801041c <_printf_i+0x194>
 801042e:	4616      	mov	r6, r2
 8010430:	e7bd      	b.n	80103ae <_printf_i+0x126>
 8010432:	6833      	ldr	r3, [r6, #0]
 8010434:	6825      	ldr	r5, [r4, #0]
 8010436:	6961      	ldr	r1, [r4, #20]
 8010438:	1d18      	adds	r0, r3, #4
 801043a:	6030      	str	r0, [r6, #0]
 801043c:	062e      	lsls	r6, r5, #24
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	d501      	bpl.n	8010446 <_printf_i+0x1be>
 8010442:	6019      	str	r1, [r3, #0]
 8010444:	e002      	b.n	801044c <_printf_i+0x1c4>
 8010446:	0668      	lsls	r0, r5, #25
 8010448:	d5fb      	bpl.n	8010442 <_printf_i+0x1ba>
 801044a:	8019      	strh	r1, [r3, #0]
 801044c:	2300      	movs	r3, #0
 801044e:	6123      	str	r3, [r4, #16]
 8010450:	4616      	mov	r6, r2
 8010452:	e7bc      	b.n	80103ce <_printf_i+0x146>
 8010454:	6833      	ldr	r3, [r6, #0]
 8010456:	1d1a      	adds	r2, r3, #4
 8010458:	6032      	str	r2, [r6, #0]
 801045a:	681e      	ldr	r6, [r3, #0]
 801045c:	6862      	ldr	r2, [r4, #4]
 801045e:	2100      	movs	r1, #0
 8010460:	4630      	mov	r0, r6
 8010462:	f7ef fe8d 	bl	8000180 <memchr>
 8010466:	b108      	cbz	r0, 801046c <_printf_i+0x1e4>
 8010468:	1b80      	subs	r0, r0, r6
 801046a:	6060      	str	r0, [r4, #4]
 801046c:	6863      	ldr	r3, [r4, #4]
 801046e:	6123      	str	r3, [r4, #16]
 8010470:	2300      	movs	r3, #0
 8010472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010476:	e7aa      	b.n	80103ce <_printf_i+0x146>
 8010478:	6923      	ldr	r3, [r4, #16]
 801047a:	4632      	mov	r2, r6
 801047c:	4649      	mov	r1, r9
 801047e:	4640      	mov	r0, r8
 8010480:	47d0      	blx	sl
 8010482:	3001      	adds	r0, #1
 8010484:	d0ad      	beq.n	80103e2 <_printf_i+0x15a>
 8010486:	6823      	ldr	r3, [r4, #0]
 8010488:	079b      	lsls	r3, r3, #30
 801048a:	d413      	bmi.n	80104b4 <_printf_i+0x22c>
 801048c:	68e0      	ldr	r0, [r4, #12]
 801048e:	9b03      	ldr	r3, [sp, #12]
 8010490:	4298      	cmp	r0, r3
 8010492:	bfb8      	it	lt
 8010494:	4618      	movlt	r0, r3
 8010496:	e7a6      	b.n	80103e6 <_printf_i+0x15e>
 8010498:	2301      	movs	r3, #1
 801049a:	4632      	mov	r2, r6
 801049c:	4649      	mov	r1, r9
 801049e:	4640      	mov	r0, r8
 80104a0:	47d0      	blx	sl
 80104a2:	3001      	adds	r0, #1
 80104a4:	d09d      	beq.n	80103e2 <_printf_i+0x15a>
 80104a6:	3501      	adds	r5, #1
 80104a8:	68e3      	ldr	r3, [r4, #12]
 80104aa:	9903      	ldr	r1, [sp, #12]
 80104ac:	1a5b      	subs	r3, r3, r1
 80104ae:	42ab      	cmp	r3, r5
 80104b0:	dcf2      	bgt.n	8010498 <_printf_i+0x210>
 80104b2:	e7eb      	b.n	801048c <_printf_i+0x204>
 80104b4:	2500      	movs	r5, #0
 80104b6:	f104 0619 	add.w	r6, r4, #25
 80104ba:	e7f5      	b.n	80104a8 <_printf_i+0x220>
 80104bc:	080157ba 	.word	0x080157ba
 80104c0:	080157cb 	.word	0x080157cb

080104c4 <sniprintf>:
 80104c4:	b40c      	push	{r2, r3}
 80104c6:	b530      	push	{r4, r5, lr}
 80104c8:	4b18      	ldr	r3, [pc, #96]	@ (801052c <sniprintf+0x68>)
 80104ca:	1e0c      	subs	r4, r1, #0
 80104cc:	681d      	ldr	r5, [r3, #0]
 80104ce:	b09d      	sub	sp, #116	@ 0x74
 80104d0:	da08      	bge.n	80104e4 <sniprintf+0x20>
 80104d2:	238b      	movs	r3, #139	@ 0x8b
 80104d4:	602b      	str	r3, [r5, #0]
 80104d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80104da:	b01d      	add	sp, #116	@ 0x74
 80104dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104e0:	b002      	add	sp, #8
 80104e2:	4770      	bx	lr
 80104e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80104e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80104ec:	f04f 0300 	mov.w	r3, #0
 80104f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80104f2:	bf14      	ite	ne
 80104f4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80104f8:	4623      	moveq	r3, r4
 80104fa:	9304      	str	r3, [sp, #16]
 80104fc:	9307      	str	r3, [sp, #28]
 80104fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010502:	9002      	str	r0, [sp, #8]
 8010504:	9006      	str	r0, [sp, #24]
 8010506:	f8ad 3016 	strh.w	r3, [sp, #22]
 801050a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801050c:	ab21      	add	r3, sp, #132	@ 0x84
 801050e:	a902      	add	r1, sp, #8
 8010510:	4628      	mov	r0, r5
 8010512:	9301      	str	r3, [sp, #4]
 8010514:	f001 f834 	bl	8011580 <_svfiprintf_r>
 8010518:	1c43      	adds	r3, r0, #1
 801051a:	bfbc      	itt	lt
 801051c:	238b      	movlt	r3, #139	@ 0x8b
 801051e:	602b      	strlt	r3, [r5, #0]
 8010520:	2c00      	cmp	r4, #0
 8010522:	d0da      	beq.n	80104da <sniprintf+0x16>
 8010524:	9b02      	ldr	r3, [sp, #8]
 8010526:	2200      	movs	r2, #0
 8010528:	701a      	strb	r2, [r3, #0]
 801052a:	e7d6      	b.n	80104da <sniprintf+0x16>
 801052c:	200000a4 	.word	0x200000a4

08010530 <std>:
 8010530:	2300      	movs	r3, #0
 8010532:	b510      	push	{r4, lr}
 8010534:	4604      	mov	r4, r0
 8010536:	e9c0 3300 	strd	r3, r3, [r0]
 801053a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801053e:	6083      	str	r3, [r0, #8]
 8010540:	8181      	strh	r1, [r0, #12]
 8010542:	6643      	str	r3, [r0, #100]	@ 0x64
 8010544:	81c2      	strh	r2, [r0, #14]
 8010546:	6183      	str	r3, [r0, #24]
 8010548:	4619      	mov	r1, r3
 801054a:	2208      	movs	r2, #8
 801054c:	305c      	adds	r0, #92	@ 0x5c
 801054e:	f000 f929 	bl	80107a4 <memset>
 8010552:	4b0d      	ldr	r3, [pc, #52]	@ (8010588 <std+0x58>)
 8010554:	6263      	str	r3, [r4, #36]	@ 0x24
 8010556:	4b0d      	ldr	r3, [pc, #52]	@ (801058c <std+0x5c>)
 8010558:	62a3      	str	r3, [r4, #40]	@ 0x28
 801055a:	4b0d      	ldr	r3, [pc, #52]	@ (8010590 <std+0x60>)
 801055c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801055e:	4b0d      	ldr	r3, [pc, #52]	@ (8010594 <std+0x64>)
 8010560:	6323      	str	r3, [r4, #48]	@ 0x30
 8010562:	4b0d      	ldr	r3, [pc, #52]	@ (8010598 <std+0x68>)
 8010564:	6224      	str	r4, [r4, #32]
 8010566:	429c      	cmp	r4, r3
 8010568:	d006      	beq.n	8010578 <std+0x48>
 801056a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801056e:	4294      	cmp	r4, r2
 8010570:	d002      	beq.n	8010578 <std+0x48>
 8010572:	33d0      	adds	r3, #208	@ 0xd0
 8010574:	429c      	cmp	r4, r3
 8010576:	d105      	bne.n	8010584 <std+0x54>
 8010578:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801057c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010580:	f000 b942 	b.w	8010808 <__retarget_lock_init_recursive>
 8010584:	bd10      	pop	{r4, pc}
 8010586:	bf00      	nop
 8010588:	080123b5 	.word	0x080123b5
 801058c:	080123d7 	.word	0x080123d7
 8010590:	0801240f 	.word	0x0801240f
 8010594:	08012433 	.word	0x08012433
 8010598:	20000698 	.word	0x20000698

0801059c <stdio_exit_handler>:
 801059c:	4a02      	ldr	r2, [pc, #8]	@ (80105a8 <stdio_exit_handler+0xc>)
 801059e:	4903      	ldr	r1, [pc, #12]	@ (80105ac <stdio_exit_handler+0x10>)
 80105a0:	4803      	ldr	r0, [pc, #12]	@ (80105b0 <stdio_exit_handler+0x14>)
 80105a2:	f000 b869 	b.w	8010678 <_fwalk_sglue>
 80105a6:	bf00      	nop
 80105a8:	20000098 	.word	0x20000098
 80105ac:	08011c59 	.word	0x08011c59
 80105b0:	200000a8 	.word	0x200000a8

080105b4 <cleanup_stdio>:
 80105b4:	6841      	ldr	r1, [r0, #4]
 80105b6:	4b0c      	ldr	r3, [pc, #48]	@ (80105e8 <cleanup_stdio+0x34>)
 80105b8:	4299      	cmp	r1, r3
 80105ba:	b510      	push	{r4, lr}
 80105bc:	4604      	mov	r4, r0
 80105be:	d001      	beq.n	80105c4 <cleanup_stdio+0x10>
 80105c0:	f001 fb4a 	bl	8011c58 <_fflush_r>
 80105c4:	68a1      	ldr	r1, [r4, #8]
 80105c6:	4b09      	ldr	r3, [pc, #36]	@ (80105ec <cleanup_stdio+0x38>)
 80105c8:	4299      	cmp	r1, r3
 80105ca:	d002      	beq.n	80105d2 <cleanup_stdio+0x1e>
 80105cc:	4620      	mov	r0, r4
 80105ce:	f001 fb43 	bl	8011c58 <_fflush_r>
 80105d2:	68e1      	ldr	r1, [r4, #12]
 80105d4:	4b06      	ldr	r3, [pc, #24]	@ (80105f0 <cleanup_stdio+0x3c>)
 80105d6:	4299      	cmp	r1, r3
 80105d8:	d004      	beq.n	80105e4 <cleanup_stdio+0x30>
 80105da:	4620      	mov	r0, r4
 80105dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105e0:	f001 bb3a 	b.w	8011c58 <_fflush_r>
 80105e4:	bd10      	pop	{r4, pc}
 80105e6:	bf00      	nop
 80105e8:	20000698 	.word	0x20000698
 80105ec:	20000700 	.word	0x20000700
 80105f0:	20000768 	.word	0x20000768

080105f4 <global_stdio_init.part.0>:
 80105f4:	b510      	push	{r4, lr}
 80105f6:	4b0b      	ldr	r3, [pc, #44]	@ (8010624 <global_stdio_init.part.0+0x30>)
 80105f8:	4c0b      	ldr	r4, [pc, #44]	@ (8010628 <global_stdio_init.part.0+0x34>)
 80105fa:	4a0c      	ldr	r2, [pc, #48]	@ (801062c <global_stdio_init.part.0+0x38>)
 80105fc:	601a      	str	r2, [r3, #0]
 80105fe:	4620      	mov	r0, r4
 8010600:	2200      	movs	r2, #0
 8010602:	2104      	movs	r1, #4
 8010604:	f7ff ff94 	bl	8010530 <std>
 8010608:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801060c:	2201      	movs	r2, #1
 801060e:	2109      	movs	r1, #9
 8010610:	f7ff ff8e 	bl	8010530 <std>
 8010614:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010618:	2202      	movs	r2, #2
 801061a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801061e:	2112      	movs	r1, #18
 8010620:	f7ff bf86 	b.w	8010530 <std>
 8010624:	200007d0 	.word	0x200007d0
 8010628:	20000698 	.word	0x20000698
 801062c:	0801059d 	.word	0x0801059d

08010630 <__sfp_lock_acquire>:
 8010630:	4801      	ldr	r0, [pc, #4]	@ (8010638 <__sfp_lock_acquire+0x8>)
 8010632:	f000 b8ea 	b.w	801080a <__retarget_lock_acquire_recursive>
 8010636:	bf00      	nop
 8010638:	200007d5 	.word	0x200007d5

0801063c <__sfp_lock_release>:
 801063c:	4801      	ldr	r0, [pc, #4]	@ (8010644 <__sfp_lock_release+0x8>)
 801063e:	f000 b8e5 	b.w	801080c <__retarget_lock_release_recursive>
 8010642:	bf00      	nop
 8010644:	200007d5 	.word	0x200007d5

08010648 <__sinit>:
 8010648:	b510      	push	{r4, lr}
 801064a:	4604      	mov	r4, r0
 801064c:	f7ff fff0 	bl	8010630 <__sfp_lock_acquire>
 8010650:	6a23      	ldr	r3, [r4, #32]
 8010652:	b11b      	cbz	r3, 801065c <__sinit+0x14>
 8010654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010658:	f7ff bff0 	b.w	801063c <__sfp_lock_release>
 801065c:	4b04      	ldr	r3, [pc, #16]	@ (8010670 <__sinit+0x28>)
 801065e:	6223      	str	r3, [r4, #32]
 8010660:	4b04      	ldr	r3, [pc, #16]	@ (8010674 <__sinit+0x2c>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d1f5      	bne.n	8010654 <__sinit+0xc>
 8010668:	f7ff ffc4 	bl	80105f4 <global_stdio_init.part.0>
 801066c:	e7f2      	b.n	8010654 <__sinit+0xc>
 801066e:	bf00      	nop
 8010670:	080105b5 	.word	0x080105b5
 8010674:	200007d0 	.word	0x200007d0

08010678 <_fwalk_sglue>:
 8010678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801067c:	4607      	mov	r7, r0
 801067e:	4688      	mov	r8, r1
 8010680:	4614      	mov	r4, r2
 8010682:	2600      	movs	r6, #0
 8010684:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010688:	f1b9 0901 	subs.w	r9, r9, #1
 801068c:	d505      	bpl.n	801069a <_fwalk_sglue+0x22>
 801068e:	6824      	ldr	r4, [r4, #0]
 8010690:	2c00      	cmp	r4, #0
 8010692:	d1f7      	bne.n	8010684 <_fwalk_sglue+0xc>
 8010694:	4630      	mov	r0, r6
 8010696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801069a:	89ab      	ldrh	r3, [r5, #12]
 801069c:	2b01      	cmp	r3, #1
 801069e:	d907      	bls.n	80106b0 <_fwalk_sglue+0x38>
 80106a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80106a4:	3301      	adds	r3, #1
 80106a6:	d003      	beq.n	80106b0 <_fwalk_sglue+0x38>
 80106a8:	4629      	mov	r1, r5
 80106aa:	4638      	mov	r0, r7
 80106ac:	47c0      	blx	r8
 80106ae:	4306      	orrs	r6, r0
 80106b0:	3568      	adds	r5, #104	@ 0x68
 80106b2:	e7e9      	b.n	8010688 <_fwalk_sglue+0x10>

080106b4 <iprintf>:
 80106b4:	b40f      	push	{r0, r1, r2, r3}
 80106b6:	b507      	push	{r0, r1, r2, lr}
 80106b8:	4906      	ldr	r1, [pc, #24]	@ (80106d4 <iprintf+0x20>)
 80106ba:	ab04      	add	r3, sp, #16
 80106bc:	6808      	ldr	r0, [r1, #0]
 80106be:	f853 2b04 	ldr.w	r2, [r3], #4
 80106c2:	6881      	ldr	r1, [r0, #8]
 80106c4:	9301      	str	r3, [sp, #4]
 80106c6:	f001 f881 	bl	80117cc <_vfiprintf_r>
 80106ca:	b003      	add	sp, #12
 80106cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80106d0:	b004      	add	sp, #16
 80106d2:	4770      	bx	lr
 80106d4:	200000a4 	.word	0x200000a4

080106d8 <putchar>:
 80106d8:	4b02      	ldr	r3, [pc, #8]	@ (80106e4 <putchar+0xc>)
 80106da:	4601      	mov	r1, r0
 80106dc:	6818      	ldr	r0, [r3, #0]
 80106de:	6882      	ldr	r2, [r0, #8]
 80106e0:	f001 bfd0 	b.w	8012684 <_putc_r>
 80106e4:	200000a4 	.word	0x200000a4

080106e8 <_puts_r>:
 80106e8:	6a03      	ldr	r3, [r0, #32]
 80106ea:	b570      	push	{r4, r5, r6, lr}
 80106ec:	6884      	ldr	r4, [r0, #8]
 80106ee:	4605      	mov	r5, r0
 80106f0:	460e      	mov	r6, r1
 80106f2:	b90b      	cbnz	r3, 80106f8 <_puts_r+0x10>
 80106f4:	f7ff ffa8 	bl	8010648 <__sinit>
 80106f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106fa:	07db      	lsls	r3, r3, #31
 80106fc:	d405      	bmi.n	801070a <_puts_r+0x22>
 80106fe:	89a3      	ldrh	r3, [r4, #12]
 8010700:	0598      	lsls	r0, r3, #22
 8010702:	d402      	bmi.n	801070a <_puts_r+0x22>
 8010704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010706:	f000 f880 	bl	801080a <__retarget_lock_acquire_recursive>
 801070a:	89a3      	ldrh	r3, [r4, #12]
 801070c:	0719      	lsls	r1, r3, #28
 801070e:	d502      	bpl.n	8010716 <_puts_r+0x2e>
 8010710:	6923      	ldr	r3, [r4, #16]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d135      	bne.n	8010782 <_puts_r+0x9a>
 8010716:	4621      	mov	r1, r4
 8010718:	4628      	mov	r0, r5
 801071a:	f001 fefb 	bl	8012514 <__swsetup_r>
 801071e:	b380      	cbz	r0, 8010782 <_puts_r+0x9a>
 8010720:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010724:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010726:	07da      	lsls	r2, r3, #31
 8010728:	d405      	bmi.n	8010736 <_puts_r+0x4e>
 801072a:	89a3      	ldrh	r3, [r4, #12]
 801072c:	059b      	lsls	r3, r3, #22
 801072e:	d402      	bmi.n	8010736 <_puts_r+0x4e>
 8010730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010732:	f000 f86b 	bl	801080c <__retarget_lock_release_recursive>
 8010736:	4628      	mov	r0, r5
 8010738:	bd70      	pop	{r4, r5, r6, pc}
 801073a:	2b00      	cmp	r3, #0
 801073c:	da04      	bge.n	8010748 <_puts_r+0x60>
 801073e:	69a2      	ldr	r2, [r4, #24]
 8010740:	429a      	cmp	r2, r3
 8010742:	dc17      	bgt.n	8010774 <_puts_r+0x8c>
 8010744:	290a      	cmp	r1, #10
 8010746:	d015      	beq.n	8010774 <_puts_r+0x8c>
 8010748:	6823      	ldr	r3, [r4, #0]
 801074a:	1c5a      	adds	r2, r3, #1
 801074c:	6022      	str	r2, [r4, #0]
 801074e:	7019      	strb	r1, [r3, #0]
 8010750:	68a3      	ldr	r3, [r4, #8]
 8010752:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010756:	3b01      	subs	r3, #1
 8010758:	60a3      	str	r3, [r4, #8]
 801075a:	2900      	cmp	r1, #0
 801075c:	d1ed      	bne.n	801073a <_puts_r+0x52>
 801075e:	2b00      	cmp	r3, #0
 8010760:	da11      	bge.n	8010786 <_puts_r+0x9e>
 8010762:	4622      	mov	r2, r4
 8010764:	210a      	movs	r1, #10
 8010766:	4628      	mov	r0, r5
 8010768:	f001 fe95 	bl	8012496 <__swbuf_r>
 801076c:	3001      	adds	r0, #1
 801076e:	d0d7      	beq.n	8010720 <_puts_r+0x38>
 8010770:	250a      	movs	r5, #10
 8010772:	e7d7      	b.n	8010724 <_puts_r+0x3c>
 8010774:	4622      	mov	r2, r4
 8010776:	4628      	mov	r0, r5
 8010778:	f001 fe8d 	bl	8012496 <__swbuf_r>
 801077c:	3001      	adds	r0, #1
 801077e:	d1e7      	bne.n	8010750 <_puts_r+0x68>
 8010780:	e7ce      	b.n	8010720 <_puts_r+0x38>
 8010782:	3e01      	subs	r6, #1
 8010784:	e7e4      	b.n	8010750 <_puts_r+0x68>
 8010786:	6823      	ldr	r3, [r4, #0]
 8010788:	1c5a      	adds	r2, r3, #1
 801078a:	6022      	str	r2, [r4, #0]
 801078c:	220a      	movs	r2, #10
 801078e:	701a      	strb	r2, [r3, #0]
 8010790:	e7ee      	b.n	8010770 <_puts_r+0x88>
	...

08010794 <puts>:
 8010794:	4b02      	ldr	r3, [pc, #8]	@ (80107a0 <puts+0xc>)
 8010796:	4601      	mov	r1, r0
 8010798:	6818      	ldr	r0, [r3, #0]
 801079a:	f7ff bfa5 	b.w	80106e8 <_puts_r>
 801079e:	bf00      	nop
 80107a0:	200000a4 	.word	0x200000a4

080107a4 <memset>:
 80107a4:	4402      	add	r2, r0
 80107a6:	4603      	mov	r3, r0
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d100      	bne.n	80107ae <memset+0xa>
 80107ac:	4770      	bx	lr
 80107ae:	f803 1b01 	strb.w	r1, [r3], #1
 80107b2:	e7f9      	b.n	80107a8 <memset+0x4>

080107b4 <__errno>:
 80107b4:	4b01      	ldr	r3, [pc, #4]	@ (80107bc <__errno+0x8>)
 80107b6:	6818      	ldr	r0, [r3, #0]
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	200000a4 	.word	0x200000a4

080107c0 <__libc_init_array>:
 80107c0:	b570      	push	{r4, r5, r6, lr}
 80107c2:	4d0d      	ldr	r5, [pc, #52]	@ (80107f8 <__libc_init_array+0x38>)
 80107c4:	4c0d      	ldr	r4, [pc, #52]	@ (80107fc <__libc_init_array+0x3c>)
 80107c6:	1b64      	subs	r4, r4, r5
 80107c8:	10a4      	asrs	r4, r4, #2
 80107ca:	2600      	movs	r6, #0
 80107cc:	42a6      	cmp	r6, r4
 80107ce:	d109      	bne.n	80107e4 <__libc_init_array+0x24>
 80107d0:	4d0b      	ldr	r5, [pc, #44]	@ (8010800 <__libc_init_array+0x40>)
 80107d2:	4c0c      	ldr	r4, [pc, #48]	@ (8010804 <__libc_init_array+0x44>)
 80107d4:	f002 f92a 	bl	8012a2c <_init>
 80107d8:	1b64      	subs	r4, r4, r5
 80107da:	10a4      	asrs	r4, r4, #2
 80107dc:	2600      	movs	r6, #0
 80107de:	42a6      	cmp	r6, r4
 80107e0:	d105      	bne.n	80107ee <__libc_init_array+0x2e>
 80107e2:	bd70      	pop	{r4, r5, r6, pc}
 80107e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80107e8:	4798      	blx	r3
 80107ea:	3601      	adds	r6, #1
 80107ec:	e7ee      	b.n	80107cc <__libc_init_array+0xc>
 80107ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80107f2:	4798      	blx	r3
 80107f4:	3601      	adds	r6, #1
 80107f6:	e7f2      	b.n	80107de <__libc_init_array+0x1e>
 80107f8:	08015b24 	.word	0x08015b24
 80107fc:	08015b24 	.word	0x08015b24
 8010800:	08015b24 	.word	0x08015b24
 8010804:	08015b2c 	.word	0x08015b2c

08010808 <__retarget_lock_init_recursive>:
 8010808:	4770      	bx	lr

0801080a <__retarget_lock_acquire_recursive>:
 801080a:	4770      	bx	lr

0801080c <__retarget_lock_release_recursive>:
 801080c:	4770      	bx	lr
	...

08010810 <_localeconv_r>:
 8010810:	4800      	ldr	r0, [pc, #0]	@ (8010814 <_localeconv_r+0x4>)
 8010812:	4770      	bx	lr
 8010814:	200001e4 	.word	0x200001e4

08010818 <quorem>:
 8010818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801081c:	6903      	ldr	r3, [r0, #16]
 801081e:	690c      	ldr	r4, [r1, #16]
 8010820:	42a3      	cmp	r3, r4
 8010822:	4607      	mov	r7, r0
 8010824:	db7e      	blt.n	8010924 <quorem+0x10c>
 8010826:	3c01      	subs	r4, #1
 8010828:	f101 0814 	add.w	r8, r1, #20
 801082c:	00a3      	lsls	r3, r4, #2
 801082e:	f100 0514 	add.w	r5, r0, #20
 8010832:	9300      	str	r3, [sp, #0]
 8010834:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010838:	9301      	str	r3, [sp, #4]
 801083a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801083e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010842:	3301      	adds	r3, #1
 8010844:	429a      	cmp	r2, r3
 8010846:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801084a:	fbb2 f6f3 	udiv	r6, r2, r3
 801084e:	d32e      	bcc.n	80108ae <quorem+0x96>
 8010850:	f04f 0a00 	mov.w	sl, #0
 8010854:	46c4      	mov	ip, r8
 8010856:	46ae      	mov	lr, r5
 8010858:	46d3      	mov	fp, sl
 801085a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801085e:	b298      	uxth	r0, r3
 8010860:	fb06 a000 	mla	r0, r6, r0, sl
 8010864:	0c02      	lsrs	r2, r0, #16
 8010866:	0c1b      	lsrs	r3, r3, #16
 8010868:	fb06 2303 	mla	r3, r6, r3, r2
 801086c:	f8de 2000 	ldr.w	r2, [lr]
 8010870:	b280      	uxth	r0, r0
 8010872:	b292      	uxth	r2, r2
 8010874:	1a12      	subs	r2, r2, r0
 8010876:	445a      	add	r2, fp
 8010878:	f8de 0000 	ldr.w	r0, [lr]
 801087c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010880:	b29b      	uxth	r3, r3
 8010882:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010886:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801088a:	b292      	uxth	r2, r2
 801088c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010890:	45e1      	cmp	r9, ip
 8010892:	f84e 2b04 	str.w	r2, [lr], #4
 8010896:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801089a:	d2de      	bcs.n	801085a <quorem+0x42>
 801089c:	9b00      	ldr	r3, [sp, #0]
 801089e:	58eb      	ldr	r3, [r5, r3]
 80108a0:	b92b      	cbnz	r3, 80108ae <quorem+0x96>
 80108a2:	9b01      	ldr	r3, [sp, #4]
 80108a4:	3b04      	subs	r3, #4
 80108a6:	429d      	cmp	r5, r3
 80108a8:	461a      	mov	r2, r3
 80108aa:	d32f      	bcc.n	801090c <quorem+0xf4>
 80108ac:	613c      	str	r4, [r7, #16]
 80108ae:	4638      	mov	r0, r7
 80108b0:	f001 fc78 	bl	80121a4 <__mcmp>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	db25      	blt.n	8010904 <quorem+0xec>
 80108b8:	4629      	mov	r1, r5
 80108ba:	2000      	movs	r0, #0
 80108bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80108c0:	f8d1 c000 	ldr.w	ip, [r1]
 80108c4:	fa1f fe82 	uxth.w	lr, r2
 80108c8:	fa1f f38c 	uxth.w	r3, ip
 80108cc:	eba3 030e 	sub.w	r3, r3, lr
 80108d0:	4403      	add	r3, r0
 80108d2:	0c12      	lsrs	r2, r2, #16
 80108d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80108d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80108dc:	b29b      	uxth	r3, r3
 80108de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108e2:	45c1      	cmp	r9, r8
 80108e4:	f841 3b04 	str.w	r3, [r1], #4
 80108e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80108ec:	d2e6      	bcs.n	80108bc <quorem+0xa4>
 80108ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108f6:	b922      	cbnz	r2, 8010902 <quorem+0xea>
 80108f8:	3b04      	subs	r3, #4
 80108fa:	429d      	cmp	r5, r3
 80108fc:	461a      	mov	r2, r3
 80108fe:	d30b      	bcc.n	8010918 <quorem+0x100>
 8010900:	613c      	str	r4, [r7, #16]
 8010902:	3601      	adds	r6, #1
 8010904:	4630      	mov	r0, r6
 8010906:	b003      	add	sp, #12
 8010908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801090c:	6812      	ldr	r2, [r2, #0]
 801090e:	3b04      	subs	r3, #4
 8010910:	2a00      	cmp	r2, #0
 8010912:	d1cb      	bne.n	80108ac <quorem+0x94>
 8010914:	3c01      	subs	r4, #1
 8010916:	e7c6      	b.n	80108a6 <quorem+0x8e>
 8010918:	6812      	ldr	r2, [r2, #0]
 801091a:	3b04      	subs	r3, #4
 801091c:	2a00      	cmp	r2, #0
 801091e:	d1ef      	bne.n	8010900 <quorem+0xe8>
 8010920:	3c01      	subs	r4, #1
 8010922:	e7ea      	b.n	80108fa <quorem+0xe2>
 8010924:	2000      	movs	r0, #0
 8010926:	e7ee      	b.n	8010906 <quorem+0xee>

08010928 <_dtoa_r>:
 8010928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801092c:	69c7      	ldr	r7, [r0, #28]
 801092e:	b097      	sub	sp, #92	@ 0x5c
 8010930:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010934:	ec55 4b10 	vmov	r4, r5, d0
 8010938:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801093a:	9107      	str	r1, [sp, #28]
 801093c:	4681      	mov	r9, r0
 801093e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010940:	9311      	str	r3, [sp, #68]	@ 0x44
 8010942:	b97f      	cbnz	r7, 8010964 <_dtoa_r+0x3c>
 8010944:	2010      	movs	r0, #16
 8010946:	f001 f859 	bl	80119fc <malloc>
 801094a:	4602      	mov	r2, r0
 801094c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010950:	b920      	cbnz	r0, 801095c <_dtoa_r+0x34>
 8010952:	4ba9      	ldr	r3, [pc, #676]	@ (8010bf8 <_dtoa_r+0x2d0>)
 8010954:	21ef      	movs	r1, #239	@ 0xef
 8010956:	48a9      	ldr	r0, [pc, #676]	@ (8010bfc <_dtoa_r+0x2d4>)
 8010958:	f001 ff68 	bl	801282c <__assert_func>
 801095c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010960:	6007      	str	r7, [r0, #0]
 8010962:	60c7      	str	r7, [r0, #12]
 8010964:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010968:	6819      	ldr	r1, [r3, #0]
 801096a:	b159      	cbz	r1, 8010984 <_dtoa_r+0x5c>
 801096c:	685a      	ldr	r2, [r3, #4]
 801096e:	604a      	str	r2, [r1, #4]
 8010970:	2301      	movs	r3, #1
 8010972:	4093      	lsls	r3, r2
 8010974:	608b      	str	r3, [r1, #8]
 8010976:	4648      	mov	r0, r9
 8010978:	f001 f9e2 	bl	8011d40 <_Bfree>
 801097c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010980:	2200      	movs	r2, #0
 8010982:	601a      	str	r2, [r3, #0]
 8010984:	1e2b      	subs	r3, r5, #0
 8010986:	bfb9      	ittee	lt
 8010988:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801098c:	9305      	strlt	r3, [sp, #20]
 801098e:	2300      	movge	r3, #0
 8010990:	6033      	strge	r3, [r6, #0]
 8010992:	9f05      	ldr	r7, [sp, #20]
 8010994:	4b9a      	ldr	r3, [pc, #616]	@ (8010c00 <_dtoa_r+0x2d8>)
 8010996:	bfbc      	itt	lt
 8010998:	2201      	movlt	r2, #1
 801099a:	6032      	strlt	r2, [r6, #0]
 801099c:	43bb      	bics	r3, r7
 801099e:	d112      	bne.n	80109c6 <_dtoa_r+0x9e>
 80109a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80109a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80109a6:	6013      	str	r3, [r2, #0]
 80109a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80109ac:	4323      	orrs	r3, r4
 80109ae:	f000 855a 	beq.w	8011466 <_dtoa_r+0xb3e>
 80109b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80109b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010c14 <_dtoa_r+0x2ec>
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	f000 855c 	beq.w	8011476 <_dtoa_r+0xb4e>
 80109be:	f10a 0303 	add.w	r3, sl, #3
 80109c2:	f000 bd56 	b.w	8011472 <_dtoa_r+0xb4a>
 80109c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80109ca:	2200      	movs	r2, #0
 80109cc:	ec51 0b17 	vmov	r0, r1, d7
 80109d0:	2300      	movs	r3, #0
 80109d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80109d6:	f7f0 f84f 	bl	8000a78 <__aeabi_dcmpeq>
 80109da:	4680      	mov	r8, r0
 80109dc:	b158      	cbz	r0, 80109f6 <_dtoa_r+0xce>
 80109de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80109e0:	2301      	movs	r3, #1
 80109e2:	6013      	str	r3, [r2, #0]
 80109e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80109e6:	b113      	cbz	r3, 80109ee <_dtoa_r+0xc6>
 80109e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80109ea:	4b86      	ldr	r3, [pc, #536]	@ (8010c04 <_dtoa_r+0x2dc>)
 80109ec:	6013      	str	r3, [r2, #0]
 80109ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010c18 <_dtoa_r+0x2f0>
 80109f2:	f000 bd40 	b.w	8011476 <_dtoa_r+0xb4e>
 80109f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80109fa:	aa14      	add	r2, sp, #80	@ 0x50
 80109fc:	a915      	add	r1, sp, #84	@ 0x54
 80109fe:	4648      	mov	r0, r9
 8010a00:	f001 fc80 	bl	8012304 <__d2b>
 8010a04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010a08:	9002      	str	r0, [sp, #8]
 8010a0a:	2e00      	cmp	r6, #0
 8010a0c:	d078      	beq.n	8010b00 <_dtoa_r+0x1d8>
 8010a0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a10:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010a1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010a20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010a24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010a28:	4619      	mov	r1, r3
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	4b76      	ldr	r3, [pc, #472]	@ (8010c08 <_dtoa_r+0x2e0>)
 8010a2e:	f7ef fc03 	bl	8000238 <__aeabi_dsub>
 8010a32:	a36b      	add	r3, pc, #428	@ (adr r3, 8010be0 <_dtoa_r+0x2b8>)
 8010a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a38:	f7ef fdb6 	bl	80005a8 <__aeabi_dmul>
 8010a3c:	a36a      	add	r3, pc, #424	@ (adr r3, 8010be8 <_dtoa_r+0x2c0>)
 8010a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a42:	f7ef fbfb 	bl	800023c <__adddf3>
 8010a46:	4604      	mov	r4, r0
 8010a48:	4630      	mov	r0, r6
 8010a4a:	460d      	mov	r5, r1
 8010a4c:	f7ef fd42 	bl	80004d4 <__aeabi_i2d>
 8010a50:	a367      	add	r3, pc, #412	@ (adr r3, 8010bf0 <_dtoa_r+0x2c8>)
 8010a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a56:	f7ef fda7 	bl	80005a8 <__aeabi_dmul>
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	4620      	mov	r0, r4
 8010a60:	4629      	mov	r1, r5
 8010a62:	f7ef fbeb 	bl	800023c <__adddf3>
 8010a66:	4604      	mov	r4, r0
 8010a68:	460d      	mov	r5, r1
 8010a6a:	f7f0 f84d 	bl	8000b08 <__aeabi_d2iz>
 8010a6e:	2200      	movs	r2, #0
 8010a70:	4607      	mov	r7, r0
 8010a72:	2300      	movs	r3, #0
 8010a74:	4620      	mov	r0, r4
 8010a76:	4629      	mov	r1, r5
 8010a78:	f7f0 f808 	bl	8000a8c <__aeabi_dcmplt>
 8010a7c:	b140      	cbz	r0, 8010a90 <_dtoa_r+0x168>
 8010a7e:	4638      	mov	r0, r7
 8010a80:	f7ef fd28 	bl	80004d4 <__aeabi_i2d>
 8010a84:	4622      	mov	r2, r4
 8010a86:	462b      	mov	r3, r5
 8010a88:	f7ef fff6 	bl	8000a78 <__aeabi_dcmpeq>
 8010a8c:	b900      	cbnz	r0, 8010a90 <_dtoa_r+0x168>
 8010a8e:	3f01      	subs	r7, #1
 8010a90:	2f16      	cmp	r7, #22
 8010a92:	d852      	bhi.n	8010b3a <_dtoa_r+0x212>
 8010a94:	4b5d      	ldr	r3, [pc, #372]	@ (8010c0c <_dtoa_r+0x2e4>)
 8010a96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010aa2:	f7ef fff3 	bl	8000a8c <__aeabi_dcmplt>
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	d049      	beq.n	8010b3e <_dtoa_r+0x216>
 8010aaa:	3f01      	subs	r7, #1
 8010aac:	2300      	movs	r3, #0
 8010aae:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ab0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010ab2:	1b9b      	subs	r3, r3, r6
 8010ab4:	1e5a      	subs	r2, r3, #1
 8010ab6:	bf45      	ittet	mi
 8010ab8:	f1c3 0301 	rsbmi	r3, r3, #1
 8010abc:	9300      	strmi	r3, [sp, #0]
 8010abe:	2300      	movpl	r3, #0
 8010ac0:	2300      	movmi	r3, #0
 8010ac2:	9206      	str	r2, [sp, #24]
 8010ac4:	bf54      	ite	pl
 8010ac6:	9300      	strpl	r3, [sp, #0]
 8010ac8:	9306      	strmi	r3, [sp, #24]
 8010aca:	2f00      	cmp	r7, #0
 8010acc:	db39      	blt.n	8010b42 <_dtoa_r+0x21a>
 8010ace:	9b06      	ldr	r3, [sp, #24]
 8010ad0:	970d      	str	r7, [sp, #52]	@ 0x34
 8010ad2:	443b      	add	r3, r7
 8010ad4:	9306      	str	r3, [sp, #24]
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	9308      	str	r3, [sp, #32]
 8010ada:	9b07      	ldr	r3, [sp, #28]
 8010adc:	2b09      	cmp	r3, #9
 8010ade:	d863      	bhi.n	8010ba8 <_dtoa_r+0x280>
 8010ae0:	2b05      	cmp	r3, #5
 8010ae2:	bfc4      	itt	gt
 8010ae4:	3b04      	subgt	r3, #4
 8010ae6:	9307      	strgt	r3, [sp, #28]
 8010ae8:	9b07      	ldr	r3, [sp, #28]
 8010aea:	f1a3 0302 	sub.w	r3, r3, #2
 8010aee:	bfcc      	ite	gt
 8010af0:	2400      	movgt	r4, #0
 8010af2:	2401      	movle	r4, #1
 8010af4:	2b03      	cmp	r3, #3
 8010af6:	d863      	bhi.n	8010bc0 <_dtoa_r+0x298>
 8010af8:	e8df f003 	tbb	[pc, r3]
 8010afc:	2b375452 	.word	0x2b375452
 8010b00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010b04:	441e      	add	r6, r3
 8010b06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010b0a:	2b20      	cmp	r3, #32
 8010b0c:	bfc1      	itttt	gt
 8010b0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010b12:	409f      	lslgt	r7, r3
 8010b14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010b18:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010b1c:	bfd6      	itet	le
 8010b1e:	f1c3 0320 	rsble	r3, r3, #32
 8010b22:	ea47 0003 	orrgt.w	r0, r7, r3
 8010b26:	fa04 f003 	lslle.w	r0, r4, r3
 8010b2a:	f7ef fcc3 	bl	80004b4 <__aeabi_ui2d>
 8010b2e:	2201      	movs	r2, #1
 8010b30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010b34:	3e01      	subs	r6, #1
 8010b36:	9212      	str	r2, [sp, #72]	@ 0x48
 8010b38:	e776      	b.n	8010a28 <_dtoa_r+0x100>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e7b7      	b.n	8010aae <_dtoa_r+0x186>
 8010b3e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010b40:	e7b6      	b.n	8010ab0 <_dtoa_r+0x188>
 8010b42:	9b00      	ldr	r3, [sp, #0]
 8010b44:	1bdb      	subs	r3, r3, r7
 8010b46:	9300      	str	r3, [sp, #0]
 8010b48:	427b      	negs	r3, r7
 8010b4a:	9308      	str	r3, [sp, #32]
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010b50:	e7c3      	b.n	8010ada <_dtoa_r+0x1b2>
 8010b52:	2301      	movs	r3, #1
 8010b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b58:	eb07 0b03 	add.w	fp, r7, r3
 8010b5c:	f10b 0301 	add.w	r3, fp, #1
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	9303      	str	r3, [sp, #12]
 8010b64:	bfb8      	it	lt
 8010b66:	2301      	movlt	r3, #1
 8010b68:	e006      	b.n	8010b78 <_dtoa_r+0x250>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	dd28      	ble.n	8010bc6 <_dtoa_r+0x29e>
 8010b74:	469b      	mov	fp, r3
 8010b76:	9303      	str	r3, [sp, #12]
 8010b78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010b7c:	2100      	movs	r1, #0
 8010b7e:	2204      	movs	r2, #4
 8010b80:	f102 0514 	add.w	r5, r2, #20
 8010b84:	429d      	cmp	r5, r3
 8010b86:	d926      	bls.n	8010bd6 <_dtoa_r+0x2ae>
 8010b88:	6041      	str	r1, [r0, #4]
 8010b8a:	4648      	mov	r0, r9
 8010b8c:	f001 f898 	bl	8011cc0 <_Balloc>
 8010b90:	4682      	mov	sl, r0
 8010b92:	2800      	cmp	r0, #0
 8010b94:	d142      	bne.n	8010c1c <_dtoa_r+0x2f4>
 8010b96:	4b1e      	ldr	r3, [pc, #120]	@ (8010c10 <_dtoa_r+0x2e8>)
 8010b98:	4602      	mov	r2, r0
 8010b9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8010b9e:	e6da      	b.n	8010956 <_dtoa_r+0x2e>
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	e7e3      	b.n	8010b6c <_dtoa_r+0x244>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	e7d5      	b.n	8010b54 <_dtoa_r+0x22c>
 8010ba8:	2401      	movs	r4, #1
 8010baa:	2300      	movs	r3, #0
 8010bac:	9307      	str	r3, [sp, #28]
 8010bae:	9409      	str	r4, [sp, #36]	@ 0x24
 8010bb0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	f8cd b00c 	str.w	fp, [sp, #12]
 8010bba:	2312      	movs	r3, #18
 8010bbc:	920c      	str	r2, [sp, #48]	@ 0x30
 8010bbe:	e7db      	b.n	8010b78 <_dtoa_r+0x250>
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bc4:	e7f4      	b.n	8010bb0 <_dtoa_r+0x288>
 8010bc6:	f04f 0b01 	mov.w	fp, #1
 8010bca:	f8cd b00c 	str.w	fp, [sp, #12]
 8010bce:	465b      	mov	r3, fp
 8010bd0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010bd4:	e7d0      	b.n	8010b78 <_dtoa_r+0x250>
 8010bd6:	3101      	adds	r1, #1
 8010bd8:	0052      	lsls	r2, r2, #1
 8010bda:	e7d1      	b.n	8010b80 <_dtoa_r+0x258>
 8010bdc:	f3af 8000 	nop.w
 8010be0:	636f4361 	.word	0x636f4361
 8010be4:	3fd287a7 	.word	0x3fd287a7
 8010be8:	8b60c8b3 	.word	0x8b60c8b3
 8010bec:	3fc68a28 	.word	0x3fc68a28
 8010bf0:	509f79fb 	.word	0x509f79fb
 8010bf4:	3fd34413 	.word	0x3fd34413
 8010bf8:	080157e9 	.word	0x080157e9
 8010bfc:	08015800 	.word	0x08015800
 8010c00:	7ff00000 	.word	0x7ff00000
 8010c04:	080157b9 	.word	0x080157b9
 8010c08:	3ff80000 	.word	0x3ff80000
 8010c0c:	08015950 	.word	0x08015950
 8010c10:	08015858 	.word	0x08015858
 8010c14:	080157e5 	.word	0x080157e5
 8010c18:	080157b8 	.word	0x080157b8
 8010c1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010c20:	6018      	str	r0, [r3, #0]
 8010c22:	9b03      	ldr	r3, [sp, #12]
 8010c24:	2b0e      	cmp	r3, #14
 8010c26:	f200 80a1 	bhi.w	8010d6c <_dtoa_r+0x444>
 8010c2a:	2c00      	cmp	r4, #0
 8010c2c:	f000 809e 	beq.w	8010d6c <_dtoa_r+0x444>
 8010c30:	2f00      	cmp	r7, #0
 8010c32:	dd33      	ble.n	8010c9c <_dtoa_r+0x374>
 8010c34:	4b9c      	ldr	r3, [pc, #624]	@ (8010ea8 <_dtoa_r+0x580>)
 8010c36:	f007 020f 	and.w	r2, r7, #15
 8010c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c3e:	ed93 7b00 	vldr	d7, [r3]
 8010c42:	05f8      	lsls	r0, r7, #23
 8010c44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010c48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010c4c:	d516      	bpl.n	8010c7c <_dtoa_r+0x354>
 8010c4e:	4b97      	ldr	r3, [pc, #604]	@ (8010eac <_dtoa_r+0x584>)
 8010c50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010c54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c58:	f7ef fdd0 	bl	80007fc <__aeabi_ddiv>
 8010c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c60:	f004 040f 	and.w	r4, r4, #15
 8010c64:	2603      	movs	r6, #3
 8010c66:	4d91      	ldr	r5, [pc, #580]	@ (8010eac <_dtoa_r+0x584>)
 8010c68:	b954      	cbnz	r4, 8010c80 <_dtoa_r+0x358>
 8010c6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c72:	f7ef fdc3 	bl	80007fc <__aeabi_ddiv>
 8010c76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c7a:	e028      	b.n	8010cce <_dtoa_r+0x3a6>
 8010c7c:	2602      	movs	r6, #2
 8010c7e:	e7f2      	b.n	8010c66 <_dtoa_r+0x33e>
 8010c80:	07e1      	lsls	r1, r4, #31
 8010c82:	d508      	bpl.n	8010c96 <_dtoa_r+0x36e>
 8010c84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010c88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c8c:	f7ef fc8c 	bl	80005a8 <__aeabi_dmul>
 8010c90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010c94:	3601      	adds	r6, #1
 8010c96:	1064      	asrs	r4, r4, #1
 8010c98:	3508      	adds	r5, #8
 8010c9a:	e7e5      	b.n	8010c68 <_dtoa_r+0x340>
 8010c9c:	f000 80af 	beq.w	8010dfe <_dtoa_r+0x4d6>
 8010ca0:	427c      	negs	r4, r7
 8010ca2:	4b81      	ldr	r3, [pc, #516]	@ (8010ea8 <_dtoa_r+0x580>)
 8010ca4:	4d81      	ldr	r5, [pc, #516]	@ (8010eac <_dtoa_r+0x584>)
 8010ca6:	f004 020f 	and.w	r2, r4, #15
 8010caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010cb6:	f7ef fc77 	bl	80005a8 <__aeabi_dmul>
 8010cba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010cbe:	1124      	asrs	r4, r4, #4
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	2602      	movs	r6, #2
 8010cc4:	2c00      	cmp	r4, #0
 8010cc6:	f040 808f 	bne.w	8010de8 <_dtoa_r+0x4c0>
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d1d3      	bne.n	8010c76 <_dtoa_r+0x34e>
 8010cce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010cd0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	f000 8094 	beq.w	8010e02 <_dtoa_r+0x4da>
 8010cda:	4b75      	ldr	r3, [pc, #468]	@ (8010eb0 <_dtoa_r+0x588>)
 8010cdc:	2200      	movs	r2, #0
 8010cde:	4620      	mov	r0, r4
 8010ce0:	4629      	mov	r1, r5
 8010ce2:	f7ef fed3 	bl	8000a8c <__aeabi_dcmplt>
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	f000 808b 	beq.w	8010e02 <_dtoa_r+0x4da>
 8010cec:	9b03      	ldr	r3, [sp, #12]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	f000 8087 	beq.w	8010e02 <_dtoa_r+0x4da>
 8010cf4:	f1bb 0f00 	cmp.w	fp, #0
 8010cf8:	dd34      	ble.n	8010d64 <_dtoa_r+0x43c>
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	4b6d      	ldr	r3, [pc, #436]	@ (8010eb4 <_dtoa_r+0x58c>)
 8010cfe:	2200      	movs	r2, #0
 8010d00:	4629      	mov	r1, r5
 8010d02:	f7ef fc51 	bl	80005a8 <__aeabi_dmul>
 8010d06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d0a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8010d0e:	3601      	adds	r6, #1
 8010d10:	465c      	mov	r4, fp
 8010d12:	4630      	mov	r0, r6
 8010d14:	f7ef fbde 	bl	80004d4 <__aeabi_i2d>
 8010d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d1c:	f7ef fc44 	bl	80005a8 <__aeabi_dmul>
 8010d20:	4b65      	ldr	r3, [pc, #404]	@ (8010eb8 <_dtoa_r+0x590>)
 8010d22:	2200      	movs	r2, #0
 8010d24:	f7ef fa8a 	bl	800023c <__adddf3>
 8010d28:	4605      	mov	r5, r0
 8010d2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010d2e:	2c00      	cmp	r4, #0
 8010d30:	d16a      	bne.n	8010e08 <_dtoa_r+0x4e0>
 8010d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d36:	4b61      	ldr	r3, [pc, #388]	@ (8010ebc <_dtoa_r+0x594>)
 8010d38:	2200      	movs	r2, #0
 8010d3a:	f7ef fa7d 	bl	8000238 <__aeabi_dsub>
 8010d3e:	4602      	mov	r2, r0
 8010d40:	460b      	mov	r3, r1
 8010d42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010d46:	462a      	mov	r2, r5
 8010d48:	4633      	mov	r3, r6
 8010d4a:	f7ef febd 	bl	8000ac8 <__aeabi_dcmpgt>
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	f040 8298 	bne.w	8011284 <_dtoa_r+0x95c>
 8010d54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d58:	462a      	mov	r2, r5
 8010d5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010d5e:	f7ef fe95 	bl	8000a8c <__aeabi_dcmplt>
 8010d62:	bb38      	cbnz	r0, 8010db4 <_dtoa_r+0x48c>
 8010d64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010d68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010d6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	f2c0 8157 	blt.w	8011022 <_dtoa_r+0x6fa>
 8010d74:	2f0e      	cmp	r7, #14
 8010d76:	f300 8154 	bgt.w	8011022 <_dtoa_r+0x6fa>
 8010d7a:	4b4b      	ldr	r3, [pc, #300]	@ (8010ea8 <_dtoa_r+0x580>)
 8010d7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010d80:	ed93 7b00 	vldr	d7, [r3]
 8010d84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	ed8d 7b00 	vstr	d7, [sp]
 8010d8c:	f280 80e5 	bge.w	8010f5a <_dtoa_r+0x632>
 8010d90:	9b03      	ldr	r3, [sp, #12]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	f300 80e1 	bgt.w	8010f5a <_dtoa_r+0x632>
 8010d98:	d10c      	bne.n	8010db4 <_dtoa_r+0x48c>
 8010d9a:	4b48      	ldr	r3, [pc, #288]	@ (8010ebc <_dtoa_r+0x594>)
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	ec51 0b17 	vmov	r0, r1, d7
 8010da2:	f7ef fc01 	bl	80005a8 <__aeabi_dmul>
 8010da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010daa:	f7ef fe83 	bl	8000ab4 <__aeabi_dcmpge>
 8010dae:	2800      	cmp	r0, #0
 8010db0:	f000 8266 	beq.w	8011280 <_dtoa_r+0x958>
 8010db4:	2400      	movs	r4, #0
 8010db6:	4625      	mov	r5, r4
 8010db8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010dba:	4656      	mov	r6, sl
 8010dbc:	ea6f 0803 	mvn.w	r8, r3
 8010dc0:	2700      	movs	r7, #0
 8010dc2:	4621      	mov	r1, r4
 8010dc4:	4648      	mov	r0, r9
 8010dc6:	f000 ffbb 	bl	8011d40 <_Bfree>
 8010dca:	2d00      	cmp	r5, #0
 8010dcc:	f000 80bd 	beq.w	8010f4a <_dtoa_r+0x622>
 8010dd0:	b12f      	cbz	r7, 8010dde <_dtoa_r+0x4b6>
 8010dd2:	42af      	cmp	r7, r5
 8010dd4:	d003      	beq.n	8010dde <_dtoa_r+0x4b6>
 8010dd6:	4639      	mov	r1, r7
 8010dd8:	4648      	mov	r0, r9
 8010dda:	f000 ffb1 	bl	8011d40 <_Bfree>
 8010dde:	4629      	mov	r1, r5
 8010de0:	4648      	mov	r0, r9
 8010de2:	f000 ffad 	bl	8011d40 <_Bfree>
 8010de6:	e0b0      	b.n	8010f4a <_dtoa_r+0x622>
 8010de8:	07e2      	lsls	r2, r4, #31
 8010dea:	d505      	bpl.n	8010df8 <_dtoa_r+0x4d0>
 8010dec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010df0:	f7ef fbda 	bl	80005a8 <__aeabi_dmul>
 8010df4:	3601      	adds	r6, #1
 8010df6:	2301      	movs	r3, #1
 8010df8:	1064      	asrs	r4, r4, #1
 8010dfa:	3508      	adds	r5, #8
 8010dfc:	e762      	b.n	8010cc4 <_dtoa_r+0x39c>
 8010dfe:	2602      	movs	r6, #2
 8010e00:	e765      	b.n	8010cce <_dtoa_r+0x3a6>
 8010e02:	9c03      	ldr	r4, [sp, #12]
 8010e04:	46b8      	mov	r8, r7
 8010e06:	e784      	b.n	8010d12 <_dtoa_r+0x3ea>
 8010e08:	4b27      	ldr	r3, [pc, #156]	@ (8010ea8 <_dtoa_r+0x580>)
 8010e0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010e0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010e10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010e14:	4454      	add	r4, sl
 8010e16:	2900      	cmp	r1, #0
 8010e18:	d054      	beq.n	8010ec4 <_dtoa_r+0x59c>
 8010e1a:	4929      	ldr	r1, [pc, #164]	@ (8010ec0 <_dtoa_r+0x598>)
 8010e1c:	2000      	movs	r0, #0
 8010e1e:	f7ef fced 	bl	80007fc <__aeabi_ddiv>
 8010e22:	4633      	mov	r3, r6
 8010e24:	462a      	mov	r2, r5
 8010e26:	f7ef fa07 	bl	8000238 <__aeabi_dsub>
 8010e2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010e2e:	4656      	mov	r6, sl
 8010e30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e34:	f7ef fe68 	bl	8000b08 <__aeabi_d2iz>
 8010e38:	4605      	mov	r5, r0
 8010e3a:	f7ef fb4b 	bl	80004d4 <__aeabi_i2d>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	460b      	mov	r3, r1
 8010e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e46:	f7ef f9f7 	bl	8000238 <__aeabi_dsub>
 8010e4a:	3530      	adds	r5, #48	@ 0x30
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	460b      	mov	r3, r1
 8010e50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e54:	f806 5b01 	strb.w	r5, [r6], #1
 8010e58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010e5c:	f7ef fe16 	bl	8000a8c <__aeabi_dcmplt>
 8010e60:	2800      	cmp	r0, #0
 8010e62:	d172      	bne.n	8010f4a <_dtoa_r+0x622>
 8010e64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e68:	4911      	ldr	r1, [pc, #68]	@ (8010eb0 <_dtoa_r+0x588>)
 8010e6a:	2000      	movs	r0, #0
 8010e6c:	f7ef f9e4 	bl	8000238 <__aeabi_dsub>
 8010e70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010e74:	f7ef fe0a 	bl	8000a8c <__aeabi_dcmplt>
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	f040 80b4 	bne.w	8010fe6 <_dtoa_r+0x6be>
 8010e7e:	42a6      	cmp	r6, r4
 8010e80:	f43f af70 	beq.w	8010d64 <_dtoa_r+0x43c>
 8010e84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010e88:	4b0a      	ldr	r3, [pc, #40]	@ (8010eb4 <_dtoa_r+0x58c>)
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f7ef fb8c 	bl	80005a8 <__aeabi_dmul>
 8010e90:	4b08      	ldr	r3, [pc, #32]	@ (8010eb4 <_dtoa_r+0x58c>)
 8010e92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010e96:	2200      	movs	r2, #0
 8010e98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e9c:	f7ef fb84 	bl	80005a8 <__aeabi_dmul>
 8010ea0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ea4:	e7c4      	b.n	8010e30 <_dtoa_r+0x508>
 8010ea6:	bf00      	nop
 8010ea8:	08015950 	.word	0x08015950
 8010eac:	08015928 	.word	0x08015928
 8010eb0:	3ff00000 	.word	0x3ff00000
 8010eb4:	40240000 	.word	0x40240000
 8010eb8:	401c0000 	.word	0x401c0000
 8010ebc:	40140000 	.word	0x40140000
 8010ec0:	3fe00000 	.word	0x3fe00000
 8010ec4:	4631      	mov	r1, r6
 8010ec6:	4628      	mov	r0, r5
 8010ec8:	f7ef fb6e 	bl	80005a8 <__aeabi_dmul>
 8010ecc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010ed0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010ed2:	4656      	mov	r6, sl
 8010ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ed8:	f7ef fe16 	bl	8000b08 <__aeabi_d2iz>
 8010edc:	4605      	mov	r5, r0
 8010ede:	f7ef faf9 	bl	80004d4 <__aeabi_i2d>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010eea:	f7ef f9a5 	bl	8000238 <__aeabi_dsub>
 8010eee:	3530      	adds	r5, #48	@ 0x30
 8010ef0:	f806 5b01 	strb.w	r5, [r6], #1
 8010ef4:	4602      	mov	r2, r0
 8010ef6:	460b      	mov	r3, r1
 8010ef8:	42a6      	cmp	r6, r4
 8010efa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010efe:	f04f 0200 	mov.w	r2, #0
 8010f02:	d124      	bne.n	8010f4e <_dtoa_r+0x626>
 8010f04:	4baf      	ldr	r3, [pc, #700]	@ (80111c4 <_dtoa_r+0x89c>)
 8010f06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010f0a:	f7ef f997 	bl	800023c <__adddf3>
 8010f0e:	4602      	mov	r2, r0
 8010f10:	460b      	mov	r3, r1
 8010f12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f16:	f7ef fdd7 	bl	8000ac8 <__aeabi_dcmpgt>
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d163      	bne.n	8010fe6 <_dtoa_r+0x6be>
 8010f1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010f22:	49a8      	ldr	r1, [pc, #672]	@ (80111c4 <_dtoa_r+0x89c>)
 8010f24:	2000      	movs	r0, #0
 8010f26:	f7ef f987 	bl	8000238 <__aeabi_dsub>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f32:	f7ef fdab 	bl	8000a8c <__aeabi_dcmplt>
 8010f36:	2800      	cmp	r0, #0
 8010f38:	f43f af14 	beq.w	8010d64 <_dtoa_r+0x43c>
 8010f3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010f3e:	1e73      	subs	r3, r6, #1
 8010f40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010f42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f46:	2b30      	cmp	r3, #48	@ 0x30
 8010f48:	d0f8      	beq.n	8010f3c <_dtoa_r+0x614>
 8010f4a:	4647      	mov	r7, r8
 8010f4c:	e03b      	b.n	8010fc6 <_dtoa_r+0x69e>
 8010f4e:	4b9e      	ldr	r3, [pc, #632]	@ (80111c8 <_dtoa_r+0x8a0>)
 8010f50:	f7ef fb2a 	bl	80005a8 <__aeabi_dmul>
 8010f54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010f58:	e7bc      	b.n	8010ed4 <_dtoa_r+0x5ac>
 8010f5a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010f5e:	4656      	mov	r6, sl
 8010f60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f64:	4620      	mov	r0, r4
 8010f66:	4629      	mov	r1, r5
 8010f68:	f7ef fc48 	bl	80007fc <__aeabi_ddiv>
 8010f6c:	f7ef fdcc 	bl	8000b08 <__aeabi_d2iz>
 8010f70:	4680      	mov	r8, r0
 8010f72:	f7ef faaf 	bl	80004d4 <__aeabi_i2d>
 8010f76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f7a:	f7ef fb15 	bl	80005a8 <__aeabi_dmul>
 8010f7e:	4602      	mov	r2, r0
 8010f80:	460b      	mov	r3, r1
 8010f82:	4620      	mov	r0, r4
 8010f84:	4629      	mov	r1, r5
 8010f86:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010f8a:	f7ef f955 	bl	8000238 <__aeabi_dsub>
 8010f8e:	f806 4b01 	strb.w	r4, [r6], #1
 8010f92:	9d03      	ldr	r5, [sp, #12]
 8010f94:	eba6 040a 	sub.w	r4, r6, sl
 8010f98:	42a5      	cmp	r5, r4
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	d133      	bne.n	8011008 <_dtoa_r+0x6e0>
 8010fa0:	f7ef f94c 	bl	800023c <__adddf3>
 8010fa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fa8:	4604      	mov	r4, r0
 8010faa:	460d      	mov	r5, r1
 8010fac:	f7ef fd8c 	bl	8000ac8 <__aeabi_dcmpgt>
 8010fb0:	b9c0      	cbnz	r0, 8010fe4 <_dtoa_r+0x6bc>
 8010fb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	4629      	mov	r1, r5
 8010fba:	f7ef fd5d 	bl	8000a78 <__aeabi_dcmpeq>
 8010fbe:	b110      	cbz	r0, 8010fc6 <_dtoa_r+0x69e>
 8010fc0:	f018 0f01 	tst.w	r8, #1
 8010fc4:	d10e      	bne.n	8010fe4 <_dtoa_r+0x6bc>
 8010fc6:	9902      	ldr	r1, [sp, #8]
 8010fc8:	4648      	mov	r0, r9
 8010fca:	f000 feb9 	bl	8011d40 <_Bfree>
 8010fce:	2300      	movs	r3, #0
 8010fd0:	7033      	strb	r3, [r6, #0]
 8010fd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010fd4:	3701      	adds	r7, #1
 8010fd6:	601f      	str	r7, [r3, #0]
 8010fd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f000 824b 	beq.w	8011476 <_dtoa_r+0xb4e>
 8010fe0:	601e      	str	r6, [r3, #0]
 8010fe2:	e248      	b.n	8011476 <_dtoa_r+0xb4e>
 8010fe4:	46b8      	mov	r8, r7
 8010fe6:	4633      	mov	r3, r6
 8010fe8:	461e      	mov	r6, r3
 8010fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fee:	2a39      	cmp	r2, #57	@ 0x39
 8010ff0:	d106      	bne.n	8011000 <_dtoa_r+0x6d8>
 8010ff2:	459a      	cmp	sl, r3
 8010ff4:	d1f8      	bne.n	8010fe8 <_dtoa_r+0x6c0>
 8010ff6:	2230      	movs	r2, #48	@ 0x30
 8010ff8:	f108 0801 	add.w	r8, r8, #1
 8010ffc:	f88a 2000 	strb.w	r2, [sl]
 8011000:	781a      	ldrb	r2, [r3, #0]
 8011002:	3201      	adds	r2, #1
 8011004:	701a      	strb	r2, [r3, #0]
 8011006:	e7a0      	b.n	8010f4a <_dtoa_r+0x622>
 8011008:	4b6f      	ldr	r3, [pc, #444]	@ (80111c8 <_dtoa_r+0x8a0>)
 801100a:	2200      	movs	r2, #0
 801100c:	f7ef facc 	bl	80005a8 <__aeabi_dmul>
 8011010:	2200      	movs	r2, #0
 8011012:	2300      	movs	r3, #0
 8011014:	4604      	mov	r4, r0
 8011016:	460d      	mov	r5, r1
 8011018:	f7ef fd2e 	bl	8000a78 <__aeabi_dcmpeq>
 801101c:	2800      	cmp	r0, #0
 801101e:	d09f      	beq.n	8010f60 <_dtoa_r+0x638>
 8011020:	e7d1      	b.n	8010fc6 <_dtoa_r+0x69e>
 8011022:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011024:	2a00      	cmp	r2, #0
 8011026:	f000 80ea 	beq.w	80111fe <_dtoa_r+0x8d6>
 801102a:	9a07      	ldr	r2, [sp, #28]
 801102c:	2a01      	cmp	r2, #1
 801102e:	f300 80cd 	bgt.w	80111cc <_dtoa_r+0x8a4>
 8011032:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011034:	2a00      	cmp	r2, #0
 8011036:	f000 80c1 	beq.w	80111bc <_dtoa_r+0x894>
 801103a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801103e:	9c08      	ldr	r4, [sp, #32]
 8011040:	9e00      	ldr	r6, [sp, #0]
 8011042:	9a00      	ldr	r2, [sp, #0]
 8011044:	441a      	add	r2, r3
 8011046:	9200      	str	r2, [sp, #0]
 8011048:	9a06      	ldr	r2, [sp, #24]
 801104a:	2101      	movs	r1, #1
 801104c:	441a      	add	r2, r3
 801104e:	4648      	mov	r0, r9
 8011050:	9206      	str	r2, [sp, #24]
 8011052:	f000 ff29 	bl	8011ea8 <__i2b>
 8011056:	4605      	mov	r5, r0
 8011058:	b166      	cbz	r6, 8011074 <_dtoa_r+0x74c>
 801105a:	9b06      	ldr	r3, [sp, #24]
 801105c:	2b00      	cmp	r3, #0
 801105e:	dd09      	ble.n	8011074 <_dtoa_r+0x74c>
 8011060:	42b3      	cmp	r3, r6
 8011062:	9a00      	ldr	r2, [sp, #0]
 8011064:	bfa8      	it	ge
 8011066:	4633      	movge	r3, r6
 8011068:	1ad2      	subs	r2, r2, r3
 801106a:	9200      	str	r2, [sp, #0]
 801106c:	9a06      	ldr	r2, [sp, #24]
 801106e:	1af6      	subs	r6, r6, r3
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	9306      	str	r3, [sp, #24]
 8011074:	9b08      	ldr	r3, [sp, #32]
 8011076:	b30b      	cbz	r3, 80110bc <_dtoa_r+0x794>
 8011078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801107a:	2b00      	cmp	r3, #0
 801107c:	f000 80c6 	beq.w	801120c <_dtoa_r+0x8e4>
 8011080:	2c00      	cmp	r4, #0
 8011082:	f000 80c0 	beq.w	8011206 <_dtoa_r+0x8de>
 8011086:	4629      	mov	r1, r5
 8011088:	4622      	mov	r2, r4
 801108a:	4648      	mov	r0, r9
 801108c:	f000 ffc4 	bl	8012018 <__pow5mult>
 8011090:	9a02      	ldr	r2, [sp, #8]
 8011092:	4601      	mov	r1, r0
 8011094:	4605      	mov	r5, r0
 8011096:	4648      	mov	r0, r9
 8011098:	f000 ff1c 	bl	8011ed4 <__multiply>
 801109c:	9902      	ldr	r1, [sp, #8]
 801109e:	4680      	mov	r8, r0
 80110a0:	4648      	mov	r0, r9
 80110a2:	f000 fe4d 	bl	8011d40 <_Bfree>
 80110a6:	9b08      	ldr	r3, [sp, #32]
 80110a8:	1b1b      	subs	r3, r3, r4
 80110aa:	9308      	str	r3, [sp, #32]
 80110ac:	f000 80b1 	beq.w	8011212 <_dtoa_r+0x8ea>
 80110b0:	9a08      	ldr	r2, [sp, #32]
 80110b2:	4641      	mov	r1, r8
 80110b4:	4648      	mov	r0, r9
 80110b6:	f000 ffaf 	bl	8012018 <__pow5mult>
 80110ba:	9002      	str	r0, [sp, #8]
 80110bc:	2101      	movs	r1, #1
 80110be:	4648      	mov	r0, r9
 80110c0:	f000 fef2 	bl	8011ea8 <__i2b>
 80110c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80110c6:	4604      	mov	r4, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f000 81d8 	beq.w	801147e <_dtoa_r+0xb56>
 80110ce:	461a      	mov	r2, r3
 80110d0:	4601      	mov	r1, r0
 80110d2:	4648      	mov	r0, r9
 80110d4:	f000 ffa0 	bl	8012018 <__pow5mult>
 80110d8:	9b07      	ldr	r3, [sp, #28]
 80110da:	2b01      	cmp	r3, #1
 80110dc:	4604      	mov	r4, r0
 80110de:	f300 809f 	bgt.w	8011220 <_dtoa_r+0x8f8>
 80110e2:	9b04      	ldr	r3, [sp, #16]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f040 8097 	bne.w	8011218 <_dtoa_r+0x8f0>
 80110ea:	9b05      	ldr	r3, [sp, #20]
 80110ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	f040 8093 	bne.w	801121c <_dtoa_r+0x8f4>
 80110f6:	9b05      	ldr	r3, [sp, #20]
 80110f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80110fc:	0d1b      	lsrs	r3, r3, #20
 80110fe:	051b      	lsls	r3, r3, #20
 8011100:	b133      	cbz	r3, 8011110 <_dtoa_r+0x7e8>
 8011102:	9b00      	ldr	r3, [sp, #0]
 8011104:	3301      	adds	r3, #1
 8011106:	9300      	str	r3, [sp, #0]
 8011108:	9b06      	ldr	r3, [sp, #24]
 801110a:	3301      	adds	r3, #1
 801110c:	9306      	str	r3, [sp, #24]
 801110e:	2301      	movs	r3, #1
 8011110:	9308      	str	r3, [sp, #32]
 8011112:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011114:	2b00      	cmp	r3, #0
 8011116:	f000 81b8 	beq.w	801148a <_dtoa_r+0xb62>
 801111a:	6923      	ldr	r3, [r4, #16]
 801111c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011120:	6918      	ldr	r0, [r3, #16]
 8011122:	f000 fe75 	bl	8011e10 <__hi0bits>
 8011126:	f1c0 0020 	rsb	r0, r0, #32
 801112a:	9b06      	ldr	r3, [sp, #24]
 801112c:	4418      	add	r0, r3
 801112e:	f010 001f 	ands.w	r0, r0, #31
 8011132:	f000 8082 	beq.w	801123a <_dtoa_r+0x912>
 8011136:	f1c0 0320 	rsb	r3, r0, #32
 801113a:	2b04      	cmp	r3, #4
 801113c:	dd73      	ble.n	8011226 <_dtoa_r+0x8fe>
 801113e:	9b00      	ldr	r3, [sp, #0]
 8011140:	f1c0 001c 	rsb	r0, r0, #28
 8011144:	4403      	add	r3, r0
 8011146:	9300      	str	r3, [sp, #0]
 8011148:	9b06      	ldr	r3, [sp, #24]
 801114a:	4403      	add	r3, r0
 801114c:	4406      	add	r6, r0
 801114e:	9306      	str	r3, [sp, #24]
 8011150:	9b00      	ldr	r3, [sp, #0]
 8011152:	2b00      	cmp	r3, #0
 8011154:	dd05      	ble.n	8011162 <_dtoa_r+0x83a>
 8011156:	9902      	ldr	r1, [sp, #8]
 8011158:	461a      	mov	r2, r3
 801115a:	4648      	mov	r0, r9
 801115c:	f000 ffb6 	bl	80120cc <__lshift>
 8011160:	9002      	str	r0, [sp, #8]
 8011162:	9b06      	ldr	r3, [sp, #24]
 8011164:	2b00      	cmp	r3, #0
 8011166:	dd05      	ble.n	8011174 <_dtoa_r+0x84c>
 8011168:	4621      	mov	r1, r4
 801116a:	461a      	mov	r2, r3
 801116c:	4648      	mov	r0, r9
 801116e:	f000 ffad 	bl	80120cc <__lshift>
 8011172:	4604      	mov	r4, r0
 8011174:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011176:	2b00      	cmp	r3, #0
 8011178:	d061      	beq.n	801123e <_dtoa_r+0x916>
 801117a:	9802      	ldr	r0, [sp, #8]
 801117c:	4621      	mov	r1, r4
 801117e:	f001 f811 	bl	80121a4 <__mcmp>
 8011182:	2800      	cmp	r0, #0
 8011184:	da5b      	bge.n	801123e <_dtoa_r+0x916>
 8011186:	2300      	movs	r3, #0
 8011188:	9902      	ldr	r1, [sp, #8]
 801118a:	220a      	movs	r2, #10
 801118c:	4648      	mov	r0, r9
 801118e:	f000 fdf9 	bl	8011d84 <__multadd>
 8011192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011194:	9002      	str	r0, [sp, #8]
 8011196:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 801119a:	2b00      	cmp	r3, #0
 801119c:	f000 8177 	beq.w	801148e <_dtoa_r+0xb66>
 80111a0:	4629      	mov	r1, r5
 80111a2:	2300      	movs	r3, #0
 80111a4:	220a      	movs	r2, #10
 80111a6:	4648      	mov	r0, r9
 80111a8:	f000 fdec 	bl	8011d84 <__multadd>
 80111ac:	f1bb 0f00 	cmp.w	fp, #0
 80111b0:	4605      	mov	r5, r0
 80111b2:	dc6f      	bgt.n	8011294 <_dtoa_r+0x96c>
 80111b4:	9b07      	ldr	r3, [sp, #28]
 80111b6:	2b02      	cmp	r3, #2
 80111b8:	dc49      	bgt.n	801124e <_dtoa_r+0x926>
 80111ba:	e06b      	b.n	8011294 <_dtoa_r+0x96c>
 80111bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80111be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80111c2:	e73c      	b.n	801103e <_dtoa_r+0x716>
 80111c4:	3fe00000 	.word	0x3fe00000
 80111c8:	40240000 	.word	0x40240000
 80111cc:	9b03      	ldr	r3, [sp, #12]
 80111ce:	1e5c      	subs	r4, r3, #1
 80111d0:	9b08      	ldr	r3, [sp, #32]
 80111d2:	42a3      	cmp	r3, r4
 80111d4:	db09      	blt.n	80111ea <_dtoa_r+0x8c2>
 80111d6:	1b1c      	subs	r4, r3, r4
 80111d8:	9b03      	ldr	r3, [sp, #12]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f6bf af30 	bge.w	8011040 <_dtoa_r+0x718>
 80111e0:	9b00      	ldr	r3, [sp, #0]
 80111e2:	9a03      	ldr	r2, [sp, #12]
 80111e4:	1a9e      	subs	r6, r3, r2
 80111e6:	2300      	movs	r3, #0
 80111e8:	e72b      	b.n	8011042 <_dtoa_r+0x71a>
 80111ea:	9b08      	ldr	r3, [sp, #32]
 80111ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80111ee:	9408      	str	r4, [sp, #32]
 80111f0:	1ae3      	subs	r3, r4, r3
 80111f2:	441a      	add	r2, r3
 80111f4:	9e00      	ldr	r6, [sp, #0]
 80111f6:	9b03      	ldr	r3, [sp, #12]
 80111f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80111fa:	2400      	movs	r4, #0
 80111fc:	e721      	b.n	8011042 <_dtoa_r+0x71a>
 80111fe:	9c08      	ldr	r4, [sp, #32]
 8011200:	9e00      	ldr	r6, [sp, #0]
 8011202:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011204:	e728      	b.n	8011058 <_dtoa_r+0x730>
 8011206:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801120a:	e751      	b.n	80110b0 <_dtoa_r+0x788>
 801120c:	9a08      	ldr	r2, [sp, #32]
 801120e:	9902      	ldr	r1, [sp, #8]
 8011210:	e750      	b.n	80110b4 <_dtoa_r+0x78c>
 8011212:	f8cd 8008 	str.w	r8, [sp, #8]
 8011216:	e751      	b.n	80110bc <_dtoa_r+0x794>
 8011218:	2300      	movs	r3, #0
 801121a:	e779      	b.n	8011110 <_dtoa_r+0x7e8>
 801121c:	9b04      	ldr	r3, [sp, #16]
 801121e:	e777      	b.n	8011110 <_dtoa_r+0x7e8>
 8011220:	2300      	movs	r3, #0
 8011222:	9308      	str	r3, [sp, #32]
 8011224:	e779      	b.n	801111a <_dtoa_r+0x7f2>
 8011226:	d093      	beq.n	8011150 <_dtoa_r+0x828>
 8011228:	9a00      	ldr	r2, [sp, #0]
 801122a:	331c      	adds	r3, #28
 801122c:	441a      	add	r2, r3
 801122e:	9200      	str	r2, [sp, #0]
 8011230:	9a06      	ldr	r2, [sp, #24]
 8011232:	441a      	add	r2, r3
 8011234:	441e      	add	r6, r3
 8011236:	9206      	str	r2, [sp, #24]
 8011238:	e78a      	b.n	8011150 <_dtoa_r+0x828>
 801123a:	4603      	mov	r3, r0
 801123c:	e7f4      	b.n	8011228 <_dtoa_r+0x900>
 801123e:	9b03      	ldr	r3, [sp, #12]
 8011240:	2b00      	cmp	r3, #0
 8011242:	46b8      	mov	r8, r7
 8011244:	dc20      	bgt.n	8011288 <_dtoa_r+0x960>
 8011246:	469b      	mov	fp, r3
 8011248:	9b07      	ldr	r3, [sp, #28]
 801124a:	2b02      	cmp	r3, #2
 801124c:	dd1e      	ble.n	801128c <_dtoa_r+0x964>
 801124e:	f1bb 0f00 	cmp.w	fp, #0
 8011252:	f47f adb1 	bne.w	8010db8 <_dtoa_r+0x490>
 8011256:	4621      	mov	r1, r4
 8011258:	465b      	mov	r3, fp
 801125a:	2205      	movs	r2, #5
 801125c:	4648      	mov	r0, r9
 801125e:	f000 fd91 	bl	8011d84 <__multadd>
 8011262:	4601      	mov	r1, r0
 8011264:	4604      	mov	r4, r0
 8011266:	9802      	ldr	r0, [sp, #8]
 8011268:	f000 ff9c 	bl	80121a4 <__mcmp>
 801126c:	2800      	cmp	r0, #0
 801126e:	f77f ada3 	ble.w	8010db8 <_dtoa_r+0x490>
 8011272:	4656      	mov	r6, sl
 8011274:	2331      	movs	r3, #49	@ 0x31
 8011276:	f806 3b01 	strb.w	r3, [r6], #1
 801127a:	f108 0801 	add.w	r8, r8, #1
 801127e:	e59f      	b.n	8010dc0 <_dtoa_r+0x498>
 8011280:	9c03      	ldr	r4, [sp, #12]
 8011282:	46b8      	mov	r8, r7
 8011284:	4625      	mov	r5, r4
 8011286:	e7f4      	b.n	8011272 <_dtoa_r+0x94a>
 8011288:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801128c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801128e:	2b00      	cmp	r3, #0
 8011290:	f000 8101 	beq.w	8011496 <_dtoa_r+0xb6e>
 8011294:	2e00      	cmp	r6, #0
 8011296:	dd05      	ble.n	80112a4 <_dtoa_r+0x97c>
 8011298:	4629      	mov	r1, r5
 801129a:	4632      	mov	r2, r6
 801129c:	4648      	mov	r0, r9
 801129e:	f000 ff15 	bl	80120cc <__lshift>
 80112a2:	4605      	mov	r5, r0
 80112a4:	9b08      	ldr	r3, [sp, #32]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d05c      	beq.n	8011364 <_dtoa_r+0xa3c>
 80112aa:	6869      	ldr	r1, [r5, #4]
 80112ac:	4648      	mov	r0, r9
 80112ae:	f000 fd07 	bl	8011cc0 <_Balloc>
 80112b2:	4606      	mov	r6, r0
 80112b4:	b928      	cbnz	r0, 80112c2 <_dtoa_r+0x99a>
 80112b6:	4b82      	ldr	r3, [pc, #520]	@ (80114c0 <_dtoa_r+0xb98>)
 80112b8:	4602      	mov	r2, r0
 80112ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80112be:	f7ff bb4a 	b.w	8010956 <_dtoa_r+0x2e>
 80112c2:	692a      	ldr	r2, [r5, #16]
 80112c4:	3202      	adds	r2, #2
 80112c6:	0092      	lsls	r2, r2, #2
 80112c8:	f105 010c 	add.w	r1, r5, #12
 80112cc:	300c      	adds	r0, #12
 80112ce:	f001 fa9f 	bl	8012810 <memcpy>
 80112d2:	2201      	movs	r2, #1
 80112d4:	4631      	mov	r1, r6
 80112d6:	4648      	mov	r0, r9
 80112d8:	f000 fef8 	bl	80120cc <__lshift>
 80112dc:	f10a 0301 	add.w	r3, sl, #1
 80112e0:	9300      	str	r3, [sp, #0]
 80112e2:	eb0a 030b 	add.w	r3, sl, fp
 80112e6:	9308      	str	r3, [sp, #32]
 80112e8:	9b04      	ldr	r3, [sp, #16]
 80112ea:	f003 0301 	and.w	r3, r3, #1
 80112ee:	462f      	mov	r7, r5
 80112f0:	9306      	str	r3, [sp, #24]
 80112f2:	4605      	mov	r5, r0
 80112f4:	9b00      	ldr	r3, [sp, #0]
 80112f6:	9802      	ldr	r0, [sp, #8]
 80112f8:	4621      	mov	r1, r4
 80112fa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80112fe:	f7ff fa8b 	bl	8010818 <quorem>
 8011302:	4603      	mov	r3, r0
 8011304:	3330      	adds	r3, #48	@ 0x30
 8011306:	9003      	str	r0, [sp, #12]
 8011308:	4639      	mov	r1, r7
 801130a:	9802      	ldr	r0, [sp, #8]
 801130c:	9309      	str	r3, [sp, #36]	@ 0x24
 801130e:	f000 ff49 	bl	80121a4 <__mcmp>
 8011312:	462a      	mov	r2, r5
 8011314:	9004      	str	r0, [sp, #16]
 8011316:	4621      	mov	r1, r4
 8011318:	4648      	mov	r0, r9
 801131a:	f000 ff5f 	bl	80121dc <__mdiff>
 801131e:	68c2      	ldr	r2, [r0, #12]
 8011320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011322:	4606      	mov	r6, r0
 8011324:	bb02      	cbnz	r2, 8011368 <_dtoa_r+0xa40>
 8011326:	4601      	mov	r1, r0
 8011328:	9802      	ldr	r0, [sp, #8]
 801132a:	f000 ff3b 	bl	80121a4 <__mcmp>
 801132e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011330:	4602      	mov	r2, r0
 8011332:	4631      	mov	r1, r6
 8011334:	4648      	mov	r0, r9
 8011336:	920c      	str	r2, [sp, #48]	@ 0x30
 8011338:	9309      	str	r3, [sp, #36]	@ 0x24
 801133a:	f000 fd01 	bl	8011d40 <_Bfree>
 801133e:	9b07      	ldr	r3, [sp, #28]
 8011340:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011342:	9e00      	ldr	r6, [sp, #0]
 8011344:	ea42 0103 	orr.w	r1, r2, r3
 8011348:	9b06      	ldr	r3, [sp, #24]
 801134a:	4319      	orrs	r1, r3
 801134c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801134e:	d10d      	bne.n	801136c <_dtoa_r+0xa44>
 8011350:	2b39      	cmp	r3, #57	@ 0x39
 8011352:	d027      	beq.n	80113a4 <_dtoa_r+0xa7c>
 8011354:	9a04      	ldr	r2, [sp, #16]
 8011356:	2a00      	cmp	r2, #0
 8011358:	dd01      	ble.n	801135e <_dtoa_r+0xa36>
 801135a:	9b03      	ldr	r3, [sp, #12]
 801135c:	3331      	adds	r3, #49	@ 0x31
 801135e:	f88b 3000 	strb.w	r3, [fp]
 8011362:	e52e      	b.n	8010dc2 <_dtoa_r+0x49a>
 8011364:	4628      	mov	r0, r5
 8011366:	e7b9      	b.n	80112dc <_dtoa_r+0x9b4>
 8011368:	2201      	movs	r2, #1
 801136a:	e7e2      	b.n	8011332 <_dtoa_r+0xa0a>
 801136c:	9904      	ldr	r1, [sp, #16]
 801136e:	2900      	cmp	r1, #0
 8011370:	db04      	blt.n	801137c <_dtoa_r+0xa54>
 8011372:	9807      	ldr	r0, [sp, #28]
 8011374:	4301      	orrs	r1, r0
 8011376:	9806      	ldr	r0, [sp, #24]
 8011378:	4301      	orrs	r1, r0
 801137a:	d120      	bne.n	80113be <_dtoa_r+0xa96>
 801137c:	2a00      	cmp	r2, #0
 801137e:	ddee      	ble.n	801135e <_dtoa_r+0xa36>
 8011380:	9902      	ldr	r1, [sp, #8]
 8011382:	9300      	str	r3, [sp, #0]
 8011384:	2201      	movs	r2, #1
 8011386:	4648      	mov	r0, r9
 8011388:	f000 fea0 	bl	80120cc <__lshift>
 801138c:	4621      	mov	r1, r4
 801138e:	9002      	str	r0, [sp, #8]
 8011390:	f000 ff08 	bl	80121a4 <__mcmp>
 8011394:	2800      	cmp	r0, #0
 8011396:	9b00      	ldr	r3, [sp, #0]
 8011398:	dc02      	bgt.n	80113a0 <_dtoa_r+0xa78>
 801139a:	d1e0      	bne.n	801135e <_dtoa_r+0xa36>
 801139c:	07da      	lsls	r2, r3, #31
 801139e:	d5de      	bpl.n	801135e <_dtoa_r+0xa36>
 80113a0:	2b39      	cmp	r3, #57	@ 0x39
 80113a2:	d1da      	bne.n	801135a <_dtoa_r+0xa32>
 80113a4:	2339      	movs	r3, #57	@ 0x39
 80113a6:	f88b 3000 	strb.w	r3, [fp]
 80113aa:	4633      	mov	r3, r6
 80113ac:	461e      	mov	r6, r3
 80113ae:	3b01      	subs	r3, #1
 80113b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80113b4:	2a39      	cmp	r2, #57	@ 0x39
 80113b6:	d04e      	beq.n	8011456 <_dtoa_r+0xb2e>
 80113b8:	3201      	adds	r2, #1
 80113ba:	701a      	strb	r2, [r3, #0]
 80113bc:	e501      	b.n	8010dc2 <_dtoa_r+0x49a>
 80113be:	2a00      	cmp	r2, #0
 80113c0:	dd03      	ble.n	80113ca <_dtoa_r+0xaa2>
 80113c2:	2b39      	cmp	r3, #57	@ 0x39
 80113c4:	d0ee      	beq.n	80113a4 <_dtoa_r+0xa7c>
 80113c6:	3301      	adds	r3, #1
 80113c8:	e7c9      	b.n	801135e <_dtoa_r+0xa36>
 80113ca:	9a00      	ldr	r2, [sp, #0]
 80113cc:	9908      	ldr	r1, [sp, #32]
 80113ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80113d2:	428a      	cmp	r2, r1
 80113d4:	d028      	beq.n	8011428 <_dtoa_r+0xb00>
 80113d6:	9902      	ldr	r1, [sp, #8]
 80113d8:	2300      	movs	r3, #0
 80113da:	220a      	movs	r2, #10
 80113dc:	4648      	mov	r0, r9
 80113de:	f000 fcd1 	bl	8011d84 <__multadd>
 80113e2:	42af      	cmp	r7, r5
 80113e4:	9002      	str	r0, [sp, #8]
 80113e6:	f04f 0300 	mov.w	r3, #0
 80113ea:	f04f 020a 	mov.w	r2, #10
 80113ee:	4639      	mov	r1, r7
 80113f0:	4648      	mov	r0, r9
 80113f2:	d107      	bne.n	8011404 <_dtoa_r+0xadc>
 80113f4:	f000 fcc6 	bl	8011d84 <__multadd>
 80113f8:	4607      	mov	r7, r0
 80113fa:	4605      	mov	r5, r0
 80113fc:	9b00      	ldr	r3, [sp, #0]
 80113fe:	3301      	adds	r3, #1
 8011400:	9300      	str	r3, [sp, #0]
 8011402:	e777      	b.n	80112f4 <_dtoa_r+0x9cc>
 8011404:	f000 fcbe 	bl	8011d84 <__multadd>
 8011408:	4629      	mov	r1, r5
 801140a:	4607      	mov	r7, r0
 801140c:	2300      	movs	r3, #0
 801140e:	220a      	movs	r2, #10
 8011410:	4648      	mov	r0, r9
 8011412:	f000 fcb7 	bl	8011d84 <__multadd>
 8011416:	4605      	mov	r5, r0
 8011418:	e7f0      	b.n	80113fc <_dtoa_r+0xad4>
 801141a:	f1bb 0f00 	cmp.w	fp, #0
 801141e:	bfcc      	ite	gt
 8011420:	465e      	movgt	r6, fp
 8011422:	2601      	movle	r6, #1
 8011424:	4456      	add	r6, sl
 8011426:	2700      	movs	r7, #0
 8011428:	9902      	ldr	r1, [sp, #8]
 801142a:	9300      	str	r3, [sp, #0]
 801142c:	2201      	movs	r2, #1
 801142e:	4648      	mov	r0, r9
 8011430:	f000 fe4c 	bl	80120cc <__lshift>
 8011434:	4621      	mov	r1, r4
 8011436:	9002      	str	r0, [sp, #8]
 8011438:	f000 feb4 	bl	80121a4 <__mcmp>
 801143c:	2800      	cmp	r0, #0
 801143e:	dcb4      	bgt.n	80113aa <_dtoa_r+0xa82>
 8011440:	d102      	bne.n	8011448 <_dtoa_r+0xb20>
 8011442:	9b00      	ldr	r3, [sp, #0]
 8011444:	07db      	lsls	r3, r3, #31
 8011446:	d4b0      	bmi.n	80113aa <_dtoa_r+0xa82>
 8011448:	4633      	mov	r3, r6
 801144a:	461e      	mov	r6, r3
 801144c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011450:	2a30      	cmp	r2, #48	@ 0x30
 8011452:	d0fa      	beq.n	801144a <_dtoa_r+0xb22>
 8011454:	e4b5      	b.n	8010dc2 <_dtoa_r+0x49a>
 8011456:	459a      	cmp	sl, r3
 8011458:	d1a8      	bne.n	80113ac <_dtoa_r+0xa84>
 801145a:	2331      	movs	r3, #49	@ 0x31
 801145c:	f108 0801 	add.w	r8, r8, #1
 8011460:	f88a 3000 	strb.w	r3, [sl]
 8011464:	e4ad      	b.n	8010dc2 <_dtoa_r+0x49a>
 8011466:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011468:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80114c4 <_dtoa_r+0xb9c>
 801146c:	b11b      	cbz	r3, 8011476 <_dtoa_r+0xb4e>
 801146e:	f10a 0308 	add.w	r3, sl, #8
 8011472:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011474:	6013      	str	r3, [r2, #0]
 8011476:	4650      	mov	r0, sl
 8011478:	b017      	add	sp, #92	@ 0x5c
 801147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147e:	9b07      	ldr	r3, [sp, #28]
 8011480:	2b01      	cmp	r3, #1
 8011482:	f77f ae2e 	ble.w	80110e2 <_dtoa_r+0x7ba>
 8011486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011488:	9308      	str	r3, [sp, #32]
 801148a:	2001      	movs	r0, #1
 801148c:	e64d      	b.n	801112a <_dtoa_r+0x802>
 801148e:	f1bb 0f00 	cmp.w	fp, #0
 8011492:	f77f aed9 	ble.w	8011248 <_dtoa_r+0x920>
 8011496:	4656      	mov	r6, sl
 8011498:	9802      	ldr	r0, [sp, #8]
 801149a:	4621      	mov	r1, r4
 801149c:	f7ff f9bc 	bl	8010818 <quorem>
 80114a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80114a4:	f806 3b01 	strb.w	r3, [r6], #1
 80114a8:	eba6 020a 	sub.w	r2, r6, sl
 80114ac:	4593      	cmp	fp, r2
 80114ae:	ddb4      	ble.n	801141a <_dtoa_r+0xaf2>
 80114b0:	9902      	ldr	r1, [sp, #8]
 80114b2:	2300      	movs	r3, #0
 80114b4:	220a      	movs	r2, #10
 80114b6:	4648      	mov	r0, r9
 80114b8:	f000 fc64 	bl	8011d84 <__multadd>
 80114bc:	9002      	str	r0, [sp, #8]
 80114be:	e7eb      	b.n	8011498 <_dtoa_r+0xb70>
 80114c0:	08015858 	.word	0x08015858
 80114c4:	080157dc 	.word	0x080157dc

080114c8 <__ssputs_r>:
 80114c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114cc:	688e      	ldr	r6, [r1, #8]
 80114ce:	461f      	mov	r7, r3
 80114d0:	42be      	cmp	r6, r7
 80114d2:	680b      	ldr	r3, [r1, #0]
 80114d4:	4682      	mov	sl, r0
 80114d6:	460c      	mov	r4, r1
 80114d8:	4690      	mov	r8, r2
 80114da:	d82d      	bhi.n	8011538 <__ssputs_r+0x70>
 80114dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80114e4:	d026      	beq.n	8011534 <__ssputs_r+0x6c>
 80114e6:	6965      	ldr	r5, [r4, #20]
 80114e8:	6909      	ldr	r1, [r1, #16]
 80114ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80114ee:	eba3 0901 	sub.w	r9, r3, r1
 80114f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80114f6:	1c7b      	adds	r3, r7, #1
 80114f8:	444b      	add	r3, r9
 80114fa:	106d      	asrs	r5, r5, #1
 80114fc:	429d      	cmp	r5, r3
 80114fe:	bf38      	it	cc
 8011500:	461d      	movcc	r5, r3
 8011502:	0553      	lsls	r3, r2, #21
 8011504:	d527      	bpl.n	8011556 <__ssputs_r+0x8e>
 8011506:	4629      	mov	r1, r5
 8011508:	f000 faa2 	bl	8011a50 <_malloc_r>
 801150c:	4606      	mov	r6, r0
 801150e:	b360      	cbz	r0, 801156a <__ssputs_r+0xa2>
 8011510:	6921      	ldr	r1, [r4, #16]
 8011512:	464a      	mov	r2, r9
 8011514:	f001 f97c 	bl	8012810 <memcpy>
 8011518:	89a3      	ldrh	r3, [r4, #12]
 801151a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801151e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011522:	81a3      	strh	r3, [r4, #12]
 8011524:	6126      	str	r6, [r4, #16]
 8011526:	6165      	str	r5, [r4, #20]
 8011528:	444e      	add	r6, r9
 801152a:	eba5 0509 	sub.w	r5, r5, r9
 801152e:	6026      	str	r6, [r4, #0]
 8011530:	60a5      	str	r5, [r4, #8]
 8011532:	463e      	mov	r6, r7
 8011534:	42be      	cmp	r6, r7
 8011536:	d900      	bls.n	801153a <__ssputs_r+0x72>
 8011538:	463e      	mov	r6, r7
 801153a:	6820      	ldr	r0, [r4, #0]
 801153c:	4632      	mov	r2, r6
 801153e:	4641      	mov	r1, r8
 8011540:	f001 f8d4 	bl	80126ec <memmove>
 8011544:	68a3      	ldr	r3, [r4, #8]
 8011546:	1b9b      	subs	r3, r3, r6
 8011548:	60a3      	str	r3, [r4, #8]
 801154a:	6823      	ldr	r3, [r4, #0]
 801154c:	4433      	add	r3, r6
 801154e:	6023      	str	r3, [r4, #0]
 8011550:	2000      	movs	r0, #0
 8011552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011556:	462a      	mov	r2, r5
 8011558:	f000 ff6f 	bl	801243a <_realloc_r>
 801155c:	4606      	mov	r6, r0
 801155e:	2800      	cmp	r0, #0
 8011560:	d1e0      	bne.n	8011524 <__ssputs_r+0x5c>
 8011562:	6921      	ldr	r1, [r4, #16]
 8011564:	4650      	mov	r0, sl
 8011566:	f001 f993 	bl	8012890 <_free_r>
 801156a:	230c      	movs	r3, #12
 801156c:	f8ca 3000 	str.w	r3, [sl]
 8011570:	89a3      	ldrh	r3, [r4, #12]
 8011572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011576:	81a3      	strh	r3, [r4, #12]
 8011578:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801157c:	e7e9      	b.n	8011552 <__ssputs_r+0x8a>
	...

08011580 <_svfiprintf_r>:
 8011580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011584:	4698      	mov	r8, r3
 8011586:	898b      	ldrh	r3, [r1, #12]
 8011588:	061b      	lsls	r3, r3, #24
 801158a:	b09d      	sub	sp, #116	@ 0x74
 801158c:	4607      	mov	r7, r0
 801158e:	460d      	mov	r5, r1
 8011590:	4614      	mov	r4, r2
 8011592:	d510      	bpl.n	80115b6 <_svfiprintf_r+0x36>
 8011594:	690b      	ldr	r3, [r1, #16]
 8011596:	b973      	cbnz	r3, 80115b6 <_svfiprintf_r+0x36>
 8011598:	2140      	movs	r1, #64	@ 0x40
 801159a:	f000 fa59 	bl	8011a50 <_malloc_r>
 801159e:	6028      	str	r0, [r5, #0]
 80115a0:	6128      	str	r0, [r5, #16]
 80115a2:	b930      	cbnz	r0, 80115b2 <_svfiprintf_r+0x32>
 80115a4:	230c      	movs	r3, #12
 80115a6:	603b      	str	r3, [r7, #0]
 80115a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80115ac:	b01d      	add	sp, #116	@ 0x74
 80115ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b2:	2340      	movs	r3, #64	@ 0x40
 80115b4:	616b      	str	r3, [r5, #20]
 80115b6:	2300      	movs	r3, #0
 80115b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80115ba:	2320      	movs	r3, #32
 80115bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80115c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80115c4:	2330      	movs	r3, #48	@ 0x30
 80115c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011764 <_svfiprintf_r+0x1e4>
 80115ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80115ce:	f04f 0901 	mov.w	r9, #1
 80115d2:	4623      	mov	r3, r4
 80115d4:	469a      	mov	sl, r3
 80115d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115da:	b10a      	cbz	r2, 80115e0 <_svfiprintf_r+0x60>
 80115dc:	2a25      	cmp	r2, #37	@ 0x25
 80115de:	d1f9      	bne.n	80115d4 <_svfiprintf_r+0x54>
 80115e0:	ebba 0b04 	subs.w	fp, sl, r4
 80115e4:	d00b      	beq.n	80115fe <_svfiprintf_r+0x7e>
 80115e6:	465b      	mov	r3, fp
 80115e8:	4622      	mov	r2, r4
 80115ea:	4629      	mov	r1, r5
 80115ec:	4638      	mov	r0, r7
 80115ee:	f7ff ff6b 	bl	80114c8 <__ssputs_r>
 80115f2:	3001      	adds	r0, #1
 80115f4:	f000 80a7 	beq.w	8011746 <_svfiprintf_r+0x1c6>
 80115f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115fa:	445a      	add	r2, fp
 80115fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80115fe:	f89a 3000 	ldrb.w	r3, [sl]
 8011602:	2b00      	cmp	r3, #0
 8011604:	f000 809f 	beq.w	8011746 <_svfiprintf_r+0x1c6>
 8011608:	2300      	movs	r3, #0
 801160a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801160e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011612:	f10a 0a01 	add.w	sl, sl, #1
 8011616:	9304      	str	r3, [sp, #16]
 8011618:	9307      	str	r3, [sp, #28]
 801161a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801161e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011620:	4654      	mov	r4, sl
 8011622:	2205      	movs	r2, #5
 8011624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011628:	484e      	ldr	r0, [pc, #312]	@ (8011764 <_svfiprintf_r+0x1e4>)
 801162a:	f7ee fda9 	bl	8000180 <memchr>
 801162e:	9a04      	ldr	r2, [sp, #16]
 8011630:	b9d8      	cbnz	r0, 801166a <_svfiprintf_r+0xea>
 8011632:	06d0      	lsls	r0, r2, #27
 8011634:	bf44      	itt	mi
 8011636:	2320      	movmi	r3, #32
 8011638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801163c:	0711      	lsls	r1, r2, #28
 801163e:	bf44      	itt	mi
 8011640:	232b      	movmi	r3, #43	@ 0x2b
 8011642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011646:	f89a 3000 	ldrb.w	r3, [sl]
 801164a:	2b2a      	cmp	r3, #42	@ 0x2a
 801164c:	d015      	beq.n	801167a <_svfiprintf_r+0xfa>
 801164e:	9a07      	ldr	r2, [sp, #28]
 8011650:	4654      	mov	r4, sl
 8011652:	2000      	movs	r0, #0
 8011654:	f04f 0c0a 	mov.w	ip, #10
 8011658:	4621      	mov	r1, r4
 801165a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801165e:	3b30      	subs	r3, #48	@ 0x30
 8011660:	2b09      	cmp	r3, #9
 8011662:	d94b      	bls.n	80116fc <_svfiprintf_r+0x17c>
 8011664:	b1b0      	cbz	r0, 8011694 <_svfiprintf_r+0x114>
 8011666:	9207      	str	r2, [sp, #28]
 8011668:	e014      	b.n	8011694 <_svfiprintf_r+0x114>
 801166a:	eba0 0308 	sub.w	r3, r0, r8
 801166e:	fa09 f303 	lsl.w	r3, r9, r3
 8011672:	4313      	orrs	r3, r2
 8011674:	9304      	str	r3, [sp, #16]
 8011676:	46a2      	mov	sl, r4
 8011678:	e7d2      	b.n	8011620 <_svfiprintf_r+0xa0>
 801167a:	9b03      	ldr	r3, [sp, #12]
 801167c:	1d19      	adds	r1, r3, #4
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	9103      	str	r1, [sp, #12]
 8011682:	2b00      	cmp	r3, #0
 8011684:	bfbb      	ittet	lt
 8011686:	425b      	neglt	r3, r3
 8011688:	f042 0202 	orrlt.w	r2, r2, #2
 801168c:	9307      	strge	r3, [sp, #28]
 801168e:	9307      	strlt	r3, [sp, #28]
 8011690:	bfb8      	it	lt
 8011692:	9204      	strlt	r2, [sp, #16]
 8011694:	7823      	ldrb	r3, [r4, #0]
 8011696:	2b2e      	cmp	r3, #46	@ 0x2e
 8011698:	d10a      	bne.n	80116b0 <_svfiprintf_r+0x130>
 801169a:	7863      	ldrb	r3, [r4, #1]
 801169c:	2b2a      	cmp	r3, #42	@ 0x2a
 801169e:	d132      	bne.n	8011706 <_svfiprintf_r+0x186>
 80116a0:	9b03      	ldr	r3, [sp, #12]
 80116a2:	1d1a      	adds	r2, r3, #4
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	9203      	str	r2, [sp, #12]
 80116a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80116ac:	3402      	adds	r4, #2
 80116ae:	9305      	str	r3, [sp, #20]
 80116b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011774 <_svfiprintf_r+0x1f4>
 80116b4:	7821      	ldrb	r1, [r4, #0]
 80116b6:	2203      	movs	r2, #3
 80116b8:	4650      	mov	r0, sl
 80116ba:	f7ee fd61 	bl	8000180 <memchr>
 80116be:	b138      	cbz	r0, 80116d0 <_svfiprintf_r+0x150>
 80116c0:	9b04      	ldr	r3, [sp, #16]
 80116c2:	eba0 000a 	sub.w	r0, r0, sl
 80116c6:	2240      	movs	r2, #64	@ 0x40
 80116c8:	4082      	lsls	r2, r0
 80116ca:	4313      	orrs	r3, r2
 80116cc:	3401      	adds	r4, #1
 80116ce:	9304      	str	r3, [sp, #16]
 80116d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116d4:	4824      	ldr	r0, [pc, #144]	@ (8011768 <_svfiprintf_r+0x1e8>)
 80116d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80116da:	2206      	movs	r2, #6
 80116dc:	f7ee fd50 	bl	8000180 <memchr>
 80116e0:	2800      	cmp	r0, #0
 80116e2:	d036      	beq.n	8011752 <_svfiprintf_r+0x1d2>
 80116e4:	4b21      	ldr	r3, [pc, #132]	@ (801176c <_svfiprintf_r+0x1ec>)
 80116e6:	bb1b      	cbnz	r3, 8011730 <_svfiprintf_r+0x1b0>
 80116e8:	9b03      	ldr	r3, [sp, #12]
 80116ea:	3307      	adds	r3, #7
 80116ec:	f023 0307 	bic.w	r3, r3, #7
 80116f0:	3308      	adds	r3, #8
 80116f2:	9303      	str	r3, [sp, #12]
 80116f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116f6:	4433      	add	r3, r6
 80116f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80116fa:	e76a      	b.n	80115d2 <_svfiprintf_r+0x52>
 80116fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011700:	460c      	mov	r4, r1
 8011702:	2001      	movs	r0, #1
 8011704:	e7a8      	b.n	8011658 <_svfiprintf_r+0xd8>
 8011706:	2300      	movs	r3, #0
 8011708:	3401      	adds	r4, #1
 801170a:	9305      	str	r3, [sp, #20]
 801170c:	4619      	mov	r1, r3
 801170e:	f04f 0c0a 	mov.w	ip, #10
 8011712:	4620      	mov	r0, r4
 8011714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011718:	3a30      	subs	r2, #48	@ 0x30
 801171a:	2a09      	cmp	r2, #9
 801171c:	d903      	bls.n	8011726 <_svfiprintf_r+0x1a6>
 801171e:	2b00      	cmp	r3, #0
 8011720:	d0c6      	beq.n	80116b0 <_svfiprintf_r+0x130>
 8011722:	9105      	str	r1, [sp, #20]
 8011724:	e7c4      	b.n	80116b0 <_svfiprintf_r+0x130>
 8011726:	fb0c 2101 	mla	r1, ip, r1, r2
 801172a:	4604      	mov	r4, r0
 801172c:	2301      	movs	r3, #1
 801172e:	e7f0      	b.n	8011712 <_svfiprintf_r+0x192>
 8011730:	ab03      	add	r3, sp, #12
 8011732:	9300      	str	r3, [sp, #0]
 8011734:	462a      	mov	r2, r5
 8011736:	4b0e      	ldr	r3, [pc, #56]	@ (8011770 <_svfiprintf_r+0x1f0>)
 8011738:	a904      	add	r1, sp, #16
 801173a:	4638      	mov	r0, r7
 801173c:	f7fe fb0c 	bl	800fd58 <_printf_float>
 8011740:	1c42      	adds	r2, r0, #1
 8011742:	4606      	mov	r6, r0
 8011744:	d1d6      	bne.n	80116f4 <_svfiprintf_r+0x174>
 8011746:	89ab      	ldrh	r3, [r5, #12]
 8011748:	065b      	lsls	r3, r3, #25
 801174a:	f53f af2d 	bmi.w	80115a8 <_svfiprintf_r+0x28>
 801174e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011750:	e72c      	b.n	80115ac <_svfiprintf_r+0x2c>
 8011752:	ab03      	add	r3, sp, #12
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	462a      	mov	r2, r5
 8011758:	4b05      	ldr	r3, [pc, #20]	@ (8011770 <_svfiprintf_r+0x1f0>)
 801175a:	a904      	add	r1, sp, #16
 801175c:	4638      	mov	r0, r7
 801175e:	f7fe fd93 	bl	8010288 <_printf_i>
 8011762:	e7ed      	b.n	8011740 <_svfiprintf_r+0x1c0>
 8011764:	08015869 	.word	0x08015869
 8011768:	08015873 	.word	0x08015873
 801176c:	0800fd59 	.word	0x0800fd59
 8011770:	080114c9 	.word	0x080114c9
 8011774:	0801586f 	.word	0x0801586f

08011778 <__sfputc_r>:
 8011778:	6893      	ldr	r3, [r2, #8]
 801177a:	3b01      	subs	r3, #1
 801177c:	2b00      	cmp	r3, #0
 801177e:	b410      	push	{r4}
 8011780:	6093      	str	r3, [r2, #8]
 8011782:	da08      	bge.n	8011796 <__sfputc_r+0x1e>
 8011784:	6994      	ldr	r4, [r2, #24]
 8011786:	42a3      	cmp	r3, r4
 8011788:	db01      	blt.n	801178e <__sfputc_r+0x16>
 801178a:	290a      	cmp	r1, #10
 801178c:	d103      	bne.n	8011796 <__sfputc_r+0x1e>
 801178e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011792:	f000 be80 	b.w	8012496 <__swbuf_r>
 8011796:	6813      	ldr	r3, [r2, #0]
 8011798:	1c58      	adds	r0, r3, #1
 801179a:	6010      	str	r0, [r2, #0]
 801179c:	7019      	strb	r1, [r3, #0]
 801179e:	4608      	mov	r0, r1
 80117a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117a4:	4770      	bx	lr

080117a6 <__sfputs_r>:
 80117a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117a8:	4606      	mov	r6, r0
 80117aa:	460f      	mov	r7, r1
 80117ac:	4614      	mov	r4, r2
 80117ae:	18d5      	adds	r5, r2, r3
 80117b0:	42ac      	cmp	r4, r5
 80117b2:	d101      	bne.n	80117b8 <__sfputs_r+0x12>
 80117b4:	2000      	movs	r0, #0
 80117b6:	e007      	b.n	80117c8 <__sfputs_r+0x22>
 80117b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117bc:	463a      	mov	r2, r7
 80117be:	4630      	mov	r0, r6
 80117c0:	f7ff ffda 	bl	8011778 <__sfputc_r>
 80117c4:	1c43      	adds	r3, r0, #1
 80117c6:	d1f3      	bne.n	80117b0 <__sfputs_r+0xa>
 80117c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080117cc <_vfiprintf_r>:
 80117cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d0:	460d      	mov	r5, r1
 80117d2:	b09d      	sub	sp, #116	@ 0x74
 80117d4:	4614      	mov	r4, r2
 80117d6:	4698      	mov	r8, r3
 80117d8:	4606      	mov	r6, r0
 80117da:	b118      	cbz	r0, 80117e4 <_vfiprintf_r+0x18>
 80117dc:	6a03      	ldr	r3, [r0, #32]
 80117de:	b90b      	cbnz	r3, 80117e4 <_vfiprintf_r+0x18>
 80117e0:	f7fe ff32 	bl	8010648 <__sinit>
 80117e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117e6:	07d9      	lsls	r1, r3, #31
 80117e8:	d405      	bmi.n	80117f6 <_vfiprintf_r+0x2a>
 80117ea:	89ab      	ldrh	r3, [r5, #12]
 80117ec:	059a      	lsls	r2, r3, #22
 80117ee:	d402      	bmi.n	80117f6 <_vfiprintf_r+0x2a>
 80117f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117f2:	f7ff f80a 	bl	801080a <__retarget_lock_acquire_recursive>
 80117f6:	89ab      	ldrh	r3, [r5, #12]
 80117f8:	071b      	lsls	r3, r3, #28
 80117fa:	d501      	bpl.n	8011800 <_vfiprintf_r+0x34>
 80117fc:	692b      	ldr	r3, [r5, #16]
 80117fe:	b99b      	cbnz	r3, 8011828 <_vfiprintf_r+0x5c>
 8011800:	4629      	mov	r1, r5
 8011802:	4630      	mov	r0, r6
 8011804:	f000 fe86 	bl	8012514 <__swsetup_r>
 8011808:	b170      	cbz	r0, 8011828 <_vfiprintf_r+0x5c>
 801180a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801180c:	07dc      	lsls	r4, r3, #31
 801180e:	d504      	bpl.n	801181a <_vfiprintf_r+0x4e>
 8011810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011814:	b01d      	add	sp, #116	@ 0x74
 8011816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801181a:	89ab      	ldrh	r3, [r5, #12]
 801181c:	0598      	lsls	r0, r3, #22
 801181e:	d4f7      	bmi.n	8011810 <_vfiprintf_r+0x44>
 8011820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011822:	f7fe fff3 	bl	801080c <__retarget_lock_release_recursive>
 8011826:	e7f3      	b.n	8011810 <_vfiprintf_r+0x44>
 8011828:	2300      	movs	r3, #0
 801182a:	9309      	str	r3, [sp, #36]	@ 0x24
 801182c:	2320      	movs	r3, #32
 801182e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011832:	f8cd 800c 	str.w	r8, [sp, #12]
 8011836:	2330      	movs	r3, #48	@ 0x30
 8011838:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80119e8 <_vfiprintf_r+0x21c>
 801183c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011840:	f04f 0901 	mov.w	r9, #1
 8011844:	4623      	mov	r3, r4
 8011846:	469a      	mov	sl, r3
 8011848:	f813 2b01 	ldrb.w	r2, [r3], #1
 801184c:	b10a      	cbz	r2, 8011852 <_vfiprintf_r+0x86>
 801184e:	2a25      	cmp	r2, #37	@ 0x25
 8011850:	d1f9      	bne.n	8011846 <_vfiprintf_r+0x7a>
 8011852:	ebba 0b04 	subs.w	fp, sl, r4
 8011856:	d00b      	beq.n	8011870 <_vfiprintf_r+0xa4>
 8011858:	465b      	mov	r3, fp
 801185a:	4622      	mov	r2, r4
 801185c:	4629      	mov	r1, r5
 801185e:	4630      	mov	r0, r6
 8011860:	f7ff ffa1 	bl	80117a6 <__sfputs_r>
 8011864:	3001      	adds	r0, #1
 8011866:	f000 80a7 	beq.w	80119b8 <_vfiprintf_r+0x1ec>
 801186a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801186c:	445a      	add	r2, fp
 801186e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011870:	f89a 3000 	ldrb.w	r3, [sl]
 8011874:	2b00      	cmp	r3, #0
 8011876:	f000 809f 	beq.w	80119b8 <_vfiprintf_r+0x1ec>
 801187a:	2300      	movs	r3, #0
 801187c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011884:	f10a 0a01 	add.w	sl, sl, #1
 8011888:	9304      	str	r3, [sp, #16]
 801188a:	9307      	str	r3, [sp, #28]
 801188c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011890:	931a      	str	r3, [sp, #104]	@ 0x68
 8011892:	4654      	mov	r4, sl
 8011894:	2205      	movs	r2, #5
 8011896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801189a:	4853      	ldr	r0, [pc, #332]	@ (80119e8 <_vfiprintf_r+0x21c>)
 801189c:	f7ee fc70 	bl	8000180 <memchr>
 80118a0:	9a04      	ldr	r2, [sp, #16]
 80118a2:	b9d8      	cbnz	r0, 80118dc <_vfiprintf_r+0x110>
 80118a4:	06d1      	lsls	r1, r2, #27
 80118a6:	bf44      	itt	mi
 80118a8:	2320      	movmi	r3, #32
 80118aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118ae:	0713      	lsls	r3, r2, #28
 80118b0:	bf44      	itt	mi
 80118b2:	232b      	movmi	r3, #43	@ 0x2b
 80118b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118b8:	f89a 3000 	ldrb.w	r3, [sl]
 80118bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80118be:	d015      	beq.n	80118ec <_vfiprintf_r+0x120>
 80118c0:	9a07      	ldr	r2, [sp, #28]
 80118c2:	4654      	mov	r4, sl
 80118c4:	2000      	movs	r0, #0
 80118c6:	f04f 0c0a 	mov.w	ip, #10
 80118ca:	4621      	mov	r1, r4
 80118cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118d0:	3b30      	subs	r3, #48	@ 0x30
 80118d2:	2b09      	cmp	r3, #9
 80118d4:	d94b      	bls.n	801196e <_vfiprintf_r+0x1a2>
 80118d6:	b1b0      	cbz	r0, 8011906 <_vfiprintf_r+0x13a>
 80118d8:	9207      	str	r2, [sp, #28]
 80118da:	e014      	b.n	8011906 <_vfiprintf_r+0x13a>
 80118dc:	eba0 0308 	sub.w	r3, r0, r8
 80118e0:	fa09 f303 	lsl.w	r3, r9, r3
 80118e4:	4313      	orrs	r3, r2
 80118e6:	9304      	str	r3, [sp, #16]
 80118e8:	46a2      	mov	sl, r4
 80118ea:	e7d2      	b.n	8011892 <_vfiprintf_r+0xc6>
 80118ec:	9b03      	ldr	r3, [sp, #12]
 80118ee:	1d19      	adds	r1, r3, #4
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	9103      	str	r1, [sp, #12]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	bfbb      	ittet	lt
 80118f8:	425b      	neglt	r3, r3
 80118fa:	f042 0202 	orrlt.w	r2, r2, #2
 80118fe:	9307      	strge	r3, [sp, #28]
 8011900:	9307      	strlt	r3, [sp, #28]
 8011902:	bfb8      	it	lt
 8011904:	9204      	strlt	r2, [sp, #16]
 8011906:	7823      	ldrb	r3, [r4, #0]
 8011908:	2b2e      	cmp	r3, #46	@ 0x2e
 801190a:	d10a      	bne.n	8011922 <_vfiprintf_r+0x156>
 801190c:	7863      	ldrb	r3, [r4, #1]
 801190e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011910:	d132      	bne.n	8011978 <_vfiprintf_r+0x1ac>
 8011912:	9b03      	ldr	r3, [sp, #12]
 8011914:	1d1a      	adds	r2, r3, #4
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	9203      	str	r2, [sp, #12]
 801191a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801191e:	3402      	adds	r4, #2
 8011920:	9305      	str	r3, [sp, #20]
 8011922:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80119f8 <_vfiprintf_r+0x22c>
 8011926:	7821      	ldrb	r1, [r4, #0]
 8011928:	2203      	movs	r2, #3
 801192a:	4650      	mov	r0, sl
 801192c:	f7ee fc28 	bl	8000180 <memchr>
 8011930:	b138      	cbz	r0, 8011942 <_vfiprintf_r+0x176>
 8011932:	9b04      	ldr	r3, [sp, #16]
 8011934:	eba0 000a 	sub.w	r0, r0, sl
 8011938:	2240      	movs	r2, #64	@ 0x40
 801193a:	4082      	lsls	r2, r0
 801193c:	4313      	orrs	r3, r2
 801193e:	3401      	adds	r4, #1
 8011940:	9304      	str	r3, [sp, #16]
 8011942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011946:	4829      	ldr	r0, [pc, #164]	@ (80119ec <_vfiprintf_r+0x220>)
 8011948:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801194c:	2206      	movs	r2, #6
 801194e:	f7ee fc17 	bl	8000180 <memchr>
 8011952:	2800      	cmp	r0, #0
 8011954:	d03f      	beq.n	80119d6 <_vfiprintf_r+0x20a>
 8011956:	4b26      	ldr	r3, [pc, #152]	@ (80119f0 <_vfiprintf_r+0x224>)
 8011958:	bb1b      	cbnz	r3, 80119a2 <_vfiprintf_r+0x1d6>
 801195a:	9b03      	ldr	r3, [sp, #12]
 801195c:	3307      	adds	r3, #7
 801195e:	f023 0307 	bic.w	r3, r3, #7
 8011962:	3308      	adds	r3, #8
 8011964:	9303      	str	r3, [sp, #12]
 8011966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011968:	443b      	add	r3, r7
 801196a:	9309      	str	r3, [sp, #36]	@ 0x24
 801196c:	e76a      	b.n	8011844 <_vfiprintf_r+0x78>
 801196e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011972:	460c      	mov	r4, r1
 8011974:	2001      	movs	r0, #1
 8011976:	e7a8      	b.n	80118ca <_vfiprintf_r+0xfe>
 8011978:	2300      	movs	r3, #0
 801197a:	3401      	adds	r4, #1
 801197c:	9305      	str	r3, [sp, #20]
 801197e:	4619      	mov	r1, r3
 8011980:	f04f 0c0a 	mov.w	ip, #10
 8011984:	4620      	mov	r0, r4
 8011986:	f810 2b01 	ldrb.w	r2, [r0], #1
 801198a:	3a30      	subs	r2, #48	@ 0x30
 801198c:	2a09      	cmp	r2, #9
 801198e:	d903      	bls.n	8011998 <_vfiprintf_r+0x1cc>
 8011990:	2b00      	cmp	r3, #0
 8011992:	d0c6      	beq.n	8011922 <_vfiprintf_r+0x156>
 8011994:	9105      	str	r1, [sp, #20]
 8011996:	e7c4      	b.n	8011922 <_vfiprintf_r+0x156>
 8011998:	fb0c 2101 	mla	r1, ip, r1, r2
 801199c:	4604      	mov	r4, r0
 801199e:	2301      	movs	r3, #1
 80119a0:	e7f0      	b.n	8011984 <_vfiprintf_r+0x1b8>
 80119a2:	ab03      	add	r3, sp, #12
 80119a4:	9300      	str	r3, [sp, #0]
 80119a6:	462a      	mov	r2, r5
 80119a8:	4b12      	ldr	r3, [pc, #72]	@ (80119f4 <_vfiprintf_r+0x228>)
 80119aa:	a904      	add	r1, sp, #16
 80119ac:	4630      	mov	r0, r6
 80119ae:	f7fe f9d3 	bl	800fd58 <_printf_float>
 80119b2:	4607      	mov	r7, r0
 80119b4:	1c78      	adds	r0, r7, #1
 80119b6:	d1d6      	bne.n	8011966 <_vfiprintf_r+0x19a>
 80119b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119ba:	07d9      	lsls	r1, r3, #31
 80119bc:	d405      	bmi.n	80119ca <_vfiprintf_r+0x1fe>
 80119be:	89ab      	ldrh	r3, [r5, #12]
 80119c0:	059a      	lsls	r2, r3, #22
 80119c2:	d402      	bmi.n	80119ca <_vfiprintf_r+0x1fe>
 80119c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80119c6:	f7fe ff21 	bl	801080c <__retarget_lock_release_recursive>
 80119ca:	89ab      	ldrh	r3, [r5, #12]
 80119cc:	065b      	lsls	r3, r3, #25
 80119ce:	f53f af1f 	bmi.w	8011810 <_vfiprintf_r+0x44>
 80119d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119d4:	e71e      	b.n	8011814 <_vfiprintf_r+0x48>
 80119d6:	ab03      	add	r3, sp, #12
 80119d8:	9300      	str	r3, [sp, #0]
 80119da:	462a      	mov	r2, r5
 80119dc:	4b05      	ldr	r3, [pc, #20]	@ (80119f4 <_vfiprintf_r+0x228>)
 80119de:	a904      	add	r1, sp, #16
 80119e0:	4630      	mov	r0, r6
 80119e2:	f7fe fc51 	bl	8010288 <_printf_i>
 80119e6:	e7e4      	b.n	80119b2 <_vfiprintf_r+0x1e6>
 80119e8:	08015869 	.word	0x08015869
 80119ec:	08015873 	.word	0x08015873
 80119f0:	0800fd59 	.word	0x0800fd59
 80119f4:	080117a7 	.word	0x080117a7
 80119f8:	0801586f 	.word	0x0801586f

080119fc <malloc>:
 80119fc:	4b02      	ldr	r3, [pc, #8]	@ (8011a08 <malloc+0xc>)
 80119fe:	4601      	mov	r1, r0
 8011a00:	6818      	ldr	r0, [r3, #0]
 8011a02:	f000 b825 	b.w	8011a50 <_malloc_r>
 8011a06:	bf00      	nop
 8011a08:	200000a4 	.word	0x200000a4

08011a0c <sbrk_aligned>:
 8011a0c:	b570      	push	{r4, r5, r6, lr}
 8011a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8011a4c <sbrk_aligned+0x40>)
 8011a10:	460c      	mov	r4, r1
 8011a12:	6831      	ldr	r1, [r6, #0]
 8011a14:	4605      	mov	r5, r0
 8011a16:	b911      	cbnz	r1, 8011a1e <sbrk_aligned+0x12>
 8011a18:	f000 feb6 	bl	8012788 <_sbrk_r>
 8011a1c:	6030      	str	r0, [r6, #0]
 8011a1e:	4621      	mov	r1, r4
 8011a20:	4628      	mov	r0, r5
 8011a22:	f000 feb1 	bl	8012788 <_sbrk_r>
 8011a26:	1c43      	adds	r3, r0, #1
 8011a28:	d103      	bne.n	8011a32 <sbrk_aligned+0x26>
 8011a2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011a2e:	4620      	mov	r0, r4
 8011a30:	bd70      	pop	{r4, r5, r6, pc}
 8011a32:	1cc4      	adds	r4, r0, #3
 8011a34:	f024 0403 	bic.w	r4, r4, #3
 8011a38:	42a0      	cmp	r0, r4
 8011a3a:	d0f8      	beq.n	8011a2e <sbrk_aligned+0x22>
 8011a3c:	1a21      	subs	r1, r4, r0
 8011a3e:	4628      	mov	r0, r5
 8011a40:	f000 fea2 	bl	8012788 <_sbrk_r>
 8011a44:	3001      	adds	r0, #1
 8011a46:	d1f2      	bne.n	8011a2e <sbrk_aligned+0x22>
 8011a48:	e7ef      	b.n	8011a2a <sbrk_aligned+0x1e>
 8011a4a:	bf00      	nop
 8011a4c:	200007d8 	.word	0x200007d8

08011a50 <_malloc_r>:
 8011a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a54:	1ccd      	adds	r5, r1, #3
 8011a56:	f025 0503 	bic.w	r5, r5, #3
 8011a5a:	3508      	adds	r5, #8
 8011a5c:	2d0c      	cmp	r5, #12
 8011a5e:	bf38      	it	cc
 8011a60:	250c      	movcc	r5, #12
 8011a62:	2d00      	cmp	r5, #0
 8011a64:	4606      	mov	r6, r0
 8011a66:	db01      	blt.n	8011a6c <_malloc_r+0x1c>
 8011a68:	42a9      	cmp	r1, r5
 8011a6a:	d904      	bls.n	8011a76 <_malloc_r+0x26>
 8011a6c:	230c      	movs	r3, #12
 8011a6e:	6033      	str	r3, [r6, #0]
 8011a70:	2000      	movs	r0, #0
 8011a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b4c <_malloc_r+0xfc>
 8011a7a:	f000 f915 	bl	8011ca8 <__malloc_lock>
 8011a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8011a82:	461c      	mov	r4, r3
 8011a84:	bb44      	cbnz	r4, 8011ad8 <_malloc_r+0x88>
 8011a86:	4629      	mov	r1, r5
 8011a88:	4630      	mov	r0, r6
 8011a8a:	f7ff ffbf 	bl	8011a0c <sbrk_aligned>
 8011a8e:	1c43      	adds	r3, r0, #1
 8011a90:	4604      	mov	r4, r0
 8011a92:	d158      	bne.n	8011b46 <_malloc_r+0xf6>
 8011a94:	f8d8 4000 	ldr.w	r4, [r8]
 8011a98:	4627      	mov	r7, r4
 8011a9a:	2f00      	cmp	r7, #0
 8011a9c:	d143      	bne.n	8011b26 <_malloc_r+0xd6>
 8011a9e:	2c00      	cmp	r4, #0
 8011aa0:	d04b      	beq.n	8011b3a <_malloc_r+0xea>
 8011aa2:	6823      	ldr	r3, [r4, #0]
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	eb04 0903 	add.w	r9, r4, r3
 8011aac:	f000 fe6c 	bl	8012788 <_sbrk_r>
 8011ab0:	4581      	cmp	r9, r0
 8011ab2:	d142      	bne.n	8011b3a <_malloc_r+0xea>
 8011ab4:	6821      	ldr	r1, [r4, #0]
 8011ab6:	1a6d      	subs	r5, r5, r1
 8011ab8:	4629      	mov	r1, r5
 8011aba:	4630      	mov	r0, r6
 8011abc:	f7ff ffa6 	bl	8011a0c <sbrk_aligned>
 8011ac0:	3001      	adds	r0, #1
 8011ac2:	d03a      	beq.n	8011b3a <_malloc_r+0xea>
 8011ac4:	6823      	ldr	r3, [r4, #0]
 8011ac6:	442b      	add	r3, r5
 8011ac8:	6023      	str	r3, [r4, #0]
 8011aca:	f8d8 3000 	ldr.w	r3, [r8]
 8011ace:	685a      	ldr	r2, [r3, #4]
 8011ad0:	bb62      	cbnz	r2, 8011b2c <_malloc_r+0xdc>
 8011ad2:	f8c8 7000 	str.w	r7, [r8]
 8011ad6:	e00f      	b.n	8011af8 <_malloc_r+0xa8>
 8011ad8:	6822      	ldr	r2, [r4, #0]
 8011ada:	1b52      	subs	r2, r2, r5
 8011adc:	d420      	bmi.n	8011b20 <_malloc_r+0xd0>
 8011ade:	2a0b      	cmp	r2, #11
 8011ae0:	d917      	bls.n	8011b12 <_malloc_r+0xc2>
 8011ae2:	1961      	adds	r1, r4, r5
 8011ae4:	42a3      	cmp	r3, r4
 8011ae6:	6025      	str	r5, [r4, #0]
 8011ae8:	bf18      	it	ne
 8011aea:	6059      	strne	r1, [r3, #4]
 8011aec:	6863      	ldr	r3, [r4, #4]
 8011aee:	bf08      	it	eq
 8011af0:	f8c8 1000 	streq.w	r1, [r8]
 8011af4:	5162      	str	r2, [r4, r5]
 8011af6:	604b      	str	r3, [r1, #4]
 8011af8:	4630      	mov	r0, r6
 8011afa:	f000 f8db 	bl	8011cb4 <__malloc_unlock>
 8011afe:	f104 000b 	add.w	r0, r4, #11
 8011b02:	1d23      	adds	r3, r4, #4
 8011b04:	f020 0007 	bic.w	r0, r0, #7
 8011b08:	1ac2      	subs	r2, r0, r3
 8011b0a:	bf1c      	itt	ne
 8011b0c:	1a1b      	subne	r3, r3, r0
 8011b0e:	50a3      	strne	r3, [r4, r2]
 8011b10:	e7af      	b.n	8011a72 <_malloc_r+0x22>
 8011b12:	6862      	ldr	r2, [r4, #4]
 8011b14:	42a3      	cmp	r3, r4
 8011b16:	bf0c      	ite	eq
 8011b18:	f8c8 2000 	streq.w	r2, [r8]
 8011b1c:	605a      	strne	r2, [r3, #4]
 8011b1e:	e7eb      	b.n	8011af8 <_malloc_r+0xa8>
 8011b20:	4623      	mov	r3, r4
 8011b22:	6864      	ldr	r4, [r4, #4]
 8011b24:	e7ae      	b.n	8011a84 <_malloc_r+0x34>
 8011b26:	463c      	mov	r4, r7
 8011b28:	687f      	ldr	r7, [r7, #4]
 8011b2a:	e7b6      	b.n	8011a9a <_malloc_r+0x4a>
 8011b2c:	461a      	mov	r2, r3
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	42a3      	cmp	r3, r4
 8011b32:	d1fb      	bne.n	8011b2c <_malloc_r+0xdc>
 8011b34:	2300      	movs	r3, #0
 8011b36:	6053      	str	r3, [r2, #4]
 8011b38:	e7de      	b.n	8011af8 <_malloc_r+0xa8>
 8011b3a:	230c      	movs	r3, #12
 8011b3c:	6033      	str	r3, [r6, #0]
 8011b3e:	4630      	mov	r0, r6
 8011b40:	f000 f8b8 	bl	8011cb4 <__malloc_unlock>
 8011b44:	e794      	b.n	8011a70 <_malloc_r+0x20>
 8011b46:	6005      	str	r5, [r0, #0]
 8011b48:	e7d6      	b.n	8011af8 <_malloc_r+0xa8>
 8011b4a:	bf00      	nop
 8011b4c:	200007dc 	.word	0x200007dc

08011b50 <__sflush_r>:
 8011b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b58:	0716      	lsls	r6, r2, #28
 8011b5a:	4605      	mov	r5, r0
 8011b5c:	460c      	mov	r4, r1
 8011b5e:	d454      	bmi.n	8011c0a <__sflush_r+0xba>
 8011b60:	684b      	ldr	r3, [r1, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	dc02      	bgt.n	8011b6c <__sflush_r+0x1c>
 8011b66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	dd48      	ble.n	8011bfe <__sflush_r+0xae>
 8011b6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b6e:	2e00      	cmp	r6, #0
 8011b70:	d045      	beq.n	8011bfe <__sflush_r+0xae>
 8011b72:	2300      	movs	r3, #0
 8011b74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011b78:	682f      	ldr	r7, [r5, #0]
 8011b7a:	6a21      	ldr	r1, [r4, #32]
 8011b7c:	602b      	str	r3, [r5, #0]
 8011b7e:	d030      	beq.n	8011be2 <__sflush_r+0x92>
 8011b80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	0759      	lsls	r1, r3, #29
 8011b86:	d505      	bpl.n	8011b94 <__sflush_r+0x44>
 8011b88:	6863      	ldr	r3, [r4, #4]
 8011b8a:	1ad2      	subs	r2, r2, r3
 8011b8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b8e:	b10b      	cbz	r3, 8011b94 <__sflush_r+0x44>
 8011b90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011b92:	1ad2      	subs	r2, r2, r3
 8011b94:	2300      	movs	r3, #0
 8011b96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b98:	6a21      	ldr	r1, [r4, #32]
 8011b9a:	4628      	mov	r0, r5
 8011b9c:	47b0      	blx	r6
 8011b9e:	1c43      	adds	r3, r0, #1
 8011ba0:	89a3      	ldrh	r3, [r4, #12]
 8011ba2:	d106      	bne.n	8011bb2 <__sflush_r+0x62>
 8011ba4:	6829      	ldr	r1, [r5, #0]
 8011ba6:	291d      	cmp	r1, #29
 8011ba8:	d82b      	bhi.n	8011c02 <__sflush_r+0xb2>
 8011baa:	4a2a      	ldr	r2, [pc, #168]	@ (8011c54 <__sflush_r+0x104>)
 8011bac:	40ca      	lsrs	r2, r1
 8011bae:	07d6      	lsls	r6, r2, #31
 8011bb0:	d527      	bpl.n	8011c02 <__sflush_r+0xb2>
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	6062      	str	r2, [r4, #4]
 8011bb6:	04d9      	lsls	r1, r3, #19
 8011bb8:	6922      	ldr	r2, [r4, #16]
 8011bba:	6022      	str	r2, [r4, #0]
 8011bbc:	d504      	bpl.n	8011bc8 <__sflush_r+0x78>
 8011bbe:	1c42      	adds	r2, r0, #1
 8011bc0:	d101      	bne.n	8011bc6 <__sflush_r+0x76>
 8011bc2:	682b      	ldr	r3, [r5, #0]
 8011bc4:	b903      	cbnz	r3, 8011bc8 <__sflush_r+0x78>
 8011bc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8011bc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011bca:	602f      	str	r7, [r5, #0]
 8011bcc:	b1b9      	cbz	r1, 8011bfe <__sflush_r+0xae>
 8011bce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011bd2:	4299      	cmp	r1, r3
 8011bd4:	d002      	beq.n	8011bdc <__sflush_r+0x8c>
 8011bd6:	4628      	mov	r0, r5
 8011bd8:	f000 fe5a 	bl	8012890 <_free_r>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	6363      	str	r3, [r4, #52]	@ 0x34
 8011be0:	e00d      	b.n	8011bfe <__sflush_r+0xae>
 8011be2:	2301      	movs	r3, #1
 8011be4:	4628      	mov	r0, r5
 8011be6:	47b0      	blx	r6
 8011be8:	4602      	mov	r2, r0
 8011bea:	1c50      	adds	r0, r2, #1
 8011bec:	d1c9      	bne.n	8011b82 <__sflush_r+0x32>
 8011bee:	682b      	ldr	r3, [r5, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d0c6      	beq.n	8011b82 <__sflush_r+0x32>
 8011bf4:	2b1d      	cmp	r3, #29
 8011bf6:	d001      	beq.n	8011bfc <__sflush_r+0xac>
 8011bf8:	2b16      	cmp	r3, #22
 8011bfa:	d11e      	bne.n	8011c3a <__sflush_r+0xea>
 8011bfc:	602f      	str	r7, [r5, #0]
 8011bfe:	2000      	movs	r0, #0
 8011c00:	e022      	b.n	8011c48 <__sflush_r+0xf8>
 8011c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c06:	b21b      	sxth	r3, r3
 8011c08:	e01b      	b.n	8011c42 <__sflush_r+0xf2>
 8011c0a:	690f      	ldr	r7, [r1, #16]
 8011c0c:	2f00      	cmp	r7, #0
 8011c0e:	d0f6      	beq.n	8011bfe <__sflush_r+0xae>
 8011c10:	0793      	lsls	r3, r2, #30
 8011c12:	680e      	ldr	r6, [r1, #0]
 8011c14:	bf08      	it	eq
 8011c16:	694b      	ldreq	r3, [r1, #20]
 8011c18:	600f      	str	r7, [r1, #0]
 8011c1a:	bf18      	it	ne
 8011c1c:	2300      	movne	r3, #0
 8011c1e:	eba6 0807 	sub.w	r8, r6, r7
 8011c22:	608b      	str	r3, [r1, #8]
 8011c24:	f1b8 0f00 	cmp.w	r8, #0
 8011c28:	dde9      	ble.n	8011bfe <__sflush_r+0xae>
 8011c2a:	6a21      	ldr	r1, [r4, #32]
 8011c2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011c2e:	4643      	mov	r3, r8
 8011c30:	463a      	mov	r2, r7
 8011c32:	4628      	mov	r0, r5
 8011c34:	47b0      	blx	r6
 8011c36:	2800      	cmp	r0, #0
 8011c38:	dc08      	bgt.n	8011c4c <__sflush_r+0xfc>
 8011c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c42:	81a3      	strh	r3, [r4, #12]
 8011c44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c4c:	4407      	add	r7, r0
 8011c4e:	eba8 0800 	sub.w	r8, r8, r0
 8011c52:	e7e7      	b.n	8011c24 <__sflush_r+0xd4>
 8011c54:	20400001 	.word	0x20400001

08011c58 <_fflush_r>:
 8011c58:	b538      	push	{r3, r4, r5, lr}
 8011c5a:	690b      	ldr	r3, [r1, #16]
 8011c5c:	4605      	mov	r5, r0
 8011c5e:	460c      	mov	r4, r1
 8011c60:	b913      	cbnz	r3, 8011c68 <_fflush_r+0x10>
 8011c62:	2500      	movs	r5, #0
 8011c64:	4628      	mov	r0, r5
 8011c66:	bd38      	pop	{r3, r4, r5, pc}
 8011c68:	b118      	cbz	r0, 8011c72 <_fflush_r+0x1a>
 8011c6a:	6a03      	ldr	r3, [r0, #32]
 8011c6c:	b90b      	cbnz	r3, 8011c72 <_fflush_r+0x1a>
 8011c6e:	f7fe fceb 	bl	8010648 <__sinit>
 8011c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d0f3      	beq.n	8011c62 <_fflush_r+0xa>
 8011c7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011c7c:	07d0      	lsls	r0, r2, #31
 8011c7e:	d404      	bmi.n	8011c8a <_fflush_r+0x32>
 8011c80:	0599      	lsls	r1, r3, #22
 8011c82:	d402      	bmi.n	8011c8a <_fflush_r+0x32>
 8011c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c86:	f7fe fdc0 	bl	801080a <__retarget_lock_acquire_recursive>
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	4621      	mov	r1, r4
 8011c8e:	f7ff ff5f 	bl	8011b50 <__sflush_r>
 8011c92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c94:	07da      	lsls	r2, r3, #31
 8011c96:	4605      	mov	r5, r0
 8011c98:	d4e4      	bmi.n	8011c64 <_fflush_r+0xc>
 8011c9a:	89a3      	ldrh	r3, [r4, #12]
 8011c9c:	059b      	lsls	r3, r3, #22
 8011c9e:	d4e1      	bmi.n	8011c64 <_fflush_r+0xc>
 8011ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ca2:	f7fe fdb3 	bl	801080c <__retarget_lock_release_recursive>
 8011ca6:	e7dd      	b.n	8011c64 <_fflush_r+0xc>

08011ca8 <__malloc_lock>:
 8011ca8:	4801      	ldr	r0, [pc, #4]	@ (8011cb0 <__malloc_lock+0x8>)
 8011caa:	f7fe bdae 	b.w	801080a <__retarget_lock_acquire_recursive>
 8011cae:	bf00      	nop
 8011cb0:	200007d4 	.word	0x200007d4

08011cb4 <__malloc_unlock>:
 8011cb4:	4801      	ldr	r0, [pc, #4]	@ (8011cbc <__malloc_unlock+0x8>)
 8011cb6:	f7fe bda9 	b.w	801080c <__retarget_lock_release_recursive>
 8011cba:	bf00      	nop
 8011cbc:	200007d4 	.word	0x200007d4

08011cc0 <_Balloc>:
 8011cc0:	b570      	push	{r4, r5, r6, lr}
 8011cc2:	69c6      	ldr	r6, [r0, #28]
 8011cc4:	4604      	mov	r4, r0
 8011cc6:	460d      	mov	r5, r1
 8011cc8:	b976      	cbnz	r6, 8011ce8 <_Balloc+0x28>
 8011cca:	2010      	movs	r0, #16
 8011ccc:	f7ff fe96 	bl	80119fc <malloc>
 8011cd0:	4602      	mov	r2, r0
 8011cd2:	61e0      	str	r0, [r4, #28]
 8011cd4:	b920      	cbnz	r0, 8011ce0 <_Balloc+0x20>
 8011cd6:	4b18      	ldr	r3, [pc, #96]	@ (8011d38 <_Balloc+0x78>)
 8011cd8:	4818      	ldr	r0, [pc, #96]	@ (8011d3c <_Balloc+0x7c>)
 8011cda:	216b      	movs	r1, #107	@ 0x6b
 8011cdc:	f000 fda6 	bl	801282c <__assert_func>
 8011ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ce4:	6006      	str	r6, [r0, #0]
 8011ce6:	60c6      	str	r6, [r0, #12]
 8011ce8:	69e6      	ldr	r6, [r4, #28]
 8011cea:	68f3      	ldr	r3, [r6, #12]
 8011cec:	b183      	cbz	r3, 8011d10 <_Balloc+0x50>
 8011cee:	69e3      	ldr	r3, [r4, #28]
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011cf6:	b9b8      	cbnz	r0, 8011d28 <_Balloc+0x68>
 8011cf8:	2101      	movs	r1, #1
 8011cfa:	fa01 f605 	lsl.w	r6, r1, r5
 8011cfe:	1d72      	adds	r2, r6, #5
 8011d00:	0092      	lsls	r2, r2, #2
 8011d02:	4620      	mov	r0, r4
 8011d04:	f000 fdb0 	bl	8012868 <_calloc_r>
 8011d08:	b160      	cbz	r0, 8011d24 <_Balloc+0x64>
 8011d0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011d0e:	e00e      	b.n	8011d2e <_Balloc+0x6e>
 8011d10:	2221      	movs	r2, #33	@ 0x21
 8011d12:	2104      	movs	r1, #4
 8011d14:	4620      	mov	r0, r4
 8011d16:	f000 fda7 	bl	8012868 <_calloc_r>
 8011d1a:	69e3      	ldr	r3, [r4, #28]
 8011d1c:	60f0      	str	r0, [r6, #12]
 8011d1e:	68db      	ldr	r3, [r3, #12]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d1e4      	bne.n	8011cee <_Balloc+0x2e>
 8011d24:	2000      	movs	r0, #0
 8011d26:	bd70      	pop	{r4, r5, r6, pc}
 8011d28:	6802      	ldr	r2, [r0, #0]
 8011d2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d2e:	2300      	movs	r3, #0
 8011d30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d34:	e7f7      	b.n	8011d26 <_Balloc+0x66>
 8011d36:	bf00      	nop
 8011d38:	080157e9 	.word	0x080157e9
 8011d3c:	0801587a 	.word	0x0801587a

08011d40 <_Bfree>:
 8011d40:	b570      	push	{r4, r5, r6, lr}
 8011d42:	69c6      	ldr	r6, [r0, #28]
 8011d44:	4605      	mov	r5, r0
 8011d46:	460c      	mov	r4, r1
 8011d48:	b976      	cbnz	r6, 8011d68 <_Bfree+0x28>
 8011d4a:	2010      	movs	r0, #16
 8011d4c:	f7ff fe56 	bl	80119fc <malloc>
 8011d50:	4602      	mov	r2, r0
 8011d52:	61e8      	str	r0, [r5, #28]
 8011d54:	b920      	cbnz	r0, 8011d60 <_Bfree+0x20>
 8011d56:	4b09      	ldr	r3, [pc, #36]	@ (8011d7c <_Bfree+0x3c>)
 8011d58:	4809      	ldr	r0, [pc, #36]	@ (8011d80 <_Bfree+0x40>)
 8011d5a:	218f      	movs	r1, #143	@ 0x8f
 8011d5c:	f000 fd66 	bl	801282c <__assert_func>
 8011d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d64:	6006      	str	r6, [r0, #0]
 8011d66:	60c6      	str	r6, [r0, #12]
 8011d68:	b13c      	cbz	r4, 8011d7a <_Bfree+0x3a>
 8011d6a:	69eb      	ldr	r3, [r5, #28]
 8011d6c:	6862      	ldr	r2, [r4, #4]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d74:	6021      	str	r1, [r4, #0]
 8011d76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d7a:	bd70      	pop	{r4, r5, r6, pc}
 8011d7c:	080157e9 	.word	0x080157e9
 8011d80:	0801587a 	.word	0x0801587a

08011d84 <__multadd>:
 8011d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d88:	690d      	ldr	r5, [r1, #16]
 8011d8a:	4607      	mov	r7, r0
 8011d8c:	460c      	mov	r4, r1
 8011d8e:	461e      	mov	r6, r3
 8011d90:	f101 0c14 	add.w	ip, r1, #20
 8011d94:	2000      	movs	r0, #0
 8011d96:	f8dc 3000 	ldr.w	r3, [ip]
 8011d9a:	b299      	uxth	r1, r3
 8011d9c:	fb02 6101 	mla	r1, r2, r1, r6
 8011da0:	0c1e      	lsrs	r6, r3, #16
 8011da2:	0c0b      	lsrs	r3, r1, #16
 8011da4:	fb02 3306 	mla	r3, r2, r6, r3
 8011da8:	b289      	uxth	r1, r1
 8011daa:	3001      	adds	r0, #1
 8011dac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011db0:	4285      	cmp	r5, r0
 8011db2:	f84c 1b04 	str.w	r1, [ip], #4
 8011db6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011dba:	dcec      	bgt.n	8011d96 <__multadd+0x12>
 8011dbc:	b30e      	cbz	r6, 8011e02 <__multadd+0x7e>
 8011dbe:	68a3      	ldr	r3, [r4, #8]
 8011dc0:	42ab      	cmp	r3, r5
 8011dc2:	dc19      	bgt.n	8011df8 <__multadd+0x74>
 8011dc4:	6861      	ldr	r1, [r4, #4]
 8011dc6:	4638      	mov	r0, r7
 8011dc8:	3101      	adds	r1, #1
 8011dca:	f7ff ff79 	bl	8011cc0 <_Balloc>
 8011dce:	4680      	mov	r8, r0
 8011dd0:	b928      	cbnz	r0, 8011dde <__multadd+0x5a>
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8011e08 <__multadd+0x84>)
 8011dd6:	480d      	ldr	r0, [pc, #52]	@ (8011e0c <__multadd+0x88>)
 8011dd8:	21ba      	movs	r1, #186	@ 0xba
 8011dda:	f000 fd27 	bl	801282c <__assert_func>
 8011dde:	6922      	ldr	r2, [r4, #16]
 8011de0:	3202      	adds	r2, #2
 8011de2:	f104 010c 	add.w	r1, r4, #12
 8011de6:	0092      	lsls	r2, r2, #2
 8011de8:	300c      	adds	r0, #12
 8011dea:	f000 fd11 	bl	8012810 <memcpy>
 8011dee:	4621      	mov	r1, r4
 8011df0:	4638      	mov	r0, r7
 8011df2:	f7ff ffa5 	bl	8011d40 <_Bfree>
 8011df6:	4644      	mov	r4, r8
 8011df8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011dfc:	3501      	adds	r5, #1
 8011dfe:	615e      	str	r6, [r3, #20]
 8011e00:	6125      	str	r5, [r4, #16]
 8011e02:	4620      	mov	r0, r4
 8011e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e08:	08015858 	.word	0x08015858
 8011e0c:	0801587a 	.word	0x0801587a

08011e10 <__hi0bits>:
 8011e10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011e14:	4603      	mov	r3, r0
 8011e16:	bf36      	itet	cc
 8011e18:	0403      	lslcc	r3, r0, #16
 8011e1a:	2000      	movcs	r0, #0
 8011e1c:	2010      	movcc	r0, #16
 8011e1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011e22:	bf3c      	itt	cc
 8011e24:	021b      	lslcc	r3, r3, #8
 8011e26:	3008      	addcc	r0, #8
 8011e28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011e2c:	bf3c      	itt	cc
 8011e2e:	011b      	lslcc	r3, r3, #4
 8011e30:	3004      	addcc	r0, #4
 8011e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e36:	bf3c      	itt	cc
 8011e38:	009b      	lslcc	r3, r3, #2
 8011e3a:	3002      	addcc	r0, #2
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	db05      	blt.n	8011e4c <__hi0bits+0x3c>
 8011e40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011e44:	f100 0001 	add.w	r0, r0, #1
 8011e48:	bf08      	it	eq
 8011e4a:	2020      	moveq	r0, #32
 8011e4c:	4770      	bx	lr

08011e4e <__lo0bits>:
 8011e4e:	6803      	ldr	r3, [r0, #0]
 8011e50:	4602      	mov	r2, r0
 8011e52:	f013 0007 	ands.w	r0, r3, #7
 8011e56:	d00b      	beq.n	8011e70 <__lo0bits+0x22>
 8011e58:	07d9      	lsls	r1, r3, #31
 8011e5a:	d421      	bmi.n	8011ea0 <__lo0bits+0x52>
 8011e5c:	0798      	lsls	r0, r3, #30
 8011e5e:	bf49      	itett	mi
 8011e60:	085b      	lsrmi	r3, r3, #1
 8011e62:	089b      	lsrpl	r3, r3, #2
 8011e64:	2001      	movmi	r0, #1
 8011e66:	6013      	strmi	r3, [r2, #0]
 8011e68:	bf5c      	itt	pl
 8011e6a:	6013      	strpl	r3, [r2, #0]
 8011e6c:	2002      	movpl	r0, #2
 8011e6e:	4770      	bx	lr
 8011e70:	b299      	uxth	r1, r3
 8011e72:	b909      	cbnz	r1, 8011e78 <__lo0bits+0x2a>
 8011e74:	0c1b      	lsrs	r3, r3, #16
 8011e76:	2010      	movs	r0, #16
 8011e78:	b2d9      	uxtb	r1, r3
 8011e7a:	b909      	cbnz	r1, 8011e80 <__lo0bits+0x32>
 8011e7c:	3008      	adds	r0, #8
 8011e7e:	0a1b      	lsrs	r3, r3, #8
 8011e80:	0719      	lsls	r1, r3, #28
 8011e82:	bf04      	itt	eq
 8011e84:	091b      	lsreq	r3, r3, #4
 8011e86:	3004      	addeq	r0, #4
 8011e88:	0799      	lsls	r1, r3, #30
 8011e8a:	bf04      	itt	eq
 8011e8c:	089b      	lsreq	r3, r3, #2
 8011e8e:	3002      	addeq	r0, #2
 8011e90:	07d9      	lsls	r1, r3, #31
 8011e92:	d403      	bmi.n	8011e9c <__lo0bits+0x4e>
 8011e94:	085b      	lsrs	r3, r3, #1
 8011e96:	f100 0001 	add.w	r0, r0, #1
 8011e9a:	d003      	beq.n	8011ea4 <__lo0bits+0x56>
 8011e9c:	6013      	str	r3, [r2, #0]
 8011e9e:	4770      	bx	lr
 8011ea0:	2000      	movs	r0, #0
 8011ea2:	4770      	bx	lr
 8011ea4:	2020      	movs	r0, #32
 8011ea6:	4770      	bx	lr

08011ea8 <__i2b>:
 8011ea8:	b510      	push	{r4, lr}
 8011eaa:	460c      	mov	r4, r1
 8011eac:	2101      	movs	r1, #1
 8011eae:	f7ff ff07 	bl	8011cc0 <_Balloc>
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	b928      	cbnz	r0, 8011ec2 <__i2b+0x1a>
 8011eb6:	4b05      	ldr	r3, [pc, #20]	@ (8011ecc <__i2b+0x24>)
 8011eb8:	4805      	ldr	r0, [pc, #20]	@ (8011ed0 <__i2b+0x28>)
 8011eba:	f240 1145 	movw	r1, #325	@ 0x145
 8011ebe:	f000 fcb5 	bl	801282c <__assert_func>
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	6144      	str	r4, [r0, #20]
 8011ec6:	6103      	str	r3, [r0, #16]
 8011ec8:	bd10      	pop	{r4, pc}
 8011eca:	bf00      	nop
 8011ecc:	08015858 	.word	0x08015858
 8011ed0:	0801587a 	.word	0x0801587a

08011ed4 <__multiply>:
 8011ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed8:	4617      	mov	r7, r2
 8011eda:	690a      	ldr	r2, [r1, #16]
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	bfa8      	it	ge
 8011ee2:	463b      	movge	r3, r7
 8011ee4:	4689      	mov	r9, r1
 8011ee6:	bfa4      	itt	ge
 8011ee8:	460f      	movge	r7, r1
 8011eea:	4699      	movge	r9, r3
 8011eec:	693d      	ldr	r5, [r7, #16]
 8011eee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	6879      	ldr	r1, [r7, #4]
 8011ef6:	eb05 060a 	add.w	r6, r5, sl
 8011efa:	42b3      	cmp	r3, r6
 8011efc:	b085      	sub	sp, #20
 8011efe:	bfb8      	it	lt
 8011f00:	3101      	addlt	r1, #1
 8011f02:	f7ff fedd 	bl	8011cc0 <_Balloc>
 8011f06:	b930      	cbnz	r0, 8011f16 <__multiply+0x42>
 8011f08:	4602      	mov	r2, r0
 8011f0a:	4b41      	ldr	r3, [pc, #260]	@ (8012010 <__multiply+0x13c>)
 8011f0c:	4841      	ldr	r0, [pc, #260]	@ (8012014 <__multiply+0x140>)
 8011f0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011f12:	f000 fc8b 	bl	801282c <__assert_func>
 8011f16:	f100 0414 	add.w	r4, r0, #20
 8011f1a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011f1e:	4623      	mov	r3, r4
 8011f20:	2200      	movs	r2, #0
 8011f22:	4573      	cmp	r3, lr
 8011f24:	d320      	bcc.n	8011f68 <__multiply+0x94>
 8011f26:	f107 0814 	add.w	r8, r7, #20
 8011f2a:	f109 0114 	add.w	r1, r9, #20
 8011f2e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011f32:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011f36:	9302      	str	r3, [sp, #8]
 8011f38:	1beb      	subs	r3, r5, r7
 8011f3a:	3b15      	subs	r3, #21
 8011f3c:	f023 0303 	bic.w	r3, r3, #3
 8011f40:	3304      	adds	r3, #4
 8011f42:	3715      	adds	r7, #21
 8011f44:	42bd      	cmp	r5, r7
 8011f46:	bf38      	it	cc
 8011f48:	2304      	movcc	r3, #4
 8011f4a:	9301      	str	r3, [sp, #4]
 8011f4c:	9b02      	ldr	r3, [sp, #8]
 8011f4e:	9103      	str	r1, [sp, #12]
 8011f50:	428b      	cmp	r3, r1
 8011f52:	d80c      	bhi.n	8011f6e <__multiply+0x9a>
 8011f54:	2e00      	cmp	r6, #0
 8011f56:	dd03      	ble.n	8011f60 <__multiply+0x8c>
 8011f58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d055      	beq.n	801200c <__multiply+0x138>
 8011f60:	6106      	str	r6, [r0, #16]
 8011f62:	b005      	add	sp, #20
 8011f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f68:	f843 2b04 	str.w	r2, [r3], #4
 8011f6c:	e7d9      	b.n	8011f22 <__multiply+0x4e>
 8011f6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011f72:	f1ba 0f00 	cmp.w	sl, #0
 8011f76:	d01f      	beq.n	8011fb8 <__multiply+0xe4>
 8011f78:	46c4      	mov	ip, r8
 8011f7a:	46a1      	mov	r9, r4
 8011f7c:	2700      	movs	r7, #0
 8011f7e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011f82:	f8d9 3000 	ldr.w	r3, [r9]
 8011f86:	fa1f fb82 	uxth.w	fp, r2
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011f90:	443b      	add	r3, r7
 8011f92:	f8d9 7000 	ldr.w	r7, [r9]
 8011f96:	0c12      	lsrs	r2, r2, #16
 8011f98:	0c3f      	lsrs	r7, r7, #16
 8011f9a:	fb0a 7202 	mla	r2, sl, r2, r7
 8011f9e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fa8:	4565      	cmp	r5, ip
 8011faa:	f849 3b04 	str.w	r3, [r9], #4
 8011fae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011fb2:	d8e4      	bhi.n	8011f7e <__multiply+0xaa>
 8011fb4:	9b01      	ldr	r3, [sp, #4]
 8011fb6:	50e7      	str	r7, [r4, r3]
 8011fb8:	9b03      	ldr	r3, [sp, #12]
 8011fba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011fbe:	3104      	adds	r1, #4
 8011fc0:	f1b9 0f00 	cmp.w	r9, #0
 8011fc4:	d020      	beq.n	8012008 <__multiply+0x134>
 8011fc6:	6823      	ldr	r3, [r4, #0]
 8011fc8:	4647      	mov	r7, r8
 8011fca:	46a4      	mov	ip, r4
 8011fcc:	f04f 0a00 	mov.w	sl, #0
 8011fd0:	f8b7 b000 	ldrh.w	fp, [r7]
 8011fd4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011fd8:	fb09 220b 	mla	r2, r9, fp, r2
 8011fdc:	4452      	add	r2, sl
 8011fde:	b29b      	uxth	r3, r3
 8011fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fe4:	f84c 3b04 	str.w	r3, [ip], #4
 8011fe8:	f857 3b04 	ldr.w	r3, [r7], #4
 8011fec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011ff0:	f8bc 3000 	ldrh.w	r3, [ip]
 8011ff4:	fb09 330a 	mla	r3, r9, sl, r3
 8011ff8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011ffc:	42bd      	cmp	r5, r7
 8011ffe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012002:	d8e5      	bhi.n	8011fd0 <__multiply+0xfc>
 8012004:	9a01      	ldr	r2, [sp, #4]
 8012006:	50a3      	str	r3, [r4, r2]
 8012008:	3404      	adds	r4, #4
 801200a:	e79f      	b.n	8011f4c <__multiply+0x78>
 801200c:	3e01      	subs	r6, #1
 801200e:	e7a1      	b.n	8011f54 <__multiply+0x80>
 8012010:	08015858 	.word	0x08015858
 8012014:	0801587a 	.word	0x0801587a

08012018 <__pow5mult>:
 8012018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801201c:	4615      	mov	r5, r2
 801201e:	f012 0203 	ands.w	r2, r2, #3
 8012022:	4607      	mov	r7, r0
 8012024:	460e      	mov	r6, r1
 8012026:	d007      	beq.n	8012038 <__pow5mult+0x20>
 8012028:	4c25      	ldr	r4, [pc, #148]	@ (80120c0 <__pow5mult+0xa8>)
 801202a:	3a01      	subs	r2, #1
 801202c:	2300      	movs	r3, #0
 801202e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012032:	f7ff fea7 	bl	8011d84 <__multadd>
 8012036:	4606      	mov	r6, r0
 8012038:	10ad      	asrs	r5, r5, #2
 801203a:	d03d      	beq.n	80120b8 <__pow5mult+0xa0>
 801203c:	69fc      	ldr	r4, [r7, #28]
 801203e:	b97c      	cbnz	r4, 8012060 <__pow5mult+0x48>
 8012040:	2010      	movs	r0, #16
 8012042:	f7ff fcdb 	bl	80119fc <malloc>
 8012046:	4602      	mov	r2, r0
 8012048:	61f8      	str	r0, [r7, #28]
 801204a:	b928      	cbnz	r0, 8012058 <__pow5mult+0x40>
 801204c:	4b1d      	ldr	r3, [pc, #116]	@ (80120c4 <__pow5mult+0xac>)
 801204e:	481e      	ldr	r0, [pc, #120]	@ (80120c8 <__pow5mult+0xb0>)
 8012050:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012054:	f000 fbea 	bl	801282c <__assert_func>
 8012058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801205c:	6004      	str	r4, [r0, #0]
 801205e:	60c4      	str	r4, [r0, #12]
 8012060:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012064:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012068:	b94c      	cbnz	r4, 801207e <__pow5mult+0x66>
 801206a:	f240 2171 	movw	r1, #625	@ 0x271
 801206e:	4638      	mov	r0, r7
 8012070:	f7ff ff1a 	bl	8011ea8 <__i2b>
 8012074:	2300      	movs	r3, #0
 8012076:	f8c8 0008 	str.w	r0, [r8, #8]
 801207a:	4604      	mov	r4, r0
 801207c:	6003      	str	r3, [r0, #0]
 801207e:	f04f 0900 	mov.w	r9, #0
 8012082:	07eb      	lsls	r3, r5, #31
 8012084:	d50a      	bpl.n	801209c <__pow5mult+0x84>
 8012086:	4631      	mov	r1, r6
 8012088:	4622      	mov	r2, r4
 801208a:	4638      	mov	r0, r7
 801208c:	f7ff ff22 	bl	8011ed4 <__multiply>
 8012090:	4631      	mov	r1, r6
 8012092:	4680      	mov	r8, r0
 8012094:	4638      	mov	r0, r7
 8012096:	f7ff fe53 	bl	8011d40 <_Bfree>
 801209a:	4646      	mov	r6, r8
 801209c:	106d      	asrs	r5, r5, #1
 801209e:	d00b      	beq.n	80120b8 <__pow5mult+0xa0>
 80120a0:	6820      	ldr	r0, [r4, #0]
 80120a2:	b938      	cbnz	r0, 80120b4 <__pow5mult+0x9c>
 80120a4:	4622      	mov	r2, r4
 80120a6:	4621      	mov	r1, r4
 80120a8:	4638      	mov	r0, r7
 80120aa:	f7ff ff13 	bl	8011ed4 <__multiply>
 80120ae:	6020      	str	r0, [r4, #0]
 80120b0:	f8c0 9000 	str.w	r9, [r0]
 80120b4:	4604      	mov	r4, r0
 80120b6:	e7e4      	b.n	8012082 <__pow5mult+0x6a>
 80120b8:	4630      	mov	r0, r6
 80120ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120be:	bf00      	nop
 80120c0:	0801591c 	.word	0x0801591c
 80120c4:	080157e9 	.word	0x080157e9
 80120c8:	0801587a 	.word	0x0801587a

080120cc <__lshift>:
 80120cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120d0:	460c      	mov	r4, r1
 80120d2:	6849      	ldr	r1, [r1, #4]
 80120d4:	6923      	ldr	r3, [r4, #16]
 80120d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80120da:	68a3      	ldr	r3, [r4, #8]
 80120dc:	4607      	mov	r7, r0
 80120de:	4691      	mov	r9, r2
 80120e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80120e4:	f108 0601 	add.w	r6, r8, #1
 80120e8:	42b3      	cmp	r3, r6
 80120ea:	db0b      	blt.n	8012104 <__lshift+0x38>
 80120ec:	4638      	mov	r0, r7
 80120ee:	f7ff fde7 	bl	8011cc0 <_Balloc>
 80120f2:	4605      	mov	r5, r0
 80120f4:	b948      	cbnz	r0, 801210a <__lshift+0x3e>
 80120f6:	4602      	mov	r2, r0
 80120f8:	4b28      	ldr	r3, [pc, #160]	@ (801219c <__lshift+0xd0>)
 80120fa:	4829      	ldr	r0, [pc, #164]	@ (80121a0 <__lshift+0xd4>)
 80120fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012100:	f000 fb94 	bl	801282c <__assert_func>
 8012104:	3101      	adds	r1, #1
 8012106:	005b      	lsls	r3, r3, #1
 8012108:	e7ee      	b.n	80120e8 <__lshift+0x1c>
 801210a:	2300      	movs	r3, #0
 801210c:	f100 0114 	add.w	r1, r0, #20
 8012110:	f100 0210 	add.w	r2, r0, #16
 8012114:	4618      	mov	r0, r3
 8012116:	4553      	cmp	r3, sl
 8012118:	db33      	blt.n	8012182 <__lshift+0xb6>
 801211a:	6920      	ldr	r0, [r4, #16]
 801211c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012120:	f104 0314 	add.w	r3, r4, #20
 8012124:	f019 091f 	ands.w	r9, r9, #31
 8012128:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801212c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012130:	d02b      	beq.n	801218a <__lshift+0xbe>
 8012132:	f1c9 0e20 	rsb	lr, r9, #32
 8012136:	468a      	mov	sl, r1
 8012138:	2200      	movs	r2, #0
 801213a:	6818      	ldr	r0, [r3, #0]
 801213c:	fa00 f009 	lsl.w	r0, r0, r9
 8012140:	4310      	orrs	r0, r2
 8012142:	f84a 0b04 	str.w	r0, [sl], #4
 8012146:	f853 2b04 	ldr.w	r2, [r3], #4
 801214a:	459c      	cmp	ip, r3
 801214c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012150:	d8f3      	bhi.n	801213a <__lshift+0x6e>
 8012152:	ebac 0304 	sub.w	r3, ip, r4
 8012156:	3b15      	subs	r3, #21
 8012158:	f023 0303 	bic.w	r3, r3, #3
 801215c:	3304      	adds	r3, #4
 801215e:	f104 0015 	add.w	r0, r4, #21
 8012162:	4560      	cmp	r0, ip
 8012164:	bf88      	it	hi
 8012166:	2304      	movhi	r3, #4
 8012168:	50ca      	str	r2, [r1, r3]
 801216a:	b10a      	cbz	r2, 8012170 <__lshift+0xa4>
 801216c:	f108 0602 	add.w	r6, r8, #2
 8012170:	3e01      	subs	r6, #1
 8012172:	4638      	mov	r0, r7
 8012174:	612e      	str	r6, [r5, #16]
 8012176:	4621      	mov	r1, r4
 8012178:	f7ff fde2 	bl	8011d40 <_Bfree>
 801217c:	4628      	mov	r0, r5
 801217e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012182:	f842 0f04 	str.w	r0, [r2, #4]!
 8012186:	3301      	adds	r3, #1
 8012188:	e7c5      	b.n	8012116 <__lshift+0x4a>
 801218a:	3904      	subs	r1, #4
 801218c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012190:	f841 2f04 	str.w	r2, [r1, #4]!
 8012194:	459c      	cmp	ip, r3
 8012196:	d8f9      	bhi.n	801218c <__lshift+0xc0>
 8012198:	e7ea      	b.n	8012170 <__lshift+0xa4>
 801219a:	bf00      	nop
 801219c:	08015858 	.word	0x08015858
 80121a0:	0801587a 	.word	0x0801587a

080121a4 <__mcmp>:
 80121a4:	690a      	ldr	r2, [r1, #16]
 80121a6:	4603      	mov	r3, r0
 80121a8:	6900      	ldr	r0, [r0, #16]
 80121aa:	1a80      	subs	r0, r0, r2
 80121ac:	b530      	push	{r4, r5, lr}
 80121ae:	d10e      	bne.n	80121ce <__mcmp+0x2a>
 80121b0:	3314      	adds	r3, #20
 80121b2:	3114      	adds	r1, #20
 80121b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80121b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80121bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80121c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80121c4:	4295      	cmp	r5, r2
 80121c6:	d003      	beq.n	80121d0 <__mcmp+0x2c>
 80121c8:	d205      	bcs.n	80121d6 <__mcmp+0x32>
 80121ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121ce:	bd30      	pop	{r4, r5, pc}
 80121d0:	42a3      	cmp	r3, r4
 80121d2:	d3f3      	bcc.n	80121bc <__mcmp+0x18>
 80121d4:	e7fb      	b.n	80121ce <__mcmp+0x2a>
 80121d6:	2001      	movs	r0, #1
 80121d8:	e7f9      	b.n	80121ce <__mcmp+0x2a>
	...

080121dc <__mdiff>:
 80121dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e0:	4689      	mov	r9, r1
 80121e2:	4606      	mov	r6, r0
 80121e4:	4611      	mov	r1, r2
 80121e6:	4648      	mov	r0, r9
 80121e8:	4614      	mov	r4, r2
 80121ea:	f7ff ffdb 	bl	80121a4 <__mcmp>
 80121ee:	1e05      	subs	r5, r0, #0
 80121f0:	d112      	bne.n	8012218 <__mdiff+0x3c>
 80121f2:	4629      	mov	r1, r5
 80121f4:	4630      	mov	r0, r6
 80121f6:	f7ff fd63 	bl	8011cc0 <_Balloc>
 80121fa:	4602      	mov	r2, r0
 80121fc:	b928      	cbnz	r0, 801220a <__mdiff+0x2e>
 80121fe:	4b3f      	ldr	r3, [pc, #252]	@ (80122fc <__mdiff+0x120>)
 8012200:	f240 2137 	movw	r1, #567	@ 0x237
 8012204:	483e      	ldr	r0, [pc, #248]	@ (8012300 <__mdiff+0x124>)
 8012206:	f000 fb11 	bl	801282c <__assert_func>
 801220a:	2301      	movs	r3, #1
 801220c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012210:	4610      	mov	r0, r2
 8012212:	b003      	add	sp, #12
 8012214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012218:	bfbc      	itt	lt
 801221a:	464b      	movlt	r3, r9
 801221c:	46a1      	movlt	r9, r4
 801221e:	4630      	mov	r0, r6
 8012220:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012224:	bfba      	itte	lt
 8012226:	461c      	movlt	r4, r3
 8012228:	2501      	movlt	r5, #1
 801222a:	2500      	movge	r5, #0
 801222c:	f7ff fd48 	bl	8011cc0 <_Balloc>
 8012230:	4602      	mov	r2, r0
 8012232:	b918      	cbnz	r0, 801223c <__mdiff+0x60>
 8012234:	4b31      	ldr	r3, [pc, #196]	@ (80122fc <__mdiff+0x120>)
 8012236:	f240 2145 	movw	r1, #581	@ 0x245
 801223a:	e7e3      	b.n	8012204 <__mdiff+0x28>
 801223c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012240:	6926      	ldr	r6, [r4, #16]
 8012242:	60c5      	str	r5, [r0, #12]
 8012244:	f109 0310 	add.w	r3, r9, #16
 8012248:	f109 0514 	add.w	r5, r9, #20
 801224c:	f104 0e14 	add.w	lr, r4, #20
 8012250:	f100 0b14 	add.w	fp, r0, #20
 8012254:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012258:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801225c:	9301      	str	r3, [sp, #4]
 801225e:	46d9      	mov	r9, fp
 8012260:	f04f 0c00 	mov.w	ip, #0
 8012264:	9b01      	ldr	r3, [sp, #4]
 8012266:	f85e 0b04 	ldr.w	r0, [lr], #4
 801226a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801226e:	9301      	str	r3, [sp, #4]
 8012270:	fa1f f38a 	uxth.w	r3, sl
 8012274:	4619      	mov	r1, r3
 8012276:	b283      	uxth	r3, r0
 8012278:	1acb      	subs	r3, r1, r3
 801227a:	0c00      	lsrs	r0, r0, #16
 801227c:	4463      	add	r3, ip
 801227e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012282:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012286:	b29b      	uxth	r3, r3
 8012288:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801228c:	4576      	cmp	r6, lr
 801228e:	f849 3b04 	str.w	r3, [r9], #4
 8012292:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012296:	d8e5      	bhi.n	8012264 <__mdiff+0x88>
 8012298:	1b33      	subs	r3, r6, r4
 801229a:	3b15      	subs	r3, #21
 801229c:	f023 0303 	bic.w	r3, r3, #3
 80122a0:	3415      	adds	r4, #21
 80122a2:	3304      	adds	r3, #4
 80122a4:	42a6      	cmp	r6, r4
 80122a6:	bf38      	it	cc
 80122a8:	2304      	movcc	r3, #4
 80122aa:	441d      	add	r5, r3
 80122ac:	445b      	add	r3, fp
 80122ae:	461e      	mov	r6, r3
 80122b0:	462c      	mov	r4, r5
 80122b2:	4544      	cmp	r4, r8
 80122b4:	d30e      	bcc.n	80122d4 <__mdiff+0xf8>
 80122b6:	f108 0103 	add.w	r1, r8, #3
 80122ba:	1b49      	subs	r1, r1, r5
 80122bc:	f021 0103 	bic.w	r1, r1, #3
 80122c0:	3d03      	subs	r5, #3
 80122c2:	45a8      	cmp	r8, r5
 80122c4:	bf38      	it	cc
 80122c6:	2100      	movcc	r1, #0
 80122c8:	440b      	add	r3, r1
 80122ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80122ce:	b191      	cbz	r1, 80122f6 <__mdiff+0x11a>
 80122d0:	6117      	str	r7, [r2, #16]
 80122d2:	e79d      	b.n	8012210 <__mdiff+0x34>
 80122d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80122d8:	46e6      	mov	lr, ip
 80122da:	0c08      	lsrs	r0, r1, #16
 80122dc:	fa1c fc81 	uxtah	ip, ip, r1
 80122e0:	4471      	add	r1, lr
 80122e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80122e6:	b289      	uxth	r1, r1
 80122e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80122ec:	f846 1b04 	str.w	r1, [r6], #4
 80122f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80122f4:	e7dd      	b.n	80122b2 <__mdiff+0xd6>
 80122f6:	3f01      	subs	r7, #1
 80122f8:	e7e7      	b.n	80122ca <__mdiff+0xee>
 80122fa:	bf00      	nop
 80122fc:	08015858 	.word	0x08015858
 8012300:	0801587a 	.word	0x0801587a

08012304 <__d2b>:
 8012304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012308:	460f      	mov	r7, r1
 801230a:	2101      	movs	r1, #1
 801230c:	ec59 8b10 	vmov	r8, r9, d0
 8012310:	4616      	mov	r6, r2
 8012312:	f7ff fcd5 	bl	8011cc0 <_Balloc>
 8012316:	4604      	mov	r4, r0
 8012318:	b930      	cbnz	r0, 8012328 <__d2b+0x24>
 801231a:	4602      	mov	r2, r0
 801231c:	4b23      	ldr	r3, [pc, #140]	@ (80123ac <__d2b+0xa8>)
 801231e:	4824      	ldr	r0, [pc, #144]	@ (80123b0 <__d2b+0xac>)
 8012320:	f240 310f 	movw	r1, #783	@ 0x30f
 8012324:	f000 fa82 	bl	801282c <__assert_func>
 8012328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801232c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012330:	b10d      	cbz	r5, 8012336 <__d2b+0x32>
 8012332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012336:	9301      	str	r3, [sp, #4]
 8012338:	f1b8 0300 	subs.w	r3, r8, #0
 801233c:	d023      	beq.n	8012386 <__d2b+0x82>
 801233e:	4668      	mov	r0, sp
 8012340:	9300      	str	r3, [sp, #0]
 8012342:	f7ff fd84 	bl	8011e4e <__lo0bits>
 8012346:	e9dd 1200 	ldrd	r1, r2, [sp]
 801234a:	b1d0      	cbz	r0, 8012382 <__d2b+0x7e>
 801234c:	f1c0 0320 	rsb	r3, r0, #32
 8012350:	fa02 f303 	lsl.w	r3, r2, r3
 8012354:	430b      	orrs	r3, r1
 8012356:	40c2      	lsrs	r2, r0
 8012358:	6163      	str	r3, [r4, #20]
 801235a:	9201      	str	r2, [sp, #4]
 801235c:	9b01      	ldr	r3, [sp, #4]
 801235e:	61a3      	str	r3, [r4, #24]
 8012360:	2b00      	cmp	r3, #0
 8012362:	bf0c      	ite	eq
 8012364:	2201      	moveq	r2, #1
 8012366:	2202      	movne	r2, #2
 8012368:	6122      	str	r2, [r4, #16]
 801236a:	b1a5      	cbz	r5, 8012396 <__d2b+0x92>
 801236c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012370:	4405      	add	r5, r0
 8012372:	603d      	str	r5, [r7, #0]
 8012374:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012378:	6030      	str	r0, [r6, #0]
 801237a:	4620      	mov	r0, r4
 801237c:	b003      	add	sp, #12
 801237e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012382:	6161      	str	r1, [r4, #20]
 8012384:	e7ea      	b.n	801235c <__d2b+0x58>
 8012386:	a801      	add	r0, sp, #4
 8012388:	f7ff fd61 	bl	8011e4e <__lo0bits>
 801238c:	9b01      	ldr	r3, [sp, #4]
 801238e:	6163      	str	r3, [r4, #20]
 8012390:	3020      	adds	r0, #32
 8012392:	2201      	movs	r2, #1
 8012394:	e7e8      	b.n	8012368 <__d2b+0x64>
 8012396:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801239a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801239e:	6038      	str	r0, [r7, #0]
 80123a0:	6918      	ldr	r0, [r3, #16]
 80123a2:	f7ff fd35 	bl	8011e10 <__hi0bits>
 80123a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80123aa:	e7e5      	b.n	8012378 <__d2b+0x74>
 80123ac:	08015858 	.word	0x08015858
 80123b0:	0801587a 	.word	0x0801587a

080123b4 <__sread>:
 80123b4:	b510      	push	{r4, lr}
 80123b6:	460c      	mov	r4, r1
 80123b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123bc:	f000 f9d2 	bl	8012764 <_read_r>
 80123c0:	2800      	cmp	r0, #0
 80123c2:	bfab      	itete	ge
 80123c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80123c6:	89a3      	ldrhlt	r3, [r4, #12]
 80123c8:	181b      	addge	r3, r3, r0
 80123ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80123ce:	bfac      	ite	ge
 80123d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80123d2:	81a3      	strhlt	r3, [r4, #12]
 80123d4:	bd10      	pop	{r4, pc}

080123d6 <__swrite>:
 80123d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123da:	461f      	mov	r7, r3
 80123dc:	898b      	ldrh	r3, [r1, #12]
 80123de:	05db      	lsls	r3, r3, #23
 80123e0:	4605      	mov	r5, r0
 80123e2:	460c      	mov	r4, r1
 80123e4:	4616      	mov	r6, r2
 80123e6:	d505      	bpl.n	80123f4 <__swrite+0x1e>
 80123e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123ec:	2302      	movs	r3, #2
 80123ee:	2200      	movs	r2, #0
 80123f0:	f000 f9a6 	bl	8012740 <_lseek_r>
 80123f4:	89a3      	ldrh	r3, [r4, #12]
 80123f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80123fe:	81a3      	strh	r3, [r4, #12]
 8012400:	4632      	mov	r2, r6
 8012402:	463b      	mov	r3, r7
 8012404:	4628      	mov	r0, r5
 8012406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801240a:	f000 b9cd 	b.w	80127a8 <_write_r>

0801240e <__sseek>:
 801240e:	b510      	push	{r4, lr}
 8012410:	460c      	mov	r4, r1
 8012412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012416:	f000 f993 	bl	8012740 <_lseek_r>
 801241a:	1c43      	adds	r3, r0, #1
 801241c:	89a3      	ldrh	r3, [r4, #12]
 801241e:	bf15      	itete	ne
 8012420:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012422:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012426:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801242a:	81a3      	strheq	r3, [r4, #12]
 801242c:	bf18      	it	ne
 801242e:	81a3      	strhne	r3, [r4, #12]
 8012430:	bd10      	pop	{r4, pc}

08012432 <__sclose>:
 8012432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012436:	f000 b9c9 	b.w	80127cc <_close_r>

0801243a <_realloc_r>:
 801243a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801243e:	4607      	mov	r7, r0
 8012440:	4614      	mov	r4, r2
 8012442:	460d      	mov	r5, r1
 8012444:	b921      	cbnz	r1, 8012450 <_realloc_r+0x16>
 8012446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801244a:	4611      	mov	r1, r2
 801244c:	f7ff bb00 	b.w	8011a50 <_malloc_r>
 8012450:	b92a      	cbnz	r2, 801245e <_realloc_r+0x24>
 8012452:	f000 fa1d 	bl	8012890 <_free_r>
 8012456:	4625      	mov	r5, r4
 8012458:	4628      	mov	r0, r5
 801245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801245e:	f000 fa73 	bl	8012948 <_malloc_usable_size_r>
 8012462:	4284      	cmp	r4, r0
 8012464:	4606      	mov	r6, r0
 8012466:	d802      	bhi.n	801246e <_realloc_r+0x34>
 8012468:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801246c:	d8f4      	bhi.n	8012458 <_realloc_r+0x1e>
 801246e:	4621      	mov	r1, r4
 8012470:	4638      	mov	r0, r7
 8012472:	f7ff faed 	bl	8011a50 <_malloc_r>
 8012476:	4680      	mov	r8, r0
 8012478:	b908      	cbnz	r0, 801247e <_realloc_r+0x44>
 801247a:	4645      	mov	r5, r8
 801247c:	e7ec      	b.n	8012458 <_realloc_r+0x1e>
 801247e:	42b4      	cmp	r4, r6
 8012480:	4622      	mov	r2, r4
 8012482:	4629      	mov	r1, r5
 8012484:	bf28      	it	cs
 8012486:	4632      	movcs	r2, r6
 8012488:	f000 f9c2 	bl	8012810 <memcpy>
 801248c:	4629      	mov	r1, r5
 801248e:	4638      	mov	r0, r7
 8012490:	f000 f9fe 	bl	8012890 <_free_r>
 8012494:	e7f1      	b.n	801247a <_realloc_r+0x40>

08012496 <__swbuf_r>:
 8012496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012498:	460e      	mov	r6, r1
 801249a:	4614      	mov	r4, r2
 801249c:	4605      	mov	r5, r0
 801249e:	b118      	cbz	r0, 80124a8 <__swbuf_r+0x12>
 80124a0:	6a03      	ldr	r3, [r0, #32]
 80124a2:	b90b      	cbnz	r3, 80124a8 <__swbuf_r+0x12>
 80124a4:	f7fe f8d0 	bl	8010648 <__sinit>
 80124a8:	69a3      	ldr	r3, [r4, #24]
 80124aa:	60a3      	str	r3, [r4, #8]
 80124ac:	89a3      	ldrh	r3, [r4, #12]
 80124ae:	071a      	lsls	r2, r3, #28
 80124b0:	d501      	bpl.n	80124b6 <__swbuf_r+0x20>
 80124b2:	6923      	ldr	r3, [r4, #16]
 80124b4:	b943      	cbnz	r3, 80124c8 <__swbuf_r+0x32>
 80124b6:	4621      	mov	r1, r4
 80124b8:	4628      	mov	r0, r5
 80124ba:	f000 f82b 	bl	8012514 <__swsetup_r>
 80124be:	b118      	cbz	r0, 80124c8 <__swbuf_r+0x32>
 80124c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80124c4:	4638      	mov	r0, r7
 80124c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124c8:	6823      	ldr	r3, [r4, #0]
 80124ca:	6922      	ldr	r2, [r4, #16]
 80124cc:	1a98      	subs	r0, r3, r2
 80124ce:	6963      	ldr	r3, [r4, #20]
 80124d0:	b2f6      	uxtb	r6, r6
 80124d2:	4283      	cmp	r3, r0
 80124d4:	4637      	mov	r7, r6
 80124d6:	dc05      	bgt.n	80124e4 <__swbuf_r+0x4e>
 80124d8:	4621      	mov	r1, r4
 80124da:	4628      	mov	r0, r5
 80124dc:	f7ff fbbc 	bl	8011c58 <_fflush_r>
 80124e0:	2800      	cmp	r0, #0
 80124e2:	d1ed      	bne.n	80124c0 <__swbuf_r+0x2a>
 80124e4:	68a3      	ldr	r3, [r4, #8]
 80124e6:	3b01      	subs	r3, #1
 80124e8:	60a3      	str	r3, [r4, #8]
 80124ea:	6823      	ldr	r3, [r4, #0]
 80124ec:	1c5a      	adds	r2, r3, #1
 80124ee:	6022      	str	r2, [r4, #0]
 80124f0:	701e      	strb	r6, [r3, #0]
 80124f2:	6962      	ldr	r2, [r4, #20]
 80124f4:	1c43      	adds	r3, r0, #1
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d004      	beq.n	8012504 <__swbuf_r+0x6e>
 80124fa:	89a3      	ldrh	r3, [r4, #12]
 80124fc:	07db      	lsls	r3, r3, #31
 80124fe:	d5e1      	bpl.n	80124c4 <__swbuf_r+0x2e>
 8012500:	2e0a      	cmp	r6, #10
 8012502:	d1df      	bne.n	80124c4 <__swbuf_r+0x2e>
 8012504:	4621      	mov	r1, r4
 8012506:	4628      	mov	r0, r5
 8012508:	f7ff fba6 	bl	8011c58 <_fflush_r>
 801250c:	2800      	cmp	r0, #0
 801250e:	d0d9      	beq.n	80124c4 <__swbuf_r+0x2e>
 8012510:	e7d6      	b.n	80124c0 <__swbuf_r+0x2a>
	...

08012514 <__swsetup_r>:
 8012514:	b538      	push	{r3, r4, r5, lr}
 8012516:	4b29      	ldr	r3, [pc, #164]	@ (80125bc <__swsetup_r+0xa8>)
 8012518:	4605      	mov	r5, r0
 801251a:	6818      	ldr	r0, [r3, #0]
 801251c:	460c      	mov	r4, r1
 801251e:	b118      	cbz	r0, 8012528 <__swsetup_r+0x14>
 8012520:	6a03      	ldr	r3, [r0, #32]
 8012522:	b90b      	cbnz	r3, 8012528 <__swsetup_r+0x14>
 8012524:	f7fe f890 	bl	8010648 <__sinit>
 8012528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801252c:	0719      	lsls	r1, r3, #28
 801252e:	d422      	bmi.n	8012576 <__swsetup_r+0x62>
 8012530:	06da      	lsls	r2, r3, #27
 8012532:	d407      	bmi.n	8012544 <__swsetup_r+0x30>
 8012534:	2209      	movs	r2, #9
 8012536:	602a      	str	r2, [r5, #0]
 8012538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801253c:	81a3      	strh	r3, [r4, #12]
 801253e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012542:	e033      	b.n	80125ac <__swsetup_r+0x98>
 8012544:	0758      	lsls	r0, r3, #29
 8012546:	d512      	bpl.n	801256e <__swsetup_r+0x5a>
 8012548:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801254a:	b141      	cbz	r1, 801255e <__swsetup_r+0x4a>
 801254c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012550:	4299      	cmp	r1, r3
 8012552:	d002      	beq.n	801255a <__swsetup_r+0x46>
 8012554:	4628      	mov	r0, r5
 8012556:	f000 f99b 	bl	8012890 <_free_r>
 801255a:	2300      	movs	r3, #0
 801255c:	6363      	str	r3, [r4, #52]	@ 0x34
 801255e:	89a3      	ldrh	r3, [r4, #12]
 8012560:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012564:	81a3      	strh	r3, [r4, #12]
 8012566:	2300      	movs	r3, #0
 8012568:	6063      	str	r3, [r4, #4]
 801256a:	6923      	ldr	r3, [r4, #16]
 801256c:	6023      	str	r3, [r4, #0]
 801256e:	89a3      	ldrh	r3, [r4, #12]
 8012570:	f043 0308 	orr.w	r3, r3, #8
 8012574:	81a3      	strh	r3, [r4, #12]
 8012576:	6923      	ldr	r3, [r4, #16]
 8012578:	b94b      	cbnz	r3, 801258e <__swsetup_r+0x7a>
 801257a:	89a3      	ldrh	r3, [r4, #12]
 801257c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012584:	d003      	beq.n	801258e <__swsetup_r+0x7a>
 8012586:	4621      	mov	r1, r4
 8012588:	4628      	mov	r0, r5
 801258a:	f000 f83f 	bl	801260c <__smakebuf_r>
 801258e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012592:	f013 0201 	ands.w	r2, r3, #1
 8012596:	d00a      	beq.n	80125ae <__swsetup_r+0x9a>
 8012598:	2200      	movs	r2, #0
 801259a:	60a2      	str	r2, [r4, #8]
 801259c:	6962      	ldr	r2, [r4, #20]
 801259e:	4252      	negs	r2, r2
 80125a0:	61a2      	str	r2, [r4, #24]
 80125a2:	6922      	ldr	r2, [r4, #16]
 80125a4:	b942      	cbnz	r2, 80125b8 <__swsetup_r+0xa4>
 80125a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80125aa:	d1c5      	bne.n	8012538 <__swsetup_r+0x24>
 80125ac:	bd38      	pop	{r3, r4, r5, pc}
 80125ae:	0799      	lsls	r1, r3, #30
 80125b0:	bf58      	it	pl
 80125b2:	6962      	ldrpl	r2, [r4, #20]
 80125b4:	60a2      	str	r2, [r4, #8]
 80125b6:	e7f4      	b.n	80125a2 <__swsetup_r+0x8e>
 80125b8:	2000      	movs	r0, #0
 80125ba:	e7f7      	b.n	80125ac <__swsetup_r+0x98>
 80125bc:	200000a4 	.word	0x200000a4

080125c0 <__swhatbuf_r>:
 80125c0:	b570      	push	{r4, r5, r6, lr}
 80125c2:	460c      	mov	r4, r1
 80125c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125c8:	2900      	cmp	r1, #0
 80125ca:	b096      	sub	sp, #88	@ 0x58
 80125cc:	4615      	mov	r5, r2
 80125ce:	461e      	mov	r6, r3
 80125d0:	da0d      	bge.n	80125ee <__swhatbuf_r+0x2e>
 80125d2:	89a3      	ldrh	r3, [r4, #12]
 80125d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80125d8:	f04f 0100 	mov.w	r1, #0
 80125dc:	bf14      	ite	ne
 80125de:	2340      	movne	r3, #64	@ 0x40
 80125e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80125e4:	2000      	movs	r0, #0
 80125e6:	6031      	str	r1, [r6, #0]
 80125e8:	602b      	str	r3, [r5, #0]
 80125ea:	b016      	add	sp, #88	@ 0x58
 80125ec:	bd70      	pop	{r4, r5, r6, pc}
 80125ee:	466a      	mov	r2, sp
 80125f0:	f000 f8fc 	bl	80127ec <_fstat_r>
 80125f4:	2800      	cmp	r0, #0
 80125f6:	dbec      	blt.n	80125d2 <__swhatbuf_r+0x12>
 80125f8:	9901      	ldr	r1, [sp, #4]
 80125fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80125fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012602:	4259      	negs	r1, r3
 8012604:	4159      	adcs	r1, r3
 8012606:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801260a:	e7eb      	b.n	80125e4 <__swhatbuf_r+0x24>

0801260c <__smakebuf_r>:
 801260c:	898b      	ldrh	r3, [r1, #12]
 801260e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012610:	079d      	lsls	r5, r3, #30
 8012612:	4606      	mov	r6, r0
 8012614:	460c      	mov	r4, r1
 8012616:	d507      	bpl.n	8012628 <__smakebuf_r+0x1c>
 8012618:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801261c:	6023      	str	r3, [r4, #0]
 801261e:	6123      	str	r3, [r4, #16]
 8012620:	2301      	movs	r3, #1
 8012622:	6163      	str	r3, [r4, #20]
 8012624:	b003      	add	sp, #12
 8012626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012628:	ab01      	add	r3, sp, #4
 801262a:	466a      	mov	r2, sp
 801262c:	f7ff ffc8 	bl	80125c0 <__swhatbuf_r>
 8012630:	9f00      	ldr	r7, [sp, #0]
 8012632:	4605      	mov	r5, r0
 8012634:	4639      	mov	r1, r7
 8012636:	4630      	mov	r0, r6
 8012638:	f7ff fa0a 	bl	8011a50 <_malloc_r>
 801263c:	b948      	cbnz	r0, 8012652 <__smakebuf_r+0x46>
 801263e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012642:	059a      	lsls	r2, r3, #22
 8012644:	d4ee      	bmi.n	8012624 <__smakebuf_r+0x18>
 8012646:	f023 0303 	bic.w	r3, r3, #3
 801264a:	f043 0302 	orr.w	r3, r3, #2
 801264e:	81a3      	strh	r3, [r4, #12]
 8012650:	e7e2      	b.n	8012618 <__smakebuf_r+0xc>
 8012652:	89a3      	ldrh	r3, [r4, #12]
 8012654:	6020      	str	r0, [r4, #0]
 8012656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801265a:	81a3      	strh	r3, [r4, #12]
 801265c:	9b01      	ldr	r3, [sp, #4]
 801265e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012662:	b15b      	cbz	r3, 801267c <__smakebuf_r+0x70>
 8012664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012668:	4630      	mov	r0, r6
 801266a:	f000 f859 	bl	8012720 <_isatty_r>
 801266e:	b128      	cbz	r0, 801267c <__smakebuf_r+0x70>
 8012670:	89a3      	ldrh	r3, [r4, #12]
 8012672:	f023 0303 	bic.w	r3, r3, #3
 8012676:	f043 0301 	orr.w	r3, r3, #1
 801267a:	81a3      	strh	r3, [r4, #12]
 801267c:	89a3      	ldrh	r3, [r4, #12]
 801267e:	431d      	orrs	r5, r3
 8012680:	81a5      	strh	r5, [r4, #12]
 8012682:	e7cf      	b.n	8012624 <__smakebuf_r+0x18>

08012684 <_putc_r>:
 8012684:	b570      	push	{r4, r5, r6, lr}
 8012686:	460d      	mov	r5, r1
 8012688:	4614      	mov	r4, r2
 801268a:	4606      	mov	r6, r0
 801268c:	b118      	cbz	r0, 8012696 <_putc_r+0x12>
 801268e:	6a03      	ldr	r3, [r0, #32]
 8012690:	b90b      	cbnz	r3, 8012696 <_putc_r+0x12>
 8012692:	f7fd ffd9 	bl	8010648 <__sinit>
 8012696:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012698:	07d8      	lsls	r0, r3, #31
 801269a:	d405      	bmi.n	80126a8 <_putc_r+0x24>
 801269c:	89a3      	ldrh	r3, [r4, #12]
 801269e:	0599      	lsls	r1, r3, #22
 80126a0:	d402      	bmi.n	80126a8 <_putc_r+0x24>
 80126a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126a4:	f7fe f8b1 	bl	801080a <__retarget_lock_acquire_recursive>
 80126a8:	68a3      	ldr	r3, [r4, #8]
 80126aa:	3b01      	subs	r3, #1
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	60a3      	str	r3, [r4, #8]
 80126b0:	da05      	bge.n	80126be <_putc_r+0x3a>
 80126b2:	69a2      	ldr	r2, [r4, #24]
 80126b4:	4293      	cmp	r3, r2
 80126b6:	db12      	blt.n	80126de <_putc_r+0x5a>
 80126b8:	b2eb      	uxtb	r3, r5
 80126ba:	2b0a      	cmp	r3, #10
 80126bc:	d00f      	beq.n	80126de <_putc_r+0x5a>
 80126be:	6823      	ldr	r3, [r4, #0]
 80126c0:	1c5a      	adds	r2, r3, #1
 80126c2:	6022      	str	r2, [r4, #0]
 80126c4:	701d      	strb	r5, [r3, #0]
 80126c6:	b2ed      	uxtb	r5, r5
 80126c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80126ca:	07da      	lsls	r2, r3, #31
 80126cc:	d405      	bmi.n	80126da <_putc_r+0x56>
 80126ce:	89a3      	ldrh	r3, [r4, #12]
 80126d0:	059b      	lsls	r3, r3, #22
 80126d2:	d402      	bmi.n	80126da <_putc_r+0x56>
 80126d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126d6:	f7fe f899 	bl	801080c <__retarget_lock_release_recursive>
 80126da:	4628      	mov	r0, r5
 80126dc:	bd70      	pop	{r4, r5, r6, pc}
 80126de:	4629      	mov	r1, r5
 80126e0:	4622      	mov	r2, r4
 80126e2:	4630      	mov	r0, r6
 80126e4:	f7ff fed7 	bl	8012496 <__swbuf_r>
 80126e8:	4605      	mov	r5, r0
 80126ea:	e7ed      	b.n	80126c8 <_putc_r+0x44>

080126ec <memmove>:
 80126ec:	4288      	cmp	r0, r1
 80126ee:	b510      	push	{r4, lr}
 80126f0:	eb01 0402 	add.w	r4, r1, r2
 80126f4:	d902      	bls.n	80126fc <memmove+0x10>
 80126f6:	4284      	cmp	r4, r0
 80126f8:	4623      	mov	r3, r4
 80126fa:	d807      	bhi.n	801270c <memmove+0x20>
 80126fc:	1e43      	subs	r3, r0, #1
 80126fe:	42a1      	cmp	r1, r4
 8012700:	d008      	beq.n	8012714 <memmove+0x28>
 8012702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012706:	f803 2f01 	strb.w	r2, [r3, #1]!
 801270a:	e7f8      	b.n	80126fe <memmove+0x12>
 801270c:	4402      	add	r2, r0
 801270e:	4601      	mov	r1, r0
 8012710:	428a      	cmp	r2, r1
 8012712:	d100      	bne.n	8012716 <memmove+0x2a>
 8012714:	bd10      	pop	{r4, pc}
 8012716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801271a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801271e:	e7f7      	b.n	8012710 <memmove+0x24>

08012720 <_isatty_r>:
 8012720:	b538      	push	{r3, r4, r5, lr}
 8012722:	4d06      	ldr	r5, [pc, #24]	@ (801273c <_isatty_r+0x1c>)
 8012724:	2300      	movs	r3, #0
 8012726:	4604      	mov	r4, r0
 8012728:	4608      	mov	r0, r1
 801272a:	602b      	str	r3, [r5, #0]
 801272c:	f7f0 fd58 	bl	80031e0 <_isatty>
 8012730:	1c43      	adds	r3, r0, #1
 8012732:	d102      	bne.n	801273a <_isatty_r+0x1a>
 8012734:	682b      	ldr	r3, [r5, #0]
 8012736:	b103      	cbz	r3, 801273a <_isatty_r+0x1a>
 8012738:	6023      	str	r3, [r4, #0]
 801273a:	bd38      	pop	{r3, r4, r5, pc}
 801273c:	200007e0 	.word	0x200007e0

08012740 <_lseek_r>:
 8012740:	b538      	push	{r3, r4, r5, lr}
 8012742:	4d07      	ldr	r5, [pc, #28]	@ (8012760 <_lseek_r+0x20>)
 8012744:	4604      	mov	r4, r0
 8012746:	4608      	mov	r0, r1
 8012748:	4611      	mov	r1, r2
 801274a:	2200      	movs	r2, #0
 801274c:	602a      	str	r2, [r5, #0]
 801274e:	461a      	mov	r2, r3
 8012750:	f7f0 fd51 	bl	80031f6 <_lseek>
 8012754:	1c43      	adds	r3, r0, #1
 8012756:	d102      	bne.n	801275e <_lseek_r+0x1e>
 8012758:	682b      	ldr	r3, [r5, #0]
 801275a:	b103      	cbz	r3, 801275e <_lseek_r+0x1e>
 801275c:	6023      	str	r3, [r4, #0]
 801275e:	bd38      	pop	{r3, r4, r5, pc}
 8012760:	200007e0 	.word	0x200007e0

08012764 <_read_r>:
 8012764:	b538      	push	{r3, r4, r5, lr}
 8012766:	4d07      	ldr	r5, [pc, #28]	@ (8012784 <_read_r+0x20>)
 8012768:	4604      	mov	r4, r0
 801276a:	4608      	mov	r0, r1
 801276c:	4611      	mov	r1, r2
 801276e:	2200      	movs	r2, #0
 8012770:	602a      	str	r2, [r5, #0]
 8012772:	461a      	mov	r2, r3
 8012774:	f7f0 fcfb 	bl	800316e <_read>
 8012778:	1c43      	adds	r3, r0, #1
 801277a:	d102      	bne.n	8012782 <_read_r+0x1e>
 801277c:	682b      	ldr	r3, [r5, #0]
 801277e:	b103      	cbz	r3, 8012782 <_read_r+0x1e>
 8012780:	6023      	str	r3, [r4, #0]
 8012782:	bd38      	pop	{r3, r4, r5, pc}
 8012784:	200007e0 	.word	0x200007e0

08012788 <_sbrk_r>:
 8012788:	b538      	push	{r3, r4, r5, lr}
 801278a:	4d06      	ldr	r5, [pc, #24]	@ (80127a4 <_sbrk_r+0x1c>)
 801278c:	2300      	movs	r3, #0
 801278e:	4604      	mov	r4, r0
 8012790:	4608      	mov	r0, r1
 8012792:	602b      	str	r3, [r5, #0]
 8012794:	f7f0 fd3c 	bl	8003210 <_sbrk>
 8012798:	1c43      	adds	r3, r0, #1
 801279a:	d102      	bne.n	80127a2 <_sbrk_r+0x1a>
 801279c:	682b      	ldr	r3, [r5, #0]
 801279e:	b103      	cbz	r3, 80127a2 <_sbrk_r+0x1a>
 80127a0:	6023      	str	r3, [r4, #0]
 80127a2:	bd38      	pop	{r3, r4, r5, pc}
 80127a4:	200007e0 	.word	0x200007e0

080127a8 <_write_r>:
 80127a8:	b538      	push	{r3, r4, r5, lr}
 80127aa:	4d07      	ldr	r5, [pc, #28]	@ (80127c8 <_write_r+0x20>)
 80127ac:	4604      	mov	r4, r0
 80127ae:	4608      	mov	r0, r1
 80127b0:	4611      	mov	r1, r2
 80127b2:	2200      	movs	r2, #0
 80127b4:	602a      	str	r2, [r5, #0]
 80127b6:	461a      	mov	r2, r3
 80127b8:	f7ef fe5c 	bl	8002474 <_write>
 80127bc:	1c43      	adds	r3, r0, #1
 80127be:	d102      	bne.n	80127c6 <_write_r+0x1e>
 80127c0:	682b      	ldr	r3, [r5, #0]
 80127c2:	b103      	cbz	r3, 80127c6 <_write_r+0x1e>
 80127c4:	6023      	str	r3, [r4, #0]
 80127c6:	bd38      	pop	{r3, r4, r5, pc}
 80127c8:	200007e0 	.word	0x200007e0

080127cc <_close_r>:
 80127cc:	b538      	push	{r3, r4, r5, lr}
 80127ce:	4d06      	ldr	r5, [pc, #24]	@ (80127e8 <_close_r+0x1c>)
 80127d0:	2300      	movs	r3, #0
 80127d2:	4604      	mov	r4, r0
 80127d4:	4608      	mov	r0, r1
 80127d6:	602b      	str	r3, [r5, #0]
 80127d8:	f7f0 fce6 	bl	80031a8 <_close>
 80127dc:	1c43      	adds	r3, r0, #1
 80127de:	d102      	bne.n	80127e6 <_close_r+0x1a>
 80127e0:	682b      	ldr	r3, [r5, #0]
 80127e2:	b103      	cbz	r3, 80127e6 <_close_r+0x1a>
 80127e4:	6023      	str	r3, [r4, #0]
 80127e6:	bd38      	pop	{r3, r4, r5, pc}
 80127e8:	200007e0 	.word	0x200007e0

080127ec <_fstat_r>:
 80127ec:	b538      	push	{r3, r4, r5, lr}
 80127ee:	4d07      	ldr	r5, [pc, #28]	@ (801280c <_fstat_r+0x20>)
 80127f0:	2300      	movs	r3, #0
 80127f2:	4604      	mov	r4, r0
 80127f4:	4608      	mov	r0, r1
 80127f6:	4611      	mov	r1, r2
 80127f8:	602b      	str	r3, [r5, #0]
 80127fa:	f7f0 fce1 	bl	80031c0 <_fstat>
 80127fe:	1c43      	adds	r3, r0, #1
 8012800:	d102      	bne.n	8012808 <_fstat_r+0x1c>
 8012802:	682b      	ldr	r3, [r5, #0]
 8012804:	b103      	cbz	r3, 8012808 <_fstat_r+0x1c>
 8012806:	6023      	str	r3, [r4, #0]
 8012808:	bd38      	pop	{r3, r4, r5, pc}
 801280a:	bf00      	nop
 801280c:	200007e0 	.word	0x200007e0

08012810 <memcpy>:
 8012810:	440a      	add	r2, r1
 8012812:	4291      	cmp	r1, r2
 8012814:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012818:	d100      	bne.n	801281c <memcpy+0xc>
 801281a:	4770      	bx	lr
 801281c:	b510      	push	{r4, lr}
 801281e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012826:	4291      	cmp	r1, r2
 8012828:	d1f9      	bne.n	801281e <memcpy+0xe>
 801282a:	bd10      	pop	{r4, pc}

0801282c <__assert_func>:
 801282c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801282e:	4614      	mov	r4, r2
 8012830:	461a      	mov	r2, r3
 8012832:	4b09      	ldr	r3, [pc, #36]	@ (8012858 <__assert_func+0x2c>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4605      	mov	r5, r0
 8012838:	68d8      	ldr	r0, [r3, #12]
 801283a:	b14c      	cbz	r4, 8012850 <__assert_func+0x24>
 801283c:	4b07      	ldr	r3, [pc, #28]	@ (801285c <__assert_func+0x30>)
 801283e:	9100      	str	r1, [sp, #0]
 8012840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012844:	4906      	ldr	r1, [pc, #24]	@ (8012860 <__assert_func+0x34>)
 8012846:	462b      	mov	r3, r5
 8012848:	f000 f886 	bl	8012958 <fiprintf>
 801284c:	f000 f8a3 	bl	8012996 <abort>
 8012850:	4b04      	ldr	r3, [pc, #16]	@ (8012864 <__assert_func+0x38>)
 8012852:	461c      	mov	r4, r3
 8012854:	e7f3      	b.n	801283e <__assert_func+0x12>
 8012856:	bf00      	nop
 8012858:	200000a4 	.word	0x200000a4
 801285c:	080158dd 	.word	0x080158dd
 8012860:	080158ea 	.word	0x080158ea
 8012864:	08015918 	.word	0x08015918

08012868 <_calloc_r>:
 8012868:	b570      	push	{r4, r5, r6, lr}
 801286a:	fba1 5402 	umull	r5, r4, r1, r2
 801286e:	b934      	cbnz	r4, 801287e <_calloc_r+0x16>
 8012870:	4629      	mov	r1, r5
 8012872:	f7ff f8ed 	bl	8011a50 <_malloc_r>
 8012876:	4606      	mov	r6, r0
 8012878:	b928      	cbnz	r0, 8012886 <_calloc_r+0x1e>
 801287a:	4630      	mov	r0, r6
 801287c:	bd70      	pop	{r4, r5, r6, pc}
 801287e:	220c      	movs	r2, #12
 8012880:	6002      	str	r2, [r0, #0]
 8012882:	2600      	movs	r6, #0
 8012884:	e7f9      	b.n	801287a <_calloc_r+0x12>
 8012886:	462a      	mov	r2, r5
 8012888:	4621      	mov	r1, r4
 801288a:	f7fd ff8b 	bl	80107a4 <memset>
 801288e:	e7f4      	b.n	801287a <_calloc_r+0x12>

08012890 <_free_r>:
 8012890:	b538      	push	{r3, r4, r5, lr}
 8012892:	4605      	mov	r5, r0
 8012894:	2900      	cmp	r1, #0
 8012896:	d041      	beq.n	801291c <_free_r+0x8c>
 8012898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801289c:	1f0c      	subs	r4, r1, #4
 801289e:	2b00      	cmp	r3, #0
 80128a0:	bfb8      	it	lt
 80128a2:	18e4      	addlt	r4, r4, r3
 80128a4:	f7ff fa00 	bl	8011ca8 <__malloc_lock>
 80128a8:	4a1d      	ldr	r2, [pc, #116]	@ (8012920 <_free_r+0x90>)
 80128aa:	6813      	ldr	r3, [r2, #0]
 80128ac:	b933      	cbnz	r3, 80128bc <_free_r+0x2c>
 80128ae:	6063      	str	r3, [r4, #4]
 80128b0:	6014      	str	r4, [r2, #0]
 80128b2:	4628      	mov	r0, r5
 80128b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128b8:	f7ff b9fc 	b.w	8011cb4 <__malloc_unlock>
 80128bc:	42a3      	cmp	r3, r4
 80128be:	d908      	bls.n	80128d2 <_free_r+0x42>
 80128c0:	6820      	ldr	r0, [r4, #0]
 80128c2:	1821      	adds	r1, r4, r0
 80128c4:	428b      	cmp	r3, r1
 80128c6:	bf01      	itttt	eq
 80128c8:	6819      	ldreq	r1, [r3, #0]
 80128ca:	685b      	ldreq	r3, [r3, #4]
 80128cc:	1809      	addeq	r1, r1, r0
 80128ce:	6021      	streq	r1, [r4, #0]
 80128d0:	e7ed      	b.n	80128ae <_free_r+0x1e>
 80128d2:	461a      	mov	r2, r3
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	b10b      	cbz	r3, 80128dc <_free_r+0x4c>
 80128d8:	42a3      	cmp	r3, r4
 80128da:	d9fa      	bls.n	80128d2 <_free_r+0x42>
 80128dc:	6811      	ldr	r1, [r2, #0]
 80128de:	1850      	adds	r0, r2, r1
 80128e0:	42a0      	cmp	r0, r4
 80128e2:	d10b      	bne.n	80128fc <_free_r+0x6c>
 80128e4:	6820      	ldr	r0, [r4, #0]
 80128e6:	4401      	add	r1, r0
 80128e8:	1850      	adds	r0, r2, r1
 80128ea:	4283      	cmp	r3, r0
 80128ec:	6011      	str	r1, [r2, #0]
 80128ee:	d1e0      	bne.n	80128b2 <_free_r+0x22>
 80128f0:	6818      	ldr	r0, [r3, #0]
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	6053      	str	r3, [r2, #4]
 80128f6:	4408      	add	r0, r1
 80128f8:	6010      	str	r0, [r2, #0]
 80128fa:	e7da      	b.n	80128b2 <_free_r+0x22>
 80128fc:	d902      	bls.n	8012904 <_free_r+0x74>
 80128fe:	230c      	movs	r3, #12
 8012900:	602b      	str	r3, [r5, #0]
 8012902:	e7d6      	b.n	80128b2 <_free_r+0x22>
 8012904:	6820      	ldr	r0, [r4, #0]
 8012906:	1821      	adds	r1, r4, r0
 8012908:	428b      	cmp	r3, r1
 801290a:	bf04      	itt	eq
 801290c:	6819      	ldreq	r1, [r3, #0]
 801290e:	685b      	ldreq	r3, [r3, #4]
 8012910:	6063      	str	r3, [r4, #4]
 8012912:	bf04      	itt	eq
 8012914:	1809      	addeq	r1, r1, r0
 8012916:	6021      	streq	r1, [r4, #0]
 8012918:	6054      	str	r4, [r2, #4]
 801291a:	e7ca      	b.n	80128b2 <_free_r+0x22>
 801291c:	bd38      	pop	{r3, r4, r5, pc}
 801291e:	bf00      	nop
 8012920:	200007dc 	.word	0x200007dc

08012924 <__ascii_mbtowc>:
 8012924:	b082      	sub	sp, #8
 8012926:	b901      	cbnz	r1, 801292a <__ascii_mbtowc+0x6>
 8012928:	a901      	add	r1, sp, #4
 801292a:	b142      	cbz	r2, 801293e <__ascii_mbtowc+0x1a>
 801292c:	b14b      	cbz	r3, 8012942 <__ascii_mbtowc+0x1e>
 801292e:	7813      	ldrb	r3, [r2, #0]
 8012930:	600b      	str	r3, [r1, #0]
 8012932:	7812      	ldrb	r2, [r2, #0]
 8012934:	1e10      	subs	r0, r2, #0
 8012936:	bf18      	it	ne
 8012938:	2001      	movne	r0, #1
 801293a:	b002      	add	sp, #8
 801293c:	4770      	bx	lr
 801293e:	4610      	mov	r0, r2
 8012940:	e7fb      	b.n	801293a <__ascii_mbtowc+0x16>
 8012942:	f06f 0001 	mvn.w	r0, #1
 8012946:	e7f8      	b.n	801293a <__ascii_mbtowc+0x16>

08012948 <_malloc_usable_size_r>:
 8012948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801294c:	1f18      	subs	r0, r3, #4
 801294e:	2b00      	cmp	r3, #0
 8012950:	bfbc      	itt	lt
 8012952:	580b      	ldrlt	r3, [r1, r0]
 8012954:	18c0      	addlt	r0, r0, r3
 8012956:	4770      	bx	lr

08012958 <fiprintf>:
 8012958:	b40e      	push	{r1, r2, r3}
 801295a:	b503      	push	{r0, r1, lr}
 801295c:	4601      	mov	r1, r0
 801295e:	ab03      	add	r3, sp, #12
 8012960:	4805      	ldr	r0, [pc, #20]	@ (8012978 <fiprintf+0x20>)
 8012962:	f853 2b04 	ldr.w	r2, [r3], #4
 8012966:	6800      	ldr	r0, [r0, #0]
 8012968:	9301      	str	r3, [sp, #4]
 801296a:	f7fe ff2f 	bl	80117cc <_vfiprintf_r>
 801296e:	b002      	add	sp, #8
 8012970:	f85d eb04 	ldr.w	lr, [sp], #4
 8012974:	b003      	add	sp, #12
 8012976:	4770      	bx	lr
 8012978:	200000a4 	.word	0x200000a4

0801297c <__ascii_wctomb>:
 801297c:	4603      	mov	r3, r0
 801297e:	4608      	mov	r0, r1
 8012980:	b141      	cbz	r1, 8012994 <__ascii_wctomb+0x18>
 8012982:	2aff      	cmp	r2, #255	@ 0xff
 8012984:	d904      	bls.n	8012990 <__ascii_wctomb+0x14>
 8012986:	228a      	movs	r2, #138	@ 0x8a
 8012988:	601a      	str	r2, [r3, #0]
 801298a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801298e:	4770      	bx	lr
 8012990:	700a      	strb	r2, [r1, #0]
 8012992:	2001      	movs	r0, #1
 8012994:	4770      	bx	lr

08012996 <abort>:
 8012996:	b508      	push	{r3, lr}
 8012998:	2006      	movs	r0, #6
 801299a:	f000 f82b 	bl	80129f4 <raise>
 801299e:	2001      	movs	r0, #1
 80129a0:	f7f0 fbda 	bl	8003158 <_exit>

080129a4 <_raise_r>:
 80129a4:	291f      	cmp	r1, #31
 80129a6:	b538      	push	{r3, r4, r5, lr}
 80129a8:	4605      	mov	r5, r0
 80129aa:	460c      	mov	r4, r1
 80129ac:	d904      	bls.n	80129b8 <_raise_r+0x14>
 80129ae:	2316      	movs	r3, #22
 80129b0:	6003      	str	r3, [r0, #0]
 80129b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129b6:	bd38      	pop	{r3, r4, r5, pc}
 80129b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80129ba:	b112      	cbz	r2, 80129c2 <_raise_r+0x1e>
 80129bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129c0:	b94b      	cbnz	r3, 80129d6 <_raise_r+0x32>
 80129c2:	4628      	mov	r0, r5
 80129c4:	f000 f830 	bl	8012a28 <_getpid_r>
 80129c8:	4622      	mov	r2, r4
 80129ca:	4601      	mov	r1, r0
 80129cc:	4628      	mov	r0, r5
 80129ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129d2:	f000 b817 	b.w	8012a04 <_kill_r>
 80129d6:	2b01      	cmp	r3, #1
 80129d8:	d00a      	beq.n	80129f0 <_raise_r+0x4c>
 80129da:	1c59      	adds	r1, r3, #1
 80129dc:	d103      	bne.n	80129e6 <_raise_r+0x42>
 80129de:	2316      	movs	r3, #22
 80129e0:	6003      	str	r3, [r0, #0]
 80129e2:	2001      	movs	r0, #1
 80129e4:	e7e7      	b.n	80129b6 <_raise_r+0x12>
 80129e6:	2100      	movs	r1, #0
 80129e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80129ec:	4620      	mov	r0, r4
 80129ee:	4798      	blx	r3
 80129f0:	2000      	movs	r0, #0
 80129f2:	e7e0      	b.n	80129b6 <_raise_r+0x12>

080129f4 <raise>:
 80129f4:	4b02      	ldr	r3, [pc, #8]	@ (8012a00 <raise+0xc>)
 80129f6:	4601      	mov	r1, r0
 80129f8:	6818      	ldr	r0, [r3, #0]
 80129fa:	f7ff bfd3 	b.w	80129a4 <_raise_r>
 80129fe:	bf00      	nop
 8012a00:	200000a4 	.word	0x200000a4

08012a04 <_kill_r>:
 8012a04:	b538      	push	{r3, r4, r5, lr}
 8012a06:	4d07      	ldr	r5, [pc, #28]	@ (8012a24 <_kill_r+0x20>)
 8012a08:	2300      	movs	r3, #0
 8012a0a:	4604      	mov	r4, r0
 8012a0c:	4608      	mov	r0, r1
 8012a0e:	4611      	mov	r1, r2
 8012a10:	602b      	str	r3, [r5, #0]
 8012a12:	f7f0 fb91 	bl	8003138 <_kill>
 8012a16:	1c43      	adds	r3, r0, #1
 8012a18:	d102      	bne.n	8012a20 <_kill_r+0x1c>
 8012a1a:	682b      	ldr	r3, [r5, #0]
 8012a1c:	b103      	cbz	r3, 8012a20 <_kill_r+0x1c>
 8012a1e:	6023      	str	r3, [r4, #0]
 8012a20:	bd38      	pop	{r3, r4, r5, pc}
 8012a22:	bf00      	nop
 8012a24:	200007e0 	.word	0x200007e0

08012a28 <_getpid_r>:
 8012a28:	f7f0 bb7e 	b.w	8003128 <_getpid>

08012a2c <_init>:
 8012a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a2e:	bf00      	nop
 8012a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a32:	bc08      	pop	{r3}
 8012a34:	469e      	mov	lr, r3
 8012a36:	4770      	bx	lr

08012a38 <_fini>:
 8012a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a3a:	bf00      	nop
 8012a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a3e:	bc08      	pop	{r3}
 8012a40:	469e      	mov	lr, r3
 8012a42:	4770      	bx	lr
