
PlumeSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001536c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003584  080154b0  080154b0  000164b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018a34  08018a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08018a3c  08018a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018a44  08018a44  00019a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000258  20000008  08018a48  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005d4  20000260  08018ca0  0001a260  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20000834  08018ca0  0001a834  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001a260  2**0
                  CONTENTS, READONLY
 10 .debug_info   000396a2  00000000  00000000  0001a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006492  00000000  00000000  00053932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003120  00000000  00000000  00059dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002621  00000000  00000000  0005cee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ce60  00000000  00000000  0005f509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003455c  00000000  00000000  0008c369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010f1c6  00000000  00000000  000c08c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cfa8b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e5f0  00000000  00000000  001cfad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000079  00000000  00000000  001de0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000260 	.word	0x20000260
 800015c:	00000000 	.word	0x00000000
 8000160:	08015494 	.word	0x08015494

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000264 	.word	0x20000264
 800017c:	08015494 	.word	0x08015494

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bac:	f000 b988 	b.w	8000ec0 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	468e      	mov	lr, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	4688      	mov	r8, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d962      	bls.n	8000ca4 <__udivmoddi4+0xdc>
 8000bde:	fab2 f682 	clz	r6, r2
 8000be2:	b14e      	cbz	r6, 8000bf8 <__udivmoddi4+0x30>
 8000be4:	f1c6 0320 	rsb	r3, r6, #32
 8000be8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bec:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf0:	40b7      	lsls	r7, r6
 8000bf2:	ea43 0808 	orr.w	r8, r3, r8
 8000bf6:	40b4      	lsls	r4, r6
 8000bf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c04:	0c23      	lsrs	r3, r4, #16
 8000c06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c1c:	f080 80ea 	bcs.w	8000df4 <__udivmoddi4+0x22c>
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f240 80e7 	bls.w	8000df4 <__udivmoddi4+0x22c>
 8000c26:	3902      	subs	r1, #2
 8000c28:	443b      	add	r3, r7
 8000c2a:	1a9a      	subs	r2, r3, r2
 8000c2c:	b2a3      	uxth	r3, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3e:	459c      	cmp	ip, r3
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0x8e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c48:	f080 80d6 	bcs.w	8000df8 <__udivmoddi4+0x230>
 8000c4c:	459c      	cmp	ip, r3
 8000c4e:	f240 80d3 	bls.w	8000df8 <__udivmoddi4+0x230>
 8000c52:	443b      	add	r3, r7
 8000c54:	3802      	subs	r0, #2
 8000c56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5a:	eba3 030c 	sub.w	r3, r3, ip
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11d      	cbz	r5, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40f3      	lsrs	r3, r6
 8000c64:	2200      	movs	r2, #0
 8000c66:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d905      	bls.n	8000c7e <__udivmoddi4+0xb6>
 8000c72:	b10d      	cbz	r5, 8000c78 <__udivmoddi4+0xb0>
 8000c74:	e9c5 0100 	strd	r0, r1, [r5]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	e7f5      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000c7e:	fab3 f183 	clz	r1, r3
 8000c82:	2900      	cmp	r1, #0
 8000c84:	d146      	bne.n	8000d14 <__udivmoddi4+0x14c>
 8000c86:	4573      	cmp	r3, lr
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xc8>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 8105 	bhi.w	8000e9a <__udivmoddi4+0x2d2>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4690      	mov	r8, r2
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e5      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000c9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000ca2:	e7e2      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	f000 8090 	beq.w	8000dca <__udivmoddi4+0x202>
 8000caa:	fab2 f682 	clz	r6, r2
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	f040 80a4 	bne.w	8000dfc <__udivmoddi4+0x234>
 8000cb4:	1a8a      	subs	r2, r1, r2
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	b280      	uxth	r0, r0
 8000cbe:	b2bc      	uxth	r4, r7
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cce:	fb04 f20c 	mul.w	r2, r4, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x11e>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x11c>
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	f200 80e0 	bhi.w	8000ea4 <__udivmoddi4+0x2dc>
 8000ce4:	46c4      	mov	ip, r8
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cf0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cf4:	fb02 f404 	mul.w	r4, r2, r4
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x144>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x142>
 8000d04:	429c      	cmp	r4, r3
 8000d06:	f200 80ca 	bhi.w	8000e9e <__udivmoddi4+0x2d6>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d14:	f1c1 0620 	rsb	r6, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	fa0e f401 	lsl.w	r4, lr, r1
 8000d24:	fa20 f306 	lsr.w	r3, r0, r6
 8000d28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fa00 f801 	lsl.w	r8, r0, r1
 8000d36:	fa1f fc87 	uxth.w	ip, r7
 8000d3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x1a0>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d5a:	f080 809c 	bcs.w	8000e96 <__udivmoddi4+0x2ce>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f240 8099 	bls.w	8000e96 <__udivmoddi4+0x2ce>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	fa1f fe83 	uxth.w	lr, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d80:	45a4      	cmp	ip, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1ce>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d8a:	f080 8082 	bcs.w	8000e92 <__udivmoddi4+0x2ca>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d97f      	bls.n	8000e92 <__udivmoddi4+0x2ca>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	443c      	add	r4, r7
 8000d96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000da2:	4564      	cmp	r4, ip
 8000da4:	4673      	mov	r3, lr
 8000da6:	46e1      	mov	r9, ip
 8000da8:	d362      	bcc.n	8000e70 <__udivmoddi4+0x2a8>
 8000daa:	d05f      	beq.n	8000e6c <__udivmoddi4+0x2a4>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x1fe>
 8000dae:	ebb8 0203 	subs.w	r2, r8, r3
 8000db2:	eb64 0409 	sbc.w	r4, r4, r9
 8000db6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dba:	fa22 f301 	lsr.w	r3, r2, r1
 8000dbe:	431e      	orrs	r6, r3
 8000dc0:	40cc      	lsrs	r4, r1
 8000dc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e74f      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000dca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dce:	0c01      	lsrs	r1, r0, #16
 8000dd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dd4:	b280      	uxth	r0, r0
 8000dd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4638      	mov	r0, r7
 8000dde:	463c      	mov	r4, r7
 8000de0:	46b8      	mov	r8, r7
 8000de2:	46be      	mov	lr, r7
 8000de4:	2620      	movs	r6, #32
 8000de6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dea:	eba2 0208 	sub.w	r2, r2, r8
 8000dee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000df2:	e766      	b.n	8000cc2 <__udivmoddi4+0xfa>
 8000df4:	4601      	mov	r1, r0
 8000df6:	e718      	b.n	8000c2a <__udivmoddi4+0x62>
 8000df8:	4610      	mov	r0, r2
 8000dfa:	e72c      	b.n	8000c56 <__udivmoddi4+0x8e>
 8000dfc:	f1c6 0220 	rsb	r2, r6, #32
 8000e00:	fa2e f302 	lsr.w	r3, lr, r2
 8000e04:	40b7      	lsls	r7, r6
 8000e06:	40b1      	lsls	r1, r6
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	430a      	orrs	r2, r1
 8000e12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e16:	b2bc      	uxth	r4, r7
 8000e18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb08 f904 	mul.w	r9, r8, r4
 8000e26:	40b0      	lsls	r0, r6
 8000e28:	4589      	cmp	r9, r1
 8000e2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e2e:	b280      	uxth	r0, r0
 8000e30:	d93e      	bls.n	8000eb0 <__udivmoddi4+0x2e8>
 8000e32:	1879      	adds	r1, r7, r1
 8000e34:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e38:	d201      	bcs.n	8000e3e <__udivmoddi4+0x276>
 8000e3a:	4589      	cmp	r9, r1
 8000e3c:	d81f      	bhi.n	8000e7e <__udivmoddi4+0x2b6>
 8000e3e:	eba1 0109 	sub.w	r1, r1, r9
 8000e42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e46:	fb09 f804 	mul.w	r8, r9, r4
 8000e4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e4e:	b292      	uxth	r2, r2
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d229      	bcs.n	8000eac <__udivmoddi4+0x2e4>
 8000e58:	18ba      	adds	r2, r7, r2
 8000e5a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e5e:	d2c4      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e60:	4542      	cmp	r2, r8
 8000e62:	d2c2      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e64:	f1a9 0102 	sub.w	r1, r9, #2
 8000e68:	443a      	add	r2, r7
 8000e6a:	e7be      	b.n	8000dea <__udivmoddi4+0x222>
 8000e6c:	45f0      	cmp	r8, lr
 8000e6e:	d29d      	bcs.n	8000dac <__udivmoddi4+0x1e4>
 8000e70:	ebbe 0302 	subs.w	r3, lr, r2
 8000e74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e78:	3801      	subs	r0, #1
 8000e7a:	46e1      	mov	r9, ip
 8000e7c:	e796      	b.n	8000dac <__udivmoddi4+0x1e4>
 8000e7e:	eba7 0909 	sub.w	r9, r7, r9
 8000e82:	4449      	add	r1, r9
 8000e84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8c:	fb09 f804 	mul.w	r8, r9, r4
 8000e90:	e7db      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e92:	4673      	mov	r3, lr
 8000e94:	e77f      	b.n	8000d96 <__udivmoddi4+0x1ce>
 8000e96:	4650      	mov	r0, sl
 8000e98:	e766      	b.n	8000d68 <__udivmoddi4+0x1a0>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e6fd      	b.n	8000c9a <__udivmoddi4+0xd2>
 8000e9e:	443b      	add	r3, r7
 8000ea0:	3a02      	subs	r2, #2
 8000ea2:	e733      	b.n	8000d0c <__udivmoddi4+0x144>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	443b      	add	r3, r7
 8000eaa:	e71c      	b.n	8000ce6 <__udivmoddi4+0x11e>
 8000eac:	4649      	mov	r1, r9
 8000eae:	e79c      	b.n	8000dea <__udivmoddi4+0x222>
 8000eb0:	eba1 0109 	sub.w	r1, r1, r9
 8000eb4:	46c4      	mov	ip, r8
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fb09 f804 	mul.w	r8, r9, r4
 8000ebe:	e7c4      	b.n	8000e4a <__udivmoddi4+0x282>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <_ZL20ws2812_send_spi_datahhh>:

// Static variable to track if 5V power for the LED is currently on
static uint8_t s_is_led_power_on = 0;

// Internal helper function to send the SPI data for one LED
static void ws2812_send_spi_data(uint8_t r_scaled, uint8_t g_scaled, uint8_t b_scaled) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	71bb      	strb	r3, [r7, #6]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	717b      	strb	r3, [r7, #5]
    uint32_t color_data = ((uint32_t)g_scaled << 16) | ((uint32_t)r_scaled << 8) | (uint32_t)b_scaled;
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	797b      	ldrb	r3, [r7, #5]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	623b      	str	r3, [r7, #32]
    uint8_t spi_tx_buffer[24]; // Buffer to hold the 24 * 3-bit encoded values

    // This encoding is for the Controllerstech method with ~2.4MHz SPI clock
    for (int i = 0; i < 24; i++) { // Iterate 24 times for 24 WS2812B data bits
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eea:	e019      	b.n	8000f20 <_ZL20ws2812_send_spi_datahhh+0x5c>
        if ((color_data >> (23 - i)) & 0x01) { // Check MSB first
 8000eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eee:	f1c3 0317 	rsb	r3, r3, #23
 8000ef2:	6a3a      	ldr	r2, [r7, #32]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <_ZL20ws2812_send_spi_datahhh+0x4a>
            spi_tx_buffer[i] = 0b00000110; // WS2812B '1' (last 3 bits are 110)
 8000f00:	f107 0208 	add.w	r2, r7, #8
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	4413      	add	r3, r2
 8000f08:	2206      	movs	r2, #6
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	e005      	b.n	8000f1a <_ZL20ws2812_send_spi_datahhh+0x56>
        } else {
            spi_tx_buffer[i] = 0b00000100; // WS2812B '0' (last 3 bits are 100)
 8000f0e:	f107 0208 	add.w	r2, r7, #8
 8000f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f14:	4413      	add	r3, r2
 8000f16:	2204      	movs	r2, #4
 8000f18:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 24; i++) { // Iterate 24 times for 24 WS2812B data bits
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	2b17      	cmp	r3, #23
 8000f24:	dde2      	ble.n	8000eec <_ZL20ws2812_send_spi_datahhh+0x28>
        }
    }

    // Blocking SPI transmit
    HAL_SPI_Transmit(&hspi2, spi_tx_buffer, 24, 100); // 100ms timeout
 8000f26:	f107 0108 	add.w	r1, r7, #8
 8000f2a:	2364      	movs	r3, #100	@ 0x64
 8000f2c:	2218      	movs	r2, #24
 8000f2e:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <_ZL20ws2812_send_spi_datahhh+0x78>)
 8000f30:	f00f f969 	bl	8010206 <HAL_SPI_Transmit>
}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	@ 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200004e8 	.word	0x200004e8

08000f40 <_Z15WS2812_SetColorhhhh>:
 * @param r Red component (0-255)
 * @param g Green component (0-255)
 * @param b Blue component (0-255)
 * @param brightness_val Brightness (0-100). If 0, LED will be turned off and power disabled.
 */
void WS2812_SetColor(uint8_t r, uint8_t g, uint8_t b, uint8_t brightness_val) {
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4604      	mov	r4, r0
 8000f48:	4608      	mov	r0, r1
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4623      	mov	r3, r4
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	4603      	mov	r3, r0
 8000f54:	71bb      	strb	r3, [r7, #6]
 8000f56:	460b      	mov	r3, r1
 8000f58:	717b      	strb	r3, [r7, #5]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	713b      	strb	r3, [r7, #4]
    uint8_t r_scaled, g_scaled, b_scaled;

    if (brightness_val == 0 || (r == 0 && g == 0 && b == 0)) {
 8000f5e:	793b      	ldrb	r3, [r7, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d008      	beq.n	8000f76 <_Z15WS2812_SetColorhhhh+0x36>
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d11a      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d117      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d114      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
        // Turn LED completely OFF and disable 5V power
        if (s_is_led_power_on) {
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d049      	beq.n	8001012 <_Z15WS2812_SetColorhhhh+0xd2>
            // Send all zeros to ensure LED is off before cutting power,
            // though just cutting power after last command would also work.
            // This is more explicit.
            ws2812_send_spi_data(0, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ff9e 	bl	8000ec4 <_ZL20ws2812_send_spi_datahhh>
            HAL_Delay(1); // Ensure data is latched/reset (MOSI idle low > 50us)
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f009 fd71 	bl	800aa70 <HAL_Delay>
            HAL_GPIO_WritePin(LED_5V_EN_GPIO_Port, LED_5V_EN_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2104      	movs	r1, #4
 8000f92:	4823      	ldr	r0, [pc, #140]	@ (8001020 <_Z15WS2812_SetColorhhhh+0xe0>)
 8000f94:	f00b fc82 	bl	800c89c <HAL_GPIO_WritePin>
            s_is_led_power_on = 0;
 8000f98:	4b20      	ldr	r3, [pc, #128]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
        }
        return; // Nothing more to do if brightness is 0 or color is black
 8000f9e:	e038      	b.n	8001012 <_Z15WS2812_SetColorhhhh+0xd2>
    }

    // Ensure 5V power is ON if it wasn't already
    if (!s_is_led_power_on) {
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10a      	bne.n	8000fbe <_Z15WS2812_SetColorhhhh+0x7e>
        HAL_GPIO_WritePin(LED_5V_EN_GPIO_Port, LED_5V_EN_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2104      	movs	r1, #4
 8000fac:	481c      	ldr	r0, [pc, #112]	@ (8001020 <_Z15WS2812_SetColorhhhh+0xe0>)
 8000fae:	f00b fc75 	bl	800c89c <HAL_GPIO_WritePin>
        HAL_Delay(1); // Allow power to stabilize (adjust if too long/short)
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f009 fd5c 	bl	800aa70 <HAL_Delay>
        s_is_led_power_on = 1;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
    }

    // Clamp brightness
    if (brightness_val > 100) {
 8000fbe:	793b      	ldrb	r3, [r7, #4]
 8000fc0:	2b64      	cmp	r3, #100	@ 0x64
 8000fc2:	d901      	bls.n	8000fc8 <_Z15WS2812_SetColorhhhh+0x88>
        brightness_val = 100;
 8000fc4:	2364      	movs	r3, #100	@ 0x64
 8000fc6:	713b      	strb	r3, [r7, #4]
    }

    // Scale colors by brightness
    // (uint32_t) cast is important to avoid overflow during multiplication before division
    r_scaled = (uint8_t)(((uint32_t)r * brightness_val) / 100);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	793a      	ldrb	r2, [r7, #4]
 8000fcc:	fb02 f303 	mul.w	r3, r2, r3
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	73fb      	strb	r3, [r7, #15]
    g_scaled = (uint8_t)(((uint32_t)g * brightness_val) / 100);
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	793a      	ldrb	r2, [r7, #4]
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe8:	095b      	lsrs	r3, r3, #5
 8000fea:	73bb      	strb	r3, [r7, #14]
    b_scaled = (uint8_t)(((uint32_t)b * brightness_val) / 100);
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	793a      	ldrb	r2, [r7, #4]
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	737b      	strb	r3, [r7, #13]

    ws2812_send_spi_data(r_scaled, g_scaled, b_scaled);
 8000ffe:	7b7a      	ldrb	r2, [r7, #13]
 8001000:	7bb9      	ldrb	r1, [r7, #14]
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <_ZL20ws2812_send_spi_datahhh>
    // After sending data, a low signal on DIN for >50µs is needed to latch the data
    // and reset the internal shift registers for the next data.
    // HAL_SPI_Transmit is blocking. After it finishes, the SPI MOSI line will
    // typically return to its idle state (which should be low for CPOL=Low).
    // A HAL_Delay(1) is much longer than 50µs and will ensure this latch/reset.
    HAL_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f009 fd30 	bl	800aa70 <HAL_Delay>
 8001010:	e000      	b.n	8001014 <_Z15WS2812_SetColorhhhh+0xd4>
        return; // Nothing more to do if brightness is 0 or color is black
 8001012:	bf00      	nop
    // Power (PC2) remains ON until explicitly turned off by calling with brightness 0 or black.
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	2000027c 	.word	0x2000027c
 8001020:	48000800 	.word	0x48000800
 8001024:	51eb851f 	.word	0x51eb851f

08001028 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001044:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001074:	4a29      	ldr	r2, [pc, #164]	@ (800111c <MX_ADC1_Init+0xc0>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001078:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <MX_ADC1_Init+0xbc>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001084:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800108a:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <MX_ADC1_Init+0xbc>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001090:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001092:	2204      	movs	r2, #4
 8001094:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001096:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001098:	2200      	movs	r2, #0
 800109a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109c:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <MX_ADC1_Init+0xbc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b0:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010bc:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d2:	4811      	ldr	r0, [pc, #68]	@ (8001118 <MX_ADC1_Init+0xbc>)
 80010d4:	f009 ff06 	bl	800aee4 <HAL_ADC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80010de:	f001 ff31 	bl	8002f44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_ADC1_Init+0xc4>)
 80010e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e6:	2306      	movs	r3, #6
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80010ea:	2304      	movs	r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ee:	237f      	movs	r3, #127	@ 0x7f
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f2:	2304      	movs	r3, #4
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_ADC1_Init+0xbc>)
 8001100:	f00a f95e 	bl	800b3c0 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800110a:	f001 ff1b 	bl	8002f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000280 	.word	0x20000280
 800111c:	50040000 	.word	0x50040000
 8001120:	19200040 	.word	0x19200040

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09c      	sub	sp, #112	@ 0x70
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2250      	movs	r2, #80	@ 0x50
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f012 f861 	bl	801320c <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a1c      	ldr	r2, [pc, #112]	@ (80011c0 <HAL_ADC_MspInit+0x9c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d131      	bne.n	80011b8 <HAL_ADC_MspInit+0x94>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001154:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001158:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800115a:	2318      	movs	r3, #24
 800115c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800115e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001162:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001164:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001168:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800116a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800116e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8001170:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001174:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001176:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800117a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4618      	mov	r0, r3
 8001182:	f00e fb0c 	bl	800f79e <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 800118c:	f001 feda 	bl	8002f44 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001190:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001194:	f7ff ff48 	bl	8001028 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff ff45 	bl	8001028 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BAT_SENSE_Pin;
 800119e:	2302      	movs	r3, #2
 80011a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a2:	2303      	movs	r3, #3
 80011a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(BAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f00b f9ea 	bl	800c58c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3770      	adds	r7, #112	@ 0x70
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	50040000 	.word	0x50040000

080011c4 <LL_AHB1_GRP1_EnableClock>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4313      	orrs	r3, r2
 80011da:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e8:	68fb      	ldr	r3, [r7, #12]
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011fa:	2004      	movs	r0, #4
 80011fc:	f7ff ffe2 	bl	80011c4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff ffdf 	bl	80011c4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	200b      	movs	r0, #11
 800120c:	f00a ff0f 	bl	800c02e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001210:	200b      	movs	r0, #11
 8001212:	f00a ff26 	bl	800c062 <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}

0800121a <LL_AHB2_GRP1_EnableClock>:
{
 800121a:	b480      	push	{r7}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001228:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4313      	orrs	r3, r2
 8001230:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001236:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4013      	ands	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	2001      	movs	r0, #1
 8001262:	f7ff ffda 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2004      	movs	r0, #4
 8001268:	f7ff ffd7 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	2002      	movs	r0, #2
 800126e:	f7ff ffd4 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2080      	movs	r0, #128	@ 0x80
 8001274:	f7ff ffd1 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001278:	2008      	movs	r0, #8
 800127a:	f7ff ffce 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800127e:	2010      	movs	r0, #16
 8001280:	f7ff ffcb 	bl	800121a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN2_Pin|EN1_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	210c      	movs	r1, #12
 8001288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128c:	f00b fb06 	bl	800c89c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_5V_EN_Pin|nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2184      	movs	r1, #132	@ 0x84
 8001294:	487e      	ldr	r0, [pc, #504]	@ (8001490 <MX_GPIO_Init+0x244>)
 8001296:	f00b fb01 	bl	800c89c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_RESET_GPIO_Port, MUX_RESET_Pin, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f00b fafa 	bl	800c89c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2102      	movs	r1, #2
 80012ac:	4879      	ldr	r0, [pc, #484]	@ (8001494 <MX_GPIO_Init+0x248>)
 80012ae:	f00b faf5 	bl	800c89c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2102      	movs	r1, #2
 80012b6:	4878      	ldr	r0, [pc, #480]	@ (8001498 <MX_GPIO_Init+0x24c>)
 80012b8:	f00b faf0 	bl	800c89c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN2_Pin MUX_RESET_Pin EN1_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|MUX_RESET_Pin|EN1_Pin;
 80012bc:	f248 030c 	movw	r3, #32780	@ 0x800c
 80012c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d6:	f00b f959 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_5V_EN_Pin */
  GPIO_InitStruct.Pin = LED_5V_EN_Pin;
 80012da:	2304      	movs	r3, #4
 80012dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e6:	2302      	movs	r3, #2
 80012e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_5V_EN_GPIO_Port, &GPIO_InitStruct);
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4868      	ldr	r0, [pc, #416]	@ (8001490 <MX_GPIO_Init+0x244>)
 80012f0:	f00b f94c 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON5_Pin */
  GPIO_InitStruct.Pin = BUTTON5_Pin;
 80012f4:	2308      	movs	r3, #8
 80012f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON5_GPIO_Port, &GPIO_InitStruct);
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4863      	ldr	r0, [pc, #396]	@ (8001494 <MX_GPIO_Init+0x248>)
 8001308:	f00b f940 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800130c:	23b0      	movs	r3, #176	@ 0xb0
 800130e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001310:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001316:	2301      	movs	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	485f      	ldr	r0, [pc, #380]	@ (800149c <MX_GPIO_Init+0x250>)
 8001320:	f00b f934 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 8001324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001328:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800132e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4855      	ldr	r0, [pc, #340]	@ (8001490 <MX_GPIO_Init+0x244>)
 800133a:	f00b f927 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT13_Pin nFAULT17_Pin nFAULT3_Pin nFAULT4_Pin
                           nFAULT14_Pin nFAULT1_Pin */
  GPIO_InitStruct.Pin = nFAULT13_Pin|nFAULT17_Pin|nFAULT3_Pin|nFAULT4_Pin
 800133e:	f246 430b 	movw	r3, #25611	@ 0x640b
 8001342:	607b      	str	r3, [r7, #4]
                          |nFAULT14_Pin|nFAULT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001348:	2301      	movs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4853      	ldr	r0, [pc, #332]	@ (80014a0 <MX_GPIO_Init+0x254>)
 8001352:	f00b f91b 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT15_Pin nFAULT8_Pin */
  GPIO_InitStruct.Pin = nFAULT15_Pin|nFAULT8_Pin;
 8001356:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800135a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001360:	2301      	movs	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	484c      	ldr	r0, [pc, #304]	@ (800149c <MX_GPIO_Init+0x250>)
 800136a:	f00b f90f 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT9_Pin nFAULT7_Pin nFAULT6_Pin */
  GPIO_InitStruct.Pin = nFAULT9_Pin|nFAULT7_Pin|nFAULT6_Pin;
 800136e:	2315      	movs	r3, #21
 8001370:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	4846      	ldr	r0, [pc, #280]	@ (8001498 <MX_GPIO_Init+0x24c>)
 8001380:	f00b f904 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pin : nFAULT12_Pin */
  GPIO_InitStruct.Pin = nFAULT12_Pin;
 8001384:	2310      	movs	r3, #16
 8001386:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138c:	2301      	movs	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(nFAULT12_GPIO_Port, &GPIO_InitStruct);
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4619      	mov	r1, r3
 8001394:	483e      	ldr	r0, [pc, #248]	@ (8001490 <MX_GPIO_Init+0x244>)
 8001396:	f00b f8f9 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT11_Pin nFAULT16_Pin nFAULT0_Pin nFAULT10_Pin */
  GPIO_InitStruct.Pin = nFAULT11_Pin|nFAULT16_Pin|nFAULT0_Pin|nFAULT10_Pin;
 800139a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800139e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b0:	f00b f8ec 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pin : nFAULT2_Pin */
  GPIO_InitStruct.Pin = nFAULT2_Pin;
 80013b4:	2301      	movs	r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013bc:	2301      	movs	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(nFAULT2_GPIO_Port, &GPIO_InitStruct);
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4619      	mov	r1, r3
 80013c4:	4833      	ldr	r0, [pc, #204]	@ (8001494 <MX_GPIO_Init+0x248>)
 80013c6:	f00b f8e1 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_SENSE_EN_Pin */
  GPIO_InitStruct.Pin = BAT_SENSE_EN_Pin;
 80013ca:	2302      	movs	r3, #2
 80013cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BAT_SENSE_EN_GPIO_Port, &GPIO_InitStruct);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	482d      	ldr	r0, [pc, #180]	@ (8001494 <MX_GPIO_Init+0x248>)
 80013e0:	f00b f8d4 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_FRONT_Pin */
  GPIO_InitStruct.Pin = nSLEEP_FRONT_Pin;
 80013e4:	2302      	movs	r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(nSLEEP_FRONT_GPIO_Port, &GPIO_InitStruct);
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	4827      	ldr	r0, [pc, #156]	@ (8001498 <MX_GPIO_Init+0x24c>)
 80013fa:	f00b f8c7 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin SWITCH2_Pin CHARGE_STATUS_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|SWITCH2_Pin|CHARGE_STATUS_Pin;
 80013fe:	f249 0310 	movw	r3, #36880	@ 0x9010
 8001402:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4823      	ldr	r0, [pc, #140]	@ (80014a0 <MX_GPIO_Init+0x254>)
 8001412:	f00b f8bb 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_REAR_Pin */
  GPIO_InitStruct.Pin = nSLEEP_REAR_Pin;
 8001416:	2380      	movs	r3, #128	@ 0x80
 8001418:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(nSLEEP_REAR_GPIO_Port, &GPIO_InitStruct);
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4819      	ldr	r0, [pc, #100]	@ (8001490 <MX_GPIO_Init+0x244>)
 800142c:	f00b f8ae 	bl	800c58c <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH1_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin;
 8001430:	2308      	movs	r3, #8
 8001432:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4619      	mov	r1, r3
 8001440:	4815      	ldr	r0, [pc, #84]	@ (8001498 <MX_GPIO_Init+0x24c>)
 8001442:	f00b f8a3 	bl	800c58c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2009      	movs	r0, #9
 800144c:	f00a fdef 	bl	800c02e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001450:	2009      	movs	r0, #9
 8001452:	f00a fe06 	bl	800c062 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	200a      	movs	r0, #10
 800145c:	f00a fde7 	bl	800c02e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001460:	200a      	movs	r0, #10
 8001462:	f00a fdfe 	bl	800c062 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2017      	movs	r0, #23
 800146c:	f00a fddf 	bl	800c02e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001470:	2017      	movs	r0, #23
 8001472:	f00a fdf6 	bl	800c062 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2028      	movs	r0, #40	@ 0x28
 800147c:	f00a fdd7 	bl	800c02e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001480:	2028      	movs	r0, #40	@ 0x28
 8001482:	f00a fdee 	bl	800c062 <HAL_NVIC_EnableIRQ>

}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	48000800 	.word	0x48000800
 8001494:	48001c00 	.word	0x48001c00
 8001498:	48001000 	.word	0x48001000
 800149c:	48000400 	.word	0x48000400
 80014a0:	48000c00 	.word	0x48000c00

080014a4 <LL_AHB2_GRP1_EnableClock>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c8:	68fb      	ldr	r3, [r7, #12]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <MX_I2C1_Init+0x74>)
 800150e:	4a1c      	ldr	r2, [pc, #112]	@ (8001580 <MX_I2C1_Init+0x78>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0070133F;
 8001512:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_I2C1_Init+0x74>)
 8001514:	4a1b      	ldr	r2, [pc, #108]	@ (8001584 <MX_I2C1_Init+0x7c>)
 8001516:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <MX_I2C1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_I2C1_Init+0x74>)
 8001520:	2201      	movs	r2, #1
 8001522:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_I2C1_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <MX_I2C1_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_I2C1_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153c:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <MX_I2C1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001542:	480e      	ldr	r0, [pc, #56]	@ (800157c <MX_I2C1_Init+0x74>)
 8001544:	f00b f9fe 	bl	800c944 <HAL_I2C_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800154e:	f001 fcf9 	bl	8002f44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001552:	2100      	movs	r1, #0
 8001554:	4809      	ldr	r0, [pc, #36]	@ (800157c <MX_I2C1_Init+0x74>)
 8001556:	f00c fb07 	bl	800db68 <HAL_I2CEx_ConfigAnalogFilter>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001560:	f001 fcf0 	bl	8002f44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001564:	2100      	movs	r1, #0
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_I2C1_Init+0x74>)
 8001568:	f00c fb49 	bl	800dbfe <HAL_I2CEx_ConfigDigitalFilter>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001572:	f001 fce7 	bl	8002f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002e4 	.word	0x200002e4
 8001580:	40005400 	.word	0x40005400
 8001584:	0070133f 	.word	0x0070133f

08001588 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_I2C3_Init+0x74>)
 800158e:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <MX_I2C3_Init+0x78>)
 8001590:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0070133F;
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <MX_I2C3_Init+0x74>)
 8001594:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <MX_I2C3_Init+0x7c>)
 8001596:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_I2C3_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015c2:	480e      	ldr	r0, [pc, #56]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015c4:	f00b f9be 	bl	800c944 <HAL_I2C_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015ce:	f001 fcb9 	bl	8002f44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4809      	ldr	r0, [pc, #36]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015d6:	f00c fac7 	bl	800db68 <HAL_I2CEx_ConfigAnalogFilter>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015e0:	f001 fcb0 	bl	8002f44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015e4:	2100      	movs	r1, #0
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_I2C3_Init+0x74>)
 80015e8:	f00c fb09 	bl	800dbfe <HAL_I2CEx_ConfigDigitalFilter>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015f2:	f001 fca7 	bl	8002f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000338 	.word	0x20000338
 8001600:	40005c00 	.word	0x40005c00
 8001604:	0070133f 	.word	0x0070133f

08001608 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b09c      	sub	sp, #112	@ 0x70
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2250      	movs	r2, #80	@ 0x50
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f011 fdef 	bl	801320c <memset>
  if(i2cHandle->Instance==I2C1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a2d      	ldr	r2, [pc, #180]	@ (80016e8 <HAL_I2C_MspInit+0xe0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d127      	bne.n	8001688 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001638:	2304      	movs	r3, #4
 800163a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800163c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4618      	mov	r0, r3
 8001648:	f00e f8a9 	bl	800f79e <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001652:	f001 fc77 	bl	8002f44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2002      	movs	r0, #2
 8001658:	f7ff ff24 	bl	80014a4 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800165c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001660:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001662:	2312      	movs	r3, #18
 8001664:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166e:	2304      	movs	r3, #4
 8001670:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001676:	4619      	mov	r1, r3
 8001678:	481c      	ldr	r0, [pc, #112]	@ (80016ec <HAL_I2C_MspInit+0xe4>)
 800167a:	f00a ff87 	bl	800c58c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001682:	f7ff ff28 	bl	80014d6 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001686:	e02a      	b.n	80016de <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C3)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a18      	ldr	r2, [pc, #96]	@ (80016f0 <HAL_I2C_MspInit+0xe8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d125      	bne.n	80016de <HAL_I2C_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001692:	2308      	movs	r3, #8
 8001694:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001696:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00e f87c 	bl	800f79e <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 80016ac:	f001 fc4a 	bl	8002f44 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	2004      	movs	r0, #4
 80016b2:	f7ff fef7 	bl	80014a4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80016b6:	2303      	movs	r3, #3
 80016b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016c6:	2304      	movs	r3, #4
 80016c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016ce:	4619      	mov	r1, r3
 80016d0:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <HAL_I2C_MspInit+0xec>)
 80016d2:	f00a ff5b 	bl	800c58c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016d6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80016da:	f7ff fefc 	bl	80014d6 <LL_APB1_GRP1_EnableClock>
}
 80016de:	bf00      	nop
 80016e0:	3770      	adds	r7, #112	@ 0x70
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40005400 	.word	0x40005400
 80016ec:	48000400 	.word	0x48000400
 80016f0:	40005c00 	.word	0x40005c00
 80016f4:	48000800 	.word	0x48000800

080016f8 <LL_AHB3_GRP1_EnableClock>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001704:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001706:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4313      	orrs	r3, r2
 800170e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001714:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800171c:	68fb      	ldr	r3, [r7, #12]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_IPCC_Init+0x20>)
 8001732:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <MX_IPCC_Init+0x24>)
 8001734:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <MX_IPCC_Init+0x20>)
 8001738:	f00c faae 	bl	800dc98 <HAL_IPCC_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001742:	f001 fbff 	bl	8002f44 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000038c 	.word	0x2000038c
 8001750:	58000c00 	.word	0x58000c00

08001754 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <HAL_IPCC_MspInit+0x44>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d113      	bne.n	800178e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001766:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800176a:	f7ff ffc5 	bl	80016f8 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	202c      	movs	r0, #44	@ 0x2c
 8001774:	f00a fc5b 	bl	800c02e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001778:	202c      	movs	r0, #44	@ 0x2c
 800177a:	f00a fc72 	bl	800c062 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	202d      	movs	r0, #45	@ 0x2d
 8001784:	f00a fc53 	bl	800c02e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001788:	202d      	movs	r0, #45	@ 0x2d
 800178a:	f00a fc6a 	bl	800c062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	58000c00 	.word	0x58000c00

0800179c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80017b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80017bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <ITM_SendChar+0x2c>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <ITM_SendChar+0x2e>
 80017c8:	2300      	movs	r3, #0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d010      	beq.n	80017f0 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80017ce:	e000      	b.n	80017d2 <ITM_SendChar+0x36>
    {
      __NOP();
 80017d0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80017d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f4      	bne.n	80017d0 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80017e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_ZN14DRV8214_ConfigC1Ev>:

enum ControlMode { PWM, PH_EN };
enum RegulationMode { CURRENT_FIXED, CURRENT_CYCLES, SPEED, VOLTAGE };
// when using I2C control, the speed/voltage cannot be controlled if using the CURRENT_FIXED or CURRENT_CYCLES regulation mode

struct DRV8214_Config {
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	705a      	strb	r2, [r3, #1]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2202      	movs	r2, #2
 8001816:	709a      	strb	r2, [r3, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	70da      	strb	r2, [r3, #3]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	721a      	strb	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	725a      	strb	r2, [r3, #9]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	729a      	strb	r2, [r3, #10]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	72da      	strb	r2, [r3, #11]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2203      	movs	r2, #3
 8001842:	731a      	strb	r2, [r3, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2280      	movs	r2, #128	@ 0x80
 8001860:	771a      	strb	r2, [r3, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	775a      	strb	r2, [r3, #29]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800186e:	83da      	strh	r2, [r3, #30]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2020 	strb.w	r2, [r3, #32]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	845a      	strh	r2, [r3, #34]	@ 0x22
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	221e      	movs	r2, #30
 8001882:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2203      	movs	r2, #3
 800188a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_ZN7DRV8214C1Ehhthhht>:
        // Private functions
        void drvPrint(const char* message);

    public:
        // Constructor
        DRV8214(uint8_t addr, uint8_t id, uint16_t sense_resistor, uint8_t ripples, uint8_t rm, uint8_t reduction_ratio, uint16_t rpm) : address(addr), driver_ID(id), Ripropri(sense_resistor), ripples_per_revolution(ripples), motor_internal_resistance(rm), motor_reduction_ratio(reduction_ratio), motor_max_rpm(rpm) {}
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	4608      	mov	r0, r1
 80018bc:	4611      	mov	r1, r2
 80018be:	461a      	mov	r2, r3
 80018c0:	4603      	mov	r3, r0
 80018c2:	70fb      	strb	r3, [r7, #3]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70bb      	strb	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	803b      	strh	r3, [r7, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	78ba      	ldrb	r2, [r7, #2]
 80018d6:	705a      	strb	r2, [r3, #1]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	883a      	ldrh	r2, [r7, #0]
 80018dc:	805a      	strh	r2, [r3, #2]
 80018de:	7c3b      	ldrb	r3, [r7, #16]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	809a      	strh	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7d3a      	ldrb	r2, [r7, #20]
 80018ea:	719a      	strb	r2, [r3, #6]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7e3a      	ldrb	r2, [r7, #24]
 80018f0:	71da      	strb	r2, [r3, #7]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	8bba      	ldrh	r2, [r7, #28]
 80018f6:	811a      	strh	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	330c      	adds	r3, #12
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff7e 	bl	80017fe <_ZN14DRV8214_ConfigC1Ev>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev>:
  } else {
      printf("Normal power-on or reset (not from Standby).\r\n");
  }
}

void Configure_BMI270_LowPower_AnyMotion(struct bmi2_dev *dev) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b0a4      	sub	sp, #144	@ 0x90
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t sens_list[1];
  struct bmi2_sens_config sens_cfg;
  struct bmi2_int_pin_config int_pin_cfg;

  printf("Configuring BMI270 for Low Power Any Motion...\r\n");
 8001914:	489a      	ldr	r0, [pc, #616]	@ (8001b80 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x274>)
 8001916:	f011 fc71 	bl	80131fc <puts>

  // 1. Disable all sensors first (good practice before reconfiguring)
  uint8_t all_sensors_off[] = { BMI2_ACCEL, BMI2_GYRO, BMI2_AUX }; // Add BMI2_TEMP if ever used
 800191a:	4a9a      	ldr	r2, [pc, #616]	@ (8001b84 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x278>)
 800191c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	4611      	mov	r1, r2
 8001924:	8019      	strh	r1, [r3, #0]
 8001926:	3302      	adds	r3, #2
 8001928:	0c12      	lsrs	r2, r2, #16
 800192a:	701a      	strb	r2, [r3, #0]
  rslt = bmi270_sensor_disable(all_sensors_off, sizeof(all_sensors_off)/sizeof(all_sensors_off[0]), dev);
 800192c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	2103      	movs	r1, #3
 8001934:	4618      	mov	r0, r3
 8001936:	f004 fb5b 	bl	8005ff0 <bmi270_sensor_disable>
 800193a:	4603      	mov	r3, r0
 800193c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001940:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x4c>
      printf("BMI270 Disable All Sensors failed. Error: %d\r\n", rslt);
 8001948:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800194c:	4619      	mov	r1, r3
 800194e:	488e      	ldr	r0, [pc, #568]	@ (8001b88 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x27c>)
 8001950:	f011 fbe4 	bl	801311c <iprintf>
      Error_Handler();
 8001954:	f001 faf6 	bl	8002f44 <Error_Handler>
  }
   printf("All sensors disabled.\r\n");
 8001958:	488c      	ldr	r0, [pc, #560]	@ (8001b8c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x280>)
 800195a:	f011 fc4f 	bl	80131fc <puts>

  // 2. Enable Accelerometer only
  sens_list[0] = BMI2_ACCEL;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  rslt = bmi270_sensor_enable(sens_list, 1, dev);
 8001964:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	2101      	movs	r1, #1
 800196c:	4618      	mov	r0, r3
 800196e:	f004 fb09 	bl	8005f84 <bmi270_sensor_enable>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001978:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x84>
      printf("BMI270 Accel Enable failed. Error: %d\r\n", rslt);
 8001980:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001984:	4619      	mov	r1, r3
 8001986:	4882      	ldr	r0, [pc, #520]	@ (8001b90 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x284>)
 8001988:	f011 fbc8 	bl	801311c <iprintf>
      Error_Handler();
 800198c:	f001 fada 	bl	8002f44 <Error_Handler>
  }
  printf("Accelerometer enabled.\r\n");
 8001990:	4880      	ldr	r0, [pc, #512]	@ (8001b94 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x288>)
 8001992:	f011 fc33 	bl	80131fc <puts>
  //    ACC_CONF (0x40):
  //      [7] acc_filter_perf: 0 for low power
  //      [6:4] acc_bwp: 001b (OSR2_AVG2 for low power based on datasheet filter table for acc_filter_perf=0)
  //      [3:0] acc_odr: 0111b (50Hz - minimum for features if acc_filter_perf=0, page 41)
  //      Result: 0_001_0111 = 0x17
  sens_cfg.type = BMI2_ACCEL;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  rslt = bmi2_get_sensor_config(&sens_cfg, 1, dev); // Get current to modify
 800199c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	2101      	movs	r1, #1
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fc55 	bl	8004254 <bmi2_get_sensor_config>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 80019b0:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0xbc>
      printf("BMI270 Get Accel Config failed. Error: %d\r\n", rslt);
 80019b8:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 80019bc:	4619      	mov	r1, r3
 80019be:	4876      	ldr	r0, [pc, #472]	@ (8001b98 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x28c>)
 80019c0:	f011 fbac 	bl	801311c <iprintf>
      Error_Handler();
 80019c4:	f001 fabe 	bl	8002f44 <Error_Handler>
  }
  sens_cfg.cfg.acc.odr = BMI2_ACC_ODR_50HZ;        // 50Hz, as features might need this ODR minimum
 80019c8:	2307      	movs	r3, #7
 80019ca:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  sens_cfg.cfg.acc.bwp = BMI2_ACC_OSR2_AVG2;       // Low power bandwidth (osr2_avg2)
 80019ce:	2301      	movs	r3, #1
 80019d0:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  sens_cfg.cfg.acc.filter_perf = BMI2_POWER_OPT_MODE; // Low power filter performance (acc_filter_perf = 0)
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
  // sens_cfg.cfg.acc.range = BMI2_ACC_RANGE_2G; // Already set or keep default
  rslt = bmi2_set_sensor_config(&sens_cfg, 1, dev);
 80019da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 fb80 	bl	80040e8 <bmi2_set_sensor_config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 80019ee:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0xfa>
      printf("BMI270 Accel Low Power Config failed. Error: %d\r\n", rslt);
 80019f6:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 80019fa:	4619      	mov	r1, r3
 80019fc:	4867      	ldr	r0, [pc, #412]	@ (8001b9c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x290>)
 80019fe:	f011 fb8d 	bl	801311c <iprintf>
      Error_Handler();
 8001a02:	f001 fa9f 	bl	8002f44 <Error_Handler>
  }
  printf("Accelerometer configured for low power (ODR: 50Hz, BWP: OSR2_AVG2, Filter: Power Optimized).\r\n");
 8001a06:	4866      	ldr	r0, [pc, #408]	@ (8001ba0 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x294>)
 8001a08:	f011 fbf8 	bl	80131fc <puts>

  // 4. Enable Advanced Power Saving (after sensor config)
  //    PWR_CONF (0x7C): bit 1 adv_power_save = 1
  rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f002 f9dd 	bl	8003dce <bmi2_set_adv_power_save>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001a1a:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x126>
      printf("BMI270 Enable Advanced Power Save failed. Error: %d\r\n", rslt);
 8001a22:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001a26:	4619      	mov	r1, r3
 8001a28:	485e      	ldr	r0, [pc, #376]	@ (8001ba4 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x298>)
 8001a2a:	f011 fb77 	bl	801311c <iprintf>
      Error_Handler();
 8001a2e:	f001 fa89 	bl	8002f44 <Error_Handler>
  }
  printf("Advanced Power Saving enabled.\r\n");
 8001a32:	485d      	ldr	r0, [pc, #372]	@ (8001ba8 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x29c>)
 8001a34:	f011 fbe2 	bl	80131fc <puts>

  // 5. Configure Any-Motion feature
  //    ANYMO_1 (Page 1, 0x0C-0x0D in FEATURES): duration, select_x/y/z
  //    ANYMO_2 (Page 1, 0x0E-0x0F in FEATURES): threshold, enable
  struct bmi2_sens_config anymotion_cfg;
  anymotion_cfg.type = BMI2_ANY_MOTION;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	733b      	strb	r3, [r7, #12]
  rslt = bmi270_get_sensor_config(&anymotion_cfg, 1, dev); // Get defaults
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	2101      	movs	r1, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 fb97 	bl	8006178 <bmi270_get_sensor_config>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
   if (rslt != BMI2_OK) {
 8001a50:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x158>
      printf("BMI270 Get AnyMotion Config failed. Error: %d\r\n", rslt);
 8001a58:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4853      	ldr	r0, [pc, #332]	@ (8001bac <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2a0>)
 8001a60:	f011 fb5c 	bl	801311c <iprintf>
      // Don't Error_Handler() here, could be feature not active yet. We will set it.
  }

  anymotion_cfg.cfg.any_motion.duration = 2;    // 2 samples * 20ms/sample (at 50Hz) = 40ms
 8001a64:	2302      	movs	r3, #2
 8001a66:	823b      	strh	r3, [r7, #16]
  anymotion_cfg.cfg.any_motion.threshold = 20;  // Threshold: 20 * 0.061mg/LSB (for 2g range) ~ 1.22mg.
 8001a68:	2314      	movs	r3, #20
 8001a6a:	827b      	strh	r3, [r7, #18]
                                                // For 2g range, sensitivity is 16384 LSB/g.
                                                // Threshold (g) = threshold_lsb / 16384.
                                                // Threshold (mg) = (threshold_lsb * 1000) / 16384.
                                                // A value of 20 means 20 * 1000 / 16384 ~= 1.22 mg. This is very sensitive.
                                                // Datasheet page 43 typical threshold is 0xAA for anymotion (83mg). Let's try that.
  anymotion_cfg.cfg.any_motion.threshold = 0xAA; // Let's use a moderate value like 32 decimal for testing (~2mg)
 8001a6c:	23aa      	movs	r3, #170	@ 0xaa
 8001a6e:	827b      	strh	r3, [r7, #18]
  anymotion_cfg.cfg.any_motion.select_x = BMI2_ENABLE;
 8001a70:	2301      	movs	r3, #1
 8001a72:	82bb      	strh	r3, [r7, #20]
  anymotion_cfg.cfg.any_motion.select_y = BMI2_ENABLE;
 8001a74:	2301      	movs	r3, #1
 8001a76:	82fb      	strh	r3, [r7, #22]
  anymotion_cfg.cfg.any_motion.select_z = BMI2_ENABLE;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	833b      	strh	r3, [r7, #24]
  // The .enable field within any_motion struct is for axis selection, not the feature itself.
  // Feature is enabled by bmi270_sensor_enable for BMI2_ANY_MOTION type.

  rslt = bmi270_set_sensor_config(&anymotion_cfg, 1, dev);
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	2101      	movs	r1, #1
 8001a84:	4618      	mov	r0, r3
 8001a86:	f004 fae9 	bl	800605c <bmi270_set_sensor_config>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001a90:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d007      	beq.n	8001aa8 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x19c>
      printf("BMI270 Set AnyMotion Config failed. Error: %d\r\n", rslt);
 8001a98:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4844      	ldr	r0, [pc, #272]	@ (8001bb0 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2a4>)
 8001aa0:	f011 fb3c 	bl	801311c <iprintf>
      Error_Handler();
 8001aa4:	f001 fa4e 	bl	8002f44 <Error_Handler>
  }
  printf("Any Motion configured (Duration: %d, Threshold: 0x%X).\r\n",
         anymotion_cfg.cfg.any_motion.duration, anymotion_cfg.cfg.any_motion.threshold);
 8001aa8:	8a3b      	ldrh	r3, [r7, #16]
  printf("Any Motion configured (Duration: %d, Threshold: 0x%X).\r\n",
 8001aaa:	4619      	mov	r1, r3
         anymotion_cfg.cfg.any_motion.duration, anymotion_cfg.cfg.any_motion.threshold);
 8001aac:	8a7b      	ldrh	r3, [r7, #18]
  printf("Any Motion configured (Duration: %d, Threshold: 0x%X).\r\n",
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4840      	ldr	r0, [pc, #256]	@ (8001bb4 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2a8>)
 8001ab2:	f011 fb33 	bl	801311c <iprintf>


  // 6. Enable Any-Motion feature
  sens_list[0] = BMI2_ANY_MOTION;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  rslt = bmi270_sensor_enable(sens_list, 1, dev);
 8001abc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 fa5d 	bl	8005f84 <bmi270_sensor_enable>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001ad0:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x1dc>
      printf("BMI270 AnyMotion Sensor Enable failed. Error: %d\r\n", rslt);
 8001ad8:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001adc:	4619      	mov	r1, r3
 8001ade:	4836      	ldr	r0, [pc, #216]	@ (8001bb8 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2ac>)
 8001ae0:	f011 fb1c 	bl	801311c <iprintf>
      Error_Handler();
 8001ae4:	f001 fa2e 	bl	8002f44 <Error_Handler>
  }
  printf("Any Motion feature enabled.\r\n");
 8001ae8:	4834      	ldr	r0, [pc, #208]	@ (8001bbc <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2b0>)
 8001aea:	f011 fb87 	bl	80131fc <puts>

  // 7. Configure BMI270 Interrupt Pin (e.g., INT1)
  //    INT1_IO_CTRL (0x53), INT_LATCH (0x55)
  int_pin_cfg.pin_type = BMI2_INT1; // Or BMI2_INT2, ensure physical connection matches
 8001aee:	2301      	movs	r3, #1
 8001af0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  int_pin_cfg.int_latch = BMI2_INT_NON_LATCH; // Non-latched for edge trigger
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  int_pin_cfg.pin_cfg[0].lvl = BMI2_INT_ACTIVE_HIGH; // Active high for STM32 rising edge EXTI
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  int_pin_cfg.pin_cfg[0].od = BMI2_INT_PUSH_PULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  int_pin_cfg.pin_cfg[0].output_en = BMI2_INT_OUTPUT_ENABLE;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  int_pin_cfg.pin_cfg[0].input_en = BMI2_INT_INPUT_DISABLE; // INT1 as output
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
  // If using BMI2_INT2, configure pin_cfg[1]
  rslt = bmi2_set_int_pin_config(&int_pin_cfg, dev);
 8001b12:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 f9f9 	bl	8003f10 <bmi2_set_int_pin_config>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001b24:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x230>
      printf("BMI270 Set INT Pin Config failed. Error: %d\r\n", rslt);
 8001b2c:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b30:	4619      	mov	r1, r3
 8001b32:	4823      	ldr	r0, [pc, #140]	@ (8001bc0 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2b4>)
 8001b34:	f011 faf2 	bl	801311c <iprintf>
      Error_Handler();
 8001b38:	f001 fa04 	bl	8002f44 <Error_Handler>
  }
  printf("BMI270 INT1 configured as Active High, Push-Pull output.\r\n");
 8001b3c:	4821      	ldr	r0, [pc, #132]	@ (8001bc4 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2b8>)
 8001b3e:	f011 fb5d 	bl	80131fc <puts>

  // 8. Map Any-Motion interrupt to the configured INT pin
  rslt = bmi2_map_feat_int(BMI2_ANY_MOTION, BMI2_INT1, dev); // Map to INT1
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	2101      	movs	r1, #1
 8001b46:	2004      	movs	r0, #4
 8001b48:	f002 fd8d 	bl	8004666 <bmi2_map_feat_int>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001b52:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x25e>
      printf("BMI270 Map AnyMotion to INT1 failed. Error: %d\r\n", rslt);
 8001b5a:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4819      	ldr	r0, [pc, #100]	@ (8001bc8 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2bc>)
 8001b62:	f011 fadb 	bl	801311c <iprintf>
      Error_Handler();
 8001b66:	f001 f9ed 	bl	8002f44 <Error_Handler>
  }
  printf("Any Motion interrupt mapped to INT1.\r\n");
 8001b6a:	4818      	ldr	r0, [pc, #96]	@ (8001bcc <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2c0>)
 8001b6c:	f011 fb46 	bl	80131fc <puts>
  printf("BMI270 Low Power Any Motion Setup Complete.\r\n");
 8001b70:	4817      	ldr	r0, [pc, #92]	@ (8001bd0 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2c4>)
 8001b72:	f011 fb43 	bl	80131fc <puts>
}
 8001b76:	bf00      	nop
 8001b78:	3790      	adds	r7, #144	@ 0x90
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	08015550 	.word	0x08015550
 8001b84:	08015908 	.word	0x08015908
 8001b88:	08015580 	.word	0x08015580
 8001b8c:	080155b0 	.word	0x080155b0
 8001b90:	080155c8 	.word	0x080155c8
 8001b94:	080155f0 	.word	0x080155f0
 8001b98:	08015608 	.word	0x08015608
 8001b9c:	08015634 	.word	0x08015634
 8001ba0:	08015668 	.word	0x08015668
 8001ba4:	080156c8 	.word	0x080156c8
 8001ba8:	08015700 	.word	0x08015700
 8001bac:	08015720 	.word	0x08015720
 8001bb0:	08015750 	.word	0x08015750
 8001bb4:	08015780 	.word	0x08015780
 8001bb8:	080157bc 	.word	0x080157bc
 8001bbc:	080157f0 	.word	0x080157f0
 8001bc0:	08015810 	.word	0x08015810
 8001bc4:	08015840 	.word	0x08015840
 8001bc8:	0801587c 	.word	0x0801587c
 8001bcc:	080158b0 	.word	0x080158b0
 8001bd0:	080158d8 	.word	0x080158d8

08001bd4 <_Z16EnterStandbyModev>:

void EnterStandbyMode(void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  printf("Preparing to enter Standby Mode...\r\n");
 8001bd8:	4814      	ldr	r0, [pc, #80]	@ (8001c2c <_Z16EnterStandbyModev+0x58>)
 8001bda:	f011 fb0f 	bl	80131fc <puts>
  WS2812_SetColor(0,0,0,0); // Turn off LED
 8001bde:	2300      	movs	r3, #0
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff f9ab 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(100); // Allow UART to flush
 8001bea:	2064      	movs	r0, #100	@ 0x64
 8001bec:	f008 ff40 	bl	800aa70 <HAL_Delay>

  // Set nSLEEP pins low
  HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	480e      	ldr	r0, [pc, #56]	@ (8001c30 <_Z16EnterStandbyModev+0x5c>)
 8001bf6:	f00a fe51 	bl	800c89c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2180      	movs	r1, #128	@ 0x80
 8001bfe:	480d      	ldr	r0, [pc, #52]	@ (8001c34 <_Z16EnterStandbyModev+0x60>)
 8001c00:	f00a fe4c 	bl	800c89c <HAL_GPIO_WritePin>
  printf("nSLEEP pins set LOW.\r\n");
 8001c04:	480c      	ldr	r0, [pc, #48]	@ (8001c38 <_Z16EnterStandbyModev+0x64>)
 8001c06:	f011 faf9 	bl	80131fc <puts>
  // Ensure PA0 (WKUP1) is configured for wakeup.
  // Disable other wakeup pins if not used to prevent unintended wakeups.
  // Example: HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);

  // Clear all wakeup flags (especially WUF1 for PA0)
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <_Z16EnterStandbyModev+0x68>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	619a      	str	r2, [r3, #24]
  // __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF5);

  // Enable WakeUp Pin PA0 (WKUP1)
  // The edge (HIGH or LOW) depends on BMI270 INT pin's active level and STM32 EXTI config.
  // If BMI270 INT1 is Active High, and EXTI0 is Rising Edge:
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_HIGH);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f00c fa4f 	bl	800e0b4 <HAL_PWR_EnableWakeUpPin>
  // If BMI270 INT1 is Active Low, and EXTI0 is Falling Edge:
  // HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);

  printf("Entering Standby Mode. STM32 will reset on wakeup.\r\n");
 8001c16:	480a      	ldr	r0, [pc, #40]	@ (8001c40 <_Z16EnterStandbyModev+0x6c>)
 8001c18:	f011 faf0 	bl	80131fc <puts>
  HAL_Delay(10); // Final small delay for printf
 8001c1c:	200a      	movs	r0, #10
 8001c1e:	f008 ff27 	bl	800aa70 <HAL_Delay>

  // Enter Standby mode
  HAL_PWR_EnterSTANDBYMode();
 8001c22:	f00c fa67 	bl	800e0f4 <HAL_PWR_EnterSTANDBYMode>

  // --- Code execution stops here and will resume from Reset_Handler on wakeup ---
  // --- Effectively, main() will restart from the beginning.             ---
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	0801590c 	.word	0x0801590c
 8001c30:	48001000 	.word	0x48001000
 8001c34:	48000800 	.word	0x48000800
 8001c38:	08015930 	.word	0x08015930
 8001c3c:	58000400 	.word	0x58000400
 8001c40:	08015948 	.word	0x08015948

08001c44 <_Z20ResetInactivityTimerv>:

void ResetInactivityTimer(void) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  // printf("Inactivity timer reset.\r\n");
  inactivity_timer_elapsed_flag = false;
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <_Z20ResetInactivityTimerv+0x1c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
  __HAL_TIM_SET_COUNTER(&htim16, 0); // Reset counter for TIM6
 8001c4e:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <_Z20ResetInactivityTimerv+0x20>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start_IT(&htim16);    // Restart TIM6
 8001c56:	4803      	ldr	r0, [pc, #12]	@ (8001c64 <_Z20ResetInactivityTimerv+0x20>)
 8001c58:	f00e ff28 	bl	8010aac <HAL_TIM_Base_Start_IT>
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000450 	.word	0x20000450
 8001c64:	200005fc 	.word	0x200005fc

08001c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6a:	b0b3      	sub	sp, #204	@ 0xcc
 8001c6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c6e:	f008 fe79 	bl	800a964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c72:	f000 fccb 	bl	800260c <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c76:	f000 fd3f 	bl	80026f8 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001c7a:	f7ff fd57 	bl	800172c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c7e:	f7ff fae5 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c82:	f7ff fab8 	bl	80011f6 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c86:	f7ff f9e9 	bl	800105c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c8a:	f7ff fc3d 	bl	8001508 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c8e:	f7ff fc7b 	bl	8001588 <MX_I2C3_Init>
  MX_RTC_Init();
 8001c92:	f001 f9eb 	bl	800306c <MX_RTC_Init>
  MX_TIM2_Init();
 8001c96:	f001 fd4b 	bl	8003730 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001c9a:	f001 fa81 	bl	80031a0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001c9e:	f001 fe1b 	bl	80038d8 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8001ca2:	f001 fd93 	bl	80037cc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  printf(" System Initialized. Wakeup source: %d (0=Unk, 1=IMU)\r\n", g_wakeup_source);
 8001ca6:	4ba4      	ldr	r3, [pc, #656]	@ (8001f38 <main+0x2d0>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4619      	mov	r1, r3
 8001cac:	48a3      	ldr	r0, [pc, #652]	@ (8001f3c <main+0x2d4>)
 8001cae:	f011 fa35 	bl	801311c <iprintf>
  // Default GPIO states
  // HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
  // HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	48a2      	ldr	r0, [pc, #648]	@ (8001f40 <main+0x2d8>)
 8001cb8:	f00a fdf0 	bl	800c89c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_RESET_GPIO_Port, MUX_RESET_Pin, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc6:	f00a fde9 	bl	800c89c <HAL_GPIO_WritePin>

  // Start the timer in interrupt mode
  // Example: if you want to measure every 5 seconds, and your timer is TIM2
  // Configure TIM2 in CubeMX for a 5-second period (e.g., Prescaler & Period values)
  // and enable its update interrupt.
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) { Error_Handler();}
 8001cca:	489e      	ldr	r0, [pc, #632]	@ (8001f44 <main+0x2dc>)
 8001ccc:	f00e feee 	bl	8010aac <HAL_TIM_Base_Start_IT>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bf14      	ite	ne
 8001cd6:	2301      	movne	r3, #1
 8001cd8:	2300      	moveq	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <main+0x7c>
 8001ce0:	f001 f930 	bl	8002f44 <Error_Handler>

  printf("Initializing PCA9546A multiplexer... ");
 8001ce4:	4898      	ldr	r0, [pc, #608]	@ (8001f48 <main+0x2e0>)
 8001ce6:	f011 fa19 	bl	801311c <iprintf>
  // Initialize the I2C multiplexer structure
  i2c_multiplexer.hi2c = &hi2c1; // Assign the I2C peripheral handle
 8001cea:	4b98      	ldr	r3, [pc, #608]	@ (8001f4c <main+0x2e4>)
 8001cec:	4a98      	ldr	r2, [pc, #608]	@ (8001f50 <main+0x2e8>)
 8001cee:	601a      	str	r2, [r3, #0]
  i2c_multiplexer.rst_port = MUX_RESET_GPIO_Port;  // From main.h
 8001cf0:	4b96      	ldr	r3, [pc, #600]	@ (8001f4c <main+0x2e4>)
 8001cf2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001cf6:	605a      	str	r2, [r3, #4]
  i2c_multiplexer.rst_pin = MUX_RESET_Pin;         // From main.h
 8001cf8:	4b94      	ldr	r3, [pc, #592]	@ (8001f4c <main+0x2e4>)
 8001cfa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cfe:	811a      	strh	r2, [r3, #8]
  i2c_multiplexer.addr_offset = 0;
 8001d00:	4b92      	ldr	r3, [pc, #584]	@ (8001f4c <main+0x2e4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	729a      	strb	r2, [r3, #10]

  // select the desired chanel based on the switch 1 position
  if (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_SET) {
 8001d06:	2108      	movs	r1, #8
 8001d08:	4892      	ldr	r0, [pc, #584]	@ (8001f54 <main+0x2ec>)
 8001d0a:	f00a fdaf 	bl	800c86c <HAL_GPIO_ReadPin>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00d      	beq.n	8001d3a <main+0xd2>
    i2c_channel_to_use = 0; // Channel 1
 8001d1e:	4b8e      	ldr	r3, [pc, #568]	@ (8001f58 <main+0x2f0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_SET);
 8001d24:	2201      	movs	r2, #1
 8001d26:	2102      	movs	r1, #2
 8001d28:	488a      	ldr	r0, [pc, #552]	@ (8001f54 <main+0x2ec>)
 8001d2a:	f00a fdb7 	bl	800c89c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2180      	movs	r1, #128	@ 0x80
 8001d32:	488a      	ldr	r0, [pc, #552]	@ (8001f5c <main+0x2f4>)
 8001d34:	f00a fdb2 	bl	800c89c <HAL_GPIO_WritePin>
 8001d38:	e00c      	b.n	8001d54 <main+0xec>
  } else {
    i2c_channel_to_use = 1; // Channel 0
 8001d3a:	4b87      	ldr	r3, [pc, #540]	@ (8001f58 <main+0x2f0>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2102      	movs	r1, #2
 8001d44:	4883      	ldr	r0, [pc, #524]	@ (8001f54 <main+0x2ec>)
 8001d46:	f00a fda9 	bl	800c89c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	4883      	ldr	r0, [pc, #524]	@ (8001f5c <main+0x2f4>)
 8001d50:	f00a fda4 	bl	800c89c <HAL_GPIO_WritePin>
  }
  if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
 8001d54:	4b80      	ldr	r3, [pc, #512]	@ (8001f58 <main+0x2f0>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	487c      	ldr	r0, [pc, #496]	@ (8001f4c <main+0x2e4>)
 8001d5c:	f010 fc18 	bl	8012590 <_Z14i2c_mux_selectP7i2c_muxi>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bf0c      	ite	eq
 8001d66:	2301      	moveq	r3, #1
 8001d68:	2300      	movne	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <main+0x116>
      printf("PCA9546A Initialized Successfully! Channel %d selected.\n", i2c_channel_to_use);
 8001d70:	4b79      	ldr	r3, [pc, #484]	@ (8001f58 <main+0x2f0>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	487a      	ldr	r0, [pc, #488]	@ (8001f60 <main+0x2f8>)
 8001d78:	f011 f9d0 	bl	801311c <iprintf>
 8001d7c:	e005      	b.n	8001d8a <main+0x122>
  } else {
      printf("Failed to select channel %d on I2C multiplexer.\n", i2c_channel_to_use);
 8001d7e:	4b76      	ldr	r3, [pc, #472]	@ (8001f58 <main+0x2f0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4877      	ldr	r0, [pc, #476]	@ (8001f64 <main+0x2fc>)
 8001d86:	f011 f9c9 	bl	801311c <iprintf>
  }

  // I2C1 scanning
  I2C_Scan(&hi2c1);
 8001d8a:	4871      	ldr	r0, [pc, #452]	@ (8001f50 <main+0x2e8>)
 8001d8c:	f000 fd7a 	bl	8002884 <_Z8I2C_ScanP19__I2C_HandleTypeDef>
  // I2C3 scanning
  I2C_Scan(&hi2c3);
 8001d90:	4875      	ldr	r0, [pc, #468]	@ (8001f68 <main+0x300>)
 8001d92:	f000 fd77 	bl	8002884 <_Z8I2C_ScanP19__I2C_HandleTypeDef>

  printf("Initializing DRV8214 drivers...\n");
 8001d96:	4875      	ldr	r0, [pc, #468]	@ (8001f6c <main+0x304>)
 8001d98:	f011 fa30 	bl	80131fc <puts>
  // Pass the HAL I2C handle to the I2C platform layer
  drv8214_i2c_set_handle(&hi2c1); // &hi2c1 is defined in Core/Src/i2c.c and declared in Core/Inc/i2c.h
 8001d9c:	486c      	ldr	r0, [pc, #432]	@ (8001f50 <main+0x2e8>)
 8001d9e:	f008 fd03 	bl	800a7a8 <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef>
  for (int i = 0; i < NUM_DRIVERS; i++) {  // Initialize each driver
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001da8:	e064      	b.n	8001e74 <main+0x20c>
    driver_configs[i] = DRV8214_Config();
 8001daa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dae:	222c      	movs	r2, #44	@ 0x2c
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f011 fa2a 	bl	801320c <memset>
 8001db8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fd1e 	bl	80017fe <_ZN14DRV8214_ConfigC1Ev>
 8001dc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001dc6:	222c      	movs	r2, #44	@ 0x2c
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	4a68      	ldr	r2, [pc, #416]	@ (8001f70 <main+0x308>)
 8001dce:	4413      	add	r3, r2
 8001dd0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001dd4:	469c      	mov	ip, r3
 8001dd6:	f104 0e20 	add.w	lr, r4, #32
 8001dda:	4665      	mov	r5, ip
 8001ddc:	4626      	mov	r6, r4
 8001dde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001de0:	6028      	str	r0, [r5, #0]
 8001de2:	6069      	str	r1, [r5, #4]
 8001de4:	60aa      	str	r2, [r5, #8]
 8001de6:	60eb      	str	r3, [r5, #12]
 8001de8:	3410      	adds	r4, #16
 8001dea:	f10c 0c10 	add.w	ip, ip, #16
 8001dee:	4574      	cmp	r4, lr
 8001df0:	d1f3      	bne.n	8001dda <main+0x172>
 8001df2:	4662      	mov	r2, ip
 8001df4:	4623      	mov	r3, r4
 8001df6:	cb03      	ldmia	r3!, {r0, r1}
 8001df8:	6010      	str	r0, [r2, #0]
 8001dfa:	6051      	str	r1, [r2, #4]
 8001dfc:	8819      	ldrh	r1, [r3, #0]
 8001dfe:	789b      	ldrb	r3, [r3, #2]
 8001e00:	8111      	strh	r1, [r2, #8]
 8001e02:	7293      	strb	r3, [r2, #10]
    if (drivers[i].init(driver_configs[i]) == DRV8214_OK) {
 8001e04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4a58      	ldr	r2, [pc, #352]	@ (8001f74 <main+0x30c>)
 8001e12:	441a      	add	r2, r3
 8001e14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e18:	212c      	movs	r1, #44	@ 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4954      	ldr	r1, [pc, #336]	@ (8001f70 <main+0x308>)
 8001e20:	440b      	add	r3, r1
 8001e22:	4619      	mov	r1, r3
 8001e24:	4610      	mov	r0, r2
 8001e26:	f006 fed1 	bl	8008bcc <_ZN7DRV82144initERK14DRV8214_Config>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d010      	beq.n	8001e5c <main+0x1f4>
      drivers[i].resetFaultFlags();
 8001e3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4a4b      	ldr	r2, [pc, #300]	@ (8001f74 <main+0x30c>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f007 faaa 	bl	80093a4 <_ZN7DRV821415resetFaultFlagsEv>
      printf("DRV8214 driver %d initialized successfully!\n", i);
 8001e50:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001e54:	4848      	ldr	r0, [pc, #288]	@ (8001f78 <main+0x310>)
 8001e56:	f011 f961 	bl	801311c <iprintf>
 8001e5a:	e006      	b.n	8001e6a <main+0x202>
    } else {
      printf("Failed to initialize DRV8214 driver %d.\n", i);
 8001e5c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001e60:	4846      	ldr	r0, [pc, #280]	@ (8001f7c <main+0x314>)
 8001e62:	f011 f95b 	bl	801311c <iprintf>
      Error_Handler();
 8001e66:	f001 f86d 	bl	8002f44 <Error_Handler>
  for (int i = 0; i < NUM_DRIVERS; i++) {  // Initialize each driver
 8001e6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001e74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	dd96      	ble.n	8001daa <main+0x142>
    }
  }

  printf("Initializing BMI270 IMU... ");
 8001e7c:	4840      	ldr	r0, [pc, #256]	@ (8001f80 <main+0x318>)
 8001e7e:	f011 f94d 	bl	801311c <iprintf>
  bmi2_set_i2c_handle(&hi2c3);
 8001e82:	4839      	ldr	r0, [pc, #228]	@ (8001f68 <main+0x300>)
 8001e84:	f006 fdf8 	bl	8008a78 <bmi2_set_i2c_handle>
  // Configure the bmi2_dev structure
  bmi270_sensor.intf_ptr = &hi2c3; // Pass a pointer to the I2C HAL handle
 8001e88:	4b3e      	ldr	r3, [pc, #248]	@ (8001f84 <main+0x31c>)
 8001e8a:	4a37      	ldr	r2, [pc, #220]	@ (8001f68 <main+0x300>)
 8001e8c:	605a      	str	r2, [r3, #4]
  bmi270_sensor.intf = BMI2_I2C_INTF;
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f84 <main+0x31c>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	725a      	strb	r2, [r3, #9]
  bmi270_sensor.read = bmi2_i2c_read;
 8001e94:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <main+0x31c>)
 8001e96:	4a3c      	ldr	r2, [pc, #240]	@ (8001f88 <main+0x320>)
 8001e98:	639a      	str	r2, [r3, #56]	@ 0x38
  bmi270_sensor.write = bmi2_i2c_write;
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f84 <main+0x31c>)
 8001e9c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f8c <main+0x324>)
 8001e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  bmi270_sensor.delay_us = bmi2_delay_us;
 8001ea0:	4b38      	ldr	r3, [pc, #224]	@ (8001f84 <main+0x31c>)
 8001ea2:	4a3b      	ldr	r2, [pc, #236]	@ (8001f90 <main+0x328>)
 8001ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  bmi270_sensor.read_write_len = 32;    // Max burst read/write length (check BMI270 datasheet, 32 or 64 for features is common)
 8001ea6:	4b37      	ldr	r3, [pc, #220]	@ (8001f84 <main+0x31c>)
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	81da      	strh	r2, [r3, #14]
                                        // For config file loading, this might need to be larger if the API doesn't chunk it.
                                        // The bmi270_config_file is 8KB, the API chunks this. 32 should be fine for most operations.
  bmi270_sensor.config_file_ptr = NULL; // bmi270_init will assign the internal one
 8001eac:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <main+0x31c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
  int8_t rslt_bmi = bmi270_init(&bmi270_sensor);
 8001eb2:	4834      	ldr	r0, [pc, #208]	@ (8001f84 <main+0x31c>)
 8001eb4:	f004 f808 	bl	8005ec8 <bmi270_init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
  if (rslt_bmi == BMI2_OK) {
 8001ebe:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <main+0x26c>
      printf("BMI270 initialized successfully! Chip ID: 0x%X\r\n", bmi270_sensor.chip_id);
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f84 <main+0x31c>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4831      	ldr	r0, [pc, #196]	@ (8001f94 <main+0x32c>)
 8001ece:	f011 f925 	bl	801311c <iprintf>
 8001ed2:	e007      	b.n	8001ee4 <main+0x27c>
  } else {
      printf("BMI270 initialization failed. Error code: %d\r\n", rslt_bmi);
 8001ed4:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 8001ed8:	4619      	mov	r1, r3
 8001eda:	482f      	ldr	r0, [pc, #188]	@ (8001f98 <main+0x330>)
 8001edc:	f011 f91e 	bl	801311c <iprintf>
      Error_Handler();
 8001ee0:	f001 f830 	bl	8002f44 <Error_Handler>
  }

  // --- BMI270 LOW POWER AND ANY MOTION SETUP ---
  if (rslt_bmi == BMI2_OK) {
 8001ee4:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <main+0x28a>
    Configure_BMI270_LowPower_AnyMotion(&bmi270_sensor);
 8001eec:	4825      	ldr	r0, [pc, #148]	@ (8001f84 <main+0x31c>)
 8001eee:	f7ff fd0d 	bl	800190c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev>
  }
  // --- END BMI270 SETUP ---

  if (g_wakeup_source == WAKEUP_SOURCE_UNKNOWN) { // Only blink on cold boot
 8001ef2:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <main+0x2d0>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d150      	bne.n	8001f9c <main+0x334>
      WS2812_SetColor(255, 0, 0, 100); HAL_Delay(330);
 8001efa:	2364      	movs	r3, #100	@ 0x64
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	20ff      	movs	r0, #255	@ 0xff
 8001f02:	f7ff f81d 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
 8001f06:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001f0a:	f008 fdb1 	bl	800aa70 <HAL_Delay>
      WS2812_SetColor(0, 255, 0, 100); HAL_Delay(330);
 8001f0e:	2364      	movs	r3, #100	@ 0x64
 8001f10:	2200      	movs	r2, #0
 8001f12:	21ff      	movs	r1, #255	@ 0xff
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7ff f813 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
 8001f1a:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001f1e:	f008 fda7 	bl	800aa70 <HAL_Delay>
      WS2812_SetColor(0, 0, 255, 100); HAL_Delay(330);
 8001f22:	2364      	movs	r3, #100	@ 0x64
 8001f24:	22ff      	movs	r2, #255	@ 0xff
 8001f26:	2100      	movs	r1, #0
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f7ff f809 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
 8001f2e:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001f32:	f008 fd9d 	bl	800aa70 <HAL_Delay>
 8001f36:	e03f      	b.n	8001fb8 <main+0x350>
 8001f38:	20000452 	.word	0x20000452
 8001f3c:	0801597c 	.word	0x0801597c
 8001f40:	48001c00 	.word	0x48001c00
 8001f44:	200005b0 	.word	0x200005b0
 8001f48:	080159b4 	.word	0x080159b4
 8001f4c:	200003dc 	.word	0x200003dc
 8001f50:	200002e4 	.word	0x200002e4
 8001f54:	48001000 	.word	0x48001000
 8001f58:	20000010 	.word	0x20000010
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	080159dc 	.word	0x080159dc
 8001f64:	08015a18 	.word	0x08015a18
 8001f68:	20000338 	.word	0x20000338
 8001f6c:	08015a4c 	.word	0x08015a4c
 8001f70:	20000024 	.word	0x20000024
 8001f74:	20000454 	.word	0x20000454
 8001f78:	08015a6c 	.word	0x08015a6c
 8001f7c:	08015a9c 	.word	0x08015a9c
 8001f80:	08015ac8 	.word	0x08015ac8
 8001f84:	200003e8 	.word	0x200003e8
 8001f88:	08008a99 	.word	0x08008a99
 8001f8c:	08008af1 	.word	0x08008af1
 8001f90:	08008b49 	.word	0x08008b49
 8001f94:	08015ae4 	.word	0x08015ae4
 8001f98:	08015b18 	.word	0x08015b18
  } else if (g_wakeup_source == WAKEUP_SOURCE_IMU) {
 8001f9c:	4b91      	ldr	r3, [pc, #580]	@ (80021e4 <main+0x57c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d109      	bne.n	8001fb8 <main+0x350>
      WS2812_SetColor(255, 255, 255, 100); // White for IMU wakeup
 8001fa4:	2364      	movs	r3, #100	@ 0x64
 8001fa6:	22ff      	movs	r2, #255	@ 0xff
 8001fa8:	21ff      	movs	r1, #255	@ 0xff
 8001faa:	20ff      	movs	r0, #255	@ 0xff
 8001fac:	f7fe ffc8 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
      HAL_Delay(1000);
 8001fb0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fb4:	f008 fd5c 	bl	800aa70 <HAL_Delay>
  }
  WS2812_SetColor(0, 0, 0, 100);
 8001fb8:	2364      	movs	r3, #100	@ 0x64
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7fe ffbe 	bl	8000f40 <_Z15WS2812_SetColorhhhh>

  ResetInactivityTimer(); // Start the 30-second inactivity timer
 8001fc4:	f7ff fe3e 	bl	8001c44 <_Z20ResetInactivityTimerv>
  printf("Main loop started. Inactivity timer running for %lu ms.\r\n", INACTIVITY_TIMEOUT_MS);
 8001fc8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fcc:	4886      	ldr	r0, [pc, #536]	@ (80021e8 <main+0x580>)
 8001fce:	f011 f8a5 	bl	801311c <iprintf>
  //       printf("BMI270 Gyro configured.\r\n");
  //   }
  // }

  // Blink the LED to indicate startup finished
  WS2812_SetColor(255, 0, 0, 100);
 8001fd2:	2364      	movs	r3, #100	@ 0x64
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	20ff      	movs	r0, #255	@ 0xff
 8001fda:	f7fe ffb1 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 8001fde:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001fe2:	f008 fd45 	bl	800aa70 <HAL_Delay>
  WS2812_SetColor(0, 255, 0, 100);
 8001fe6:	2364      	movs	r3, #100	@ 0x64
 8001fe8:	2200      	movs	r2, #0
 8001fea:	21ff      	movs	r1, #255	@ 0xff
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7fe ffa7 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 8001ff2:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001ff6:	f008 fd3b 	bl	800aa70 <HAL_Delay>
  WS2812_SetColor(0, 0, 255, 100);
 8001ffa:	2364      	movs	r3, #100	@ 0x64
 8001ffc:	22ff      	movs	r2, #255	@ 0xff
 8001ffe:	2100      	movs	r1, #0
 8002000:	2000      	movs	r0, #0
 8002002:	f7fe ff9d 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 8002006:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 800200a:	f008 fd31 	bl	800aa70 <HAL_Delay>
  WS2812_SetColor(0, 0, 0, 100); // Turn off the LED
 800200e:	2364      	movs	r3, #100	@ 0x64
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	2000      	movs	r0, #0
 8002016:	f7fe ff93 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  /* USER CODE BEGIN WHILE */

  while (1)
  { 
    // Check for IMU wakeup (flag set in EXTI callback)
    if (imu_wakeup_pending) {
 800201a:	4b74      	ldr	r3, [pc, #464]	@ (80021ec <main+0x584>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d017      	beq.n	8002054 <main+0x3ec>
      imu_wakeup_pending = false; // Clear flag
 8002024:	4b71      	ldr	r3, [pc, #452]	@ (80021ec <main+0x584>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
      printf("IMU Wakeup processed in main loop.\r\n");
 800202a:	4871      	ldr	r0, [pc, #452]	@ (80021f0 <main+0x588>)
 800202c:	f011 f8e6 	bl	80131fc <puts>
      WS2812_SetColor(255, 165, 0, 100); // Orange
 8002030:	2364      	movs	r3, #100	@ 0x64
 8002032:	2200      	movs	r2, #0
 8002034:	21a5      	movs	r1, #165	@ 0xa5
 8002036:	20ff      	movs	r0, #255	@ 0xff
 8002038:	f7fe ff82 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
      HAL_Delay(500);
 800203c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002040:	f008 fd16 	bl	800aa70 <HAL_Delay>
      WS2812_SetColor(0, 0, 0, 100);
 8002044:	2364      	movs	r3, #100	@ 0x64
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	2000      	movs	r0, #0
 800204c:	f7fe ff78 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
      ResetInactivityTimer();
 8002050:	f7ff fdf8 	bl	8001c44 <_Z20ResetInactivityTimerv>
      // Add any specific actions for IMU wakeup here
    }

    // Check for inactivity timer timeout
    if (inactivity_timer_elapsed_flag) {
 8002054:	4b67      	ldr	r3, [pc, #412]	@ (80021f4 <main+0x58c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <main+0x400>
      inactivity_timer_elapsed_flag = false; // Clear flag
 800205e:	4b65      	ldr	r3, [pc, #404]	@ (80021f4 <main+0x58c>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
      EnterStandbyMode(); // This function will not return; MCU resets on wakeup.
 8002064:	f7ff fdb6 	bl	8001bd4 <_Z16EnterStandbyModev>
    }

    if (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_SET && i2c_channel_to_use == 0) {
 8002068:	2108      	movs	r1, #8
 800206a:	4863      	ldr	r0, [pc, #396]	@ (80021f8 <main+0x590>)
 800206c:	f00a fbfe 	bl	800c86c <HAL_GPIO_ReadPin>
 8002070:	4603      	mov	r3, r0
 8002072:	2b01      	cmp	r3, #1
 8002074:	d105      	bne.n	8002082 <main+0x41a>
 8002076:	4b61      	ldr	r3, [pc, #388]	@ (80021fc <main+0x594>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <main+0x41a>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <main+0x41c>
 8002082:	2300      	movs	r3, #0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d07a      	beq.n	800217e <main+0x516>
      i2c_channel_to_use = 1;
 8002088:	4b5c      	ldr	r3, [pc, #368]	@ (80021fc <main+0x594>)
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	2102      	movs	r1, #2
 8002092:	4859      	ldr	r0, [pc, #356]	@ (80021f8 <main+0x590>)
 8002094:	f00a fc02 	bl	800c89c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_SET);
 8002098:	2201      	movs	r2, #1
 800209a:	2180      	movs	r1, #128	@ 0x80
 800209c:	4858      	ldr	r0, [pc, #352]	@ (8002200 <main+0x598>)
 800209e:	f00a fbfd 	bl	800c89c <HAL_GPIO_WritePin>
      if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
 80020a2:	4b56      	ldr	r3, [pc, #344]	@ (80021fc <main+0x594>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4619      	mov	r1, r3
 80020a8:	4856      	ldr	r0, [pc, #344]	@ (8002204 <main+0x59c>)
 80020aa:	f010 fa71 	bl	8012590 <_Z14i2c_mux_selectP7i2c_muxi>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <main+0x464>
        printf("Channel %d selected successfully!\n", i2c_channel_to_use);
 80020be:	4b4f      	ldr	r3, [pc, #316]	@ (80021fc <main+0x594>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	4850      	ldr	r0, [pc, #320]	@ (8002208 <main+0x5a0>)
 80020c6:	f011 f829 	bl	801311c <iprintf>
 80020ca:	e005      	b.n	80020d8 <main+0x470>
      } else {
          printf("Failed to select channel %d on I2C multiplexer.\n", i2c_channel_to_use);
 80020cc:	4b4b      	ldr	r3, [pc, #300]	@ (80021fc <main+0x594>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	484e      	ldr	r0, [pc, #312]	@ (800220c <main+0x5a4>)
 80020d4:	f011 f822 	bl	801311c <iprintf>
      }
      HAL_Delay(10);
 80020d8:	200a      	movs	r0, #10
 80020da:	f008 fcc9 	bl	800aa70 <HAL_Delay>
      driver_configs[i2c_channel_to_use] = DRV8214_Config();
 80020de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020e2:	222c      	movs	r2, #44	@ 0x2c
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f011 f890 	bl	801320c <memset>
 80020ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fb84 	bl	80017fe <_ZN14DRV8214_ConfigC1Ev>
 80020f6:	4b41      	ldr	r3, [pc, #260]	@ (80021fc <main+0x594>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	232c      	movs	r3, #44	@ 0x2c
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	4a43      	ldr	r2, [pc, #268]	@ (8002210 <main+0x5a8>)
 8002104:	4413      	add	r3, r2
 8002106:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800210a:	469c      	mov	ip, r3
 800210c:	f104 0e20 	add.w	lr, r4, #32
 8002110:	4665      	mov	r5, ip
 8002112:	4626      	mov	r6, r4
 8002114:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002116:	6028      	str	r0, [r5, #0]
 8002118:	6069      	str	r1, [r5, #4]
 800211a:	60aa      	str	r2, [r5, #8]
 800211c:	60eb      	str	r3, [r5, #12]
 800211e:	3410      	adds	r4, #16
 8002120:	f10c 0c10 	add.w	ip, ip, #16
 8002124:	4574      	cmp	r4, lr
 8002126:	d1f3      	bne.n	8002110 <main+0x4a8>
 8002128:	4662      	mov	r2, ip
 800212a:	4623      	mov	r3, r4
 800212c:	cb03      	ldmia	r3!, {r0, r1}
 800212e:	6010      	str	r0, [r2, #0]
 8002130:	6051      	str	r1, [r2, #4]
 8002132:	8819      	ldrh	r1, [r3, #0]
 8002134:	789b      	ldrb	r3, [r3, #2]
 8002136:	8111      	strh	r1, [r2, #8]
 8002138:	7293      	strb	r3, [r2, #10]
      	 drivers[i2c_channel_to_use].init(driver_configs[i2c_channel_to_use]);
 800213a:	4b30      	ldr	r3, [pc, #192]	@ (80021fc <main+0x594>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4a32      	ldr	r2, [pc, #200]	@ (8002214 <main+0x5ac>)
 800214a:	441a      	add	r2, r3
 800214c:	4b2b      	ldr	r3, [pc, #172]	@ (80021fc <main+0x594>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	232c      	movs	r3, #44	@ 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	492d      	ldr	r1, [pc, #180]	@ (8002210 <main+0x5a8>)
 800215a:	440b      	add	r3, r1
 800215c:	4619      	mov	r1, r3
 800215e:	4610      	mov	r0, r2
 8002160:	f006 fd34 	bl	8008bcc <_ZN7DRV82144initERK14DRV8214_Config>
      	 drivers[i2c_channel_to_use].resetFaultFlags();
 8002164:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <main+0x594>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4a28      	ldr	r2, [pc, #160]	@ (8002214 <main+0x5ac>)
 8002174:	4413      	add	r3, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f007 f914 	bl	80093a4 <_ZN7DRV821415resetFaultFlagsEv>
 800217c:	e0a4      	b.n	80022c8 <main+0x660>
    } else if (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_RESET && i2c_channel_to_use == 1) {
 800217e:	2108      	movs	r1, #8
 8002180:	481d      	ldr	r0, [pc, #116]	@ (80021f8 <main+0x590>)
 8002182:	f00a fb73 	bl	800c86c <HAL_GPIO_ReadPin>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <main+0x530>
 800218c:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <main+0x594>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <main+0x530>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <main+0x532>
 8002198:	2300      	movs	r3, #0
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8094 	beq.w	80022c8 <main+0x660>
        i2c_channel_to_use = 0;
 80021a0:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <main+0x594>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_SET);
 80021a6:	2201      	movs	r2, #1
 80021a8:	2102      	movs	r1, #2
 80021aa:	4813      	ldr	r0, [pc, #76]	@ (80021f8 <main+0x590>)
 80021ac:	f00a fb76 	bl	800c89c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2180      	movs	r1, #128	@ 0x80
 80021b4:	4812      	ldr	r0, [pc, #72]	@ (8002200 <main+0x598>)
 80021b6:	f00a fb71 	bl	800c89c <HAL_GPIO_WritePin>
        if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <main+0x594>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	4619      	mov	r1, r3
 80021c0:	4810      	ldr	r0, [pc, #64]	@ (8002204 <main+0x59c>)
 80021c2:	f010 f9e5 	bl	8012590 <_Z14i2c_mux_selectP7i2c_muxi>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d020      	beq.n	8002218 <main+0x5b0>
          printf("Channel %d selected successfully!\n", i2c_channel_to_use);
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <main+0x594>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	480a      	ldr	r0, [pc, #40]	@ (8002208 <main+0x5a0>)
 80021de:	f010 ff9d 	bl	801311c <iprintf>
 80021e2:	e01f      	b.n	8002224 <main+0x5bc>
 80021e4:	20000452 	.word	0x20000452
 80021e8:	08015b48 	.word	0x08015b48
 80021ec:	20000451 	.word	0x20000451
 80021f0:	08015b84 	.word	0x08015b84
 80021f4:	20000450 	.word	0x20000450
 80021f8:	48001000 	.word	0x48001000
 80021fc:	20000010 	.word	0x20000010
 8002200:	48000800 	.word	0x48000800
 8002204:	200003dc 	.word	0x200003dc
 8002208:	08015ba8 	.word	0x08015ba8
 800220c:	08015a18 	.word	0x08015a18
 8002210:	20000024 	.word	0x20000024
 8002214:	20000454 	.word	0x20000454
        } else {
            printf("Failed to select channel %d on I2C multiplexer.\n", i2c_channel_to_use);
 8002218:	4bbb      	ldr	r3, [pc, #748]	@ (8002508 <main+0x8a0>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	48bb      	ldr	r0, [pc, #748]	@ (800250c <main+0x8a4>)
 8002220:	f010 ff7c 	bl	801311c <iprintf>
        }
        HAL_Delay(10);
 8002224:	200a      	movs	r0, #10
 8002226:	f008 fc23 	bl	800aa70 <HAL_Delay>
        driver_configs[i2c_channel_to_use] = DRV8214_Config();
 800222a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800222e:	222c      	movs	r2, #44	@ 0x2c
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f010 ffea 	bl	801320c <memset>
 8002238:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fade 	bl	80017fe <_ZN14DRV8214_ConfigC1Ev>
 8002242:	4bb1      	ldr	r3, [pc, #708]	@ (8002508 <main+0x8a0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	232c      	movs	r3, #44	@ 0x2c
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	4ab0      	ldr	r2, [pc, #704]	@ (8002510 <main+0x8a8>)
 8002250:	4413      	add	r3, r2
 8002252:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8002256:	469c      	mov	ip, r3
 8002258:	f104 0e20 	add.w	lr, r4, #32
 800225c:	4665      	mov	r5, ip
 800225e:	4626      	mov	r6, r4
 8002260:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002262:	6028      	str	r0, [r5, #0]
 8002264:	6069      	str	r1, [r5, #4]
 8002266:	60aa      	str	r2, [r5, #8]
 8002268:	60eb      	str	r3, [r5, #12]
 800226a:	3410      	adds	r4, #16
 800226c:	f10c 0c10 	add.w	ip, ip, #16
 8002270:	4574      	cmp	r4, lr
 8002272:	d1f3      	bne.n	800225c <main+0x5f4>
 8002274:	4662      	mov	r2, ip
 8002276:	4623      	mov	r3, r4
 8002278:	cb03      	ldmia	r3!, {r0, r1}
 800227a:	6010      	str	r0, [r2, #0]
 800227c:	6051      	str	r1, [r2, #4]
 800227e:	8819      	ldrh	r1, [r3, #0]
 8002280:	789b      	ldrb	r3, [r3, #2]
 8002282:	8111      	strh	r1, [r2, #8]
 8002284:	7293      	strb	r3, [r2, #10]
      drivers[i2c_channel_to_use].init(driver_configs[i2c_channel_to_use]);
 8002286:	4ba0      	ldr	r3, [pc, #640]	@ (8002508 <main+0x8a0>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4a9f      	ldr	r2, [pc, #636]	@ (8002514 <main+0x8ac>)
 8002296:	441a      	add	r2, r3
 8002298:	4b9b      	ldr	r3, [pc, #620]	@ (8002508 <main+0x8a0>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	232c      	movs	r3, #44	@ 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	499a      	ldr	r1, [pc, #616]	@ (8002510 <main+0x8a8>)
 80022a6:	440b      	add	r3, r1
 80022a8:	4619      	mov	r1, r3
 80022aa:	4610      	mov	r0, r2
 80022ac:	f006 fc8e 	bl	8008bcc <_ZN7DRV82144initERK14DRV8214_Config>
      drivers[i2c_channel_to_use].resetFaultFlags();
 80022b0:	4b95      	ldr	r3, [pc, #596]	@ (8002508 <main+0x8a0>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4a95      	ldr	r2, [pc, #596]	@ (8002514 <main+0x8ac>)
 80022c0:	4413      	add	r3, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f007 f86e 	bl	80093a4 <_ZN7DRV821415resetFaultFlagsEv>
    }

    if (wakeup_event) {
 80022c8:	4b93      	ldr	r3, [pc, #588]	@ (8002518 <main+0x8b0>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 80bb 	beq.w	800244a <main+0x7e2>
      // Process the wakeup event (button press)
      printf("Button press detected! ID: %d\r\n", button_ID);
 80022d4:	4b91      	ldr	r3, [pc, #580]	@ (800251c <main+0x8b4>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4619      	mov	r1, r3
 80022dc:	4890      	ldr	r0, [pc, #576]	@ (8002520 <main+0x8b8>)
 80022de:	f010 ff1d 	bl	801311c <iprintf>
      wakeup_event = false; // Reset flag AFTER processing it
 80022e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002518 <main+0x8b0>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
      // display LED color based on button press
      switch (button_ID) {
 80022e8:	4b8c      	ldr	r3, [pc, #560]	@ (800251c <main+0x8b4>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	f200 8099 	bhi.w	8002428 <main+0x7c0>
 80022f6:	a201      	add	r2, pc, #4	@ (adr r2, 80022fc <main+0x694>)
 80022f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fc:	08002311 	.word	0x08002311
 8002300:	08002357 	.word	0x08002357
 8002304:	08002397 	.word	0x08002397
 8002308:	080023e9 	.word	0x080023e9
 800230c:	08002401 	.word	0x08002401
        case 1:
          WS2812_SetColor(255, 0, 0, 100); // Red
 8002310:	2364      	movs	r3, #100	@ 0x64
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	20ff      	movs	r0, #255	@ 0xff
 8002318:	f7fe fe12 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          // Move the motor forward
          drivers[i2c_channel_to_use].turnXRipples(ripple_target, stops_after_ripples, true, speed, voltage, current);
 800231c:	4b7a      	ldr	r3, [pc, #488]	@ (8002508 <main+0x8a0>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4a7a      	ldr	r2, [pc, #488]	@ (8002514 <main+0x8ac>)
 800232c:	1898      	adds	r0, r3, r2
 800232e:	4b7d      	ldr	r3, [pc, #500]	@ (8002524 <main+0x8bc>)
 8002330:	8819      	ldrh	r1, [r3, #0]
 8002332:	4b7d      	ldr	r3, [pc, #500]	@ (8002528 <main+0x8c0>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	4a7d      	ldr	r2, [pc, #500]	@ (800252c <main+0x8c4>)
 8002338:	edd2 7a00 	vldr	s15, [r2]
 800233c:	4a7c      	ldr	r2, [pc, #496]	@ (8002530 <main+0x8c8>)
 800233e:	ed92 7a00 	vldr	s14, [r2]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	eef0 0a47 	vmov.f32	s1, s14
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	2301      	movs	r3, #1
 800234e:	2201      	movs	r2, #1
 8002350:	f007 ff54 	bl	800a1fc <_ZN7DRV821412turnXRipplesEtbbtff>
          //drivers[i2c_channel_to_use].turnForward(speed_low, voltage, current);
          break;
 8002354:	e06f      	b.n	8002436 <main+0x7ce>
        case 2:
          WS2812_SetColor(0, 255, 0, 100); // Green
 8002356:	2364      	movs	r3, #100	@ 0x64
 8002358:	2200      	movs	r2, #0
 800235a:	21ff      	movs	r1, #255	@ 0xff
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe fdef 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          // Move the motor backward
          drivers[i2c_channel_to_use].turnReverse(speed_low, voltage, current);
 8002362:	4b69      	ldr	r3, [pc, #420]	@ (8002508 <main+0x8a0>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4a68      	ldr	r2, [pc, #416]	@ (8002514 <main+0x8ac>)
 8002372:	4413      	add	r3, r2
 8002374:	4a6f      	ldr	r2, [pc, #444]	@ (8002534 <main+0x8cc>)
 8002376:	8812      	ldrh	r2, [r2, #0]
 8002378:	496c      	ldr	r1, [pc, #432]	@ (800252c <main+0x8c4>)
 800237a:	edd1 7a00 	vldr	s15, [r1]
 800237e:	496c      	ldr	r1, [pc, #432]	@ (8002530 <main+0x8c8>)
 8002380:	ed91 7a00 	vldr	s14, [r1]
 8002384:	eef0 0a47 	vmov.f32	s1, s14
 8002388:	eeb0 0a67 	vmov.f32	s0, s15
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f007 fe90 	bl	800a0b4 <_ZN7DRV821411turnReverseEtff>
          break;
 8002394:	e04f      	b.n	8002436 <main+0x7ce>
        case 3:
          WS2812_SetColor(0, 0, 255, 100); // Blue
 8002396:	2364      	movs	r3, #100	@ 0x64
 8002398:	22ff      	movs	r2, #255	@ 0xff
 800239a:	2100      	movs	r1, #0
 800239c:	2000      	movs	r0, #0
 800239e:	f7fe fdcf 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          printf("Clearing fault flags...\r\n");
 80023a2:	4865      	ldr	r0, [pc, #404]	@ (8002538 <main+0x8d0>)
 80023a4:	f010 ff2a 	bl	80131fc <puts>
          drivers[i2c_channel_to_use].resetRippleCounter();
 80023a8:	4b57      	ldr	r3, [pc, #348]	@ (8002508 <main+0x8a0>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4a57      	ldr	r2, [pc, #348]	@ (8002514 <main+0x8ac>)
 80023b8:	4413      	add	r3, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f006 ffe3 	bl	8009386 <_ZN7DRV821418resetRippleCounterEv>
          drivers[i2c_channel_to_use].resetFaultFlags();
 80023c0:	4b51      	ldr	r3, [pc, #324]	@ (8002508 <main+0x8a0>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4a51      	ldr	r2, [pc, #324]	@ (8002514 <main+0x8ac>)
 80023d0:	4413      	add	r3, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f006 ffe6 	bl	80093a4 <_ZN7DRV821415resetFaultFlagsEv>
          I2C_Scan(&hi2c1);
 80023d8:	4858      	ldr	r0, [pc, #352]	@ (800253c <main+0x8d4>)
 80023da:	f000 fa53 	bl	8002884 <_Z8I2C_ScanP19__I2C_HandleTypeDef>
          HAL_Delay(1000); // Pause to see results
 80023de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023e2:	f008 fb45 	bl	800aa70 <HAL_Delay>
          break;
 80023e6:	e026      	b.n	8002436 <main+0x7ce>
        case 4:
          WS2812_SetColor(255, 255, 0, 100); // Yellow
 80023e8:	2364      	movs	r3, #100	@ 0x64
 80023ea:	2200      	movs	r2, #0
 80023ec:	21ff      	movs	r1, #255	@ 0xff
 80023ee:	20ff      	movs	r0, #255	@ 0xff
 80023f0:	f7fe fda6 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          printRegisters(i2c_channel_to_use);
 80023f4:	4b44      	ldr	r3, [pc, #272]	@ (8002508 <main+0x8a0>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 faef 	bl	80029dc <_Z14printRegistersh>
          break;
 80023fe:	e01a      	b.n	8002436 <main+0x7ce>
        case 5:
          WS2812_SetColor(255, 0, 255, 100); // Magenta
 8002400:	2364      	movs	r3, #100	@ 0x64
 8002402:	22ff      	movs	r2, #255	@ 0xff
 8002404:	2100      	movs	r1, #0
 8002406:	20ff      	movs	r0, #255	@ 0xff
 8002408:	f7fe fd9a 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          // Stop the motor
          drivers[i2c_channel_to_use].brakeMotor();
 800240c:	4b3e      	ldr	r3, [pc, #248]	@ (8002508 <main+0x8a0>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4a3e      	ldr	r2, [pc, #248]	@ (8002514 <main+0x8ac>)
 800241c:	4413      	add	r3, r2
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f007 feab 	bl	800a17c <_ZN7DRV821410brakeMotorEb>
          break;
 8002426:	e006      	b.n	8002436 <main+0x7ce>
        default:
          WS2812_SetColor(0, 0, 0, 100); // Off
 8002428:	2364      	movs	r3, #100	@ 0x64
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	2000      	movs	r0, #0
 8002430:	f7fe fd86 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          break;
 8002434:	bf00      	nop
      }
      HAL_Delay(1000);
 8002436:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800243a:	f008 fb19 	bl	800aa70 <HAL_Delay>
      WS2812_SetColor(0, 0, 0, 100); // Turn off the LED
 800243e:	2364      	movs	r3, #100	@ 0x64
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	2000      	movs	r0, #0
 8002446:	f7fe fd7b 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
    }

    if (rslt_bmi == BMI2_OK) { // Only if initialization and config were successful
 800244a:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 800244e:	2b00      	cmp	r3, #0
 8002450:	d130      	bne.n	80024b4 <main+0x84c>
      int8_t rslt_data;

      // The bmi2_get_sensor_data function will attempt to read data for
      // all sensors that are currently enabled (ACC, GYR, AUX) and sensortime.
      // It populates the fields within the 'sensor_values' union accordingly.
      rslt_data = bmi2_get_sensor_data(&sensor_values, &bmi270_sensor); // Pass the address of the union
 8002452:	463b      	mov	r3, r7
 8002454:	493a      	ldr	r1, [pc, #232]	@ (8002540 <main+0x8d8>)
 8002456:	4618      	mov	r0, r3
 8002458:	f002 f841 	bl	80044de <bmi2_get_sensor_data>
 800245c:	4603      	mov	r3, r0
 800245e:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba

      if (rslt_data == BMI2_OK) {
 8002462:	f997 30ba 	ldrsb.w	r3, [r7, #186]	@ 0xba
 8002466:	2b00      	cmp	r3, #0
 8002468:	d11b      	bne.n	80024a2 <main+0x83a>
          // You can check dev->sens_en_stat or the PWR_CTRL register if needed,
          // or just assume accel and gyro are enabled based on prior setup.

          // Assuming Accelerometer was enabled
          printf("ACC: X=%d Y=%d Z=%d | ",
                 sensor_values.acc.x,
 800246a:	f9b7 3000 	ldrsh.w	r3, [r7]
          printf("ACC: X=%d Y=%d Z=%d | ",
 800246e:	4619      	mov	r1, r3
                 sensor_values.acc.y,
 8002470:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
          printf("ACC: X=%d Y=%d Z=%d | ",
 8002474:	461a      	mov	r2, r3
                 sensor_values.acc.z);
 8002476:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
          printf("ACC: X=%d Y=%d Z=%d | ",
 800247a:	4832      	ldr	r0, [pc, #200]	@ (8002544 <main+0x8dc>)
 800247c:	f010 fe4e 	bl	801311c <iprintf>

          // Assuming Gyroscope was enabled
          printf("GYR: X=%d Y=%d Z=%d",
                 sensor_values.gyr.x,
 8002480:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
          printf("GYR: X=%d Y=%d Z=%d",
 8002484:	4619      	mov	r1, r3
                 sensor_values.gyr.y,
 8002486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
          printf("GYR: X=%d Y=%d Z=%d",
 800248a:	461a      	mov	r2, r3
                 sensor_values.gyr.z);
 800248c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
          printf("GYR: X=%d Y=%d Z=%d",
 8002490:	482d      	ldr	r0, [pc, #180]	@ (8002548 <main+0x8e0>)
 8002492:	f010 fe43 	bl	801311c <iprintf>

          // Print sensortime (if available and meaningful in your setup)
          // The bmi2_parse_sensor_data in bmi2.c shows how sens_time is populated in the struct.
          // If bmi2_get_sensor_data directly populates it:
          printf(" | ST: %lu\r\n", (unsigned long)sensor_values.sens_time);
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	4619      	mov	r1, r3
 800249a:	482c      	ldr	r0, [pc, #176]	@ (800254c <main+0x8e4>)
 800249c:	f010 fe3e 	bl	801311c <iprintf>
 80024a0:	e005      	b.n	80024ae <main+0x846>

      } else {
          printf("BMI270 Get Sensor Data Failed. Error: %d\r\n", rslt_data);
 80024a2:	f997 30ba 	ldrsb.w	r3, [r7, #186]	@ 0xba
 80024a6:	4619      	mov	r1, r3
 80024a8:	4829      	ldr	r0, [pc, #164]	@ (8002550 <main+0x8e8>)
 80024aa:	f010 fe37 	bl	801311c <iprintf>
      }
      HAL_Delay(100); // Read data every 100ms
 80024ae:	2064      	movs	r0, #100	@ 0x64
 80024b0:	f008 fade 	bl	800aa70 <HAL_Delay>
    }

    if (g_measure_battery_flag)
 80024b4:	4b27      	ldr	r3, [pc, #156]	@ (8002554 <main+0x8ec>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bf14      	ite	ne
 80024be:	2301      	movne	r3, #1
 80024c0:	2300      	moveq	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f43f ada8 	beq.w	800201a <main+0x3b2>
    {
        g_measure_battery_flag = 0; // Reset the flag
 80024ca:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <main+0x8ec>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]

        // 1. Enable BAT_SENSE circuitry
        HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_SET);
 80024d0:	2201      	movs	r2, #1
 80024d2:	2102      	movs	r1, #2
 80024d4:	4820      	ldr	r0, [pc, #128]	@ (8002558 <main+0x8f0>)
 80024d6:	f00a f9e1 	bl	800c89c <HAL_GPIO_WritePin>

        // 2. Wait for voltage to settle (C504 charging)
        // Tau = R_eff * C = 2.31kOhm * 100nF = 0.231 ms. 5*Tau ~ 1.15 ms.
        // Let's use a slightly larger delay for safety margin.
        HAL_Delay(10); 
 80024da:	200a      	movs	r0, #10
 80024dc:	f008 fac8 	bl	800aa70 <HAL_Delay>

        // 3. Start ADC conversion
        if (HAL_ADC_Start(&hadc1) != HAL_OK)
 80024e0:	481e      	ldr	r0, [pc, #120]	@ (800255c <main+0x8f4>)
 80024e2:	f008 fe4b 	bl	800b17c <HAL_ADC_Start>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf14      	ite	ne
 80024ec:	2301      	movne	r3, #1
 80024ee:	2300      	moveq	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d036      	beq.n	8002564 <main+0x8fc>
        {
            printf("ADC Start Error\r\n");
 80024f6:	481a      	ldr	r0, [pc, #104]	@ (8002560 <main+0x8f8>)
 80024f8:	f010 fe80 	bl	80131fc <puts>
            // Optionally turn off BAT_SENSE_EN here if error occurs early
            HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2102      	movs	r1, #2
 8002500:	4815      	ldr	r0, [pc, #84]	@ (8002558 <main+0x8f0>)
 8002502:	f00a f9cb 	bl	800c89c <HAL_GPIO_WritePin>
 8002506:	e06b      	b.n	80025e0 <main+0x978>
 8002508:	20000010 	.word	0x20000010
 800250c:	08015a18 	.word	0x08015a18
 8002510:	20000024 	.word	0x20000024
 8002514:	20000454 	.word	0x20000454
 8002518:	200003d0 	.word	0x200003d0
 800251c:	200003d1 	.word	0x200003d1
 8002520:	08015bcc 	.word	0x08015bcc
 8002524:	20000020 	.word	0x20000020
 8002528:	20000012 	.word	0x20000012
 800252c:	20000018 	.word	0x20000018
 8002530:	2000001c 	.word	0x2000001c
 8002534:	20000014 	.word	0x20000014
 8002538:	08015bec 	.word	0x08015bec
 800253c:	200002e4 	.word	0x200002e4
 8002540:	200003e8 	.word	0x200003e8
 8002544:	08015c08 	.word	0x08015c08
 8002548:	08015c20 	.word	0x08015c20
 800254c:	08015c34 	.word	0x08015c34
 8002550:	08015c44 	.word	0x08015c44
 8002554:	200003c8 	.word	0x200003c8
 8002558:	48001c00 	.word	0x48001c00
 800255c:	20000280 	.word	0x20000280
 8002560:	08015c70 	.word	0x08015c70
            // Handle error
        }
        else
        {
            // 4. Poll for ADC conversion complete (timeout e.g., 100ms)
            if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8002564:	2164      	movs	r1, #100	@ 0x64
 8002566:	4821      	ldr	r0, [pc, #132]	@ (80025ec <main+0x984>)
 8002568:	f008 fe8f 	bl	800b28a <HAL_ADC_PollForConversion>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf0c      	ite	eq
 8002572:	2301      	moveq	r3, #1
 8002574:	2300      	movne	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d02b      	beq.n	80025d4 <main+0x96c>
            {
                // 5. Read ADC value
                uint32_t adc_raw_value = HAL_ADC_GetValue(&hadc1);
 800257c:	481b      	ldr	r0, [pc, #108]	@ (80025ec <main+0x984>)
 800257e:	f008 ff11 	bl	800b3a4 <HAL_ADC_GetValue>
 8002582:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4

                // 6. Calculate voltage
                // V_sense = (ADC_raw / ADC_max_resolution) * V_ref
                float v_sense = ((float)adc_raw_value / ADC_RESOLUTION) * VREF_MCU;
 8002586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002592:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80025f0 <main+0x988>
 8002596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800259a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80025f4 <main+0x98c>
 800259e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a2:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
                // VBAT = V_sense * (R502 + R503) / R503
                g_battery_voltage = v_sense * BATTERY_SENSE_DIVIDER_RATIO;
 80025a6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80025aa:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80025f8 <main+0x990>
 80025ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b2:	4b12      	ldr	r3, [pc, #72]	@ (80025fc <main+0x994>)
 80025b4:	edc3 7a00 	vstr	s15, [r3]

                // For debugging:
                // Convert battery voltage to millivolts (integer)
                uint32_t battery_millivolts = (uint32_t)(g_battery_voltage * 1000.0f);
 80025b8:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <main+0x994>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002600 <main+0x998>
 80025c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ca:	ee17 3a90 	vmov	r3, s15
 80025ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025d2:	e002      	b.n	80025da <main+0x972>
//                       adc_raw_value,
//                       battery_millivolts);
            }
            else
            {
                printf("ADC Poll Timeout\r\n");
 80025d4:	480b      	ldr	r0, [pc, #44]	@ (8002604 <main+0x99c>)
 80025d6:	f010 fe11 	bl	80131fc <puts>
                // Handle timeout
            }
            // Stop ADC (important if not in continuous mode, good practice anyway)
            HAL_ADC_Stop(&hadc1);
 80025da:	4804      	ldr	r0, [pc, #16]	@ (80025ec <main+0x984>)
 80025dc:	f008 fe22 	bl	800b224 <HAL_ADC_Stop>
        }

        // 7. Disable BAT_SENSE circuitry to save power
        HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2102      	movs	r1, #2
 80025e4:	4808      	ldr	r0, [pc, #32]	@ (8002608 <main+0x9a0>)
 80025e6:	f00a f959 	bl	800c89c <HAL_GPIO_WritePin>
//	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80025ea:	e516      	b.n	800201a <main+0x3b2>
 80025ec:	20000280 	.word	0x20000280
 80025f0:	457ff000 	.word	0x457ff000
 80025f4:	40533333 	.word	0x40533333
 80025f8:	3fa66666 	.word	0x3fa66666
 80025fc:	200003cc 	.word	0x200003cc
 8002600:	447a0000 	.word	0x447a0000
 8002604:	08015c84 	.word	0x08015c84
 8002608:	48001c00 	.word	0x48001c00

0800260c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b09a      	sub	sp, #104	@ 0x68
 8002610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002612:	f107 0320 	add.w	r3, r7, #32
 8002616:	2248      	movs	r2, #72	@ 0x48
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f010 fdf6 	bl	801320c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
 800262c:	611a      	str	r2, [r3, #16]
 800262e:	615a      	str	r2, [r3, #20]
 8002630:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002632:	4b30      	ldr	r3, [pc, #192]	@ (80026f4 <_Z18SystemClock_Configv+0xe8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800263a:	4a2e      	ldr	r2, [pc, #184]	@ (80026f4 <_Z18SystemClock_Configv+0xe8>)
 800263c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b2c      	ldr	r3, [pc, #176]	@ (80026f4 <_Z18SystemClock_Configv+0xe8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800264e:	232b      	movs	r3, #43	@ 0x2b
 8002650:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002652:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002658:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800265c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800265e:	2301      	movs	r3, #1
 8002660:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002662:	2340      	movs	r3, #64	@ 0x40
 8002664:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002666:	2300      	movs	r3, #0
 8002668:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800266a:	2360      	movs	r3, #96	@ 0x60
 800266c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800266e:	2305      	movs	r3, #5
 8002670:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002672:	2302      	movs	r3, #2
 8002674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002676:	2301      	movs	r3, #1
 8002678:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800267a:	2300      	movs	r3, #0
 800267c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 30;
 800267e:	231e      	movs	r3, #30
 8002680:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002682:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002686:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8002688:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800268c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800268e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002692:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002694:	f107 0320 	add.w	r3, r7, #32
 8002698:	4618      	mov	r0, r3
 800269a:	f00c f8cf 	bl	800e83c <HAL_RCC_OscConfig>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80026ae:	f000 fc49 	bl	8002f44 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80026b2:	236f      	movs	r3, #111	@ 0x6f
 80026b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026b6:	2303      	movs	r3, #3
 80026b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2102      	movs	r1, #2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f00c fc26 	bl	800ef24 <HAL_RCC_ClockConfig>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf14      	ite	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	2300      	moveq	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <_Z18SystemClock_Configv+0xe0>
  {
    Error_Handler();
 80026e8:	f000 fc2c 	bl	8002f44 <Error_Handler>
  }
}
 80026ec:	bf00      	nop
 80026ee:	3768      	adds	r7, #104	@ 0x68
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	58000400 	.word	0x58000400

080026f8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b094      	sub	sp, #80	@ 0x50
 80026fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026fe:	463b      	mov	r3, r7
 8002700:	2250      	movs	r2, #80	@ 0x50
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f010 fd81 	bl	801320c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800270a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800270e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002710:	2300      	movs	r3, #0
 8002712:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002714:	2310      	movs	r3, #16
 8002716:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002718:	463b      	mov	r3, r7
 800271a:	4618      	mov	r0, r3
 800271c:	f00d f83f 	bl	800f79e <HAL_RCCEx_PeriphCLKConfig>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	bf14      	ite	ne
 8002726:	2301      	movne	r3, #1
 8002728:	2300      	moveq	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <_Z24PeriphCommonClock_Configv+0x3c>
  {
    Error_Handler();
 8002730:	f000 fc08 	bl	8002f44 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002734:	bf00      	nop
 8002736:	3750      	adds	r7, #80	@ 0x50
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUTTON1_Pin) // Replace YOUR_BUTTON_PIN with the actual pin, e.g., GPIO_PIN_13
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	2b80      	cmp	r3, #128	@ 0x80
 800274a:	d109      	bne.n	8002760 <HAL_GPIO_EXTI_Callback+0x24>
  {
	  wakeup_event = true; // Set flag for next loop iteration
 800274c:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <HAL_GPIO_EXTI_Callback+0x98>)
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002752:	4a21      	ldr	r2, [pc, #132]	@ (80027d8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	60d3      	str	r3, [r2, #12]
	  button_ID = 1;
 8002758:	4b20      	ldr	r3, [pc, #128]	@ (80027dc <HAL_GPIO_EXTI_Callback+0xa0>)
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
  else if (GPIO_Pin == BUTTON5_Pin) {
    wakeup_event = true; // Set flag for next loop iteration
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    button_ID = 5;
  }
}
 800275e:	e033      	b.n	80027c8 <HAL_GPIO_EXTI_Callback+0x8c>
  } else if (GPIO_Pin == BUTTON2_Pin) {
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	2b20      	cmp	r3, #32
 8002764:	d109      	bne.n	800277a <HAL_GPIO_EXTI_Callback+0x3e>
	  wakeup_event = true; // Set flag for next loop iteration
 8002766:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_GPIO_EXTI_Callback+0x98>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800276c:	4a1a      	ldr	r2, [pc, #104]	@ (80027d8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	60d3      	str	r3, [r2, #12]
	  button_ID = 2;
 8002772:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <HAL_GPIO_EXTI_Callback+0xa0>)
 8002774:	2202      	movs	r2, #2
 8002776:	701a      	strb	r2, [r3, #0]
}
 8002778:	e026      	b.n	80027c8 <HAL_GPIO_EXTI_Callback+0x8c>
  else if (GPIO_Pin == BUTTON3_Pin) {
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	2b10      	cmp	r3, #16
 800277e:	d109      	bne.n	8002794 <HAL_GPIO_EXTI_Callback+0x58>
	  wakeup_event = true; // Set flag for next loop iteration
 8002780:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <HAL_GPIO_EXTI_Callback+0x98>)
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002786:	4a14      	ldr	r2, [pc, #80]	@ (80027d8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	60d3      	str	r3, [r2, #12]
	  button_ID = 3;
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <HAL_GPIO_EXTI_Callback+0xa0>)
 800278e:	2203      	movs	r2, #3
 8002790:	701a      	strb	r2, [r3, #0]
}
 8002792:	e019      	b.n	80027c8 <HAL_GPIO_EXTI_Callback+0x8c>
  else if (GPIO_Pin == BUTTON4_Pin) {
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279a:	d109      	bne.n	80027b0 <HAL_GPIO_EXTI_Callback+0x74>
	  wakeup_event = true; // Set flag for next loop iteration
 800279c:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <HAL_GPIO_EXTI_Callback+0x98>)
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027a2:	4a0d      	ldr	r2, [pc, #52]	@ (80027d8 <HAL_GPIO_EXTI_Callback+0x9c>)
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	60d3      	str	r3, [r2, #12]
	  button_ID = 4;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <HAL_GPIO_EXTI_Callback+0xa0>)
 80027aa:	2204      	movs	r2, #4
 80027ac:	701a      	strb	r2, [r3, #0]
}
 80027ae:	e00b      	b.n	80027c8 <HAL_GPIO_EXTI_Callback+0x8c>
  else if (GPIO_Pin == BUTTON5_Pin) {
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d108      	bne.n	80027c8 <HAL_GPIO_EXTI_Callback+0x8c>
    wakeup_event = true; // Set flag for next loop iteration
 80027b6:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <HAL_GPIO_EXTI_Callback+0x98>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027bc:	4a06      	ldr	r2, [pc, #24]	@ (80027d8 <HAL_GPIO_EXTI_Callback+0x9c>)
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	60d3      	str	r3, [r2, #12]
    button_ID = 5;
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_GPIO_EXTI_Callback+0xa0>)
 80027c4:	2205      	movs	r2, #5
 80027c6:	701a      	strb	r2, [r3, #0]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	200003d0 	.word	0x200003d0
 80027d8:	58000800 	.word	0x58000800
 80027dc:	200003d1 	.word	0x200003d1

080027e0 <_write>:
#ifdef __cplusplus
  extern "C" {
  #endif
#ifdef USE_SWD
  int _write(int file, char *ptr, int len)
  {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	e009      	b.n	8002806 <_write+0x26>
    {
      ITM_SendChar(*ptr++);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	60ba      	str	r2, [r7, #8]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe ffce 	bl	800179c <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	dbf1      	blt.n	80027f2 <_write+0x12>
    }
    return len;
 800280e:	687b      	ldr	r3, [r7, #4]
  }
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_TIM_PeriodElapsedCallback>:
#ifdef __cplusplus
  }
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  // Check which Systick timer is generating the interrupt
  if (htim->Instance == TIM1) { // Or whatever your HAL_IncTick uses
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a10      	ldr	r2, [pc, #64]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d102      	bne.n	8002830 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800282a:	f008 f8f5 	bl	800aa18 <HAL_IncTick>
    inactivity_timer_elapsed_flag = true;
    HAL_TIM_Base_Stop_IT(&htim16); // Stop timer, will be restarted on activity
    printf("Inactivity timer elapsed.\r\n");
  }
  // Add other timer callbacks if you have them
}
 800282e:	e017      	b.n	8002860 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == htim2.Instance) // Check against the specific timer instance
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d103      	bne.n	8002844 <HAL_TIM_PeriodElapsedCallback+0x2c>
    g_measure_battery_flag = 1;
 800283c:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
}
 8002842:	e00d      	b.n	8002860 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM16) // Inactivity Timer (e.g. TIM16)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0a      	ldr	r2, [pc, #40]	@ (8002874 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d108      	bne.n	8002860 <HAL_TIM_PeriodElapsedCallback+0x48>
    inactivity_timer_elapsed_flag = true;
 800284e:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(&htim16); // Stop timer, will be restarted on activity
 8002854:	4809      	ldr	r0, [pc, #36]	@ (800287c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002856:	f00e f977 	bl	8010b48 <HAL_TIM_Base_Stop_IT>
    printf("Inactivity timer elapsed.\r\n");
 800285a:	4809      	ldr	r0, [pc, #36]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800285c:	f010 fcce 	bl	80131fc <puts>
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40012c00 	.word	0x40012c00
 800286c:	200005b0 	.word	0x200005b0
 8002870:	200003c8 	.word	0x200003c8
 8002874:	40014400 	.word	0x40014400
 8002878:	20000450 	.word	0x20000450
 800287c:	200005fc 	.word	0x200005fc
 8002880:	08015c98 	.word	0x08015c98

08002884 <_Z8I2C_ScanP19__I2C_HandleTypeDef>:

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a28      	ldr	r2, [pc, #160]	@ (8002934 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d106      	bne.n	80028a4 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x20>
    printf("Scanning I2C Bus 1 (MUX Channel %d)...\r\n", i2c_channel_to_use);
 8002896:	4b28      	ldr	r3, [pc, #160]	@ (8002938 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb4>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	4619      	mov	r1, r3
 800289c:	4827      	ldr	r0, [pc, #156]	@ (800293c <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb8>)
 800289e:	f010 fc3d 	bl	801311c <iprintf>
 80028a2:	e00b      	b.n	80028bc <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x38>
  } else if (hi2c->Instance == I2C3) {
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a25      	ldr	r2, [pc, #148]	@ (8002940 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xbc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d103      	bne.n	80028b6 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x32>
    printf("Scanning I2C Bus 3...\r\n");
 80028ae:	4825      	ldr	r0, [pc, #148]	@ (8002944 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xc0>)
 80028b0:	f010 fca4 	bl	80131fc <puts>
 80028b4:	e002      	b.n	80028bc <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x38>
  } else {
    printf("Scanning Unknown I2C Bus...\r\n");
 80028b6:	4824      	ldr	r0, [pc, #144]	@ (8002948 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xc4>)
 80028b8:	f010 fca0 	bl	80131fc <puts>
  }

  HAL_StatusTypeDef res;
  uint8_t i = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	73fb      	strb	r3, [r7, #15]
  for (i = 1; i < 128; i++) {
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	e015      	b.n	80028f2 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x6e>
    res = HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i << 1), 2, 10); // 2 trials, 10ms timeout
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	b299      	uxth	r1, r3
 80028ce:	230a      	movs	r3, #10
 80028d0:	2202      	movs	r2, #2
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f00a fd0e 	bl	800d2f4 <HAL_I2C_IsDeviceReady>
 80028d8:	4603      	mov	r3, r0
 80028da:	73bb      	strb	r3, [r7, #14]
    if (res == HAL_OK) {
 80028dc:	7bbb      	ldrb	r3, [r7, #14]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d104      	bne.n	80028ec <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x68>
      printf("I2C Device Found at Address: 0x%02X\r\n", i);
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	4619      	mov	r1, r3
 80028e6:	4819      	ldr	r0, [pc, #100]	@ (800294c <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xc8>)
 80028e8:	f010 fc18 	bl	801311c <iprintf>
  for (i = 1; i < 128; i++) {
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	3301      	adds	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	dae5      	bge.n	80028c6 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x42>
    }
  }
  if (hi2c->Instance == I2C1) {
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002934 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d106      	bne.n	8002912 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x8e>
    printf("I2C Bus 1 (MUX Channel %d) Scan Complete.\r\n", i2c_channel_to_use);
 8002904:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb4>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	4811      	ldr	r0, [pc, #68]	@ (8002950 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xcc>)
 800290c:	f010 fc06 	bl	801311c <iprintf>
  } else if (hi2c->Instance == I2C3) {
    printf("I2C Bus 3 Scan Complete.\r\n");
  } else {
    printf("Unknown I2C Bus Scan Complete.\r\n");
  }
}
 8002910:	e00b      	b.n	800292a <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xa6>
  } else if (hi2c->Instance == I2C3) {
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xbc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d103      	bne.n	8002924 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xa0>
    printf("I2C Bus 3 Scan Complete.\r\n");
 800291c:	480d      	ldr	r0, [pc, #52]	@ (8002954 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xd0>)
 800291e:	f010 fc6d 	bl	80131fc <puts>
}
 8002922:	e002      	b.n	800292a <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xa6>
    printf("Unknown I2C Bus Scan Complete.\r\n");
 8002924:	480c      	ldr	r0, [pc, #48]	@ (8002958 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xd4>)
 8002926:	f010 fc69 	bl	80131fc <puts>
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40005400 	.word	0x40005400
 8002938:	20000010 	.word	0x20000010
 800293c:	08015cb4 	.word	0x08015cb4
 8002940:	40005c00 	.word	0x40005c00
 8002944:	08015ce0 	.word	0x08015ce0
 8002948:	08015cf8 	.word	0x08015cf8
 800294c:	08015d18 	.word	0x08015d18
 8002950:	08015d40 	.word	0x08015d40
 8002954:	08015d6c 	.word	0x08015d6c
 8002958:	08015d88 	.word	0x08015d88

0800295c <_Z17printByteAsBinaryh>:

void printByteAsBinary(uint8_t value) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  for (int i = 7; i >= 0; i--) {
 8002966:	2307      	movs	r3, #7
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e00c      	b.n	8002986 <_Z17printByteAsBinaryh+0x2a>
    printf("%d", (value >> i) & 1); // Print 0 or 1
 800296c:	79fa      	ldrb	r2, [r7, #7]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	fa42 f303 	asr.w	r3, r2, r3
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	4619      	mov	r1, r3
 800297a:	4807      	ldr	r0, [pc, #28]	@ (8002998 <_Z17printByteAsBinaryh+0x3c>)
 800297c:	f010 fbce 	bl	801311c <iprintf>
  for (int i = 7; i >= 0; i--) {
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3b01      	subs	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	daef      	bge.n	800296c <_Z17printByteAsBinaryh+0x10>
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	08015da8 	.word	0x08015da8

0800299c <_Z19print2BytesAsBinaryt>:

void print2BytesAsBinary(uint16_t value) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	80fb      	strh	r3, [r7, #6]
  for (int i = 15; i >= 0; i--) {
 80029a6:	230f      	movs	r3, #15
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e00c      	b.n	80029c6 <_Z19print2BytesAsBinaryt+0x2a>
    printf("%d", (value >> i) & 1); // Print 0 or 1
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	fa42 f303 	asr.w	r3, r2, r3
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	4619      	mov	r1, r3
 80029ba:	4807      	ldr	r0, [pc, #28]	@ (80029d8 <_Z19print2BytesAsBinaryt+0x3c>)
 80029bc:	f010 fbae 	bl	801311c <iprintf>
  for (int i = 15; i >= 0; i--) {
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	daef      	bge.n	80029ac <_Z19print2BytesAsBinaryt+0x10>
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	08015da8 	.word	0x08015da8

080029dc <_Z14printRegistersh>:


void printRegisters(uint8_t driver_id) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b090      	sub	sp, #64	@ 0x40
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]

  // variable to avoid float printing
  char buffer[50];
  printf("Speed of motor: ");
 80029e6:	48d1      	ldr	r0, [pc, #836]	@ (8002d2c <_Z14printRegistersh+0x350>)
 80029e8:	f010 fb98 	bl	801311c <iprintf>
  printf("%d", drivers[driver_id].getMotorSpeedRPM());
 80029ec:	79fa      	ldrb	r2, [r7, #7]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4ace      	ldr	r2, [pc, #824]	@ (8002d30 <_Z14printRegistersh+0x354>)
 80029f8:	4413      	add	r3, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f006 f988 	bl	8008d10 <_ZN7DRV821416getMotorSpeedRPMEv>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4619      	mov	r1, r3
 8002a04:	48cb      	ldr	r0, [pc, #812]	@ (8002d34 <_Z14printRegistersh+0x358>)
 8002a06:	f010 fb89 	bl	801311c <iprintf>
  printf(" RPM or ");
 8002a0a:	48cb      	ldr	r0, [pc, #812]	@ (8002d38 <_Z14printRegistersh+0x35c>)
 8002a0c:	f010 fb86 	bl	801311c <iprintf>
  printf("%.2f", drivers[driver_id].getMotorSpeedRAD());
 8002a10:	79fa      	ldrb	r2, [r7, #7]
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4ac5      	ldr	r2, [pc, #788]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002a1c:	4413      	add	r3, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f006 f9b2 	bl	8008d88 <_ZN7DRV821416getMotorSpeedRADEv>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4619      	mov	r1, r3
 8002a28:	48c4      	ldr	r0, [pc, #784]	@ (8002d3c <_Z14printRegistersh+0x360>)
 8002a2a:	f010 fb77 	bl	801311c <iprintf>
  printf(" rad/s | ");
 8002a2e:	48c4      	ldr	r0, [pc, #784]	@ (8002d40 <_Z14printRegistersh+0x364>)
 8002a30:	f010 fb74 	bl	801311c <iprintf>

  printf("Voltage: ");
 8002a34:	48c3      	ldr	r0, [pc, #780]	@ (8002d44 <_Z14printRegistersh+0x368>)
 8002a36:	f010 fb71 	bl	801311c <iprintf>
  printf("%.2f", drivers[driver_id].getMotorVoltage());
 8002a3a:	79fa      	ldrb	r2, [r7, #7]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4aba      	ldr	r2, [pc, #744]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002a46:	4413      	add	r3, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f006 fa07 	bl	8008e5c <_ZN7DRV821415getMotorVoltageEv>
 8002a4e:	ee10 3a10 	vmov	r3, s0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fd50 	bl	80004f8 <__aeabi_f2d>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	48b7      	ldr	r0, [pc, #732]	@ (8002d3c <_Z14printRegistersh+0x360>)
 8002a5e:	f010 fb5d 	bl	801311c <iprintf>
  printf(" V | ");
 8002a62:	48b9      	ldr	r0, [pc, #740]	@ (8002d48 <_Z14printRegistersh+0x36c>)
 8002a64:	f010 fb5a 	bl	801311c <iprintf>

  printf("Current: ");
 8002a68:	48b8      	ldr	r0, [pc, #736]	@ (8002d4c <_Z14printRegistersh+0x370>)
 8002a6a:	f010 fb57 	bl	801311c <iprintf>
  printf("%.2f", drivers[driver_id].getMotorCurrent());
 8002a6e:	79fa      	ldrb	r2, [r7, #7]
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4aad      	ldr	r2, [pc, #692]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f006 fa6f 	bl	8008f60 <_ZN7DRV821415getMotorCurrentEv>
 8002a82:	ee10 3a10 	vmov	r3, s0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd36 	bl	80004f8 <__aeabi_f2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	48aa      	ldr	r0, [pc, #680]	@ (8002d3c <_Z14printRegistersh+0x360>)
 8002a92:	f010 fb43 	bl	801311c <iprintf>
  printf(" A | ");
 8002a96:	48ae      	ldr	r0, [pc, #696]	@ (8002d50 <_Z14printRegistersh+0x374>)
 8002a98:	f010 fb40 	bl	801311c <iprintf>

  printf("Speed of shaft: ");
 8002a9c:	48ad      	ldr	r0, [pc, #692]	@ (8002d54 <_Z14printRegistersh+0x378>)
 8002a9e:	f010 fb3d 	bl	801311c <iprintf>
  printf("%d", drivers[driver_id].getMotorSpeedShaftRPM());
 8002aa2:	79fa      	ldrb	r2, [r7, #7]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4aa0      	ldr	r2, [pc, #640]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002aae:	4413      	add	r3, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f006 f983 	bl	8008dbc <_ZN7DRV821421getMotorSpeedShaftRPMEv>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4619      	mov	r1, r3
 8002aba:	489e      	ldr	r0, [pc, #632]	@ (8002d34 <_Z14printRegistersh+0x358>)
 8002abc:	f010 fb2e 	bl	801311c <iprintf>
  printf(" RPM or ");
 8002ac0:	489d      	ldr	r0, [pc, #628]	@ (8002d38 <_Z14printRegistersh+0x35c>)
 8002ac2:	f010 fb2b 	bl	801311c <iprintf>
  printf("%.2f", drivers[driver_id].getMotorSpeedShaftRAD());
 8002ac6:	79fa      	ldrb	r2, [r7, #7]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4a97      	ldr	r2, [pc, #604]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f006 f982 	bl	8008dde <_ZN7DRV821421getMotorSpeedShaftRADEv>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4619      	mov	r1, r3
 8002ade:	4897      	ldr	r0, [pc, #604]	@ (8002d3c <_Z14printRegistersh+0x360>)
 8002ae0:	f010 fb1c 	bl	801311c <iprintf>
  printf(" rad/s | ");
 8002ae4:	4896      	ldr	r0, [pc, #600]	@ (8002d40 <_Z14printRegistersh+0x364>)
 8002ae6:	f010 fb19 	bl	801311c <iprintf>

  printf("Duty Cycle: ");
 8002aea:	489b      	ldr	r0, [pc, #620]	@ (8002d58 <_Z14printRegistersh+0x37c>)
 8002aec:	f010 fb16 	bl	801311c <iprintf>
  printf("%hhu", drivers[driver_id].getDutyCycle()); // %hhu for uint8_t
 8002af0:	79fa      	ldrb	r2, [r7, #7]
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4a8d      	ldr	r2, [pc, #564]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002afc:	4413      	add	r3, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f006 fa62 	bl	8008fc8 <_ZN7DRV821412getDutyCycleEv>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4619      	mov	r1, r3
 8002b08:	4894      	ldr	r0, [pc, #592]	@ (8002d5c <_Z14printRegistersh+0x380>)
 8002b0a:	f010 fb07 	bl	801311c <iprintf>
  printf("%% | ");
 8002b0e:	4894      	ldr	r0, [pc, #592]	@ (8002d60 <_Z14printRegistersh+0x384>)
 8002b10:	f010 fb04 	bl	801311c <iprintf>

  printf("Tinrush: ");
 8002b14:	4893      	ldr	r0, [pc, #588]	@ (8002d64 <_Z14printRegistersh+0x388>)
 8002b16:	f010 fb01 	bl	801311c <iprintf>
  printf("%hu", drivers[driver_id].getInrushDuration()); // %hu for uint16_t
 8002b1a:	79fa      	ldrb	r2, [r7, #7]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4a82      	ldr	r2, [pc, #520]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002b26:	4413      	add	r3, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f006 fa7c 	bl	8009026 <_ZN7DRV821417getInrushDurationEv>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4619      	mov	r1, r3
 8002b32:	488d      	ldr	r0, [pc, #564]	@ (8002d68 <_Z14printRegistersh+0x38c>)
 8002b34:	f010 faf2 	bl	801311c <iprintf>
  printf(" ms | "); // Added space and separator for consistency
 8002b38:	488c      	ldr	r0, [pc, #560]	@ (8002d6c <_Z14printRegistersh+0x390>)
 8002b3a:	f010 faef 	bl	801311c <iprintf>

  printf("RC_STATUS1 (SPEED): 0b");
 8002b3e:	488c      	ldr	r0, [pc, #560]	@ (8002d70 <_Z14printRegistersh+0x394>)
 8002b40:	f010 faec 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getMotorSpeedRegister());
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4a78      	ldr	r2, [pc, #480]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002b50:	4413      	add	r3, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f006 f955 	bl	8008e02 <_ZN7DRV821421getMotorSpeedRegisterEv>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fefe 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002b60:	4884      	ldr	r0, [pc, #528]	@ (8002d74 <_Z14printRegistersh+0x398>)
 8002b62:	f010 fadb 	bl	801311c <iprintf>

  printf("REG_STATUS1 (VOLTAGE): 0b");
 8002b66:	4884      	ldr	r0, [pc, #528]	@ (8002d78 <_Z14printRegistersh+0x39c>)
 8002b68:	f010 fad8 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getMotorVoltageRegister());
 8002b6c:	79fa      	ldrb	r2, [r7, #7]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4a6e      	ldr	r2, [pc, #440]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002b78:	4413      	add	r3, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f006 f9e0 	bl	8008f40 <_ZN7DRV821423getMotorVoltageRegisterEv>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff feea 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002b88:	487a      	ldr	r0, [pc, #488]	@ (8002d74 <_Z14printRegistersh+0x398>)
 8002b8a:	f010 fac7 	bl	801311c <iprintf>

  printf("REG_STATUS2 (CURRENT): 0b");
 8002b8e:	487b      	ldr	r0, [pc, #492]	@ (8002d7c <_Z14printRegistersh+0x3a0>)
 8002b90:	f010 fac4 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getMotorCurrentRegister());
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4a64      	ldr	r2, [pc, #400]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f006 fa00 	bl	8008fa8 <_ZN7DRV821423getMotorCurrentRegisterEv>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fed6 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002bb0:	4870      	ldr	r0, [pc, #448]	@ (8002d74 <_Z14printRegistersh+0x398>)
 8002bb2:	f010 fab3 	bl	801311c <iprintf>

  printf("Ripple counter: ");
 8002bb6:	4872      	ldr	r0, [pc, #456]	@ (8002d80 <_Z14printRegistersh+0x3a4>)
 8002bb8:	f010 fab0 	bl	801311c <iprintf>
  printf("%hu", drivers[driver_id].getRippleCount()); // %hu for uint16_t
 8002bbc:	79fa      	ldrb	r2, [r7, #7]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4a5a      	ldr	r2, [pc, #360]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002bc8:	4413      	add	r3, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f006 f928 	bl	8008e20 <_ZN7DRV821414getRippleCountEv>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4864      	ldr	r0, [pc, #400]	@ (8002d68 <_Z14printRegistersh+0x38c>)
 8002bd6:	f010 faa1 	bl	801311c <iprintf>
  printf(" | 0b");
 8002bda:	486a      	ldr	r0, [pc, #424]	@ (8002d84 <_Z14printRegistersh+0x3a8>)
 8002bdc:	f010 fa9e 	bl	801311c <iprintf>
  print2BytesAsBinary(drivers[driver_id].getRippleCount());
 8002be0:	79fa      	ldrb	r2, [r7, #7]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4a51      	ldr	r2, [pc, #324]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002bec:	4413      	add	r3, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f006 f916 	bl	8008e20 <_ZN7DRV821414getRippleCountEv>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fed0 	bl	800299c <_Z19print2BytesAsBinaryt>
  printf(" | ");
 8002bfc:	485d      	ldr	r0, [pc, #372]	@ (8002d74 <_Z14printRegistersh+0x398>)
 8002bfe:	f010 fa8d 	bl	801311c <iprintf>

  drivers[driver_id].printFaultStatus(); // Assuming this function prints its own content + newline if needed
 8002c02:	79fa      	ldrb	r2, [r7, #7]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4a48      	ldr	r2, [pc, #288]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002c0e:	4413      	add	r3, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f007 fd1d 	bl	800a650 <_ZN7DRV821416printFaultStatusEv>

  printf("CONFIG0: 0b");
 8002c16:	485c      	ldr	r0, [pc, #368]	@ (8002d88 <_Z14printRegistersh+0x3ac>)
 8002c18:	f010 fa80 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getCONFIG0());
 8002c1c:	79fa      	ldrb	r2, [r7, #7]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4a42      	ldr	r2, [pc, #264]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002c28:	4413      	add	r3, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f006 f9ec 	bl	8009008 <_ZN7DRV821410getCONFIG0Ev>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fe92 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002c38:	484e      	ldr	r0, [pc, #312]	@ (8002d74 <_Z14printRegistersh+0x398>)
 8002c3a:	f010 fa6f 	bl	801311c <iprintf>

  printf("CONFIG3: 0b");
 8002c3e:	4853      	ldr	r0, [pc, #332]	@ (8002d8c <_Z14printRegistersh+0x3b0>)
 8002c40:	f010 fa6c 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getCONFIG3());
 8002c44:	79fa      	ldrb	r2, [r7, #7]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4a38      	ldr	r2, [pc, #224]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002c50:	4413      	add	r3, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f006 fa04 	bl	8009060 <_ZN7DRV821410getCONFIG3Ev>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fe7e 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002c60:	4844      	ldr	r0, [pc, #272]	@ (8002d74 <_Z14printRegistersh+0x398>)
 8002c62:	f010 fa5b 	bl	801311c <iprintf>

  printf("CONFIG4: 0b");
 8002c66:	484a      	ldr	r0, [pc, #296]	@ (8002d90 <_Z14printRegistersh+0x3b4>)
 8002c68:	f010 fa58 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getCONFIG4());
 8002c6c:	79fa      	ldrb	r2, [r7, #7]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4a2e      	ldr	r2, [pc, #184]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002c78:	4413      	add	r3, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f006 f9ff 	bl	800907e <_ZN7DRV821410getCONFIG4Ev>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fe6a 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002c88:	483a      	ldr	r0, [pc, #232]	@ (8002d74 <_Z14printRegistersh+0x398>)
 8002c8a:	f010 fa47 	bl	801311c <iprintf>

  printf("REG_CTRL0: 0b");
 8002c8e:	4841      	ldr	r0, [pc, #260]	@ (8002d94 <_Z14printRegistersh+0x3b8>)
 8002c90:	f010 fa44 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getREG_CTRL0());
 8002c94:	79fa      	ldrb	r2, [r7, #7]
 8002c96:	4613      	mov	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4a24      	ldr	r2, [pc, #144]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f006 f9fa 	bl	800909c <_ZN7DRV821412getREG_CTRL0Ev>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fe56 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002cb0:	4830      	ldr	r0, [pc, #192]	@ (8002d74 <_Z14printRegistersh+0x398>)
 8002cb2:	f010 fa33 	bl	801311c <iprintf>

  printf("REG_CTRL1 (TARGET SPEED): 0b");
 8002cb6:	4838      	ldr	r0, [pc, #224]	@ (8002d98 <_Z14printRegistersh+0x3bc>)
 8002cb8:	f010 fa30 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getREG_CTRL1());
 8002cbc:	79fa      	ldrb	r2, [r7, #7]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002cc8:	4413      	add	r3, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f006 f9f5 	bl	80090ba <_ZN7DRV821412getREG_CTRL1Ev>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fe42 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002cd8:	4826      	ldr	r0, [pc, #152]	@ (8002d74 <_Z14printRegistersh+0x398>)
 8002cda:	f010 fa1f 	bl	801311c <iprintf>

  printf("REG_CTRL2 (DUTY): 0b");
 8002cde:	482f      	ldr	r0, [pc, #188]	@ (8002d9c <_Z14printRegistersh+0x3c0>)
 8002ce0:	f010 fa1c 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getREG_CTRL2());
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4a10      	ldr	r2, [pc, #64]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f006 f9f0 	bl	80090d8 <_ZN7DRV821412getREG_CTRL2Ev>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fe2e 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002d00:	481c      	ldr	r0, [pc, #112]	@ (8002d74 <_Z14printRegistersh+0x398>)
 8002d02:	f010 fa0b 	bl	801311c <iprintf>

  printf("RC_CTRL0: 0b");
 8002d06:	4826      	ldr	r0, [pc, #152]	@ (8002da0 <_Z14printRegistersh+0x3c4>)
 8002d08:	f010 fa08 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL0());
 8002d0c:	79fa      	ldrb	r2, [r7, #7]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4a06      	ldr	r2, [pc, #24]	@ (8002d30 <_Z14printRegistersh+0x354>)
 8002d18:	4413      	add	r3, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f006 f9eb 	bl	80090f6 <_ZN7DRV821411getRC_CTRL0Ev>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fe1a 	bl	800295c <_Z17printByteAsBinaryh>
 8002d28:	e03c      	b.n	8002da4 <_Z14printRegistersh+0x3c8>
 8002d2a:	bf00      	nop
 8002d2c:	08015dac 	.word	0x08015dac
 8002d30:	20000454 	.word	0x20000454
 8002d34:	08015da8 	.word	0x08015da8
 8002d38:	08015dc0 	.word	0x08015dc0
 8002d3c:	08015dcc 	.word	0x08015dcc
 8002d40:	08015dd4 	.word	0x08015dd4
 8002d44:	08015de0 	.word	0x08015de0
 8002d48:	08015dec 	.word	0x08015dec
 8002d4c:	08015df4 	.word	0x08015df4
 8002d50:	08015e00 	.word	0x08015e00
 8002d54:	08015e08 	.word	0x08015e08
 8002d58:	08015e1c 	.word	0x08015e1c
 8002d5c:	08015e2c 	.word	0x08015e2c
 8002d60:	08015e34 	.word	0x08015e34
 8002d64:	08015e3c 	.word	0x08015e3c
 8002d68:	08015e48 	.word	0x08015e48
 8002d6c:	08015e4c 	.word	0x08015e4c
 8002d70:	08015e54 	.word	0x08015e54
 8002d74:	08015e6c 	.word	0x08015e6c
 8002d78:	08015e70 	.word	0x08015e70
 8002d7c:	08015e8c 	.word	0x08015e8c
 8002d80:	08015ea8 	.word	0x08015ea8
 8002d84:	08015ebc 	.word	0x08015ebc
 8002d88:	08015ec4 	.word	0x08015ec4
 8002d8c:	08015ed0 	.word	0x08015ed0
 8002d90:	08015edc 	.word	0x08015edc
 8002d94:	08015ee8 	.word	0x08015ee8
 8002d98:	08015ef8 	.word	0x08015ef8
 8002d9c:	08015f18 	.word	0x08015f18
 8002da0:	08015f30 	.word	0x08015f30
  printf(" | ");
 8002da4:	485a      	ldr	r0, [pc, #360]	@ (8002f10 <_Z14printRegistersh+0x534>)
 8002da6:	f010 f9b9 	bl	801311c <iprintf>

  printf("KMC: ");
 8002daa:	485a      	ldr	r0, [pc, #360]	@ (8002f14 <_Z14printRegistersh+0x538>)
 8002dac:	f010 f9b6 	bl	801311c <iprintf>
  printf("%hhu", drivers[driver_id].getKMC()); // %hhu for uint8_t
 8002db0:	79fa      	ldrb	r2, [r7, #7]
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4a57      	ldr	r2, [pc, #348]	@ (8002f18 <_Z14printRegistersh+0x53c>)
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f006 fa4b 	bl	800925a <_ZN7DRV82146getKMCEv>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4854      	ldr	r0, [pc, #336]	@ (8002f1c <_Z14printRegistersh+0x540>)
 8002dca:	f010 f9a7 	bl	801311c <iprintf>
  printf(" | Ripple Threshold Scaled: ");
 8002dce:	4854      	ldr	r0, [pc, #336]	@ (8002f20 <_Z14printRegistersh+0x544>)
 8002dd0:	f010 f9a4 	bl	801311c <iprintf>
  printf("%hu", drivers[driver_id].getRippleThresholdScaled()); // %hu for uint16_t
 8002dd4:	79fa      	ldrb	r2, [r7, #7]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4a4e      	ldr	r2, [pc, #312]	@ (8002f18 <_Z14printRegistersh+0x53c>)
 8002de0:	4413      	add	r3, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f006 f9d9 	bl	800919a <_ZN7DRV821424getRippleThresholdScaledEv>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4619      	mov	r1, r3
 8002dec:	484d      	ldr	r0, [pc, #308]	@ (8002f24 <_Z14printRegistersh+0x548>)
 8002dee:	f010 f995 	bl	801311c <iprintf>
  printf(" | Ripples Threshold: ");
 8002df2:	484d      	ldr	r0, [pc, #308]	@ (8002f28 <_Z14printRegistersh+0x54c>)
 8002df4:	f010 f992 	bl	801311c <iprintf>
  printf("%hu", drivers[driver_id].getRippleThreshold()); // %hu for uint16_t
 8002df8:	79fa      	ldrb	r2, [r7, #7]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4a45      	ldr	r2, [pc, #276]	@ (8002f18 <_Z14printRegistersh+0x53c>)
 8002e04:	4413      	add	r3, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f006 f9a2 	bl	8009150 <_ZN7DRV821418getRippleThresholdEv>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4844      	ldr	r0, [pc, #272]	@ (8002f24 <_Z14printRegistersh+0x548>)
 8002e12:	f010 f983 	bl	801311c <iprintf>
  printf(" or 0b");
 8002e16:	4845      	ldr	r0, [pc, #276]	@ (8002f2c <_Z14printRegistersh+0x550>)
 8002e18:	f010 f980 	bl	801311c <iprintf>
  print2BytesAsBinary(drivers[driver_id].getRippleThreshold());
 8002e1c:	79fa      	ldrb	r2, [r7, #7]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4a3c      	ldr	r2, [pc, #240]	@ (8002f18 <_Z14printRegistersh+0x53c>)
 8002e28:	4413      	add	r3, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f006 f990 	bl	8009150 <_ZN7DRV821418getRippleThresholdEv>
 8002e30:	4603      	mov	r3, r0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fdb2 	bl	800299c <_Z19print2BytesAsBinaryt>
  printf(" | ");
 8002e38:	4835      	ldr	r0, [pc, #212]	@ (8002f10 <_Z14printRegistersh+0x534>)
 8002e3a:	f010 f96f 	bl	801311c <iprintf>

  printf("RC_CTRL1: 0b");
 8002e3e:	483c      	ldr	r0, [pc, #240]	@ (8002f30 <_Z14printRegistersh+0x554>)
 8002e40:	f010 f96c 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL1());
 8002e44:	79fa      	ldrb	r2, [r7, #7]
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4a32      	ldr	r2, [pc, #200]	@ (8002f18 <_Z14printRegistersh+0x53c>)
 8002e50:	4413      	add	r3, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f006 f95e 	bl	8009114 <_ZN7DRV821411getRC_CTRL1Ev>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fd7e 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002e60:	482b      	ldr	r0, [pc, #172]	@ (8002f10 <_Z14printRegistersh+0x534>)
 8002e62:	f010 f95b 	bl	801311c <iprintf>

  printf("RC_CTRL2: 0b");
 8002e66:	4833      	ldr	r0, [pc, #204]	@ (8002f34 <_Z14printRegistersh+0x558>)
 8002e68:	f010 f958 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL2());
 8002e6c:	79fa      	ldrb	r2, [r7, #7]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4a28      	ldr	r2, [pc, #160]	@ (8002f18 <_Z14printRegistersh+0x53c>)
 8002e78:	4413      	add	r3, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f006 f959 	bl	8009132 <_ZN7DRV821411getRC_CTRL2Ev>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fd6a 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002e88:	4821      	ldr	r0, [pc, #132]	@ (8002f10 <_Z14printRegistersh+0x534>)
 8002e8a:	f010 f947 	bl	801311c <iprintf>

  printf("RC_CTRL6: 0b");
 8002e8e:	482a      	ldr	r0, [pc, #168]	@ (8002f38 <_Z14printRegistersh+0x55c>)
 8002e90:	f010 f944 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL6());
 8002e94:	79fa      	ldrb	r2, [r7, #7]
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f18 <_Z14printRegistersh+0x53c>)
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f006 f9e8 	bl	8009278 <_ZN7DRV821411getRC_CTRL6Ev>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fd56 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002eb0:	4817      	ldr	r0, [pc, #92]	@ (8002f10 <_Z14printRegistersh+0x534>)
 8002eb2:	f010 f933 	bl	801311c <iprintf>

  printf("RC_CTRL7: 0b");
 8002eb6:	4821      	ldr	r0, [pc, #132]	@ (8002f3c <_Z14printRegistersh+0x560>)
 8002eb8:	f010 f930 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL7());
 8002ebc:	79fa      	ldrb	r2, [r7, #7]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4a14      	ldr	r2, [pc, #80]	@ (8002f18 <_Z14printRegistersh+0x53c>)
 8002ec8:	4413      	add	r3, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f006 f9e3 	bl	8009296 <_ZN7DRV821411getRC_CTRL7Ev>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fd42 	bl	800295c <_Z17printByteAsBinaryh>
  printf(" | ");
 8002ed8:	480d      	ldr	r0, [pc, #52]	@ (8002f10 <_Z14printRegistersh+0x534>)
 8002eda:	f010 f91f 	bl	801311c <iprintf>

  printf("RC_CTRL8: 0b");
 8002ede:	4818      	ldr	r0, [pc, #96]	@ (8002f40 <_Z14printRegistersh+0x564>)
 8002ee0:	f010 f91c 	bl	801311c <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL8());
 8002ee4:	79fa      	ldrb	r2, [r7, #7]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <_Z14printRegistersh+0x53c>)
 8002ef0:	4413      	add	r3, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f006 f9de 	bl	80092b4 <_ZN7DRV821411getRC_CTRL8Ev>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fd2e 	bl	800295c <_Z17printByteAsBinaryh>
  printf("\n"); // Final newline for the whole block
 8002f00:	200a      	movs	r0, #10
 8002f02:	f010 f91d 	bl	8013140 <putchar>
}
 8002f06:	bf00      	nop
 8002f08:	3740      	adds	r7, #64	@ 0x40
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	08015e6c 	.word	0x08015e6c
 8002f14:	08015f40 	.word	0x08015f40
 8002f18:	20000454 	.word	0x20000454
 8002f1c:	08015e2c 	.word	0x08015e2c
 8002f20:	08015f48 	.word	0x08015f48
 8002f24:	08015e48 	.word	0x08015e48
 8002f28:	08015f68 	.word	0x08015f68
 8002f2c:	08015f80 	.word	0x08015f80
 8002f30:	08015f88 	.word	0x08015f88
 8002f34:	08015f98 	.word	0x08015f98
 8002f38:	08015fa8 	.word	0x08015fa8
 8002f3c:	08015fb8 	.word	0x08015fb8
 8002f40:	08015fc8 	.word	0x08015fc8

08002f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f48:	b672      	cpsid	i
}
 8002f4a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    // red LED ON
    WS2812_SetColor(255, 0, 0, 100); // Red
 8002f4c:	2364      	movs	r3, #100	@ 0x64
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	20ff      	movs	r0, #255	@ 0xff
 8002f54:	f7fd fff4 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
    HAL_Delay(200); // Wait for 1 second
 8002f58:	20c8      	movs	r0, #200	@ 0xc8
 8002f5a:	f007 fd89 	bl	800aa70 <HAL_Delay>
    WS2812_SetColor(0, 0, 0, 100); // Turn off the LED
 8002f5e:	2364      	movs	r3, #100	@ 0x64
 8002f60:	2200      	movs	r2, #0
 8002f62:	2100      	movs	r1, #0
 8002f64:	2000      	movs	r0, #0
 8002f66:	f7fd ffeb 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
    HAL_Delay(200); // Wait for 1 second
 8002f6a:	20c8      	movs	r0, #200	@ 0xc8
 8002f6c:	f007 fd80 	bl	800aa70 <HAL_Delay>
    WS2812_SetColor(255, 0, 0, 100); // Red
 8002f70:	bf00      	nop
 8002f72:	e7eb      	b.n	8002f4c <Error_Handler+0x8>

08002f74 <_Z41__static_initialization_and_destruction_0v>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af04      	add	r7, sp, #16
float half_range_ripples = full_range_ripples / 2;
 8002f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff8 <_Z41__static_initialization_and_destruction_0v+0x84>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ffc <_Z41__static_initialization_and_destruction_0v+0x88>)
 8002f8c:	edc3 7a00 	vstr	s15, [r3]
float nb_ripples_per_mm = full_range_ripples / full_range_mm;
 8002f90:	4b19      	ldr	r3, [pc, #100]	@ (8002ff8 <_Z41__static_initialization_and_destruction_0v+0x84>)
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f9c:	4b18      	ldr	r3, [pc, #96]	@ (8003000 <_Z41__static_initialization_and_destruction_0v+0x8c>)
 8002f9e:	ed93 7a00 	vldr	s14, [r3]
 8002fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fa6:	4b17      	ldr	r3, [pc, #92]	@ (8003004 <_Z41__static_initialization_and_destruction_0v+0x90>)
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
};
 8002fac:	4c16      	ldr	r4, [pc, #88]	@ (8003008 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002fae:	f240 4382 	movw	r3, #1154	@ 0x482
 8002fb2:	9303      	str	r3, [sp, #12]
 8002fb4:	231a      	movs	r3, #26
 8002fb6:	9302      	str	r3, [sp, #8]
 8002fb8:	2314      	movs	r3, #20
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	2306      	movs	r3, #6
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	2138      	movs	r1, #56	@ 0x38
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7fe fc72 	bl	80018b2 <_ZN7DRV8214C1Ehhthhht>
 8002fce:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002fd2:	f240 4382 	movw	r3, #1154	@ 0x482
 8002fd6:	9303      	str	r3, [sp, #12]
 8002fd8:	231a      	movs	r3, #26
 8002fda:	9302      	str	r3, [sp, #8]
 8002fdc:	2314      	movs	r3, #20
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2306      	movs	r3, #6
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8002fe8:	2211      	movs	r2, #17
 8002fea:	2138      	movs	r1, #56	@ 0x38
 8002fec:	f7fe fc61 	bl	80018b2 <_ZN7DRV8214C1Ehhthhht>
}
 8002ff0:	bf00      	nop
 8002ff2:	3704      	adds	r7, #4
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd90      	pop	{r4, r7, pc}
 8002ff8:	20000008 	.word	0x20000008
 8002ffc:	200003d4 	.word	0x200003d4
 8003000:	2000000c 	.word	0x2000000c
 8003004:	200003d8 	.word	0x200003d8
 8003008:	20000454 	.word	0x20000454

0800300c <_GLOBAL__sub_I_g_measure_battery_flag>:
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
 8003010:	f7ff ffb0 	bl	8002f74 <_Z41__static_initialization_and_destruction_0v>
 8003014:	bd80      	pop	{r7, pc}

08003016 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800302a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_APB1_GRP1_EnableClock>:
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003044:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003046:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4313      	orrs	r3, r2
 800304e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003054:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4013      	ands	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800305c:	68fb      	ldr	r3, [r7, #12]
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003070:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <MX_RTC_Init+0x5c>)
 8003072:	4a16      	ldr	r2, [pc, #88]	@ (80030cc <MX_RTC_Init+0x60>)
 8003074:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003076:	4b14      	ldr	r3, [pc, #80]	@ (80030c8 <MX_RTC_Init+0x5c>)
 8003078:	2200      	movs	r2, #0
 800307a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800307c:	4b12      	ldr	r3, [pc, #72]	@ (80030c8 <MX_RTC_Init+0x5c>)
 800307e:	227f      	movs	r2, #127	@ 0x7f
 8003080:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003082:	4b11      	ldr	r3, [pc, #68]	@ (80030c8 <MX_RTC_Init+0x5c>)
 8003084:	22ff      	movs	r2, #255	@ 0xff
 8003086:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003088:	4b0f      	ldr	r3, [pc, #60]	@ (80030c8 <MX_RTC_Init+0x5c>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800308e:	4b0e      	ldr	r3, [pc, #56]	@ (80030c8 <MX_RTC_Init+0x5c>)
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003094:	4b0c      	ldr	r3, [pc, #48]	@ (80030c8 <MX_RTC_Init+0x5c>)
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800309a:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <MX_RTC_Init+0x5c>)
 800309c:	2200      	movs	r2, #0
 800309e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030a0:	4809      	ldr	r0, [pc, #36]	@ (80030c8 <MX_RTC_Init+0x5c>)
 80030a2:	f00c fe03 	bl	800fcac <HAL_RTC_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80030ac:	f7ff ff4a 	bl	8002f44 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80030b0:	2200      	movs	r2, #0
 80030b2:	2100      	movs	r1, #0
 80030b4:	4804      	ldr	r0, [pc, #16]	@ (80030c8 <MX_RTC_Init+0x5c>)
 80030b6:	f00c ff07 	bl	800fec8 <HAL_RTCEx_SetWakeUpTimer_IT>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80030c0:	f7ff ff40 	bl	8002f44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200004c4 	.word	0x200004c4
 80030cc:	40002800 	.word	0x40002800

080030d0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b096      	sub	sp, #88	@ 0x58
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d8:	f107 0308 	add.w	r3, r7, #8
 80030dc:	2250      	movs	r2, #80	@ 0x50
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f010 f893 	bl	801320c <memset>
  if(rtcHandle->Instance==RTC)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a13      	ldr	r2, [pc, #76]	@ (8003138 <HAL_RTC_MspInit+0x68>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d11f      	bne.n	8003130 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 80030f0:	f00a ff7e 	bl	800dff0 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003100:	f107 0308 	add.w	r3, r7, #8
 8003104:	4618      	mov	r0, r3
 8003106:	f00c fb4a 	bl	800f79e <HAL_RCCEx_PeriphCLKConfig>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8003110:	f7ff ff18 	bl	8002f44 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003114:	f7ff ff7f 	bl	8003016 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003118:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800311c:	f7ff ff8c 	bl	8003038 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003120:	2200      	movs	r2, #0
 8003122:	2100      	movs	r1, #0
 8003124:	2003      	movs	r0, #3
 8003126:	f008 ff82 	bl	800c02e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800312a:	2003      	movs	r0, #3
 800312c:	f008 ff99 	bl	800c062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003130:	bf00      	nop
 8003132:	3758      	adds	r7, #88	@ 0x58
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40002800 	.word	0x40002800

0800313c <LL_AHB2_GRP1_EnableClock>:
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003148:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800314a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4313      	orrs	r3, r2
 8003152:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003158:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003160:	68fb      	ldr	r3, [r7, #12]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <LL_APB1_GRP1_EnableClock>:
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800317a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800317c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4313      	orrs	r3, r2
 8003184:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4013      	ands	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80031a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003218 <MX_SPI2_Init+0x78>)
 80031a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031b2:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031b8:	4b16      	ldr	r3, [pc, #88]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80031be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031c0:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031c6:	4b13      	ldr	r3, [pc, #76]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80031d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031d6:	2218      	movs	r2, #24
 80031d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031da:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031dc:	2200      	movs	r2, #0
 80031de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80031ec:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031ee:	2207      	movs	r2, #7
 80031f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031f2:	4b08      	ldr	r3, [pc, #32]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031f8:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <MX_SPI2_Init+0x74>)
 80031fa:	2208      	movs	r2, #8
 80031fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031fe:	4805      	ldr	r0, [pc, #20]	@ (8003214 <MX_SPI2_Init+0x74>)
 8003200:	f00c ff5e 	bl	80100c0 <HAL_SPI_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800320a:	f7ff fe9b 	bl	8002f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200004e8 	.word	0x200004e8
 8003218:	40003800 	.word	0x40003800

0800321c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a31      	ldr	r2, [pc, #196]	@ (8003300 <HAL_SPI_MspInit+0xe4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d15b      	bne.n	80032f6 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800323e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003242:	f7ff ff94 	bl	800316e <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003246:	2004      	movs	r0, #4
 8003248:	f7ff ff78 	bl	800313c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324c:	2002      	movs	r0, #2
 800324e:	f7ff ff75 	bl	800313c <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003252:	2308      	movs	r3, #8
 8003254:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003256:	2302      	movs	r3, #2
 8003258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325e:	2303      	movs	r3, #3
 8003260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003262:	2305      	movs	r3, #5
 8003264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	4619      	mov	r1, r3
 800326c:	4825      	ldr	r0, [pc, #148]	@ (8003304 <HAL_SPI_MspInit+0xe8>)
 800326e:	f009 f98d 	bl	800c58c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003276:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003284:	2305      	movs	r3, #5
 8003286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003288:	f107 030c 	add.w	r3, r7, #12
 800328c:	4619      	mov	r1, r3
 800328e:	481e      	ldr	r0, [pc, #120]	@ (8003308 <HAL_SPI_MspInit+0xec>)
 8003290:	f009 f97c 	bl	800c58c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8003294:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 8003296:	4a1e      	ldr	r2, [pc, #120]	@ (8003310 <HAL_SPI_MspInit+0xf4>)
 8003298:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800329a:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 800329c:	2209      	movs	r2, #9
 800329e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032a0:	4b1a      	ldr	r3, [pc, #104]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 80032a2:	2210      	movs	r2, #16
 80032a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a6:	4b19      	ldr	r3, [pc, #100]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032ac:	4b17      	ldr	r3, [pc, #92]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 80032ae:	2280      	movs	r2, #128	@ 0x80
 80032b0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b2:	4b16      	ldr	r3, [pc, #88]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032b8:	4b14      	ldr	r3, [pc, #80]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80032be:	4b13      	ldr	r3, [pc, #76]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032c4:	4b11      	ldr	r3, [pc, #68]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80032ca:	4810      	ldr	r0, [pc, #64]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 80032cc:	f008 fee4 	bl	800c098 <HAL_DMA_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 80032d6:	f7ff fe35 	bl	8002f44 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a0b      	ldr	r2, [pc, #44]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 80032de:	655a      	str	r2, [r3, #84]	@ 0x54
 80032e0:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <HAL_SPI_MspInit+0xf0>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2100      	movs	r1, #0
 80032ea:	2023      	movs	r0, #35	@ 0x23
 80032ec:	f008 fe9f 	bl	800c02e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80032f0:	2023      	movs	r0, #35	@ 0x23
 80032f2:	f008 feb6 	bl	800c062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80032f6:	bf00      	nop
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40003800 	.word	0x40003800
 8003304:	48000800 	.word	0x48000800
 8003308:	48000400 	.word	0x48000400
 800330c:	2000054c 	.word	0x2000054c
 8003310:	40020008 	.word	0x40020008

08003314 <LL_AHB3_GRP1_EnableClock>:
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003320:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003322:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4313      	orrs	r3, r2
 800332a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800332c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003330:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003338:	68fb      	ldr	r3, [r7, #12]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800334c:	463b      	mov	r3, r7
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003354:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003358:	f7ff ffdc 	bl	8003314 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800335c:	2200      	movs	r2, #0
 800335e:	2100      	movs	r1, #0
 8003360:	202e      	movs	r0, #46	@ 0x2e
 8003362:	f008 fe64 	bl	800c02e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003366:	202e      	movs	r0, #46	@ 0x2e
 8003368:	f008 fe7b 	bl	800c062 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800336c:	2300      	movs	r3, #0
 800336e:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8003370:	2300      	movs	r3, #0
 8003372:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003374:	463b      	mov	r3, r7
 8003376:	4618      	mov	r0, r3
 8003378:	f00a fe4a 	bl	800e010 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800337c:	f00a fe8a 	bl	800e094 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <NMI_Handler+0x4>

08003390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <HardFault_Handler+0x4>

08003398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <MemManage_Handler+0x4>

080033a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033a4:	bf00      	nop
 80033a6:	e7fd      	b.n	80033a4 <BusFault_Handler+0x4>

080033a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033ac:	bf00      	nop
 80033ae:	e7fd      	b.n	80033ac <UsageFault_Handler+0x4>

080033b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033de:	f007 fb1b 	bl	800aa18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80033ec:	4802      	ldr	r0, [pc, #8]	@ (80033f8 <RTC_WKUP_IRQHandler+0x10>)
 80033ee:	f00c fe37 	bl	8010060 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200004c4 	.word	0x200004c4

080033fc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON5_Pin);
 8003400:	2008      	movs	r0, #8
 8003402:	f009 fa63 	bl	800c8cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}

0800340a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800340e:	2010      	movs	r0, #16
 8003410:	f009 fa5c 	bl	800c8cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003414:	bf00      	nop
 8003416:	bd80      	pop	{r7, pc}

08003418 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800341c:	4802      	ldr	r0, [pc, #8]	@ (8003428 <DMA1_Channel1_IRQHandler+0x10>)
 800341e:	f008 ffa1 	bl	800c364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	2000054c 	.word	0x2000054c

0800342c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8003430:	2020      	movs	r0, #32
 8003432:	f009 fa4b 	bl	800c8cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8003436:	2080      	movs	r0, #128	@ 0x80
 8003438:	f009 fa48 	bl	800c8cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800343c:	bf00      	nop
 800343e:	bd80      	pop	{r7, pc}

08003440 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003444:	4802      	ldr	r0, [pc, #8]	@ (8003450 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003446:	f00d fbaf 	bl	8010ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200005fc 	.word	0x200005fc

08003454 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003458:	4802      	ldr	r0, [pc, #8]	@ (8003464 <TIM2_IRQHandler+0x10>)
 800345a:	f00d fba5 	bl	8010ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200005b0 	.word	0x200005b0

08003468 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800346c:	4802      	ldr	r0, [pc, #8]	@ (8003478 <SPI2_IRQHandler+0x10>)
 800346e:	f00d f841 	bl	80104f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200004e8 	.word	0x200004e8

0800347c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003480:	4802      	ldr	r0, [pc, #8]	@ (800348c <USART1_IRQHandler+0x10>)
 8003482:	f00d ff7d 	bl	8011380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000648 	.word	0x20000648

08003490 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 8003494:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003498:	f009 fa18 	bl	800c8cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}

080034a0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80034a4:	4802      	ldr	r0, [pc, #8]	@ (80034b0 <IPCC_C1_RX_IRQHandler+0x10>)
 80034a6:	f00a fc77 	bl	800dd98 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	2000038c 	.word	0x2000038c

080034b4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80034b8:	4802      	ldr	r0, [pc, #8]	@ (80034c4 <IPCC_C1_TX_IRQHandler+0x10>)
 80034ba:	f00a fc1f 	bl	800dcfc <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	2000038c 	.word	0x2000038c

080034c8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80034cc:	f009 fa16 	bl	800c8fc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80034d0:	bf00      	nop
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return 1;
 80034d8:	2301      	movs	r3, #1
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <_kill>:

int _kill(int pid, int sig)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034ee:	f00f fe95 	bl	801321c <__errno>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2216      	movs	r2, #22
 80034f6:	601a      	str	r2, [r3, #0]
  return -1;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <_exit>:

void _exit (int status)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800350c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ffe7 	bl	80034e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003516:	bf00      	nop
 8003518:	e7fd      	b.n	8003516 <_exit+0x12>

0800351a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e00a      	b.n	8003542 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800352c:	f3af 8000 	nop.w
 8003530:	4601      	mov	r1, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	60ba      	str	r2, [r7, #8]
 8003538:	b2ca      	uxtb	r2, r1
 800353a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3301      	adds	r3, #1
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	dbf0      	blt.n	800352c <_read+0x12>
  }

  return len;
 800354a:	687b      	ldr	r3, [r7, #4]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800355c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800357c:	605a      	str	r2, [r3, #4]
  return 0;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <_isatty>:

int _isatty(int file)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003594:	2301      	movs	r3, #1
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035c4:	4a14      	ldr	r2, [pc, #80]	@ (8003618 <_sbrk+0x5c>)
 80035c6:	4b15      	ldr	r3, [pc, #84]	@ (800361c <_sbrk+0x60>)
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035d0:	4b13      	ldr	r3, [pc, #76]	@ (8003620 <_sbrk+0x64>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035d8:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <_sbrk+0x64>)
 80035da:	4a12      	ldr	r2, [pc, #72]	@ (8003624 <_sbrk+0x68>)
 80035dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035de:	4b10      	ldr	r3, [pc, #64]	@ (8003620 <_sbrk+0x64>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d207      	bcs.n	80035fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035ec:	f00f fe16 	bl	801321c <__errno>
 80035f0:	4603      	mov	r3, r0
 80035f2:	220c      	movs	r2, #12
 80035f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035fa:	e009      	b.n	8003610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035fc:	4b08      	ldr	r3, [pc, #32]	@ (8003620 <_sbrk+0x64>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003602:	4b07      	ldr	r3, [pc, #28]	@ (8003620 <_sbrk+0x64>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	4a05      	ldr	r2, [pc, #20]	@ (8003620 <_sbrk+0x64>)
 800360c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20030000 	.word	0x20030000
 800361c:	00000400 	.word	0x00000400
 8003620:	200005ac 	.word	0x200005ac
 8003624:	20000838 	.word	0x20000838

08003628 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800362c:	4b24      	ldr	r3, [pc, #144]	@ (80036c0 <SystemInit+0x98>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003632:	4a23      	ldr	r2, [pc, #140]	@ (80036c0 <SystemInit+0x98>)
 8003634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800363c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800364c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003650:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003654:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003660:	4b18      	ldr	r3, [pc, #96]	@ (80036c4 <SystemInit+0x9c>)
 8003662:	4013      	ands	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800366e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003672:	f023 0305 	bic.w	r3, r3, #5
 8003676:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800367a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800367e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003682:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800368e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003692:	4a0d      	ldr	r2, [pc, #52]	@ (80036c8 <SystemInit+0xa0>)
 8003694:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800369a:	4a0b      	ldr	r2, [pc, #44]	@ (80036c8 <SystemInit+0xa0>)
 800369c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800369e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80036ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b2:	2200      	movs	r2, #0
 80036b4:	619a      	str	r2, [r3, #24]
}
 80036b6:	bf00      	nop
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000ed00 	.word	0xe000ed00
 80036c4:	faf6fefb 	.word	0xfaf6fefb
 80036c8:	22041000 	.word	0x22041000

080036cc <LL_APB1_GRP1_EnableClock>:
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80036d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4013      	ands	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036f0:	68fb      	ldr	r3, [r7, #12]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800370a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800370c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4313      	orrs	r3, r2
 8003714:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800371a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4013      	ands	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003722:	68fb      	ldr	r3, [r7, #12]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003736:	f107 0310 	add.w	r3, r7, #16
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800374e:	4b1e      	ldr	r3, [pc, #120]	@ (80037c8 <MX_TIM2_Init+0x98>)
 8003750:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003754:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8003756:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <MX_TIM2_Init+0x98>)
 8003758:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800375c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800375e:	4b1a      	ldr	r3, [pc, #104]	@ (80037c8 <MX_TIM2_Init+0x98>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8003764:	4b18      	ldr	r3, [pc, #96]	@ (80037c8 <MX_TIM2_Init+0x98>)
 8003766:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800376a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800376c:	4b16      	ldr	r3, [pc, #88]	@ (80037c8 <MX_TIM2_Init+0x98>)
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003772:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <MX_TIM2_Init+0x98>)
 8003774:	2200      	movs	r2, #0
 8003776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003778:	4813      	ldr	r0, [pc, #76]	@ (80037c8 <MX_TIM2_Init+0x98>)
 800377a:	f00d f93f 	bl	80109fc <HAL_TIM_Base_Init>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003784:	f7ff fbde 	bl	8002f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800378c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800378e:	f107 0310 	add.w	r3, r7, #16
 8003792:	4619      	mov	r1, r3
 8003794:	480c      	ldr	r0, [pc, #48]	@ (80037c8 <MX_TIM2_Init+0x98>)
 8003796:	f00d fb0e 	bl	8010db6 <HAL_TIM_ConfigClockSource>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80037a0:	f7ff fbd0 	bl	8002f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037ac:	1d3b      	adds	r3, r7, #4
 80037ae:	4619      	mov	r1, r3
 80037b0:	4805      	ldr	r0, [pc, #20]	@ (80037c8 <MX_TIM2_Init+0x98>)
 80037b2:	f00d fcf7 	bl	80111a4 <HAL_TIMEx_MasterConfigSynchronization>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80037bc:	f7ff fbc2 	bl	8002f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037c0:	bf00      	nop
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200005b0 	.word	0x200005b0

080037cc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80037d0:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <MX_TIM16_Init+0x48>)
 80037d2:	4a11      	ldr	r2, [pc, #68]	@ (8003818 <MX_TIM16_Init+0x4c>)
 80037d4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 80037d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <MX_TIM16_Init+0x48>)
 80037d8:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80037dc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037de:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <MX_TIM16_Init+0x48>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80037e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <MX_TIM16_Init+0x48>)
 80037e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037ea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ec:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <MX_TIM16_Init+0x48>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80037f2:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <MX_TIM16_Init+0x48>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037f8:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <MX_TIM16_Init+0x48>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80037fe:	4805      	ldr	r0, [pc, #20]	@ (8003814 <MX_TIM16_Init+0x48>)
 8003800:	f00d f8fc 	bl	80109fc <HAL_TIM_Base_Init>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800380a:	f7ff fb9b 	bl	8002f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200005fc 	.word	0x200005fc
 8003818:	40014400 	.word	0x40014400

0800381c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800382c:	d10b      	bne.n	8003846 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800382e:	2001      	movs	r0, #1
 8003830:	f7ff ff4c 	bl	80036cc <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2100      	movs	r1, #0
 8003838:	201c      	movs	r0, #28
 800383a:	f008 fbf8 	bl	800c02e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800383e:	201c      	movs	r0, #28
 8003840:	f008 fc0f 	bl	800c062 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003844:	e010      	b.n	8003868 <HAL_TIM_Base_MspInit+0x4c>
  else if(tim_baseHandle->Instance==TIM16)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a09      	ldr	r2, [pc, #36]	@ (8003870 <HAL_TIM_Base_MspInit+0x54>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d10b      	bne.n	8003868 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003850:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003854:	f7ff ff53 	bl	80036fe <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003858:	2200      	movs	r2, #0
 800385a:	2100      	movs	r1, #0
 800385c:	2019      	movs	r0, #25
 800385e:	f008 fbe6 	bl	800c02e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003862:	2019      	movs	r0, #25
 8003864:	f008 fbfd 	bl	800c062 <HAL_NVIC_EnableIRQ>
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40014400 	.word	0x40014400

08003874 <LL_AHB2_GRP1_EnableClock>:
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800387c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003880:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003882:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4313      	orrs	r3, r2
 800388a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800388c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003890:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4013      	ands	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003898:	68fb      	ldr	r3, [r7, #12]
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_APB2_GRP1_EnableClock>:
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80038ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80038be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4013      	ands	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038ca:	68fb      	ldr	r3, [r7, #12]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038dc:	4b22      	ldr	r3, [pc, #136]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 80038de:	4a23      	ldr	r2, [pc, #140]	@ (800396c <MX_USART1_UART_Init+0x94>)
 80038e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038e2:	4b21      	ldr	r3, [pc, #132]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 80038e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80038e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 80038fe:	220c      	movs	r2, #12
 8003900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003902:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003908:	4b17      	ldr	r3, [pc, #92]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800390e:	4b16      	ldr	r3, [pc, #88]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 8003910:	2200      	movs	r2, #0
 8003912:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003914:	4b14      	ldr	r3, [pc, #80]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 8003916:	2200      	movs	r2, #0
 8003918:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800391a:	4b13      	ldr	r3, [pc, #76]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 800391c:	2200      	movs	r2, #0
 800391e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003920:	4811      	ldr	r0, [pc, #68]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 8003922:	f00d fcdd 	bl	80112e0 <HAL_UART_Init>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800392c:	f7ff fb0a 	bl	8002f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003930:	2100      	movs	r1, #0
 8003932:	480d      	ldr	r0, [pc, #52]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 8003934:	f00e fd61 	bl	80123fa <HAL_UARTEx_SetTxFifoThreshold>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800393e:	f7ff fb01 	bl	8002f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003942:	2100      	movs	r1, #0
 8003944:	4808      	ldr	r0, [pc, #32]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 8003946:	f00e fd96 	bl	8012476 <HAL_UARTEx_SetRxFifoThreshold>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003950:	f7ff faf8 	bl	8002f44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003954:	4804      	ldr	r0, [pc, #16]	@ (8003968 <MX_USART1_UART_Init+0x90>)
 8003956:	f00e fd17 	bl	8012388 <HAL_UARTEx_DisableFifoMode>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003960:	f7ff faf0 	bl	8002f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003964:	bf00      	nop
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000648 	.word	0x20000648
 800396c:	40013800 	.word	0x40013800

08003970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b09c      	sub	sp, #112	@ 0x70
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003978:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003988:	f107 030c 	add.w	r3, r7, #12
 800398c:	2250      	movs	r2, #80	@ 0x50
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f00f fc3b 	bl	801320c <memset>
  if(uartHandle->Instance==USART1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1b      	ldr	r2, [pc, #108]	@ (8003a08 <HAL_UART_MspInit+0x98>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d12e      	bne.n	80039fe <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80039a0:	2301      	movs	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	4618      	mov	r0, r3
 80039ae:	f00b fef6 	bl	800f79e <HAL_RCCEx_PeriphCLKConfig>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80039b8:	f7ff fac4 	bl	8002f44 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039bc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80039c0:	f7ff ff71 	bl	80038a6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c4:	2001      	movs	r0, #1
 80039c6:	f7ff ff55 	bl	8003874 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80039ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80039ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039d8:	2302      	movs	r3, #2
 80039da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039dc:	2307      	movs	r3, #7
 80039de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80039e4:	4619      	mov	r1, r3
 80039e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039ea:	f008 fdcf 	bl	800c58c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2100      	movs	r1, #0
 80039f2:	2024      	movs	r0, #36	@ 0x24
 80039f4:	f008 fb1b 	bl	800c02e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039f8:	2024      	movs	r0, #36	@ 0x24
 80039fa:	f008 fb32 	bl	800c062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80039fe:	bf00      	nop
 8003a00:	3770      	adds	r7, #112	@ 0x70
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40013800 	.word	0x40013800

08003a0c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003a0c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a0e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a10:	3304      	adds	r3, #4

08003a12 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a12:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a14:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003a16:	d3f9      	bcc.n	8003a0c <CopyDataInit>
  bx lr
 8003a18:	4770      	bx	lr

08003a1a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003a1a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003a1c:	3004      	adds	r0, #4

08003a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003a1e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003a20:	d3fb      	bcc.n	8003a1a <FillZerobss>
  bx lr
 8003a22:	4770      	bx	lr

08003a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a24:	480c      	ldr	r0, [pc, #48]	@ (8003a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a28:	f7ff fdfe 	bl	8003628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003a2c:	480b      	ldr	r0, [pc, #44]	@ (8003a5c <LoopForever+0x6>)
 8003a2e:	490c      	ldr	r1, [pc, #48]	@ (8003a60 <LoopForever+0xa>)
 8003a30:	4a0c      	ldr	r2, [pc, #48]	@ (8003a64 <LoopForever+0xe>)
 8003a32:	2300      	movs	r3, #0
 8003a34:	f7ff ffed 	bl	8003a12 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003a38:	480b      	ldr	r0, [pc, #44]	@ (8003a68 <LoopForever+0x12>)
 8003a3a:	490c      	ldr	r1, [pc, #48]	@ (8003a6c <LoopForever+0x16>)
 8003a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a70 <LoopForever+0x1a>)
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f7ff ffe7 	bl	8003a12 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003a44:	480b      	ldr	r0, [pc, #44]	@ (8003a74 <LoopForever+0x1e>)
 8003a46:	490c      	ldr	r1, [pc, #48]	@ (8003a78 <LoopForever+0x22>)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f7ff ffe8 	bl	8003a1e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a4e:	f00f fbeb 	bl	8013228 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003a52:	f7fe f909 	bl	8001c68 <main>

08003a56 <LoopForever>:

LoopForever:
  b LoopForever
 8003a56:	e7fe      	b.n	8003a56 <LoopForever>
  ldr   r0, =_estack
 8003a58:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003a5c:	20000008 	.word	0x20000008
 8003a60:	20000260 	.word	0x20000260
 8003a64:	08018a48 	.word	0x08018a48
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003a68:	20030000 	.word	0x20030000
 8003a6c:	20030000 	.word	0x20030000
 8003a70:	08018ca0 	.word	0x08018ca0
  INIT_BSS _sbss, _ebss
 8003a74:	20000260 	.word	0x20000260
 8003a78:	20000834 	.word	0x20000834

08003a7c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a7c:	e7fe      	b.n	8003a7c <ADC1_IRQHandler>
	...

08003a80 <bmi2_sec_init>:
 * @brief This API is the entry point for bmi2 sensor. It selects between
 * I2C/SPI interface, based on user selection. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi2_sec_init(struct bmi2_dev *dev)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73bb      	strb	r3, [r7, #14]

    /* Structure to define the default values for axes re-mapping */
    struct bmi2_axes_remap axes_remap = {
 8003a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003b3c <bmi2_sec_init+0xbc>)
 8003a8e:	f107 0308 	add.w	r3, r7, #8
 8003a92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a96:	6018      	str	r0, [r3, #0]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	8019      	strh	r1, [r3, #0]
        .x_axis = BMI2_MAP_X_AXIS, .x_axis_sign = BMI2_POS_SIGN, .y_axis = BMI2_MAP_Y_AXIS,
        .y_axis_sign = BMI2_POS_SIGN, .z_axis = BMI2_MAP_Z_AXIS, .z_axis_sign = BMI2_POS_SIGN
    };

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f002 f8a7 	bl	8005bf0 <null_ptr_check>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI2_OK)
 8003aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d140      	bne.n	8003b30 <bmi2_sec_init+0xb0>
    {
        /* Set APS flag as after reset, the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from I2C interface */
        if (dev->intf == BMI2_SPI_INTF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7a5b      	ldrb	r3, [r3, #9]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <bmi2_sec_init+0x50>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003abe:	f107 010e 	add.w	r1, r7, #14
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f000 f83a 	bl	8003b40 <bmi2_get_regs>
 8003acc:	4603      	mov	r3, r0
 8003ace:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8003ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d12b      	bne.n	8003b30 <bmi2_sec_init+0xb0>
        {
            /* Read chip-id of the BMI2 sensor */
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003ad8:	f107 010e 	add.w	r1, r7, #14
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f000 f82d 	bl	8003b40 <bmi2_get_regs>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI2_OK)
 8003aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11e      	bne.n	8003b30 <bmi2_sec_init+0xb0>
            {
                /* Validate chip-id */
                if (chip_id == dev->chip_id)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	7bbb      	ldrb	r3, [r7, #14]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d114      	bne.n	8003b26 <bmi2_sec_init+0xa6>
                {
                    /* Assign resolution to the structure */
                    dev->resolution = 16;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2210      	movs	r2, #16
 8003b00:	731a      	strb	r2, [r3, #12]

                    /* Set manual enable flag */
                    dev->aux_man_en = 1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	76da      	strb	r2, [r3, #27]

                    /* Set the default values for axis
                     *  re-mapping in the device structure
                     */
                    dev->remap = axes_remap;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3328      	adds	r3, #40	@ 0x28
 8003b0c:	f107 0208 	add.w	r2, r7, #8
 8003b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b14:	6018      	str	r0, [r3, #0]
 8003b16:	3304      	adds	r3, #4
 8003b18:	8019      	strh	r1, [r3, #0]

                    /* Perform soft-reset to bring all register values to their
                     * default values
                     */
                    rslt = bmi2_soft_reset(dev);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f906 	bl	8003d2c <bmi2_soft_reset>
 8003b20:	4603      	mov	r3, r0
 8003b22:	73fb      	strb	r3, [r7, #15]
 8003b24:	e004      	b.n	8003b30 <bmi2_sec_init+0xb0>
                else
                {
                    /* Storing the chip-id value read from
                     * the register to identify the sensor
                     */
                    dev->chip_id = chip_id;
 8003b26:	7bba      	ldrb	r2, [r7, #14]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	701a      	strb	r2, [r3, #0]
                    rslt = BMI2_E_DEV_NOT_FOUND;
 8003b2c:	23fd      	movs	r3, #253	@ 0xfd
 8003b2e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	08015fd8 	.word	0x08015fd8

08003b40 <bmi2_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x26, 0x5E.
 */
int8_t bmi2_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b0a7      	sub	sp, #156	@ 0x9c
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	81bb      	strh	r3, [r7, #12]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define loop */
    uint16_t index = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI2_MAX_LEN];

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f002 f849 	bl	8005bf0 <null_ptr_check>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if ((rslt == BMI2_OK) && (data != NULL))
 8003b64:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d153      	bne.n	8003c14 <bmi2_get_regs+0xd4>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d050      	beq.n	8003c14 <bmi2_get_regs+0xd4>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	7a5b      	ldrb	r3, [r3, #9]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <bmi2_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI2_SPI_RD_MASK);
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b80:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, (len + dev->dummy_byte), dev->intf_ptr);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8003b86:	89bb      	ldrh	r3, [r7, #12]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	7ad2      	ldrb	r2, [r2, #11]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f107 0114 	add.w	r1, r7, #20
 8003b98:	7bf8      	ldrb	r0, [r7, #15]
 8003b9a:	47a0      	blx	r4
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	729a      	strb	r2, [r3, #10]

        if (dev->aps_status == BMI2_ENABLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d108      	bne.n	8003bc0 <bmi2_get_regs+0x80>
        {
            dev->delay_us(450, dev->intf_ptr);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6852      	ldr	r2, [r2, #4]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8003bbc:	4798      	blx	r3
 8003bbe:	e006      	b.n	8003bce <bmi2_get_regs+0x8e>
        }
        else
        {
            dev->delay_us(2, dev->intf_ptr);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6852      	ldr	r2, [r2, #4]
 8003bc8:	4611      	mov	r1, r2
 8003bca:	2002      	movs	r0, #2
 8003bcc:	4798      	blx	r3
        }

        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d119      	bne.n	8003c0c <bmi2_get_regs+0xcc>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8003bd8:	e012      	b.n	8003c00 <bmi2_get_regs+0xc0>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8003bda:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	7ad2      	ldrb	r2, [r2, #11]
 8003be2:	441a      	add	r2, r3
 8003be4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	440b      	add	r3, r1
 8003bec:	3298      	adds	r2, #152	@ 0x98
 8003bee:	443a      	add	r2, r7
 8003bf0:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8003bf4:	701a      	strb	r2, [r3, #0]
                index++;
 8003bf6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 8003c00:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8003c04:	89bb      	ldrh	r3, [r7, #12]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d3e7      	bcc.n	8003bda <bmi2_get_regs+0x9a>
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8003c0a:	e006      	b.n	8003c1a <bmi2_get_regs+0xda>
            }
        }
        else
        {
            rslt = BMI2_E_COM_FAIL;
 8003c0c:	23fe      	movs	r3, #254	@ 0xfe
 8003c0e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8003c12:	e002      	b.n	8003c1a <bmi2_get_regs+0xda>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003c14:	23ff      	movs	r3, #255	@ 0xff
 8003c16:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 8003c1a:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	379c      	adds	r7, #156	@ 0x9c
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd90      	pop	{r4, r7, pc}

08003c26 <bmi2_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi2 sensor.
 */
int8_t bmi2_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 8003c26:	b590      	push	{r4, r7, lr}
 8003c28:	b087      	sub	sp, #28
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	4603      	mov	r3, r0
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	4613      	mov	r3, r2
 8003c36:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    uint16_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f001 ffd9 	bl	8005bf0 <null_ptr_check>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (data != NULL))
 8003c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d168      	bne.n	8003d1c <bmi2_set_regs+0xf6>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d065      	beq.n	8003d1c <bmi2_set_regs+0xf6>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7a5b      	ldrb	r3, [r3, #9]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d103      	bne.n	8003c60 <bmi2_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI2_SPI_WR_MASK);
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c5e:	73fb      	strb	r3, [r7, #15]
        }

        /* Writing Byte by byte and delay for Low power mode of the sensor is 450 us */
        if (dev->aps_status == BMI2_ENABLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d129      	bne.n	8003cbe <bmi2_set_regs+0x98>
        {
            for (loop = 0; loop < len; loop++)
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	82bb      	strh	r3, [r7, #20]
 8003c6e:	e021      	b.n	8003cb4 <bmi2_set_regs+0x8e>
            {
                dev->intf_rslt = dev->write((uint8_t)((uint16_t)reg_addr + loop), &data[loop], 1, dev->intf_ptr);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8003c74:	8abb      	ldrh	r3, [r7, #20]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	b2d8      	uxtb	r0, r3
 8003c7e:	8abb      	ldrh	r3, [r7, #20]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	18d1      	adds	r1, r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	47a0      	blx	r4
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	729a      	strb	r2, [r3, #10]
                dev->delay_us(BMI2_POWER_SAVE_MODE_DELAY_IN_US, dev->intf_ptr);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6852      	ldr	r2, [r2, #4]
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8003ca2:	4798      	blx	r3
                if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d11b      	bne.n	8003ce6 <bmi2_set_regs+0xc0>
            for (loop = 0; loop < len; loop++)
 8003cae:	8abb      	ldrh	r3, [r7, #20]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	82bb      	strh	r3, [r7, #20]
 8003cb4:	8aba      	ldrh	r2, [r7, #20]
 8003cb6:	89bb      	ldrh	r3, [r7, #12]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d3d9      	bcc.n	8003c70 <bmi2_set_regs+0x4a>
 8003cbc:	e014      	b.n	8003ce8 <bmi2_set_regs+0xc2>
            }
        }
        /* Burst write and delay for Normal mode of the sensor is 2 us */
        else
        {
            dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8003cc2:	89ba      	ldrh	r2, [r7, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	7bf8      	ldrb	r0, [r7, #15]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	47a0      	blx	r4
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	729a      	strb	r2, [r3, #10]
            dev->delay_us(BMI2_NORMAL_MODE_DELAY_IN_US, dev->intf_ptr);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6852      	ldr	r2, [r2, #4]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	2002      	movs	r0, #2
 8003ce2:	4798      	blx	r3
 8003ce4:	e000      	b.n	8003ce8 <bmi2_set_regs+0xc2>
                    break;
 8003ce6:	bf00      	nop
        }

        /* Updating the advance power saver flag */
        if (reg_addr == BMI2_PWR_CONF_ADDR)
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	2b7c      	cmp	r3, #124	@ 0x7c
 8003cec:	d10e      	bne.n	8003d0c <bmi2_set_regs+0xe6>
        {
            if (*data & BMI2_ADV_POW_EN_MASK)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d004      	beq.n	8003d04 <bmi2_set_regs+0xde>
            {
                dev->aps_status = BMI2_ENABLE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8003d02:	e003      	b.n	8003d0c <bmi2_set_regs+0xe6>
            }
            else
            {
                dev->aps_status = BMI2_DISABLE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }

        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <bmi2_set_regs+0xfa>
        {
            rslt = BMI2_E_COM_FAIL;
 8003d16:	23fe      	movs	r3, #254	@ 0xfe
 8003d18:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8003d1a:	e001      	b.n	8003d20 <bmi2_set_regs+0xfa>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003d1c:	23ff      	movs	r3, #255	@ 0xff
 8003d1e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003d20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd90      	pop	{r4, r7, pc}

08003d2c <bmi2_soft_reset>:
/*!
 * @brief This API resets bmi2 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi2_soft_reset(struct bmi2_dev *dev)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define soft reset value */
    uint8_t data = BMI2_SOFT_RESET_CMD;
 8003d34:	23b6      	movs	r3, #182	@ 0xb6
 8003d36:	73bb      	strb	r3, [r7, #14]

    /* Variable to read the dummy byte */
    uint8_t dummy_read = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	737b      	strb	r3, [r7, #13]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f001 ff57 	bl	8005bf0 <null_ptr_check>
 8003d42:	4603      	mov	r3, r0
 8003d44:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8003d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d139      	bne.n	8003dc2 <bmi2_soft_reset+0x96>
    {
        /* Reset bmi2 device */
        rslt = bmi2_set_regs(BMI2_CMD_REG_ADDR, &data, 1, dev);
 8003d4e:	f107 010e 	add.w	r1, r7, #14
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	207e      	movs	r0, #126	@ 0x7e
 8003d58:	f7ff ff65 	bl	8003c26 <bmi2_set_regs>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(2000, dev->intf_ptr);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6852      	ldr	r2, [r2, #4]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003d6e:	4798      	blx	r3

        /* Set APS flag as after soft reset the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from
         * I2C after a soft-reset
         */
        if ((rslt == BMI2_OK) && (dev->intf == BMI2_SPI_INTF))
 8003d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10c      	bne.n	8003d9a <bmi2_soft_reset+0x6e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	7a5b      	ldrb	r3, [r3, #9]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d108      	bne.n	8003d9a <bmi2_soft_reset+0x6e>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &dummy_read, 1, dev);
 8003d88:	f107 010d 	add.w	r1, r7, #13
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7ff fed5 	bl	8003b40 <bmi2_get_regs>
 8003d96:	4603      	mov	r3, r0
 8003d98:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8003d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d104      	bne.n	8003dac <bmi2_soft_reset+0x80>
        {
            /* Write the configuration file */
            rslt = bmi2_write_config_file(dev);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f85f 	bl	8003e66 <bmi2_write_config_file>
 8003da8:	4603      	mov	r3, r0
 8003daa:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the sensor status flag in the device structure */
        if (rslt == BMI2_OK)
 8003dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d106      	bne.n	8003dc2 <bmi2_soft_reset+0x96>
        {
            dev->sens_en_stat = 0;
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        }
    }

    return rslt;
 8003dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <bmi2_set_adv_power_save>:

/*!
 * @brief This API enables/disables the advance power save mode in the sensor.
 */
int8_t bmi2_set_adv_power_save(uint8_t enable, struct bmi2_dev *dev)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	6039      	str	r1, [r7, #0]
 8003dd8:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003dde:	6838      	ldr	r0, [r7, #0]
 8003de0:	f001 ff06 	bl	8005bf0 <null_ptr_check>
 8003de4:	4603      	mov	r3, r0
 8003de6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8003de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d134      	bne.n	8003e5a <bmi2_set_adv_power_save+0x8c>
    {
        rslt = bmi2_get_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 8003df0:	f107 010e 	add.w	r1, r7, #14
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	207c      	movs	r0, #124	@ 0x7c
 8003dfa:	f7ff fea1 	bl	8003b40 <bmi2_get_regs>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8003e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d127      	bne.n	8003e5a <bmi2_set_adv_power_save+0x8c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ADV_POW_EN, enable);
 8003e0a:	7bbb      	ldrb	r3, [r7, #14]
 8003e0c:	b25b      	sxtb	r3, r3
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	b25a      	sxtb	r2, r3
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	b25b      	sxtb	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	73bb      	strb	r3, [r7, #14]
            rslt = bmi2_set_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 8003e26:	f107 010e 	add.w	r1, r7, #14
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	207c      	movs	r0, #124	@ 0x7c
 8003e30:	f7ff fef9 	bl	8003c26 <bmi2_set_regs>
 8003e34:	4603      	mov	r3, r0
 8003e36:	73fb      	strb	r3, [r7, #15]

            if (rslt != BMI2_OK)
 8003e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <bmi2_set_adv_power_save+0x76>
            {
                /* Return error if enable/disable APS fails */
                rslt = BMI2_E_SET_APS_FAIL;
 8003e40:	23f3      	movs	r3, #243	@ 0xf3
 8003e42:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BMI2_OK)
 8003e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <bmi2_set_adv_power_save+0x8c>
            {
                dev->aps_status = BMI2_GET_BIT_POS0(reg_data, BMI2_ADV_POW_EN);
 8003e4c:	7bbb      	ldrb	r3, [r7, #14]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }
    }

    return rslt;
 8003e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <bmi2_write_config_file>:

/*!
 * @brief This API loads the configuration file into the bmi2 sensor.
 */
int8_t bmi2_write_config_file(struct bmi2_dev *dev)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to know the load status */
    uint8_t load_status = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f001 febc 	bl	8005bf0 <null_ptr_check>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (dev->config_size != 0))
 8003e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d13b      	bne.n	8003efc <bmi2_write_config_file+0x96>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d036      	beq.n	8003efc <bmi2_write_config_file+0x96>
    {
        /* Bytes written are multiples of 2 */
        if ((dev->read_write_len % 2) != 0)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	89db      	ldrh	r3, [r3, #14]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <bmi2_write_config_file+0x42>
        {
            dev->read_write_len = dev->read_write_len - 1;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	89db      	ldrh	r3, [r3, #14]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	81da      	strh	r2, [r3, #14]
        }

        if (dev->read_write_len < 2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	89db      	ldrh	r3, [r3, #14]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d802      	bhi.n	8003eb6 <bmi2_write_config_file+0x50>
        {
            dev->read_write_len = 2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	81da      	strh	r2, [r3, #14]
        }

        /* Write the configuration file */
        rslt = write_config_file(dev);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fd56 	bl	8004968 <write_config_file>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8003ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11c      	bne.n	8003f02 <bmi2_write_config_file+0x9c>
        {
            /* Check the configuration load status */
            rslt = bmi2_get_internal_status(&load_status, dev);
 8003ec8:	f107 030e 	add.w	r3, r7, #14
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fc59 	bl	8004786 <bmi2_get_internal_status>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	73fb      	strb	r3, [r7, #15]

            load_status &= BMI2_CONFIG_LOAD_STATUS_MASK;
 8003ed8:	7bbb      	ldrb	r3, [r7, #14]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	73bb      	strb	r3, [r7, #14]

            dev->load_status = load_status;
 8003ee2:	7bba      	ldrb	r2, [r7, #14]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	741a      	strb	r2, [r3, #16]

            /* Return error if loading not successful */
            if ((rslt == BMI2_OK) && (load_status != BMI2_CONFIG_LOAD_SUCCESS))
 8003ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d108      	bne.n	8003f02 <bmi2_write_config_file+0x9c>
 8003ef0:	7bbb      	ldrb	r3, [r7, #14]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d005      	beq.n	8003f02 <bmi2_write_config_file+0x9c>
            {
                rslt = BMI2_E_CONFIG_LOAD;
 8003ef6:	23f7      	movs	r3, #247	@ 0xf7
 8003ef8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8003efa:	e002      	b.n	8003f02 <bmi2_write_config_file+0x9c>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003efc:	23ff      	movs	r3, #255	@ 0xff
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e000      	b.n	8003f04 <bmi2_write_config_file+0x9e>
        if (rslt == BMI2_OK)
 8003f02:	bf00      	nop
    }

    return rslt;
 8003f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <bmi2_set_int_pin_config>:
 *        1) The input output configuration of the selected interrupt pin:
 *           INT1 or INT2.
 *        2) The interrupt mode: permanently latched or non-latched.
 */
int8_t bmi2_set_int_pin_config(const struct bmi2_int_pin_config *int_cfg, struct bmi2_dev *dev)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define data array */
    uint8_t data_array[3] = { 0 };
 8003f1a:	f107 0308 	add.w	r3, r7, #8
 8003f1e:	2100      	movs	r1, #0
 8003f20:	460a      	mov	r2, r1
 8003f22:	801a      	strh	r2, [r3, #0]
 8003f24:	460a      	mov	r2, r1
 8003f26:	709a      	strb	r2, [r3, #2]

    /* Variable to store register data */
    uint8_t reg_data = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	73bb      	strb	r3, [r7, #14]

    /* Variable to define type of interrupt pin  */
    uint8_t int_pin = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	737b      	strb	r3, [r7, #13]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003f30:	6838      	ldr	r0, [r7, #0]
 8003f32:	f001 fe5d 	bl	8005bf0 <null_ptr_check>
 8003f36:	4603      	mov	r3, r0
 8003f38:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (int_cfg != NULL))
 8003f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 80ca 	bne.w	80040d8 <bmi2_set_int_pin_config+0x1c8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80c6 	beq.w	80040d8 <bmi2_set_int_pin_config+0x1c8>
    {
        /* Copy the pin type to a local variable */
        int_pin = int_cfg->pin_type;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	737b      	strb	r3, [r7, #13]
        if ((int_pin > BMI2_INT_NONE) && (int_pin < BMI2_INT_PIN_MAX))
 8003f52:	7b7b      	ldrb	r3, [r7, #13]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80bb 	beq.w	80040d0 <bmi2_set_int_pin_config+0x1c0>
 8003f5a:	7b7b      	ldrb	r3, [r7, #13]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	f200 80b7 	bhi.w	80040d0 <bmi2_set_int_pin_config+0x1c0>
        {
            /* Get the previous configuration data */
            rslt = bmi2_get_regs(BMI2_INT1_IO_CTRL_ADDR, data_array, 3, dev);
 8003f62:	f107 0108 	add.w	r1, r7, #8
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	2053      	movs	r0, #83	@ 0x53
 8003f6c:	f7ff fde8 	bl	8003b40 <bmi2_get_regs>
 8003f70:	4603      	mov	r3, r0
 8003f72:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8003f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f040 80ac 	bne.w	80040d6 <bmi2_set_int_pin_config+0x1c6>
            {
                /* Set interrupt pin 1 configuration */
                if ((int_pin == BMI2_INT1) || (int_pin == BMI2_INT_BOTH))
 8003f7e:	7b7b      	ldrb	r3, [r7, #13]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d002      	beq.n	8003f8a <bmi2_set_int_pin_config+0x7a>
 8003f84:	7b7b      	ldrb	r3, [r7, #13]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d141      	bne.n	800400e <bmi2_set_int_pin_config+0xfe>
                {
                    /* Configure active low or high */
                    reg_data = BMI2_SET_BITS(data_array[0], BMI2_INT_LEVEL, int_cfg->pin_cfg[0].lvl);
 8003f8a:	7a3b      	ldrb	r3, [r7, #8]
 8003f8c:	b25b      	sxtb	r3, r3
 8003f8e:	f023 0302 	bic.w	r3, r3, #2
 8003f92:	b25a      	sxtb	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	789b      	ldrb	r3, [r3, #2]
 8003f98:	b25b      	sxtb	r3, r3
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	b25b      	sxtb	r3, r3
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	73bb      	strb	r3, [r7, #14]

                    /* Configure push-pull or open drain */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OPEN_DRAIN, int_cfg->pin_cfg[0].od);
 8003faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fae:	f023 0304 	bic.w	r3, r3, #4
 8003fb2:	b25a      	sxtb	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	78db      	ldrb	r3, [r3, #3]
 8003fb8:	b25b      	sxtb	r3, r3
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	b25b      	sxtb	r3, r3
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	b25b      	sxtb	r3, r3
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	73bb      	strb	r3, [r7, #14]

                    /* Configure output enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OUTPUT_EN, int_cfg->pin_cfg[0].output_en);
 8003fca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fce:	f023 0308 	bic.w	r3, r3, #8
 8003fd2:	b25a      	sxtb	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	b25b      	sxtb	r3, r3
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	b25b      	sxtb	r3, r3
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	b25b      	sxtb	r3, r3
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	b25b      	sxtb	r3, r3
 8003fe8:	73bb      	strb	r3, [r7, #14]

                    /* Configure input enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_INPUT_EN, int_cfg->pin_cfg[0].input_en);
 8003fea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fee:	f023 0310 	bic.w	r3, r3, #16
 8003ff2:	b25a      	sxtb	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	795b      	ldrb	r3, [r3, #5]
 8003ff8:	b25b      	sxtb	r3, r3
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	b25b      	sxtb	r3, r3
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	b25b      	sxtb	r3, r3
 8004004:	4313      	orrs	r3, r2
 8004006:	b25b      	sxtb	r3, r3
 8004008:	73bb      	strb	r3, [r7, #14]

                    /* Copy the data to be written in the respective array */
                    data_array[0] = reg_data;
 800400a:	7bbb      	ldrb	r3, [r7, #14]
 800400c:	723b      	strb	r3, [r7, #8]
                }

                /* Set interrupt pin 2 configuration */
                if ((int_pin == BMI2_INT2) || (int_pin == BMI2_INT_BOTH))
 800400e:	7b7b      	ldrb	r3, [r7, #13]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d002      	beq.n	800401a <bmi2_set_int_pin_config+0x10a>
 8004014:	7b7b      	ldrb	r3, [r7, #13]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d141      	bne.n	800409e <bmi2_set_int_pin_config+0x18e>
                {
                    /* Configure active low or high */
                    reg_data = BMI2_SET_BITS(data_array[1], BMI2_INT_LEVEL, int_cfg->pin_cfg[1].lvl);
 800401a:	7a7b      	ldrb	r3, [r7, #9]
 800401c:	b25b      	sxtb	r3, r3
 800401e:	f023 0302 	bic.w	r3, r3, #2
 8004022:	b25a      	sxtb	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	799b      	ldrb	r3, [r3, #6]
 8004028:	b25b      	sxtb	r3, r3
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	b25b      	sxtb	r3, r3
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	b25b      	sxtb	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b25b      	sxtb	r3, r3
 8004038:	73bb      	strb	r3, [r7, #14]

                    /* Configure push-pull or open drain */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OPEN_DRAIN, int_cfg->pin_cfg[1].od);
 800403a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800403e:	f023 0304 	bic.w	r3, r3, #4
 8004042:	b25a      	sxtb	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	79db      	ldrb	r3, [r3, #7]
 8004048:	b25b      	sxtb	r3, r3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	b25b      	sxtb	r3, r3
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	b25b      	sxtb	r3, r3
 8004054:	4313      	orrs	r3, r2
 8004056:	b25b      	sxtb	r3, r3
 8004058:	73bb      	strb	r3, [r7, #14]

                    /* Configure output enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OUTPUT_EN, int_cfg->pin_cfg[1].output_en);
 800405a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800405e:	f023 0308 	bic.w	r3, r3, #8
 8004062:	b25a      	sxtb	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7a1b      	ldrb	r3, [r3, #8]
 8004068:	b25b      	sxtb	r3, r3
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	b25b      	sxtb	r3, r3
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	b25b      	sxtb	r3, r3
 8004074:	4313      	orrs	r3, r2
 8004076:	b25b      	sxtb	r3, r3
 8004078:	73bb      	strb	r3, [r7, #14]

                    /* Configure input enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_INPUT_EN, int_cfg->pin_cfg[1].input_en);
 800407a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800407e:	f023 0310 	bic.w	r3, r3, #16
 8004082:	b25a      	sxtb	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7a5b      	ldrb	r3, [r3, #9]
 8004088:	b25b      	sxtb	r3, r3
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	b25b      	sxtb	r3, r3
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	b25b      	sxtb	r3, r3
 8004094:	4313      	orrs	r3, r2
 8004096:	b25b      	sxtb	r3, r3
 8004098:	73bb      	strb	r3, [r7, #14]

                    /* Copy the data to be written in the respective array */
                    data_array[1] = reg_data;
 800409a:	7bbb      	ldrb	r3, [r7, #14]
 800409c:	727b      	strb	r3, [r7, #9]
                }

                /* Configure the interrupt mode */
                data_array[2] = BMI2_SET_BIT_POS0(data_array[2], BMI2_INT_LATCH, int_cfg->int_latch);
 800409e:	7abb      	ldrb	r3, [r7, #10]
 80040a0:	b25b      	sxtb	r3, r3
 80040a2:	f023 0301 	bic.w	r3, r3, #1
 80040a6:	b25a      	sxtb	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	785b      	ldrb	r3, [r3, #1]
 80040ac:	b25b      	sxtb	r3, r3
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	b25b      	sxtb	r3, r3
 80040b4:	4313      	orrs	r3, r2
 80040b6:	b25b      	sxtb	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	72bb      	strb	r3, [r7, #10]

                /* Set the configurations simultaneously as
                 * INT1_IO_CTRL, INT2_IO_CTRL, and INT_LATCH lie
                 * in consecutive addresses
                 */
                rslt = bmi2_set_regs(BMI2_INT1_IO_CTRL_ADDR, data_array, 3, dev);
 80040bc:	f107 0108 	add.w	r1, r7, #8
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2203      	movs	r2, #3
 80040c4:	2053      	movs	r0, #83	@ 0x53
 80040c6:	f7ff fdae 	bl	8003c26 <bmi2_set_regs>
 80040ca:	4603      	mov	r3, r0
 80040cc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 80040ce:	e002      	b.n	80040d6 <bmi2_set_int_pin_config+0x1c6>
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_INT_PIN;
 80040d0:	23f4      	movs	r3, #244	@ 0xf4
 80040d2:	73fb      	strb	r3, [r7, #15]
        if ((int_pin > BMI2_INT_NONE) && (int_pin < BMI2_INT_PIN_MAX))
 80040d4:	e002      	b.n	80040dc <bmi2_set_int_pin_config+0x1cc>
 80040d6:	e001      	b.n	80040dc <bmi2_set_int_pin_config+0x1cc>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80040d8:	23ff      	movs	r3, #255	@ 0xff
 80040da:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80040dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <bmi2_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi2_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	460b      	mov	r3, r1
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f001 fd78 	bl	8005bf0 <null_ptr_check>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8004104:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f040 8099 	bne.w	8004240 <bmi2_set_sensor_config+0x158>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8095 	beq.w	8004240 <bmi2_set_sensor_config+0x158>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800411c:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 800411e:	2300      	movs	r3, #0
 8004120:	75bb      	strb	r3, [r7, #22]
 8004122:	e079      	b.n	8004218 <bmi2_set_sensor_config+0x130>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if (aps_stat == BMI2_ENABLE)
 8004124:	7d7b      	ldrb	r3, [r7, #21]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <bmi2_set_sensor_config+0x4e>
            {
                /* Disable advance power save if
                 * enabled
                 */
                rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	2000      	movs	r0, #0
 800412e:	f7ff fe4e 	bl	8003dce <bmi2_set_adv_power_save>
 8004132:	4603      	mov	r3, r0
 8004134:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BMI2_OK)
 8004136:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d165      	bne.n	800420a <bmi2_set_sensor_config+0x122>
            {
                switch (sens_cfg[loop].type)
 800413e:	7dba      	ldrb	r2, [r7, #22]
 8004140:	4613      	mov	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	461a      	mov	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b09      	cmp	r3, #9
 8004152:	d857      	bhi.n	8004204 <bmi2_set_sensor_config+0x11c>
 8004154:	a201      	add	r2, pc, #4	@ (adr r2, 800415c <bmi2_set_sensor_config+0x74>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004185 	.word	0x08004185
 8004160:	080041a5 	.word	0x080041a5
 8004164:	080041c5 	.word	0x080041c5
 8004168:	08004205 	.word	0x08004205
 800416c:	08004205 	.word	0x08004205
 8004170:	08004205 	.word	0x08004205
 8004174:	08004205 	.word	0x08004205
 8004178:	08004205 	.word	0x08004205
 800417c:	08004205 	.word	0x08004205
 8004180:	080041e5 	.word	0x080041e5
                {
                    /* Set accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8004184:	7dba      	ldrb	r2, [r7, #22]
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	461a      	mov	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	3304      	adds	r3, #4
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4618      	mov	r0, r3
 800419a:	f001 fc2c 	bl	80059f6 <set_accel_config>
 800419e:	4603      	mov	r3, r0
 80041a0:	75fb      	strb	r3, [r7, #23]
                        break;
 80041a2:	e032      	b.n	800420a <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80041a4:	7dba      	ldrb	r2, [r7, #22]
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	3304      	adds	r3, #4
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 fc93 	bl	8005ae4 <set_gyro_config>
 80041be:	4603      	mov	r3, r0
 80041c0:	75fb      	strb	r3, [r7, #23]
                        break;
 80041c2:	e022      	b.n	800420a <bmi2_set_sensor_config+0x122>

                    /* Set auxiliary configuration */
                    case BMI2_AUX:
                        rslt = set_aux_config(&sens_cfg[loop].cfg.aux, dev);
 80041c4:	7dba      	ldrb	r2, [r7, #22]
 80041c6:	4613      	mov	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	3304      	adds	r3, #4
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fdbf 	bl	8004d5c <set_aux_config>
 80041de:	4603      	mov	r3, r0
 80041e0:	75fb      	strb	r3, [r7, #23]
                        break;
 80041e2:	e012      	b.n	800420a <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = set_gyro_user_gain_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 80041e4:	7dba      	ldrb	r2, [r7, #22]
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	3304      	adds	r3, #4
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fdde 	bl	8004dba <set_gyro_user_gain_config>
 80041fe:	4603      	mov	r3, r0
 8004200:	75fb      	strb	r3, [r7, #23]
                        break;
 8004202:	e002      	b.n	800420a <bmi2_set_sensor_config+0x122>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 8004204:	23f8      	movs	r3, #248	@ 0xf8
 8004206:	75fb      	strb	r3, [r7, #23]
                        break;
 8004208:	bf00      	nop
                }
            }

            /* Return error if any of the set configurations fail */
            if (rslt != BMI2_OK)
 800420a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d107      	bne.n	8004222 <bmi2_set_sensor_config+0x13a>
        for (loop = 0; loop < n_sens; loop++)
 8004212:	7dbb      	ldrb	r3, [r7, #22]
 8004214:	3301      	adds	r3, #1
 8004216:	75bb      	strb	r3, [r7, #22]
 8004218:	7dba      	ldrb	r2, [r7, #22]
 800421a:	7afb      	ldrb	r3, [r7, #11]
 800421c:	429a      	cmp	r2, r3
 800421e:	d381      	bcc.n	8004124 <bmi2_set_sensor_config+0x3c>
 8004220:	e000      	b.n	8004224 <bmi2_set_sensor_config+0x13c>
            {
                break;
 8004222:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8004224:	7d7b      	ldrb	r3, [r7, #21]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d10d      	bne.n	8004246 <bmi2_set_sensor_config+0x15e>
 800422a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <bmi2_set_sensor_config+0x15e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	2001      	movs	r0, #1
 8004236:	f7ff fdca 	bl	8003dce <bmi2_set_adv_power_save>
 800423a:	4603      	mov	r3, r0
 800423c:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800423e:	e002      	b.n	8004246 <bmi2_set_sensor_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004240:	23ff      	movs	r3, #255	@ 0xff
 8004242:	75fb      	strb	r3, [r7, #23]
 8004244:	e000      	b.n	8004248 <bmi2_set_sensor_config+0x160>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8004246:	bf00      	nop
    }

    return rslt;
 8004248:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <bmi2_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi2_get_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	460b      	mov	r3, r1
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f001 fcc2 	bl	8005bf0 <null_ptr_check>
 800426c:	4603      	mov	r3, r0
 800426e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8004270:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 80b0 	bne.w	80043da <bmi2_get_sensor_config+0x186>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80ac 	beq.w	80043da <bmi2_get_sensor_config+0x186>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004288:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 800428a:	2300      	movs	r3, #0
 800428c:	75bb      	strb	r3, [r7, #22]
 800428e:	e08f      	b.n	80043b0 <bmi2_get_sensor_config+0x15c>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if ((sens_cfg[loop].type >= BMI2_MAIN_SENS_MAX_NUM) || (sens_cfg[loop].type == BMI2_AUX))
 8004290:	7dba      	ldrb	r2, [r7, #22]
 8004292:	4613      	mov	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	461a      	mov	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d80a      	bhi.n	80042bc <bmi2_get_sensor_config+0x68>
 80042a6:	7dba      	ldrb	r2, [r7, #22]
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	461a      	mov	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4413      	add	r3, r2
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d108      	bne.n	80042ce <bmi2_get_sensor_config+0x7a>
            {

                if (aps_stat == BMI2_ENABLE)
 80042bc:	7d7b      	ldrb	r3, [r7, #21]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d105      	bne.n	80042ce <bmi2_get_sensor_config+0x7a>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	2000      	movs	r0, #0
 80042c6:	f7ff fd82 	bl	8003dce <bmi2_set_adv_power_save>
 80042ca:	4603      	mov	r3, r0
 80042cc:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 80042ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d165      	bne.n	80043a2 <bmi2_get_sensor_config+0x14e>
            {
                switch (sens_cfg[loop].type)
 80042d6:	7dba      	ldrb	r2, [r7, #22]
 80042d8:	4613      	mov	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	461a      	mov	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b09      	cmp	r3, #9
 80042ea:	d857      	bhi.n	800439c <bmi2_get_sensor_config+0x148>
 80042ec:	a201      	add	r2, pc, #4	@ (adr r2, 80042f4 <bmi2_get_sensor_config+0xa0>)
 80042ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f2:	bf00      	nop
 80042f4:	0800431d 	.word	0x0800431d
 80042f8:	0800433d 	.word	0x0800433d
 80042fc:	0800435d 	.word	0x0800435d
 8004300:	0800439d 	.word	0x0800439d
 8004304:	0800439d 	.word	0x0800439d
 8004308:	0800439d 	.word	0x0800439d
 800430c:	0800439d 	.word	0x0800439d
 8004310:	0800439d 	.word	0x0800439d
 8004314:	0800439d 	.word	0x0800439d
 8004318:	0800437d 	.word	0x0800437d
                {
                    /* Get accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 800431c:	7dba      	ldrb	r2, [r7, #22]
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	f000 ff6f 	bl	8005214 <get_accel_config>
 8004336:	4603      	mov	r3, r0
 8004338:	75fb      	strb	r3, [r7, #23]
                        break;
 800433a:	e032      	b.n	80043a2 <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 800433c:	7dba      	ldrb	r2, [r7, #22]
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 ffa1 	bl	8005298 <get_gyro_config>
 8004356:	4603      	mov	r3, r0
 8004358:	75fb      	strb	r3, [r7, #23]
                        break;
 800435a:	e022      	b.n	80043a2 <bmi2_get_sensor_config+0x14e>

                    /* Get auxiliary configuration */
                    case BMI2_AUX:
                        rslt = get_aux_config(&sens_cfg[loop].cfg.aux, dev);
 800435c:	7dba      	ldrb	r2, [r7, #22]
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	461a      	mov	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	3304      	adds	r3, #4
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 ffe3 	bl	800533c <get_aux_config>
 8004376:	4603      	mov	r3, r0
 8004378:	75fb      	strb	r3, [r7, #23]
                        break;
 800437a:	e012      	b.n	80043a2 <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = get_gyro_gain_update_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 800437c:	7dba      	ldrb	r2, [r7, #22]
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	461a      	mov	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4618      	mov	r0, r3
 8004392:	f001 f809 	bl	80053a8 <get_gyro_gain_update_config>
 8004396:	4603      	mov	r3, r0
 8004398:	75fb      	strb	r3, [r7, #23]
                        break;
 800439a:	e002      	b.n	80043a2 <bmi2_get_sensor_config+0x14e>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 800439c:	23f8      	movs	r3, #248	@ 0xf8
 800439e:	75fb      	strb	r3, [r7, #23]
                        break;
 80043a0:	bf00      	nop
                }
            }

            /* Return error if any of the get configurations fail */
            if (rslt != BMI2_OK)
 80043a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d108      	bne.n	80043bc <bmi2_get_sensor_config+0x168>
        for (loop = 0; loop < n_sens; loop++)
 80043aa:	7dbb      	ldrb	r3, [r7, #22]
 80043ac:	3301      	adds	r3, #1
 80043ae:	75bb      	strb	r3, [r7, #22]
 80043b0:	7dba      	ldrb	r2, [r7, #22]
 80043b2:	7afb      	ldrb	r3, [r7, #11]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	f4ff af6b 	bcc.w	8004290 <bmi2_get_sensor_config+0x3c>
 80043ba:	e000      	b.n	80043be <bmi2_get_sensor_config+0x16a>
            {
                break;
 80043bc:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80043be:	7d7b      	ldrb	r3, [r7, #21]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d10d      	bne.n	80043e0 <bmi2_get_sensor_config+0x18c>
 80043c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <bmi2_get_sensor_config+0x18c>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	2001      	movs	r0, #1
 80043d0:	f7ff fcfd 	bl	8003dce <bmi2_set_adv_power_save>
 80043d4:	4603      	mov	r3, r0
 80043d6:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80043d8:	e002      	b.n	80043e0 <bmi2_get_sensor_config+0x18c>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80043da:	23ff      	movs	r3, #255	@ 0xff
 80043dc:	75fb      	strb	r3, [r7, #23]
 80043de:	e000      	b.n	80043e2 <bmi2_get_sensor_config+0x18e>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80043e0:	bf00      	nop
    }

    return rslt;
 80043e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop

080043f0 <bmi2_get_feature_data>:

/*!
 * @brief This API gets the feature data gyroscope user-gain update and gyroscope cross sensitivity.
 */
int8_t bmi2_get_feature_data(struct bmi2_feat_sensor_data *feat_sensor_data, uint8_t n_sens, struct bmi2_dev *dev)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	460b      	mov	r3, r1
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f001 fbf4 	bl	8005bf0 <null_ptr_check>
 8004408:	4603      	mov	r3, r0
 800440a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 800440c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d15c      	bne.n	80044ce <bmi2_get_feature_data+0xde>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d059      	beq.n	80044ce <bmi2_get_feature_data+0xde>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004420:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 8004422:	2300      	movs	r3, #0
 8004424:	75bb      	strb	r3, [r7, #22]
 8004426:	e04b      	b.n	80044c0 <bmi2_get_feature_data+0xd0>
        {
            /* Disable Advance power save if enabled for feature
             * configurations
             */
            if (feat_sensor_data[loop].type >= BMI2_MAIN_SENS_MAX_NUM)
 8004428:	7dbb      	ldrb	r3, [r7, #22]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d908      	bls.n	8004448 <bmi2_get_feature_data+0x58>
            {
                if (aps_stat == BMI2_ENABLE)
 8004436:	7d7b      	ldrb	r3, [r7, #21]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d105      	bne.n	8004448 <bmi2_get_feature_data+0x58>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	2000      	movs	r0, #0
 8004440:	f7ff fcc5 	bl	8003dce <bmi2_set_adv_power_save>
 8004444:	4603      	mov	r3, r0
 8004446:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 8004448:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d127      	bne.n	80044a0 <bmi2_get_feature_data+0xb0>
            {
                switch (feat_sensor_data[loop].type)
 8004450:	7dbb      	ldrb	r3, [r7, #22]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b09      	cmp	r3, #9
 800445c:	d00d      	beq.n	800447a <bmi2_get_feature_data+0x8a>
 800445e:	2b29      	cmp	r3, #41	@ 0x29
 8004460:	d117      	bne.n	8004492 <bmi2_get_feature_data+0xa2>
                {
                    case BMI2_GYRO_CROSS_SENSE:

                        /* Get Gyroscope cross sense value of z axis */
                        rslt = get_gyro_cross_sense(&feat_sensor_data[loop].sens_data.correction_factor_zx, dev);
 8004462:	7dbb      	ldrb	r3, [r7, #22]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	3304      	adds	r3, #4
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4618      	mov	r0, r3
 8004470:	f001 fca4 	bl	8005dbc <get_gyro_cross_sense>
 8004474:	4603      	mov	r3, r0
 8004476:	75fb      	strb	r3, [r7, #23]
                        break;
 8004478:	e00e      	b.n	8004498 <bmi2_get_feature_data+0xa8>

                    case BMI2_GYRO_GAIN_UPDATE:

                        /* Get saturation status of gyroscope user gain update  */
                        rslt =
                            get_gyro_gain_update_status(&feat_sensor_data[loop].sens_data.gyro_user_gain_status, dev);
 800447a:	7dbb      	ldrb	r3, [r7, #22]
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	3304      	adds	r3, #4
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4618      	mov	r0, r3
 8004488:	f001 fbfd 	bl	8005c86 <get_gyro_gain_update_status>
 800448c:	4603      	mov	r3, r0
 800448e:	75fb      	strb	r3, [r7, #23]
                        break;
 8004490:	e002      	b.n	8004498 <bmi2_get_feature_data+0xa8>
                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 8004492:	23f8      	movs	r3, #248	@ 0xf8
 8004494:	75fb      	strb	r3, [r7, #23]
                        break;
 8004496:	bf00      	nop
                }

                /* Return error if any of the get sensor data fails */
                if (rslt != BMI2_OK)
 8004498:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d114      	bne.n	80044ca <bmi2_get_feature_data+0xda>
            }

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80044a0:	7d7b      	ldrb	r3, [r7, #21]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d109      	bne.n	80044ba <bmi2_get_feature_data+0xca>
 80044a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d105      	bne.n	80044ba <bmi2_get_feature_data+0xca>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	2001      	movs	r0, #1
 80044b2:	f7ff fc8c 	bl	8003dce <bmi2_set_adv_power_save>
 80044b6:	4603      	mov	r3, r0
 80044b8:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 80044ba:	7dbb      	ldrb	r3, [r7, #22]
 80044bc:	3301      	adds	r3, #1
 80044be:	75bb      	strb	r3, [r7, #22]
 80044c0:	7dba      	ldrb	r2, [r7, #22]
 80044c2:	7afb      	ldrb	r3, [r7, #11]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d3af      	bcc.n	8004428 <bmi2_get_feature_data+0x38>
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 80044c8:	e003      	b.n	80044d2 <bmi2_get_feature_data+0xe2>
                    break;
 80044ca:	bf00      	nop
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 80044cc:	e001      	b.n	80044d2 <bmi2_get_feature_data+0xe2>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80044ce:	23ff      	movs	r3, #255	@ 0xff
 80044d0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80044d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <bmi2_get_sensor_data>:
/*!
 * @brief This API gets the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_get_sensor_data(struct bmi2_sens_data *data, struct bmi2_dev *dev)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b08a      	sub	sp, #40	@ 0x28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]

    /* Array to hold register sensor data */
    uint8_t sensor_data[BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES];

    /* Null-pointer check */
    if (data != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d018      	beq.n	8004520 <bmi2_get_sensor_data+0x42>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, sensor_data, BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES, dev);
 80044ee:	f107 010c 	add.w	r1, r7, #12
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2218      	movs	r2, #24
 80044f6:	2003      	movs	r0, #3
 80044f8:	f7ff fb22 	bl	8003b40 <bmi2_get_regs>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI2_OK)
 8004502:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10d      	bne.n	8004526 <bmi2_get_sensor_data+0x48>
        {
            rslt = bmi2_parse_sensor_data(sensor_data, data, dev);
 800450a:	f107 030c 	add.w	r3, r7, #12
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f80d 	bl	8004532 <bmi2_parse_sensor_data>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800451e:	e002      	b.n	8004526 <bmi2_get_sensor_data+0x48>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004520:	23ff      	movs	r3, #255	@ 0xff
 8004522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8004526:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800452a:	4618      	mov	r0, r3
 800452c:	3728      	adds	r7, #40	@ 0x28
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <bmi2_parse_sensor_data>:
/*!
 * @brief This API parses the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_parse_sensor_data(const uint8_t *sensor_data, struct bmi2_sens_data *data, const struct bmi2_dev *dev)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b088      	sub	sp, #32
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variables to define loop */
    uint8_t count = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	77bb      	strb	r3, [r7, #30]

    uint8_t index = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	777b      	strb	r3, [r7, #29]

    uint32_t sensor_time_byte3 = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	61bb      	str	r3, [r7, #24]
    uint16_t sensor_time_byte2 = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	82fb      	strh	r3, [r7, #22]
    uint8_t sensor_time_byte1 = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	757b      	strb	r3, [r7, #21]

    rslt = null_ptr_check(dev);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f001 fb4c 	bl	8005bf0 <null_ptr_check>
 8004558:	4603      	mov	r3, r0
 800455a:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMI2_OK) && (data != NULL))
 800455c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d156      	bne.n	8004612 <bmi2_parse_sensor_data+0xe0>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d053      	beq.n	8004612 <bmi2_parse_sensor_data+0xe0>
    {
        /* Update auxiliary sensor data length */
        index = BMI2_AUX_START_INDEX;
 800456a:	2301      	movs	r3, #1
 800456c:	777b      	strb	r3, [r7, #29]

        /* Get the 8 bytes of auxiliary data */
        do
        {
            *(data->aux_data + count++) = (sensor_data[index++]);
 800456e:	7f7b      	ldrb	r3, [r7, #29]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	777a      	strb	r2, [r7, #29]
 8004574:	461a      	mov	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	441a      	add	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f103 0118 	add.w	r1, r3, #24
 8004580:	7fbb      	ldrb	r3, [r7, #30]
 8004582:	1c58      	adds	r0, r3, #1
 8004584:	77b8      	strb	r0, [r7, #30]
 8004586:	440b      	add	r3, r1
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	701a      	strb	r2, [r3, #0]
        } while (count < BMI2_AUX_NUM_BYTES);
 800458c:	7fbb      	ldrb	r3, [r7, #30]
 800458e:	2b07      	cmp	r3, #7
 8004590:	d9ed      	bls.n	800456e <bmi2_parse_sensor_data+0x3c>

        /* Update accelerometer sensor data length */
        index = BMI2_ACC_START_INDEX;
 8004592:	2309      	movs	r3, #9
 8004594:	777b      	strb	r3, [r7, #29]

        /* Get accelerometer data from the register */
        get_acc_gyr_data(&data->acc, &sensor_data[index]);
 8004596:	68b8      	ldr	r0, [r7, #8]
 8004598:	7f7b      	ldrb	r3, [r7, #29]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4413      	add	r3, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	f001 f8b2 	bl	8005708 <get_acc_gyr_data>

        /* Get the re-mapped accelerometer data */
        get_remapped_data(&data->acc, dev);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f001 f911 	bl	80057d0 <get_remapped_data>

        /* Update gyroscope sensor data length */
        index = BMI2_GYR_START_INDEX;
 80045ae:	230f      	movs	r3, #15
 80045b0:	777b      	strb	r3, [r7, #29]

        /* Get gyroscope data from the register */
        get_acc_gyr_data(&data->gyr, &sensor_data[index]);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f103 000c 	add.w	r0, r3, #12
 80045b8:	7f7b      	ldrb	r3, [r7, #29]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	f001 f8a2 	bl	8005708 <get_acc_gyr_data>

        /* Get the compensated gyroscope data */
        comp_gyro_cross_axis_sensitivity(&data->gyr, dev);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	330c      	adds	r3, #12
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 f9b3 	bl	8005936 <comp_gyro_cross_axis_sensitivity>

        /* Get the re-mapped gyroscope data */
        get_remapped_data(&data->gyr, dev);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	330c      	adds	r3, #12
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 f8fa 	bl	80057d0 <get_remapped_data>

        sensor_time_byte3 = sensor_data[BMI2_PARSE_SENSOR_TIME_MSB_BYTE] << 16;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3317      	adds	r3, #23
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	61bb      	str	r3, [r7, #24]
        sensor_time_byte2 = sensor_data[BMI2_PARSE_SENSOR_TIME_XLSB_BYTE] << 8;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3316      	adds	r3, #22
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	82fb      	strh	r3, [r7, #22]
        sensor_time_byte1 = sensor_data[BMI2_PARSE_SENSOR_TIME_LSB_BYTE];
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3315      	adds	r3, #21
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	757b      	strb	r3, [r7, #21]

        data->sens_time = (uint32_t)(sensor_time_byte3 | sensor_time_byte2 | sensor_time_byte1);
 80045f8:	8afa      	ldrh	r2, [r7, #22]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	7d7b      	ldrb	r3, [r7, #21]
 8004600:	431a      	orrs	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	621a      	str	r2, [r3, #32]

        /* Store status register value in structure */
        data->status = sensor_data[BMI2_STATUS_INDEX];
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004610:	e001      	b.n	8004616 <bmi2_parse_sensor_data+0xe4>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004612:	23ff      	movs	r3, #255	@ 0xff
 8004614:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8004616:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <bmi2_get_status>:
/*!
 * @brief This API gets the data ready status of accelerometer, gyroscope,
 * auxiliary, command decoder and busy status of auxiliary.
 */
int8_t bmi2_get_status(uint8_t *status, struct bmi2_dev *dev)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800462c:	6838      	ldr	r0, [r7, #0]
 800462e:	f001 fadf 	bl	8005bf0 <null_ptr_check>
 8004632:	4603      	mov	r3, r0
 8004634:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (status != NULL))
 8004636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <bmi2_get_status+0x34>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <bmi2_get_status+0x34>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, status, 1, dev);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2201      	movs	r2, #1
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	2003      	movs	r0, #3
 800464c:	f7ff fa78 	bl	8003b40 <bmi2_get_regs>
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
 8004654:	e001      	b.n	800465a <bmi2_get_status+0x38>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004656:	23ff      	movs	r3, #255	@ 0xff
 8004658:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <bmi2_map_feat_int>:

/*!
 * @brief This API maps/unmaps feature interrupts to that of interrupt pins.
 */
int8_t bmi2_map_feat_int(uint8_t type, enum bmi2_hw_int_pin hw_int_pin, struct bmi2_dev *dev)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	4603      	mov	r3, r0
 800466e:	603a      	str	r2, [r7, #0]
 8004670:	71fb      	strb	r3, [r7, #7]
 8004672:	460b      	mov	r3, r1
 8004674:	71bb      	strb	r3, [r7, #6]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define the value of feature interrupts */
    uint8_t feat_int = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	73bb      	strb	r3, [r7, #14]

    /* Array to store the interrupt mask bits */
    uint8_t data_array[2] = { 0 };
 800467a:	2300      	movs	r3, #0
 800467c:	81bb      	strh	r3, [r7, #12]

    /* Structure to define map the interrupts */
    struct bmi2_map_int map_int = { 0 };
 800467e:	2300      	movs	r3, #0
 8004680:	813b      	strh	r3, [r7, #8]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004682:	6838      	ldr	r0, [r7, #0]
 8004684:	f001 fab4 	bl	8005bf0 <null_ptr_check>
 8004688:	4603      	mov	r3, r0
 800468a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800468c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d13a      	bne.n	800470a <bmi2_map_feat_int+0xa4>
    {
        /* Read interrupt map1 and map2 and register */
        rslt = bmi2_get_regs(BMI2_INT1_MAP_FEAT_ADDR, data_array, 2, dev);
 8004694:	f107 010c 	add.w	r1, r7, #12
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2202      	movs	r2, #2
 800469c:	2056      	movs	r0, #86	@ 0x56
 800469e:	f7ff fa4f 	bl	8003b40 <bmi2_get_regs>
 80046a2:	4603      	mov	r3, r0
 80046a4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI2_OK)
 80046a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d12f      	bne.n	800470e <bmi2_map_feat_int+0xa8>
        {
            /* Get the value of the feature interrupt to be mapped */
            extract_feat_int_map(&map_int, type, dev);
 80046ae:	79f9      	ldrb	r1, [r7, #7]
 80046b0:	f107 0308 	add.w	r3, r7, #8
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 fab9 	bl	8005c2e <extract_feat_int_map>

            feat_int = map_int.sens_map_int;
 80046bc:	7a7b      	ldrb	r3, [r7, #9]
 80046be:	73bb      	strb	r3, [r7, #14]

            /* Map the interrupts */
            rslt = map_feat_int(data_array, hw_int_pin, feat_int);
 80046c0:	7bba      	ldrb	r2, [r7, #14]
 80046c2:	79b9      	ldrb	r1, [r7, #6]
 80046c4:	f107 030c 	add.w	r3, r7, #12
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 ff97 	bl	80055fc <map_feat_int>
 80046ce:	4603      	mov	r3, r0
 80046d0:	73fb      	strb	r3, [r7, #15]

            /* Map the interrupts to INT1 and INT2 map register */
            if (rslt == BMI2_OK)
 80046d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d119      	bne.n	800470e <bmi2_map_feat_int+0xa8>
            {
                rslt = bmi2_set_regs(BMI2_INT1_MAP_FEAT_ADDR, &data_array[0], 1, dev);
 80046da:	f107 010c 	add.w	r1, r7, #12
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2201      	movs	r2, #1
 80046e2:	2056      	movs	r0, #86	@ 0x56
 80046e4:	f7ff fa9f 	bl	8003c26 <bmi2_set_regs>
 80046e8:	4603      	mov	r3, r0
 80046ea:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI2_OK)
 80046ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10c      	bne.n	800470e <bmi2_map_feat_int+0xa8>
                {
                    rslt = bmi2_set_regs(BMI2_INT2_MAP_FEAT_ADDR, &data_array[1], 1, dev);
 80046f4:	f107 030c 	add.w	r3, r7, #12
 80046f8:	1c59      	adds	r1, r3, #1
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2201      	movs	r2, #1
 80046fe:	2057      	movs	r0, #87	@ 0x57
 8004700:	f7ff fa91 	bl	8003c26 <bmi2_set_regs>
 8004704:	4603      	mov	r3, r0
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	e001      	b.n	800470e <bmi2_map_feat_int+0xa8>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800470a:	23ff      	movs	r3, #255	@ 0xff
 800470c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800470e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <bmi2_get_gyro_cross_sense>:
/*!
 * @brief This API updates the cross sensitivity coefficient between gyroscope's
 * X and Z axes.
 */
int8_t bmi2_get_gyro_cross_sense(struct bmi2_dev *dev)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b088      	sub	sp, #32
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	77fb      	strb	r3, [r7, #31]
    struct bmi2_feat_sensor_data data;

    /* Check if the feature is supported by this variant */
    if (dev->variant_feature & BMI2_GYRO_CROSS_SENS_ENABLE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <bmi2_get_gyro_cross_sense+0x5c>
    {
        rslt = null_ptr_check(dev);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f001 fa5b 	bl	8005bf0 <null_ptr_check>
 800473a:	4603      	mov	r3, r0
 800473c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800473e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d114      	bne.n	8004770 <bmi2_get_gyro_cross_sense+0x56>
        {
            /* Select the feature whose data is to be acquired */
            data.type = BMI2_GYRO_CROSS_SENSE;
 8004746:	2329      	movs	r3, #41	@ 0x29
 8004748:	733b      	strb	r3, [r7, #12]

            /* Get the respective data */
            rslt = bmi2_get_feature_data(&data, 1, dev);
 800474a:	f107 030c 	add.w	r3, r7, #12
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	2101      	movs	r1, #1
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fe4c 	bl	80043f0 <bmi2_get_feature_data>
 8004758:	4603      	mov	r3, r0
 800475a:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 800475c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <bmi2_get_gyro_cross_sense+0x60>
            {
                /* Update the gyroscope cross sense value of z axis
                 * in the device structure
                 */
                dev->gyr_cross_sens_zx = data.sens_data.correction_factor_zx;
 8004764:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 800476e:	e004      	b.n	800477a <bmi2_get_gyro_cross_sense+0x60>
            }
        }
        else
        {
            rslt = BMI2_E_NULL_PTR;
 8004770:	23ff      	movs	r3, #255	@ 0xff
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e001      	b.n	800477a <bmi2_get_gyro_cross_sense+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8004776:	23f8      	movs	r3, #248	@ 0xf8
 8004778:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800477a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3720      	adds	r7, #32
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <bmi2_get_internal_status>:

/*!
 * @brief This API gets Error bits and message indicating internal status.
 */
int8_t bmi2_get_internal_status(uint8_t *int_stat, struct bmi2_dev *dev)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004790:	6838      	ldr	r0, [r7, #0]
 8004792:	f001 fa2d 	bl	8005bf0 <null_ptr_check>
 8004796:	4603      	mov	r3, r0
 8004798:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (int_stat != NULL))
 800479a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d113      	bne.n	80047ca <bmi2_get_internal_status+0x44>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <bmi2_get_internal_status+0x44>
    {
        /* Wait till ASIC is initialized */
        dev->delay_us(BMI2_INTERNAL_STATUS_READ_DELAY_MS, dev->intf_ptr);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	6852      	ldr	r2, [r2, #4]
 80047b0:	4611      	mov	r1, r2
 80047b2:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80047b6:	4798      	blx	r3

        /* Get the error bits and message */
        rslt = bmi2_get_regs(BMI2_INTERNAL_STATUS_ADDR, int_stat, 1, dev);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2201      	movs	r2, #1
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	2021      	movs	r0, #33	@ 0x21
 80047c0:	f7ff f9be 	bl	8003b40 <bmi2_get_regs>
 80047c4:	4603      	mov	r3, r0
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e001      	b.n	80047ce <bmi2_get_internal_status+0x48>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80047ca:	23ff      	movs	r3, #255	@ 0xff
 80047cc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80047ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <bmi2_get_feat_config>:
/*!
 * @brief This API is used to get the feature configuration from the
 * selected page.
 */
int8_t bmi2_get_feat_config(uint8_t sw_page, uint8_t *feat_config, struct bmi2_dev *dev)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b086      	sub	sp, #24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	4603      	mov	r3, r0
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	73fb      	strb	r3, [r7, #15]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define bytes remaining to read */
    uint8_t bytes_remain = BMI2_FEAT_SIZE_IN_BYTES;
 80047e8:	2310      	movs	r3, #16
 80047ea:	75bb      	strb	r3, [r7, #22]

    /* Variable to define the read-write length */
    uint8_t read_write_len = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	757b      	strb	r3, [r7, #21]

    /* Variable to define the feature configuration address */
    uint8_t addr = BMI2_FEATURES_REG_ADDR;
 80047f0:	2330      	movs	r3, #48	@ 0x30
 80047f2:	753b      	strb	r3, [r7, #20]

    /* Variable to define index */
    uint8_t index = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	74fb      	strb	r3, [r7, #19]

    if ((feat_config == NULL) || (dev == NULL))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <bmi2_get_feat_config+0x2a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d102      	bne.n	800480a <bmi2_get_feat_config+0x30>
    {
        rslt = BMI2_E_NULL_PTR;
 8004804:	23ff      	movs	r3, #255	@ 0xff
 8004806:	75fb      	strb	r3, [r7, #23]
 8004808:	e073      	b.n	80048f2 <bmi2_get_feat_config+0x118>
    }
    else
    {
        /* Check whether the page is valid */
        if (sw_page < dev->page_max)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	7e1a      	ldrb	r2, [r3, #24]
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	429a      	cmp	r2, r3
 8004812:	d96c      	bls.n	80048ee <bmi2_get_feat_config+0x114>
        {
            /* Switch page */
            rslt = bmi2_set_regs(BMI2_FEAT_PAGE_ADDR, &sw_page, 1, dev);
 8004814:	f107 010f 	add.w	r1, r7, #15
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	202f      	movs	r0, #47	@ 0x2f
 800481e:	f7ff fa02 	bl	8003c26 <bmi2_set_regs>
 8004822:	4603      	mov	r3, r0
 8004824:	75fb      	strb	r3, [r7, #23]

            /* If user length is less than feature length */
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8004826:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d152      	bne.n	80048d4 <bmi2_get_feat_config+0xfa>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	89db      	ldrh	r3, [r3, #14]
 8004832:	2b0f      	cmp	r3, #15
 8004834:	d84e      	bhi.n	80048d4 <bmi2_get_feat_config+0xfa>
            {
                /* Read-write should be even */
                if ((dev->read_write_len % 2) != 0)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	89db      	ldrh	r3, [r3, #14]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d041      	beq.n	80048c8 <bmi2_get_feat_config+0xee>
                {
                    dev->read_write_len--;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	89db      	ldrh	r3, [r3, #14]
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	81da      	strh	r2, [r3, #14]
                }

                while (bytes_remain > 0)
 8004850:	e03a      	b.n	80048c8 <bmi2_get_feat_config+0xee>
                {
                    if (bytes_remain >= dev->read_write_len)
 8004852:	7dbb      	ldrb	r3, [r7, #22]
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	89db      	ldrh	r3, [r3, #14]
 800485a:	429a      	cmp	r2, r3
 800485c:	d31d      	bcc.n	800489a <bmi2_get_feat_config+0xc0>
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, &feat_config[index], dev->read_write_len, dev);
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	18d1      	adds	r1, r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	89da      	ldrh	r2, [r3, #14]
 8004868:	7d38      	ldrb	r0, [r7, #20]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f7ff f968 	bl	8003b40 <bmi2_get_regs>
 8004870:	4603      	mov	r3, r0
 8004872:	75fb      	strb	r3, [r7, #23]

                        /* Update index */
                        index += (uint8_t) dev->read_write_len;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	89db      	ldrh	r3, [r3, #14]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	4413      	add	r3, r2
 800487e:	74fb      	strb	r3, [r7, #19]

                        /* Update address */
                        addr += (uint8_t) dev->read_write_len;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	89db      	ldrh	r3, [r3, #14]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	7d3b      	ldrb	r3, [r7, #20]
 8004888:	4413      	add	r3, r2
 800488a:	753b      	strb	r3, [r7, #20]

                        /* Update read-write length */
                        read_write_len += (uint8_t) dev->read_write_len;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	89db      	ldrh	r3, [r3, #14]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	7d7b      	ldrb	r3, [r7, #21]
 8004894:	4413      	add	r3, r2
 8004896:	757b      	strb	r3, [r7, #21]
 8004898:	e00e      	b.n	80048b8 <bmi2_get_feat_config+0xde>
                    }
                    else
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, (uint8_t *) (feat_config + index), (uint16_t) bytes_remain, dev);
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	18d1      	adds	r1, r2, r3
 80048a0:	7dbb      	ldrb	r3, [r7, #22]
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	7d38      	ldrb	r0, [r7, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f7ff f94a 	bl	8003b40 <bmi2_get_regs>
 80048ac:	4603      	mov	r3, r0
 80048ae:	75fb      	strb	r3, [r7, #23]

                        /* Update read-write length */
                        read_write_len += bytes_remain;
 80048b0:	7d7a      	ldrb	r2, [r7, #21]
 80048b2:	7dbb      	ldrb	r3, [r7, #22]
 80048b4:	4413      	add	r3, r2
 80048b6:	757b      	strb	r3, [r7, #21]
                    }

                    /* Remaining bytes */
                    bytes_remain = BMI2_FEAT_SIZE_IN_BYTES - read_write_len;
 80048b8:	7d7b      	ldrb	r3, [r7, #21]
 80048ba:	f1c3 0310 	rsb	r3, r3, #16
 80048be:	75bb      	strb	r3, [r7, #22]

                    if (rslt != BMI2_OK)
 80048c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d103      	bne.n	80048d0 <bmi2_get_feat_config+0xf6>
                while (bytes_remain > 0)
 80048c8:	7dbb      	ldrb	r3, [r7, #22]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1c1      	bne.n	8004852 <bmi2_get_feat_config+0x78>
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 80048ce:	e010      	b.n	80048f2 <bmi2_get_feat_config+0x118>
                    {
                        break;
 80048d0:	bf00      	nop
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 80048d2:	e00e      	b.n	80048f2 <bmi2_get_feat_config+0x118>
                    }
                }
            }
            else if (rslt == BMI2_OK)
 80048d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <bmi2_get_feat_config+0x118>
            {
                /* Get configuration from the page */
                rslt = bmi2_get_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2210      	movs	r2, #16
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	2030      	movs	r0, #48	@ 0x30
 80048e4:	f7ff f92c 	bl	8003b40 <bmi2_get_regs>
 80048e8:	4603      	mov	r3, r0
 80048ea:	75fb      	strb	r3, [r7, #23]
 80048ec:	e001      	b.n	80048f2 <bmi2_get_feat_config+0x118>
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_PAGE;
 80048ee:	23f6      	movs	r3, #246	@ 0xf6
 80048f0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80048f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <bmi2_extract_input_feat_config>:
 * @brief This API is used to extract the input feature configuration
 * details from the look-up table.
 */
uint8_t bmi2_extract_input_feat_config(struct bmi2_feature_config *feat_config, uint8_t type,
                                       const struct bmi2_dev *dev)
{
 80048fe:	b480      	push	{r7}
 8004900:	b087      	sub	sp, #28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	460b      	mov	r3, r1
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8004910:	2300      	movs	r3, #0
 8004912:	75bb      	strb	r3, [r7, #22]

    /* Search for the input feature from the input configuration array */
    while (loop < dev->input_sens)
 8004914:	e01c      	b.n	8004950 <bmi2_extract_input_feat_config+0x52>
    {
        if (dev->feat_config[loop].type == type)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a19      	ldr	r1, [r3, #32]
 800491a:	7dfa      	ldrb	r2, [r7, #23]
 800491c:	4613      	mov	r3, r2
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	4413      	add	r3, r2
 8004922:	440b      	add	r3, r1
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	7afa      	ldrb	r2, [r7, #11]
 8004928:	429a      	cmp	r2, r3
 800492a:	d10e      	bne.n	800494a <bmi2_extract_input_feat_config+0x4c>
        {
            *feat_config = dev->feat_config[loop];
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a19      	ldr	r1, [r3, #32]
 8004930:	7dfa      	ldrb	r2, [r7, #23]
 8004932:	4613      	mov	r3, r2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4413      	add	r3, r2
 8004938:	18ca      	adds	r2, r1, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8811      	ldrh	r1, [r2, #0]
 800493e:	7892      	ldrb	r2, [r2, #2]
 8004940:	8019      	strh	r1, [r3, #0]
 8004942:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8004944:	2301      	movs	r3, #1
 8004946:	75bb      	strb	r3, [r7, #22]
            break;
 8004948:	e007      	b.n	800495a <bmi2_extract_input_feat_config+0x5c>
        }

        loop++;
 800494a:	7dfb      	ldrb	r3, [r7, #23]
 800494c:	3301      	adds	r3, #1
 800494e:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->input_sens)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7e5b      	ldrb	r3, [r3, #25]
 8004954:	7dfa      	ldrb	r2, [r7, #23]
 8004956:	429a      	cmp	r2, r3
 8004958:	d3dd      	bcc.n	8004916 <bmi2_extract_input_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 800495a:	7dbb      	ldrb	r3, [r7, #22]
}
 800495c:	4618      	mov	r0, r3
 800495e:	371c      	adds	r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <write_config_file>:

/*!
 * @brief This internal API writes the configuration file.
 */
static int8_t write_config_file(struct bmi2_dev *dev)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to update the configuration file index */
    uint16_t index = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	82bb      	strh	r3, [r7, #20]

    /* config file size */
    uint16_t config_size = dev->config_size;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800497a:	827b      	strh	r3, [r7, #18]

    /* Variable to get the remainder */
    uint8_t remain = (uint8_t)(config_size % dev->read_write_len);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	89da      	ldrh	r2, [r3, #14]
 8004980:	8a7b      	ldrh	r3, [r7, #18]
 8004982:	fbb3 f1f2 	udiv	r1, r3, r2
 8004986:	fb01 f202 	mul.w	r2, r1, r2
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	b29b      	uxth	r3, r3
 800498e:	747b      	strb	r3, [r7, #17]

    /* Variable to get the balance bytes */
    uint16_t bal_byte = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	81fb      	strh	r3, [r7, #14]

    /* Variable to define temporary read/write length */
    uint16_t read_write_len = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	81bb      	strh	r3, [r7, #12]

    /* Disable advanced power save mode */
    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	2000      	movs	r0, #0
 800499c:	f7ff fa17 	bl	8003dce <bmi2_set_adv_power_save>
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 80049a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f040 8088 	bne.w	8004abe <write_config_file+0x156>
    {
        /* Disable loading of the configuration */
        rslt = set_config_load(BMI2_DISABLE, dev);
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	2000      	movs	r0, #0
 80049b2:	f000 f88a 	bl	8004aca <set_config_load>
 80049b6:	4603      	mov	r3, r0
 80049b8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 80049ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d17d      	bne.n	8004abe <write_config_file+0x156>
        {
            if (!remain)
 80049c2:	7c7b      	ldrb	r3, [r7, #17]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d11c      	bne.n	8004a02 <write_config_file+0x9a>
            {
                /* Write the configuration file */
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 80049c8:	2300      	movs	r3, #0
 80049ca:	82bb      	strh	r3, [r7, #20]
 80049cc:	e010      	b.n	80049f0 <write_config_file+0x88>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	8abb      	ldrh	r3, [r7, #20]
 80049d4:	18d0      	adds	r0, r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	89da      	ldrh	r2, [r3, #14]
 80049da:	8ab9      	ldrh	r1, [r7, #20]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f000 f8a6 	bl	8004b2e <upload_file>
 80049e2:	4603      	mov	r3, r0
 80049e4:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	89da      	ldrh	r2, [r3, #14]
 80049ea:	8abb      	ldrh	r3, [r7, #20]
 80049ec:	4413      	add	r3, r2
 80049ee:	82bb      	strh	r3, [r7, #20]
 80049f0:	8aba      	ldrh	r2, [r7, #20]
 80049f2:	8a7b      	ldrh	r3, [r7, #18]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d24e      	bcs.n	8004a96 <write_config_file+0x12e>
 80049f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0e6      	beq.n	80049ce <write_config_file+0x66>
 8004a00:	e049      	b.n	8004a96 <write_config_file+0x12e>
                }
            }
            else
            {
                /* Get the balance bytes */
                bal_byte = (uint16_t) config_size - (uint16_t) remain;
 8004a02:	7c7b      	ldrb	r3, [r7, #17]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	8a7a      	ldrh	r2, [r7, #18]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	81fb      	strh	r3, [r7, #14]

                /* Write the configuration file for the balancem bytes */
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	82bb      	strh	r3, [r7, #20]
 8004a10:	e010      	b.n	8004a34 <write_config_file+0xcc>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	8abb      	ldrh	r3, [r7, #20]
 8004a18:	18d0      	adds	r0, r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	89da      	ldrh	r2, [r3, #14]
 8004a1e:	8ab9      	ldrh	r1, [r7, #20]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f000 f884 	bl	8004b2e <upload_file>
 8004a26:	4603      	mov	r3, r0
 8004a28:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	89da      	ldrh	r2, [r3, #14]
 8004a2e:	8abb      	ldrh	r3, [r7, #20]
 8004a30:	4413      	add	r3, r2
 8004a32:	82bb      	strh	r3, [r7, #20]
 8004a34:	8aba      	ldrh	r2, [r7, #20]
 8004a36:	89fb      	ldrh	r3, [r7, #14]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d203      	bcs.n	8004a44 <write_config_file+0xdc>
 8004a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0e6      	beq.n	8004a12 <write_config_file+0xaa>
                }

                if (rslt == BMI2_OK)
 8004a44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d124      	bne.n	8004a96 <write_config_file+0x12e>
                {
                    /* Update length in a temporary variable */
                    read_write_len = dev->read_write_len;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	89db      	ldrh	r3, [r3, #14]
 8004a50:	81bb      	strh	r3, [r7, #12]

                    /* Write the remaining bytes in 2 bytes length */
                    dev->read_write_len = 2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	81da      	strh	r2, [r3, #14]

                    /* Write the configuration file for the remaining bytes */
                    for (index = bal_byte;
 8004a58:	89fb      	ldrh	r3, [r7, #14]
 8004a5a:	82bb      	strh	r3, [r7, #20]
 8004a5c:	e010      	b.n	8004a80 <write_config_file+0x118>
                         (index < config_size) && (rslt == BMI2_OK);
                         index += dev->read_write_len)
                    {
                        rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	8abb      	ldrh	r3, [r7, #20]
 8004a64:	18d0      	adds	r0, r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	89da      	ldrh	r2, [r3, #14]
 8004a6a:	8ab9      	ldrh	r1, [r7, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f000 f85e 	bl	8004b2e <upload_file>
 8004a72:	4603      	mov	r3, r0
 8004a74:	75fb      	strb	r3, [r7, #23]
                         index += dev->read_write_len)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	89da      	ldrh	r2, [r3, #14]
 8004a7a:	8abb      	ldrh	r3, [r7, #20]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	82bb      	strh	r3, [r7, #20]
                         (index < config_size) && (rslt == BMI2_OK);
 8004a80:	8aba      	ldrh	r2, [r7, #20]
 8004a82:	8a7b      	ldrh	r3, [r7, #18]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d203      	bcs.n	8004a90 <write_config_file+0x128>
 8004a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0e6      	beq.n	8004a5e <write_config_file+0xf6>
                    }

                    /* Restore the user set length back from the temporary variable */
                    dev->read_write_len = read_write_len;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	89ba      	ldrh	r2, [r7, #12]
 8004a94:	81da      	strh	r2, [r3, #14]
                }
            }

            if (rslt == BMI2_OK)
 8004a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10f      	bne.n	8004abe <write_config_file+0x156>
            {
                /* Enable loading of the configuration */
                rslt = set_config_load(BMI2_ENABLE, dev);
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	f000 f812 	bl	8004aca <set_config_load>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	75fb      	strb	r3, [r7, #23]

                if (rslt == BMI2_OK)
 8004aaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d105      	bne.n	8004abe <write_config_file+0x156>
                {
                    /* Enable advanced power save mode */
                    rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	f7ff f98a 	bl	8003dce <bmi2_set_adv_power_save>
 8004aba:	4603      	mov	r3, r0
 8004abc:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8004abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <set_config_load>:
/*!
 * @brief This internal API enables/disables the loading of the configuration
 * file.
 */
static int8_t set_config_load(uint8_t enable, struct bmi2_dev *dev)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	6039      	str	r1, [r7, #0]
 8004ad4:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8004ada:	f107 010e 	add.w	r1, r7, #14
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	2059      	movs	r0, #89	@ 0x59
 8004ae4:	f7ff f82c 	bl	8003b40 <bmi2_get_regs>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d116      	bne.n	8004b22 <set_config_load+0x58>
    {
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_CONF_LOAD_EN, enable);
 8004af4:	7bbb      	ldrb	r3, [r7, #14]
 8004af6:	b25b      	sxtb	r3, r3
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	b25a      	sxtb	r2, r3
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	b25b      	sxtb	r3, r3
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	b25b      	sxtb	r3, r3
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	73bb      	strb	r3, [r7, #14]
        rslt = bmi2_set_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8004b10:	f107 010e 	add.w	r1, r7, #14
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2201      	movs	r2, #1
 8004b18:	2059      	movs	r0, #89	@ 0x59
 8004b1a:	f7ff f884 	bl	8003c26 <bmi2_set_regs>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <upload_file>:

/*!
 * @brief This internal API loads the configuration file.
 */
static int8_t upload_file(const uint8_t *config_data, uint16_t index, uint16_t write_len, struct bmi2_dev *dev)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b086      	sub	sp, #24
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	607b      	str	r3, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	817b      	strh	r3, [r7, #10]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	813b      	strh	r3, [r7, #8]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store address */
    uint8_t addr_array[2] = { 0 };
 8004b40:	2300      	movs	r3, #0
 8004b42:	82bb      	strh	r3, [r7, #20]

    if (config_data != NULL)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d024      	beq.n	8004b94 <upload_file+0x66>
    {
        /* Store 0 to 3 bits of address in first byte */
        addr_array[0] = (uint8_t)((index / 2) & 0x0F);
 8004b4a:	897b      	ldrh	r3, [r7, #10]
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	753b      	strb	r3, [r7, #20]

        /* Store 4 to 11 bits of address in the second byte */
        addr_array[1] = (uint8_t)((index / 2) >> 4);
 8004b5a:	897b      	ldrh	r3, [r7, #10]
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	757b      	strb	r3, [r7, #21]

        /* Write the 2 bytes of address in consecutive locations */
        rslt = bmi2_set_regs(BMI2_INIT_ADDR_0, addr_array, 2, dev);
 8004b68:	f107 0114 	add.w	r1, r7, #20
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	205b      	movs	r0, #91	@ 0x5b
 8004b72:	f7ff f858 	bl	8003c26 <bmi2_set_regs>
 8004b76:	4603      	mov	r3, r0
 8004b78:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 8004b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <upload_file+0x6a>
        {
            /* Burst write configuration file data corresponding to user set length */
            rslt = bmi2_set_regs(BMI2_INIT_DATA_ADDR, (uint8_t *)config_data, write_len, dev);
 8004b82:	893a      	ldrh	r2, [r7, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	205e      	movs	r0, #94	@ 0x5e
 8004b8a:	f7ff f84c 	bl	8003c26 <bmi2_set_regs>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	75fb      	strb	r3, [r7, #23]
 8004b92:	e001      	b.n	8004b98 <upload_file+0x6a>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004b94:	23ff      	movs	r3, #255	@ 0xff
 8004b96:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <validate_bw_perf_mode>:
/*!
 * @brief This internal API validates bandwidth and performance mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_perf_mode(uint8_t *bandwidth, uint8_t *perf_mode, struct bmi2_dev *dev)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(perf_mode, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	68b8      	ldr	r0, [r7, #8]
 8004bb8:	f000 fee6 	bl	8005988 <check_boundary_val>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8004bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d114      	bne.n	8004bf2 <validate_bw_perf_mode+0x4e>
    {
        /* Validate and auto-correct bandwidth parameter */
        if (*perf_mode == BMI2_PERF_OPT_MODE)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d108      	bne.n	8004be2 <validate_bw_perf_mode+0x3e>
        {
            /* Validate for continuous filter mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_CIC_AVG8, dev);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 fed6 	bl	8005988 <check_boundary_val>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	75fb      	strb	r3, [r7, #23]
 8004be0:	e007      	b.n	8004bf2 <validate_bw_perf_mode+0x4e>
        }
        else
        {
            /* Validate for CIC averaging mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_RES_AVG128, dev);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2207      	movs	r2, #7
 8004be6:	2100      	movs	r1, #0
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fecd 	bl	8005988 <check_boundary_val>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <validate_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_odr_range(uint8_t *odr, uint8_t *range, struct bmi2_dev *dev)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto correct ODR */
    rslt = check_boundary_val(odr, BMI2_ACC_ODR_0_78HZ, BMI2_ACC_ODR_1600HZ, dev);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	220c      	movs	r2, #12
 8004c0e:	2101      	movs	r1, #1
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 feb9 	bl	8005988 <check_boundary_val>
 8004c16:	4603      	mov	r3, r0
 8004c18:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8004c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d107      	bne.n	8004c32 <validate_odr_range+0x34>
    {
        /* Validate and auto correct Range */
        rslt = check_boundary_val(range, BMI2_ACC_RANGE_2G, BMI2_ACC_RANGE_16G, dev);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2203      	movs	r2, #3
 8004c26:	2100      	movs	r1, #0
 8004c28:	68b8      	ldr	r0, [r7, #8]
 8004c2a:	f000 fead 	bl	8005988 <check_boundary_val>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <validate_gyro_config>:
/*!
 * @brief This internal API validates bandwidth, performance mode, low power/
 * high performance mode, ODR, and range set by the user.
 */
static int8_t validate_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(&config->filter_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	1c98      	adds	r0, r3, #2
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	2100      	movs	r1, #0
 8004c52:	f000 fe99 	bl	8005988 <check_boundary_val>
 8004c56:	4603      	mov	r3, r0
 8004c58:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d13b      	bne.n	8004cda <validate_gyro_config+0x9c>
    {
        /* Validate and auto-correct bandwidth parameter */
        rslt = check_boundary_val(&config->bwp, BMI2_GYR_OSR4_MODE, BMI2_GYR_CIC_MODE, dev);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	1c58      	adds	r0, r3, #1
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2203      	movs	r2, #3
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	f000 fe8c 	bl	8005988 <check_boundary_val>
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8004c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d12e      	bne.n	8004cda <validate_gyro_config+0x9c>
        {
            /* Validate and auto-correct low power/high-performance parameter */
            rslt = check_boundary_val(&config->noise_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1d58      	adds	r0, r3, #5
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2201      	movs	r2, #1
 8004c84:	2100      	movs	r1, #0
 8004c86:	f000 fe7f 	bl	8005988 <check_boundary_val>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8004c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d121      	bne.n	8004cda <validate_gyro_config+0x9c>
            {
                /* Validate and auto-correct ODR parameter */
                rslt = check_boundary_val(&config->odr, BMI2_GYR_ODR_25HZ, BMI2_GYR_ODR_3200HZ, dev);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	220d      	movs	r2, #13
 8004c9c:	2106      	movs	r1, #6
 8004c9e:	f000 fe73 	bl	8005988 <check_boundary_val>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI2_OK)
 8004ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d115      	bne.n	8004cda <validate_gyro_config+0x9c>
                {
                    /* Validate and auto-correct OIS range */
                    rslt = check_boundary_val(&config->ois_range, BMI2_GYR_OIS_250, BMI2_GYR_OIS_2000, dev);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	1cd8      	adds	r0, r3, #3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	f000 fe66 	bl	8005988 <check_boundary_val>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI2_OK)
 8004cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d108      	bne.n	8004cda <validate_gyro_config+0x9c>
                    {
                        /* Validate and auto-correct range parameter */
                        rslt = check_boundary_val(&config->range, BMI2_GYR_RANGE_2000, BMI2_GYR_RANGE_125, dev);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	1d18      	adds	r0, r3, #4
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	f000 fe59 	bl	8005988 <check_boundary_val>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <cfg_error_status>:
/*!
 * @brief This internal API shows the error status when illegal sensor
 * configuration is set.
 */
static int8_t cfg_error_status(struct bmi2_dev *dev)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get error status of the set sensor configuration */
    rslt = bmi2_get_regs(BMI2_EVENT_ADDR, &reg_data, 1, dev);
 8004cf0:	f107 010e 	add.w	r1, r7, #14
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	201b      	movs	r0, #27
 8004cfa:	f7fe ff21 	bl	8003b40 <bmi2_get_regs>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d121      	bne.n	8004d4e <cfg_error_status+0x66>
    {
        reg_data = BMI2_GET_BITS(reg_data, BMI2_EVENT_FLAG);
 8004d0a:	7bbb      	ldrb	r3, [r7, #14]
 8004d0c:	109b      	asrs	r3, r3, #2
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	73bb      	strb	r3, [r7, #14]
        switch (reg_data)
 8004d18:	7bbb      	ldrb	r3, [r7, #14]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d816      	bhi.n	8004d4c <cfg_error_status+0x64>
 8004d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d24 <cfg_error_status+0x3c>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d35 	.word	0x08004d35
 8004d28:	08004d3b 	.word	0x08004d3b
 8004d2c:	08004d41 	.word	0x08004d41
 8004d30:	08004d47 	.word	0x08004d47
        {
            case BMI2_NO_ERROR:
                rslt = BMI2_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]
                break;
 8004d38:	e009      	b.n	8004d4e <cfg_error_status+0x66>
            case BMI2_ACC_ERROR:
                rslt = BMI2_E_ACC_INVALID_CFG;
 8004d3a:	23fb      	movs	r3, #251	@ 0xfb
 8004d3c:	73fb      	strb	r3, [r7, #15]
                break;
 8004d3e:	e006      	b.n	8004d4e <cfg_error_status+0x66>
            case BMI2_GYR_ERROR:
                rslt = BMI2_E_GYRO_INVALID_CFG;
 8004d40:	23fa      	movs	r3, #250	@ 0xfa
 8004d42:	73fb      	strb	r3, [r7, #15]
                break;
 8004d44:	e003      	b.n	8004d4e <cfg_error_status+0x66>
            case BMI2_ACC_GYR_ERROR:
                rslt = BMI2_E_ACC_GYR_INVALID_CFG;
 8004d46:	23f9      	movs	r3, #249	@ 0xf9
 8004d48:	73fb      	strb	r3, [r7, #15]
                break;
 8004d4a:	e000      	b.n	8004d4e <cfg_error_status+0x66>
            default:
                break;
 8004d4c:	bf00      	nop
        }
    }

    return rslt;
 8004d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop

08004d5c <set_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3)It maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate auxiliary configurations */
    rslt = validate_aux_config(config, dev);
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fa3f 	bl	80051ec <validate_aux_config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d119      	bne.n	8004dae <set_aux_config+0x52>
    {
        /* Enable/Disable auxiliary interface */
        rslt = set_aux_interface(config, dev);
 8004d7a:	6839      	ldr	r1, [r7, #0]
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f8f7 	bl	8004f70 <set_aux_interface>
 8004d82:	4603      	mov	r3, r0
 8004d84:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8004d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10f      	bne.n	8004dae <set_aux_config+0x52>
        {
            /* Set the auxiliary interface configurations */
            rslt = config_aux_interface(config, dev);
 8004d8e:	6839      	ldr	r1, [r7, #0]
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f91f 	bl	8004fd4 <config_aux_interface>
 8004d96:	4603      	mov	r3, r0
 8004d98:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8004d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d105      	bne.n	8004dae <set_aux_config+0x52>
            {
                /* Set read out offset and ODR */
                rslt = config_aux(config, dev);
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f9db 	bl	8005160 <config_aux>
 8004daa:	4603      	mov	r3, r0
 8004dac:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <set_gyro_user_gain_config>:
/*!
 * @brief This internal API sets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t set_gyro_user_gain_config(const struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b08a      	sub	sp, #40	@ 0x28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8004dc4:	f107 030c 	add.w	r3, r7, #12
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 8004dde:	2300      	movs	r3, #0
 8004de0:	723b      	strb	r3, [r7, #8]
 8004de2:	2300      	movs	r3, #0
 8004de4:	727b      	strb	r3, [r7, #9]
 8004de6:	2300      	movs	r3, #0
 8004de8:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8004dea:	f107 030c 	add.w	r3, r7, #12
 8004dee:	623b      	str	r3, [r7, #32]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 8004df0:	f107 0308 	add.w	r3, r7, #8
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	2109      	movs	r1, #9
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff fd80 	bl	80048fe <bmi2_extract_input_feat_config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8004e02:	7ffb      	ldrb	r3, [r7, #31]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80aa 	beq.w	8004f5e <set_gyro_user_gain_config+0x1a4>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 8004e0a:	7a7b      	ldrb	r3, [r7, #9]
 8004e0c:	f107 010c 	add.w	r1, r7, #12
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fce1 	bl	80047da <bmi2_get_feat_config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8004e1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f040 809e 	bne.w	8004f64 <set_gyro_user_gain_config+0x1aa>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 8004e28:	7abb      	ldrb	r3, [r7, #10]
 8004e2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8004e2e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_x */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_X, config->ratio_x);
 8004e38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	6a3a      	ldr	r2, [r7, #32]
 8004e40:	4413      	add	r3, r2
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b21b      	sxth	r3, r3
 8004e46:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004e4a:	f023 0307 	bic.w	r3, r3, #7
 8004e4e:	b21a      	sxth	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b21b      	sxth	r3, r3
 8004e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e5a:	b21b      	sxth	r3, r3
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	b219      	sxth	r1, r3
 8004e60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	6a3a      	ldr	r2, [r7, #32]
 8004e68:	4413      	add	r3, r2
 8004e6a:	b28a      	uxth	r2, r1
 8004e6c:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_y */
            idx++;
 8004e6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e72:	3301      	adds	r3, #1
 8004e74:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_y */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Y, config->ratio_y);
 8004e78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	6a3a      	ldr	r2, [r7, #32]
 8004e80:	4413      	add	r3, r2
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b21b      	sxth	r3, r3
 8004e86:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004e8a:	f023 0307 	bic.w	r3, r3, #7
 8004e8e:	b21a      	sxth	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	885b      	ldrh	r3, [r3, #2]
 8004e94:	b21b      	sxth	r3, r3
 8004e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e9a:	b21b      	sxth	r3, r3
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	b219      	sxth	r1, r3
 8004ea0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	6a3a      	ldr	r2, [r7, #32]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	b28a      	uxth	r2, r1
 8004eac:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_z */
            idx++;
 8004eae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_z */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Z, config->ratio_z);
 8004eb8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	6a3a      	ldr	r2, [r7, #32]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b21b      	sxth	r3, r3
 8004ec6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004eca:	f023 0307 	bic.w	r3, r3, #7
 8004ece:	b21a      	sxth	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	889b      	ldrh	r3, [r3, #4]
 8004ed4:	b21b      	sxth	r3, r3
 8004ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eda:	b21b      	sxth	r3, r3
 8004edc:	4313      	orrs	r3, r2
 8004ede:	b219      	sxth	r1, r3
 8004ee0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	4413      	add	r3, r2
 8004eea:	b28a      	uxth	r2, r1
 8004eec:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8004eee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - user_gain_config.start_addr;
 8004ef8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	7abb      	ldrb	r3, [r7, #10]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004f0e:	e015      	b.n	8004f3c <set_gyro_user_gain_config+0x182>
            {
                feat_config[user_gain_config.start_addr +
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8004f10:	7abb      	ldrb	r3, [r7, #10]
 8004f12:	461a      	mov	r2, r3
 8004f14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f18:	4413      	add	r3, r2
 8004f1a:	6a3a      	ldr	r2, [r7, #32]
 8004f1c:	441a      	add	r2, r3
                feat_config[user_gain_config.start_addr +
 8004f1e:	7abb      	ldrb	r3, [r7, #10]
 8004f20:	4619      	mov	r1, r3
 8004f22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f26:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8004f28:	7812      	ldrb	r2, [r2, #0]
 8004f2a:	3328      	adds	r3, #40	@ 0x28
 8004f2c:	443b      	add	r3, r7
 8004f2e:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8004f32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f36:	3301      	adds	r3, #1
 8004f38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004f3c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004f40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d3e3      	bcc.n	8004f10 <set_gyro_user_gain_config+0x156>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8004f48:	f107 010c 	add.w	r1, r7, #12
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2210      	movs	r2, #16
 8004f50:	2030      	movs	r0, #48	@ 0x30
 8004f52:	f7fe fe68 	bl	8003c26 <bmi2_set_regs>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004f5c:	e002      	b.n	8004f64 <set_gyro_user_gain_config+0x1aa>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8004f5e:	23f8      	movs	r3, #248	@ 0xf8
 8004f60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8004f64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3728      	adds	r7, #40	@ 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <set_aux_interface>:

/*!
 * @brief This internal API enables/disables auxiliary interface.
 */
static int8_t set_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 8004f7a:	f107 010e 	add.w	r1, r7, #14
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2201      	movs	r2, #1
 8004f82:	206b      	movs	r0, #107	@ 0x6b
 8004f84:	f7fe fddc 	bl	8003b40 <bmi2_get_regs>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d119      	bne.n	8004fc8 <set_aux_interface+0x58>
    {
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_IF_EN, config->aux_en);
 8004f94:	7bbb      	ldrb	r3, [r7, #14]
 8004f96:	b25b      	sxtb	r3, r3
 8004f98:	f023 0320 	bic.w	r3, r3, #32
 8004f9c:	b25a      	sxtb	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	b25b      	sxtb	r3, r3
 8004fa4:	015b      	lsls	r3, r3, #5
 8004fa6:	b25b      	sxtb	r3, r3
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	b25b      	sxtb	r3, r3
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	73bb      	strb	r3, [r7, #14]

        /* Enable/Disable auxiliary interface */
        rslt = bmi2_set_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 8004fb6:	f107 010e 	add.w	r1, r7, #14
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	206b      	movs	r0, #107	@ 0x6b
 8004fc0:	f7fe fe31 	bl	8003c26 <bmi2_set_regs>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <config_aux_interface>:
 *
 * @note Auxiliary sensor should not be busy when configuring aux_i2c_addr,
 * man_rd_burst_len, aux_rd_burst_len and aux_rd_addr.
 */
static int8_t config_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8004fde:	2300      	movs	r3, #0
 8004fe0:	81bb      	strh	r3, [r7, #12]

    /* Variable to store status */
    uint8_t status = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	72fb      	strb	r3, [r7, #11]

    /* Variable to define count */
    uint8_t count = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 8004fea:	f107 010c 	add.w	r1, r7, #12
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	204b      	movs	r0, #75	@ 0x4b
 8004ff4:	f7fe fda4 	bl	8003b40 <bmi2_get_regs>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005000:	2b00      	cmp	r3, #0
 8005002:	f040 80a7 	bne.w	8005154 <config_aux_interface+0x180>
    {
        /* Set I2C address for AUX sensor */
        reg_data[0] = BMI2_SET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR, config->i2c_device_addr);
 8005006:	7b3b      	ldrb	r3, [r7, #12]
 8005008:	b25b      	sxtb	r3, r3
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	b25a      	sxtb	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	79db      	ldrb	r3, [r3, #7]
 8005014:	b25b      	sxtb	r3, r3
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	b25b      	sxtb	r3, r3
 800501a:	4313      	orrs	r3, r2
 800501c:	b25b      	sxtb	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	733b      	strb	r3, [r7, #12]

        /* Set the AUX IF to either manual or auto mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN, config->manual_en);
 8005022:	7b7b      	ldrb	r3, [r7, #13]
 8005024:	b25b      	sxtb	r3, r3
 8005026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800502a:	b25a      	sxtb	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	b25b      	sxtb	r3, r3
 8005032:	01db      	lsls	r3, r3, #7
 8005034:	b25b      	sxtb	r3, r3
 8005036:	4313      	orrs	r3, r2
 8005038:	b25b      	sxtb	r3, r3
 800503a:	b2db      	uxtb	r3, r3
 800503c:	737b      	strb	r3, [r7, #13]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN, config->fcu_write_en);
 800503e:	7b7b      	ldrb	r3, [r7, #13]
 8005040:	b25b      	sxtb	r3, r3
 8005042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005046:	b25a      	sxtb	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	789b      	ldrb	r3, [r3, #2]
 800504c:	b25b      	sxtb	r3, r3
 800504e:	019b      	lsls	r3, r3, #6
 8005050:	b25b      	sxtb	r3, r3
 8005052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005056:	b25b      	sxtb	r3, r3
 8005058:	4313      	orrs	r3, r2
 800505a:	b25b      	sxtb	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for manual mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST, config->man_rd_burst);
 8005060:	7b7b      	ldrb	r3, [r7, #13]
 8005062:	b25b      	sxtb	r3, r3
 8005064:	f023 030c 	bic.w	r3, r3, #12
 8005068:	b25a      	sxtb	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	78db      	ldrb	r3, [r3, #3]
 800506e:	b25b      	sxtb	r3, r3
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	b25b      	sxtb	r3, r3
 8005074:	f003 030c 	and.w	r3, r3, #12
 8005078:	b25b      	sxtb	r3, r3
 800507a:	4313      	orrs	r3, r2
 800507c:	b25b      	sxtb	r3, r3
 800507e:	b2db      	uxtb	r3, r3
 8005080:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for data mode */
        reg_data[1] = BMI2_SET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST, config->aux_rd_burst);
 8005082:	7b7b      	ldrb	r3, [r7, #13]
 8005084:	b25b      	sxtb	r3, r3
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	b25a      	sxtb	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	791b      	ldrb	r3, [r3, #4]
 8005090:	b25b      	sxtb	r3, r3
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	b25b      	sxtb	r3, r3
 8005098:	4313      	orrs	r3, r2
 800509a:	b25b      	sxtb	r3, r3
 800509c:	b2db      	uxtb	r3, r3
 800509e:	737b      	strb	r3, [r7, #13]
        for (;;)
        {
            /* Check if auxiliary sensor is busy */
            rslt = bmi2_get_status(&status, dev);
 80050a0:	f107 030b 	add.w	r3, r7, #11
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fabb 	bl	8004622 <bmi2_get_status>
 80050ac:	4603      	mov	r3, r0
 80050ae:	73fb      	strb	r3, [r7, #15]
            if ((rslt == BMI2_OK) && (!(status & BMI2_AUX_BUSY)))
 80050b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d13b      	bne.n	8005130 <config_aux_interface+0x15c>
 80050b8:	7afb      	ldrb	r3, [r7, #11]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d136      	bne.n	8005130 <config_aux_interface+0x15c>
            {
                /* Set the configurations if AUX is not busy */
                rslt = bmi2_set_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 80050c2:	f107 010c 	add.w	r1, r7, #12
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2202      	movs	r2, #2
 80050ca:	204b      	movs	r0, #75	@ 0x4b
 80050cc:	f7fe fdab 	bl	8003c26 <bmi2_set_regs>
 80050d0:	4603      	mov	r3, r0
 80050d2:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(1000, dev->intf_ptr);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	6852      	ldr	r2, [r2, #4]
 80050dc:	4611      	mov	r1, r2
 80050de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80050e2:	4798      	blx	r3
                if (rslt == BMI2_OK)
 80050e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d132      	bne.n	8005152 <config_aux_interface+0x17e>
                {
                    /* If data mode */
                    if (!config->manual_en)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	785b      	ldrb	r3, [r3, #1]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d115      	bne.n	8005120 <config_aux_interface+0x14c>
                    {
                        /* Disable manual enable flag in device structure */
                        dev->aux_man_en = 0;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2200      	movs	r2, #0
 80050f8:	76da      	strb	r2, [r3, #27]

                        /* Set the read address of the AUX sensor */
                        rslt = bmi2_set_regs(BMI2_AUX_RD_ADDR, (uint8_t *) &config->read_addr, 1, dev);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f103 0108 	add.w	r1, r3, #8
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	204d      	movs	r0, #77	@ 0x4d
 8005106:	f7fe fd8e 	bl	8003c26 <bmi2_set_regs>
 800510a:	4603      	mov	r3, r0
 800510c:	73fb      	strb	r3, [r7, #15]
                        dev->delay_us(1000, dev->intf_ptr);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	6852      	ldr	r2, [r2, #4]
 8005116:	4611      	mov	r1, r2
 8005118:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800511c:	4798      	blx	r3
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
                    }
                }

                /* Break after setting the register */
                break;
 800511e:	e018      	b.n	8005152 <config_aux_interface+0x17e>
                        dev->aux_man_en = 1;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2201      	movs	r2, #1
 8005124:	76da      	strb	r2, [r3, #27]
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	78da      	ldrb	r2, [r3, #3]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	771a      	strb	r2, [r3, #28]
                break;
 800512e:	e010      	b.n	8005152 <config_aux_interface+0x17e>
            }

            /* Increment count after every 10 seconds */
            dev->delay_us(10000, dev->intf_ptr);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	6852      	ldr	r2, [r2, #4]
 8005138:	4611      	mov	r1, r2
 800513a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800513e:	4798      	blx	r3
            count++;
 8005140:	7bbb      	ldrb	r3, [r7, #14]
 8005142:	3301      	adds	r3, #1
 8005144:	73bb      	strb	r3, [r7, #14]

            /* Break after 2 seconds if AUX still busy - since slowest ODR is 0.78Hz*/
            if (count > 20)
 8005146:	7bbb      	ldrb	r3, [r7, #14]
 8005148:	2b14      	cmp	r3, #20
 800514a:	d9a9      	bls.n	80050a0 <config_aux_interface+0xcc>
            {
                rslt = BMI2_E_AUX_BUSY;
 800514c:	23f1      	movs	r3, #241	@ 0xf1
 800514e:	73fb      	strb	r3, [r7, #15]
                break;
 8005150:	e000      	b.n	8005154 <config_aux_interface+0x180>
                break;
 8005152:	bf00      	nop
            }
        }
    }

    return rslt;
 8005154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <config_aux>:
/*!
 * @brief This internal API triggers read out offset and sets ODR of the
 * auxiliary sensor.
 */
static int8_t config_aux(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 800516a:	f107 010e 	add.w	r1, r7, #14
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2201      	movs	r2, #1
 8005172:	2044      	movs	r0, #68	@ 0x44
 8005174:	f7fe fce4 	bl	8003b40 <bmi2_get_regs>
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800517c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d12d      	bne.n	80051e0 <config_aux+0x80>
    {
        /* Trigger read out offset */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT, config->offset);
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	b25b      	sxtb	r3, r3
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	b25a      	sxtb	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	799b      	ldrb	r3, [r3, #6]
 8005192:	b25b      	sxtb	r3, r3
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	b25b      	sxtb	r3, r3
 8005198:	4313      	orrs	r3, r2
 800519a:	b25b      	sxtb	r3, r3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	73bb      	strb	r3, [r7, #14]

        /* Set ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN, config->odr);
 80051a0:	7bbb      	ldrb	r3, [r7, #14]
 80051a2:	b25b      	sxtb	r3, r3
 80051a4:	f023 030f 	bic.w	r3, r3, #15
 80051a8:	b25a      	sxtb	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	795b      	ldrb	r3, [r3, #5]
 80051ae:	b25b      	sxtb	r3, r3
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	b25b      	sxtb	r3, r3
 80051b6:	4313      	orrs	r3, r2
 80051b8:	b25b      	sxtb	r3, r3
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	73bb      	strb	r3, [r7, #14]

        /* Set auxiliary configuration register */
        rslt = bmi2_set_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 80051be:	f107 010e 	add.w	r1, r7, #14
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2201      	movs	r2, #1
 80051c6:	2044      	movs	r0, #68	@ 0x44
 80051c8:	f7fe fd2d 	bl	8003c26 <bmi2_set_regs>
 80051cc:	4603      	mov	r3, r0
 80051ce:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(1000, dev->intf_ptr);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	6852      	ldr	r2, [r2, #4]
 80051d8:	4611      	mov	r1, r2
 80051da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80051de:	4798      	blx	r3
    }

    return rslt;
 80051e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <validate_aux_config>:

/*!
 * @brief This internal API validates auxiliary configuration set by the user.
 */
static int8_t validate_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate ODR for auxiliary sensor */
    rslt = check_boundary_val(&config->odr, BMI2_AUX_ODR_0_78HZ, BMI2_AUX_ODR_800HZ, dev);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	1d58      	adds	r0, r3, #5
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	220b      	movs	r2, #11
 80051fe:	2101      	movs	r1, #1
 8005200:	f000 fbc2 	bl	8005988 <check_boundary_val>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8005208:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t get_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 800521e:	2300      	movs	r3, #0
 8005220:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005222:	6838      	ldr	r0, [r7, #0]
 8005224:	f000 fce4 	bl	8005bf0 <null_ptr_check>
 8005228:	4603      	mov	r3, r0
 800522a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 800522c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d129      	bne.n	8005288 <get_accel_config+0x74>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d026      	beq.n	8005288 <get_accel_config+0x74>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 800523a:	f107 010c 	add.w	r1, r7, #12
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2202      	movs	r2, #2
 8005242:	2040      	movs	r0, #64	@ 0x40
 8005244:	f7fe fc7c 	bl	8003b40 <bmi2_get_regs>
 8005248:	4603      	mov	r3, r0
 800524a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800524c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d11b      	bne.n	800528c <get_accel_config+0x78>
        {
            /* Get accelerometer performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE);
 8005254:	7b3b      	ldrb	r3, [r7, #12]
 8005256:	09db      	lsrs	r3, r3, #7
 8005258:	b2da      	uxtb	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	709a      	strb	r2, [r3, #2]

            /* Get accelerometer bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_ACC_BW_PARAM);
 800525e:	7b3b      	ldrb	r3, [r7, #12]
 8005260:	111b      	asrs	r3, r3, #4
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	b2da      	uxtb	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	705a      	strb	r2, [r3, #1]

            /* Get accelerometer ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_ACC_ODR);
 800526e:	7b3b      	ldrb	r3, [r7, #12]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	b2da      	uxtb	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_ACC_RANGE);
 800527a:	7b7b      	ldrb	r3, [r7, #13]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	b2da      	uxtb	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	70da      	strb	r2, [r3, #3]
        if (rslt == BMI2_OK)
 8005286:	e001      	b.n	800528c <get_accel_config+0x78>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005288:	23ff      	movs	r3, #255	@ 0xff
 800528a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800528c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range.
 */
static int8_t get_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80052a2:	2300      	movs	r3, #0
 80052a4:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80052a6:	6838      	ldr	r0, [r7, #0]
 80052a8:	f000 fca2 	bl	8005bf0 <null_ptr_check>
 80052ac:	4603      	mov	r3, r0
 80052ae:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 80052b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d139      	bne.n	800532c <get_gyro_config+0x94>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d036      	beq.n	800532c <get_gyro_config+0x94>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 80052be:	f107 010c 	add.w	r1, r7, #12
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2202      	movs	r2, #2
 80052c6:	2042      	movs	r0, #66	@ 0x42
 80052c8:	f7fe fc3a 	bl	8003b40 <bmi2_get_regs>
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80052d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d12b      	bne.n	8005330 <get_gyro_config+0x98>
        {
            /* Get gyroscope performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE);
 80052d8:	7b3b      	ldrb	r3, [r7, #12]
 80052da:	09db      	lsrs	r3, r3, #7
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	709a      	strb	r2, [r3, #2]

            /* Get gyroscope noise performance mode */
            config->noise_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_NOISE_PERF_MODE);
 80052e2:	7b3b      	ldrb	r3, [r7, #12]
 80052e4:	119b      	asrs	r3, r3, #6
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	715a      	strb	r2, [r3, #5]

            /* Get gyroscope bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_GYR_BW_PARAM);
 80052f2:	7b3b      	ldrb	r3, [r7, #12]
 80052f4:	111b      	asrs	r3, r3, #4
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	705a      	strb	r2, [r3, #1]

            /* Get gyroscope ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_GYR_ODR);
 8005302:	7b3b      	ldrb	r3, [r7, #12]
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	b2da      	uxtb	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	701a      	strb	r2, [r3, #0]

            /* Get gyroscope OIS range */
            config->ois_range = BMI2_GET_BITS(data_array[1], BMI2_GYR_OIS_RANGE);
 800530e:	7b7b      	ldrb	r3, [r7, #13]
 8005310:	10db      	asrs	r3, r3, #3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	b2da      	uxtb	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	70da      	strb	r2, [r3, #3]

            /* Get gyroscope range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_GYR_RANGE);
 800531e:	7b7b      	ldrb	r3, [r7, #13]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	b2da      	uxtb	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	711a      	strb	r2, [r3, #4]
        if (rslt == BMI2_OK)
 800532a:	e001      	b.n	8005330 <get_gyro_config+0x98>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800532c:	23ff      	movs	r3, #255	@ 0xff
 800532e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005330:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <get_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3) Gets ODR and offset.
 */
static int8_t get_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005346:	6838      	ldr	r0, [r7, #0]
 8005348:	f000 fc52 	bl	8005bf0 <null_ptr_check>
 800534c:	4603      	mov	r3, r0
 800534e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 8005350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d11d      	bne.n	8005394 <get_aux_config+0x58>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01a      	beq.n	8005394 <get_aux_config+0x58>
    {
        /* Get enable status of auxiliary interface */
        rslt = get_aux_interface(config, dev);
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f8c0 	bl	80054e6 <get_aux_interface>
 8005366:	4603      	mov	r3, r0
 8005368:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800536a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d113      	bne.n	800539a <get_aux_config+0x5e>
        {
            /* Get the auxiliary interface configurations */
            rslt = get_aux_interface_config(config, dev);
 8005372:	6839      	ldr	r1, [r7, #0]
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f8d6 	bl	8005526 <get_aux_interface_config>
 800537a:	4603      	mov	r3, r0
 800537c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 800537e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <get_aux_config+0x5e>
            {
                /* Get read out offset and ODR */
                rslt = get_aux_cfg(config, dev);
 8005386:	6839      	ldr	r1, [r7, #0]
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f914 	bl	80055b6 <get_aux_cfg>
 800538e:	4603      	mov	r3, r0
 8005390:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8005392:	e002      	b.n	800539a <get_aux_config+0x5e>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005394:	23ff      	movs	r3, #255	@ 0xff
 8005396:	73fb      	strb	r3, [r7, #15]
 8005398:	e000      	b.n	800539c <get_aux_config+0x60>
        if (rslt == BMI2_OK)
 800539a:	bf00      	nop
    }

    return rslt;
 800539c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <get_gyro_gain_update_config>:
/*!
 * @brief This internal API gets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t get_gyro_gain_update_config(struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	@ 0x28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80053b2:	f107 030c 	add.w	r3, r7, #12
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	605a      	str	r2, [r3, #4]
 80053bc:	609a      	str	r2, [r3, #8]
 80053be:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 80053d2:	2300      	movs	r3, #0
 80053d4:	723b      	strb	r3, [r7, #8]
 80053d6:	2300      	movs	r3, #0
 80053d8:	727b      	strb	r3, [r7, #9]
 80053da:	2300      	movs	r3, #0
 80053dc:	72bb      	strb	r3, [r7, #10]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 80053de:	f107 0308 	add.w	r3, r7, #8
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	2109      	movs	r1, #9
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fa89 	bl	80048fe <bmi2_extract_input_feat_config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80053f0:	7ffb      	ldrb	r3, [r7, #31]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d06e      	beq.n	80054d4 <get_gyro_gain_update_config+0x12c>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 80053f6:	7a7b      	ldrb	r3, [r7, #9]
 80053f8:	f107 010c 	add.w	r1, r7, #12
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff f9eb 	bl	80047da <bmi2_get_feat_config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800540a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800540e:	2b00      	cmp	r3, #0
 8005410:	d163      	bne.n	80054da <get_gyro_gain_update_config+0x132>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 8005412:	7abb      	ldrb	r3, [r7, #10]
 8005414:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate ratio_x */
            lsb = (uint16_t) feat_config[idx++];
 8005418:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8005422:	3328      	adds	r3, #40	@ 0x28
 8005424:	443b      	add	r3, r7
 8005426:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800542a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 800542c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8005436:	3328      	adds	r3, #40	@ 0x28
 8005438:	443b      	add	r3, r7
 800543a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8005442:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005444:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005446:	4313      	orrs	r3, r2
 8005448:	843b      	strh	r3, [r7, #32]

            /* Get ratio_x */
            config->ratio_x = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_X_MASK;
 800544a:	8c3b      	ldrh	r3, [r7, #32]
 800544c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005450:	b29a      	uxth	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	801a      	strh	r2, [r3, #0]

            /* Get word to calculate ratio_y */
            lsb = (uint16_t) feat_config[idx++];
 8005456:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8005460:	3328      	adds	r3, #40	@ 0x28
 8005462:	443b      	add	r3, r7
 8005464:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005468:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 800546a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8005474:	3328      	adds	r3, #40	@ 0x28
 8005476:	443b      	add	r3, r7
 8005478:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8005480:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005482:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005484:	4313      	orrs	r3, r2
 8005486:	843b      	strh	r3, [r7, #32]

            /* Get ratio_y */
            config->ratio_y = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Y_MASK;
 8005488:	8c3b      	ldrh	r3, [r7, #32]
 800548a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800548e:	b29a      	uxth	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	805a      	strh	r2, [r3, #2]

            /* Get word to calculate ratio_z */
            lsb = (uint16_t) feat_config[idx++];
 8005494:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800549e:	3328      	adds	r3, #40	@ 0x28
 80054a0:	443b      	add	r3, r7
 80054a2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80054a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 80054a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80054b2:	3328      	adds	r3, #40	@ 0x28
 80054b4:	443b      	add	r3, r7
 80054b6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 80054be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80054c2:	4313      	orrs	r3, r2
 80054c4:	843b      	strh	r3, [r7, #32]

            /* Get ratio_z */
            config->ratio_z = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Z_MASK;
 80054c6:	8c3b      	ldrh	r3, [r7, #32]
 80054c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	809a      	strh	r2, [r3, #4]
 80054d2:	e002      	b.n	80054da <get_gyro_gain_update_config+0x132>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80054d4:	23f8      	movs	r3, #248	@ 0xf8
 80054d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80054da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3728      	adds	r7, #40	@ 0x28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <get_aux_interface>:

/*!
 * @brief This internal API gets the enable status of auxiliary interface.
 */
static int8_t get_aux_interface(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get the enable status of auxiliary interface */
    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 80054f0:	f107 010e 	add.w	r1, r7, #14
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2201      	movs	r2, #1
 80054f8:	206b      	movs	r0, #107	@ 0x6b
 80054fa:	f7fe fb21 	bl	8003b40 <bmi2_get_regs>
 80054fe:	4603      	mov	r3, r0
 8005500:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8005502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d107      	bne.n	800551a <get_aux_interface+0x34>
    {
        config->aux_en = BMI2_GET_BITS(reg_data, BMI2_AUX_IF_EN);
 800550a:	7bbb      	ldrb	r3, [r7, #14]
 800550c:	115b      	asrs	r3, r3, #5
 800550e:	b2db      	uxtb	r3, r3
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	b2da      	uxtb	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800551a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <get_aux_interface_config>:
/*!
 * @brief This internal API gets auxiliary configurations like manual/auto mode
 * FCU write command enable and read burst length for both data and manual mode.
 */
static int8_t get_aux_interface_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8005530:	2300      	movs	r3, #0
 8005532:	81bb      	strh	r3, [r7, #12]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 8005534:	f107 010c 	add.w	r1, r7, #12
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2202      	movs	r2, #2
 800553c:	204b      	movs	r0, #75	@ 0x4b
 800553e:	f7fe faff 	bl	8003b40 <bmi2_get_regs>
 8005542:	4603      	mov	r3, r0
 8005544:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8005546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d12d      	bne.n	80055aa <get_aux_interface_config+0x84>
    {
        /* Get I2C address for auxiliary sensor */
        config->i2c_device_addr = BMI2_GET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR);
 800554e:	7b3b      	ldrb	r3, [r7, #12]
 8005550:	085b      	lsrs	r3, r3, #1
 8005552:	b2da      	uxtb	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	71da      	strb	r2, [r3, #7]

        /* Get the AUX IF to either manual or auto mode */
        config->manual_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN);
 8005558:	7b7b      	ldrb	r3, [r7, #13]
 800555a:	09db      	lsrs	r3, r3, #7
 800555c:	b2da      	uxtb	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	705a      	strb	r2, [r3, #1]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        config->fcu_write_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN);
 8005562:	7b7b      	ldrb	r3, [r7, #13]
 8005564:	119b      	asrs	r3, r3, #6
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	b2da      	uxtb	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	709a      	strb	r2, [r3, #2]

        /* Get the burst read length for manual mode */
        config->man_rd_burst = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST);
 8005572:	7b7b      	ldrb	r3, [r7, #13]
 8005574:	109b      	asrs	r3, r3, #2
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	b2da      	uxtb	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	70da      	strb	r2, [r3, #3]

        /* Get the burst read length for data mode */
        config->aux_rd_burst = BMI2_GET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST);
 8005582:	7b7b      	ldrb	r3, [r7, #13]
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	b2da      	uxtb	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	711a      	strb	r2, [r3, #4]

        /* If data mode, get the read address of the auxiliary sensor from where data is to be read */
        if (!config->manual_en)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <get_aux_interface_config+0x84>
        {
            rslt = bmi2_get_regs(BMI2_AUX_RD_ADDR, &config->read_addr, 1, dev);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f103 0108 	add.w	r1, r3, #8
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2201      	movs	r2, #1
 80055a0:	204d      	movs	r0, #77	@ 0x4d
 80055a2:	f7fe facd 	bl	8003b40 <bmi2_get_regs>
 80055a6:	4603      	mov	r3, r0
 80055a8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80055aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <get_aux_cfg>:
/*!
 * @brief This internal API gets read out offset and ODR of the auxiliary
 * sensor.
 */
static int8_t get_aux_cfg(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 80055c0:	f107 010e 	add.w	r1, r7, #14
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2201      	movs	r2, #1
 80055c8:	2044      	movs	r0, #68	@ 0x44
 80055ca:	f7fe fab9 	bl	8003b40 <bmi2_get_regs>
 80055ce:	4603      	mov	r3, r0
 80055d0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80055d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10a      	bne.n	80055f0 <get_aux_cfg+0x3a>
    {
        /* Get read out offset */
        config->offset = BMI2_GET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT);
 80055da:	7bbb      	ldrb	r3, [r7, #14]
 80055dc:	091b      	lsrs	r3, r3, #4
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	719a      	strb	r2, [r3, #6]

        /* Get ODR */
        config->odr = BMI2_GET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN);
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	715a      	strb	r2, [r3, #5]
    }

    return rslt;
 80055f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <map_feat_int>:
/*!
 * @brief This internal API maps/un-maps feature interrupts to that of interrupt
 * pins.
 */
static int8_t map_feat_int(uint8_t *reg_data_array, enum bmi2_hw_int_pin int_pin, uint8_t int_mask)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	70fb      	strb	r3, [r7, #3]
 8005608:	4613      	mov	r3, r2
 800560a:	70bb      	strb	r3, [r7, #2]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	73fb      	strb	r3, [r7, #15]

    /* Check for NULL error */
    if (reg_data_array != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d06b      	beq.n	80056ee <map_feat_int+0xf2>
    {
        /* Check validity on interrupt pin selection */
        if (int_pin < BMI2_INT_PIN_MAX)
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d865      	bhi.n	80056e8 <map_feat_int+0xec>
        {
            switch (int_pin)
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	2b03      	cmp	r3, #3
 8005620:	d868      	bhi.n	80056f4 <map_feat_int+0xf8>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <map_feat_int+0x2c>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005639 	.word	0x08005639
 800562c:	0800566f 	.word	0x0800566f
 8005630:	0800569b 	.word	0x0800569b
 8005634:	080056c7 	.word	0x080056c7
            {
                case BMI2_INT_NONE:

                    /* Un-Map the corresponding feature interrupt to interrupt pin 1 and 2 */
                    reg_data_array[0] &= ~(int_mask);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	b25a      	sxtb	r2, r3
 800563e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005642:	43db      	mvns	r3, r3
 8005644:	b25b      	sxtb	r3, r3
 8005646:	4013      	ands	r3, r2
 8005648:	b25b      	sxtb	r3, r3
 800564a:	b2da      	uxtb	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	701a      	strb	r2, [r3, #0]
                    reg_data_array[1] &= ~(int_mask);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3301      	adds	r3, #1
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	b25a      	sxtb	r2, r3
 8005658:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800565c:	43db      	mvns	r3, r3
 800565e:	b25b      	sxtb	r3, r3
 8005660:	4013      	ands	r3, r2
 8005662:	b25a      	sxtb	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3301      	adds	r3, #1
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
                    break;
 800566c:	e043      	b.n	80056f6 <map_feat_int+0xfa>
                case BMI2_INT1:

                    /* Map the corresponding feature interrupt to interrupt pin 1 */
                    reg_data_array[0] |= int_mask;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	78bb      	ldrb	r3, [r7, #2]
 8005674:	4313      	orrs	r3, r2
 8005676:	b2da      	uxtb	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	701a      	strb	r2, [r3, #0]

                    /* Un-map the corresponding feature interrupt to interrupt pin 2 */
                    reg_data_array[1] &= ~(int_mask);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3301      	adds	r3, #1
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	b25a      	sxtb	r2, r3
 8005684:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005688:	43db      	mvns	r3, r3
 800568a:	b25b      	sxtb	r3, r3
 800568c:	4013      	ands	r3, r2
 800568e:	b25a      	sxtb	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3301      	adds	r3, #1
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]
                    break;
 8005698:	e02d      	b.n	80056f6 <map_feat_int+0xfa>
                case BMI2_INT2:

                    /* Map the corresponding feature interrupt to interrupt pin 2 */
                    reg_data_array[1] |= int_mask;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3301      	adds	r3, #1
 800569e:	7819      	ldrb	r1, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3301      	adds	r3, #1
 80056a4:	78ba      	ldrb	r2, [r7, #2]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]

                    /* Un-map the corresponding feature interrupt to interrupt pin 1 */
                    reg_data_array[0] &= ~(int_mask);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	b25a      	sxtb	r2, r3
 80056b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056b6:	43db      	mvns	r3, r3
 80056b8:	b25b      	sxtb	r3, r3
 80056ba:	4013      	ands	r3, r2
 80056bc:	b25b      	sxtb	r3, r3
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	701a      	strb	r2, [r3, #0]
                    break;
 80056c4:	e017      	b.n	80056f6 <map_feat_int+0xfa>
                case BMI2_INT_BOTH:

                    /* Map the corresponding feature interrupt to interrupt pin 1 and 2 */
                    reg_data_array[0] |= int_mask;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	78bb      	ldrb	r3, [r7, #2]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	701a      	strb	r2, [r3, #0]
                    reg_data_array[1] |= int_mask;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3301      	adds	r3, #1
 80056d8:	7819      	ldrb	r1, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3301      	adds	r3, #1
 80056de:	78ba      	ldrb	r2, [r7, #2]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]
                    break;
 80056e6:	e006      	b.n	80056f6 <map_feat_int+0xfa>
            }
        }
        else
        {
            /* Return error if invalid pin selection */
            rslt = BMI2_E_INVALID_INT_PIN;
 80056e8:	23f4      	movs	r3, #244	@ 0xf4
 80056ea:	73fb      	strb	r3, [r7, #15]
 80056ec:	e003      	b.n	80056f6 <map_feat_int+0xfa>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80056ee:	23ff      	movs	r3, #255	@ 0xff
 80056f0:	73fb      	strb	r3, [r7, #15]
 80056f2:	e000      	b.n	80056f6 <map_feat_int+0xfa>
                    break;
 80056f4:	bf00      	nop
    }

    return rslt;
 80056f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop

08005708 <get_acc_gyr_data>:

/*!
 * @brief This internal API gets the accelerometer/gyroscope data.
 */
static void get_acc_gyr_data(struct bmi2_sens_axes_data *data, const uint8_t *reg_data)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]

    /* Variables to store both msb and lsb value */
    uint16_t msb_lsb;

    /* Variables to define index */
    uint8_t index = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]

    /* Read x-axis data */
    lsb = reg_data[index++];
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	73fa      	strb	r2, [r7, #15]
 800571c:	461a      	mov	r2, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	4413      	add	r3, r2
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	73fa      	strb	r2, [r7, #15]
 800572c:	461a      	mov	r2, r3
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	4413      	add	r3, r2
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 8005736:	7b7b      	ldrb	r3, [r7, #13]
 8005738:	b21b      	sxth	r3, r3
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	b21a      	sxth	r2, r3
 800573e:	7bbb      	ldrb	r3, [r7, #14]
 8005740:	b21b      	sxth	r3, r3
 8005742:	4313      	orrs	r3, r2
 8005744:	b21b      	sxth	r3, r3
 8005746:	817b      	strh	r3, [r7, #10]
    data->x = (int16_t) msb_lsb;
 8005748:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	801a      	strh	r2, [r3, #0]

    /* Read y-axis data */
    lsb = reg_data[index++];
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	73fa      	strb	r2, [r7, #15]
 8005756:	461a      	mov	r2, r3
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	4413      	add	r3, r2
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	73fa      	strb	r2, [r7, #15]
 8005766:	461a      	mov	r2, r3
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	4413      	add	r3, r2
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 8005770:	7b7b      	ldrb	r3, [r7, #13]
 8005772:	b21b      	sxth	r3, r3
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	b21a      	sxth	r2, r3
 8005778:	7bbb      	ldrb	r3, [r7, #14]
 800577a:	b21b      	sxth	r3, r3
 800577c:	4313      	orrs	r3, r2
 800577e:	b21b      	sxth	r3, r3
 8005780:	817b      	strh	r3, [r7, #10]
    data->y = (int16_t) msb_lsb;
 8005782:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	805a      	strh	r2, [r3, #2]

    /* Read z-axis data */
    lsb = reg_data[index++];
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	73fa      	strb	r2, [r7, #15]
 8005790:	461a      	mov	r2, r3
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	4413      	add	r3, r2
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	73fa      	strb	r2, [r7, #15]
 80057a0:	461a      	mov	r2, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	4413      	add	r3, r2
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80057aa:	7b7b      	ldrb	r3, [r7, #13]
 80057ac:	b21b      	sxth	r3, r3
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	b21a      	sxth	r2, r3
 80057b2:	7bbb      	ldrb	r3, [r7, #14]
 80057b4:	b21b      	sxth	r3, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	817b      	strh	r3, [r7, #10]
    data->z = (int16_t) msb_lsb;
 80057bc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	809a      	strh	r2, [r3, #4]
}
 80057c4:	bf00      	nop
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <get_remapped_data>:

/*!
 * @brief This internal API gets the re-mapped accelerometer/gyroscope data.
 */
static void get_remapped_data(struct bmi2_sens_axes_data *data, const struct bmi2_dev *dev)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
    /* Array to defined the re-mapped sensor data */
    int16_t remap_data[3] = { 0 };
 80057da:	f107 030c 	add.w	r3, r7, #12
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	809a      	strh	r2, [r3, #4]
    int16_t pos_multiplier = INT16_C(1);
 80057e4:	2301      	movs	r3, #1
 80057e6:	82fb      	strh	r3, [r7, #22]
    int16_t neg_multiplier = INT16_C(-1);
 80057e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057ec:	82bb      	strh	r3, [r7, #20]

    /* Fill the array with the un-mapped sensor data */
    remap_data[0] = data->x;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057f4:	81bb      	strh	r3, [r7, #12]
    remap_data[1] = data->y;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80057fc:	81fb      	strh	r3, [r7, #14]
    remap_data[2] = data->z;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005804:	823b      	strh	r3, [r7, #16]

    /* Get the re-mapped x axis data */
    if (dev->remap.x_axis_sign == BMI2_POS_SIGN)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800580c:	2b00      	cmp	r3, #0
 800580e:	d110      	bne.n	8005832 <get_remapped_data+0x62>
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * pos_multiplier);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	3318      	adds	r3, #24
 800581a:	443b      	add	r3, r7
 800581c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8005820:	b29a      	uxth	r2, r3
 8005822:	8afb      	ldrh	r3, [r7, #22]
 8005824:	fb12 f303 	smulbb	r3, r2, r3
 8005828:	b29b      	uxth	r3, r3
 800582a:	b21a      	sxth	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	801a      	strh	r2, [r3, #0]
 8005830:	e00f      	b.n	8005852 <get_remapped_data+0x82>
    }
    else
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * neg_multiplier);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	3318      	adds	r3, #24
 800583c:	443b      	add	r3, r7
 800583e:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8005842:	b29a      	uxth	r2, r3
 8005844:	8abb      	ldrh	r3, [r7, #20]
 8005846:	fb12 f303 	smulbb	r3, r2, r3
 800584a:	b29b      	uxth	r3, r3
 800584c:	b21a      	sxth	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	801a      	strh	r2, [r3, #0]
    }

    /* Get the re-mapped y axis data */
    if (dev->remap.y_axis_sign == BMI2_POS_SIGN)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005858:	2b00      	cmp	r3, #0
 800585a:	d110      	bne.n	800587e <get_remapped_data+0xae>
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * pos_multiplier);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	3318      	adds	r3, #24
 8005866:	443b      	add	r3, r7
 8005868:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800586c:	b29a      	uxth	r2, r3
 800586e:	8afb      	ldrh	r3, [r7, #22]
 8005870:	fb12 f303 	smulbb	r3, r2, r3
 8005874:	b29b      	uxth	r3, r3
 8005876:	b21a      	sxth	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	805a      	strh	r2, [r3, #2]
 800587c:	e00f      	b.n	800589e <get_remapped_data+0xce>
    }
    else
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * neg_multiplier);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	3318      	adds	r3, #24
 8005888:	443b      	add	r3, r7
 800588a:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800588e:	b29a      	uxth	r2, r3
 8005890:	8abb      	ldrh	r3, [r7, #20]
 8005892:	fb12 f303 	smulbb	r3, r2, r3
 8005896:	b29b      	uxth	r3, r3
 8005898:	b21a      	sxth	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	805a      	strh	r2, [r3, #2]
    }

    /* Get the re-mapped z axis data */
    if (dev->remap.z_axis_sign == BMI2_POS_SIGN)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d110      	bne.n	80058ca <get_remapped_data+0xfa>
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * pos_multiplier);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	3318      	adds	r3, #24
 80058b2:	443b      	add	r3, r7
 80058b4:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	8afb      	ldrh	r3, [r7, #22]
 80058bc:	fb12 f303 	smulbb	r3, r2, r3
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	b21a      	sxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
    }
}
 80058c8:	e00f      	b.n	80058ea <get_remapped_data+0x11a>
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	3318      	adds	r3, #24
 80058d4:	443b      	add	r3, r7
 80058d6:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80058da:	b29a      	uxth	r2, r3
 80058dc:	8abb      	ldrh	r3, [r7, #20]
 80058de:	fb12 f303 	smulbb	r3, r2, r3
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	b21a      	sxth	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	809a      	strh	r2, [r3, #4]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <saturate>:

/*!
 * @brief This internal API clips the gyroscope cross-axis sensitivity within signed 16-bit limit
 */
static int16_t saturate(int32_t value, uint16_t saturation_val)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b085      	sub	sp, #20
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	807b      	strh	r3, [r7, #2]
    int16_t retval = (int16_t)value;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	81fb      	strh	r3, [r7, #14]

    if (value > (int32_t)saturation_val)
 8005906:	887b      	ldrh	r3, [r7, #2]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	429a      	cmp	r2, r3
 800590c:	dd02      	ble.n	8005914 <saturate+0x1e>
    {
        retval = (int16_t)saturation_val;
 800590e:	887b      	ldrh	r3, [r7, #2]
 8005910:	81fb      	strh	r3, [r7, #14]
 8005912:	e008      	b.n	8005926 <saturate+0x30>
    }
    else if (value < (-(int32_t)saturation_val - 1))
 8005914:	887b      	ldrh	r3, [r7, #2]
 8005916:	43db      	mvns	r3, r3
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	da03      	bge.n	8005926 <saturate+0x30>
    {
        retval = -(int16_t)saturation_val - 1;
 800591e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005922:	43db      	mvns	r3, r3
 8005924:	81fb      	strh	r3, [r7, #14]
    }

    return retval;
 8005926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <comp_gyro_cross_axis_sensitivity>:
/*!
 * @brief This internal API corrects the gyroscope cross-axis sensitivity
 * between the z and the x axis.
 */
static void comp_gyro_cross_axis_sensitivity(struct bmi2_sens_axes_data *gyr_data, const struct bmi2_dev *dev)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
    uint16_t int16_max = UINT16_C(32767);
 8005940:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005944:	81fb      	strh	r3, [r7, #14]

    /* Get the compensated gyroscope x-axis */
    gyr_data->x =
        saturate((int32_t)(gyr_data->x - (int16_t)(((int32_t) dev->gyr_cross_sens_zx * (int32_t) gyr_data->z) / 512)),
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800594c:	461a      	mov	r2, r3
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8005954:	4619      	mov	r1, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	da01      	bge.n	8005968 <comp_gyro_cross_axis_sensitivity+0x32>
 8005964:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005968:	125b      	asrs	r3, r3, #9
 800596a:	b21b      	sxth	r3, r3
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	89fa      	ldrh	r2, [r7, #14]
 8005970:	4611      	mov	r1, r2
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff ffbf 	bl	80058f6 <saturate>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
    gyr_data->x =
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	801a      	strh	r2, [r3, #0]
                 int16_max);
}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi2_dev *dev)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	607b      	str	r3, [r7, #4]
 8005992:	460b      	mov	r3, r1
 8005994:	72fb      	strb	r3, [r7, #11]
 8005996:	4613      	mov	r3, r2
 8005998:	72bb      	strb	r3, [r7, #10]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	75fb      	strb	r3, [r7, #23]

    if (val != NULL)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01e      	beq.n	80059e2 <check_boundary_val+0x5a>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	7afa      	ldrb	r2, [r7, #11]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d909      	bls.n	80059c2 <check_boundary_val+0x3a>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	7afa      	ldrb	r2, [r7, #11]
 80059b2:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MIN_VALUE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	7a1b      	ldrb	r3, [r3, #8]
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	7aba      	ldrb	r2, [r7, #10]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d20c      	bcs.n	80059e6 <check_boundary_val+0x5e>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	7aba      	ldrb	r2, [r7, #10]
 80059d0:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MAX_VALUE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	7a1b      	ldrb	r3, [r3, #8]
 80059d6:	f043 0302 	orr.w	r3, r3, #2
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	721a      	strb	r2, [r3, #8]
 80059e0:	e001      	b.n	80059e6 <check_boundary_val+0x5e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80059e2:	23ff      	movs	r3, #255	@ 0xff
 80059e4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80059e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t set_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
    uint8_t reg_data;

    /* Array to store the default value of accelerometer configuration
     * reserved registers
     */
    uint8_t data_array[2] = { 0 };
 8005a00:	2300      	movs	r3, #0
 8005a02:	81bb      	strh	r3, [r7, #12]

    /* Validate bandwidth and performance mode */
    rslt = validate_bw_perf_mode(&config->bwp, &config->filter_perf, dev);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	1c58      	adds	r0, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	f7ff f8c8 	bl	8004ba4 <validate_bw_perf_mode>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8005a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d15b      	bne.n	8005ad8 <set_accel_config+0xe2>
    {
        /* Validate ODR and range */
        rslt = validate_odr_range(&config->odr, &config->range, dev);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3303      	adds	r3, #3
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f7ff f8e8 	bl	8004bfe <validate_odr_range>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8005a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d14e      	bne.n	8005ad8 <set_accel_config+0xe2>
        {
            /* Set accelerometer performance mode */
            reg_data = BMI2_SET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE, config->filter_perf);
 8005a3a:	7b3b      	ldrb	r3, [r7, #12]
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a42:	b25a      	sxtb	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	789b      	ldrb	r3, [r3, #2]
 8005a48:	b25b      	sxtb	r3, r3
 8005a4a:	01db      	lsls	r3, r3, #7
 8005a4c:	b25b      	sxtb	r3, r3
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer bandwidth */
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_BW_PARAM, config->bwp);
 8005a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5c:	b25a      	sxtb	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	b25b      	sxtb	r3, r3
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	b25b      	sxtb	r3, r3
 8005a68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer ODR */
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ACC_ODR, config->odr);
 8005a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a78:	f023 030f 	bic.w	r3, r3, #15
 8005a7c:	b25a      	sxtb	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b25b      	sxtb	r3, r3
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	b25b      	sxtb	r3, r3
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	b25b      	sxtb	r3, r3
 8005a8e:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[0] = reg_data;
 8005a90:	7bbb      	ldrb	r3, [r7, #14]
 8005a92:	733b      	strb	r3, [r7, #12]

            /* Set accelerometer range */
            reg_data = BMI2_SET_BIT_POS0(data_array[1], BMI2_ACC_RANGE, config->range);
 8005a94:	7b7b      	ldrb	r3, [r7, #13]
 8005a96:	b25b      	sxtb	r3, r3
 8005a98:	f023 0303 	bic.w	r3, r3, #3
 8005a9c:	b25a      	sxtb	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	78db      	ldrb	r3, [r3, #3]
 8005aa2:	b25b      	sxtb	r3, r3
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	b25b      	sxtb	r3, r3
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	b25b      	sxtb	r3, r3
 8005aae:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[1] = reg_data;
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	737b      	strb	r3, [r7, #13]

            /* Write accelerometer configuration to ACC_CONFand
             * ACC_RANGE registers simultaneously as they lie in consecutive places
             */
            rslt = bmi2_set_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 8005ab4:	f107 010c 	add.w	r1, r7, #12
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2202      	movs	r2, #2
 8005abc:	2040      	movs	r0, #64	@ 0x40
 8005abe:	f7fe f8b2 	bl	8003c26 <bmi2_set_regs>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	73fb      	strb	r3, [r7, #15]

            /* Get error status to check for invalid configurations */
            if (rslt == BMI2_OK)
 8005ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <set_accel_config+0xe2>
            {
                rslt = cfg_error_status(dev);
 8005ace:	6838      	ldr	r0, [r7, #0]
 8005ad0:	f7ff f90a 	bl	8004ce8 <cfg_error_status>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8005ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <set_gyro_config>:
 * @brief This internal API sets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range. It also
 * maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Array to store the default value of gyroscope configuration reserved registers  */
    uint8_t data_array[2] = { 0 };
 8005aee:	2300      	movs	r3, #0
 8005af0:	81bb      	strh	r3, [r7, #12]

    /* Validate gyroscope configurations */
    rslt = validate_gyro_config(config, dev);
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff f8a2 	bl	8004c3e <validate_gyro_config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8005afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d16e      	bne.n	8005be4 <set_gyro_config+0x100>
    {
        /* Set gyroscope performance mode */
        reg_data = BMI2_SET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE, config->filter_perf);
 8005b06:	7b3b      	ldrb	r3, [r7, #12]
 8005b08:	b25b      	sxtb	r3, r3
 8005b0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b0e:	b25a      	sxtb	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	789b      	ldrb	r3, [r3, #2]
 8005b14:	b25b      	sxtb	r3, r3
 8005b16:	01db      	lsls	r3, r3, #7
 8005b18:	b25b      	sxtb	r3, r3
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	b25b      	sxtb	r3, r3
 8005b1e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope noise performance mode */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_NOISE_PERF_MODE, config->noise_perf);
 8005b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b28:	b25a      	sxtb	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	795b      	ldrb	r3, [r3, #5]
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	b25b      	sxtb	r3, r3
 8005b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b38:	b25b      	sxtb	r3, r3
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	b25b      	sxtb	r3, r3
 8005b3e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope bandwidth */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_BW_PARAM, config->bwp);
 8005b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b44:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005b48:	b25a      	sxtb	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	b25b      	sxtb	r3, r3
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	b25b      	sxtb	r3, r3
 8005b54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b58:	b25b      	sxtb	r3, r3
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	b25b      	sxtb	r3, r3
 8005b5e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_ODR, config->odr);
 8005b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b64:	f023 030f 	bic.w	r3, r3, #15
 8005b68:	b25a      	sxtb	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	b25b      	sxtb	r3, r3
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	b25b      	sxtb	r3, r3
 8005b76:	4313      	orrs	r3, r2
 8005b78:	b25b      	sxtb	r3, r3
 8005b7a:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[0] = reg_data;
 8005b7c:	7bbb      	ldrb	r3, [r7, #14]
 8005b7e:	733b      	strb	r3, [r7, #12]

        /* Set gyroscope OIS range */
        reg_data = BMI2_SET_BITS(data_array[1], BMI2_GYR_OIS_RANGE, config->ois_range);
 8005b80:	7b7b      	ldrb	r3, [r7, #13]
 8005b82:	b25b      	sxtb	r3, r3
 8005b84:	f023 0308 	bic.w	r3, r3, #8
 8005b88:	b25a      	sxtb	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	78db      	ldrb	r3, [r3, #3]
 8005b8e:	b25b      	sxtb	r3, r3
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	b25b      	sxtb	r3, r3
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	b25b      	sxtb	r3, r3
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope range */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_RANGE, config->range);
 8005ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ba4:	f023 0307 	bic.w	r3, r3, #7
 8005ba8:	b25a      	sxtb	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	791b      	ldrb	r3, [r3, #4]
 8005bae:	b25b      	sxtb	r3, r3
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	b25b      	sxtb	r3, r3
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	b25b      	sxtb	r3, r3
 8005bba:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[1] = reg_data;
 8005bbc:	7bbb      	ldrb	r3, [r7, #14]
 8005bbe:	737b      	strb	r3, [r7, #13]

        /* Write accelerometer configuration to GYR_CONF and GYR_RANGE
         * registers simultaneously as they lie in consecutive places
         */
        rslt = bmi2_set_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 8005bc0:	f107 010c 	add.w	r1, r7, #12
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	2042      	movs	r0, #66	@ 0x42
 8005bca:	f7fe f82c 	bl	8003c26 <bmi2_set_regs>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	73fb      	strb	r3, [r7, #15]

        /* Get error status to check for invalid configurations */
        if (rslt == BMI2_OK)
 8005bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d104      	bne.n	8005be4 <set_gyro_config+0x100>
        {
            rslt = cfg_error_status(dev);
 8005bda:	6838      	ldr	r0, [r7, #0]
 8005bdc:	f7ff f884 	bl	8004ce8 <cfg_error_status>
 8005be0:	4603      	mov	r3, r0
 8005be2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI2_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00b      	beq.n	8005c1a <null_ptr_check+0x2a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <null_ptr_check+0x2a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <null_ptr_check+0x2a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 8005c1a:	23ff      	movs	r3, #255	@ 0xff
 8005c1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <extract_feat_int_map>:

/*!
 *@brief This internal API is used to map the interrupts to the sensor.
 */
static void extract_feat_int_map(struct bmi2_map_int *map_int, uint8_t type, const struct bmi2_dev *dev)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b087      	sub	sp, #28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	460b      	mov	r3, r1
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	75fb      	strb	r3, [r7, #23]

    /* Search for the interrupts from the input configuration array */
    while (loop < dev->sens_int_map)
 8005c40:	e014      	b.n	8005c6c <extract_feat_int_map+0x3e>
    {
        if (dev->map_int[loop].type == type)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	4413      	add	r3, r2
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	7afa      	ldrb	r2, [r7, #11]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d108      	bne.n	8005c66 <extract_feat_int_map+0x38>
        {
            *map_int = dev->map_int[loop];
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	4413      	add	r3, r2
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	8013      	strh	r3, [r2, #0]
            break;
 8005c64:	e009      	b.n	8005c7a <extract_feat_int_map+0x4c>
        }

        loop++;
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->sens_int_map)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005c72:	7dfa      	ldrb	r2, [r7, #23]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d3e4      	bcc.n	8005c42 <extract_feat_int_map+0x14>
    }
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <get_gyro_gain_update_status>:
/*!
 * @brief This internal API gets the saturation status for the gyroscope user
 * gain update.
 */
static int8_t get_gyro_gain_update_status(struct bmi2_gyr_user_gain_status *user_gain_stat, struct bmi2_dev *dev)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b088      	sub	sp, #32
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005c90:	f107 030c 	add.w	r3, r7, #12
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	609a      	str	r2, [r3, #8]
 8005c9c:	60da      	str	r2, [r3, #12]

    /* Variables to define index */
    uint8_t idx = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature output for gyroscope user gain status */
    struct bmi2_feature_config user_gain_cfg = { 0, 0, 0 };
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	723b      	strb	r3, [r7, #8]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	727b      	strb	r3, [r7, #9]
 8005caa:	2300      	movs	r3, #0
 8005cac:	72bb      	strb	r3, [r7, #10]

    /* Search for gyroscope user gain status output feature and extract its
     * configuration details
     */
    feat_found = extract_output_feat_config(&user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 8005cae:	f107 0308 	add.w	r3, r7, #8
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	2109      	movs	r1, #9
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 f84b 	bl	8005d52 <extract_output_feat_config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8005cc0:	7f7b      	ldrb	r3, [r7, #29]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d03d      	beq.n	8005d42 <get_gyro_gain_update_status+0xbc>
    {
        /* Get the feature output configuration for gyroscope user gain  status */
        rslt = bmi2_get_feat_config(user_gain_cfg.page, feat_config, dev);
 8005cc6:	7a7b      	ldrb	r3, [r7, #9]
 8005cc8:	f107 010c 	add.w	r1, r7, #12
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fd83 	bl	80047da <bmi2_get_feat_config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005cd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d132      	bne.n	8005d46 <get_gyro_gain_update_status+0xc0>
        {
            /* Define the offset in bytes for gyroscope user gain status */
            idx = user_gain_cfg.start_addr;
 8005ce0:	7abb      	ldrb	r3, [r7, #10]
 8005ce2:	77bb      	strb	r3, [r7, #30]

            /* Get the saturation status for x-axis */
            user_gain_stat->sat_x = BMI2_GET_BIT_POS0(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_X);
 8005ce4:	7fbb      	ldrb	r3, [r7, #30]
 8005ce6:	3320      	adds	r3, #32
 8005ce8:	443b      	add	r3, r7
 8005cea:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	701a      	strb	r2, [r3, #0]

            /* Get the saturation status for y-axis */
            user_gain_stat->sat_y = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Y);
 8005cf8:	7fbb      	ldrb	r3, [r7, #30]
 8005cfa:	3320      	adds	r3, #32
 8005cfc:	443b      	add	r3, r7
 8005cfe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005d02:	105b      	asrs	r3, r3, #1
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	705a      	strb	r2, [r3, #1]

            /* Get the saturation status for z-axis */
            user_gain_stat->sat_z = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Z);
 8005d10:	7fbb      	ldrb	r3, [r7, #30]
 8005d12:	3320      	adds	r3, #32
 8005d14:	443b      	add	r3, r7
 8005d16:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005d1a:	109b      	asrs	r3, r3, #2
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	709a      	strb	r2, [r3, #2]

            /* Get g trigger status */
            user_gain_stat->g_trigger_status = BMI2_GET_BITS(feat_config[idx], BMI2_G_TRIGGER_STAT);
 8005d28:	7fbb      	ldrb	r3, [r7, #30]
 8005d2a:	3320      	adds	r3, #32
 8005d2c:	443b      	add	r3, r7
 8005d2e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005d32:	10db      	asrs	r3, r3, #3
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	70da      	strb	r2, [r3, #3]
 8005d40:	e001      	b.n	8005d46 <get_gyro_gain_update_status+0xc0>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8005d42:	23f8      	movs	r3, #248	@ 0xf8
 8005d44:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005d46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <extract_output_feat_config>:
 * details from the look-up table.
 */
static uint8_t extract_output_feat_config(struct bmi2_feature_config *feat_output,
                                          uint8_t type,
                                          const struct bmi2_dev *dev)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b087      	sub	sp, #28
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8005d64:	2300      	movs	r3, #0
 8005d66:	75bb      	strb	r3, [r7, #22]

    /* Search for the output feature from the output configuration array */
    while (loop < dev->out_sens)
 8005d68:	e01c      	b.n	8005da4 <extract_output_feat_config+0x52>
    {
        if (dev->feat_output[loop].type == type)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005d6e:	7dfa      	ldrb	r2, [r7, #23]
 8005d70:	4613      	mov	r3, r2
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	4413      	add	r3, r2
 8005d76:	440b      	add	r3, r1
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	7afa      	ldrb	r2, [r7, #11]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d10e      	bne.n	8005d9e <extract_output_feat_config+0x4c>
        {
            *feat_output = dev->feat_output[loop];
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005d84:	7dfa      	ldrb	r2, [r7, #23]
 8005d86:	4613      	mov	r3, r2
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	4413      	add	r3, r2
 8005d8c:	18ca      	adds	r2, r1, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8811      	ldrh	r1, [r2, #0]
 8005d92:	7892      	ldrb	r2, [r2, #2]
 8005d94:	8019      	strh	r1, [r3, #0]
 8005d96:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	75bb      	strb	r3, [r7, #22]
            break;
 8005d9c:	e007      	b.n	8005dae <extract_output_feat_config+0x5c>
        }

        loop++;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	3301      	adds	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->out_sens)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	7e9b      	ldrb	r3, [r3, #26]
 8005da8:	7dfa      	ldrb	r2, [r7, #23]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d3dd      	bcc.n	8005d6a <extract_output_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 8005dae:	7dbb      	ldrb	r3, [r7, #22]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <get_gyro_cross_sense>:
/*!
 * @brief This internal API gets the cross sensitivity coefficient between
 * gyroscope's X and Z axes.
 */
static int8_t get_gyro_cross_sense(int16_t *cross_sense, struct bmi2_dev *dev)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005dc6:	f107 030c 	add.w	r3, r7, #12
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	605a      	str	r2, [r3, #4]
 8005dd0:	609a      	str	r2, [r3, #8]
 8005dd2:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t idx = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	77bb      	strb	r3, [r7, #30]
    uint8_t feat_found;

    uint8_t corr_fact_zx;

    /* Initialize feature output for gyroscope cross sensitivity */
    struct bmi2_feature_config cross_sense_out_config = { 0, 0, 0 };
 8005dd8:	2300      	movs	r3, #0
 8005dda:	723b      	strb	r3, [r7, #8]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	727b      	strb	r3, [r7, #9]
 8005de0:	2300      	movs	r3, #0
 8005de2:	72bb      	strb	r3, [r7, #10]

    if (dev->variant_feature & BMI2_MAXIMUM_FIFO_VARIANT)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01d      	beq.n	8005e2e <get_gyro_cross_sense+0x72>
    {
        /* For maximum_fifo variant fetch the correction factor from GPIO0 */
        rslt = bmi2_get_regs(BMI2_GYR_CAS_GPIO0_ADDR, &corr_fact_zx, 1, dev);
 8005df2:	f107 010b 	add.w	r1, r7, #11
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	201e      	movs	r0, #30
 8005dfc:	f7fd fea0 	bl	8003b40 <bmi2_get_regs>
 8005e00:	4603      	mov	r3, r0
 8005e02:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005e04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d157      	bne.n	8005ebc <get_gyro_cross_sense+0x100>
        {
            /* Get the gyroscope cross sensitivity coefficient */
            if (corr_fact_zx & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d006      	beq.n	8005e24 <get_gyro_cross_sense+0x68>
            {
                *cross_sense = (int16_t)(((int16_t)corr_fact_zx) - 128);
 8005e16:	7afb      	ldrb	r3, [r7, #11]
 8005e18:	3b80      	subs	r3, #128	@ 0x80
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	b21a      	sxth	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	801a      	strh	r2, [r3, #0]
 8005e22:	e04b      	b.n	8005ebc <get_gyro_cross_sense+0x100>
            }
            else
            {
                *cross_sense = (int16_t)(corr_fact_zx);
 8005e24:	7afb      	ldrb	r3, [r7, #11]
 8005e26:	b21a      	sxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	801a      	strh	r2, [r3, #0]
 8005e2c:	e046      	b.n	8005ebc <get_gyro_cross_sense+0x100>
        }
    }
    else
    {
        /* Search for gyroscope cross sensitivity feature and extract its configuration details */
        feat_found = extract_output_feat_config(&cross_sense_out_config, BMI2_GYRO_CROSS_SENSE, dev);
 8005e2e:	f107 0308 	add.w	r3, r7, #8
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	2129      	movs	r1, #41	@ 0x29
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff ff8b 	bl	8005d52 <extract_output_feat_config>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	777b      	strb	r3, [r7, #29]
        if (feat_found)
 8005e40:	7f7b      	ldrb	r3, [r7, #29]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d038      	beq.n	8005eb8 <get_gyro_cross_sense+0xfc>
        {
            /* Get the feature output configuration for gyroscope cross sensitivity
             * feature */
            rslt = bmi2_get_feat_config(cross_sense_out_config.page, feat_config, dev);
 8005e46:	7a7b      	ldrb	r3, [r7, #9]
 8005e48:	f107 010c 	add.w	r1, r7, #12
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe fcc3 	bl	80047da <bmi2_get_feat_config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8005e58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d12d      	bne.n	8005ebc <get_gyro_cross_sense+0x100>
            {
                /* Define the offset in bytes for gyroscope cross sensitivity output */
                idx = cross_sense_out_config.start_addr;
 8005e60:	7abb      	ldrb	r3, [r7, #10]
 8005e62:	77bb      	strb	r3, [r7, #30]

                /* discard the MSB as GYR_CAS is of only 7 bit */
                feat_config[idx] = feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_MASK;
 8005e64:	7fbb      	ldrb	r3, [r7, #30]
 8005e66:	3320      	adds	r3, #32
 8005e68:	443b      	add	r3, r7
 8005e6a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8005e6e:	7fbb      	ldrb	r3, [r7, #30]
 8005e70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	3320      	adds	r3, #32
 8005e78:	443b      	add	r3, r7
 8005e7a:	f803 2c14 	strb.w	r2, [r3, #-20]

                /* Get the gyroscope cross sensitivity coefficient */
                if (feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8005e7e:	7fbb      	ldrb	r3, [r7, #30]
 8005e80:	3320      	adds	r3, #32
 8005e82:	443b      	add	r3, r7
 8005e84:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <get_gyro_cross_sense+0xea>
                {
                    *cross_sense = (int16_t)(((int16_t)feat_config[idx]) - 128);
 8005e90:	7fbb      	ldrb	r3, [r7, #30]
 8005e92:	3320      	adds	r3, #32
 8005e94:	443b      	add	r3, r7
 8005e96:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005e9a:	3b80      	subs	r3, #128	@ 0x80
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	b21a      	sxth	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	e00a      	b.n	8005ebc <get_gyro_cross_sense+0x100>
                }
                else
                {
                    *cross_sense = (int16_t)(feat_config[idx]);
 8005ea6:	7fbb      	ldrb	r3, [r7, #30]
 8005ea8:	3320      	adds	r3, #32
 8005eaa:	443b      	add	r3, r7
 8005eac:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005eb0:	b21a      	sxth	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	e001      	b.n	8005ebc <get_gyro_cross_sense+0x100>
                }
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_SENSOR;
 8005eb8:	23f8      	movs	r3, #248	@ 0xf8
 8005eba:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8005ebc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <bmi270_init>:
 *  3) Writes the configuration file.
 *  4) Updates the feature offset parameters in the device structure.
 *  5) Updates the maximum number of pages, in the device structure.
 */
int8_t bmi270_init(struct bmi2_dev *dev)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f9f7 	bl	80062c4 <null_ptr_check>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8005eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d141      	bne.n	8005f66 <bmi270_init+0x9e>
    {
        /* Assign chip id of BMI270 */
        dev->chip_id = BMI270_CHIP_ID;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2224      	movs	r2, #36	@ 0x24
 8005ee6:	701a      	strb	r2, [r3, #0]

        /* get the size of config array */
        dev->config_size = sizeof(bmi270_config_file);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005eee:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

        /* Enable the variant specific features if any */
        dev->variant_feature = BMI2_GYRO_CROSS_SENS_ENABLE | BMI2_CRT_RTOSK_ENABLE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI2_SPI_INTF)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	7a5b      	ldrb	r3, [r3, #9]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d103      	bne.n	8005f0a <bmi270_init+0x42>
        {
            dev->dummy_byte = 1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	72da      	strb	r2, [r3, #11]
 8005f08:	e002      	b.n	8005f10 <bmi270_init+0x48>
        }
        else
        {
            dev->dummy_byte = 0;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	72da      	strb	r2, [r3, #11]
        }

        /* If configuration file pointer is not assigned any address */
        if (!dev->config_file_ptr)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <bmi270_init+0x56>
        {
            /* Give the address of the configuration file array to
             * the device pointer
             */
            dev->config_file_ptr = bmi270_config_file;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a16      	ldr	r2, [pc, #88]	@ (8005f74 <bmi270_init+0xac>)
 8005f1c:	615a      	str	r2, [r3, #20]
        }

        /* Initialize BMI2 sensor */
        rslt = bmi2_sec_init(dev);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fd fdae 	bl	8003a80 <bmi2_sec_init>
 8005f24:	4603      	mov	r3, r0
 8005f26:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8005f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11a      	bne.n	8005f66 <bmi270_init+0x9e>
        {
            /* Assign the offsets of the feature input
             * configuration to the device structure
             */
            dev->feat_config = bmi270_feat_in;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a11      	ldr	r2, [pc, #68]	@ (8005f78 <bmi270_init+0xb0>)
 8005f34:	621a      	str	r2, [r3, #32]

            /* Assign the offsets of the feature output to
             * the device structure
             */
            dev->feat_output = bmi270_feat_out;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a10      	ldr	r2, [pc, #64]	@ (8005f7c <bmi270_init+0xb4>)
 8005f3a:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Assign the maximum number of pages to the
             * device structure
             */
            dev->page_max = BMI270_MAX_PAGE_NUM;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2208      	movs	r2, #8
 8005f40:	761a      	strb	r2, [r3, #24]

            /* Assign maximum number of input sensors/
             * features to device structure
             */
            dev->input_sens = BMI270_MAX_FEAT_IN;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2211      	movs	r2, #17
 8005f46:	765a      	strb	r2, [r3, #25]

            /* Assign maximum number of output sensors/
             * features to device structure
             */
            dev->out_sens = BMI270_MAX_FEAT_OUT;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2207      	movs	r2, #7
 8005f4c:	769a      	strb	r2, [r3, #26]

            /* Assign the offsets of the feature interrupt
             * to the device structure
             */
            dev->map_int = bmi270_map_int;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a0b      	ldr	r2, [pc, #44]	@ (8005f80 <bmi270_init+0xb8>)
 8005f52:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Assign maximum number of feature interrupts
             * to device structure
             */
            dev->sens_int_map = BMI270_MAX_INT_MAP;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2208      	movs	r2, #8
 8005f58:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            /* Get the gyroscope cross axis sensitivity */
            rslt = bmi2_get_gyro_cross_sense(dev);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7fe fbdc 	bl	800471a <bmi2_get_gyro_cross_sense>
 8005f62:	4603      	mov	r3, r0
 8005f64:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	08016648 	.word	0x08016648
 8005f78:	08018648 	.word	0x08018648
 8005f7c:	0801867c 	.word	0x0801867c
 8005f80:	20000080 	.word	0x20000080

08005f84 <bmi270_sensor_enable>:

/*!
 * @brief This API selects the sensors/features to be enabled.
 */
int8_t bmi270_sensor_enable(const uint8_t *sens_list, uint8_t n_sens, struct bmi2_dev *dev)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to select sensor */
    uint64_t sensor_sel = 0;
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	f04f 0300 	mov.w	r3, #0
 8005f9a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f990 	bl	80062c4 <null_ptr_check>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMI2_OK) && (sens_list != NULL))
 8005fa8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d117      	bne.n	8005fe0 <bmi270_sensor_enable+0x5c>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d014      	beq.n	8005fe0 <bmi270_sensor_enable+0x5c>
    {
        /* Get the selected sensors */
        rslt = select_sensor(sens_list, n_sens, &sensor_sel);
 8005fb6:	f107 0210 	add.w	r2, r7, #16
 8005fba:	7afb      	ldrb	r3, [r7, #11]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f9a0 	bl	8006304 <select_sensor>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005fc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <bmi270_sensor_enable+0x60>
        {
            /* Enable the selected sensors */
            rslt = sensor_enable(sensor_sel, dev);
 8005fd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	f000 fabd 	bl	8006554 <sensor_enable>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005fde:	e001      	b.n	8005fe4 <bmi270_sensor_enable+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005fe0:	23ff      	movs	r3, #255	@ 0xff
 8005fe2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005fe4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3720      	adds	r7, #32
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <bmi270_sensor_disable>:

/*!
 * @brief This API selects the sensors/features to be disabled.
 */
int8_t bmi270_sensor_disable(const uint8_t *sens_list, uint8_t n_sens, struct bmi2_dev *dev)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to select sensor */
    uint64_t sensor_sel = 0;
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f95a 	bl	80062c4 <null_ptr_check>
 8006010:	4603      	mov	r3, r0
 8006012:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMI2_OK) && (sens_list != NULL))
 8006014:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d117      	bne.n	800604c <bmi270_sensor_disable+0x5c>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d014      	beq.n	800604c <bmi270_sensor_disable+0x5c>
    {
        /* Get the selected sensors */
        rslt = select_sensor(sens_list, n_sens, &sensor_sel);
 8006022:	f107 0210 	add.w	r2, r7, #16
 8006026:	7afb      	ldrb	r3, [r7, #11]
 8006028:	4619      	mov	r1, r3
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f96a 	bl	8006304 <select_sensor>
 8006030:	4603      	mov	r3, r0
 8006032:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006034:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d109      	bne.n	8006050 <bmi270_sensor_disable+0x60>
        {
            /* Disable the selected sensors */
            rslt = sensor_disable(sensor_sel, dev);
 800603c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	f000 face 	bl	80065e2 <sensor_disable>
 8006046:	4603      	mov	r3, r0
 8006048:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800604a:	e001      	b.n	8006050 <bmi270_sensor_disable+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800604c:	23ff      	movs	r3, #255	@ 0xff
 800604e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006050:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3720      	adds	r7, #32
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <bmi270_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi270_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	460b      	mov	r3, r1
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 800606a:	2300      	movs	r3, #0
 800606c:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f928 	bl	80062c4 <null_ptr_check>
 8006074:	4603      	mov	r3, r0
 8006076:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8006078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d171      	bne.n	8006164 <bmi270_set_sensor_config+0x108>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d06e      	beq.n	8006164 <bmi270_set_sensor_config+0x108>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800608c:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 800608e:	2300      	movs	r3, #0
 8006090:	75bb      	strb	r3, [r7, #22]
 8006092:	e053      	b.n	800613c <bmi270_set_sensor_config+0xe0>
        {
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8006094:	7dba      	ldrb	r2, [r7, #22]
 8006096:	4613      	mov	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	461a      	mov	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d020      	beq.n	80060ec <bmi270_set_sensor_config+0x90>
 80060aa:	7dba      	ldrb	r2, [r7, #22]
 80060ac:	4613      	mov	r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	1a9b      	subs	r3, r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	461a      	mov	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d015      	beq.n	80060ec <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 80060c0:	7dba      	ldrb	r2, [r7, #22]
 80060c2:	4613      	mov	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	461a      	mov	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	781b      	ldrb	r3, [r3, #0]
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d00a      	beq.n	80060ec <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 80060d6:	7dba      	ldrb	r2, [r7, #22]
 80060d8:	4613      	mov	r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	461a      	mov	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b09      	cmp	r3, #9
 80060ea:	d10f      	bne.n	800610c <bmi270_set_sensor_config+0xb0>
            {
                rslt = bmi2_set_sensor_config(&sens_cfg[loop], 1, dev);
 80060ec:	7dba      	ldrb	r2, [r7, #22]
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	461a      	mov	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	2101      	movs	r1, #1
 8006100:	4618      	mov	r0, r3
 8006102:	f7fd fff1 	bl	80040e8 <bmi2_set_sensor_config>
 8006106:	4603      	mov	r3, r0
 8006108:	75fb      	strb	r3, [r7, #23]
 800610a:	e014      	b.n	8006136 <bmi270_set_sensor_config+0xda>
            else
            {
                /* Disable Advance power save if enabled for auxiliary
                 * and feature configurations
                 */
                if (aps_stat == BMI2_ENABLE)
 800610c:	7d7b      	ldrb	r3, [r7, #21]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d105      	bne.n	800611e <bmi270_set_sensor_config+0xc2>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	2000      	movs	r0, #0
 8006116:	f7fd fe5a 	bl	8003dce <bmi2_set_adv_power_save>
 800611a:	4603      	mov	r3, r0
 800611c:	75fb      	strb	r3, [r7, #23]
                }

                if (rslt == BMI2_OK)
 800611e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10f      	bne.n	8006146 <bmi270_set_sensor_config+0xea>
                {
                    rslt = set_feat_config(sens_cfg, loop, dev);
 8006126:	7dbb      	ldrb	r3, [r7, #22]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4619      	mov	r1, r3
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f002 f89f 	bl	8008270 <set_feat_config>
 8006132:	4603      	mov	r3, r0
 8006134:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 8006136:	7dbb      	ldrb	r3, [r7, #22]
 8006138:	3301      	adds	r3, #1
 800613a:	75bb      	strb	r3, [r7, #22]
 800613c:	7dba      	ldrb	r2, [r7, #22]
 800613e:	7afb      	ldrb	r3, [r7, #11]
 8006140:	429a      	cmp	r2, r3
 8006142:	d3a7      	bcc.n	8006094 <bmi270_set_sensor_config+0x38>
 8006144:	e000      	b.n	8006148 <bmi270_set_sensor_config+0xec>
                }
                /* Return error if any of the set configurations fail */
                else
                {
                    break;
 8006146:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8006148:	7d7b      	ldrb	r3, [r7, #21]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d10d      	bne.n	800616a <bmi270_set_sensor_config+0x10e>
 800614e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <bmi270_set_sensor_config+0x10e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	2001      	movs	r0, #1
 800615a:	f7fd fe38 	bl	8003dce <bmi2_set_adv_power_save>
 800615e:	4603      	mov	r3, r0
 8006160:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8006162:	e002      	b.n	800616a <bmi270_set_sensor_config+0x10e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8006164:	23ff      	movs	r3, #255	@ 0xff
 8006166:	75fb      	strb	r3, [r7, #23]
 8006168:	e000      	b.n	800616c <bmi270_set_sensor_config+0x110>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800616a:	bf00      	nop
    }

    return rslt;
 800616c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <bmi270_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi270_get_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	460b      	mov	r3, r1
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f89a 	bl	80062c4 <null_ptr_check>
 8006190:	4603      	mov	r3, r0
 8006192:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8006194:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f040 8089 	bne.w	80062b0 <bmi270_get_sensor_config+0x138>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 8085 	beq.w	80062b0 <bmi270_get_sensor_config+0x138>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80061ac:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 80061ae:	2300      	movs	r3, #0
 80061b0:	75bb      	strb	r3, [r7, #22]
 80061b2:	e069      	b.n	8006288 <bmi270_get_sensor_config+0x110>
        {
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 80061b4:	7dba      	ldrb	r2, [r7, #22]
 80061b6:	4613      	mov	r3, r2
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	461a      	mov	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d020      	beq.n	800620c <bmi270_get_sensor_config+0x94>
 80061ca:	7dba      	ldrb	r2, [r7, #22]
 80061cc:	4613      	mov	r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	461a      	mov	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d015      	beq.n	800620c <bmi270_get_sensor_config+0x94>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 80061e0:	7dba      	ldrb	r2, [r7, #22]
 80061e2:	4613      	mov	r3, r2
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	1a9b      	subs	r3, r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	461a      	mov	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	781b      	ldrb	r3, [r3, #0]
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d00a      	beq.n	800620c <bmi270_get_sensor_config+0x94>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 80061f6:	7dba      	ldrb	r2, [r7, #22]
 80061f8:	4613      	mov	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	461a      	mov	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b09      	cmp	r3, #9
 800620a:	d10f      	bne.n	800622c <bmi270_get_sensor_config+0xb4>
            {
                rslt = bmi2_get_sensor_config(&sens_cfg[loop], 1, dev);
 800620c:	7dba      	ldrb	r2, [r7, #22]
 800620e:	4613      	mov	r3, r2
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	1a9b      	subs	r3, r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	461a      	mov	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	2101      	movs	r1, #1
 8006220:	4618      	mov	r0, r3
 8006222:	f7fe f817 	bl	8004254 <bmi2_get_sensor_config>
 8006226:	4603      	mov	r3, r0
 8006228:	75fb      	strb	r3, [r7, #23]
 800622a:	e02a      	b.n	8006282 <bmi270_get_sensor_config+0x10a>
            else
            {
                /* Disable Advance power save if enabled for auxiliary
                 * and feature configurations
                 */
                if ((sens_cfg[loop].type >= BMI2_MAIN_SENS_MAX_NUM) || (sens_cfg[loop].type == BMI2_AUX))
 800622c:	7dba      	ldrb	r2, [r7, #22]
 800622e:	4613      	mov	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	461a      	mov	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b03      	cmp	r3, #3
 8006240:	d80a      	bhi.n	8006258 <bmi270_get_sensor_config+0xe0>
 8006242:	7dba      	ldrb	r2, [r7, #22]
 8006244:	4613      	mov	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	461a      	mov	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d108      	bne.n	800626a <bmi270_get_sensor_config+0xf2>
                {

                    if (aps_stat == BMI2_ENABLE)
 8006258:	7d7b      	ldrb	r3, [r7, #21]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d105      	bne.n	800626a <bmi270_get_sensor_config+0xf2>
                    {
                        /* Disable advance power save if
                         * enabled
                         */
                        rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	2000      	movs	r0, #0
 8006262:	f7fd fdb4 	bl	8003dce <bmi2_set_adv_power_save>
 8006266:	4603      	mov	r3, r0
 8006268:	75fb      	strb	r3, [r7, #23]
                    }
                }

                if (rslt == BMI2_OK)
 800626a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10f      	bne.n	8006292 <bmi270_get_sensor_config+0x11a>
                {
                    rslt = get_feat_config(sens_cfg, loop, dev);
 8006272:	7dbb      	ldrb	r3, [r7, #22]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	4619      	mov	r1, r3
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f002 f8c1 	bl	8008400 <get_feat_config>
 800627e:	4603      	mov	r3, r0
 8006280:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 8006282:	7dbb      	ldrb	r3, [r7, #22]
 8006284:	3301      	adds	r3, #1
 8006286:	75bb      	strb	r3, [r7, #22]
 8006288:	7dba      	ldrb	r2, [r7, #22]
 800628a:	7afb      	ldrb	r3, [r7, #11]
 800628c:	429a      	cmp	r2, r3
 800628e:	d391      	bcc.n	80061b4 <bmi270_get_sensor_config+0x3c>
 8006290:	e000      	b.n	8006294 <bmi270_get_sensor_config+0x11c>
                }
                /* Return error if any of the get configurations fail */
                else
                {
                    break;
 8006292:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8006294:	7d7b      	ldrb	r3, [r7, #21]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d10d      	bne.n	80062b6 <bmi270_get_sensor_config+0x13e>
 800629a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d109      	bne.n	80062b6 <bmi270_get_sensor_config+0x13e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	2001      	movs	r0, #1
 80062a6:	f7fd fd92 	bl	8003dce <bmi2_set_adv_power_save>
 80062aa:	4603      	mov	r3, r0
 80062ac:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80062ae:	e002      	b.n	80062b6 <bmi270_get_sensor_config+0x13e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80062b0:	23ff      	movs	r3, #255	@ 0xff
 80062b2:	75fb      	strb	r3, [r7, #23]
 80062b4:	e000      	b.n	80062b8 <bmi270_get_sensor_config+0x140>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80062b6:	bf00      	nop
    }

    return rslt;
 80062b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <null_ptr_check+0x2a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d007      	beq.n	80062ee <null_ptr_check+0x2a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <null_ptr_check+0x2a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 80062ee:	23ff      	movs	r3, #255	@ 0xff
 80062f0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80062f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <select_sensor>:
/*!
 * @brief This internal API selects the sensor/features to be enabled or
 * disabled.
 */
static int8_t select_sensor(const uint8_t *sens_list, uint8_t n_sens, uint64_t *sensor_sel)
{
 8006304:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006308:	b09d      	sub	sp, #116	@ 0x74
 800630a:	af00      	add	r7, sp, #0
 800630c:	6678      	str	r0, [r7, #100]	@ 0x64
 800630e:	460b      	mov	r3, r1
 8006310:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006312:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    /* Variable to define loop */
    uint8_t count;

    for (count = 0; count < n_sens; count++)
 800631c:	2300      	movs	r3, #0
 800631e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8006322:	e107      	b.n	8006534 <select_sensor+0x230>
    {
        switch (sens_list[count])
 8006324:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8006328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800632a:	4413      	add	r3, r2
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b22      	cmp	r3, #34	@ 0x22
 8006330:	f200 80f7 	bhi.w	8006522 <select_sensor+0x21e>
 8006334:	a201      	add	r2, pc, #4	@ (adr r2, 800633c <select_sensor+0x38>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	080063c9 	.word	0x080063c9
 8006340:	080063dd 	.word	0x080063dd
 8006344:	080063f1 	.word	0x080063f1
 8006348:	0800641f 	.word	0x0800641f
 800634c:	08006439 	.word	0x08006439
 8006350:	08006453 	.word	0x08006453
 8006354:	0800646d 	.word	0x0800646d
 8006358:	08006487 	.word	0x08006487
 800635c:	080064a1 	.word	0x080064a1
 8006360:	080064bb 	.word	0x080064bb
 8006364:	08006523 	.word	0x08006523
 8006368:	08006523 	.word	0x08006523
 800636c:	08006523 	.word	0x08006523
 8006370:	08006523 	.word	0x08006523
 8006374:	08006523 	.word	0x08006523
 8006378:	08006523 	.word	0x08006523
 800637c:	08006523 	.word	0x08006523
 8006380:	08006523 	.word	0x08006523
 8006384:	08006523 	.word	0x08006523
 8006388:	080064ef 	.word	0x080064ef
 800638c:	08006509 	.word	0x08006509
 8006390:	08006523 	.word	0x08006523
 8006394:	08006523 	.word	0x08006523
 8006398:	08006523 	.word	0x08006523
 800639c:	08006523 	.word	0x08006523
 80063a0:	08006523 	.word	0x08006523
 80063a4:	08006523 	.word	0x08006523
 80063a8:	08006523 	.word	0x08006523
 80063ac:	08006523 	.word	0x08006523
 80063b0:	08006523 	.word	0x08006523
 80063b4:	08006523 	.word	0x08006523
 80063b8:	08006523 	.word	0x08006523
 80063bc:	08006405 	.word	0x08006405
 80063c0:	08006523 	.word	0x08006523
 80063c4:	080064d5 	.word	0x080064d5
        {
            case BMI2_ACCEL:
                *sensor_sel |= BMI2_ACCEL_SENS_SEL;
 80063c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f042 0401 	orr.w	r4, r2, #1
 80063d2:	461d      	mov	r5, r3
 80063d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063d6:	e9c3 4500 	strd	r4, r5, [r3]
                break;
 80063da:	e0a6      	b.n	800652a <select_sensor+0x226>
            case BMI2_GYRO:
                *sensor_sel |= BMI2_GYRO_SENS_SEL;
 80063dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	f042 0802 	orr.w	r8, r2, #2
 80063e6:	4699      	mov	r9, r3
 80063e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063ea:	e9c3 8900 	strd	r8, r9, [r3]
                break;
 80063ee:	e09c      	b.n	800652a <select_sensor+0x226>
            case BMI2_AUX:
                *sensor_sel |= BMI2_AUX_SENS_SEL;
 80063f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f042 0a04 	orr.w	sl, r2, #4
 80063fa:	469b      	mov	fp, r3
 80063fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063fe:	e9c3 ab00 	strd	sl, fp, [r3]
                break;
 8006402:	e092      	b.n	800652a <select_sensor+0x226>
            case BMI2_TEMP:
                *sensor_sel |= BMI2_TEMP_SENS_SEL;
 8006404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	653a      	str	r2, [r7, #80]	@ 0x50
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	657b      	str	r3, [r7, #84]	@ 0x54
 8006412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006414:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006418:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 800641c:	e085      	b.n	800652a <select_sensor+0x226>
            case BMI2_SIG_MOTION:
                *sensor_sel |= BMI2_SIG_MOTION_SEL;
 800641e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f042 0108 	orr.w	r1, r2, #8
 8006428:	64b9      	str	r1, [r7, #72]	@ 0x48
 800642a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800642c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800642e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006432:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8006436:	e078      	b.n	800652a <select_sensor+0x226>
            case BMI2_ANY_MOTION:
                *sensor_sel |= BMI2_ANY_MOT_SEL;
 8006438:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f042 0110 	orr.w	r1, r2, #16
 8006442:	6439      	str	r1, [r7, #64]	@ 0x40
 8006444:	647b      	str	r3, [r7, #68]	@ 0x44
 8006446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006448:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800644c:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8006450:	e06b      	b.n	800652a <select_sensor+0x226>
            case BMI2_NO_MOTION:
                *sensor_sel |= BMI2_NO_MOT_SEL;
 8006452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f042 0120 	orr.w	r1, r2, #32
 800645c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006462:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006466:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 800646a:	e05e      	b.n	800652a <select_sensor+0x226>
            case BMI2_STEP_DETECTOR:
                *sensor_sel |= BMI2_STEP_DETECT_SEL;
 800646c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f042 0140 	orr.w	r1, r2, #64	@ 0x40
 8006476:	6339      	str	r1, [r7, #48]	@ 0x30
 8006478:	637b      	str	r3, [r7, #52]	@ 0x34
 800647a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800647c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006480:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8006484:	e051      	b.n	800652a <select_sensor+0x226>
            case BMI2_STEP_COUNTER:
                *sensor_sel |= BMI2_STEP_COUNT_SEL;
 8006486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f042 0180 	orr.w	r1, r2, #128	@ 0x80
 8006490:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006494:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006496:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800649a:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 800649e:	e044      	b.n	800652a <select_sensor+0x226>
            case BMI2_STEP_ACTIVITY:
                *sensor_sel |= BMI2_STEP_ACT_SEL;
 80064a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f442 7180 	orr.w	r1, r2, #256	@ 0x100
 80064aa:	6239      	str	r1, [r7, #32]
 80064ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80064ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80064b4:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 80064b8:	e037      	b.n	800652a <select_sensor+0x226>
            case BMI2_GYRO_GAIN_UPDATE:
                *sensor_sel |= BMI2_GYRO_GAIN_UPDATE_SEL;
 80064ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f442 7100 	orr.w	r1, r2, #512	@ 0x200
 80064c4:	61b9      	str	r1, [r7, #24]
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80064ce:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 80064d2:	e02a      	b.n	800652a <select_sensor+0x226>
            case BMI2_GYRO_SELF_OFF:
                *sensor_sel |= BMI2_GYRO_SELF_OFF_SEL;
 80064d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	613a      	str	r2, [r7, #16]
 80064dc:	f043 0304 	orr.w	r3, r3, #4
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80064e8:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 80064ec:	e01d      	b.n	800652a <select_sensor+0x226>
            case BMI2_WRIST_GESTURE:
                *sensor_sel |= BMI2_WRIST_GEST_SEL;
 80064ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f442 2100 	orr.w	r1, r2, #524288	@ 0x80000
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006502:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8006506:	e010      	b.n	800652a <select_sensor+0x226>
            case BMI2_WRIST_WEAR_WAKE_UP:
                *sensor_sel |= BMI2_WRIST_WEAR_WAKE_UP_SEL;
 8006508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f442 1180 	orr.w	r1, r2, #1048576	@ 0x100000
 8006512:	6039      	str	r1, [r7, #0]
 8006514:	607b      	str	r3, [r7, #4]
 8006516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006518:	e9d7 1200 	ldrd	r1, r2, [r7]
 800651c:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8006520:	e003      	b.n	800652a <select_sensor+0x226>
            default:
                rslt = BMI2_E_INVALID_SENSOR;
 8006522:	23f8      	movs	r3, #248	@ 0xf8
 8006524:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                break;
 8006528:	bf00      	nop
    for (count = 0; count < n_sens; count++)
 800652a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800652e:	3301      	adds	r3, #1
 8006530:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8006534:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8006538:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800653c:	429a      	cmp	r2, r3
 800653e:	f4ff aef1 	bcc.w	8006324 <select_sensor+0x20>
        }
    }

    return rslt;
 8006542:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8006546:	4618      	mov	r0, r3
 8006548:	3774      	adds	r7, #116	@ 0x74
 800654a:	46bd      	mov	sp, r7
 800654c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop

08006554 <sensor_enable>:

/*!
 * @brief This internal API enables the selected sensor/features.
 */
static int8_t sensor_enable(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8006554:	b5b0      	push	{r4, r5, r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	75bb      	strb	r3, [r7, #22]

    rslt = enable_main_sensors(sensor_sel, dev);
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800656a:	f002 f811 	bl	8008590 <enable_main_sensors>
 800656e:	4603      	mov	r3, r0
 8006570:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI2_OK) && (sensor_sel & ~(BMI2_MAIN_SENSORS)))
 8006572:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d12d      	bne.n	80065d6 <sensor_enable+0x82>
 800657a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800657e:	f022 0407 	bic.w	r4, r2, #7
 8006582:	f023 0501 	bic.w	r5, r3, #1
 8006586:	ea54 0305 	orrs.w	r3, r4, r5
 800658a:	d024      	beq.n	80065d6 <sensor_enable+0x82>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006592:	75bb      	strb	r3, [r7, #22]
        if (aps_stat == BMI2_ENABLE)
 8006594:	7dbb      	ldrb	r3, [r7, #22]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d105      	bne.n	80065a6 <sensor_enable+0x52>
        {
            /* Disable advance power save if enabled */
            rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	2000      	movs	r0, #0
 800659e:	f7fd fc16 	bl	8003dce <bmi2_set_adv_power_save>
 80065a2:	4603      	mov	r3, r0
 80065a4:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI2_OK)
 80065a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d113      	bne.n	80065d6 <sensor_enable+0x82>
        {
            rslt = enable_sensor_features(sensor_sel, dev);
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065b4:	f002 f861 	bl	800867a <enable_sensor_features>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80065bc:	7dbb      	ldrb	r3, [r7, #22]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d109      	bne.n	80065d6 <sensor_enable+0x82>
 80065c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d105      	bne.n	80065d6 <sensor_enable+0x82>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	2001      	movs	r0, #1
 80065ce:	f7fd fbfe 	bl	8003dce <bmi2_set_adv_power_save>
 80065d2:	4603      	mov	r3, r0
 80065d4:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 80065d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bdb0      	pop	{r4, r5, r7, pc}

080065e2 <sensor_disable>:

/*!
 * @brief This internal API disables the selected sensors/features.
 */
static int8_t sensor_disable(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 80065e2:	b5b0      	push	{r4, r5, r7, lr}
 80065e4:	b086      	sub	sp, #24
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80065ec:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	75bb      	strb	r3, [r7, #22]

    rslt = disable_main_sensors(sensor_sel, dev);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065f8:	f002 f904 	bl	8008804 <disable_main_sensors>
 80065fc:	4603      	mov	r3, r0
 80065fe:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI2_OK) && (sensor_sel & ~(BMI2_MAIN_SENSORS)))
 8006600:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d12d      	bne.n	8006664 <sensor_disable+0x82>
 8006608:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800660c:	f022 0407 	bic.w	r4, r2, #7
 8006610:	f023 0501 	bic.w	r5, r3, #1
 8006614:	ea54 0305 	orrs.w	r3, r4, r5
 8006618:	d024      	beq.n	8006664 <sensor_disable+0x82>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006620:	75bb      	strb	r3, [r7, #22]
        if (aps_stat == BMI2_ENABLE)
 8006622:	7dbb      	ldrb	r3, [r7, #22]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d105      	bne.n	8006634 <sensor_disable+0x52>
        {
            /* Disable advance power save if enabled */
            rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	2000      	movs	r0, #0
 800662c:	f7fd fbcf 	bl	8003dce <bmi2_set_adv_power_save>
 8006630:	4603      	mov	r3, r0
 8006632:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI2_OK)
 8006634:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d113      	bne.n	8006664 <sensor_disable+0x82>
        {
            rslt = disable_sensor_features(sensor_sel, dev);
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006642:	f002 f954 	bl	80088ee <disable_sensor_features>
 8006646:	4603      	mov	r3, r0
 8006648:	75fb      	strb	r3, [r7, #23]

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800664a:	7dbb      	ldrb	r3, [r7, #22]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d109      	bne.n	8006664 <sensor_disable+0x82>
 8006650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d105      	bne.n	8006664 <sensor_disable+0x82>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	2001      	movs	r0, #1
 800665c:	f7fd fbb7 	bl	8003dce <bmi2_set_adv_power_save>
 8006660:	4603      	mov	r3, r0
 8006662:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8006664:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bdb0      	pop	{r4, r5, r7, pc}

08006670 <set_any_motion>:

/*!
 * @brief This internal API is used to enable/disable any motion feature.
 */
static int8_t set_any_motion(uint8_t enable, struct bmi2_dev *dev)
{
 8006670:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006674:	b088      	sub	sp, #32
 8006676:	af00      	add	r7, sp, #0
 8006678:	4603      	mov	r3, r0
 800667a:	6039      	str	r1, [r7, #0]
 800667c:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800667e:	f107 030c 	add.w	r3, r7, #12
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	605a      	str	r2, [r3, #4]
 8006688:	609a      	str	r2, [r3, #8]
 800668a:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any-motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 8006690:	2300      	movs	r3, #0
 8006692:	723b      	strb	r3, [r7, #8]
 8006694:	2300      	movs	r3, #0
 8006696:	727b      	strb	r3, [r7, #9]
 8006698:	2300      	movs	r3, #0
 800669a:	72bb      	strb	r3, [r7, #10]

    /* Search for any-motion feature and extract its configurations details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 800669c:	f107 0308 	add.w	r3, r7, #8
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	2104      	movs	r1, #4
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe f92a 	bl	80048fe <bmi2_extract_input_feat_config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 80066ae:	7f7b      	ldrb	r3, [r7, #29]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d048      	beq.n	8006746 <set_any_motion+0xd6>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 80066b4:	7a7b      	ldrb	r3, [r7, #9]
 80066b6:	f107 010c 	add.w	r1, r7, #12
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fe f88c 	bl	80047da <bmi2_get_feat_config>
 80066c2:	4603      	mov	r3, r0
 80066c4:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80066c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d13d      	bne.n	800674a <set_any_motion+0xda>
        {
            /* Define the offset for enable/disable of any-motion axes */
            idx = any_mot_config.start_addr + BMI2_ANY_MOT_FEAT_EN_OFFSET;
 80066ce:	7abb      	ldrb	r3, [r7, #10]
 80066d0:	3303      	adds	r3, #3
 80066d2:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_ANY_NO_MOT_EN, enable);
 80066d4:	7fbb      	ldrb	r3, [r7, #30]
 80066d6:	3320      	adds	r3, #32
 80066d8:	443b      	add	r3, r7
 80066da:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80066de:	b25b      	sxtb	r3, r3
 80066e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066e4:	b25a      	sxtb	r2, r3
 80066e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ea:	01db      	lsls	r3, r3, #7
 80066ec:	b25b      	sxtb	r3, r3
 80066ee:	4313      	orrs	r3, r2
 80066f0:	b25a      	sxtb	r2, r3
 80066f2:	7fbb      	ldrb	r3, [r7, #30]
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	3320      	adds	r3, #32
 80066f8:	443b      	add	r3, r7
 80066fa:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80066fe:	f107 010c 	add.w	r1, r7, #12
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2210      	movs	r2, #16
 8006706:	2030      	movs	r0, #48	@ 0x30
 8006708:	f7fd fa8d 	bl	8003c26 <bmi2_set_regs>
 800670c:	4603      	mov	r3, r0
 800670e:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10c      	bne.n	8006732 <set_any_motion+0xc2>
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d109      	bne.n	8006732 <set_any_motion+0xc2>
            {
                dev->sens_en_stat |= BMI2_ANY_MOT_SEL;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006724:	f042 0810 	orr.w	r8, r2, #16
 8006728:	4699      	mov	r9, r3
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006730:	e00b      	b.n	800674a <set_any_motion+0xda>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_ANY_MOT_SEL;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006738:	f022 0410 	bic.w	r4, r2, #16
 800673c:	461d      	mov	r5, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006744:	e001      	b.n	800674a <set_any_motion+0xda>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006746:	23f8      	movs	r3, #248	@ 0xf8
 8006748:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800674a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3720      	adds	r7, #32
 8006752:	46bd      	mov	sp, r7
 8006754:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006758 <set_no_motion>:

/*!
 * @brief This internal API is used to enable/disable no-motion feature.
 */
static int8_t set_no_motion(uint8_t enable, struct bmi2_dev *dev)
{
 8006758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800675c:	b088      	sub	sp, #32
 800675e:	af00      	add	r7, sp, #0
 8006760:	4603      	mov	r3, r0
 8006762:	6039      	str	r1, [r7, #0]
 8006764:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006766:	f107 030c 	add.w	r3, r7, #12
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	605a      	str	r2, [r3, #4]
 8006770:	609a      	str	r2, [r3, #8]
 8006772:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 8006778:	2300      	movs	r3, #0
 800677a:	723b      	strb	r3, [r7, #8]
 800677c:	2300      	movs	r3, #0
 800677e:	727b      	strb	r3, [r7, #9]
 8006780:	2300      	movs	r3, #0
 8006782:	72bb      	strb	r3, [r7, #10]

    /* Search for no-motion feature and extract its configurations details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 8006784:	f107 0308 	add.w	r3, r7, #8
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	2105      	movs	r1, #5
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe f8b6 	bl	80048fe <bmi2_extract_input_feat_config>
 8006792:	4603      	mov	r3, r0
 8006794:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006796:	7f7b      	ldrb	r3, [r7, #29]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d048      	beq.n	800682e <set_no_motion+0xd6>
    {
        /* Get the configuration from the page where any/no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 800679c:	7a7b      	ldrb	r3, [r7, #9]
 800679e:	f107 010c 	add.w	r1, r7, #12
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fe f818 	bl	80047da <bmi2_get_feat_config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80067ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d13d      	bne.n	8006832 <set_no_motion+0xda>
        {
            /* Define the offset for enable/disable of no-motion axes */
            idx = no_mot_config.start_addr + BMI2_NO_MOT_FEAT_EN_OFFSET;
 80067b6:	7abb      	ldrb	r3, [r7, #10]
 80067b8:	3303      	adds	r3, #3
 80067ba:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_ANY_NO_MOT_EN, enable);
 80067bc:	7fbb      	ldrb	r3, [r7, #30]
 80067be:	3320      	adds	r3, #32
 80067c0:	443b      	add	r3, r7
 80067c2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80067c6:	b25b      	sxtb	r3, r3
 80067c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067cc:	b25a      	sxtb	r2, r3
 80067ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d2:	01db      	lsls	r3, r3, #7
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	4313      	orrs	r3, r2
 80067d8:	b25a      	sxtb	r2, r3
 80067da:	7fbb      	ldrb	r3, [r7, #30]
 80067dc:	b2d2      	uxtb	r2, r2
 80067de:	3320      	adds	r3, #32
 80067e0:	443b      	add	r3, r7
 80067e2:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80067e6:	f107 010c 	add.w	r1, r7, #12
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2210      	movs	r2, #16
 80067ee:	2030      	movs	r0, #48	@ 0x30
 80067f0:	f7fd fa19 	bl	8003c26 <bmi2_set_regs>
 80067f4:	4603      	mov	r3, r0
 80067f6:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80067f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10c      	bne.n	800681a <set_no_motion+0xc2>
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d109      	bne.n	800681a <set_no_motion+0xc2>
            {
                dev->sens_en_stat |= BMI2_NO_MOT_SEL;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800680c:	f042 0820 	orr.w	r8, r2, #32
 8006810:	4699      	mov	r9, r3
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006818:	e00b      	b.n	8006832 <set_no_motion+0xda>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_NO_MOT_SEL;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006820:	f022 0420 	bic.w	r4, r2, #32
 8006824:	461d      	mov	r5, r3
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 800682c:	e001      	b.n	8006832 <set_no_motion+0xda>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800682e:	23f8      	movs	r3, #248	@ 0xf8
 8006830:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006832:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006840 <set_step_detector>:

/*!
 * @brief This internal API is used to enable/disable step detector feature.
 */
static int8_t set_step_detector(uint8_t enable, struct bmi2_dev *dev)
{
 8006840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006844:	b088      	sub	sp, #32
 8006846:	af00      	add	r7, sp, #0
 8006848:	4603      	mov	r3, r0
 800684a:	6039      	str	r1, [r7, #0]
 800684c:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800684e:	f107 030c 	add.w	r3, r7, #12
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	605a      	str	r2, [r3, #4]
 8006858:	609a      	str	r2, [r3, #8]
 800685a:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step detector */
    struct bmi2_feature_config step_det_config = { 0, 0, 0 };
 8006860:	2300      	movs	r3, #0
 8006862:	723b      	strb	r3, [r7, #8]
 8006864:	2300      	movs	r3, #0
 8006866:	727b      	strb	r3, [r7, #9]
 8006868:	2300      	movs	r3, #0
 800686a:	72bb      	strb	r3, [r7, #10]

    /* Search for step detector feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_det_config, BMI2_STEP_DETECTOR, dev);
 800686c:	f107 0308 	add.w	r3, r7, #8
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	2106      	movs	r1, #6
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe f842 	bl	80048fe <bmi2_extract_input_feat_config>
 800687a:	4603      	mov	r3, r0
 800687c:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 800687e:	7f7b      	ldrb	r3, [r7, #29]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d04b      	beq.n	800691c <set_step_detector+0xdc>
    {
        /* Get the configuration from the page where step detector feature resides */
        rslt = bmi2_get_feat_config(step_det_config.page, feat_config, dev);
 8006884:	7a7b      	ldrb	r3, [r7, #9]
 8006886:	f107 010c 	add.w	r1, r7, #12
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f7fd ffa4 	bl	80047da <bmi2_get_feat_config>
 8006892:	4603      	mov	r3, r0
 8006894:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006896:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d140      	bne.n	8006920 <set_step_detector+0xe0>
        {
            /* Define the offset for enable/disable of step detector */
            idx = step_det_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 800689e:	7abb      	ldrb	r3, [r7, #10]
 80068a0:	3301      	adds	r3, #1
 80068a2:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_DET_FEAT_EN, enable);
 80068a4:	7fbb      	ldrb	r3, [r7, #30]
 80068a6:	3320      	adds	r3, #32
 80068a8:	443b      	add	r3, r7
 80068aa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80068ae:	b25b      	sxtb	r3, r3
 80068b0:	f023 0308 	bic.w	r3, r3, #8
 80068b4:	b25a      	sxtb	r2, r3
 80068b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	b25b      	sxtb	r3, r3
 80068c4:	4313      	orrs	r3, r2
 80068c6:	b25a      	sxtb	r2, r3
 80068c8:	7fbb      	ldrb	r3, [r7, #30]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	3320      	adds	r3, #32
 80068ce:	443b      	add	r3, r7
 80068d0:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80068d4:	f107 010c 	add.w	r1, r7, #12
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2210      	movs	r2, #16
 80068dc:	2030      	movs	r0, #48	@ 0x30
 80068de:	f7fd f9a2 	bl	8003c26 <bmi2_set_regs>
 80068e2:	4603      	mov	r3, r0
 80068e4:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80068e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10c      	bne.n	8006908 <set_step_detector+0xc8>
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d109      	bne.n	8006908 <set_step_detector+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_DETECT_SEL;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80068fa:	f042 0840 	orr.w	r8, r2, #64	@ 0x40
 80068fe:	4699      	mov	r9, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006906:	e00b      	b.n	8006920 <set_step_detector+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_DETECT_SEL;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800690e:	f022 0440 	bic.w	r4, r2, #64	@ 0x40
 8006912:	461d      	mov	r5, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 800691a:	e001      	b.n	8006920 <set_step_detector+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800691c:	23f8      	movs	r3, #248	@ 0xf8
 800691e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006920:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3720      	adds	r7, #32
 8006928:	46bd      	mov	sp, r7
 800692a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800692e <set_step_counter>:

/*!
 * @brief This internal API is used to enable/disable step counter feature.
 */
static int8_t set_step_counter(uint8_t enable, struct bmi2_dev *dev)
{
 800692e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800693c:	f107 030c 	add.w	r3, r7, #12
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	605a      	str	r2, [r3, #4]
 8006946:	609a      	str	r2, [r3, #8]
 8006948:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 800694e:	2300      	movs	r3, #0
 8006950:	723b      	strb	r3, [r7, #8]
 8006952:	2300      	movs	r3, #0
 8006954:	727b      	strb	r3, [r7, #9]
 8006956:	2300      	movs	r3, #0
 8006958:	72bb      	strb	r3, [r7, #10]

    /* Search for step counter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 800695a:	f107 0308 	add.w	r3, r7, #8
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	2107      	movs	r1, #7
 8006962:	4618      	mov	r0, r3
 8006964:	f7fd ffcb 	bl	80048fe <bmi2_extract_input_feat_config>
 8006968:	4603      	mov	r3, r0
 800696a:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 800696c:	7f7b      	ldrb	r3, [r7, #29]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d04b      	beq.n	8006a0a <set_step_counter+0xdc>
    {
        /* Get the configuration from the page where step-counter feature resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 8006972:	7a7b      	ldrb	r3, [r7, #9]
 8006974:	f107 010c 	add.w	r1, r7, #12
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7fd ff2d 	bl	80047da <bmi2_get_feat_config>
 8006980:	4603      	mov	r3, r0
 8006982:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006984:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d140      	bne.n	8006a0e <set_step_counter+0xe0>
        {
            /* Define the offset for enable/disable of step counter */
            idx = step_count_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 800698c:	7abb      	ldrb	r3, [r7, #10]
 800698e:	3301      	adds	r3, #1
 8006990:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_COUNT_FEAT_EN, enable);
 8006992:	7fbb      	ldrb	r3, [r7, #30]
 8006994:	3320      	adds	r3, #32
 8006996:	443b      	add	r3, r7
 8006998:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800699c:	b25b      	sxtb	r3, r3
 800699e:	f023 0310 	bic.w	r3, r3, #16
 80069a2:	b25a      	sxtb	r2, r3
 80069a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	b25b      	sxtb	r3, r3
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	b25b      	sxtb	r3, r3
 80069b2:	4313      	orrs	r3, r2
 80069b4:	b25a      	sxtb	r2, r3
 80069b6:	7fbb      	ldrb	r3, [r7, #30]
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	3320      	adds	r3, #32
 80069bc:	443b      	add	r3, r7
 80069be:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80069c2:	f107 010c 	add.w	r1, r7, #12
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2210      	movs	r2, #16
 80069ca:	2030      	movs	r0, #48	@ 0x30
 80069cc:	f7fd f92b 	bl	8003c26 <bmi2_set_regs>
 80069d0:	4603      	mov	r3, r0
 80069d2:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80069d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10c      	bne.n	80069f6 <set_step_counter+0xc8>
 80069dc:	79fb      	ldrb	r3, [r7, #7]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d109      	bne.n	80069f6 <set_step_counter+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_COUNT_SEL;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80069e8:	f042 0880 	orr.w	r8, r2, #128	@ 0x80
 80069ec:	4699      	mov	r9, r3
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 80069f4:	e00b      	b.n	8006a0e <set_step_counter+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_COUNT_SEL;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80069fc:	f022 0480 	bic.w	r4, r2, #128	@ 0x80
 8006a00:	461d      	mov	r5, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006a08:	e001      	b.n	8006a0e <set_step_counter+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006a0a:	23f8      	movs	r3, #248	@ 0xf8
 8006a0c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006a0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3720      	adds	r7, #32
 8006a16:	46bd      	mov	sp, r7
 8006a18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006a1c <set_sig_motion>:

/*!
 * @brief This internal API is used to enable/disable sig-motion feature.
 */
static int8_t set_sig_motion(uint8_t enable, struct bmi2_dev *dev)
{
 8006a1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a20:	b088      	sub	sp, #32
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	4603      	mov	r3, r0
 8006a26:	6039      	str	r1, [r7, #0]
 8006a28:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006a2a:	f107 030c 	add.w	r3, r7, #12
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	605a      	str	r2, [r3, #4]
 8006a34:	609a      	str	r2, [r3, #8]
 8006a36:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	723b      	strb	r3, [r7, #8]
 8006a40:	2300      	movs	r3, #0
 8006a42:	727b      	strb	r3, [r7, #9]
 8006a44:	2300      	movs	r3, #0
 8006a46:	72bb      	strb	r3, [r7, #10]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 8006a48:	f107 0308 	add.w	r3, r7, #8
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	2103      	movs	r1, #3
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fd ff54 	bl	80048fe <bmi2_extract_input_feat_config>
 8006a56:	4603      	mov	r3, r0
 8006a58:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006a5a:	7f7b      	ldrb	r3, [r7, #29]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d049      	beq.n	8006af4 <set_sig_motion+0xd8>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 8006a60:	7a7b      	ldrb	r3, [r7, #9]
 8006a62:	f107 010c 	add.w	r1, r7, #12
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fd feb6 	bl	80047da <bmi2_get_feat_config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006a72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d13e      	bne.n	8006af8 <set_sig_motion+0xdc>
        {
            /* Define the offset for enable/disable of sig-motion */
            idx = sig_mot_config.start_addr + BMI2_SIG_MOT_FEAT_EN_OFFSET;
 8006a7a:	7abb      	ldrb	r3, [r7, #10]
 8006a7c:	330a      	adds	r3, #10
 8006a7e:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BIT_POS0(feat_config[idx], BMI2_SIG_MOT_FEAT_EN, enable);
 8006a80:	7fbb      	ldrb	r3, [r7, #30]
 8006a82:	3320      	adds	r3, #32
 8006a84:	443b      	add	r3, r7
 8006a86:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006a8a:	b25b      	sxtb	r3, r3
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	b25a      	sxtb	r2, r3
 8006a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	b25b      	sxtb	r3, r3
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	b25a      	sxtb	r2, r3
 8006aa0:	7fbb      	ldrb	r3, [r7, #30]
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	3320      	adds	r3, #32
 8006aa6:	443b      	add	r3, r7
 8006aa8:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006aac:	f107 010c 	add.w	r1, r7, #12
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2210      	movs	r2, #16
 8006ab4:	2030      	movs	r0, #48	@ 0x30
 8006ab6:	f7fd f8b6 	bl	8003c26 <bmi2_set_regs>
 8006aba:	4603      	mov	r3, r0
 8006abc:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006abe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10c      	bne.n	8006ae0 <set_sig_motion+0xc4>
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d109      	bne.n	8006ae0 <set_sig_motion+0xc4>
            {
                dev->sens_en_stat |= BMI2_SIG_MOTION_SEL;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006ad2:	f042 0808 	orr.w	r8, r2, #8
 8006ad6:	4699      	mov	r9, r3
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006ade:	e00b      	b.n	8006af8 <set_sig_motion+0xdc>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_SIG_MOTION_SEL;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006ae6:	f022 0408 	bic.w	r4, r2, #8
 8006aea:	461d      	mov	r5, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006af2:	e001      	b.n	8006af8 <set_sig_motion+0xdc>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006af4:	23f8      	movs	r3, #248	@ 0xf8
 8006af6:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006af8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3720      	adds	r7, #32
 8006b00:	46bd      	mov	sp, r7
 8006b02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006b06 <set_step_activity>:

/*!
 * @brief This internal API is used to enable/disable step activity detection.
 */
static int8_t set_step_activity(uint8_t enable, struct bmi2_dev *dev)
{
 8006b06:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	6039      	str	r1, [r7, #0]
 8006b12:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006b14:	f107 030c 	add.w	r3, r7, #12
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	605a      	str	r2, [r3, #4]
 8006b1e:	609a      	str	r2, [r3, #8]
 8006b20:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step activity */
    struct bmi2_feature_config step_act_config = { 0, 0, 0 };
 8006b26:	2300      	movs	r3, #0
 8006b28:	723b      	strb	r3, [r7, #8]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	727b      	strb	r3, [r7, #9]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	72bb      	strb	r3, [r7, #10]

    /* Search for step activity feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_act_config, BMI2_STEP_ACTIVITY, dev);
 8006b32:	f107 0308 	add.w	r3, r7, #8
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	2108      	movs	r1, #8
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fd fedf 	bl	80048fe <bmi2_extract_input_feat_config>
 8006b40:	4603      	mov	r3, r0
 8006b42:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006b44:	7f7b      	ldrb	r3, [r7, #29]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d04b      	beq.n	8006be2 <set_step_activity+0xdc>
    {
        /* Get the configuration from the page where step-activity
         * feature resides
         */
        rslt = bmi2_get_feat_config(step_act_config.page, feat_config, dev);
 8006b4a:	7a7b      	ldrb	r3, [r7, #9]
 8006b4c:	f107 010c 	add.w	r1, r7, #12
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fd fe41 	bl	80047da <bmi2_get_feat_config>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006b5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d140      	bne.n	8006be6 <set_step_activity+0xe0>
        {
            /* Define the offset for enable/disable of step activity */
            idx = step_act_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 8006b64:	7abb      	ldrb	r3, [r7, #10]
 8006b66:	3301      	adds	r3, #1
 8006b68:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_ACT_FEAT_EN, enable);
 8006b6a:	7fbb      	ldrb	r3, [r7, #30]
 8006b6c:	3320      	adds	r3, #32
 8006b6e:	443b      	add	r3, r7
 8006b70:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006b74:	b25b      	sxtb	r3, r3
 8006b76:	f023 0320 	bic.w	r3, r3, #32
 8006b7a:	b25a      	sxtb	r2, r3
 8006b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b80:	015b      	lsls	r3, r3, #5
 8006b82:	b25b      	sxtb	r3, r3
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	b25b      	sxtb	r3, r3
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	b25a      	sxtb	r2, r3
 8006b8e:	7fbb      	ldrb	r3, [r7, #30]
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	3320      	adds	r3, #32
 8006b94:	443b      	add	r3, r7
 8006b96:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006b9a:	f107 010c 	add.w	r1, r7, #12
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2210      	movs	r2, #16
 8006ba2:	2030      	movs	r0, #48	@ 0x30
 8006ba4:	f7fd f83f 	bl	8003c26 <bmi2_set_regs>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006bac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10c      	bne.n	8006bce <set_step_activity+0xc8>
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d109      	bne.n	8006bce <set_step_activity+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_ACT_SEL;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006bc0:	f442 7880 	orr.w	r8, r2, #256	@ 0x100
 8006bc4:	4699      	mov	r9, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006bcc:	e00b      	b.n	8006be6 <set_step_activity+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_ACT_SEL;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006bd4:	f422 7480 	bic.w	r4, r2, #256	@ 0x100
 8006bd8:	461d      	mov	r5, r3
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006be0:	e001      	b.n	8006be6 <set_step_activity+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006be2:	23f8      	movs	r3, #248	@ 0xf8
 8006be4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006be6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006bf4 <set_gyro_self_offset_corr>:
/*!
 * @brief This internal API gives an option to enable self-offset correction
 * feature of gyroscope, either internally or by the host.
 */
static int8_t set_gyro_self_offset_corr(uint8_t enable, struct bmi2_dev *dev)
{
 8006bf4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006bf8:	b088      	sub	sp, #32
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	6039      	str	r1, [r7, #0]
 8006c00:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006c02:	f107 030c 	add.w	r3, r7, #12
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	605a      	str	r2, [r3, #4]
 8006c0c:	609a      	str	r2, [r3, #8]
 8006c0e:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for self-offset correction */
    struct bmi2_feature_config self_off_corr_cfg = { 0, 0, 0 };
 8006c14:	2300      	movs	r3, #0
 8006c16:	723b      	strb	r3, [r7, #8]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	727b      	strb	r3, [r7, #9]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	72bb      	strb	r3, [r7, #10]

    /* Search for self-offset correction and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&self_off_corr_cfg, BMI2_GYRO_SELF_OFF, dev);
 8006c20:	f107 0308 	add.w	r3, r7, #8
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	2122      	movs	r1, #34	@ 0x22
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fd fe68 	bl	80048fe <bmi2_extract_input_feat_config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006c32:	7f7b      	ldrb	r3, [r7, #29]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d04a      	beq.n	8006cce <set_gyro_self_offset_corr+0xda>
    {
        /* Get the configuration from the page where self-offset
         * correction feature resides
         */
        rslt = bmi2_get_feat_config(self_off_corr_cfg.page, feat_config, dev);
 8006c38:	7a7b      	ldrb	r3, [r7, #9]
 8006c3a:	f107 010c 	add.w	r1, r7, #12
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fd fdca 	bl	80047da <bmi2_get_feat_config>
 8006c46:	4603      	mov	r3, r0
 8006c48:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006c4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d13f      	bne.n	8006cd2 <set_gyro_self_offset_corr+0xde>
        {
            /* Define the offset for enable/disable of self-offset correction */
            idx = self_off_corr_cfg.start_addr;
 8006c52:	7abb      	ldrb	r3, [r7, #10]
 8006c54:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_GYR_SELF_OFF_CORR_FEAT_EN, enable);
 8006c56:	7fbb      	ldrb	r3, [r7, #30]
 8006c58:	3320      	adds	r3, #32
 8006c5a:	443b      	add	r3, r7
 8006c5c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006c60:	b25b      	sxtb	r3, r3
 8006c62:	f023 0302 	bic.w	r3, r3, #2
 8006c66:	b25a      	sxtb	r2, r3
 8006c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	b25b      	sxtb	r3, r3
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	4313      	orrs	r3, r2
 8006c78:	b25a      	sxtb	r2, r3
 8006c7a:	7fbb      	ldrb	r3, [r7, #30]
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	3320      	adds	r3, #32
 8006c80:	443b      	add	r3, r7
 8006c82:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006c86:	f107 010c 	add.w	r1, r7, #12
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2210      	movs	r2, #16
 8006c8e:	2030      	movs	r0, #48	@ 0x30
 8006c90:	f7fc ffc9 	bl	8003c26 <bmi2_set_regs>
 8006c94:	4603      	mov	r3, r0
 8006c96:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006c98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10c      	bne.n	8006cba <set_gyro_self_offset_corr+0xc6>
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d109      	bne.n	8006cba <set_gyro_self_offset_corr+0xc6>
            {
                dev->sens_en_stat |= BMI2_GYRO_SELF_OFF_SEL;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006cac:	4690      	mov	r8, r2
 8006cae:	f043 0904 	orr.w	r9, r3, #4
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006cb8:	e00b      	b.n	8006cd2 <set_gyro_self_offset_corr+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_GYRO_SELF_OFF_SEL;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	f023 0504 	bic.w	r5, r3, #4
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006ccc:	e001      	b.n	8006cd2 <set_gyro_self_offset_corr+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006cce:	23f8      	movs	r3, #248	@ 0xf8
 8006cd0:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006cd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3720      	adds	r7, #32
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006ce0 <set_wrist_gesture>:

/*!
 * @brief This internal API enables the wrist gesture feature.
 */
static int8_t set_wrist_gesture(uint8_t enable, struct bmi2_dev *dev)
{
 8006ce0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006ce4:	b088      	sub	sp, #32
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	4603      	mov	r3, r0
 8006cea:	6039      	str	r1, [r7, #0]
 8006cec:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006cee:	f107 030c 	add.w	r3, r7, #12
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	605a      	str	r2, [r3, #4]
 8006cf8:	609a      	str	r2, [r3, #8]
 8006cfa:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_cfg = { 0, 0, 0 };
 8006d00:	2300      	movs	r3, #0
 8006d02:	723b      	strb	r3, [r7, #8]
 8006d04:	2300      	movs	r3, #0
 8006d06:	727b      	strb	r3, [r7, #9]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	72bb      	strb	r3, [r7, #10]

    /* Search for wrist gesture and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_cfg, BMI2_WRIST_GESTURE, dev);
 8006d0c:	f107 0308 	add.w	r3, r7, #8
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	2113      	movs	r1, #19
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fd fdf2 	bl	80048fe <bmi2_extract_input_feat_config>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006d1e:	7f7b      	ldrb	r3, [r7, #29]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d04a      	beq.n	8006dba <set_wrist_gesture+0xda>
    {
        /* Get the configuration from the page where wrist gesture feature resides */
        rslt = bmi2_get_feat_config(wrist_gest_cfg.page, feat_config, dev);
 8006d24:	7a7b      	ldrb	r3, [r7, #9]
 8006d26:	f107 010c 	add.w	r1, r7, #12
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fd fd54 	bl	80047da <bmi2_get_feat_config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006d36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d13f      	bne.n	8006dbe <set_wrist_gesture+0xde>
        {
            /* Define the offset for enable/disable of wrist gesture */
            idx = wrist_gest_cfg.start_addr;
 8006d3e:	7abb      	ldrb	r3, [r7, #10]
 8006d40:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_WRIST_GEST_FEAT_EN, enable);
 8006d42:	7fbb      	ldrb	r3, [r7, #30]
 8006d44:	3320      	adds	r3, #32
 8006d46:	443b      	add	r3, r7
 8006d48:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006d4c:	b25b      	sxtb	r3, r3
 8006d4e:	f023 0320 	bic.w	r3, r3, #32
 8006d52:	b25a      	sxtb	r2, r3
 8006d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d58:	015b      	lsls	r3, r3, #5
 8006d5a:	b25b      	sxtb	r3, r3
 8006d5c:	f003 0320 	and.w	r3, r3, #32
 8006d60:	b25b      	sxtb	r3, r3
 8006d62:	4313      	orrs	r3, r2
 8006d64:	b25a      	sxtb	r2, r3
 8006d66:	7fbb      	ldrb	r3, [r7, #30]
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	3320      	adds	r3, #32
 8006d6c:	443b      	add	r3, r7
 8006d6e:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006d72:	f107 010c 	add.w	r1, r7, #12
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2210      	movs	r2, #16
 8006d7a:	2030      	movs	r0, #48	@ 0x30
 8006d7c:	f7fc ff53 	bl	8003c26 <bmi2_set_regs>
 8006d80:	4603      	mov	r3, r0
 8006d82:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006d84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10c      	bne.n	8006da6 <set_wrist_gesture+0xc6>
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d109      	bne.n	8006da6 <set_wrist_gesture+0xc6>
            {
                dev->sens_en_stat |= BMI2_WRIST_GEST_SEL;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006d98:	f442 2800 	orr.w	r8, r2, #524288	@ 0x80000
 8006d9c:	4699      	mov	r9, r3
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006da4:	e00b      	b.n	8006dbe <set_wrist_gesture+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_WRIST_GEST_SEL;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006dac:	f422 2400 	bic.w	r4, r2, #524288	@ 0x80000
 8006db0:	461d      	mov	r5, r3
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006db8:	e001      	b.n	8006dbe <set_wrist_gesture+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006dba:	23f8      	movs	r3, #248	@ 0xf8
 8006dbc:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006dbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006dcc <set_wrist_wear_wake_up>:

/*!
 * @brief This internal API enables the wrist wear wake up feature.
 */
static int8_t set_wrist_wear_wake_up(uint8_t enable, struct bmi2_dev *dev)
{
 8006dcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006dd0:	b088      	sub	sp, #32
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	6039      	str	r1, [r7, #0]
 8006dd8:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006dda:	f107 030c 	add.w	r3, r7, #12
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	605a      	str	r2, [r3, #4]
 8006de4:	609a      	str	r2, [r3, #8]
 8006de6:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake up */
    struct bmi2_feature_config wrist_wake_up_cfg = { 0, 0, 0 };
 8006dec:	2300      	movs	r3, #0
 8006dee:	723b      	strb	r3, [r7, #8]
 8006df0:	2300      	movs	r3, #0
 8006df2:	727b      	strb	r3, [r7, #9]
 8006df4:	2300      	movs	r3, #0
 8006df6:	72bb      	strb	r3, [r7, #10]

    /* Search for wrist wear wake up and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_cfg, BMI2_WRIST_WEAR_WAKE_UP, dev);
 8006df8:	f107 0308 	add.w	r3, r7, #8
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	2114      	movs	r1, #20
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fd fd7c 	bl	80048fe <bmi2_extract_input_feat_config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006e0a:	7f7b      	ldrb	r3, [r7, #29]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d04a      	beq.n	8006ea6 <set_wrist_wear_wake_up+0xda>
    {
        /* Get the configuration from the page where wrist wear wake up
         * feature resides
         */
        rslt = bmi2_get_feat_config(wrist_wake_up_cfg.page, feat_config, dev);
 8006e10:	7a7b      	ldrb	r3, [r7, #9]
 8006e12:	f107 010c 	add.w	r1, r7, #12
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fd fcde 	bl	80047da <bmi2_get_feat_config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006e22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d13f      	bne.n	8006eaa <set_wrist_wear_wake_up+0xde>
        {
            /* Define the offset for enable/disable of wrist wear wake up */
            idx = wrist_wake_up_cfg.start_addr;
 8006e2a:	7abb      	ldrb	r3, [r7, #10]
 8006e2c:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_WRIST_WEAR_WAKE_UP_FEAT_EN, enable);
 8006e2e:	7fbb      	ldrb	r3, [r7, #30]
 8006e30:	3320      	adds	r3, #32
 8006e32:	443b      	add	r3, r7
 8006e34:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006e38:	b25b      	sxtb	r3, r3
 8006e3a:	f023 0310 	bic.w	r3, r3, #16
 8006e3e:	b25a      	sxtb	r2, r3
 8006e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	b25b      	sxtb	r3, r3
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	b25b      	sxtb	r3, r3
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	b25a      	sxtb	r2, r3
 8006e52:	7fbb      	ldrb	r3, [r7, #30]
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	3320      	adds	r3, #32
 8006e58:	443b      	add	r3, r7
 8006e5a:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006e5e:	f107 010c 	add.w	r1, r7, #12
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2210      	movs	r2, #16
 8006e66:	2030      	movs	r0, #48	@ 0x30
 8006e68:	f7fc fedd 	bl	8003c26 <bmi2_set_regs>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006e70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10c      	bne.n	8006e92 <set_wrist_wear_wake_up+0xc6>
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d109      	bne.n	8006e92 <set_wrist_wear_wake_up+0xc6>
            {
                dev->sens_en_stat |= BMI2_WRIST_WEAR_WAKE_UP_SEL;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006e84:	f442 1880 	orr.w	r8, r2, #1048576	@ 0x100000
 8006e88:	4699      	mov	r9, r3
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006e90:	e00b      	b.n	8006eaa <set_wrist_wear_wake_up+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_WRIST_WEAR_WAKE_UP_SEL;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006e98:	f422 1480 	bic.w	r4, r2, #1048576	@ 0x100000
 8006e9c:	461d      	mov	r5, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006ea4:	e001      	b.n	8006eaa <set_wrist_wear_wake_up+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006ea6:	23f8      	movs	r3, #248	@ 0xf8
 8006ea8:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006eaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006eb8 <set_gyro_user_gain>:
/*!
 * @brief This internal API is used to enable/disable gyroscope user gain
 * feature.
 */
static int8_t set_gyro_user_gain(uint8_t enable, struct bmi2_dev *dev)
{
 8006eb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006ebc:	b088      	sub	sp, #32
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	6039      	str	r1, [r7, #0]
 8006ec4:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006ec6:	f107 030c 	add.w	r3, r7, #12
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	605a      	str	r2, [r3, #4]
 8006ed0:	609a      	str	r2, [r3, #8]
 8006ed2:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for gyroscope user gain */
    struct bmi2_feature_config gyr_user_gain_cfg = { 0, 0, 0 };
 8006ed8:	2300      	movs	r3, #0
 8006eda:	723b      	strb	r3, [r7, #8]
 8006edc:	2300      	movs	r3, #0
 8006ede:	727b      	strb	r3, [r7, #9]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	72bb      	strb	r3, [r7, #10]

    /* Search for user gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&gyr_user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 8006ee4:	f107 0308 	add.w	r3, r7, #8
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	2109      	movs	r1, #9
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fd fd06 	bl	80048fe <bmi2_extract_input_feat_config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006ef6:	7f7b      	ldrb	r3, [r7, #29]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d04b      	beq.n	8006f94 <set_gyro_user_gain+0xdc>
    {
        /* Get the configuration from the page where user gain feature resides */
        rslt = bmi2_get_feat_config(gyr_user_gain_cfg.page, feat_config, dev);
 8006efc:	7a7b      	ldrb	r3, [r7, #9]
 8006efe:	f107 010c 	add.w	r1, r7, #12
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fd fc68 	bl	80047da <bmi2_get_feat_config>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006f0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d140      	bne.n	8006f98 <set_gyro_user_gain+0xe0>
        {
            /* Define the offset for enable/disable of user gain */
            idx = gyr_user_gain_cfg.start_addr + BMI2_GYR_USER_GAIN_FEAT_EN_OFFSET;
 8006f16:	7abb      	ldrb	r3, [r7, #10]
 8006f18:	3305      	adds	r3, #5
 8006f1a:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_FEAT_EN, enable);
 8006f1c:	7fbb      	ldrb	r3, [r7, #30]
 8006f1e:	3320      	adds	r3, #32
 8006f20:	443b      	add	r3, r7
 8006f22:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006f26:	b25b      	sxtb	r3, r3
 8006f28:	f023 0308 	bic.w	r3, r3, #8
 8006f2c:	b25a      	sxtb	r2, r3
 8006f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	b25b      	sxtb	r3, r3
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	b25b      	sxtb	r3, r3
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	b25a      	sxtb	r2, r3
 8006f40:	7fbb      	ldrb	r3, [r7, #30]
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	3320      	adds	r3, #32
 8006f46:	443b      	add	r3, r7
 8006f48:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006f4c:	f107 010c 	add.w	r1, r7, #12
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2210      	movs	r2, #16
 8006f54:	2030      	movs	r0, #48	@ 0x30
 8006f56:	f7fc fe66 	bl	8003c26 <bmi2_set_regs>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006f5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10c      	bne.n	8006f80 <set_gyro_user_gain+0xc8>
 8006f66:	79fb      	ldrb	r3, [r7, #7]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d109      	bne.n	8006f80 <set_gyro_user_gain+0xc8>
            {
                dev->sens_en_stat |= BMI2_GYRO_GAIN_UPDATE_SEL;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006f72:	f442 7800 	orr.w	r8, r2, #512	@ 0x200
 8006f76:	4699      	mov	r9, r3
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006f7e:	e00b      	b.n	8006f98 <set_gyro_user_gain+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_GYRO_GAIN_UPDATE_SEL;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006f86:	f422 7400 	bic.w	r4, r2, #512	@ 0x200
 8006f8a:	461d      	mov	r5, r3
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006f92:	e001      	b.n	8006f98 <set_gyro_user_gain+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006f94:	23f8      	movs	r3, #248	@ 0xf8
 8006f96:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006f98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3720      	adds	r7, #32
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006fa6 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_any_motion_config(const struct bmi2_any_motion_config *config, struct bmi2_dev *dev)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b08a      	sub	sp, #40	@ 0x28
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006fb0:	f107 030c 	add.w	r3, r7, #12
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	605a      	str	r2, [r3, #4]
 8006fba:	609a      	str	r2, [r3, #8]
 8006fbc:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 8006fca:	2300      	movs	r3, #0
 8006fcc:	723b      	strb	r3, [r7, #8]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	727b      	strb	r3, [r7, #9]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8006fd6:	f107 030c 	add.w	r3, r7, #12
 8006fda:	623b      	str	r3, [r7, #32]

    /* Search for any-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 8006fdc:	f107 0308 	add.w	r3, r7, #8
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	2104      	movs	r1, #4
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fd fc8a 	bl	80048fe <bmi2_extract_input_feat_config>
 8006fea:	4603      	mov	r3, r0
 8006fec:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8006fee:	7ffb      	ldrb	r3, [r7, #31]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80d8 	beq.w	80071a6 <set_any_motion_config+0x200>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 8006ff6:	7a7b      	ldrb	r3, [r7, #9]
 8006ff8:	f107 010c 	add.w	r1, r7, #12
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fd fbeb 	bl	80047da <bmi2_get_feat_config>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800700a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 80cc 	bne.w	80071ac <set_any_motion_config+0x206>
        {
            /* Define the offset in bytes for any-motion select */
            idx = any_mot_config.start_addr;
 8007014:	7abb      	ldrb	r3, [r7, #10]
 8007016:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 800701a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800701e:	085b      	lsrs	r3, r3, #1
 8007020:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 8007024:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	6a3a      	ldr	r2, [r7, #32]
 800702c:	4413      	add	r3, r2
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	b21b      	sxth	r3, r3
 8007032:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8007036:	f023 031f 	bic.w	r3, r3, #31
 800703a:	b21a      	sxth	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b21b      	sxth	r3, r3
 8007042:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007046:	b21b      	sxth	r3, r3
 8007048:	4313      	orrs	r3, r2
 800704a:	b219      	sxth	r1, r3
 800704c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	6a3a      	ldr	r2, [r7, #32]
 8007054:	4413      	add	r3, r2
 8007056:	b28a      	uxth	r2, r1
 8007058:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 800705a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	6a3a      	ldr	r2, [r7, #32]
 8007062:	4413      	add	r3, r2
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b21b      	sxth	r3, r3
 8007068:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800706c:	b21a      	sxth	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	889b      	ldrh	r3, [r3, #4]
 8007072:	b21b      	sxth	r3, r3
 8007074:	035b      	lsls	r3, r3, #13
 8007076:	b21b      	sxth	r3, r3
 8007078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800707c:	b21b      	sxth	r3, r3
 800707e:	4313      	orrs	r3, r2
 8007080:	b219      	sxth	r1, r3
 8007082:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	6a3a      	ldr	r2, [r7, #32]
 800708a:	4413      	add	r3, r2
 800708c:	b28a      	uxth	r2, r1
 800708e:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 8007090:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	6a3a      	ldr	r2, [r7, #32]
 8007098:	4413      	add	r3, r2
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b21b      	sxth	r3, r3
 800709e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070a2:	b21a      	sxth	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	88db      	ldrh	r3, [r3, #6]
 80070a8:	b21b      	sxth	r3, r3
 80070aa:	039b      	lsls	r3, r3, #14
 80070ac:	b21b      	sxth	r3, r3
 80070ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070b2:	b21b      	sxth	r3, r3
 80070b4:	4313      	orrs	r3, r2
 80070b6:	b219      	sxth	r1, r3
 80070b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	6a3a      	ldr	r2, [r7, #32]
 80070c0:	4413      	add	r3, r2
 80070c2:	b28a      	uxth	r2, r1
 80070c4:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 80070c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	6a3a      	ldr	r2, [r7, #32]
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b21b      	sxth	r3, r3
 80070d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80070d8:	b21a      	sxth	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	891b      	ldrh	r3, [r3, #8]
 80070de:	b21b      	sxth	r3, r3
 80070e0:	03db      	lsls	r3, r3, #15
 80070e2:	b21b      	sxth	r3, r3
 80070e4:	4313      	orrs	r3, r2
 80070e6:	b219      	sxth	r1, r3
 80070e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	4413      	add	r3, r2
 80070f2:	b28a      	uxth	r2, r1
 80070f4:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 80070f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070fa:	3301      	adds	r3, #1
 80070fc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 8007100:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	6a3a      	ldr	r2, [r7, #32]
 8007108:	4413      	add	r3, r2
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b21b      	sxth	r3, r3
 800710e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007112:	f023 0307 	bic.w	r3, r3, #7
 8007116:	b21a      	sxth	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	885b      	ldrh	r3, [r3, #2]
 800711c:	b21b      	sxth	r3, r3
 800711e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007122:	b21b      	sxth	r3, r3
 8007124:	4313      	orrs	r3, r2
 8007126:	b219      	sxth	r1, r3
 8007128:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	6a3a      	ldr	r2, [r7, #32]
 8007130:	4413      	add	r3, r2
 8007132:	b28a      	uxth	r2, r1
 8007134:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8007136:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800713a:	3301      	adds	r3, #1
 800713c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - any_mot_config.start_addr;
 8007140:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	b2da      	uxtb	r2, r3
 8007148:	7abb      	ldrb	r3, [r7, #10]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8007150:	2300      	movs	r3, #0
 8007152:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007156:	e015      	b.n	8007184 <set_any_motion_config+0x1de>
            {
                feat_config[any_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 8007158:	7abb      	ldrb	r3, [r7, #10]
 800715a:	461a      	mov	r2, r3
 800715c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007160:	4413      	add	r3, r2
 8007162:	6a3a      	ldr	r2, [r7, #32]
 8007164:	441a      	add	r2, r3
                feat_config[any_mot_config.start_addr +
 8007166:	7abb      	ldrb	r3, [r7, #10]
 8007168:	4619      	mov	r1, r3
 800716a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800716e:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 8007170:	7812      	ldrb	r2, [r2, #0]
 8007172:	3328      	adds	r3, #40	@ 0x28
 8007174:	443b      	add	r3, r7
 8007176:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 800717a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800717e:	3301      	adds	r3, #1
 8007180:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007184:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007188:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800718c:	429a      	cmp	r2, r3
 800718e:	d3e3      	bcc.n	8007158 <set_any_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8007190:	f107 010c 	add.w	r1, r7, #12
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2210      	movs	r2, #16
 8007198:	2030      	movs	r0, #48	@ 0x30
 800719a:	f7fc fd44 	bl	8003c26 <bmi2_set_regs>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80071a4:	e002      	b.n	80071ac <set_any_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80071a6:	23f8      	movs	r3, #248	@ 0xf8
 80071a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80071ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3728      	adds	r7, #40	@ 0x28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_no_motion_config(const struct bmi2_no_motion_config *config, struct bmi2_dev *dev)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	@ 0x28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80071c2:	f107 030c 	add.w	r3, r7, #12
 80071c6:	2200      	movs	r2, #0
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	605a      	str	r2, [r3, #4]
 80071cc:	609a      	str	r2, [r3, #8]
 80071ce:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 80071dc:	2300      	movs	r3, #0
 80071de:	723b      	strb	r3, [r7, #8]
 80071e0:	2300      	movs	r3, #0
 80071e2:	727b      	strb	r3, [r7, #9]
 80071e4:	2300      	movs	r3, #0
 80071e6:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80071e8:	f107 030c 	add.w	r3, r7, #12
 80071ec:	623b      	str	r3, [r7, #32]

    /* Search for no-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 80071ee:	f107 0308 	add.w	r3, r7, #8
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	2105      	movs	r1, #5
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fd fb81 	bl	80048fe <bmi2_extract_input_feat_config>
 80071fc:	4603      	mov	r3, r0
 80071fe:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007200:	7ffb      	ldrb	r3, [r7, #31]
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 80d8 	beq.w	80073b8 <set_no_motion_config+0x200>
    {
        /* Get the configuration from the page where no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 8007208:	7a7b      	ldrb	r3, [r7, #9]
 800720a:	f107 010c 	add.w	r1, r7, #12
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd fae2 	bl	80047da <bmi2_get_feat_config>
 8007216:	4603      	mov	r3, r0
 8007218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800721c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007220:	2b00      	cmp	r3, #0
 8007222:	f040 80cc 	bne.w	80073be <set_no_motion_config+0x206>
        {
            /* Define the offset in bytes for no-motion select */
            idx = no_mot_config.start_addr;
 8007226:	7abb      	ldrb	r3, [r7, #10]
 8007228:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 800722c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 8007236:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	6a3a      	ldr	r2, [r7, #32]
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b21b      	sxth	r3, r3
 8007244:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8007248:	f023 031f 	bic.w	r3, r3, #31
 800724c:	b21a      	sxth	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b21b      	sxth	r3, r3
 8007254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007258:	b21b      	sxth	r3, r3
 800725a:	4313      	orrs	r3, r2
 800725c:	b219      	sxth	r1, r3
 800725e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	6a3a      	ldr	r2, [r7, #32]
 8007266:	4413      	add	r3, r2
 8007268:	b28a      	uxth	r2, r1
 800726a:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 800726c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	6a3a      	ldr	r2, [r7, #32]
 8007274:	4413      	add	r3, r2
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	b21b      	sxth	r3, r3
 800727a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800727e:	b21a      	sxth	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	889b      	ldrh	r3, [r3, #4]
 8007284:	b21b      	sxth	r3, r3
 8007286:	035b      	lsls	r3, r3, #13
 8007288:	b21b      	sxth	r3, r3
 800728a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800728e:	b21b      	sxth	r3, r3
 8007290:	4313      	orrs	r3, r2
 8007292:	b219      	sxth	r1, r3
 8007294:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	6a3a      	ldr	r2, [r7, #32]
 800729c:	4413      	add	r3, r2
 800729e:	b28a      	uxth	r2, r1
 80072a0:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 80072a2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	6a3a      	ldr	r2, [r7, #32]
 80072aa:	4413      	add	r3, r2
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	b21b      	sxth	r3, r3
 80072b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072b4:	b21a      	sxth	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	88db      	ldrh	r3, [r3, #6]
 80072ba:	b21b      	sxth	r3, r3
 80072bc:	039b      	lsls	r3, r3, #14
 80072be:	b21b      	sxth	r3, r3
 80072c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072c4:	b21b      	sxth	r3, r3
 80072c6:	4313      	orrs	r3, r2
 80072c8:	b219      	sxth	r1, r3
 80072ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	6a3a      	ldr	r2, [r7, #32]
 80072d2:	4413      	add	r3, r2
 80072d4:	b28a      	uxth	r2, r1
 80072d6:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 80072d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	6a3a      	ldr	r2, [r7, #32]
 80072e0:	4413      	add	r3, r2
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b21b      	sxth	r3, r3
 80072e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80072ea:	b21a      	sxth	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	891b      	ldrh	r3, [r3, #8]
 80072f0:	b21b      	sxth	r3, r3
 80072f2:	03db      	lsls	r3, r3, #15
 80072f4:	b21b      	sxth	r3, r3
 80072f6:	4313      	orrs	r3, r2
 80072f8:	b219      	sxth	r1, r3
 80072fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	6a3a      	ldr	r2, [r7, #32]
 8007302:	4413      	add	r3, r2
 8007304:	b28a      	uxth	r2, r1
 8007306:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 8007308:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800730c:	3301      	adds	r3, #1
 800730e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 8007312:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	6a3a      	ldr	r2, [r7, #32]
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b21b      	sxth	r3, r3
 8007320:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007324:	f023 0307 	bic.w	r3, r3, #7
 8007328:	b21a      	sxth	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	885b      	ldrh	r3, [r3, #2]
 800732e:	b21b      	sxth	r3, r3
 8007330:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007334:	b21b      	sxth	r3, r3
 8007336:	4313      	orrs	r3, r2
 8007338:	b219      	sxth	r1, r3
 800733a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	6a3a      	ldr	r2, [r7, #32]
 8007342:	4413      	add	r3, r2
 8007344:	b28a      	uxth	r2, r1
 8007346:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8007348:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800734c:	3301      	adds	r3, #1
 800734e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - no_mot_config.start_addr;
 8007352:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	b2da      	uxtb	r2, r3
 800735a:	7abb      	ldrb	r3, [r7, #10]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8007362:	2300      	movs	r3, #0
 8007364:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007368:	e015      	b.n	8007396 <set_no_motion_config+0x1de>
            {
                feat_config[no_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 800736a:	7abb      	ldrb	r3, [r7, #10]
 800736c:	461a      	mov	r2, r3
 800736e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007372:	4413      	add	r3, r2
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	441a      	add	r2, r3
                feat_config[no_mot_config.start_addr +
 8007378:	7abb      	ldrb	r3, [r7, #10]
 800737a:	4619      	mov	r1, r3
 800737c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007380:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 8007382:	7812      	ldrb	r2, [r2, #0]
 8007384:	3328      	adds	r3, #40	@ 0x28
 8007386:	443b      	add	r3, r7
 8007388:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 800738c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007390:	3301      	adds	r3, #1
 8007392:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007396:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800739a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800739e:	429a      	cmp	r2, r3
 80073a0:	d3e3      	bcc.n	800736a <set_no_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80073a2:	f107 010c 	add.w	r1, r7, #12
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2210      	movs	r2, #16
 80073aa:	2030      	movs	r0, #48	@ 0x30
 80073ac:	f7fc fc3b 	bl	8003c26 <bmi2_set_regs>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80073b6:	e002      	b.n	80073be <set_no_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80073b8:	23f8      	movs	r3, #248	@ 0xf8
 80073ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80073be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3728      	adds	r7, #40	@ 0x28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block-size,
 * output-configuration and other parameters.
 */
static int8_t set_sig_motion_config(const struct bmi2_sig_motion_config *config, struct bmi2_dev *dev)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b08a      	sub	sp, #40	@ 0x28
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80073d4:	f107 030c 	add.w	r3, r7, #12
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	605a      	str	r2, [r3, #4]
 80073de:	609a      	str	r2, [r3, #8]
 80073e0:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 80073ee:	2300      	movs	r3, #0
 80073f0:	723b      	strb	r3, [r7, #8]
 80073f2:	2300      	movs	r3, #0
 80073f4:	727b      	strb	r3, [r7, #9]
 80073f6:	2300      	movs	r3, #0
 80073f8:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80073fa:	f107 030c 	add.w	r3, r7, #12
 80073fe:	623b      	str	r3, [r7, #32]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 8007400:	f107 0308 	add.w	r3, r7, #8
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	2103      	movs	r1, #3
 8007408:	4618      	mov	r0, r3
 800740a:	f7fd fa78 	bl	80048fe <bmi2_extract_input_feat_config>
 800740e:	4603      	mov	r3, r0
 8007410:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007412:	7ffb      	ldrb	r3, [r7, #31]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d055      	beq.n	80074c4 <set_sig_motion_config+0xfa>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 8007418:	7a7b      	ldrb	r3, [r7, #9]
 800741a:	f107 010c 	add.w	r1, r7, #12
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	4618      	mov	r0, r3
 8007422:	f7fd f9da 	bl	80047da <bmi2_get_feat_config>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800742c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007430:	2b00      	cmp	r3, #0
 8007432:	d14a      	bne.n	80074ca <set_sig_motion_config+0x100>
        {
            /* Define the offset in bytes for sig-motion select */
            idx = sig_mot_config.start_addr;
 8007434:	7abb      	ldrb	r3, [r7, #10]
 8007436:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 800743a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set parameter 1 */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_SIG_MOT_PARAM_1, config->block_size);
 8007444:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	6a3a      	ldr	r2, [r7, #32]
 800744c:	4413      	add	r3, r2
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	8812      	ldrh	r2, [r2, #0]
 8007452:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8007454:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007458:	3301      	adds	r3, #1
 800745a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - sig_mot_config.start_addr;
 800745e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	b2da      	uxtb	r2, r3
 8007466:	7abb      	ldrb	r3, [r7, #10]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 800746e:	2300      	movs	r3, #0
 8007470:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007474:	e015      	b.n	80074a2 <set_sig_motion_config+0xd8>
            {
                feat_config[sig_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 8007476:	7abb      	ldrb	r3, [r7, #10]
 8007478:	461a      	mov	r2, r3
 800747a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800747e:	4413      	add	r3, r2
 8007480:	6a3a      	ldr	r2, [r7, #32]
 8007482:	441a      	add	r2, r3
                feat_config[sig_mot_config.start_addr +
 8007484:	7abb      	ldrb	r3, [r7, #10]
 8007486:	4619      	mov	r1, r3
 8007488:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800748c:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 800748e:	7812      	ldrb	r2, [r2, #0]
 8007490:	3328      	adds	r3, #40	@ 0x28
 8007492:	443b      	add	r3, r7
 8007494:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8007498:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800749c:	3301      	adds	r3, #1
 800749e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80074a2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80074a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d3e3      	bcc.n	8007476 <set_sig_motion_config+0xac>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80074ae:	f107 010c 	add.w	r1, r7, #12
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2210      	movs	r2, #16
 80074b6:	2030      	movs	r0, #48	@ 0x30
 80074b8:	f7fc fbb5 	bl	8003c26 <bmi2_set_regs>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80074c2:	e002      	b.n	80074ca <set_sig_motion_config+0x100>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80074c4:	23f8      	movs	r3, #248	@ 0xf8
 80074c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80074ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3728      	adds	r7, #40	@ 0x28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <set_step_count_params_config>:

/*!
 * @brief This internal API sets step counter parameter configurations.
 */
static int8_t set_step_count_params_config(const uint16_t *step_count_params, struct bmi2_dev *dev)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b08c      	sub	sp, #48	@ 0x30
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80074e6:	f107 030c 	add.w	r3, r7, #12
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	605a      	str	r2, [r3, #4]
 80074f0:	609a      	str	r2, [r3, #8]
 80074f2:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t index = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter parameters */
    struct bmi2_feature_config step_params_config = { 0, 0, 0 };
 80074fa:	2300      	movs	r3, #0
 80074fc:	723b      	strb	r3, [r7, #8]
 80074fe:	2300      	movs	r3, #0
 8007500:	727b      	strb	r3, [r7, #9]
 8007502:	2300      	movs	r3, #0
 8007504:	72bb      	strb	r3, [r7, #10]

    /* Variable to define start address of the parameters */
    uint8_t start_addr;

    /* Variable to define number of bytes */
    uint8_t n_bytes = (BMI2_STEP_CNT_N_PARAMS * 2);
 8007506:	2332      	movs	r3, #50	@ 0x32
 8007508:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    /* Variable to store number of pages */
    uint8_t n_pages = (n_bytes / 16);
 800750c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007510:	091b      	lsrs	r3, r3, #4
 8007512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Variable to define the remaining bytes to be read */
    uint8_t remain_len;

    /* Variable to define the maximum words(16 bytes or 8 words) to be read in a page */
    uint8_t max_len = 8;
 8007516:	2308      	movs	r3, #8
 8007518:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    /* Variable index bytes in a page */
    uint8_t page_byte_idx;

    /* Variable to index the parameters */
    uint8_t param_idx = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8007522:	f107 030c 	add.w	r3, r7, #12
 8007526:	623b      	str	r3, [r7, #32]

    /* Search for step counter parameter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_params_config, BMI2_STEP_COUNTER_PARAMS, dev);
 8007528:	f107 0308 	add.w	r3, r7, #8
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	211d      	movs	r1, #29
 8007530:	4618      	mov	r0, r3
 8007532:	f7fd f9e4 	bl	80048fe <bmi2_extract_input_feat_config>
 8007536:	4603      	mov	r3, r0
 8007538:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 800753a:	7ffb      	ldrb	r3, [r7, #31]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8099 	beq.w	8007674 <set_step_count_params_config+0x19e>
    {
        /* Get the start page for the step counter parameters */
        start_page = step_params_config.page;
 8007542:	7a7b      	ldrb	r3, [r7, #9]
 8007544:	77bb      	strb	r3, [r7, #30]

        /* Get the end page for the step counter parameters */
        end_page = start_page + n_pages;
 8007546:	7fba      	ldrb	r2, [r7, #30]
 8007548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800754c:	4413      	add	r3, r2
 800754e:	777b      	strb	r3, [r7, #29]

        /* Get the start address for the step counter parameters */
        start_addr = step_params_config.start_addr;
 8007550:	7abb      	ldrb	r3, [r7, #10]
 8007552:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Get the remaining length of bytes to be read */
        remain_len = (uint8_t)((n_bytes - (n_pages * 16)) + start_addr);
 8007556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	b2db      	uxtb	r3, r3
 800755e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	b2da      	uxtb	r2, r3
 8007566:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800756a:	4413      	add	r3, r2
 800756c:	773b      	strb	r3, [r7, #28]
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 800756e:	7fbb      	ldrb	r3, [r7, #30]
 8007570:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8007574:	e078      	b.n	8007668 <set_step_count_params_config+0x192>
        {
            /* Get the configuration from the respective page */
            rslt = bmi2_get_feat_config(page_idx, feat_config, dev);
 8007576:	f107 010c 	add.w	r1, r7, #12
 800757a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	4618      	mov	r0, r3
 8007582:	f7fd f92a 	bl	80047da <bmi2_get_feat_config>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMI2_OK)
 800758c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007590:	2b00      	cmp	r3, #0
 8007592:	d164      	bne.n	800765e <set_step_count_params_config+0x188>
            {
                /* Start from address 0x00 when switched to next page */
                if (page_idx > start_page)
 8007594:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007598:	7fbb      	ldrb	r3, [r7, #30]
 800759a:	429a      	cmp	r2, r3
 800759c:	d902      	bls.n	80075a4 <set_step_count_params_config+0xce>
                {
                    start_addr = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                /* Remaining number of words to be read in the page  */
                if (page_idx == end_page)
 80075a4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80075a8:	7f7b      	ldrb	r3, [r7, #29]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d103      	bne.n	80075b6 <set_step_count_params_config+0xe0>
                {
                    max_len = (remain_len / 2);
 80075ae:	7f3b      	ldrb	r3, [r7, #28]
 80075b0:	085b      	lsrs	r3, r3, #1
 80075b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* Get offset in words since all the features are set in words length */
                page_byte_idx = start_addr / 2;
 80075b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80075ba:	085b      	lsrs	r3, r3, #1
 80075bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                for (; page_byte_idx < max_len;)
 80075c0:	e015      	b.n	80075ee <set_step_count_params_config+0x118>
                {
                    /* Set parameters 1 to 25 */
                    *(data_p + page_byte_idx) = BMI2_SET_BIT_POS0(*(data_p + page_byte_idx),
 80075c2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	441a      	add	r2, r3
 80075cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	6a39      	ldr	r1, [r7, #32]
 80075d4:	440b      	add	r3, r1
 80075d6:	8812      	ldrh	r2, [r2, #0]
 80075d8:	801a      	strh	r2, [r3, #0]
                                                                  BMI2_STEP_COUNT_PARAMS,
                                                                  step_count_params[param_idx]);

                    /* Increment offset by 1 word to set to the next parameter */
                    page_byte_idx++;
 80075da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80075de:	3301      	adds	r3, #1
 80075e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                    /* Increment to next parameter */
                    param_idx++;
 80075e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80075e8:	3301      	adds	r3, #1
 80075ea:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                for (; page_byte_idx < max_len;)
 80075ee:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80075f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d3e3      	bcc.n	80075c2 <set_step_count_params_config+0xec>
                }

                /* Get total length in bytes to copy from local pointer to the array */
                page_byte_idx = (uint8_t)(page_byte_idx * 2) - step_params_config.start_addr;
 80075fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	b2da      	uxtb	r2, r3
 8007602:	7abb      	ldrb	r3, [r7, #10]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                /* Copy the bytes to be set back to the array */
                for (index = 0; index < page_byte_idx; index++)
 800760a:	2300      	movs	r3, #0
 800760c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007610:	e015      	b.n	800763e <set_step_count_params_config+0x168>
                {
                    feat_config[step_params_config.start_addr +
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 8007612:	7abb      	ldrb	r3, [r7, #10]
 8007614:	461a      	mov	r2, r3
 8007616:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800761a:	4413      	add	r3, r2
 800761c:	6a3a      	ldr	r2, [r7, #32]
 800761e:	441a      	add	r2, r3
                    feat_config[step_params_config.start_addr +
 8007620:	7abb      	ldrb	r3, [r7, #10]
 8007622:	4619      	mov	r1, r3
 8007624:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007628:	440b      	add	r3, r1
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 800762a:	7812      	ldrb	r2, [r2, #0]
 800762c:	3330      	adds	r3, #48	@ 0x30
 800762e:	443b      	add	r3, r7
 8007630:	f803 2c24 	strb.w	r2, [r3, #-36]
                for (index = 0; index < page_byte_idx; index++)
 8007634:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007638:	3301      	adds	r3, #1
 800763a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800763e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007642:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007646:	429a      	cmp	r2, r3
 8007648:	d3e3      	bcc.n	8007612 <set_step_count_params_config+0x13c>
                }

                /* Set the configuration back to the page */
                rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800764a:	f107 010c 	add.w	r1, r7, #12
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2210      	movs	r2, #16
 8007652:	2030      	movs	r0, #48	@ 0x30
 8007654:	f7fc fae7 	bl	8003c26 <bmi2_set_regs>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 800765e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007662:	3301      	adds	r3, #1
 8007664:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8007668:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800766c:	7f7b      	ldrb	r3, [r7, #29]
 800766e:	429a      	cmp	r2, r3
 8007670:	d981      	bls.n	8007576 <set_step_count_params_config+0xa0>
 8007672:	e002      	b.n	800767a <set_step_count_params_config+0x1a4>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007674:	23f8      	movs	r3, #248	@ 0xf8
 8007676:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800767a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800767e:	4618      	mov	r0, r3
 8007680:	3730      	adds	r7, #48	@ 0x30
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <set_step_config>:

/* @brief This internal API sets step counter configurations like water-mark
 * level, reset-counter and output-configuration step detector and activity.
 */
static int8_t set_step_config(const struct bmi2_step_config *config, struct bmi2_dev *dev)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b08a      	sub	sp, #40	@ 0x28
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007690:	f107 030c 	add.w	r3, r7, #12
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	605a      	str	r2, [r3, #4]
 800769a:	609a      	str	r2, [r3, #8]
 800769c:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter 4 */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 80076aa:	2300      	movs	r3, #0
 80076ac:	723b      	strb	r3, [r7, #8]
 80076ae:	2300      	movs	r3, #0
 80076b0:	727b      	strb	r3, [r7, #9]
 80076b2:	2300      	movs	r3, #0
 80076b4:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80076b6:	f107 030c 	add.w	r3, r7, #12
 80076ba:	623b      	str	r3, [r7, #32]

    /* Search for step counter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 80076bc:	f107 0308 	add.w	r3, r7, #8
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	2107      	movs	r1, #7
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fd f91a 	bl	80048fe <bmi2_extract_input_feat_config>
 80076ca:	4603      	mov	r3, r0
 80076cc:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80076ce:	7ffb      	ldrb	r3, [r7, #31]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8084 	beq.w	80077de <set_step_config+0x158>
    {
        /* Get the configuration from the page where step counter resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 80076d6:	7a7b      	ldrb	r3, [r7, #9]
 80076d8:	f107 010c 	add.w	r1, r7, #12
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fd f87b 	bl	80047da <bmi2_get_feat_config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80076ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d178      	bne.n	80077e4 <set_step_config+0x15e>
        {
            /* Define the offset in bytes */
            idx = step_count_config.start_addr;
 80076f2:	7abb      	ldrb	r3, [r7, #10]
 80076f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80076f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076fc:	085b      	lsrs	r3, r3, #1
 80076fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set water-mark level */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_STEP_COUNT_WM_LEVEL, config->watermark_level);
 8007702:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007706:	005b      	lsls	r3, r3, #1
 8007708:	6a3a      	ldr	r2, [r7, #32]
 800770a:	4413      	add	r3, r2
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	b21b      	sxth	r3, r3
 8007710:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007714:	f023 0303 	bic.w	r3, r3, #3
 8007718:	b21a      	sxth	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b21b      	sxth	r3, r3
 8007720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007724:	b21b      	sxth	r3, r3
 8007726:	4313      	orrs	r3, r2
 8007728:	b219      	sxth	r1, r3
 800772a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	6a3a      	ldr	r2, [r7, #32]
 8007732:	4413      	add	r3, r2
 8007734:	b28a      	uxth	r2, r1
 8007736:	801a      	strh	r2, [r3, #0]

            /* Set reset-counter */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_STEP_COUNT_RST_CNT, config->reset_counter);
 8007738:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	6a3a      	ldr	r2, [r7, #32]
 8007740:	4413      	add	r3, r2
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b21b      	sxth	r3, r3
 8007746:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800774a:	b21a      	sxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	885b      	ldrh	r3, [r3, #2]
 8007750:	b21b      	sxth	r3, r3
 8007752:	029b      	lsls	r3, r3, #10
 8007754:	b21b      	sxth	r3, r3
 8007756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800775a:	b21b      	sxth	r3, r3
 800775c:	4313      	orrs	r3, r2
 800775e:	b219      	sxth	r1, r3
 8007760:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	6a3a      	ldr	r2, [r7, #32]
 8007768:	4413      	add	r3, r2
 800776a:	b28a      	uxth	r2, r1
 800776c:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word  to set output
             * configuration of step detector and step activity
             */
            idx++;
 800776e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007772:	3301      	adds	r3, #1
 8007774:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - step_count_config.start_addr;
 8007778:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	b2da      	uxtb	r2, r3
 8007780:	7abb      	ldrb	r3, [r7, #10]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8007788:	2300      	movs	r3, #0
 800778a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800778e:	e015      	b.n	80077bc <set_step_config+0x136>
            {
                feat_config[step_count_config.start_addr +
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 8007790:	7abb      	ldrb	r3, [r7, #10]
 8007792:	461a      	mov	r2, r3
 8007794:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007798:	4413      	add	r3, r2
 800779a:	6a3a      	ldr	r2, [r7, #32]
 800779c:	441a      	add	r2, r3
                feat_config[step_count_config.start_addr +
 800779e:	7abb      	ldrb	r3, [r7, #10]
 80077a0:	4619      	mov	r1, r3
 80077a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077a6:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 80077a8:	7812      	ldrb	r2, [r2, #0]
 80077aa:	3328      	adds	r3, #40	@ 0x28
 80077ac:	443b      	add	r3, r7
 80077ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 80077b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077b6:	3301      	adds	r3, #1
 80077b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80077bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80077c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d3e3      	bcc.n	8007790 <set_step_config+0x10a>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80077c8:	f107 010c 	add.w	r1, r7, #12
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2210      	movs	r2, #16
 80077d0:	2030      	movs	r0, #48	@ 0x30
 80077d2:	f7fc fa28 	bl	8003c26 <bmi2_set_regs>
 80077d6:	4603      	mov	r3, r0
 80077d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077dc:	e002      	b.n	80077e4 <set_step_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80077de:	23f8      	movs	r3, #248	@ 0xf8
 80077e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80077e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3728      	adds	r7, #40	@ 0x28
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <set_wrist_gest_config>:
/*!
 * @brief This internal API sets wrist gesture configurations like wearable-arm,
 * and output-configuration.
 */
static int8_t set_wrist_gest_config(const struct bmi2_wrist_gest_config *config, struct bmi2_dev *dev)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08a      	sub	sp, #40	@ 0x28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80077fa:	f107 030c 	add.w	r3, r7, #12
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	605a      	str	r2, [r3, #4]
 8007804:	609a      	str	r2, [r3, #8]
 8007806:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 800780e:	2300      	movs	r3, #0
 8007810:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_config = { 0, 0, 0 };
 8007814:	2300      	movs	r3, #0
 8007816:	723b      	strb	r3, [r7, #8]
 8007818:	2300      	movs	r3, #0
 800781a:	727b      	strb	r3, [r7, #9]
 800781c:	2300      	movs	r3, #0
 800781e:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8007820:	f107 030c 	add.w	r3, r7, #12
 8007824:	623b      	str	r3, [r7, #32]

    /* Search for wrist gesture feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_config, BMI2_WRIST_GESTURE, dev);
 8007826:	f107 0308 	add.w	r3, r7, #8
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	2113      	movs	r1, #19
 800782e:	4618      	mov	r0, r3
 8007830:	f7fd f865 	bl	80048fe <bmi2_extract_input_feat_config>
 8007834:	4603      	mov	r3, r0
 8007836:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007838:	7ffb      	ldrb	r3, [r7, #31]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8091 	beq.w	8007962 <set_wrist_gest_config+0x172>
    {
        /* Get the configuration from the page where wrist gesture feature resides */
        rslt = bmi2_get_feat_config(wrist_gest_config.page, feat_config, dev);
 8007840:	7a7b      	ldrb	r3, [r7, #9]
 8007842:	f107 010c 	add.w	r1, r7, #12
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	f7fc ffc6 	bl	80047da <bmi2_get_feat_config>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007854:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007858:	2b00      	cmp	r3, #0
 800785a:	f040 8085 	bne.w	8007968 <set_wrist_gest_config+0x178>
        {
            /* Define the offset in bytes for gesture select */
            idx = wrist_gest_config.start_addr;
 800785e:	7abb      	ldrb	r3, [r7, #10]
 8007860:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8007864:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007868:	085b      	lsrs	r3, r3, #1
 800786a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set wearable arm */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_WRIST_GEST_WEAR_ARM, config->wearable_arm);
 800786e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	6a3a      	ldr	r2, [r7, #32]
 8007876:	4413      	add	r3, r2
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b21b      	sxth	r3, r3
 800787c:	f023 0310 	bic.w	r3, r3, #16
 8007880:	b21a      	sxth	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	b21b      	sxth	r3, r3
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	b21b      	sxth	r3, r3
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	b21b      	sxth	r3, r3
 8007892:	4313      	orrs	r3, r2
 8007894:	b219      	sxth	r1, r3
 8007896:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	6a3a      	ldr	r2, [r7, #32]
 800789e:	4413      	add	r3, r2
 80078a0:	b28a      	uxth	r2, r1
 80078a2:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set minimum tilt angle (min_flick_peak) */
            idx++;
 80078a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078a8:	3301      	adds	r3, #1
 80078aa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_peak;
 80078ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	6a3a      	ldr	r2, [r7, #32]
 80078b6:	4413      	add	r3, r2
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	8852      	ldrh	r2, [r2, #2]
 80078bc:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_flick_samples */
            idx++;
 80078be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078c2:	3301      	adds	r3, #1
 80078c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_samples;
 80078c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	6a3a      	ldr	r2, [r7, #32]
 80078d0:	4413      	add	r3, r2
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	8892      	ldrh	r2, [r2, #4]
 80078d6:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max time within gesture moment has to be completed */
            idx++;
 80078d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078dc:	3301      	adds	r3, #1
 80078de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_duration;
 80078e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	6a3a      	ldr	r2, [r7, #32]
 80078ea:	4413      	add	r3, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	88d2      	ldrh	r2, [r2, #6]
 80078f0:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80078f2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078f6:	3301      	adds	r3, #1
 80078f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_gest_config.start_addr;
 80078fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	b2da      	uxtb	r2, r3
 8007904:	7abb      	ldrb	r3, [r7, #10]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 800790c:	2300      	movs	r3, #0
 800790e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007912:	e015      	b.n	8007940 <set_wrist_gest_config+0x150>
            {
                feat_config[wrist_gest_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 8007914:	7abb      	ldrb	r3, [r7, #10]
 8007916:	461a      	mov	r2, r3
 8007918:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800791c:	4413      	add	r3, r2
 800791e:	6a3a      	ldr	r2, [r7, #32]
 8007920:	441a      	add	r2, r3
                feat_config[wrist_gest_config.start_addr +
 8007922:	7abb      	ldrb	r3, [r7, #10]
 8007924:	4619      	mov	r1, r3
 8007926:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800792a:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 800792c:	7812      	ldrb	r2, [r2, #0]
 800792e:	3328      	adds	r3, #40	@ 0x28
 8007930:	443b      	add	r3, r7
 8007932:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8007936:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800793a:	3301      	adds	r3, #1
 800793c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007940:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007944:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007948:	429a      	cmp	r2, r3
 800794a:	d3e3      	bcc.n	8007914 <set_wrist_gest_config+0x124>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800794c:	f107 010c 	add.w	r1, r7, #12
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2210      	movs	r2, #16
 8007954:	2030      	movs	r0, #48	@ 0x30
 8007956:	f7fc f966 	bl	8003c26 <bmi2_set_regs>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007960:	e002      	b.n	8007968 <set_wrist_gest_config+0x178>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007962:	23f8      	movs	r3, #248	@ 0xf8
 8007964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007968:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800796c:	4618      	mov	r0, r3
 800796e:	3728      	adds	r7, #40	@ 0x28
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <set_wrist_wear_wake_up_config>:
/*!
 * @brief This internal API sets wrist wear wake-up configurations like
 * output-configuration.
 */
static int8_t set_wrist_wear_wake_up_config(const struct bmi2_wrist_wear_wake_up_config *config, struct bmi2_dev *dev)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08a      	sub	sp, #40	@ 0x28
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800797e:	f107 030c 	add.w	r3, r7, #12
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	605a      	str	r2, [r3, #4]
 8007988:	609a      	str	r2, [r3, #8]
 800798a:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800798c:	2300      	movs	r3, #0
 800798e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake-up */
    struct bmi2_feature_config wrist_wake_up_config = { 0, 0, 0 };
 8007998:	2300      	movs	r3, #0
 800799a:	723b      	strb	r3, [r7, #8]
 800799c:	2300      	movs	r3, #0
 800799e:	727b      	strb	r3, [r7, #9]
 80079a0:	2300      	movs	r3, #0
 80079a2:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80079a4:	f107 030c 	add.w	r3, r7, #12
 80079a8:	623b      	str	r3, [r7, #32]

    /* Search for wrist wear wake-up feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_config, BMI2_WRIST_WEAR_WAKE_UP, dev);
 80079aa:	f107 0308 	add.w	r3, r7, #8
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	2114      	movs	r1, #20
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fc ffa3 	bl	80048fe <bmi2_extract_input_feat_config>
 80079b8:	4603      	mov	r3, r0
 80079ba:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80079bc:	7ffb      	ldrb	r3, [r7, #31]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 809d 	beq.w	8007afe <set_wrist_wear_wake_up_config+0x18a>
    {
        /* Get the configuration from the page where wrist wear wake-up feature resides */
        rslt = bmi2_get_feat_config(wrist_wake_up_config.page, feat_config, dev);
 80079c4:	7a7b      	ldrb	r3, [r7, #9]
 80079c6:	f107 010c 	add.w	r1, r7, #12
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fc ff04 	bl	80047da <bmi2_get_feat_config>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80079d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f040 8091 	bne.w	8007b04 <set_wrist_wear_wake_up_config+0x190>
        {
            /* Define the offset in bytes for wrist wear wake-up select */
            idx = wrist_wake_up_config.start_addr;
 80079e2:	7abb      	ldrb	r3, [r7, #10]
 80079e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80079e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80079ec:	085b      	lsrs	r3, r3, #1
 80079ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Increment offset by 1 more word to set min_angle_focus */
            idx++;
 80079f2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80079f6:	3301      	adds	r3, #1
 80079f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            *(data_p + idx) = config->min_angle_focus;
 80079fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	6a3a      	ldr	r2, [r7, #32]
 8007a04:	4413      	add	r3, r2
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	8812      	ldrh	r2, [r2, #0]
 8007a0a:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_angle_nonfocus */
            idx++;
 8007a0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a10:	3301      	adds	r3, #1
 8007a12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_angle_nonfocus;
 8007a16:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	6a3a      	ldr	r2, [r7, #32]
 8007a1e:	4413      	add	r3, r2
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	8852      	ldrh	r2, [r2, #2]
 8007a24:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_lr */
            idx++;
 8007a26:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_lr;
 8007a30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	6a3a      	ldr	r2, [r7, #32]
 8007a38:	4413      	add	r3, r2
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	8892      	ldrh	r2, [r2, #4]
 8007a3e:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_ll */
            idx++;
 8007a40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a44:	3301      	adds	r3, #1
 8007a46:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_ll;
 8007a4a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	6a3a      	ldr	r2, [r7, #32]
 8007a52:	4413      	add	r3, r2
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	88d2      	ldrh	r2, [r2, #6]
 8007a58:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pd */
            idx++;
 8007a5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a5e:	3301      	adds	r3, #1
 8007a60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pd;
 8007a64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	6a3a      	ldr	r2, [r7, #32]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	8912      	ldrh	r2, [r2, #8]
 8007a72:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pu */
            idx++;
 8007a74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a78:	3301      	adds	r3, #1
 8007a7a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pu;
 8007a7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	6a3a      	ldr	r2, [r7, #32]
 8007a86:	4413      	add	r3, r2
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	8952      	ldrh	r2, [r2, #10]
 8007a8c:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8007a8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a92:	3301      	adds	r3, #1
 8007a94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_wake_up_config.start_addr;
 8007a98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	7abb      	ldrb	r3, [r7, #10]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007aae:	e015      	b.n	8007adc <set_wrist_wear_wake_up_config+0x168>
            {
                feat_config[wrist_wake_up_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8007ab0:	7abb      	ldrb	r3, [r7, #10]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ab8:	4413      	add	r3, r2
 8007aba:	6a3a      	ldr	r2, [r7, #32]
 8007abc:	441a      	add	r2, r3
                feat_config[wrist_wake_up_config.start_addr +
 8007abe:	7abb      	ldrb	r3, [r7, #10]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ac6:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8007ac8:	7812      	ldrb	r2, [r2, #0]
 8007aca:	3328      	adds	r3, #40	@ 0x28
 8007acc:	443b      	add	r3, r7
 8007ace:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8007ad2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007adc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007ae0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d3e3      	bcc.n	8007ab0 <set_wrist_wear_wake_up_config+0x13c>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8007ae8:	f107 010c 	add.w	r1, r7, #12
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2210      	movs	r2, #16
 8007af0:	2030      	movs	r0, #48	@ 0x30
 8007af2:	f7fc f898 	bl	8003c26 <bmi2_set_regs>
 8007af6:	4603      	mov	r3, r0
 8007af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007afc:	e002      	b.n	8007b04 <set_wrist_wear_wake_up_config+0x190>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007afe:	23f8      	movs	r3, #248	@ 0xf8
 8007b00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007b04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3728      	adds	r7, #40	@ 0x28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <get_any_motion_config>:
/*!
 * @brief This internal API gets any-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t get_any_motion_config(struct bmi2_any_motion_config *config, struct bmi2_dev *dev)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b08a      	sub	sp, #40	@ 0x28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007b1a:	f107 030c 	add.w	r3, r7, #12
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	605a      	str	r2, [r3, #4]
 8007b24:	609a      	str	r2, [r3, #8]
 8007b26:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any-motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 8007b2e:	2300      	movs	r3, #0
 8007b30:	723b      	strb	r3, [r7, #8]
 8007b32:	2300      	movs	r3, #0
 8007b34:	727b      	strb	r3, [r7, #9]
 8007b36:	2300      	movs	r3, #0
 8007b38:	72bb      	strb	r3, [r7, #10]

    /* Search for any-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 8007b3a:	f107 0308 	add.w	r3, r7, #8
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	2104      	movs	r1, #4
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fc fedb 	bl	80048fe <bmi2_extract_input_feat_config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (feat_found)
 8007b4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d064      	beq.n	8007c20 <get_any_motion_config+0x110>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 8007b56:	7a7b      	ldrb	r3, [r7, #9]
 8007b58:	f107 010c 	add.w	r1, r7, #12
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fc fe3b 	bl	80047da <bmi2_get_feat_config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007b6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d159      	bne.n	8007c26 <get_any_motion_config+0x116>
        {
            /* Define the offset for feature enable for any-motion */
            idx = any_mot_config.start_addr;
 8007b72:	7abb      	ldrb	r3, [r7, #10]
 8007b74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate duration, x, y and z select */
            lsb = (uint16_t) feat_config[idx++];
 8007b78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007b82:	3328      	adds	r3, #40	@ 0x28
 8007b84:	443b      	add	r3, r7
 8007b86:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007b8a:	847b      	strh	r3, [r7, #34]	@ 0x22
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007b96:	3328      	adds	r3, #40	@ 0x28
 8007b98:	443b      	add	r3, r7
 8007b9a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	843b      	strh	r3, [r7, #32]
            lsb_msb = lsb | msb;
 8007ba2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007ba4:	8c3b      	ldrh	r3, [r7, #32]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	83fb      	strh	r3, [r7, #30]

            /* Get duration */
            config->duration = lsb_msb & BMI2_ANY_NO_MOT_DUR_MASK;
 8007baa:	8bfb      	ldrh	r3, [r7, #30]
 8007bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	801a      	strh	r2, [r3, #0]

            /* Get x-select */
            config->select_x = (lsb_msb & BMI2_ANY_NO_MOT_X_SEL_MASK) >> BMI2_ANY_NO_MOT_X_SEL_POS;
 8007bb6:	8bfb      	ldrh	r3, [r7, #30]
 8007bb8:	135b      	asrs	r3, r3, #13
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	809a      	strh	r2, [r3, #4]

            /* Get y-select */
            config->select_y = (lsb_msb & BMI2_ANY_NO_MOT_Y_SEL_MASK) >> BMI2_ANY_NO_MOT_Y_SEL_POS;
 8007bc6:	8bfb      	ldrh	r3, [r7, #30]
 8007bc8:	139b      	asrs	r3, r3, #14
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	80da      	strh	r2, [r3, #6]

            /* Get z-select */
            config->select_z = (lsb_msb & BMI2_ANY_NO_MOT_Z_SEL_MASK) >> BMI2_ANY_NO_MOT_Z_SEL_POS;
 8007bd6:	8bfb      	ldrh	r3, [r7, #30]
 8007bd8:	0bdb      	lsrs	r3, r3, #15
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	811a      	strh	r2, [r3, #8]

            /* Get word to calculate threshold, output configuration from the same word */
            lsb = (uint16_t) feat_config[idx++];
 8007be0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007bea:	3328      	adds	r3, #40	@ 0x28
 8007bec:	443b      	add	r3, r7
 8007bee:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007bf2:	847b      	strh	r3, [r7, #34]	@ 0x22
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007bf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007bfe:	3328      	adds	r3, #40	@ 0x28
 8007c00:	443b      	add	r3, r7
 8007c02:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007c06:	021b      	lsls	r3, r3, #8
 8007c08:	843b      	strh	r3, [r7, #32]
            lsb_msb = lsb | msb;
 8007c0a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007c0c:	8c3b      	ldrh	r3, [r7, #32]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	83fb      	strh	r3, [r7, #30]

            /* Get threshold */
            config->threshold = lsb_msb & BMI2_ANY_NO_MOT_THRES_MASK;
 8007c12:	8bfb      	ldrh	r3, [r7, #30]
 8007c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	805a      	strh	r2, [r3, #2]
 8007c1e:	e002      	b.n	8007c26 <get_any_motion_config+0x116>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007c20:	23f8      	movs	r3, #248	@ 0xf8
 8007c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007c26:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3728      	adds	r7, #40	@ 0x28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <get_no_motion_config>:
/*!
 * @brief This internal API gets no-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t get_no_motion_config(struct bmi2_no_motion_config *config, struct bmi2_dev *dev)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b08a      	sub	sp, #40	@ 0x28
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007c3c:	f107 030c 	add.w	r3, r7, #12
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	605a      	str	r2, [r3, #4]
 8007c46:	609a      	str	r2, [r3, #8]
 8007c48:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	723b      	strb	r3, [r7, #8]
 8007c60:	2300      	movs	r3, #0
 8007c62:	727b      	strb	r3, [r7, #9]
 8007c64:	2300      	movs	r3, #0
 8007c66:	72bb      	strb	r3, [r7, #10]

    /* Search for no-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 8007c68:	f107 0308 	add.w	r3, r7, #8
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	2105      	movs	r1, #5
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fc fe44 	bl	80048fe <bmi2_extract_input_feat_config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007c7a:	7ffb      	ldrb	r3, [r7, #31]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d064      	beq.n	8007d4a <get_no_motion_config+0x118>
    {
        /* Get the configuration from the page where no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 8007c80:	7a7b      	ldrb	r3, [r7, #9]
 8007c82:	f107 010c 	add.w	r1, r7, #12
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fc fda6 	bl	80047da <bmi2_get_feat_config>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007c94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d159      	bne.n	8007d50 <get_no_motion_config+0x11e>
        {
            /* Define the offset for feature enable for no-motion */
            idx = no_mot_config.start_addr;
 8007c9c:	7abb      	ldrb	r3, [r7, #10]
 8007c9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate duration, x, y and z select */
            lsb = (uint16_t) feat_config[idx++];
 8007ca2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007cac:	3328      	adds	r3, #40	@ 0x28
 8007cae:	443b      	add	r3, r7
 8007cb0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007cb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007cb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007cc0:	3328      	adds	r3, #40	@ 0x28
 8007cc2:	443b      	add	r3, r7
 8007cc4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8007ccc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007cce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	843b      	strh	r3, [r7, #32]

            /* Get duration */
            config->duration = lsb_msb & BMI2_ANY_NO_MOT_DUR_MASK;
 8007cd4:	8c3b      	ldrh	r3, [r7, #32]
 8007cd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	801a      	strh	r2, [r3, #0]

            /* Get x-select */
            config->select_x = (lsb_msb & BMI2_ANY_NO_MOT_X_SEL_MASK) >> BMI2_ANY_NO_MOT_X_SEL_POS;
 8007ce0:	8c3b      	ldrh	r3, [r7, #32]
 8007ce2:	135b      	asrs	r3, r3, #13
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	809a      	strh	r2, [r3, #4]

            /* Get y-select */
            config->select_y = (lsb_msb & BMI2_ANY_NO_MOT_Y_SEL_MASK) >> BMI2_ANY_NO_MOT_Y_SEL_POS;
 8007cf0:	8c3b      	ldrh	r3, [r7, #32]
 8007cf2:	139b      	asrs	r3, r3, #14
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	80da      	strh	r2, [r3, #6]

            /* Get z-select */
            config->select_z = (lsb_msb & BMI2_ANY_NO_MOT_Z_SEL_MASK) >> BMI2_ANY_NO_MOT_Z_SEL_POS;
 8007d00:	8c3b      	ldrh	r3, [r7, #32]
 8007d02:	0bdb      	lsrs	r3, r3, #15
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	811a      	strh	r2, [r3, #8]

            /* Get word to calculate threshold, output configuration from the same word */
            lsb = (uint16_t) feat_config[idx++];
 8007d0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007d14:	3328      	adds	r3, #40	@ 0x28
 8007d16:	443b      	add	r3, r7
 8007d18:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007d1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007d1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007d28:	3328      	adds	r3, #40	@ 0x28
 8007d2a:	443b      	add	r3, r7
 8007d2c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8007d34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007d36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	843b      	strh	r3, [r7, #32]

            /* Get threshold */
            config->threshold = lsb_msb & BMI2_ANY_NO_MOT_THRES_MASK;
 8007d3c:	8c3b      	ldrh	r3, [r7, #32]
 8007d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	805a      	strh	r2, [r3, #2]
 8007d48:	e002      	b.n	8007d50 <get_no_motion_config+0x11e>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007d4a:	23f8      	movs	r3, #248	@ 0xf8
 8007d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007d50:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3728      	adds	r7, #40	@ 0x28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <get_sig_motion_config>:
/*!
 * @brief This internal API gets sig-motion configurations like block-size,
 * output-configuration and other parameters.
 */
static int8_t get_sig_motion_config(struct bmi2_sig_motion_config *config, struct bmi2_dev *dev)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	@ 0x28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007d66:	f107 030c 	add.w	r3, r7, #12
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	605a      	str	r2, [r3, #4]
 8007d70:	609a      	str	r2, [r3, #8]
 8007d72:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 8007d86:	2300      	movs	r3, #0
 8007d88:	723b      	strb	r3, [r7, #8]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	727b      	strb	r3, [r7, #9]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	72bb      	strb	r3, [r7, #10]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 8007d92:	f107 0308 	add.w	r3, r7, #8
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	2103      	movs	r1, #3
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fc fdaf 	bl	80048fe <bmi2_extract_input_feat_config>
 8007da0:	4603      	mov	r3, r0
 8007da2:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007da4:	7ffb      	ldrb	r3, [r7, #31]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d02d      	beq.n	8007e06 <get_sig_motion_config+0xaa>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 8007daa:	7a7b      	ldrb	r3, [r7, #9]
 8007dac:	f107 010c 	add.w	r1, r7, #12
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fc fd11 	bl	80047da <bmi2_get_feat_config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007dbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d122      	bne.n	8007e0c <get_sig_motion_config+0xb0>
        {
            /* Define the offset for feature enable for sig-motion */
            idx = sig_mot_config.start_addr;
 8007dc6:	7abb      	ldrb	r3, [r7, #10]
 8007dc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate parameter 1 */
            lsb = (uint16_t) feat_config[idx++];
 8007dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007dd6:	3328      	adds	r3, #40	@ 0x28
 8007dd8:	443b      	add	r3, r7
 8007dda:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007dde:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007de0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007dea:	3328      	adds	r3, #40	@ 0x28
 8007dec:	443b      	add	r3, r7
 8007dee:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8007df6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007df8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	843b      	strh	r3, [r7, #32]

            /* Get parameter 1  */
            config->block_size = lsb_msb & BMI2_SIG_MOT_PARAM_1_MASK;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	8c3a      	ldrh	r2, [r7, #32]
 8007e02:	801a      	strh	r2, [r3, #0]
 8007e04:	e002      	b.n	8007e0c <get_sig_motion_config+0xb0>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007e06:	23f8      	movs	r3, #248	@ 0xf8
 8007e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007e0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3728      	adds	r7, #40	@ 0x28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <get_step_count_params_config>:

/*!
 * @brief This internal API gets step counter parameter configurations.
 */
static int8_t get_step_count_params_config(uint16_t *step_count_params, struct bmi2_dev *dev)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08c      	sub	sp, #48	@ 0x30
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007e28:	f107 030c 	add.w	r3, r7, #12
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	605a      	str	r2, [r3, #4]
 8007e32:	609a      	str	r2, [r3, #8]
 8007e34:	60da      	str	r2, [r3, #12]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Initialize feature configuration for step counter 1 */
    struct bmi2_feature_config step_params_config = { 0, 0, 0 };
 8007e42:	2300      	movs	r3, #0
 8007e44:	723b      	strb	r3, [r7, #8]
 8007e46:	2300      	movs	r3, #0
 8007e48:	727b      	strb	r3, [r7, #9]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	72bb      	strb	r3, [r7, #10]

    /* Variable to define start address of the parameters */
    uint8_t start_addr;

    /* Variable to define number of bytes */
    uint8_t n_bytes = (BMI2_STEP_CNT_N_PARAMS * 2);
 8007e4e:	2332      	movs	r3, #50	@ 0x32
 8007e50:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    /* Variable to store number of pages */
    uint8_t n_pages = (n_bytes / 16);
 8007e54:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007e58:	091b      	lsrs	r3, r3, #4
 8007e5a:	f887 3020 	strb.w	r3, [r7, #32]

    /* Variable to define the remaining bytes to be read */
    uint8_t remain_len;

    /* Variable to define the maximum words to be read in a page */
    uint8_t max_len = BMI2_FEAT_SIZE_IN_BYTES;
 8007e5e:	2310      	movs	r3, #16
 8007e60:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Variable index bytes in a page */
    uint8_t page_byte_idx;

    /* Variable to index the parameters */
    uint8_t param_idx = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Search for step counter parameter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_params_config, BMI2_STEP_COUNTER_PARAMS, dev);
 8007e6a:	f107 0308 	add.w	r3, r7, #8
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	211d      	movs	r1, #29
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fc fd43 	bl	80048fe <bmi2_extract_input_feat_config>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007e7c:	7ffb      	ldrb	r3, [r7, #31]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d079      	beq.n	8007f76 <get_step_count_params_config+0x15e>
    {
        /* Get the start page for the step counter parameters */
        start_page = step_params_config.page;
 8007e82:	7a7b      	ldrb	r3, [r7, #9]
 8007e84:	77bb      	strb	r3, [r7, #30]

        /* Get the end page for the step counter parameters */
        end_page = start_page + n_pages;
 8007e86:	7fba      	ldrb	r2, [r7, #30]
 8007e88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	777b      	strb	r3, [r7, #29]

        /* Get the start address for the step counter parameters */
        start_addr = step_params_config.start_addr;
 8007e90:	7abb      	ldrb	r3, [r7, #10]
 8007e92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        /* Get the remaining length of bytes to be read */
        remain_len = (uint8_t)((n_bytes - (n_pages * 16)) + start_addr);
 8007e96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007eaa:	4413      	add	r3, r2
 8007eac:	773b      	strb	r3, [r7, #28]
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 8007eae:	7fbb      	ldrb	r3, [r7, #30]
 8007eb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eb4:	e059      	b.n	8007f6a <get_step_count_params_config+0x152>
        {
            /* Get the configuration from the respective page */
            rslt = bmi2_get_feat_config(page_idx, feat_config, dev);
 8007eb6:	f107 010c 	add.w	r1, r7, #12
 8007eba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fc fc8a 	bl	80047da <bmi2_get_feat_config>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMI2_OK)
 8007ecc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d145      	bne.n	8007f60 <get_step_count_params_config+0x148>
            {
                /* Start from address 0x00 when switched to next page */
                if (page_idx > start_page)
 8007ed4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8007ed8:	7fbb      	ldrb	r3, [r7, #30]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d902      	bls.n	8007ee4 <get_step_count_params_config+0xcc>
                {
                    start_addr = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                }

                /* Remaining number of bytes to be read in the page  */
                if (page_idx == end_page)
 8007ee4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8007ee8:	7f7b      	ldrb	r3, [r7, #29]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d102      	bne.n	8007ef4 <get_step_count_params_config+0xdc>
                {
                    max_len = remain_len;
 8007eee:	7f3b      	ldrb	r3, [r7, #28]
 8007ef0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                }

                /* Get the offset */
                page_byte_idx = start_addr;
 8007ef4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007ef8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                while (page_byte_idx < max_len)
 8007efc:	e02a      	b.n	8007f54 <get_step_count_params_config+0x13c>
                {
                    /* Get word to calculate the parameter*/
                    lsb = (uint16_t) feat_config[page_byte_idx++];
 8007efe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
 8007f08:	3330      	adds	r3, #48	@ 0x30
 8007f0a:	443b      	add	r3, r7
 8007f0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007f10:	84bb      	strh	r3, [r7, #36]	@ 0x24
                    if (page_byte_idx < max_len)
 8007f12:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007f16:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d20a      	bcs.n	8007f34 <get_step_count_params_config+0x11c>
                    {
                        msb = ((uint16_t) feat_config[page_byte_idx++] << 8);
 8007f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
 8007f28:	3330      	adds	r3, #48	@ 0x30
 8007f2a:	443b      	add	r3, r7
 8007f2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    }

                    lsb_msb = lsb | msb;
 8007f34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007f36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	847b      	strh	r3, [r7, #34]	@ 0x22

                    /* Get parameters 1 to 25 */
                    step_count_params[param_idx] = lsb_msb & BMI2_STEP_COUNT_PARAMS_MASK;
 8007f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	4413      	add	r3, r2
 8007f46:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007f48:	801a      	strh	r2, [r3, #0]

                    /* Increment to next parameter */
                    param_idx++;
 8007f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f4e:	3301      	adds	r3, #1
 8007f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                while (page_byte_idx < max_len)
 8007f54:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007f58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d3ce      	bcc.n	8007efe <get_step_count_params_config+0xe6>
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 8007f60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f64:	3301      	adds	r3, #1
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f6a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8007f6e:	7f7b      	ldrb	r3, [r7, #29]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d9a0      	bls.n	8007eb6 <get_step_count_params_config+0x9e>
 8007f74:	e002      	b.n	8007f7c <get_step_count_params_config+0x164>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007f76:	23f8      	movs	r3, #248	@ 0xf8
 8007f78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8007f7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3730      	adds	r7, #48	@ 0x30
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <get_step_config>:

/*!
 * @brief This internal API gets step counter/detector/activity configurations.
 */
static int8_t get_step_config(struct bmi2_step_config *config, struct bmi2_dev *dev)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08a      	sub	sp, #40	@ 0x28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007f92:	f107 030c 	add.w	r3, r7, #12
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	605a      	str	r2, [r3, #4]
 8007f9c:	609a      	str	r2, [r3, #8]
 8007f9e:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	723b      	strb	r3, [r7, #8]
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	727b      	strb	r3, [r7, #9]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	72bb      	strb	r3, [r7, #10]

    /* Search for step counter 4 feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 8007fbe:	f107 0308 	add.w	r3, r7, #8
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	2107      	movs	r1, #7
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fc fc99 	bl	80048fe <bmi2_extract_input_feat_config>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007fd0:	7ffb      	ldrb	r3, [r7, #31]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d038      	beq.n	8008048 <get_step_config+0xc0>
    {
        /* Get the configuration from the page where step counter 4 parameter resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 8007fd6:	7a7b      	ldrb	r3, [r7, #9]
 8007fd8:	f107 010c 	add.w	r1, r7, #12
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fc fbfb 	bl	80047da <bmi2_get_feat_config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007fea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d12d      	bne.n	800804e <get_step_config+0xc6>
        {
            /* Define the offset for feature enable for step counter/detector/activity */
            idx = step_count_config.start_addr;
 8007ff2:	7abb      	ldrb	r3, [r7, #10]
 8007ff4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate water-mark level and reset counter */
            lsb = (uint16_t) feat_config[idx++];
 8007ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8008002:	3328      	adds	r3, #40	@ 0x28
 8008004:	443b      	add	r3, r7
 8008006:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800800a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 800800c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8008016:	3328      	adds	r3, #40	@ 0x28
 8008018:	443b      	add	r3, r7
 800801a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800801e:	021b      	lsls	r3, r3, #8
 8008020:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8008022:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008024:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008026:	4313      	orrs	r3, r2
 8008028:	843b      	strh	r3, [r7, #32]

            /* Get water-mark level */
            config->watermark_level = lsb_msb & BMI2_STEP_COUNT_WM_LEVEL_MASK;
 800802a:	8c3b      	ldrh	r3, [r7, #32]
 800802c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	801a      	strh	r2, [r3, #0]

            /* Get reset counter */
            config->reset_counter = (lsb_msb & BMI2_STEP_COUNT_RST_CNT_MASK) >> BMI2_STEP_COUNT_RST_CNT_POS;
 8008036:	8c3b      	ldrh	r3, [r7, #32]
 8008038:	129b      	asrs	r3, r3, #10
 800803a:	b29b      	uxth	r3, r3
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	805a      	strh	r2, [r3, #2]
 8008046:	e002      	b.n	800804e <get_step_config+0xc6>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8008048:	23f8      	movs	r3, #248	@ 0xf8
 800804a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800804e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8008052:	4618      	mov	r0, r3
 8008054:	3728      	adds	r7, #40	@ 0x28
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <get_wrist_gest_config>:
/*!
 * @brief This internal API gets wrist gesture configurations like wearable-arm,
 * and output-configuration.
 */
static int8_t get_wrist_gest_config(struct bmi2_wrist_gest_config *config, struct bmi2_dev *dev)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b08a      	sub	sp, #40	@ 0x28
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8008064:	f107 030c 	add.w	r3, r7, #12
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	605a      	str	r2, [r3, #4]
 800806e:	609a      	str	r2, [r3, #8]
 8008070:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_config = { 0, 0, 0 };
 8008078:	2300      	movs	r3, #0
 800807a:	723b      	strb	r3, [r7, #8]
 800807c:	2300      	movs	r3, #0
 800807e:	727b      	strb	r3, [r7, #9]
 8008080:	2300      	movs	r3, #0
 8008082:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	623b      	str	r3, [r7, #32]

    /* Search for wrist gesture feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_config, BMI2_WRIST_GESTURE, dev);
 800808a:	f107 0308 	add.w	r3, r7, #8
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	2113      	movs	r1, #19
 8008092:	4618      	mov	r0, r3
 8008094:	f7fc fc33 	bl	80048fe <bmi2_extract_input_feat_config>
 8008098:	4603      	mov	r3, r0
 800809a:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 800809c:	7ffb      	ldrb	r3, [r7, #31]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d04a      	beq.n	8008138 <get_wrist_gest_config+0xde>
    {
        /* Get the configuration from the page where wrist gesture feature  resides */
        rslt = bmi2_get_feat_config(wrist_gest_config.page, feat_config, dev);
 80080a2:	7a7b      	ldrb	r3, [r7, #9]
 80080a4:	f107 010c 	add.w	r1, r7, #12
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fc fb95 	bl	80047da <bmi2_get_feat_config>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80080b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d13f      	bne.n	800813e <get_wrist_gest_config+0xe4>
        {
            /* Define the offset in bytes for wrist gesture select */
            idx = wrist_gest_config.start_addr;
 80080be:	7abb      	ldrb	r3, [r7, #10]
 80080c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80080c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080c8:	085b      	lsrs	r3, r3, #1
 80080ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get wearable arm */
            config->wearable_arm = (*(data_p + idx) & BMI2_WRIST_GEST_WEAR_ARM_MASK) >> BMI2_WRIST_GEST_WEAR_ARM_POS;
 80080ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	6a3a      	ldr	r2, [r7, #32]
 80080d6:	4413      	add	r3, r2
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	111b      	asrs	r3, r3, #4
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	801a      	strh	r2, [r3, #0]

            /* Increment the offset by 1 word to get min_flick_peak */
            idx++;
 80080e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080ec:	3301      	adds	r3, #1
 80080ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->min_flick_peak = *(data_p + idx);
 80080f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	6a3a      	ldr	r2, [r7, #32]
 80080fa:	4413      	add	r3, r2
 80080fc:	881a      	ldrh	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	805a      	strh	r2, [r3, #2]

            /* Increment the offset by 1 word to get min_flick_samples */
            idx++;
 8008102:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008106:	3301      	adds	r3, #1
 8008108:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->min_flick_samples = *(data_p + idx);
 800810c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008110:	005b      	lsls	r3, r3, #1
 8008112:	6a3a      	ldr	r2, [r7, #32]
 8008114:	4413      	add	r3, r2
 8008116:	881a      	ldrh	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	809a      	strh	r2, [r3, #4]

            /* Increment the offset by 1 word to get max_duration */
            idx++;
 800811c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008120:	3301      	adds	r3, #1
 8008122:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_duration = *(data_p + idx);
 8008126:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	6a3a      	ldr	r2, [r7, #32]
 800812e:	4413      	add	r3, r2
 8008130:	881a      	ldrh	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	80da      	strh	r2, [r3, #6]
 8008136:	e002      	b.n	800813e <get_wrist_gest_config+0xe4>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8008138:	23f8      	movs	r3, #248	@ 0xf8
 800813a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800813e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8008142:	4618      	mov	r0, r3
 8008144:	3728      	adds	r7, #40	@ 0x28
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <get_wrist_wear_wake_up_config>:
/*!
 * @brief This internal API gets wrist wear wake-up configurations like
 * output-configuration.
 */
static int8_t get_wrist_wear_wake_up_config(struct bmi2_wrist_wear_wake_up_config *config, struct bmi2_dev *dev)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b08a      	sub	sp, #40	@ 0x28
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8008154:	f107 030c 	add.w	r3, r7, #12
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	605a      	str	r2, [r3, #4]
 800815e:	609a      	str	r2, [r3, #8]
 8008160:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake-up */
    struct bmi2_feature_config wrist_wake_up_config = { 0, 0, 0 };
 8008168:	2300      	movs	r3, #0
 800816a:	723b      	strb	r3, [r7, #8]
 800816c:	2300      	movs	r3, #0
 800816e:	727b      	strb	r3, [r7, #9]
 8008170:	2300      	movs	r3, #0
 8008172:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8008174:	f107 030c 	add.w	r3, r7, #12
 8008178:	623b      	str	r3, [r7, #32]

    /* Search for wrist wear wake-up feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_config, BMI2_WRIST_WEAR_WAKE_UP, dev);
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	2114      	movs	r1, #20
 8008182:	4618      	mov	r0, r3
 8008184:	f7fc fbbb 	bl	80048fe <bmi2_extract_input_feat_config>
 8008188:	4603      	mov	r3, r0
 800818a:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 800818c:	7ffb      	ldrb	r3, [r7, #31]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d064      	beq.n	800825c <get_wrist_wear_wake_up_config+0x112>
    {
        /* Get the configuration from the page where wrist wear wake-up feature  resides */
        rslt = bmi2_get_feat_config(wrist_wake_up_config.page, feat_config, dev);
 8008192:	7a7b      	ldrb	r3, [r7, #9]
 8008194:	f107 010c 	add.w	r1, r7, #12
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	4618      	mov	r0, r3
 800819c:	f7fc fb1d 	bl	80047da <bmi2_get_feat_config>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80081a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d159      	bne.n	8008262 <get_wrist_wear_wake_up_config+0x118>
        {
            /* Define the offset in bytes for wrist wear wake-up select */
            idx = wrist_wake_up_config.start_addr;
 80081ae:	7abb      	ldrb	r3, [r7, #10]
 80081b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80081b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081b8:	085b      	lsrs	r3, r3, #1
 80081ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Increment the offset value by 1 word to get min_angle_focus */
            idx++;
 80081be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081c2:	3301      	adds	r3, #1
 80081c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            config->min_angle_focus = *(data_p + idx);
 80081c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	6a3a      	ldr	r2, [r7, #32]
 80081d0:	4413      	add	r3, r2
 80081d2:	881a      	ldrh	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	801a      	strh	r2, [r3, #0]

            /* Increment the offset value by 1 word to get min_angle_nonfocus */
            idx++;
 80081d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081dc:	3301      	adds	r3, #1
 80081de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->min_angle_nonfocus = *(data_p + idx);
 80081e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081e6:	005b      	lsls	r3, r3, #1
 80081e8:	6a3a      	ldr	r2, [r7, #32]
 80081ea:	4413      	add	r3, r2
 80081ec:	881a      	ldrh	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	805a      	strh	r2, [r3, #2]

            /* Increment the offset value by 1 word to get max_tilt_lr */
            idx++;
 80081f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081f6:	3301      	adds	r3, #1
 80081f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_lr = *(data_p + idx);
 80081fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	6a3a      	ldr	r2, [r7, #32]
 8008204:	4413      	add	r3, r2
 8008206:	881a      	ldrh	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	809a      	strh	r2, [r3, #4]

            /* Increment the offset value by 1 word to get max_tilt_ll */
            idx++;
 800820c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008210:	3301      	adds	r3, #1
 8008212:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_ll = *(data_p + idx);
 8008216:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	6a3a      	ldr	r2, [r7, #32]
 800821e:	4413      	add	r3, r2
 8008220:	881a      	ldrh	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	80da      	strh	r2, [r3, #6]

            /* Increment the offset value by 1 word to get max_tilt_pd */
            idx++;
 8008226:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800822a:	3301      	adds	r3, #1
 800822c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_pd = *(data_p + idx);
 8008230:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	6a3a      	ldr	r2, [r7, #32]
 8008238:	4413      	add	r3, r2
 800823a:	881a      	ldrh	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	811a      	strh	r2, [r3, #8]

            /* Increment the offset value by 1 word to get max_tilt_pu */
            idx++;
 8008240:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008244:	3301      	adds	r3, #1
 8008246:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_pu = *(data_p + idx);
 800824a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	6a3a      	ldr	r2, [r7, #32]
 8008252:	4413      	add	r3, r2
 8008254:	881a      	ldrh	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	815a      	strh	r2, [r3, #10]
 800825a:	e002      	b.n	8008262 <get_wrist_wear_wake_up_config+0x118>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800825c:	23f8      	movs	r3, #248	@ 0xf8
 800825e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8008262:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8008266:	4618      	mov	r0, r3
 8008268:	3728      	adds	r7, #40	@ 0x28
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <set_feat_config>:

/*!
 * @brief This internal API sets feature configuration to the sensor.
 */
static int8_t set_feat_config(const struct bmi2_sens_config *sens_cfg, uint8_t loop, struct bmi2_dev *dev)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	460b      	mov	r3, r1
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    switch (sens_cfg[loop].type)
 800827e:	7afa      	ldrb	r2, [r7, #11]
 8008280:	4613      	mov	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	461a      	mov	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	3b03      	subs	r3, #3
 8008292:	2b1a      	cmp	r3, #26
 8008294:	f200 80aa 	bhi.w	80083ec <set_feat_config+0x17c>
 8008298:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <set_feat_config+0x30>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	0800834d 	.word	0x0800834d
 80082a4:	0800830d 	.word	0x0800830d
 80082a8:	0800832d 	.word	0x0800832d
 80082ac:	0800838d 	.word	0x0800838d
 80082b0:	0800838d 	.word	0x0800838d
 80082b4:	0800838d 	.word	0x0800838d
 80082b8:	080083ed 	.word	0x080083ed
 80082bc:	080083ed 	.word	0x080083ed
 80082c0:	080083ed 	.word	0x080083ed
 80082c4:	080083ed 	.word	0x080083ed
 80082c8:	080083ed 	.word	0x080083ed
 80082cc:	080083ed 	.word	0x080083ed
 80082d0:	080083ed 	.word	0x080083ed
 80082d4:	080083ed 	.word	0x080083ed
 80082d8:	080083ed 	.word	0x080083ed
 80082dc:	080083ed 	.word	0x080083ed
 80082e0:	080083ad 	.word	0x080083ad
 80082e4:	080083cd 	.word	0x080083cd
 80082e8:	080083ed 	.word	0x080083ed
 80082ec:	080083ed 	.word	0x080083ed
 80082f0:	080083ed 	.word	0x080083ed
 80082f4:	080083ed 	.word	0x080083ed
 80082f8:	080083ed 	.word	0x080083ed
 80082fc:	080083ed 	.word	0x080083ed
 8008300:	080083ed 	.word	0x080083ed
 8008304:	080083ed 	.word	0x080083ed
 8008308:	0800836d 	.word	0x0800836d
    {
        /* Set any motion configuration */
        case BMI2_ANY_MOTION:
            rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 800830c:	7afa      	ldrb	r2, [r7, #11]
 800830e:	4613      	mov	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	00db      	lsls	r3, r3, #3
 8008316:	461a      	mov	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	3304      	adds	r3, #4
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe fe40 	bl	8006fa6 <set_any_motion_config>
 8008326:	4603      	mov	r3, r0
 8008328:	75fb      	strb	r3, [r7, #23]
            break;
 800832a:	e062      	b.n	80083f2 <set_feat_config+0x182>

        /* Set no motion configuration */
        case BMI2_NO_MOTION:
            rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 800832c:	7afa      	ldrb	r2, [r7, #11]
 800832e:	4613      	mov	r3, r2
 8008330:	00db      	lsls	r3, r3, #3
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	461a      	mov	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4413      	add	r3, r2
 800833c:	3304      	adds	r3, #4
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe ff39 	bl	80071b8 <set_no_motion_config>
 8008346:	4603      	mov	r3, r0
 8008348:	75fb      	strb	r3, [r7, #23]
            break;
 800834a:	e052      	b.n	80083f2 <set_feat_config+0x182>

        /* Set sig-motion configuration */
        case BMI2_SIG_MOTION:
            rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 800834c:	7afa      	ldrb	r2, [r7, #11]
 800834e:	4613      	mov	r3, r2
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	461a      	mov	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	3304      	adds	r3, #4
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	4618      	mov	r0, r3
 8008362:	f7ff f832 	bl	80073ca <set_sig_motion_config>
 8008366:	4603      	mov	r3, r0
 8008368:	75fb      	strb	r3, [r7, #23]
            break;
 800836a:	e042      	b.n	80083f2 <set_feat_config+0x182>

        /* Set the step counter parameters */
        case BMI2_STEP_COUNTER_PARAMS:
            rslt = set_step_count_params_config(sens_cfg[loop].cfg.step_counter_params, dev);
 800836c:	7afa      	ldrb	r2, [r7, #11]
 800836e:	4613      	mov	r3, r2
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	461a      	mov	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4413      	add	r3, r2
 800837c:	3304      	adds	r3, #4
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff f8a8 	bl	80074d6 <set_step_count_params_config>
 8008386:	4603      	mov	r3, r0
 8008388:	75fb      	strb	r3, [r7, #23]
            break;
 800838a:	e032      	b.n	80083f2 <set_feat_config+0x182>

        /* Set step counter/detector/activity configuration */
        case BMI2_STEP_DETECTOR:
        case BMI2_STEP_COUNTER:
        case BMI2_STEP_ACTIVITY:
            rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 800838c:	7afa      	ldrb	r2, [r7, #11]
 800838e:	4613      	mov	r3, r2
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	1a9b      	subs	r3, r3, r2
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	461a      	mov	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4413      	add	r3, r2
 800839c:	3304      	adds	r3, #4
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff f970 	bl	8007686 <set_step_config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]
            break;
 80083aa:	e022      	b.n	80083f2 <set_feat_config+0x182>

        /* Set the wrist gesture configuration */
        case BMI2_WRIST_GESTURE:
            rslt = set_wrist_gest_config(&sens_cfg[loop].cfg.wrist_gest, dev);
 80083ac:	7afa      	ldrb	r2, [r7, #11]
 80083ae:	4613      	mov	r3, r2
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	1a9b      	subs	r3, r3, r2
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	461a      	mov	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	3304      	adds	r3, #4
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff fa15 	bl	80077f0 <set_wrist_gest_config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]
            break;
 80083ca:	e012      	b.n	80083f2 <set_feat_config+0x182>

        /* Set the wrist wear wake-up configuration */
        case BMI2_WRIST_WEAR_WAKE_UP:
            rslt = set_wrist_wear_wake_up_config(&sens_cfg[loop].cfg.wrist_wear_wake_up, dev);
 80083cc:	7afa      	ldrb	r2, [r7, #11]
 80083ce:	4613      	mov	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	461a      	mov	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	3304      	adds	r3, #4
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff fac7 	bl	8007974 <set_wrist_wear_wake_up_config>
 80083e6:	4603      	mov	r3, r0
 80083e8:	75fb      	strb	r3, [r7, #23]
            break;
 80083ea:	e002      	b.n	80083f2 <set_feat_config+0x182>

        default:
            rslt = BMI2_E_INVALID_SENSOR;
 80083ec:	23f8      	movs	r3, #248	@ 0xf8
 80083ee:	75fb      	strb	r3, [r7, #23]
            break;
 80083f0:	bf00      	nop
    }

    return rslt;
 80083f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop

08008400 <get_feat_config>:

/*!
 * @brief This internal API gets feature configuration from the sensor.
 */
static int8_t get_feat_config(struct bmi2_sens_config *sens_cfg, uint8_t loop, struct bmi2_dev *dev)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	460b      	mov	r3, r1
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    switch (sens_cfg[loop].type)
 800840e:	7afa      	ldrb	r2, [r7, #11]
 8008410:	4613      	mov	r3, r2
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	1a9b      	subs	r3, r3, r2
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	461a      	mov	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4413      	add	r3, r2
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	3b03      	subs	r3, #3
 8008422:	2b1a      	cmp	r3, #26
 8008424:	f200 80aa 	bhi.w	800857c <get_feat_config+0x17c>
 8008428:	a201      	add	r2, pc, #4	@ (adr r2, 8008430 <get_feat_config+0x30>)
 800842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842e:	bf00      	nop
 8008430:	0800849d 	.word	0x0800849d
 8008434:	080084bd 	.word	0x080084bd
 8008438:	080084dd 	.word	0x080084dd
 800843c:	0800851d 	.word	0x0800851d
 8008440:	0800851d 	.word	0x0800851d
 8008444:	0800851d 	.word	0x0800851d
 8008448:	0800857d 	.word	0x0800857d
 800844c:	0800857d 	.word	0x0800857d
 8008450:	0800857d 	.word	0x0800857d
 8008454:	0800857d 	.word	0x0800857d
 8008458:	0800857d 	.word	0x0800857d
 800845c:	0800857d 	.word	0x0800857d
 8008460:	0800857d 	.word	0x0800857d
 8008464:	0800857d 	.word	0x0800857d
 8008468:	0800857d 	.word	0x0800857d
 800846c:	0800857d 	.word	0x0800857d
 8008470:	0800853d 	.word	0x0800853d
 8008474:	0800855d 	.word	0x0800855d
 8008478:	0800857d 	.word	0x0800857d
 800847c:	0800857d 	.word	0x0800857d
 8008480:	0800857d 	.word	0x0800857d
 8008484:	0800857d 	.word	0x0800857d
 8008488:	0800857d 	.word	0x0800857d
 800848c:	0800857d 	.word	0x0800857d
 8008490:	0800857d 	.word	0x0800857d
 8008494:	0800857d 	.word	0x0800857d
 8008498:	080084fd 	.word	0x080084fd
    {
        /* Get sig-motion configuration */
        case BMI2_SIG_MOTION:
            rslt = get_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 800849c:	7afa      	ldrb	r2, [r7, #11]
 800849e:	4613      	mov	r3, r2
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	1a9b      	subs	r3, r3, r2
 80084a4:	00db      	lsls	r3, r3, #3
 80084a6:	461a      	mov	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4413      	add	r3, r2
 80084ac:	3304      	adds	r3, #4
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fc53 	bl	8007d5c <get_sig_motion_config>
 80084b6:	4603      	mov	r3, r0
 80084b8:	75fb      	strb	r3, [r7, #23]
            break;
 80084ba:	e062      	b.n	8008582 <get_feat_config+0x182>

        /* Get any motion configuration */
        case BMI2_ANY_MOTION:
            rslt = get_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 80084bc:	7afa      	ldrb	r2, [r7, #11]
 80084be:	4613      	mov	r3, r2
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	00db      	lsls	r3, r3, #3
 80084c6:	461a      	mov	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4413      	add	r3, r2
 80084cc:	3304      	adds	r3, #4
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7ff fb1d 	bl	8007b10 <get_any_motion_config>
 80084d6:	4603      	mov	r3, r0
 80084d8:	75fb      	strb	r3, [r7, #23]
            break;
 80084da:	e052      	b.n	8008582 <get_feat_config+0x182>

        /* Get no motion configuration */
        case BMI2_NO_MOTION:
            rslt = get_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 80084dc:	7afa      	ldrb	r2, [r7, #11]
 80084de:	4613      	mov	r3, r2
 80084e0:	00db      	lsls	r3, r3, #3
 80084e2:	1a9b      	subs	r3, r3, r2
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	461a      	mov	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	3304      	adds	r3, #4
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7ff fb9e 	bl	8007c32 <get_no_motion_config>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]
            break;
 80084fa:	e042      	b.n	8008582 <get_feat_config+0x182>

        /* Set the step counter parameters */
        case BMI2_STEP_COUNTER_PARAMS:
            rslt = get_step_count_params_config(sens_cfg[loop].cfg.step_counter_params, dev);
 80084fc:	7afa      	ldrb	r2, [r7, #11]
 80084fe:	4613      	mov	r3, r2
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	1a9b      	subs	r3, r3, r2
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	461a      	mov	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	3304      	adds	r3, #4
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	4618      	mov	r0, r3
 8008512:	f7ff fc81 	bl	8007e18 <get_step_count_params_config>
 8008516:	4603      	mov	r3, r0
 8008518:	75fb      	strb	r3, [r7, #23]
            break;
 800851a:	e032      	b.n	8008582 <get_feat_config+0x182>

        /* Get step counter/detector/activity configuration */
        case BMI2_STEP_DETECTOR:
        case BMI2_STEP_COUNTER:
        case BMI2_STEP_ACTIVITY:
            rslt = get_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 800851c:	7afa      	ldrb	r2, [r7, #11]
 800851e:	4613      	mov	r3, r2
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	1a9b      	subs	r3, r3, r2
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	461a      	mov	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	3304      	adds	r3, #4
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff fd29 	bl	8007f88 <get_step_config>
 8008536:	4603      	mov	r3, r0
 8008538:	75fb      	strb	r3, [r7, #23]
            break;
 800853a:	e022      	b.n	8008582 <get_feat_config+0x182>

        /* Get the wrist gesture configuration */
        case BMI2_WRIST_GESTURE:
            rslt = get_wrist_gest_config(&sens_cfg[loop].cfg.wrist_gest, dev);
 800853c:	7afa      	ldrb	r2, [r7, #11]
 800853e:	4613      	mov	r3, r2
 8008540:	00db      	lsls	r3, r3, #3
 8008542:	1a9b      	subs	r3, r3, r2
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	461a      	mov	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	3304      	adds	r3, #4
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff fd82 	bl	800805a <get_wrist_gest_config>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]
            break;
 800855a:	e012      	b.n	8008582 <get_feat_config+0x182>

        /* Get the wrist wear wake-up configuration */
        case BMI2_WRIST_WEAR_WAKE_UP:
            rslt = get_wrist_wear_wake_up_config(&sens_cfg[loop].cfg.wrist_wear_wake_up, dev);
 800855c:	7afa      	ldrb	r2, [r7, #11]
 800855e:	4613      	mov	r3, r2
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	1a9b      	subs	r3, r3, r2
 8008564:	00db      	lsls	r3, r3, #3
 8008566:	461a      	mov	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4413      	add	r3, r2
 800856c:	3304      	adds	r3, #4
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fdea 	bl	800814a <get_wrist_wear_wake_up_config>
 8008576:	4603      	mov	r3, r0
 8008578:	75fb      	strb	r3, [r7, #23]
            break;
 800857a:	e002      	b.n	8008582 <get_feat_config+0x182>

        default:
            rslt = BMI2_E_INVALID_SENSOR;
 800857c:	23f8      	movs	r3, #248	@ 0xf8
 800857e:	75fb      	strb	r3, [r7, #23]
            break;
 8008580:	bf00      	nop
    }

    return rslt;
 8008582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop

08008590 <enable_main_sensors>:

/*!
 * @brief This internal API is used to enable main sensors like accel, gyro, aux and temperature.
 */
static int8_t enable_main_sensors(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8008590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008594:	b08a      	sub	sp, #40	@ 0x28
 8008596:	af00      	add	r7, sp, #0
 8008598:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800859c:	617a      	str	r2, [r7, #20]
    int8_t rslt;

    /* Variable to store register values */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 800859e:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2201      	movs	r2, #1
 80085a6:	207d      	movs	r0, #125	@ 0x7d
 80085a8:	f7fb faca 	bl	8003b40 <bmi2_get_regs>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMI2_OK)
 80085b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d158      	bne.n	800866c <enable_main_sensors+0xdc>
    {
        /* Enable accelerometer */
        if (sensor_sel & BMI2_ACCEL_SENS_SEL)
 80085ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085be:	f002 0301 	and.w	r3, r2, #1
 80085c2:	60bb      	str	r3, [r7, #8]
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80085cc:	460b      	mov	r3, r1
 80085ce:	4313      	orrs	r3, r2
 80085d0:	d006      	beq.n	80085e0 <enable_main_sensors+0x50>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_EN, BMI2_ENABLE);
 80085d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085d6:	f043 0304 	orr.w	r3, r3, #4
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable gyroscope */
        if (sensor_sel & BMI2_GYRO_SENS_SEL)
 80085e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085e4:	f002 0302 	and.w	r3, r2, #2
 80085e8:	603b      	str	r3, [r7, #0]
 80085ea:	2300      	movs	r3, #0
 80085ec:	607b      	str	r3, [r7, #4]
 80085ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80085f2:	460b      	mov	r3, r1
 80085f4:	4313      	orrs	r3, r2
 80085f6:	d006      	beq.n	8008606 <enable_main_sensors+0x76>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_EN, BMI2_ENABLE);
 80085f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085fc:	f043 0302 	orr.w	r3, r3, #2
 8008600:	b2db      	uxtb	r3, r3
 8008602:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable auxiliary sensor */
        if (sensor_sel & BMI2_AUX_SENS_SEL)
 8008606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800860a:	f002 0a04 	and.w	sl, r2, #4
 800860e:	f04f 0b00 	mov.w	fp, #0
 8008612:	ea5a 030b 	orrs.w	r3, sl, fp
 8008616:	d006      	beq.n	8008626 <enable_main_sensors+0x96>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_EN, BMI2_ENABLE);
 8008618:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800861c:	f043 0301 	orr.w	r3, r3, #1
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable temperature sensor */
        if (sensor_sel & BMI2_TEMP_SENS_SEL)
 8008626:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800862a:	f04f 0800 	mov.w	r8, #0
 800862e:	f003 0901 	and.w	r9, r3, #1
 8008632:	ea58 0309 	orrs.w	r3, r8, r9
 8008636:	d006      	beq.n	8008646 <enable_main_sensors+0xb6>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_TEMP_EN, BMI2_ENABLE);
 8008638:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800863c:	f043 0308 	orr.w	r3, r3, #8
 8008640:	b2db      	uxtb	r3, r3
 8008642:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable the sensors that are set in the power control register */
        if (sensor_sel & BMI2_MAIN_SENSORS)
 8008646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800864a:	f002 0407 	and.w	r4, r2, #7
 800864e:	f003 0501 	and.w	r5, r3, #1
 8008652:	ea54 0305 	orrs.w	r3, r4, r5
 8008656:	d009      	beq.n	800866c <enable_main_sensors+0xdc>
        {
            rslt = bmi2_set_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8008658:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2201      	movs	r2, #1
 8008660:	207d      	movs	r0, #125	@ 0x7d
 8008662:	f7fb fae0 	bl	8003c26 <bmi2_set_regs>
 8008666:	4603      	mov	r3, r0
 8008668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 800866c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8008670:	4618      	mov	r0, r3
 8008672:	3728      	adds	r7, #40	@ 0x28
 8008674:	46bd      	mov	sp, r7
 8008676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800867a <enable_sensor_features>:

/*!
 * @brief This internal API is used to enable sensor features.
 */
static int8_t enable_sensor_features(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 800867a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800867e:	b094      	sub	sp, #80	@ 0x50
 8008680:	af00      	add	r7, sp, #0
 8008682:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8008686:	63fa      	str	r2, [r7, #60]	@ 0x3c
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    /* Enable sig-motion feature */
    if (sensor_sel & BMI2_SIG_MOTION_SEL)
 800868e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008692:	f002 0408 	and.w	r4, r2, #8
 8008696:	2500      	movs	r5, #0
 8008698:	ea54 0305 	orrs.w	r3, r4, r5
 800869c:	d006      	beq.n	80086ac <enable_sensor_features+0x32>
    {
        rslt = set_sig_motion(BMI2_ENABLE, dev);
 800869e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086a0:	2001      	movs	r0, #1
 80086a2:	f7fe f9bb 	bl	8006a1c <set_sig_motion>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable any motion feature */
    if (sensor_sel & BMI2_ANY_MOT_SEL)
 80086ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80086b0:	f002 0810 	and.w	r8, r2, #16
 80086b4:	f04f 0900 	mov.w	r9, #0
 80086b8:	ea58 0309 	orrs.w	r3, r8, r9
 80086bc:	d006      	beq.n	80086cc <enable_sensor_features+0x52>
    {
        rslt = set_any_motion(BMI2_ENABLE, dev);
 80086be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086c0:	2001      	movs	r0, #1
 80086c2:	f7fd ffd5 	bl	8006670 <set_any_motion>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable no motion feature */
    if (sensor_sel & BMI2_NO_MOT_SEL)
 80086cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80086d0:	f002 0a20 	and.w	sl, r2, #32
 80086d4:	f04f 0b00 	mov.w	fp, #0
 80086d8:	ea5a 030b 	orrs.w	r3, sl, fp
 80086dc:	d006      	beq.n	80086ec <enable_sensor_features+0x72>
    {
        rslt = set_no_motion(BMI2_ENABLE, dev);
 80086de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086e0:	2001      	movs	r0, #1
 80086e2:	f7fe f839 	bl	8006758 <set_no_motion>
 80086e6:	4603      	mov	r3, r0
 80086e8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step detector feature */
    if (sensor_sel & BMI2_STEP_DETECT_SEL)
 80086ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80086f0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80086f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80086f6:	2300      	movs	r3, #0
 80086f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80086fe:	460b      	mov	r3, r1
 8008700:	4313      	orrs	r3, r2
 8008702:	d006      	beq.n	8008712 <enable_sensor_features+0x98>
    {
        rslt = set_step_detector(BMI2_ENABLE, dev);
 8008704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008706:	2001      	movs	r0, #1
 8008708:	f7fe f89a 	bl	8006840 <set_step_detector>
 800870c:	4603      	mov	r3, r0
 800870e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step counter feature */
    if (sensor_sel & BMI2_STEP_COUNT_SEL)
 8008712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008716:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800871a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800871c:	2300      	movs	r3, #0
 800871e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008720:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008724:	460b      	mov	r3, r1
 8008726:	4313      	orrs	r3, r2
 8008728:	d006      	beq.n	8008738 <enable_sensor_features+0xbe>
    {
        rslt = set_step_counter(BMI2_ENABLE, dev);
 800872a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800872c:	2001      	movs	r0, #1
 800872e:	f7fe f8fe 	bl	800692e <set_step_counter>
 8008732:	4603      	mov	r3, r0
 8008734:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step activity feature */
    if (sensor_sel & BMI2_STEP_ACT_SEL)
 8008738:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800873c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8008740:	623b      	str	r3, [r7, #32]
 8008742:	2300      	movs	r3, #0
 8008744:	627b      	str	r3, [r7, #36]	@ 0x24
 8008746:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800874a:	460b      	mov	r3, r1
 800874c:	4313      	orrs	r3, r2
 800874e:	d006      	beq.n	800875e <enable_sensor_features+0xe4>
    {
        rslt = set_step_activity(BMI2_ENABLE, dev);
 8008750:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008752:	2001      	movs	r0, #1
 8008754:	f7fe f9d7 	bl	8006b06 <set_step_activity>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable gyroscope user gain */
    if (sensor_sel & BMI2_GYRO_GAIN_UPDATE_SEL)
 800875e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008762:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	2300      	movs	r3, #0
 800876a:	61fb      	str	r3, [r7, #28]
 800876c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008770:	460b      	mov	r3, r1
 8008772:	4313      	orrs	r3, r2
 8008774:	d006      	beq.n	8008784 <enable_sensor_features+0x10a>
    {
        rslt = set_gyro_user_gain(BMI2_ENABLE, dev);
 8008776:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008778:	2001      	movs	r0, #1
 800877a:	f7fe fb9d 	bl	8006eb8 <set_gyro_user_gain>
 800877e:	4603      	mov	r3, r0
 8008780:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable gyroscope self-offset correction feature */
    if (sensor_sel & BMI2_GYRO_SELF_OFF_SEL)
 8008784:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008788:	2100      	movs	r1, #0
 800878a:	6139      	str	r1, [r7, #16]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	617b      	str	r3, [r7, #20]
 8008792:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008796:	460b      	mov	r3, r1
 8008798:	4313      	orrs	r3, r2
 800879a:	d006      	beq.n	80087aa <enable_sensor_features+0x130>
    {
        rslt = set_gyro_self_offset_corr(BMI2_ENABLE, dev);
 800879c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800879e:	2001      	movs	r0, #1
 80087a0:	f7fe fa28 	bl	8006bf4 <set_gyro_self_offset_corr>
 80087a4:	4603      	mov	r3, r0
 80087a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable wrist gesture feature for wearable variant */
    if (sensor_sel & BMI2_WRIST_GEST_SEL)
 80087aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80087ae:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80087b2:	60bb      	str	r3, [r7, #8]
 80087b4:	2300      	movs	r3, #0
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80087bc:	460b      	mov	r3, r1
 80087be:	4313      	orrs	r3, r2
 80087c0:	d006      	beq.n	80087d0 <enable_sensor_features+0x156>
    {
        rslt = set_wrist_gesture(BMI2_ENABLE, dev);
 80087c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087c4:	2001      	movs	r0, #1
 80087c6:	f7fe fa8b 	bl	8006ce0 <set_wrist_gesture>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable wrist wear wake-up feature */
    if (sensor_sel & BMI2_WRIST_WEAR_WAKE_UP_SEL)
 80087d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80087d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80087d8:	603b      	str	r3, [r7, #0]
 80087da:	2300      	movs	r3, #0
 80087dc:	607b      	str	r3, [r7, #4]
 80087de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80087e2:	460b      	mov	r3, r1
 80087e4:	4313      	orrs	r3, r2
 80087e6:	d006      	beq.n	80087f6 <enable_sensor_features+0x17c>
    {
        rslt = set_wrist_wear_wake_up(BMI2_ENABLE, dev);
 80087e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087ea:	2001      	movs	r0, #1
 80087ec:	f7fe faee 	bl	8006dcc <set_wrist_wear_wake_up>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    return rslt;
 80087f6:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3750      	adds	r7, #80	@ 0x50
 80087fe:	46bd      	mov	sp, r7
 8008800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008804 <disable_main_sensors>:

/*!
 * @brief This internal API is used to disable main sensors like accel, gyro, aux and temperature.
 */
static int8_t disable_main_sensors(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8008804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008808:	b08a      	sub	sp, #40	@ 0x28
 800880a:	af00      	add	r7, sp, #0
 800880c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8008810:	617a      	str	r2, [r7, #20]
    int8_t rslt;

    /* Variable to store register values */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8008812:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2201      	movs	r2, #1
 800881a:	207d      	movs	r0, #125	@ 0x7d
 800881c:	f7fb f990 	bl	8003b40 <bmi2_get_regs>
 8008820:	4603      	mov	r3, r0
 8008822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMI2_OK)
 8008826:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800882a:	2b00      	cmp	r3, #0
 800882c:	d158      	bne.n	80088e0 <disable_main_sensors+0xdc>
    {
        /* Disable accelerometer */
        if (sensor_sel & BMI2_ACCEL_SENS_SEL)
 800882e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008832:	f002 0301 	and.w	r3, r2, #1
 8008836:	60bb      	str	r3, [r7, #8]
 8008838:	2300      	movs	r3, #0
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008840:	460b      	mov	r3, r1
 8008842:	4313      	orrs	r3, r2
 8008844:	d006      	beq.n	8008854 <disable_main_sensors+0x50>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_ACC_EN);
 8008846:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800884a:	f023 0304 	bic.w	r3, r3, #4
 800884e:	b2db      	uxtb	r3, r3
 8008850:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable gyroscope */
        if (sensor_sel & BMI2_GYRO_SENS_SEL)
 8008854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008858:	f002 0302 	and.w	r3, r2, #2
 800885c:	603b      	str	r3, [r7, #0]
 800885e:	2300      	movs	r3, #0
 8008860:	607b      	str	r3, [r7, #4]
 8008862:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008866:	460b      	mov	r3, r1
 8008868:	4313      	orrs	r3, r2
 800886a:	d006      	beq.n	800887a <disable_main_sensors+0x76>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_GYR_EN);
 800886c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008870:	f023 0302 	bic.w	r3, r3, #2
 8008874:	b2db      	uxtb	r3, r3
 8008876:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable auxiliary sensor */
        if (sensor_sel & BMI2_AUX_SENS_SEL)
 800887a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800887e:	f002 0a04 	and.w	sl, r2, #4
 8008882:	f04f 0b00 	mov.w	fp, #0
 8008886:	ea5a 030b 	orrs.w	r3, sl, fp
 800888a:	d006      	beq.n	800889a <disable_main_sensors+0x96>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_AUX_EN);
 800888c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008890:	f023 0301 	bic.w	r3, r3, #1
 8008894:	b2db      	uxtb	r3, r3
 8008896:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable temperature sensor */
        if (sensor_sel & BMI2_TEMP_SENS_SEL)
 800889a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800889e:	f04f 0800 	mov.w	r8, #0
 80088a2:	f003 0901 	and.w	r9, r3, #1
 80088a6:	ea58 0309 	orrs.w	r3, r8, r9
 80088aa:	d006      	beq.n	80088ba <disable_main_sensors+0xb6>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_TEMP_EN);
 80088ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80088b0:	f023 0308 	bic.w	r3, r3, #8
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable the sensors that are set in the power control register */
        if (sensor_sel & BMI2_MAIN_SENSORS)
 80088ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088be:	f002 0407 	and.w	r4, r2, #7
 80088c2:	f003 0501 	and.w	r5, r3, #1
 80088c6:	ea54 0305 	orrs.w	r3, r4, r5
 80088ca:	d009      	beq.n	80088e0 <disable_main_sensors+0xdc>
        {
            rslt = bmi2_set_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 80088cc:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2201      	movs	r2, #1
 80088d4:	207d      	movs	r0, #125	@ 0x7d
 80088d6:	f7fb f9a6 	bl	8003c26 <bmi2_set_regs>
 80088da:	4603      	mov	r3, r0
 80088dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 80088e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3728      	adds	r7, #40	@ 0x28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080088ee <disable_sensor_features>:

/*!
 * @brief This internal API is used to disable sensor features.
 */
static int8_t disable_sensor_features(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 80088ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088f2:	b094      	sub	sp, #80	@ 0x50
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 80088fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    /* Disable sig-motion feature */
    if (sensor_sel & BMI2_SIG_MOTION_SEL)
 8008902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008906:	f002 0408 	and.w	r4, r2, #8
 800890a:	2500      	movs	r5, #0
 800890c:	ea54 0305 	orrs.w	r3, r4, r5
 8008910:	d006      	beq.n	8008920 <disable_sensor_features+0x32>
    {
        rslt = set_sig_motion(BMI2_DISABLE, dev);
 8008912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008914:	2000      	movs	r0, #0
 8008916:	f7fe f881 	bl	8006a1c <set_sig_motion>
 800891a:	4603      	mov	r3, r0
 800891c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable any-motion feature */
    if (sensor_sel & BMI2_ANY_MOT_SEL)
 8008920:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008924:	f002 0810 	and.w	r8, r2, #16
 8008928:	f04f 0900 	mov.w	r9, #0
 800892c:	ea58 0309 	orrs.w	r3, r8, r9
 8008930:	d006      	beq.n	8008940 <disable_sensor_features+0x52>
    {
        rslt = set_any_motion(BMI2_DISABLE, dev);
 8008932:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008934:	2000      	movs	r0, #0
 8008936:	f7fd fe9b 	bl	8006670 <set_any_motion>
 800893a:	4603      	mov	r3, r0
 800893c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable no-motion feature */
    if (sensor_sel & BMI2_NO_MOT_SEL)
 8008940:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008944:	f002 0a20 	and.w	sl, r2, #32
 8008948:	f04f 0b00 	mov.w	fp, #0
 800894c:	ea5a 030b 	orrs.w	r3, sl, fp
 8008950:	d006      	beq.n	8008960 <disable_sensor_features+0x72>
    {
        rslt = set_no_motion(BMI2_DISABLE, dev);
 8008952:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008954:	2000      	movs	r0, #0
 8008956:	f7fd feff 	bl	8006758 <set_no_motion>
 800895a:	4603      	mov	r3, r0
 800895c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable step detector feature */
    if (sensor_sel & BMI2_STEP_DETECT_SEL)
 8008960:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008964:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008968:	633b      	str	r3, [r7, #48]	@ 0x30
 800896a:	2300      	movs	r3, #0
 800896c:	637b      	str	r3, [r7, #52]	@ 0x34
 800896e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008972:	460b      	mov	r3, r1
 8008974:	4313      	orrs	r3, r2
 8008976:	d006      	beq.n	8008986 <disable_sensor_features+0x98>
    {
        rslt = set_step_detector(BMI2_DISABLE, dev);
 8008978:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800897a:	2000      	movs	r0, #0
 800897c:	f7fd ff60 	bl	8006840 <set_step_detector>
 8008980:	4603      	mov	r3, r0
 8008982:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable step counter feature */
    if (sensor_sel & BMI2_STEP_COUNT_SEL)
 8008986:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800898a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800898e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008990:	2300      	movs	r3, #0
 8008992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008994:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008998:	460b      	mov	r3, r1
 800899a:	4313      	orrs	r3, r2
 800899c:	d006      	beq.n	80089ac <disable_sensor_features+0xbe>
    {
        rslt = set_step_counter(BMI2_DISABLE, dev);
 800899e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089a0:	2000      	movs	r0, #0
 80089a2:	f7fd ffc4 	bl	800692e <set_step_counter>
 80089a6:	4603      	mov	r3, r0
 80089a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable step activity feature */
    if (sensor_sel & BMI2_STEP_ACT_SEL)
 80089ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80089b0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80089b4:	623b      	str	r3, [r7, #32]
 80089b6:	2300      	movs	r3, #0
 80089b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089be:	460b      	mov	r3, r1
 80089c0:	4313      	orrs	r3, r2
 80089c2:	d006      	beq.n	80089d2 <disable_sensor_features+0xe4>
    {
        rslt = set_step_activity(BMI2_DISABLE, dev);
 80089c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089c6:	2000      	movs	r0, #0
 80089c8:	f7fe f89d 	bl	8006b06 <set_step_activity>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable gyroscope user gain */
    if (sensor_sel & BMI2_GYRO_GAIN_UPDATE_SEL)
 80089d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80089d6:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80089da:	61bb      	str	r3, [r7, #24]
 80089dc:	2300      	movs	r3, #0
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80089e4:	460b      	mov	r3, r1
 80089e6:	4313      	orrs	r3, r2
 80089e8:	d006      	beq.n	80089f8 <disable_sensor_features+0x10a>
    {
        rslt = set_gyro_user_gain(BMI2_DISABLE, dev);
 80089ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089ec:	2000      	movs	r0, #0
 80089ee:	f7fe fa63 	bl	8006eb8 <set_gyro_user_gain>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable gyroscope self-offset correction feature */
    if (sensor_sel & BMI2_GYRO_SELF_OFF_SEL)
 80089f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80089fc:	2100      	movs	r1, #0
 80089fe:	6139      	str	r1, [r7, #16]
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	617b      	str	r3, [r7, #20]
 8008a06:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	d006      	beq.n	8008a1e <disable_sensor_features+0x130>
    {
        rslt = set_gyro_self_offset_corr(BMI2_DISABLE, dev);
 8008a10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a12:	2000      	movs	r0, #0
 8008a14:	f7fe f8ee 	bl	8006bf4 <set_gyro_self_offset_corr>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable wrist gesture feature for wearable variant*/
    if (sensor_sel & BMI2_WRIST_GEST_SEL)
 8008a1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a22:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008a26:	60bb      	str	r3, [r7, #8]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a30:	460b      	mov	r3, r1
 8008a32:	4313      	orrs	r3, r2
 8008a34:	d006      	beq.n	8008a44 <disable_sensor_features+0x156>
    {
        rslt = set_wrist_gesture(BMI2_DISABLE, dev);
 8008a36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a38:	2000      	movs	r0, #0
 8008a3a:	f7fe f951 	bl	8006ce0 <set_wrist_gesture>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable wrist wear wake-up feature */
    if (sensor_sel & BMI2_WRIST_WEAR_WAKE_UP_SEL)
 8008a44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	607b      	str	r3, [r7, #4]
 8008a52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008a56:	460b      	mov	r3, r1
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	d006      	beq.n	8008a6a <disable_sensor_features+0x17c>
    {
        rslt = set_wrist_wear_wake_up(BMI2_DISABLE, dev);
 8008a5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a5e:	2000      	movs	r0, #0
 8008a60:	f7fe f9b4 	bl	8006dcc <set_wrist_wear_wake_up>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    return rslt;
 8008a6a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3750      	adds	r7, #80	@ 0x50
 8008a72:	46bd      	mov	sp, r7
 8008a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008a78 <bmi2_set_i2c_handle>:
#include "i2c.h" // Assuming your I2C_HandleTypeDef hi2c3 is declared here or in main.h

// Static pointer to the I2C handle for BMI270
static I2C_HandleTypeDef* bmi2_i2c_hal_handle = NULL;

void bmi2_set_i2c_handle(I2C_HandleTypeDef* hi2c_bmi) {
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
    bmi2_i2c_hal_handle = hi2c_bmi;
 8008a80:	4a04      	ldr	r2, [pc, #16]	@ (8008a94 <bmi2_set_i2c_handle+0x1c>)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6013      	str	r3, [r2, #0]
}
 8008a86:	bf00      	nop
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	200006dc 	.word	0x200006dc

08008a98 <bmi2_i2c_read>:

BMI2_INTF_RETURN_TYPE bmi2_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b088      	sub	sp, #32
 8008a9c:	af04      	add	r7, sp, #16
 8008a9e:	60b9      	str	r1, [r7, #8]
 8008aa0:	607a      	str	r2, [r7, #4]
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]
    (void)intf_ptr; // intf_ptr is the I2C handle passed via bmi2_dev structure, we use the static one

    if (bmi2_i2c_hal_handle == NULL) {
 8008aa8:	4b10      	ldr	r3, [pc, #64]	@ (8008aec <bmi2_i2c_read+0x54>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d102      	bne.n	8008ab6 <bmi2_i2c_read+0x1e>
        return BMI2_E_NULL_PTR; // Or a specific error for uninitialized handle
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ab4:	e016      	b.n	8008ae4 <bmi2_i2c_read+0x4c>
    }

    // STM32 HAL I2C read function typically requires the device address to be shifted left by 1
    // The HAL_I2C_Mem_Read function is suitable here.
    if (HAL_I2C_Mem_Read(bmi2_i2c_hal_handle, (uint16_t)(BMI270_I2C_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) == HAL_OK) {
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8008aec <bmi2_i2c_read+0x54>)
 8008ab8:	6818      	ldr	r0, [r3, #0]
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008ac6:	9102      	str	r1, [sp, #8]
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	2301      	movs	r3, #1
 8008ad0:	21d0      	movs	r1, #208	@ 0xd0
 8008ad2:	f004 faf5 	bl	800d0c0 <HAL_I2C_Mem_Read>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <bmi2_i2c_read+0x48>
        return BMI2_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	e001      	b.n	8008ae4 <bmi2_i2c_read+0x4c>
    } else {
        return BMI2_E_COM_FAIL;
 8008ae0:	f06f 0301 	mvn.w	r3, #1
    }
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	200006dc 	.word	0x200006dc

08008af0 <bmi2_i2c_write>:

BMI2_INTF_RETURN_TYPE bmi2_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af04      	add	r7, sp, #16
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	607a      	str	r2, [r7, #4]
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	4603      	mov	r3, r0
 8008afe:	73fb      	strb	r3, [r7, #15]
    (void)intf_ptr; // intf_ptr is the I2C handle passed via bmi2_dev structure, we use the static one

    if (bmi2_i2c_hal_handle == NULL) {
 8008b00:	4b10      	ldr	r3, [pc, #64]	@ (8008b44 <bmi2_i2c_write+0x54>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d102      	bne.n	8008b0e <bmi2_i2c_write+0x1e>
        return BMI2_E_NULL_PTR; // Or a specific error for uninitialized handle
 8008b08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b0c:	e016      	b.n	8008b3c <bmi2_i2c_write+0x4c>
    }
    
    // STM32 HAL I2C write function
    // The HAL_I2C_Mem_Write function is suitable here.
    if (HAL_I2C_Mem_Write(bmi2_i2c_hal_handle, (uint16_t)(BMI270_I2C_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)reg_data, len, HAL_MAX_DELAY) == HAL_OK) {
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b44 <bmi2_i2c_write+0x54>)
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008b1e:	9102      	str	r1, [sp, #8]
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	2301      	movs	r3, #1
 8008b28:	21d0      	movs	r1, #208	@ 0xd0
 8008b2a:	f004 f9b5 	bl	800ce98 <HAL_I2C_Mem_Write>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <bmi2_i2c_write+0x48>
        return BMI2_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	e001      	b.n	8008b3c <bmi2_i2c_write+0x4c>
    } else {
        return BMI2_E_COM_FAIL;
 8008b38:	f06f 0301 	mvn.w	r3, #1
    }
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	200006dc 	.word	0x200006dc

08008b48 <bmi2_delay_us>:

void bmi2_delay_us(uint32_t period_us, void *intf_ptr) {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
    (void)intf_ptr; // Not used in this simple implementation
    
    // HAL_Delay is in milliseconds. For microsecond delay, a more precise timer is needed.
    // For initial testing, if period_us is large enough:
    if (period_us >= 1000) {
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b58:	d308      	bcc.n	8008b6c <bmi2_delay_us+0x24>
        HAL_Delay(period_us / 1000);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a18      	ldr	r2, [pc, #96]	@ (8008bc0 <bmi2_delay_us+0x78>)
 8008b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b62:	099b      	lsrs	r3, r3, #6
 8008b64:	4618      	mov	r0, r3
 8008b66:	f001 ff83 	bl	800aa70 <HAL_Delay>
             for (i = 0; i < 10; ++i) { // minimal delay
                __NOP();
             }
        }
    }
 8008b6a:	e024      	b.n	8008bb6 <bmi2_delay_us+0x6e>
        uint32_t delay_cycles = period_us * (SystemCoreClock / 1000000U / 5U); // Approximate factor
 8008b6c:	4b15      	ldr	r3, [pc, #84]	@ (8008bc4 <bmi2_delay_us+0x7c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a15      	ldr	r2, [pc, #84]	@ (8008bc8 <bmi2_delay_us+0x80>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	0d5a      	lsrs	r2, r3, #21
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	fb02 f303 	mul.w	r3, r2, r3
 8008b7e:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < delay_cycles; ++i) {
 8008b80:	2300      	movs	r3, #0
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	e003      	b.n	8008b8e <bmi2_delay_us+0x46>
            __NOP();
 8008b86:	bf00      	nop
        for (i = 0; i < delay_cycles; ++i) {
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d3f7      	bcc.n	8008b86 <bmi2_delay_us+0x3e>
        if (period_us > 0 && delay_cycles == 0) { // ensure at least minimal delay for very small period_us
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00c      	beq.n	8008bb6 <bmi2_delay_us+0x6e>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <bmi2_delay_us+0x6e>
             for (i = 0; i < 10; ++i) { // minimal delay
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	e003      	b.n	8008bb0 <bmi2_delay_us+0x68>
                __NOP();
 8008ba8:	bf00      	nop
             for (i = 0; i < 10; ++i) { // minimal delay
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3301      	adds	r3, #1
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b09      	cmp	r3, #9
 8008bb4:	d9f8      	bls.n	8008ba8 <bmi2_delay_us+0x60>
 8008bb6:	bf00      	nop
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	10624dd3 	.word	0x10624dd3
 8008bc4:	2000007c 	.word	0x2000007c
 8008bc8:	6b5fca6b 	.word	0x6b5fca6b

08008bcc <_ZN7DRV82144initERK14DRV8214_Config>:
 */

#include "drv8214.h"

// Initialize the motor driver with default settings
uint8_t DRV8214::init(const DRV8214_Config& cfg) {
 8008bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]

    // Store the configuration settings
    config = cfg;
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	f102 000c 	add.w	r0, r2, #12
 8008bde:	f103 0420 	add.w	r4, r3, #32
 8008be2:	4602      	mov	r2, r0
 8008be4:	4619      	mov	r1, r3
 8008be6:	f8d1 c000 	ldr.w	ip, [r1]
 8008bea:	684e      	ldr	r6, [r1, #4]
 8008bec:	688d      	ldr	r5, [r1, #8]
 8008bee:	68c9      	ldr	r1, [r1, #12]
 8008bf0:	f8c2 c000 	str.w	ip, [r2]
 8008bf4:	6056      	str	r6, [r2, #4]
 8008bf6:	6095      	str	r5, [r2, #8]
 8008bf8:	60d1      	str	r1, [r2, #12]
 8008bfa:	3310      	adds	r3, #16
 8008bfc:	3010      	adds	r0, #16
 8008bfe:	42a3      	cmp	r3, r4
 8008c00:	d1ef      	bne.n	8008be2 <_ZN7DRV82144initERK14DRV8214_Config+0x16>
 8008c02:	4602      	mov	r2, r0
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	6859      	ldr	r1, [r3, #4]
 8008c08:	6010      	str	r0, [r2, #0]
 8008c0a:	6051      	str	r1, [r2, #4]
 8008c0c:	8919      	ldrh	r1, [r3, #8]
 8008c0e:	7a9b      	ldrb	r3, [r3, #10]
 8008c10:	8111      	strh	r1, [r2, #8]
 8008c12:	7293      	strb	r3, [r2, #10]

    disableHbridge(); // Disable H-bridge to be able to configure the driver
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fb6b 	bl	80092f0 <_ZN7DRV821414disableHbridgeEv>
    setControlMode(config.control_mode, config.I2CControlled); // Default to PWM control with I2C enabled
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	7b59      	ldrb	r1, [r3, #13]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7b1b      	ldrb	r3, [r3, #12]
 8008c22:	461a      	mov	r2, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 f986 	bl	8009f36 <_ZN7DRV821414setControlModeE11ControlModeb>
    setRegulationMode(config.regulation_mode); // Default to SPEED regulation
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	7b9b      	ldrb	r3, [r3, #14]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f001 f9a3 	bl	8009f7c <_ZN7DRV821417setRegulationModeE14RegulationMode>
    setVoltageRange(config.voltage_range);  // Default to 0 V - 3.92 V range
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	7bdb      	ldrb	r3, [r3, #15]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fb7a 	bl	8009336 <_ZN7DRV821415setVoltageRangeEb>
    setOvervoltageProtection(config.ovp_enabled); // Default to overvoltage protection enabled
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7d5b      	ldrb	r3, [r3, #21]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fb88 	bl	800935e <_ZN7DRV821424setOvervoltageProtectionEb>
    setCurrentRegMode(config.current_reg_mode); // Default to no current regulation
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	7e1b      	ldrb	r3, [r3, #24]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fbd7 	bl	8009408 <_ZN7DRV821417setCurrentRegModeEh>
    setStallDetection(config.stall_enabled); // Default to stall detection enabled
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	7d1b      	ldrb	r3, [r3, #20]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fb54 	bl	800930e <_ZN7DRV821417setStallDetectionEb>
    setStallBehavior(config.stall_behavior); // Default to outputs disabled on stall
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	7d9b      	ldrb	r3, [r3, #22]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fc09 	bl	8009484 <_ZN7DRV821416setStallBehaviorEb>
    enableStallInterrupt(); // Default to enable stall interrupt
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fc73 	bl	800955e <_ZN7DRV821420enableStallInterruptEv>
    enableCountThresholdInterrupt(); // Default to enable count threshold interrupt
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fc7f 	bl	800957c <_ZN7DRV821429enableCountThresholdInterruptEv>
    setBridgeBehaviorThresholdReached(config.bridge_behavior_thr_reached); // Default to H-bridge stays enabled when RC_CNT exceeds threshold
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	7ddb      	ldrb	r3, [r3, #23]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fc88 	bl	800959a <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>
    setInternalVoltageReference(0); // Default to internal voltage reference of 500mV
 8008c8a:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8008d0c <_ZN7DRV82144initERK14DRV8214_Config+0x140>
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fc0c 	bl	80094ac <_ZN7DRV821427setInternalVoltageReferenceEf>
    setSoftStartStop(config.soft_start_stop_enabled); // Default to soft start/stop disbaled
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fc90 	bl	80095c2 <_ZN7DRV821416setSoftStartStopEb>
    setInrushDuration(config.inrush_duration); // Default to 500 ms
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fb90 	bl	80093ce <_ZN7DRV821417setInrushDurationEt>
    setResistanceRelatedParameters(); // configure the INV_R and INV_R_SCALE values
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f001 f8b2 	bl	8009e18 <_ZN7DRV821430setResistanceRelatedParametersEv>
    enableRippleCount(); // Default to enable ripple counting
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 ff66 	bl	8009b88 <_ZN7DRV821417enableRippleCountEb>
    resetRippleCounter(); // Default to reset ripple counter
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fb62 	bl	8009386 <_ZN7DRV821418resetRippleCounterEv>
    setKMC(config.kmc); // Default to KMC = 30
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f001 f922 	bl	8009f14 <_ZN7DRV82146setKMCEh>
    setKMCScale(config.kmc_scale); // Default to KMC scale factor = 24 x 2^13
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f863 	bl	8009da4 <_ZN7DRV821411setKMCScaleEh>
    brakeMotor(true); // Default to brake motor
 8008cde:	2101      	movs	r1, #1
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 fa4b 	bl	800a17c <_ZN7DRV821410brakeMotorEb>
    enableErrorCorrection(false); // Default to disable error correction
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 ff5e 	bl	8009baa <_ZN7DRV821421enableErrorCorrectionEb>
    if (config.verbose) {printMotorConfig(true);}
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <_ZN7DRV82144initERK14DRV8214_Config+0x134>
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 fabc 	bl	800a278 <_ZN7DRV821416printMotorConfigEb>

    return DRV8214_OK; // Return success code
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	00000000 	.word	0x00000000

08008d10 <_ZN7DRV821416getMotorSpeedRPMEv>:

uint8_t DRV8214::getFaultStatus() {
    return drv8214_i2c_read_register(address, DRV8214_FAULT);
}

uint32_t DRV8214::getMotorSpeedRPM() {
 8008d10:	b5b0      	push	{r4, r5, r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
    return ((drv8214_i2c_read_register(address, DRV8214_RC_STATUS1) * config.w_scale * 60) / (2 * M_PI * ripples_per_revolution));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f001 fd78 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d2e:	fb03 f202 	mul.w	r2, r3, r2
 8008d32:	4613      	mov	r3, r2
 8008d34:	011b      	lsls	r3, r3, #4
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7f7 fbca 	bl	80004d4 <__aeabi_i2d>
 8008d40:	4604      	mov	r4, r0
 8008d42:	460d      	mov	r5, r1
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	889b      	ldrh	r3, [r3, #4]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7f7 fbc3 	bl	80004d4 <__aeabi_i2d>
 8008d4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008d80 <_ZN7DRV821416getMotorSpeedRPMEv+0x70>)
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f7f7 fc28 	bl	80005a8 <__aeabi_dmul>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	4629      	mov	r1, r5
 8008d60:	f7f7 fd4c 	bl	80007fc <__aeabi_ddiv>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	f7f7 fef4 	bl	8000b58 <__aeabi_d2uiz>
 8008d70:	4603      	mov	r3, r0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bdb0      	pop	{r4, r5, r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	f3af 8000 	nop.w
 8008d80:	54442d18 	.word	0x54442d18
 8008d84:	401921fb 	.word	0x401921fb

08008d88 <_ZN7DRV821416getMotorSpeedRADEv>:

uint16_t DRV8214::getMotorSpeedRAD() {
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
    return ((drv8214_i2c_read_register(address, DRV8214_RC_STATUS1) * config.w_scale) / ripples_per_revolution);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	2101      	movs	r1, #1
 8008d96:	4618      	mov	r0, r3
 8008d98:	f001 fd3c 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	461a      	mov	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008da6:	fb02 f303 	mul.w	r3, r2, r3
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	8892      	ldrh	r2, [r2, #4]
 8008dae:	fb93 f3f2 	sdiv	r3, r3, r2
 8008db2:	b29b      	uxth	r3, r3
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <_ZN7DRV821421getMotorSpeedShaftRPMEv>:

uint16_t DRV8214::getMotorSpeedShaftRPM() {
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
    return (getMotorSpeedRPM() / motor_reduction_ratio);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7ff ffa3 	bl	8008d10 <_ZN7DRV821416getMotorSpeedRPMEv>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	79db      	ldrb	r3, [r3, #7]
 8008dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd4:	b29b      	uxth	r3, r3
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <_ZN7DRV821421getMotorSpeedShaftRADEv>:

uint16_t DRV8214::getMotorSpeedShaftRAD() {
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
    return (getMotorSpeedRAD() / motor_reduction_ratio);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff ffce 	bl	8008d88 <_ZN7DRV821416getMotorSpeedRADEv>
 8008dec:	4603      	mov	r3, r0
 8008dee:	461a      	mov	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	79db      	ldrb	r3, [r3, #7]
 8008df4:	fb92 f3f3 	sdiv	r3, r2, r3
 8008df8:	b29b      	uxth	r3, r3
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <_ZN7DRV821421getMotorSpeedRegisterEv>:

uint8_t DRV8214::getMotorSpeedRegister() {
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_STATUS1);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2101      	movs	r1, #1
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 fcff 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008e16:	4603      	mov	r3, r0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <_ZN7DRV821414getRippleCountEv>:

uint16_t DRV8214::getRippleCount() {
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
    return (drv8214_i2c_read_register(address, DRV8214_RC_STATUS3) << 8) | drv8214_i2c_read_register(address, DRV8214_RC_STATUS2);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2103      	movs	r1, #3
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f001 fcf0 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008e34:	4603      	mov	r3, r0
 8008e36:	b21b      	sxth	r3, r3
 8008e38:	021b      	lsls	r3, r3, #8
 8008e3a:	b21c      	sxth	r4, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	2102      	movs	r1, #2
 8008e42:	4618      	mov	r0, r3
 8008e44:	f001 fce6 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	b21b      	sxth	r3, r3
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	b21b      	sxth	r3, r3
 8008e50:	b29b      	uxth	r3, r3
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd90      	pop	{r4, r7, pc}
	...

08008e5c <_ZN7DRV821415getMotorVoltageEv>:

float DRV8214::getMotorVoltage() {
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
    if (config.voltage_range) {
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	7bdb      	ldrb	r3, [r3, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d016      	beq.n	8008e9a <_ZN7DRV821415getMotorVoltageEv+0x3e>
        float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 255.0f) * 3.92f;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2104      	movs	r1, #4
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 fcce 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e82:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8008f2c <_ZN7DRV821415getMotorVoltageEv+0xd0>
 8008e86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e8a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8008f30 <_ZN7DRV821415getMotorVoltageEv+0xd4>
 8008e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e92:	edc7 7a03 	vstr	s15, [r7, #12]
        return voltage;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	e040      	b.n	8008f1c <_ZN7DRV821415getMotorVoltageEv+0xc0>
    } else {
        if (config.ovp_enabled) {
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7d5b      	ldrb	r3, [r3, #21]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d026      	beq.n	8008ef0 <_ZN7DRV821415getMotorVoltageEv+0x94>
            // If OVP is enabled, the maximum voltage is 11 V
            if (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) > 0xB0) {
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2104      	movs	r1, #4
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f001 fcb3 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2bb0      	cmp	r3, #176	@ 0xb0
 8008eb2:	bf8c      	ite	hi
 8008eb4:	2301      	movhi	r3, #1
 8008eb6:	2300      	movls	r3, #0
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <_ZN7DRV821415getMotorVoltageEv+0x66>
                return 11.0f;
 8008ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8008f34 <_ZN7DRV821415getMotorVoltageEv+0xd8>)
 8008ec0:	e02c      	b.n	8008f1c <_ZN7DRV821415getMotorVoltageEv+0xc0>
            } else {     // 00h corresponds to 0 V and B0h corresponds to 11 V.
                float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 176.0f) * 11.0f;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2104      	movs	r1, #4
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f001 fca3 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	ee07 3a90 	vmov	s15, r3
 8008ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ed8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8008f38 <_ZN7DRV821415getMotorVoltageEv+0xdc>
 8008edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ee0:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8008ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ee8:	edc7 7a04 	vstr	s15, [r7, #16]
                return voltage;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	e015      	b.n	8008f1c <_ZN7DRV821415getMotorVoltageEv+0xc0>
            }
        } else {
            float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 255.0f) * 15.7f;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	2104      	movs	r1, #4
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f001 fc8c 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008efc:	4603      	mov	r3, r0
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f06:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8008f2c <_ZN7DRV821415getMotorVoltageEv+0xd0>
 8008f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f0e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8008f3c <_ZN7DRV821415getMotorVoltageEv+0xe0>
 8008f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f16:	edc7 7a05 	vstr	s15, [r7, #20]
            return voltage;
 8008f1a:	697b      	ldr	r3, [r7, #20]
        }
    }
}
 8008f1c:	ee07 3a90 	vmov	s15, r3
 8008f20:	eeb0 0a67 	vmov.f32	s0, s15
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	437f0000 	.word	0x437f0000
 8008f30:	407ae148 	.word	0x407ae148
 8008f34:	41300000 	.word	0x41300000
 8008f38:	43300000 	.word	0x43300000
 8008f3c:	417b3333 	.word	0x417b3333

08008f40 <_ZN7DRV821423getMotorVoltageRegisterEv>:

uint8_t DRV8214::getMotorVoltageRegister() {
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_STATUS1);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2104      	movs	r1, #4
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f001 fc60 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008f54:	4603      	mov	r3, r0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <_ZN7DRV821415getMotorCurrentEv>:

float DRV8214::getMotorCurrent() {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
    // 00h corresponds to 0 A and C0h corresponds to the maximum value set by the CS_GAIN_SEL bit
    float current = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS2) / 192.0f) * config.MaxCurrent;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2105      	movs	r1, #5
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f001 fc50 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008f74:	4603      	mov	r3, r0
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f7e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8008fa4 <_ZN7DRV821415getMotorCurrentEv+0x44>
 8008f82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f90:	edc7 7a03 	vstr	s15, [r7, #12]
    return current;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	ee07 3a90 	vmov	s15, r3
}
 8008f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	43400000 	.word	0x43400000

08008fa8 <_ZN7DRV821423getMotorCurrentRegisterEv>:

uint8_t DRV8214::getMotorCurrentRegister() {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_STATUS2);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2105      	movs	r1, #5
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f001 fc2c 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008fbc:	4603      	mov	r3, r0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
	...

08008fc8 <_ZN7DRV821412getDutyCycleEv>:

uint8_t DRV8214::getDutyCycle() {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
    uint8_t dutyCycle = drv8214_i2c_read_register(address, DRV8214_REG_STATUS3) & REG_STATUS3_IN_DUTY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2106      	movs	r1, #6
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f001 fc1c 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fe2:	73fb      	strb	r3, [r7, #15]
    return (dutyCycle * 100) / 63; // Convert 6-bit value to percentage
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	2264      	movs	r2, #100	@ 0x64
 8008fe8:	fb02 f303 	mul.w	r3, r2, r3
 8008fec:	4a05      	ldr	r2, [pc, #20]	@ (8009004 <_ZN7DRV821412getDutyCycleEv+0x3c>)
 8008fee:	fb82 1203 	smull	r1, r2, r2, r3
 8008ff2:	441a      	add	r2, r3
 8008ff4:	1152      	asrs	r2, r2, #5
 8008ff6:	17db      	asrs	r3, r3, #31
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	b2db      	uxtb	r3, r3
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	82082083 	.word	0x82082083

08009008 <_ZN7DRV821410getCONFIG0Ev>:

uint8_t DRV8214::getCONFIG0() {
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_CONFIG0);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2109      	movs	r1, #9
 8009016:	4618      	mov	r0, r3
 8009018:	f001 fbfc 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 800901c:	4603      	mov	r3, r0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <_ZN7DRV821417getInrushDurationEv>:

uint16_t DRV8214::getInrushDuration() {
 8009026:	b590      	push	{r4, r7, lr}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
    return (drv8214_i2c_read_register(address, DRV8214_CONFIG1) << 8) | drv8214_i2c_read_register(address, DRV8214_CONFIG2);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	210a      	movs	r1, #10
 8009034:	4618      	mov	r0, r3
 8009036:	f001 fbed 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 800903a:	4603      	mov	r3, r0
 800903c:	b21b      	sxth	r3, r3
 800903e:	021b      	lsls	r3, r3, #8
 8009040:	b21c      	sxth	r4, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	210b      	movs	r1, #11
 8009048:	4618      	mov	r0, r3
 800904a:	f001 fbe3 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 800904e:	4603      	mov	r3, r0
 8009050:	b21b      	sxth	r3, r3
 8009052:	4323      	orrs	r3, r4
 8009054:	b21b      	sxth	r3, r3
 8009056:	b29b      	uxth	r3, r3
}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	bd90      	pop	{r4, r7, pc}

08009060 <_ZN7DRV821410getCONFIG3Ev>:

uint8_t DRV8214::getCONFIG3() {
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_CONFIG3);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	210c      	movs	r1, #12
 800906e:	4618      	mov	r0, r3
 8009070:	f001 fbd0 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8009074:	4603      	mov	r3, r0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <_ZN7DRV821410getCONFIG4Ev>:

uint8_t DRV8214::getCONFIG4() {
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_CONFIG4);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	210d      	movs	r1, #13
 800908c:	4618      	mov	r0, r3
 800908e:	f001 fbc1 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8009092:	4603      	mov	r3, r0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <_ZN7DRV821412getREG_CTRL0Ev>:

uint8_t DRV8214::getREG_CTRL0() {
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL0);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	210e      	movs	r1, #14
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 fbb2 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 80090b0:	4603      	mov	r3, r0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <_ZN7DRV821412getREG_CTRL1Ev>:

uint8_t DRV8214::getREG_CTRL1() {
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL1);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	210f      	movs	r1, #15
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 fba3 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 80090ce:	4603      	mov	r3, r0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <_ZN7DRV821412getREG_CTRL2Ev>:

uint8_t DRV8214::getREG_CTRL2() {
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL2);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2110      	movs	r1, #16
 80090e6:	4618      	mov	r0, r3
 80090e8:	f001 fb94 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 80090ec:	4603      	mov	r3, r0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <_ZN7DRV821411getRC_CTRL0Ev>:

uint8_t DRV8214::getRC_CTRL0() {
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL0);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	2111      	movs	r1, #17
 8009104:	4618      	mov	r0, r3
 8009106:	f001 fb85 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 800910a:	4603      	mov	r3, r0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <_ZN7DRV821411getRC_CTRL1Ev>:

uint8_t DRV8214::getRC_CTRL1() {
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL1);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	2112      	movs	r1, #18
 8009122:	4618      	mov	r0, r3
 8009124:	f001 fb76 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8009128:	4603      	mov	r3, r0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <_ZN7DRV821411getRC_CTRL2Ev>:

uint8_t DRV8214::getRC_CTRL2() {
 8009132:	b580      	push	{r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL2);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	2113      	movs	r1, #19
 8009140:	4618      	mov	r0, r3
 8009142:	f001 fb67 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8009146:	4603      	mov	r3, r0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <_ZN7DRV821418getRippleThresholdEv>:

uint16_t DRV8214::getRippleThreshold()
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
    uint8_t ctrl2 = drv8214_i2c_read_register(address, DRV8214_RC_CTRL2);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2113      	movs	r1, #19
 800915e:	4618      	mov	r0, r3
 8009160:	f001 fb58 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8009164:	4603      	mov	r3, r0
 8009166:	73fb      	strb	r3, [r7, #15]
    uint8_t ctrl1 = drv8214_i2c_read_register(address, DRV8214_RC_CTRL1);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2112      	movs	r1, #18
 800916e:	4618      	mov	r0, r3
 8009170:	f001 fb50 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 8009174:	4603      	mov	r3, r0
 8009176:	73bb      	strb	r3, [r7, #14]
    // top two bits are bits 1..0 in ctrl2
    uint16_t thr_high = (ctrl2 & 0x03) << 8; // shift them to bits 9..8
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	b29b      	uxth	r3, r3
 800917c:	021b      	lsls	r3, r3, #8
 800917e:	b29b      	uxth	r3, r3
 8009180:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009184:	81bb      	strh	r3, [r7, #12]
    uint16_t thr_low  = ctrl1;               // bits 7..0
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	817b      	strh	r3, [r7, #10]
    return (thr_high | thr_low); 
 800918a:	89ba      	ldrh	r2, [r7, #12]
 800918c:	897b      	ldrh	r3, [r7, #10]
 800918e:	4313      	orrs	r3, r2
 8009190:	b29b      	uxth	r3, r3
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <_ZN7DRV821424getRippleThresholdScaledEv>:

uint16_t DRV8214::getRippleThresholdScaled() {
 800919a:	b580      	push	{r7, lr}
 800919c:	b082      	sub	sp, #8
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
    getRippleThresholdScale();
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f83f 	bl	8009226 <_ZN7DRV821423getRippleThresholdScaleEv>
    if (config.ripple_threshold_scale  == 0) { return getRippleThreshold() * 2;  }
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d106      	bne.n	80091c0 <_ZN7DRV821424getRippleThresholdScaledEv+0x26>
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7ff ffcc 	bl	8009150 <_ZN7DRV821418getRippleThresholdEv>
 80091b8:	4603      	mov	r3, r0
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	b29b      	uxth	r3, r3
 80091be:	e02e      	b.n	800921e <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    if (config.ripple_threshold_scale  == 1) { return getRippleThreshold() * 8;  }
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d106      	bne.n	80091d8 <_ZN7DRV821424getRippleThresholdScaledEv+0x3e>
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7ff ffc0 	bl	8009150 <_ZN7DRV821418getRippleThresholdEv>
 80091d0:	4603      	mov	r3, r0
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	e022      	b.n	800921e <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    if (config.ripple_threshold_scale  == 2) { return getRippleThreshold() * 16; }
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d106      	bne.n	80091f0 <_ZN7DRV821424getRippleThresholdScaledEv+0x56>
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7ff ffb4 	bl	8009150 <_ZN7DRV821418getRippleThresholdEv>
 80091e8:	4603      	mov	r3, r0
 80091ea:	011b      	lsls	r3, r3, #4
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	e016      	b.n	800921e <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    if (config.ripple_threshold_scale  == 3) { return getRippleThreshold() * 64; }
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d106      	bne.n	8009208 <_ZN7DRV821424getRippleThresholdScaledEv+0x6e>
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff ffa8 	bl	8009150 <_ZN7DRV821418getRippleThresholdEv>
 8009200:	4603      	mov	r3, r0
 8009202:	019b      	lsls	r3, r3, #6
 8009204:	b29b      	uxth	r3, r3
 8009206:	e00a      	b.n	800921e <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    return getRippleThreshold() * config.ripple_threshold_scale;
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff ffa1 	bl	8009150 <_ZN7DRV821418getRippleThresholdEv>
 800920e:	4603      	mov	r3, r0
 8009210:	461a      	mov	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009218:	fb12 f303 	smulbb	r3, r2, r3
 800921c:	b29b      	uxth	r3, r3
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <_ZN7DRV821423getRippleThresholdScaleEv>:

uint16_t DRV8214::getRippleThresholdScale() {
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
    config.ripple_threshold_scale = (drv8214_i2c_read_register(address, DRV8214_RC_CTRL2) & RC_CTRL2_RC_THR_SCALE) >> 2;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2113      	movs	r1, #19
 8009234:	4618      	mov	r0, r3
 8009236:	f001 faed 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 800923a:	4603      	mov	r3, r0
 800923c:	089b      	lsrs	r3, r3, #2
 800923e:	b2db      	uxtb	r3, r3
 8009240:	f003 0303 	and.w	r3, r3, #3
 8009244:	b2da      	uxtb	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    return config.ripple_threshold_scale;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <_ZN7DRV82146getKMCEv>:

uint8_t DRV8214::getKMC() {
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL4);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2115      	movs	r1, #21
 8009268:	4618      	mov	r0, r3
 800926a:	f001 fad3 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 800926e:	4603      	mov	r3, r0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <_ZN7DRV821411getRC_CTRL6Ev>:

uint8_t DRV8214::getFilterDamping() {
    return (drv8214_i2c_read_register(address, DRV8214_RC_CTRL5) >> 4) & 0x0F;
}

uint8_t DRV8214::getRC_CTRL6() {
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL6);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2117      	movs	r1, #23
 8009286:	4618      	mov	r0, r3
 8009288:	f001 fac4 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 800928c:	4603      	mov	r3, r0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <_ZN7DRV821411getRC_CTRL7Ev>:

uint8_t DRV8214::getRC_CTRL7() {
 8009296:	b580      	push	{r7, lr}
 8009298:	b082      	sub	sp, #8
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL7);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	2118      	movs	r1, #24
 80092a4:	4618      	mov	r0, r3
 80092a6:	f001 fab5 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 80092aa:	4603      	mov	r3, r0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <_ZN7DRV821411getRC_CTRL8Ev>:

uint8_t DRV8214::getRC_CTRL8() {
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL8);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2119      	movs	r1, #25
 80092c2:	4618      	mov	r0, r3
 80092c4:	f001 faa6 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 80092c8:	4603      	mov	r3, r0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <_ZN7DRV821413enableHbridgeEv>:

// --- Control Functions ---
void DRV8214::enableHbridge() {
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OUT, true);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	7818      	ldrb	r0, [r3, #0]
 80092de:	2301      	movs	r3, #1
 80092e0:	2280      	movs	r2, #128	@ 0x80
 80092e2:	2109      	movs	r1, #9
 80092e4:	f001 fada 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <_ZN7DRV821414disableHbridgeEv>:

void DRV8214::disableHbridge() {
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OUT, false);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	7818      	ldrb	r0, [r3, #0]
 80092fc:	2300      	movs	r3, #0
 80092fe:	2280      	movs	r2, #128	@ 0x80
 8009300:	2109      	movs	r1, #9
 8009302:	f001 facb 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009306:	bf00      	nop
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <_ZN7DRV821417setStallDetectionEb>:

void DRV8214::setStallDetection(bool stall_en) {
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
    config.stall_enabled = stall_en;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	78fa      	ldrb	r2, [r7, #3]
 800931e:	751a      	strb	r2, [r3, #20]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG0_EN_STALL, stall_en);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7818      	ldrb	r0, [r3, #0]
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	2220      	movs	r2, #32
 8009328:	210c      	movs	r1, #12
 800932a:	f001 fab7 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <_ZN7DRV821415setVoltageRangeEb>:

void DRV8214::setVoltageRange(bool range) {
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
    config.voltage_range = range;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	78fa      	ldrb	r2, [r7, #3]
 8009346:	73da      	strb	r2, [r3, #15]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_VM_GAIN_SEL, range);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	7818      	ldrb	r0, [r3, #0]
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	2208      	movs	r2, #8
 8009350:	2109      	movs	r1, #9
 8009352:	f001 faa3 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009356:	bf00      	nop
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <_ZN7DRV821424setOvervoltageProtectionEb>:

void DRV8214::setOvervoltageProtection(bool OVP) {
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
    config.ovp_enabled = OVP;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	755a      	strb	r2, [r3, #21]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OVP, true);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	7818      	ldrb	r0, [r3, #0]
 8009374:	2301      	movs	r3, #1
 8009376:	2240      	movs	r2, #64	@ 0x40
 8009378:	2109      	movs	r1, #9
 800937a:	f001 fa8f 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <_ZN7DRV821418resetRippleCounterEv>:

void DRV8214::resetRippleCounter() {
 8009386:	b580      	push	{r7, lr}
 8009388:	b082      	sub	sp, #8
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_CLR_CNT, true);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	7818      	ldrb	r0, [r3, #0]
 8009392:	2301      	movs	r3, #1
 8009394:	2204      	movs	r2, #4
 8009396:	2109      	movs	r1, #9
 8009398:	f001 fa80 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <_ZN7DRV821415resetFaultFlagsEv>:

void DRV8214::resetFaultFlags() {
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
    disableHbridge();
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff ff9f 	bl	80092f0 <_ZN7DRV821414disableHbridgeEv>
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_CLR_FLT, true);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7818      	ldrb	r0, [r3, #0]
 80093b6:	2301      	movs	r3, #1
 80093b8:	2202      	movs	r2, #2
 80093ba:	2109      	movs	r1, #9
 80093bc:	f001 fa6e 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
    enableHbridge();
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff ff86 	bl	80092d2 <_ZN7DRV821413enableHbridgeEv>
}
 80093c6:	bf00      	nop
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <_ZN7DRV821417setInrushDurationEt>:

void DRV8214::disableDutyCycleControl() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_DUTY_CTRL, false);
}

void DRV8214::setInrushDuration(uint16_t threshold) {
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b082      	sub	sp, #8
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	807b      	strh	r3, [r7, #2]
    drv8214_i2c_write_register(address, DRV8214_CONFIG1, (threshold >> 8) & 0xFF);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	7818      	ldrb	r0, [r3, #0]
 80093de:	887b      	ldrh	r3, [r7, #2]
 80093e0:	0a1b      	lsrs	r3, r3, #8
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	461a      	mov	r2, r3
 80093e8:	210a      	movs	r1, #10
 80093ea:	f001 f9ed 	bl	800a7c8 <_Z26drv8214_i2c_write_registerhhh>
    drv8214_i2c_write_register(address, DRV8214_CONFIG2, threshold & 0xFF);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	887a      	ldrh	r2, [r7, #2]
 80093f4:	b2d2      	uxtb	r2, r2
 80093f6:	210b      	movs	r1, #11
 80093f8:	4618      	mov	r0, r3
 80093fa:	f001 f9e5 	bl	800a7c8 <_Z26drv8214_i2c_write_registerhhh>
}
 80093fe:	bf00      	nop
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
	...

08009408 <_ZN7DRV821417setCurrentRegModeEh>:

void DRV8214::setCurrentRegMode(uint8_t mode) {
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]

    if (mode > 3) { mode = 3; } // Cap mode to 3
 8009414:	78fb      	ldrb	r3, [r7, #3]
 8009416:	2b03      	cmp	r3, #3
 8009418:	d901      	bls.n	800941e <_ZN7DRV821417setCurrentRegModeEh+0x16>
 800941a:	2303      	movs	r3, #3
 800941c:	70fb      	strb	r3, [r7, #3]
    switch (mode){
 800941e:	78fb      	ldrb	r3, [r7, #3]
 8009420:	2b03      	cmp	r3, #3
 8009422:	d823      	bhi.n	800946c <_ZN7DRV821417setCurrentRegModeEh+0x64>
 8009424:	a201      	add	r2, pc, #4	@ (adr r2, 800942c <_ZN7DRV821417setCurrentRegModeEh+0x24>)
 8009426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942a:	bf00      	nop
 800942c:	0800943d 	.word	0x0800943d
 8009430:	08009449 	.word	0x08009449
 8009434:	08009455 	.word	0x08009455
 8009438:	08009461 	.word	0x08009461
    case 0: // 0b00
        mode = 0x00; // No current regulation at anytime
 800943c:	2300      	movs	r3, #0
 800943e:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 0;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	761a      	strb	r2, [r3, #24]
        break;
 8009446:	e012      	b.n	800946e <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 1: // 0b01
        mode = 0x40; // Current regulation at all time if stall detection is desabled
 8009448:	2340      	movs	r3, #64	@ 0x40
 800944a:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 1; // Current regulation during tinrush only if stall detection is enabled
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	761a      	strb	r2, [r3, #24]
        break;       
 8009452:	e00c      	b.n	800946e <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 2: // 0b10
        mode = 0x80; // Current regulation at all time
 8009454:	2380      	movs	r3, #128	@ 0x80
 8009456:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2202      	movs	r2, #2
 800945c:	761a      	strb	r2, [r3, #24]
        break;
 800945e:	e006      	b.n	800946e <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 3: // 0b11
        mode = 0xC0; // Current regulation at all time
 8009460:	23c0      	movs	r3, #192	@ 0xc0
 8009462:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 3;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2203      	movs	r2, #3
 8009468:	761a      	strb	r2, [r3, #24]
        break;
 800946a:	e000      	b.n	800946e <_ZN7DRV821417setCurrentRegModeEh+0x66>
    default:
        break;
 800946c:	bf00      	nop
    }
    drv8214_i2c_modify_register_bits(address, DRV8214_CONFIG3, CONFIG3_IMODE, mode);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	7818      	ldrb	r0, [r3, #0]
 8009472:	78fb      	ldrb	r3, [r7, #3]
 8009474:	22c0      	movs	r2, #192	@ 0xc0
 8009476:	210c      	movs	r1, #12
 8009478:	f001 fa42 	bl	800a900 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <_ZN7DRV821416setStallBehaviorEb>:

void DRV8214::setStallBehavior(bool behavior) {
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
    // The SMODE bit programs the device's response to a stall condition. 
    // When SMODE = 0b, the STALL bit becomes 1b, the outputs are disabled
    // When SMODE = 1b, the STALL bit becomes 1b, but the outputs continue to drive current into the motor
    config.stall_behavior = behavior;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	78fa      	ldrb	r2, [r7, #3]
 8009494:	759a      	strb	r2, [r3, #22]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_SMODE, behavior);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	7818      	ldrb	r0, [r3, #0]
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	2220      	movs	r2, #32
 800949e:	210c      	movs	r1, #12
 80094a0:	f001 f9fc 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 80094a4:	bf00      	nop
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <_ZN7DRV821427setInternalVoltageReferenceEf>:

void DRV8214::setInternalVoltageReference(float reference_voltage) {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	ed87 0a00 	vstr	s0, [r7]
    // VVREF must be lower than VVM by at least 1.25 V. The maximum recommended value of VVREF is 3.3 V. 
    // If INT_VREF bit is set to 1b, VVREF is internally selected with a fixed value of 500 mV.
    if (reference_voltage == 0) { 
 80094b8:	edd7 7a00 	vldr	s15, [r7]
 80094bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80094c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c4:	d10b      	bne.n	80094de <_ZN7DRV821427setInternalVoltageReferenceEf+0x32>
        config.Vref = 0.5f; // Default
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80094cc:	611a      	str	r2, [r3, #16]
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, true);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	7818      	ldrb	r0, [r3, #0]
 80094d2:	2301      	movs	r3, #1
 80094d4:	2210      	movs	r2, #16
 80094d6:	210c      	movs	r1, #12
 80094d8:	f001 f9e0 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
    } else { 
        config.Vref = reference_voltage;
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, false);
    }
}
 80094dc:	e009      	b.n	80094f2 <_ZN7DRV821427setInternalVoltageReferenceEf+0x46>
        config.Vref = reference_voltage;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	611a      	str	r2, [r3, #16]
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, false);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	7818      	ldrb	r0, [r3, #0]
 80094e8:	2300      	movs	r3, #0
 80094ea:	2210      	movs	r2, #16
 80094ec:	210c      	movs	r1, #12
 80094ee:	f001 f9d5 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <_ZN7DRV821413setI2CControlEb>:

void DRV8214::configureConfig3(uint8_t config3) {
    drv8214_i2c_write_register(address, DRV8214_CONFIG3, config3);
}

void DRV8214::setI2CControl(bool I2CControl) {
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b082      	sub	sp, #8
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
    config.I2CControlled = I2CControl;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	78fa      	ldrb	r2, [r7, #3]
 800950a:	731a      	strb	r2, [r3, #12]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_BC, I2CControl);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	7818      	ldrb	r0, [r3, #0]
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	2204      	movs	r2, #4
 8009514:	210d      	movs	r1, #13
 8009516:	f001 f9c1 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 800951a:	bf00      	nop
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <_ZN7DRV821416enablePWMControlEv>:

void DRV8214::enablePWMControl() {
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_PMODE, true);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	7818      	ldrb	r0, [r3, #0]
 800952e:	2301      	movs	r3, #1
 8009530:	2208      	movs	r2, #8
 8009532:	210d      	movs	r1, #13
 8009534:	f001 f9b2 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <_ZN7DRV821417enablePHENControlEv>:

void DRV8214::enablePHENControl() {
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_PMODE, false);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	7818      	ldrb	r0, [r3, #0]
 800954c:	2300      	movs	r3, #0
 800954e:	2208      	movs	r2, #8
 8009550:	210d      	movs	r1, #13
 8009552:	f001 f9a3 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <_ZN7DRV821420enableStallInterruptEv>:

void DRV8214::enableStallInterrupt() {
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_STALL_REP, true);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	7818      	ldrb	r0, [r3, #0]
 800956a:	2301      	movs	r3, #1
 800956c:	2220      	movs	r2, #32
 800956e:	210d      	movs	r1, #13
 8009570:	f001 f994 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <_ZN7DRV821429enableCountThresholdInterruptEv>:

void DRV8214::disableStallInterrupt() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_STALL_REP, false);
}

void DRV8214::enableCountThresholdInterrupt() {
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register_bits(address, DRV8214_CONFIG4, CONFIG4_RC_REP, 0b10000000);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	7818      	ldrb	r0, [r3, #0]
 8009588:	2380      	movs	r3, #128	@ 0x80
 800958a:	22c0      	movs	r2, #192	@ 0xc0
 800958c:	210d      	movs	r1, #13
 800958e:	f001 f9b7 	bl	800a900 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009592:	bf00      	nop
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>:

void DRV8214::disableCountThresholdInterrupt() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_RC_REP, false);
}

void DRV8214::setBridgeBehaviorThresholdReached(bool stops) {
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]
    // stops = 0b: H-bridge stays enabled when RC_CNT exceeds threshold
    // stops = 1b: H-bridge is disabled (High-Z) when RC_CNT exceeds threshold
    config.bridge_behavior_thr_reached = stops; 
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	78fa      	ldrb	r2, [r7, #3]
 80095aa:	75da      	strb	r2, [r3, #23]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_RC_HIZ, stops);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	7818      	ldrb	r0, [r3, #0]
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	2220      	movs	r2, #32
 80095b4:	2111      	movs	r1, #17
 80095b6:	f001 f971 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <_ZN7DRV821416setSoftStartStopEb>:

void DRV8214::setSoftStartStop(bool enable) {
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	460b      	mov	r3, r1
 80095cc:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_REG_CTRL0, REG_CTRL0_EN_SS, enable);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	7818      	ldrb	r0, [r3, #0]
 80095d2:	78fb      	ldrb	r3, [r7, #3]
 80095d4:	2220      	movs	r2, #32
 80095d6:	210e      	movs	r1, #14
 80095d8:	f001 f960 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <_ZN7DRV821428setRegulationAndStallCurrentEf>:

void DRV8214::configureControl0(uint8_t control0) {
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL0, control0);
}

void DRV8214::setRegulationAndStallCurrent(float requested_current) {
 80095e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095e8:	b0cd      	sub	sp, #308	@ 0x134
 80095ea:	af08      	add	r7, sp, #32
 80095ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095f4:	6018      	str	r0, [r3, #0]
 80095f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095fa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095fe:	ed83 0a00 	vstr	s0, [r3]
    //   1X1b => 5560 μA/A, max current 0.125 A

    uint8_t cs_gain_sel;

    // Clamp very low currents (<0.125 A) to the lowest recommended setting:
    if (requested_current < 0.125f) {
 8009602:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009606:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800960a:	edd3 7a00 	vldr	s15, [r3]
 800960e:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8009612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961a:	d512      	bpl.n	8009642 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x5e>
        cs_gain_sel = 0b111; // 5560 μA/A, max current 0.125 A
 800961c:	2307      	movs	r3, #7
 800961e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 5560e-6; // Convert μA/A to A/A
 8009622:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009626:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a89      	ldr	r2, [pc, #548]	@ (8009854 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x270>)
 800962e:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.125f;
 8009630:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009634:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 800963e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009640:	e091      	b.n	8009766 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 0.25f) {
 8009642:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009646:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800964a:	edd3 7a00 	vldr	s15, [r3]
 800964e:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8009652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800965a:	d512      	bpl.n	8009682 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x9e>
        cs_gain_sel = 0b110; // 5560 μA/A, max current 0.25 A
 800965c:	2306      	movs	r3, #6
 800965e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 5560e-6;
 8009662:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009666:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a79      	ldr	r2, [pc, #484]	@ (8009854 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x270>)
 800966e:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.25f;
 8009670:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009674:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800967e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009680:	e071      	b.n	8009766 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 0.5f) {
 8009682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009686:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800968a:	edd3 7a00 	vldr	s15, [r3]
 800968e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969a:	d512      	bpl.n	80096c2 <_ZN7DRV821428setRegulationAndStallCurrentEf+0xde>
        cs_gain_sel = 0b011; // 1125 μA/A, max current 0.5 A
 800969c:	2303      	movs	r3, #3
 800969e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 1125e-6;
 80096a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a6a      	ldr	r2, [pc, #424]	@ (8009858 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x274>)
 80096ae:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.5f;
 80096b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80096be:	625a      	str	r2, [r3, #36]	@ 0x24
 80096c0:	e051      	b.n	8009766 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 1.0f) {
 80096c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096ca:	edd3 7a00 	vldr	s15, [r3]
 80096ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096da:	d512      	bpl.n	8009702 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x11e>
        cs_gain_sel = 0b010; // 1125 μA/A, max current 1 A
 80096dc:	2302      	movs	r3, #2
 80096de:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 1125e-6;
 80096e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a5a      	ldr	r2, [pc, #360]	@ (8009858 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x274>)
 80096ee:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 1.0f;
 80096f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80096fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8009700:	e031      	b.n	8009766 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 2.0f) {
 8009702:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009706:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800970a:	edd3 7a00 	vldr	s15, [r3]
 800970e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971a:	d512      	bpl.n	8009742 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x15e>
        cs_gain_sel = 0b001; // 225 μA/A, max current 2 A
 800971c:	2301      	movs	r3, #1
 800971e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 225e-6;
 8009722:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009726:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a4b      	ldr	r2, [pc, #300]	@ (800985c <_ZN7DRV821428setRegulationAndStallCurrentEf+0x278>)
 800972e:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 2.0f;
 8009730:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009734:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800973e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009740:	e011      	b.n	8009766 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else {
        // For >= 2.0 A, recommended setting is 000b (max current 4 A).
        // Also clamp above 4 A to the same setting (since 4 A is the top of the recommended range).
        cs_gain_sel = 0b000; // 225 μA/A, max current 4 A
 8009742:	2300      	movs	r3, #0
 8009744:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 225e-6;
 8009748:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800974c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a42      	ldr	r2, [pc, #264]	@ (800985c <_ZN7DRV821428setRegulationAndStallCurrentEf+0x278>)
 8009754:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 4.0f;
 8009756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800975a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8009764:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL0, RC_CTRL0_CS_GAIN_SEL, cs_gain_sel);
 8009766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800976a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	7818      	ldrb	r0, [r3, #0]
 8009772:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8009776:	2207      	movs	r2, #7
 8009778:	2111      	movs	r1, #17
 800977a:	f001 f8c1 	bl	800a900 <_Z32drv8214_i2c_modify_register_bitshhhh>

    // Update Itrip calculation with the new scale
    config.Itrip = config.Vref / (Ripropri * config.Aipropri);
 800977e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009782:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	edd3 6a04 	vldr	s13, [r3, #16]
 800978c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009790:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	885b      	ldrh	r3, [r3, #2]
 8009798:	ee07 3a90 	vmov	s15, r3
 800979c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80097ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	edc3 7a08 	vstr	s15, [r3, #32]

    if (config.verbose) {
 80097c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d038      	beq.n	8009848 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x264>
        char buffer[256];
        snprintf(buffer, sizeof(buffer), "Requested Itrip = %f A => Chosen CS_GAIN_SEL: 0b%d => Aipropri = %f uA/A => Actual Itrip = %f A\n", requested_current, cs_gain_sel, config.Aipropri, config.Itrip);
 80097d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097de:	6818      	ldr	r0, [r3, #0]
 80097e0:	f7f6 fe8a 	bl	80004f8 <__aeabi_f2d>
 80097e4:	4604      	mov	r4, r0
 80097e6:	460d      	mov	r5, r1
 80097e8:	f897 610f 	ldrb.w	r6, [r7, #271]	@ 0x10f
 80097ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	69db      	ldr	r3, [r3, #28]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7f6 fe7d 	bl	80004f8 <__aeabi_f2d>
 80097fe:	4680      	mov	r8, r0
 8009800:	4689      	mov	r9, r1
 8009802:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009806:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	4618      	mov	r0, r3
 8009810:	f7f6 fe72 	bl	80004f8 <__aeabi_f2d>
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	f107 000c 	add.w	r0, r7, #12
 800981c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009820:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009824:	9602      	str	r6, [sp, #8]
 8009826:	e9cd 4500 	strd	r4, r5, [sp]
 800982a:	4a0d      	ldr	r2, [pc, #52]	@ (8009860 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x27c>)
 800982c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009830:	f009 fb7c 	bl	8012f2c <sniprintf>
        drvPrint(buffer);
 8009834:	f107 020c 	add.w	r2, r7, #12
 8009838:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800983c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009840:	4611      	mov	r1, r2
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	f000 fef4 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    }
}
 8009848:	bf00      	nop
 800984a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800984e:	46bd      	mov	sp, r7
 8009850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009854:	3bb630a9 	.word	0x3bb630a9
 8009858:	3a9374bc 	.word	0x3a9374bc
 800985c:	396bedfa 	.word	0x396bedfa
 8009860:	08015fe0 	.word	0x08015fe0
 8009864:	00000000 	.word	0x00000000

08009868 <_ZN7DRV821414setRippleSpeedEt>:

void DRV8214::setRippleSpeed(uint16_t speed) {
 8009868:	b5b0      	push	{r4, r5, r7, lr}
 800986a:	b0d2      	sub	sp, #328	@ 0x148
 800986c:	af04      	add	r7, sp, #16
 800986e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009872:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009876:	6018      	str	r0, [r3, #0]
 8009878:	460a      	mov	r2, r1
 800987a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800987e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009882:	801a      	strh	r2, [r3, #0]
    if (speed > motor_max_rpm) { speed = motor_max_rpm; } // Cap speed to the maximum RPM of the motor
 8009884:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009888:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	891b      	ldrh	r3, [r3, #8]
 8009890:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009894:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009898:	8812      	ldrh	r2, [r2, #0]
 800989a:	429a      	cmp	r2, r3
 800989c:	d90a      	bls.n	80098b4 <_ZN7DRV821414setRippleSpeedEt+0x4c>
 800989e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098a2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80098a6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80098aa:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80098ae:	6812      	ldr	r2, [r2, #0]
 80098b0:	8912      	ldrh	r2, [r2, #8]
 80098b2:	801a      	strh	r2, [r3, #0]

    // Find the corresponding ripples frequency (Hz) value
    uint32_t ripple_speed = (speed * motor_reduction_ratio * ripples_per_revolution * 2 * M_PI) / 60;
 80098b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098b8:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80098c2:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80098c6:	6812      	ldr	r2, [r2, #0]
 80098c8:	79d2      	ldrb	r2, [r2, #7]
 80098ca:	fb02 f303 	mul.w	r3, r2, r3
 80098ce:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80098d2:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80098d6:	6812      	ldr	r2, [r2, #0]
 80098d8:	8892      	ldrh	r2, [r2, #4]
 80098da:	fb02 f303 	mul.w	r3, r2, r3
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7f6 fdf7 	bl	80004d4 <__aeabi_i2d>
 80098e6:	a36d      	add	r3, pc, #436	@ (adr r3, 8009a9c <_ZN7DRV821414setRippleSpeedEt+0x234>)
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f7f6 fe5c 	bl	80005a8 <__aeabi_dmul>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4610      	mov	r0, r2
 80098f6:	4619      	mov	r1, r3
 80098f8:	f04f 0200 	mov.w	r2, #0
 80098fc:	4b64      	ldr	r3, [pc, #400]	@ (8009a90 <_ZN7DRV821414setRippleSpeedEt+0x228>)
 80098fe:	f7f6 ff7d 	bl	80007fc <__aeabi_ddiv>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4610      	mov	r0, r2
 8009908:	4619      	mov	r1, r3
 800990a:	f7f7 f925 	bl	8000b58 <__aeabi_d2uiz>
 800990e:	4603      	mov	r3, r0
 8009910:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    // Define max feasible ripple speed based on 8-bit WSET_VSET and max scaling factor (128)
    const uint16_t MAX_SPEED = 32640; // 255 * 128 = 32640 rad/s
 8009914:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 8009918:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    
    // Cap threshold to the maximum feasible value
    if (ripple_speed > MAX_SPEED) { ripple_speed = MAX_SPEED; }
 800991c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009920:	f5b3 4fff 	cmp.w	r3, #32640	@ 0x7f80
 8009924:	d903      	bls.n	800992e <_ZN7DRV821414setRippleSpeedEt+0xc6>
 8009926:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 800992a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    struct ScaleOption {
        uint16_t scale;
        uint8_t bits;
    };

    ScaleOption scaleOptions[] = {
 800992e:	4b59      	ldr	r3, [pc, #356]	@ (8009a94 <_ZN7DRV821414setRippleSpeedEt+0x22c>)
 8009930:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 8009934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {64, 0b10},
        {128, 0b11}
    };

    // Find the optimal scaling factor and 10-bit value
    uint16_t WSET_VSET = ripple_speed;
 800993a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800993e:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    uint8_t W_SCALE = 0b00;
 8009942:	2300      	movs	r3, #0
 8009944:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131

    for (const auto &option : scaleOptions) {
 8009948:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800994c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8009950:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009954:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8009958:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800995c:	3310      	adds	r3, #16
 800995e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8009962:	e024      	b.n	80099ae <_ZN7DRV821414setRippleSpeedEt+0x146>
 8009964:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009968:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        if (ripple_speed >= option.scale) {
 800996c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009978:	4293      	cmp	r3, r2
 800997a:	d313      	bcc.n	80099a4 <_ZN7DRV821414setRippleSpeedEt+0x13c>
            WSET_VSET = ripple_speed / option.scale;
 800997c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009988:	fbb3 f3f2 	udiv	r3, r3, r2
 800998c:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
            if (WSET_VSET <= 255) { // Ensure WSET_VSET fits within 8 bits
 8009990:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8009994:	2bff      	cmp	r3, #255	@ 0xff
 8009996:	d805      	bhi.n	80099a4 <_ZN7DRV821414setRippleSpeedEt+0x13c>
                W_SCALE = option.bits;
 8009998:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800999c:	789b      	ldrb	r3, [r3, #2]
 800999e:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
                break;
 80099a2:	e00a      	b.n	80099ba <_ZN7DRV821414setRippleSpeedEt+0x152>
    for (const auto &option : scaleOptions) {
 80099a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099a8:	3304      	adds	r3, #4
 80099aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80099ae:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80099b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d1d4      	bne.n	8009964 <_ZN7DRV821414setRippleSpeedEt+0xfc>
            }
        }
    }
    config.w_scale = scaleOptions[W_SCALE].scale;
 80099ba:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80099c4:	443b      	add	r3, r7
 80099c6:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80099d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    WSET_VSET = WSET_VSET & 0xFF; // Ensure WSET_VSET fits within 8 bits
 80099da:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132

    if (config.verbose) {
 80099e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80099e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d02b      	beq.n	8009a4e <_ZN7DRV821414setRippleSpeedEt+0x1e6>
        char buffer[256];  // Adjust the buffer size as needed
        snprintf(buffer, sizeof(buffer), "WSET_VSET: %d | W_SCALE: %d or 0b%d | Effective Target Speed: %d rad/s\n", WSET_VSET, config.w_scale, W_SCALE, WSET_VSET * config.w_scale);
 80099f6:	f8b7 4132 	ldrh.w	r4, [r7, #306]	@ 0x132
 80099fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80099fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a08:	461d      	mov	r5, r3
 8009a0a:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 8009a0e:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 8009a12:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009a16:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8009a1a:	6809      	ldr	r1, [r1, #0]
 8009a1c:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 8009a20:	fb01 f202 	mul.w	r2, r1, r2
 8009a24:	f107 000c 	add.w	r0, r7, #12
 8009a28:	9202      	str	r2, [sp, #8]
 8009a2a:	9301      	str	r3, [sp, #4]
 8009a2c:	9500      	str	r5, [sp, #0]
 8009a2e:	4623      	mov	r3, r4
 8009a30:	4a19      	ldr	r2, [pc, #100]	@ (8009a98 <_ZN7DRV821414setRippleSpeedEt+0x230>)
 8009a32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009a36:	f009 fa79 	bl	8012f2c <sniprintf>
        drvPrint(buffer);
 8009a3a:	f107 020c 	add.w	r2, r7, #12
 8009a3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a42:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009a46:	4611      	mov	r1, r2
 8009a48:	6818      	ldr	r0, [r3, #0]
 8009a4a:	f000 fdf1 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    }
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, WSET_VSET);
 8009a4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a52:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	210f      	movs	r1, #15
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 feb0 	bl	800a7c8 <_Z26drv8214_i2c_write_registerhhh>
    drv8214_i2c_modify_register_bits(address, DRV8214_REG_CTRL0, REG_CTRL0_W_SCALE, W_SCALE);
 8009a68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	7818      	ldrb	r0, [r3, #0]
 8009a74:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 8009a78:	2203      	movs	r2, #3
 8009a7a:	210e      	movs	r1, #14
 8009a7c:	f000 ff40 	bl	800a900 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009a80:	bf00      	nop
 8009a82:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bdb0      	pop	{r4, r5, r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	f3af 8000 	nop.w
 8009a90:	404e0000 	.word	0x404e0000
 8009a94:	0801608c 	.word	0x0801608c
 8009a98:	08016044 	.word	0x08016044
 8009a9c:	54442d18 	.word	0x54442d18
 8009aa0:	400921fb 	.word	0x400921fb

08009aa4 <_ZN7DRV821415setVoltageSpeedEf>:

void DRV8214::setVoltageSpeed(float voltage) {
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	ed87 0a02 	vstr	s0, [r7, #8]
    if (voltage < 0.0f) { voltage = 0.0f; } // Ensure voltage is non-negative
 8009ab0:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ab4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009abc:	d502      	bpl.n	8009ac4 <_ZN7DRV821415setVoltageSpeedEf+0x20>
 8009abe:	f04f 0300 	mov.w	r3, #0
 8009ac2:	60bb      	str	r3, [r7, #8]

    // Depending on the VM_GAIN_SEL bit (voltage_range), clamp and scale accordingly
    if (config.voltage_range) {
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	7bdb      	ldrb	r3, [r3, #15]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d026      	beq.n	8009b1a <_ZN7DRV821415setVoltageSpeedEf+0x76>
        // VM_GAIN_SEL = 1 → Range: 0 to 3.92 V
        if (voltage > 3.92f) { voltage = 3.92f; }
 8009acc:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ad0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8009b70 <_ZN7DRV821415setVoltageSpeedEf+0xcc>
 8009ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009adc:	dd01      	ble.n	8009ae2 <_ZN7DRV821415setVoltageSpeedEf+0x3e>
 8009ade:	4b25      	ldr	r3, [pc, #148]	@ (8009b74 <_ZN7DRV821415setVoltageSpeedEf+0xd0>)
 8009ae0:	60bb      	str	r3, [r7, #8]
        // Apply formula from table 8-23: WSET_VSET = voltage * (255 / 3.92)
        float scaled = voltage * (255.0f / 3.92f);
 8009ae2:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ae6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8009b78 <_ZN7DRV821415setVoltageSpeedEf+0xd4>
 8009aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009aee:	edc7 7a05 	vstr	s15, [r7, #20]
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
 8009af2:	edd7 7a05 	vldr	s15, [r7, #20]
 8009af6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009afa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b02:	edc7 7a01 	vstr	s15, [r7, #4]
 8009b06:	793b      	ldrb	r3, [r7, #4]
 8009b08:	74fb      	strb	r3, [r7, #19]
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	7cfa      	ldrb	r2, [r7, #19]
 8009b10:	210f      	movs	r1, #15
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 fe58 	bl	800a7c8 <_Z26drv8214_i2c_write_registerhhh>
        // Apply formula from table 8-23: WSET_VSET = voltage * (255 / 15.7)
        float scaled = voltage * (255.0f / 15.7f);
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
    }
}
 8009b18:	e025      	b.n	8009b66 <_ZN7DRV821415setVoltageSpeedEf+0xc2>
        if (voltage > 15.7f) { voltage = 11.0f; } // Cap voltage to 11 V because of Overvoltage Protection
 8009b1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b1e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8009b7c <_ZN7DRV821415setVoltageSpeedEf+0xd8>
 8009b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2a:	dd01      	ble.n	8009b30 <_ZN7DRV821415setVoltageSpeedEf+0x8c>
 8009b2c:	4b14      	ldr	r3, [pc, #80]	@ (8009b80 <_ZN7DRV821415setVoltageSpeedEf+0xdc>)
 8009b2e:	60bb      	str	r3, [r7, #8]
        float scaled = voltage * (255.0f / 15.7f);
 8009b30:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b34:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8009b84 <_ZN7DRV821415setVoltageSpeedEf+0xe0>
 8009b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b3c:	edc7 7a07 	vstr	s15, [r7, #28]
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
 8009b40:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009b48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b50:	edc7 7a01 	vstr	s15, [r7, #4]
 8009b54:	793b      	ldrb	r3, [r7, #4]
 8009b56:	76fb      	strb	r3, [r7, #27]
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	7efa      	ldrb	r2, [r7, #27]
 8009b5e:	210f      	movs	r1, #15
 8009b60:	4618      	mov	r0, r3
 8009b62:	f000 fe31 	bl	800a7c8 <_Z26drv8214_i2c_write_registerhhh>
}
 8009b66:	bf00      	nop
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	407ae148 	.word	0x407ae148
 8009b74:	407ae148 	.word	0x407ae148
 8009b78:	42821a1f 	.word	0x42821a1f
 8009b7c:	417b3333 	.word	0x417b3333
 8009b80:	41300000 	.word	0x41300000
 8009b84:	4181efb2 	.word	0x4181efb2

08009b88 <_ZN7DRV821417enableRippleCountEb>:

void DRV8214::configureControl2(uint8_t control2) {
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL2, control2);
}

void DRV8214::enableRippleCount(bool enable) {
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_EN_RC, enable);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	7818      	ldrb	r0, [r3, #0]
 8009b98:	78fb      	ldrb	r3, [r7, #3]
 8009b9a:	2280      	movs	r2, #128	@ 0x80
 8009b9c:	2111      	movs	r1, #17
 8009b9e:	f000 fe7d 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009ba2:	bf00      	nop
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <_ZN7DRV821421enableErrorCorrectionEb>:

void DRV8214::enableErrorCorrection(bool enable) {
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_DIS_EC, !enable);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	7818      	ldrb	r0, [r3, #0]
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	f083 0301 	eor.w	r3, r3, #1
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2240      	movs	r2, #64	@ 0x40
 8009bc4:	2111      	movs	r1, #17
 8009bc6:	f000 fe69 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <_ZN7DRV821423setRippleCountThresholdEt>:

void DRV8214::configureRippleCount0(uint8_t ripple0) {
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL0, ripple0);
}

void DRV8214::setRippleCountThreshold(uint16_t threshold) {
 8009bd4:	b590      	push	{r4, r7, lr}
 8009bd6:	b0d1      	sub	sp, #324	@ 0x144
 8009bd8:	af02      	add	r7, sp, #8
 8009bda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009bde:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009be2:	6018      	str	r0, [r3, #0]
 8009be4:	460a      	mov	r2, r1
 8009be6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009bea:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009bee:	801a      	strh	r2, [r3, #0]
    // Define max feasible threshold based on 10-bit RC_THR and max scaling factor (64)
    const uint16_t MAX_THRESHOLD = 65535; // 1024 * 64 = 65536
 8009bf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009bf4:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    struct ScaleOption {
        uint16_t scale;
        uint8_t bits;
    };

    ScaleOption scaleOptions[] = {
 8009bf8:	4b5c      	ldr	r3, [pc, #368]	@ (8009d6c <_ZN7DRV821423setRippleCountThresholdEt+0x198>)
 8009bfa:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 8009bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009c00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {16, 0b10},
        {64, 0b11}
    };
    
    // Find the optimal scaling factor and 10-bit value
    uint16_t rc_thr = threshold;
 8009c04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009c08:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    uint8_t rc_thr_scale_bits = 0b00;
 8009c12:	2300      	movs	r3, #0
 8009c14:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135

    for (const auto &option : scaleOptions) {
 8009c18:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8009c1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8009c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c24:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c2c:	3310      	adds	r3, #16
 8009c2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8009c32:	e029      	b.n	8009c88 <_ZN7DRV821423setRippleCountThresholdEt+0xb4>
 8009c34:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009c38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        if (threshold >= option.scale) {
 8009c3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009c46:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009c4a:	8812      	ldrh	r2, [r2, #0]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d316      	bcc.n	8009c7e <_ZN7DRV821423setRippleCountThresholdEt+0xaa>
            rc_thr = threshold / option.scale;
 8009c50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009c5a:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009c5e:	8812      	ldrh	r2, [r2, #0]
 8009c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c64:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
            if (rc_thr < 1024) { // Ensure it fits in 10 bits
 8009c68:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c70:	d205      	bcs.n	8009c7e <_ZN7DRV821423setRippleCountThresholdEt+0xaa>
                rc_thr_scale_bits = option.bits;
 8009c72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009c76:	789b      	ldrb	r3, [r3, #2]
 8009c78:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
                break;
 8009c7c:	e00a      	b.n	8009c94 <_ZN7DRV821423setRippleCountThresholdEt+0xc0>
    for (const auto &option : scaleOptions) {
 8009c7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009c82:	3304      	adds	r3, #4
 8009c84:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009c88:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009c8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d1cf      	bne.n	8009c34 <_ZN7DRV821423setRippleCountThresholdEt+0x60>
            }
        }
    }
    if (config.verbose) {
 8009c94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009c98:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d016      	beq.n	8009cd4 <_ZN7DRV821423setRippleCountThresholdEt+0x100>
        char buffer[256];  // Adjust the buffer size as needed
        snprintf(buffer, sizeof(buffer), "RC_THR: %d | RC_THR_SCALE: %d ", rc_thr, rc_thr_scale_bits);
 8009ca6:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8009caa:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8009cae:	f107 000c 	add.w	r0, r7, #12
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8009d70 <_ZN7DRV821423setRippleCountThresholdEt+0x19c>)
 8009cb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009cbc:	f009 f936 	bl	8012f2c <sniprintf>
        drvPrint(buffer);
 8009cc0:	f107 020c 	add.w	r2, r7, #12
 8009cc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009cc8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009ccc:	4611      	mov	r1, r2
 8009cce:	6818      	ldr	r0, [r3, #0]
 8009cd0:	f000 fcae 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    }
    config.ripple_threshold = rc_thr;
 8009cd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009cd8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8009ce2:	869a      	strh	r2, [r3, #52]	@ 0x34
    config.ripple_threshold_scale = rc_thr_scale_bits;
 8009ce4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009ce8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 8009cf2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    // Ensure rc_thr fits within 10 bits
    rc_thr = rc_thr & 0x3FF;
 8009cf6:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cfe:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    
    // Split into lower 8 bits and upper 2 bits
    uint8_t rc_thr_low  = rc_thr & 0xFF;         // bits 7..0
 8009d02:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009d06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    uint8_t rc_thr_high = (rc_thr >> 8) & 0x03;  // bits 9..8
 8009d0a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009d0e:	0a1b      	lsrs	r3, r3, #8
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	f003 0303 	and.w	r3, r3, #3
 8009d18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL1, rc_thr_low);
 8009d1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d20:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8009d2c:	2112      	movs	r1, #18
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 fd4a 	bl	800a7c8 <_Z26drv8214_i2c_write_registerhhh>
    setRippleThresholdScale(rc_thr_scale_bits);
 8009d34:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 8009d38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d3c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009d40:	4611      	mov	r1, r2
 8009d42:	6818      	ldr	r0, [r3, #0]
 8009d44:	f000 f816 	bl	8009d74 <_ZN7DRV821423setRippleThresholdScaleEh>
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_RC_THR_HIGH, rc_thr_high);
 8009d48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d4c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	7818      	ldrb	r0, [r3, #0]
 8009d54:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009d58:	2203      	movs	r2, #3
 8009d5a:	2113      	movs	r1, #19
 8009d5c:	f000 fdd0 	bl	800a900 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009d60:	bf00      	nop
 8009d62:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd90      	pop	{r4, r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	080160bc 	.word	0x080160bc
 8009d70:	0801609c 	.word	0x0801609c

08009d74 <_ZN7DRV821423setRippleThresholdScaleEh>:

void DRV8214::setRippleThresholdScale(uint8_t scale) {
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70fb      	strb	r3, [r7, #3]
    scale = scale & 0x03;
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	f003 0303 	and.w	r3, r3, #3
 8009d86:	70fb      	strb	r3, [r7, #3]
    scale = scale << 2; //make sure the 2 bits of scale are placed on bit 2 and 3
 8009d88:	78fb      	ldrb	r3, [r7, #3]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_RC_THR_SCALE, scale);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	7818      	ldrb	r0, [r3, #0]
 8009d92:	78fb      	ldrb	r3, [r7, #3]
 8009d94:	220c      	movs	r2, #12
 8009d96:	2113      	movs	r1, #19
 8009d98:	f000 fdb2 	bl	800a900 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <_ZN7DRV821411setKMCScaleEh>:

void DRV8214::setKMCScale(uint8_t scale) {
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
    scale = scale << 4; //make sure the 2 bits of scale are placed on bit 4 and 5
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	011b      	lsls	r3, r3, #4
 8009db4:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_KMC_SCALE, scale);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	7818      	ldrb	r0, [r3, #0]
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	2230      	movs	r2, #48	@ 0x30
 8009dbe:	2113      	movs	r1, #19
 8009dc0:	f000 fd9e 	bl	800a900 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009dc4:	bf00      	nop
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <_ZN7DRV821425setMotorInverseResistanceEh>:

void DRV8214::setMotorInverseResistance(uint8_t resistance) {
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL3, resistance);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	78fa      	ldrb	r2, [r7, #3]
 8009dde:	2114      	movs	r1, #20
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 fcf1 	bl	800a7c8 <_Z26drv8214_i2c_write_registerhhh>
}
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <_ZN7DRV821430setMotorInverseResistanceScaleEh>:

void DRV8214::setMotorInverseResistanceScale(uint8_t scale) {
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	460b      	mov	r3, r1
 8009df8:	70fb      	strb	r3, [r7, #3]
    scale = scale << 6; //make sure the 2 bits of scale are placed on bit 6 and 7
 8009dfa:	78fb      	ldrb	r3, [r7, #3]
 8009dfc:	019b      	lsls	r3, r3, #6
 8009dfe:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_INV_R_SCALE, scale);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	7818      	ldrb	r0, [r3, #0]
 8009e04:	78fb      	ldrb	r3, [r7, #3]
 8009e06:	22c0      	movs	r2, #192	@ 0xc0
 8009e08:	2113      	movs	r1, #19
 8009e0a:	f000 fd79 	bl	800a900 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009e0e:	bf00      	nop
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
	...

08009e18 <_ZN7DRV821430setResistanceRelatedParametersEv>:

void DRV8214::setResistanceRelatedParameters() {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08a      	sub	sp, #40	@ 0x28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
    // Possible values of INV_R_SCALE and corresponding register bit settings
    const uint16_t scaleValues[4] = {2, 64, 1024, 8192};
 8009e20:	4a39      	ldr	r2, [pc, #228]	@ (8009f08 <_ZN7DRV821430setResistanceRelatedParametersEv+0xf0>)
 8009e22:	f107 0310 	add.w	r3, r7, #16
 8009e26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e2a:	e883 0003 	stmia.w	r3, {r0, r1}
    const uint8_t scaleBits[4] = {0b00, 0b01, 0b10, 0b11};
 8009e2e:	4b37      	ldr	r3, [pc, #220]	@ (8009f0c <_ZN7DRV821430setResistanceRelatedParametersEv+0xf4>)
 8009e30:	60fb      	str	r3, [r7, #12]

    // Default values (minimum valid values)
    uint8_t bestScaleBits = 0b00;  // Default to scale 2
 8009e32:	2300      	movs	r3, #0
 8009e34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t bestInvR = 1;          // Minimum valid INV_R
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    // Iterate from largest scale to smallest for best resolution
    for (int i = 3; i >= 0; --i)
 8009e3e:	2303      	movs	r3, #3
 8009e40:	623b      	str	r3, [r7, #32]
 8009e42:	e03f      	b.n	8009ec4 <_ZN7DRV821430setResistanceRelatedParametersEv+0xac>
    {
        float candidate = scaleValues[i] / motor_internal_resistance;
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	3328      	adds	r3, #40	@ 0x28
 8009e4a:	443b      	add	r3, r7
 8009e4c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8009e50:	461a      	mov	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	799b      	ldrb	r3, [r3, #6]
 8009e56:	fb92 f3f3 	sdiv	r3, r2, r3
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e62:	edc7 7a06 	vstr	s15, [r7, #24]
        float rounded = roundf(candidate);
 8009e66:	ed97 0a06 	vldr	s0, [r7, #24]
 8009e6a:	f008 fbe5 	bl	8012638 <roundf>
 8009e6e:	ed87 0a07 	vstr	s0, [r7, #28]

        // Ensure the value is at least 1
        if (rounded < 1.0f) {
 8009e72:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e82:	d502      	bpl.n	8009e8a <_ZN7DRV821430setResistanceRelatedParametersEv+0x72>
            rounded = 1.0f;
 8009e84:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009e88:	61fb      	str	r3, [r7, #28]
        }

        // If within valid range, select this scale and break
        if (rounded <= 255.0f)
 8009e8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e8e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8009f10 <_ZN7DRV821430setResistanceRelatedParametersEv+0xf8>
 8009e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9a:	d810      	bhi.n	8009ebe <_ZN7DRV821430setResistanceRelatedParametersEv+0xa6>
        {
            bestScaleBits = scaleBits[i];
 8009e9c:	f107 020c 	add.w	r2, r7, #12
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            bestInvR = static_cast<uint8_t>(rounded);
 8009eaa:	edd7 7a07 	vldr	s15, [r7, #28]
 8009eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eb2:	edc7 7a00 	vstr	s15, [r7]
 8009eb6:	783b      	ldrb	r3, [r7, #0]
 8009eb8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            break;
 8009ebc:	e005      	b.n	8009eca <_ZN7DRV821430setResistanceRelatedParametersEv+0xb2>
    for (int i = 3; i >= 0; --i)
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	623b      	str	r3, [r7, #32]
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	dabc      	bge.n	8009e44 <_ZN7DRV821430setResistanceRelatedParametersEv+0x2c>
        }
    }
    config.inv_r = bestInvR;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009ed0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    config.inv_r_scale = scaleValues[bestScaleBits];
 8009ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	3328      	adds	r3, #40	@ 0x28
 8009edc:	443b      	add	r3, r7
 8009ede:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    // Set the selected INV_R and INV_R_SCALE
    setMotorInverseResistanceScale(bestScaleBits);
 8009ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff ff7e 	bl	8009dee <_ZN7DRV821430setMotorInverseResistanceScaleEh>
    setMotorInverseResistance(bestInvR);
 8009ef2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff ff67 	bl	8009dcc <_ZN7DRV821425setMotorInverseResistanceEh>
}
 8009efe:	bf00      	nop
 8009f00:	3728      	adds	r7, #40	@ 0x28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	080160cc 	.word	0x080160cc
 8009f0c:	03020100 	.word	0x03020100
 8009f10:	437f0000 	.word	0x437f0000

08009f14 <_ZN7DRV82146setKMCEh>:

void DRV8214::setKMC(uint8_t factor) {
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL4, factor);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	78fa      	ldrb	r2, [r7, #3]
 8009f26:	2115      	movs	r1, #21
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 fc4d 	bl	800a7c8 <_Z26drv8214_i2c_write_registerhhh>
}
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <_ZN7DRV821414setControlModeE11ControlModeb>:
void DRV8214::configureRippleCount8(uint8_t ripple8) {
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL8, ripple8);
}

// --- Motor Control Functions ---
void DRV8214::setControlMode(ControlMode mode, bool I2CControl) {
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	70fb      	strb	r3, [r7, #3]
 8009f42:	4613      	mov	r3, r2
 8009f44:	70bb      	strb	r3, [r7, #2]
    config.control_mode = mode;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	78fa      	ldrb	r2, [r7, #3]
 8009f4a:	735a      	strb	r2, [r3, #13]
    setI2CControl(I2CControl);
 8009f4c:	78bb      	ldrb	r3, [r7, #2]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7ff fad2 	bl	80094fa <_ZN7DRV821413setI2CControlEb>
    switch (mode) {
 8009f56:	78fb      	ldrb	r3, [r7, #3]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <_ZN7DRV821414setControlModeE11ControlModeb+0x2c>
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d004      	beq.n	8009f6a <_ZN7DRV821414setControlModeE11ControlModeb+0x34>
            break;
        case PH_EN:
            enablePHENControl();
            break;
    }
}
 8009f60:	e007      	b.n	8009f72 <_ZN7DRV821414setControlModeE11ControlModeb+0x3c>
            enablePWMControl();
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7ff fadd 	bl	8009522 <_ZN7DRV821416enablePWMControlEv>
            break;
 8009f68:	e003      	b.n	8009f72 <_ZN7DRV821414setControlModeE11ControlModeb+0x3c>
            enablePHENControl();
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7ff fae8 	bl	8009540 <_ZN7DRV821417enablePHENControlEv>
            break;
 8009f70:	bf00      	nop
}
 8009f72:	bf00      	nop
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <_ZN7DRV821417setRegulationModeE14RegulationMode>:

void DRV8214::setRegulationMode(RegulationMode regulation) {
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
    uint8_t reg_ctrl = 0;  // Default value
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73fb      	strb	r3, [r7, #15]
    switch (regulation) {
 8009f8c:	78fb      	ldrb	r3, [r7, #3]
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d81a      	bhi.n	8009fc8 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
 8009f92:	a201      	add	r2, pc, #4	@ (adr r2, 8009f98 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x1c>)
 8009f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f98:	08009fa9 	.word	0x08009fa9
 8009f9c:	08009faf 	.word	0x08009faf
 8009fa0:	08009fb5 	.word	0x08009fb5
 8009fa4:	08009fc3 	.word	0x08009fc3
        case CURRENT_FIXED:
            reg_ctrl = (0b00 << 3);  // Fixed Off-Time Current Regulation
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]
            break;
 8009fac:	e00c      	b.n	8009fc8 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case CURRENT_CYCLES:
            reg_ctrl = (0b01 << 3);  // Cycle-By-Cycle Current Regulation
 8009fae:	2308      	movs	r3, #8
 8009fb0:	73fb      	strb	r3, [r7, #15]
            break;
 8009fb2:	e009      	b.n	8009fc8 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case SPEED:
            reg_ctrl = (0b10 << 3);  // Speed Regulation
 8009fb4:	2310      	movs	r3, #16
 8009fb6:	73fb      	strb	r3, [r7, #15]
            enableRippleCount();
 8009fb8:	2101      	movs	r1, #1
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7ff fde4 	bl	8009b88 <_ZN7DRV821417enableRippleCountEb>
            break;
 8009fc0:	e002      	b.n	8009fc8 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case VOLTAGE:
            reg_ctrl = (0b11 << 3);  // Voltage Regulation
 8009fc2:	2318      	movs	r3, #24
 8009fc4:	73fb      	strb	r3, [r7, #15]
            break;
 8009fc6:	bf00      	nop
    }
    config.regulation_mode = regulation;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	78fa      	ldrb	r2, [r7, #3]
 8009fcc:	739a      	strb	r2, [r3, #14]
    drv8214_i2c_modify_register_bits(address, DRV8214_REG_CTRL0, REG_CTRL0_REG_CTRL, reg_ctrl);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	7818      	ldrb	r0, [r3, #0]
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	2218      	movs	r2, #24
 8009fd6:	210e      	movs	r1, #14
 8009fd8:	f000 fc92 	bl	800a900 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009fdc:	bf00      	nop
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <_ZN7DRV821411turnForwardEtff>:

void DRV8214::turnForward(uint16_t speed, float voltage, float requested_current) {
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	460b      	mov	r3, r1
 8009fee:	ed87 0a01 	vstr	s0, [r7, #4]
 8009ff2:	edc7 0a00 	vstr	s1, [r7]
 8009ff6:	817b      	strh	r3, [r7, #10]
    disableHbridge();
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7ff f979 	bl	80092f0 <_ZN7DRV821414disableHbridgeEv>
    switch (config.regulation_mode) {
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	7b9b      	ldrb	r3, [r3, #14]
 800a002:	2b03      	cmp	r3, #3
 800a004:	d822      	bhi.n	800a04c <_ZN7DRV821411turnForwardEtff+0x68>
 800a006:	a201      	add	r2, pc, #4	@ (adr r2, 800a00c <_ZN7DRV821411turnForwardEtff+0x28>)
 800a008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00c:	0800a01d 	.word	0x0800a01d
 800a010:	0800a029 	.word	0x0800a029
 800a014:	0800a035 	.word	0x0800a035
 800a018:	0800a041 	.word	0x0800a041
        case CURRENT_FIXED: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 800a01c:	ed97 0a00 	vldr	s0, [r7]
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f7ff fadf 	bl	80095e4 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 800a026:	e011      	b.n	800a04c <_ZN7DRV821411turnForwardEtff+0x68>
        case CURRENT_CYCLES: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 800a028:	ed97 0a00 	vldr	s0, [r7]
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f7ff fad9 	bl	80095e4 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 800a032:	e00b      	b.n	800a04c <_ZN7DRV821411turnForwardEtff+0x68>
        case SPEED: 
            setRippleSpeed(speed);
 800a034:	897b      	ldrh	r3, [r7, #10]
 800a036:	4619      	mov	r1, r3
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f7ff fc15 	bl	8009868 <_ZN7DRV821414setRippleSpeedEt>
            break;
 800a03e:	e005      	b.n	800a04c <_ZN7DRV821411turnForwardEtff+0x68>
        case VOLTAGE:
            setVoltageSpeed(voltage);
 800a040:	ed97 0a01 	vldr	s0, [r7, #4]
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f7ff fd2d 	bl	8009aa4 <_ZN7DRV821415setVoltageSpeedEf>
            break;
 800a04a:	bf00      	nop
    }
    
    if (config.control_mode == PWM) {
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	7b5b      	ldrb	r3, [r3, #13]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10e      	bne.n	800a072 <_ZN7DRV821411turnForwardEtff+0x8e>
        // Table 8-5 => Forward => Input1=1, Input2=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);  // Input1=1
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	7818      	ldrb	r0, [r3, #0]
 800a058:	2301      	movs	r3, #1
 800a05a:	2202      	movs	r2, #2
 800a05c:	210d      	movs	r1, #13
 800a05e:	f000 fc1d 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false); // Input2=0
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	7818      	ldrb	r0, [r3, #0]
 800a066:	2300      	movs	r3, #0
 800a068:	2201      	movs	r2, #1
 800a06a:	210d      	movs	r1, #13
 800a06c:	f000 fc16 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
 800a070:	e00d      	b.n	800a08e <_ZN7DRV821411turnForwardEtff+0xaa>
    } 
    else { // PH/EN mode
        // Table 8-4 => Forward => EN=1, PH=1
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true); // EN=1
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	7818      	ldrb	r0, [r3, #0]
 800a076:	2301      	movs	r3, #1
 800a078:	2202      	movs	r2, #2
 800a07a:	210d      	movs	r1, #13
 800a07c:	f000 fc0e 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true); // PH=1
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	7818      	ldrb	r0, [r3, #0]
 800a084:	2301      	movs	r3, #1
 800a086:	2201      	movs	r2, #1
 800a088:	210d      	movs	r1, #13
 800a08a:	f000 fc07 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
    }
    enableHbridge();
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff f91f 	bl	80092d2 <_ZN7DRV821413enableHbridgeEv>
    if (config.verbose) { drvPrint("Turning Forward\n"); }
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <_ZN7DRV821411turnForwardEtff+0xc2>
 800a09e:	4904      	ldr	r1, [pc, #16]	@ (800a0b0 <_ZN7DRV821411turnForwardEtff+0xcc>)
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 fac5 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
}
 800a0a6:	bf00      	nop
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	080160d4 	.word	0x080160d4

0800a0b4 <_ZN7DRV821411turnReverseEtff>:

void DRV8214::turnReverse(uint16_t speed, float voltage, float requested_current) {
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	ed87 0a01 	vstr	s0, [r7, #4]
 800a0c2:	edc7 0a00 	vstr	s1, [r7]
 800a0c6:	817b      	strh	r3, [r7, #10]
    enableHbridge();
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f7ff f902 	bl	80092d2 <_ZN7DRV821413enableHbridgeEv>
    switch (config.regulation_mode) {
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	7b9b      	ldrb	r3, [r3, #14]
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d822      	bhi.n	800a11c <_ZN7DRV821411turnReverseEtff+0x68>
 800a0d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0dc <_ZN7DRV821411turnReverseEtff+0x28>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a0ed 	.word	0x0800a0ed
 800a0e0:	0800a0f9 	.word	0x0800a0f9
 800a0e4:	0800a105 	.word	0x0800a105
 800a0e8:	0800a111 	.word	0x0800a111
        case CURRENT_FIXED: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 800a0ec:	ed97 0a00 	vldr	s0, [r7]
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7ff fa77 	bl	80095e4 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 800a0f6:	e011      	b.n	800a11c <_ZN7DRV821411turnReverseEtff+0x68>
        case CURRENT_CYCLES: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 800a0f8:	ed97 0a00 	vldr	s0, [r7]
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7ff fa71 	bl	80095e4 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 800a102:	e00b      	b.n	800a11c <_ZN7DRV821411turnReverseEtff+0x68>
        case SPEED: 
            setRippleSpeed(speed);
 800a104:	897b      	ldrh	r3, [r7, #10]
 800a106:	4619      	mov	r1, r3
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f7ff fbad 	bl	8009868 <_ZN7DRV821414setRippleSpeedEt>
            break;
 800a10e:	e005      	b.n	800a11c <_ZN7DRV821411turnReverseEtff+0x68>
        case VOLTAGE:
            setVoltageSpeed(voltage);
 800a110:	ed97 0a01 	vldr	s0, [r7, #4]
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f7ff fcc5 	bl	8009aa4 <_ZN7DRV821415setVoltageSpeedEf>
            break;
 800a11a:	bf00      	nop
    }
    if (config.control_mode == PWM) {
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	7b5b      	ldrb	r3, [r3, #13]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10e      	bne.n	800a142 <_ZN7DRV821411turnReverseEtff+0x8e>
        // Table 8-5 => Reverse => Input1=0, Input2=1
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, false);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	7818      	ldrb	r0, [r3, #0]
 800a128:	2300      	movs	r3, #0
 800a12a:	2202      	movs	r2, #2
 800a12c:	210d      	movs	r1, #13
 800a12e:	f000 fbb5 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	7818      	ldrb	r0, [r3, #0]
 800a136:	2301      	movs	r3, #1
 800a138:	2201      	movs	r2, #1
 800a13a:	210d      	movs	r1, #13
 800a13c:	f000 fbae 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
 800a140:	e00d      	b.n	800a15e <_ZN7DRV821411turnReverseEtff+0xaa>
    } 
    else { // PH/EN mode
        // Table 8-4 => Reverse => EN=1, PH=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	7818      	ldrb	r0, [r3, #0]
 800a146:	2301      	movs	r3, #1
 800a148:	2202      	movs	r2, #2
 800a14a:	210d      	movs	r1, #13
 800a14c:	f000 fba6 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	7818      	ldrb	r0, [r3, #0]
 800a154:	2300      	movs	r3, #0
 800a156:	2201      	movs	r2, #1
 800a158:	210d      	movs	r1, #13
 800a15a:	f000 fb9f 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
    }
    if (config.verbose) { drvPrint("Turning Reverse\n"); }
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a164:	2b00      	cmp	r3, #0
 800a166:	d003      	beq.n	800a170 <_ZN7DRV821411turnReverseEtff+0xbc>
 800a168:	4903      	ldr	r1, [pc, #12]	@ (800a178 <_ZN7DRV821411turnReverseEtff+0xc4>)
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fa60 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
}
 800a170:	bf00      	nop
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	080160e8 	.word	0x080160e8

0800a17c <_ZN7DRV821410brakeMotorEb>:

void DRV8214::brakeMotor(bool initial_config) {
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	70fb      	strb	r3, [r7, #3]
    enableHbridge();
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f7ff f8a2 	bl	80092d2 <_ZN7DRV821413enableHbridgeEv>
    if (config.control_mode == PWM) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	7b5b      	ldrb	r3, [r3, #13]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10e      	bne.n	800a1b4 <_ZN7DRV821410brakeMotorEb+0x38>
        // Table 8-5 => Brake => Input1=1, Input2=1 => both outputs low
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	7818      	ldrb	r0, [r3, #0]
 800a19a:	2301      	movs	r3, #1
 800a19c:	2202      	movs	r2, #2
 800a19e:	210d      	movs	r1, #13
 800a1a0:	f000 fb7c 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	7818      	ldrb	r0, [r3, #0]
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	210d      	movs	r1, #13
 800a1ae:	f000 fb75 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
 800a1b2:	e00d      	b.n	800a1d0 <_ZN7DRV821410brakeMotorEb+0x54>
    }
    else { // PH/EN mode
        // Table 8-4 => Brake => EN=0 => outputs go low
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, false);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	7818      	ldrb	r0, [r3, #0]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	210d      	movs	r1, #13
 800a1be:	f000 fb6d 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
        // PH can be 0 or 1, the datasheet shows "X" => still brake with EN=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7818      	ldrb	r0, [r3, #0]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	210d      	movs	r1, #13
 800a1cc:	f000 fb66 	bl	800a89c <_Z27drv8214_i2c_modify_registerhhhh>
    }
    if (config.verbose & !initial_config) { drvPrint("Braking Motor\n"); }
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	78fb      	ldrb	r3, [r7, #3]
 800a1da:	f083 0301 	eor.w	r3, r3, #1
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <_ZN7DRV821410brakeMotorEb+0x72>
 800a1e6:	4904      	ldr	r1, [pc, #16]	@ (800a1f8 <_ZN7DRV821410brakeMotorEb+0x7c>)
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fa21 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
}
 800a1ee:	bf00      	nop
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	080160fc 	.word	0x080160fc

0800a1fc <_ZN7DRV821412turnXRipplesEtbbtff>:
        drvPrint("PH/EN mode does not support coast (High-Z) while awake.");
    }
    if (config.verbose) { drvPrint("Coasting Motor\n"); }
}

void DRV8214::turnXRipples(uint16_t ripples_target, bool stops, bool direction, uint16_t speed, float voltage, float requested_current) {
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	4608      	mov	r0, r1
 800a206:	4611      	mov	r1, r2
 800a208:	461a      	mov	r2, r3
 800a20a:	ed87 0a01 	vstr	s0, [r7, #4]
 800a20e:	edc7 0a00 	vstr	s1, [r7]
 800a212:	4603      	mov	r3, r0
 800a214:	817b      	strh	r3, [r7, #10]
 800a216:	460b      	mov	r3, r1
 800a218:	727b      	strb	r3, [r7, #9]
 800a21a:	4613      	mov	r3, r2
 800a21c:	723b      	strb	r3, [r7, #8]
    setRippleCountThreshold(ripples_target);
 800a21e:	897b      	ldrh	r3, [r7, #10]
 800a220:	4619      	mov	r1, r3
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f7ff fcd6 	bl	8009bd4 <_ZN7DRV821423setRippleCountThresholdEt>
    resetRippleCounter();
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7ff f8ac 	bl	8009386 <_ZN7DRV821418resetRippleCounterEv>
    if (stops != config.bridge_behavior_thr_reached) { setBridgeBehaviorThresholdReached(stops); } // Set bridge behavior if different
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	7ddb      	ldrb	r3, [r3, #23]
 800a232:	7a7a      	ldrb	r2, [r7, #9]
 800a234:	429a      	cmp	r2, r3
 800a236:	d004      	beq.n	800a242 <_ZN7DRV821412turnXRipplesEtbbtff+0x46>
 800a238:	7a7b      	ldrb	r3, [r7, #9]
 800a23a:	4619      	mov	r1, r3
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f7ff f9ac 	bl	800959a <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>
    if (direction) { turnForward(speed, voltage, requested_current); } else { turnReverse(speed, voltage, requested_current); }
 800a242:	7a3b      	ldrb	r3, [r7, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d009      	beq.n	800a25c <_ZN7DRV821412turnXRipplesEtbbtff+0x60>
 800a248:	8b3b      	ldrh	r3, [r7, #24]
 800a24a:	edd7 0a00 	vldr	s1, [r7]
 800a24e:	ed97 0a01 	vldr	s0, [r7, #4]
 800a252:	4619      	mov	r1, r3
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff fec5 	bl	8009fe4 <_ZN7DRV821411turnForwardEtff>
}
 800a25a:	e008      	b.n	800a26e <_ZN7DRV821412turnXRipplesEtbbtff+0x72>
    if (direction) { turnForward(speed, voltage, requested_current); } else { turnReverse(speed, voltage, requested_current); }
 800a25c:	8b3b      	ldrh	r3, [r7, #24]
 800a25e:	edd7 0a00 	vldr	s1, [r7]
 800a262:	ed97 0a01 	vldr	s0, [r7, #4]
 800a266:	4619      	mov	r1, r3
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7ff ff23 	bl	800a0b4 <_ZN7DRV821411turnReverseEtff>
}
 800a26e:	bf00      	nop
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <_ZN7DRV821416printMotorConfigEb>:

    uint8_t ripples_target = revolutions_target * ripples_per_revolution * motor_reduction_ratio;
    turnXRipples(ripples_target, stops, direction, speed, voltage, requested_current);
}

void DRV8214::printMotorConfig(bool initial_config) {
 800a278:	b590      	push	{r4, r7, lr}
 800a27a:	b0c7      	sub	sp, #284	@ 0x11c
 800a27c:	af04      	add	r7, sp, #16
 800a27e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a286:	6018      	str	r0, [r3, #0]
 800a288:	460a      	mov	r2, r1
 800a28a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a28e:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800a292:	701a      	strb	r2, [r3, #0]
    char buffer[256];  // Adjust the buffer size as needed
    
    if (initial_config) {
 800a294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a298:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d017      	beq.n	800a2d2 <_ZN7DRV821416printMotorConfigEb+0x5a>
        // Using snprintf to safely format the string
        snprintf(buffer, sizeof(buffer), "----- Finished initialized driver %d -----\n", driver_ID);
 800a2a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	785b      	ldrb	r3, [r3, #1]
 800a2ae:	f107 0008 	add.w	r0, r7, #8
 800a2b2:	4a94      	ldr	r2, [pc, #592]	@ (800a504 <_ZN7DRV821416printMotorConfigEb+0x28c>)
 800a2b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a2b8:	f008 fe38 	bl	8012f2c <sniprintf>
        drvPrint(buffer);
 800a2bc:	f107 0208 	add.w	r2, r7, #8
 800a2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	6818      	ldr	r0, [r3, #0]
 800a2cc:	f000 f9b0 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
 800a2d0:	e016      	b.n	800a300 <_ZN7DRV821416printMotorConfigEb+0x88>
    } else {
        snprintf(buffer, sizeof(buffer), "DRV8214 Driver %d", driver_ID);
 800a2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	785b      	ldrb	r3, [r3, #1]
 800a2de:	f107 0008 	add.w	r0, r7, #8
 800a2e2:	4a89      	ldr	r2, [pc, #548]	@ (800a508 <_ZN7DRV821416printMotorConfigEb+0x290>)
 800a2e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a2e8:	f008 fe20 	bl	8012f2c <sniprintf>
        drvPrint(buffer);
 800a2ec:	f107 0208 	add.w	r2, r7, #8
 800a2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	6818      	ldr	r0, [r3, #0]
 800a2fc:	f000 f998 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    }
    snprintf(buffer, sizeof(buffer),
        "Address: 0x%02X | Sense Resistor: %d Ohms | Ripples per Rotor Revolution: %d | Ripples per Shaft Revolution: %d\n",
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 800a300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a304:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer),
 800a30c:	461c      	mov	r4, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 800a30e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	885b      	ldrh	r3, [r3, #2]
    snprintf(buffer, sizeof(buffer),
 800a31a:	461a      	mov	r2, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 800a31c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	889b      	ldrh	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer),
 800a328:	4619      	mov	r1, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 800a32a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a32e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	889b      	ldrh	r3, [r3, #4]
 800a336:	4618      	mov	r0, r3
 800a338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a33c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	79db      	ldrb	r3, [r3, #7]
    snprintf(buffer, sizeof(buffer),
 800a344:	fb00 f303 	mul.w	r3, r0, r3
 800a348:	f107 0008 	add.w	r0, r7, #8
 800a34c:	9302      	str	r3, [sp, #8]
 800a34e:	9101      	str	r1, [sp, #4]
 800a350:	9200      	str	r2, [sp, #0]
 800a352:	4623      	mov	r3, r4
 800a354:	4a6d      	ldr	r2, [pc, #436]	@ (800a50c <_ZN7DRV821416printMotorConfigEb+0x294>)
 800a356:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a35a:	f008 fde7 	bl	8012f2c <sniprintf>
    drvPrint(buffer);
 800a35e:	f107 0208 	add.w	r2, r7, #8
 800a362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a36a:	4611      	mov	r1, r2
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	f000 f95f 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
        config.voltage_range ? "Enabled" : "Disabled",
 800a372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a376:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	7bdb      	ldrb	r3, [r3, #15]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <_ZN7DRV821416printMotorConfigEb+0x10e>
 800a382:	4c63      	ldr	r4, [pc, #396]	@ (800a510 <_ZN7DRV821416printMotorConfigEb+0x298>)
 800a384:	e000      	b.n	800a388 <_ZN7DRV821416printMotorConfigEb+0x110>
 800a386:	4c63      	ldr	r4, [pc, #396]	@ (800a514 <_ZN7DRV821416printMotorConfigEb+0x29c>)
        config.stall_enabled ? "Enabled" : "Disabled",
 800a388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a38c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	7d1b      	ldrb	r3, [r3, #20]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <_ZN7DRV821416printMotorConfigEb+0x124>
 800a398:	4b5d      	ldr	r3, [pc, #372]	@ (800a510 <_ZN7DRV821416printMotorConfigEb+0x298>)
 800a39a:	e000      	b.n	800a39e <_ZN7DRV821416printMotorConfigEb+0x126>
 800a39c:	4b5d      	ldr	r3, [pc, #372]	@ (800a514 <_ZN7DRV821416printMotorConfigEb+0x29c>)
        config.I2CControlled ? "Yes" : "No",
 800a39e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800a3a2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800a3a6:	6812      	ldr	r2, [r2, #0]
 800a3a8:	7b12      	ldrb	r2, [r2, #12]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 800a3aa:	2a00      	cmp	r2, #0
 800a3ac:	d001      	beq.n	800a3b2 <_ZN7DRV821416printMotorConfigEb+0x13a>
 800a3ae:	4a5a      	ldr	r2, [pc, #360]	@ (800a518 <_ZN7DRV821416printMotorConfigEb+0x2a0>)
 800a3b0:	e000      	b.n	800a3b4 <_ZN7DRV821416printMotorConfigEb+0x13c>
 800a3b2:	4a5a      	ldr	r2, [pc, #360]	@ (800a51c <_ZN7DRV821416printMotorConfigEb+0x2a4>)
        (config.control_mode == PWM) ? "PWM" : "PH_EN");
 800a3b4:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800a3b8:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 800a3bc:	6809      	ldr	r1, [r1, #0]
 800a3be:	7b49      	ldrb	r1, [r1, #13]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 800a3c0:	2900      	cmp	r1, #0
 800a3c2:	d101      	bne.n	800a3c8 <_ZN7DRV821416printMotorConfigEb+0x150>
 800a3c4:	4956      	ldr	r1, [pc, #344]	@ (800a520 <_ZN7DRV821416printMotorConfigEb+0x2a8>)
 800a3c6:	e000      	b.n	800a3ca <_ZN7DRV821416printMotorConfigEb+0x152>
 800a3c8:	4956      	ldr	r1, [pc, #344]	@ (800a524 <_ZN7DRV821416printMotorConfigEb+0x2ac>)
 800a3ca:	f107 0008 	add.w	r0, r7, #8
 800a3ce:	9102      	str	r1, [sp, #8]
 800a3d0:	9201      	str	r2, [sp, #4]
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	4623      	mov	r3, r4
 800a3d6:	4a54      	ldr	r2, [pc, #336]	@ (800a528 <_ZN7DRV821416printMotorConfigEb+0x2b0>)
 800a3d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a3dc:	f008 fda6 	bl	8012f2c <sniprintf>
    drvPrint(buffer);
 800a3e0:	f107 0208 	add.w	r2, r7, #8
 800a3e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	6818      	ldr	r0, [r3, #0]
 800a3f0:	f000 f91e 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    
    // Regulation mode details
    drvPrint(" | Regulation: ");
 800a3f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3fc:	494b      	ldr	r1, [pc, #300]	@ (800a52c <_ZN7DRV821416printMotorConfigEb+0x2b4>)
 800a3fe:	6818      	ldr	r0, [r3, #0]
 800a400:	f000 f916 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    switch (config.regulation_mode) {
 800a404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a408:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	7b9b      	ldrb	r3, [r3, #14]
 800a410:	2b03      	cmp	r3, #3
 800a412:	d82f      	bhi.n	800a474 <_ZN7DRV821416printMotorConfigEb+0x1fc>
 800a414:	a201      	add	r2, pc, #4	@ (adr r2, 800a41c <_ZN7DRV821416printMotorConfigEb+0x1a4>)
 800a416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41a:	bf00      	nop
 800a41c:	0800a42d 	.word	0x0800a42d
 800a420:	0800a43f 	.word	0x0800a43f
 800a424:	0800a451 	.word	0x0800a451
 800a428:	0800a463 	.word	0x0800a463
        case CURRENT_FIXED:   drvPrint("CURRENT_FIXED\n"); break;
 800a42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a430:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a434:	493e      	ldr	r1, [pc, #248]	@ (800a530 <_ZN7DRV821416printMotorConfigEb+0x2b8>)
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	f000 f8fa 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
 800a43c:	e01a      	b.n	800a474 <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case CURRENT_CYCLES:  drvPrint("CURRENT_CYCLES\n"); break;
 800a43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a446:	493b      	ldr	r1, [pc, #236]	@ (800a534 <_ZN7DRV821416printMotorConfigEb+0x2bc>)
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	f000 f8f1 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
 800a44e:	e011      	b.n	800a474 <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case SPEED:           drvPrint("SPEED\n"); break;
 800a450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a458:	4937      	ldr	r1, [pc, #220]	@ (800a538 <_ZN7DRV821416printMotorConfigEb+0x2c0>)
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	f000 f8e8 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
 800a460:	e008      	b.n	800a474 <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case VOLTAGE:         drvPrint("VOLTAGE\n"); break;
 800a462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a46a:	4934      	ldr	r1, [pc, #208]	@ (800a53c <_ZN7DRV821416printMotorConfigEb+0x2c4>)
 800a46c:	6818      	ldr	r0, [r3, #0]
 800a46e:	f000 f8df 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
 800a472:	bf00      	nop
    }
    
    snprintf(buffer, sizeof(buffer),
        "Vref: %.3f | Current Reg. Mode: %d | VRange: %s \n",
            config.Vref, config.current_reg_mode,
 800a474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	691b      	ldr	r3, [r3, #16]
    snprintf(buffer, sizeof(buffer),
 800a480:	4618      	mov	r0, r3
 800a482:	f7f6 f839 	bl	80004f8 <__aeabi_f2d>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
            config.Vref, config.current_reg_mode,
 800a48a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800a48e:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 800a492:	6809      	ldr	r1, [r1, #0]
 800a494:	7e09      	ldrb	r1, [r1, #24]
    snprintf(buffer, sizeof(buffer),
 800a496:	460c      	mov	r4, r1
            config.voltage_range ? "0V-3.92V" : "0V-15.7V");
 800a498:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800a49c:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 800a4a0:	6809      	ldr	r1, [r1, #0]
 800a4a2:	7bc9      	ldrb	r1, [r1, #15]
    snprintf(buffer, sizeof(buffer),
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	d001      	beq.n	800a4ac <_ZN7DRV821416printMotorConfigEb+0x234>
 800a4a8:	4925      	ldr	r1, [pc, #148]	@ (800a540 <_ZN7DRV821416printMotorConfigEb+0x2c8>)
 800a4aa:	e000      	b.n	800a4ae <_ZN7DRV821416printMotorConfigEb+0x236>
 800a4ac:	4925      	ldr	r1, [pc, #148]	@ (800a544 <_ZN7DRV821416printMotorConfigEb+0x2cc>)
 800a4ae:	f107 0008 	add.w	r0, r7, #8
 800a4b2:	9103      	str	r1, [sp, #12]
 800a4b4:	9402      	str	r4, [sp, #8]
 800a4b6:	e9cd 2300 	strd	r2, r3, [sp]
 800a4ba:	4a23      	ldr	r2, [pc, #140]	@ (800a548 <_ZN7DRV821416printMotorConfigEb+0x2d0>)
 800a4bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a4c0:	f008 fd34 	bl	8012f2c <sniprintf>
    drvPrint(buffer);
 800a4c4:	f107 0208 	add.w	r2, r7, #8
 800a4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	f000 f8ac 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "Stall Behavior: %s | Bridge Behavior Thr. reached: %s\n",
        config.stall_behavior ? "Drive current" : "Disable outputs",
 800a4d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	7d9b      	ldrb	r3, [r3, #22]
    snprintf(buffer, sizeof(buffer),
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <_ZN7DRV821416printMotorConfigEb+0x274>
 800a4e8:	4a18      	ldr	r2, [pc, #96]	@ (800a54c <_ZN7DRV821416printMotorConfigEb+0x2d4>)
 800a4ea:	e000      	b.n	800a4ee <_ZN7DRV821416printMotorConfigEb+0x276>
 800a4ec:	4a18      	ldr	r2, [pc, #96]	@ (800a550 <_ZN7DRV821416printMotorConfigEb+0x2d8>)
        config.bridge_behavior_thr_reached ? "H-bridge disabled" : "H-bridge stays enabled");
 800a4ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	7ddb      	ldrb	r3, [r3, #23]
    snprintf(buffer, sizeof(buffer),
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d02c      	beq.n	800a558 <_ZN7DRV821416printMotorConfigEb+0x2e0>
 800a4fe:	4b15      	ldr	r3, [pc, #84]	@ (800a554 <_ZN7DRV821416printMotorConfigEb+0x2dc>)
 800a500:	e02b      	b.n	800a55a <_ZN7DRV821416printMotorConfigEb+0x2e2>
 800a502:	bf00      	nop
 800a504:	08016154 	.word	0x08016154
 800a508:	08016180 	.word	0x08016180
 800a50c:	08016194 	.word	0x08016194
 800a510:	08016208 	.word	0x08016208
 800a514:	08016210 	.word	0x08016210
 800a518:	0801621c 	.word	0x0801621c
 800a51c:	08016220 	.word	0x08016220
 800a520:	08016224 	.word	0x08016224
 800a524:	08016228 	.word	0x08016228
 800a528:	08016230 	.word	0x08016230
 800a52c:	0801627c 	.word	0x0801627c
 800a530:	0801628c 	.word	0x0801628c
 800a534:	0801629c 	.word	0x0801629c
 800a538:	080162ac 	.word	0x080162ac
 800a53c:	080162b4 	.word	0x080162b4
 800a540:	080162c0 	.word	0x080162c0
 800a544:	080162cc 	.word	0x080162cc
 800a548:	080162d8 	.word	0x080162d8
 800a54c:	0801630c 	.word	0x0801630c
 800a550:	0801631c 	.word	0x0801631c
 800a554:	0801632c 	.word	0x0801632c
 800a558:	4b31      	ldr	r3, [pc, #196]	@ (800a620 <_ZN7DRV821416printMotorConfigEb+0x3a8>)
 800a55a:	f107 0008 	add.w	r0, r7, #8
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	4613      	mov	r3, r2
 800a562:	4a30      	ldr	r2, [pc, #192]	@ (800a624 <_ZN7DRV821416printMotorConfigEb+0x3ac>)
 800a564:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a568:	f008 fce0 	bl	8012f2c <sniprintf>
    drvPrint(buffer);
 800a56c:	f107 0208 	add.w	r2, r7, #8
 800a570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a578:	4611      	mov	r1, r2
 800a57a:	6818      	ldr	r0, [r3, #0]
 800a57c:	f000 f858 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "Inrush Duration: %d ms | INV_R: %d | INV_R_SCALE: %d\n",
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 800a580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a584:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
    snprintf(buffer, sizeof(buffer),
 800a58c:	4619      	mov	r1, r3
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 800a58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a592:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    snprintf(buffer, sizeof(buffer),
 800a59c:	461a      	mov	r2, r3
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 800a59e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
    snprintf(buffer, sizeof(buffer),
 800a5aa:	f107 0008 	add.w	r0, r7, #8
 800a5ae:	9301      	str	r3, [sp, #4]
 800a5b0:	9200      	str	r2, [sp, #0]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4a1c      	ldr	r2, [pc, #112]	@ (800a628 <_ZN7DRV821416printMotorConfigEb+0x3b0>)
 800a5b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a5ba:	f008 fcb7 	bl	8012f2c <sniprintf>
    drvPrint(buffer);
 800a5be:	f107 0208 	add.w	r2, r7, #8
 800a5c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	f000 f82f 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "KMC: %d | KMCScale: %d\n",
        config.kmc, config.kmc_scale);
 800a5d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
    snprintf(buffer, sizeof(buffer),
 800a5e0:	461a      	mov	r2, r3
        config.kmc, config.kmc_scale);
 800a5e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
    snprintf(buffer, sizeof(buffer),
 800a5f0:	f107 0008 	add.w	r0, r7, #8
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	4a0c      	ldr	r2, [pc, #48]	@ (800a62c <_ZN7DRV821416printMotorConfigEb+0x3b4>)
 800a5fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a5fe:	f008 fc95 	bl	8012f2c <sniprintf>
    drvPrint(buffer);
 800a602:	f107 0208 	add.w	r2, r7, #8
 800a606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a60a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a60e:	4611      	mov	r1, r2
 800a610:	6818      	ldr	r0, [r3, #0]
 800a612:	f000 f80d 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
}
 800a616:	bf00      	nop
 800a618:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd90      	pop	{r4, r7, pc}
 800a620:	08016340 	.word	0x08016340
 800a624:	08016358 	.word	0x08016358
 800a628:	08016390 	.word	0x08016390
 800a62c:	080163c8 	.word	0x080163c8

0800a630 <_ZN7DRV82148drvPrintEPKc>:

void DRV8214::drvPrint(const char* msg) {
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
    #elif defined(DRV8214_PLATFORM_STM32)
        // Option 1: Using HAL_UART_Transmit directly
        // HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    
        // Option 2: If you have retargeted printf to UART, you could simply use:
        printf("%s", msg);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	4803      	ldr	r0, [pc, #12]	@ (800a64c <_ZN7DRV82148drvPrintEPKc+0x1c>)
 800a63e:	f008 fd6d 	bl	801311c <iprintf>
    #endif
}
 800a642:	bf00      	nop
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	080163e0 	.word	0x080163e0

0800a650 <_ZN7DRV821416printFaultStatusEv>:

void DRV8214::printFaultStatus() {
 800a650:	b580      	push	{r7, lr}
 800a652:	b0c4      	sub	sp, #272	@ 0x110
 800a654:	af00      	add	r7, sp, #0
 800a656:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a65a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a65e:	6018      	str	r0, [r3, #0]
    char buffer[256];  // Buffer for formatted output
    uint8_t faultReg = drv8214_i2c_read_register(address, DRV8214_FAULT);
 800a660:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a664:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2100      	movs	r1, #0
 800a66e:	4618      	mov	r0, r3
 800a670:	f000 f8d0 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 800a674:	4603      	mov	r3, r0
 800a676:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

    snprintf(buffer, sizeof(buffer), "DRV8214 Driver %d - FAULT Register Status:\n", driver_ID);
 800a67a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a67e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	785b      	ldrb	r3, [r3, #1]
 800a686:	f107 000c 	add.w	r0, r7, #12
 800a68a:	4a3e      	ldr	r2, [pc, #248]	@ (800a784 <_ZN7DRV821416printFaultStatusEv+0x134>)
 800a68c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a690:	f008 fc4c 	bl	8012f2c <sniprintf>
    drvPrint(buffer);
 800a694:	f107 020c 	add.w	r2, r7, #12
 800a698:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a69c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	6818      	ldr	r0, [r3, #0]
 800a6a4:	f7ff ffc4 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>

    if (faultReg & (1 << 7)) {
 800a6a8:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	da08      	bge.n	800a6c2 <_ZN7DRV821416printFaultStatusEv+0x72>
        drvPrint(" - FAULT: General fault detected.\n");
 800a6b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6b8:	4933      	ldr	r1, [pc, #204]	@ (800a788 <_ZN7DRV821416printFaultStatusEv+0x138>)
 800a6ba:	6818      	ldr	r0, [r3, #0]
 800a6bc:	f7ff ffb8 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
 800a6c0:	e007      	b.n	800a6d2 <_ZN7DRV821416printFaultStatusEv+0x82>
    } else {
        drvPrint(" - FAULT: No faults detected.\n");
 800a6c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6ca:	4930      	ldr	r1, [pc, #192]	@ (800a78c <_ZN7DRV821416printFaultStatusEv+0x13c>)
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	f7ff ffaf 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 5)) {
 800a6d2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d007      	beq.n	800a6ee <_ZN7DRV821416printFaultStatusEv+0x9e>
        drvPrint(" - STALL: Motor stall detected.\n");
 800a6de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6e6:	492a      	ldr	r1, [pc, #168]	@ (800a790 <_ZN7DRV821416printFaultStatusEv+0x140>)
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	f7ff ffa1 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 4)) {
 800a6ee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a6f2:	f003 0310 	and.w	r3, r3, #16
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d007      	beq.n	800a70a <_ZN7DRV821416printFaultStatusEv+0xba>
        drvPrint(" - OCP: Overcurrent protection (OCP) event occurred.\n");
 800a6fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a702:	4924      	ldr	r1, [pc, #144]	@ (800a794 <_ZN7DRV821416printFaultStatusEv+0x144>)
 800a704:	6818      	ldr	r0, [r3, #0]
 800a706:	f7ff ff93 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 3)) {
 800a70a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a70e:	f003 0308 	and.w	r3, r3, #8
 800a712:	2b00      	cmp	r3, #0
 800a714:	d007      	beq.n	800a726 <_ZN7DRV821416printFaultStatusEv+0xd6>
        drvPrint(" - OVP: Overvoltage protection (OVP) event occurred.\n");
 800a716:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a71a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a71e:	491e      	ldr	r1, [pc, #120]	@ (800a798 <_ZN7DRV821416printFaultStatusEv+0x148>)
 800a720:	6818      	ldr	r0, [r3, #0]
 800a722:	f7ff ff85 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 2)) {
 800a726:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a72a:	f003 0304 	and.w	r3, r3, #4
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d007      	beq.n	800a742 <_ZN7DRV821416printFaultStatusEv+0xf2>
        drvPrint(" - TSD: Thermal shutdown (TSD) event occurred.\n");
 800a732:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a736:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a73a:	4918      	ldr	r1, [pc, #96]	@ (800a79c <_ZN7DRV821416printFaultStatusEv+0x14c>)
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	f7ff ff77 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 1)) {
 800a742:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d007      	beq.n	800a75e <_ZN7DRV821416printFaultStatusEv+0x10e>
        drvPrint(" - NPOR: Device is in power-on reset (NPOR).\n");
 800a74e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a752:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a756:	4912      	ldr	r1, [pc, #72]	@ (800a7a0 <_ZN7DRV821416printFaultStatusEv+0x150>)
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	f7ff ff69 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 0)) {
 800a75e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a762:	f003 0301 	and.w	r3, r3, #1
 800a766:	2b00      	cmp	r3, #0
 800a768:	d007      	beq.n	800a77a <_ZN7DRV821416printFaultStatusEv+0x12a>
        drvPrint(" - CNT_DONE: Ripple counting threshold exceeded.\n");
 800a76a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a76e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a772:	490c      	ldr	r1, [pc, #48]	@ (800a7a4 <_ZN7DRV821416printFaultStatusEv+0x154>)
 800a774:	6818      	ldr	r0, [r3, #0]
 800a776:	f7ff ff5b 	bl	800a630 <_ZN7DRV82148drvPrintEPKc>
    }
}
 800a77a:	bf00      	nop
 800a77c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	080163e4 	.word	0x080163e4
 800a788:	08016410 	.word	0x08016410
 800a78c:	08016434 	.word	0x08016434
 800a790:	08016454 	.word	0x08016454
 800a794:	08016478 	.word	0x08016478
 800a798:	080164b0 	.word	0x080164b0
 800a79c:	080164e8 	.word	0x080164e8
 800a7a0:	08016518 	.word	0x08016518
 800a7a4:	08016548 	.word	0x08016548

0800a7a8 <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef>:
#include "drv8214_platform_i2c.h"

#ifdef DRV8214_PLATFORM_STM32
    static I2C_HandleTypeDef* drv_i2c_handle = NULL; // Static pointer to the I2C handle

    void drv8214_i2c_set_handle(I2C_HandleTypeDef* hi2c) {
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
        drv_i2c_handle = hi2c;
 800a7b0:	4a04      	ldr	r2, [pc, #16]	@ (800a7c4 <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef+0x1c>)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6013      	str	r3, [r2, #0]
    }
 800a7b6:	bf00      	nop
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	200006e0 	.word	0x200006e0

0800a7c8 <_Z26drv8214_i2c_write_registerhhh>:
#endif

void drv8214_i2c_write_register(uint8_t device_address, uint8_t reg, uint8_t value) {
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af02      	add	r7, sp, #8
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	71fb      	strb	r3, [r7, #7]
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	71bb      	strb	r3, [r7, #6]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	717b      	strb	r3, [r7, #5]
    if (drv_i2c_handle == NULL) {
 800a7da:	4b0d      	ldr	r3, [pc, #52]	@ (800a810 <_Z26drv8214_i2c_write_registerhhh+0x48>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d012      	beq.n	800a808 <_Z26drv8214_i2c_write_registerhhh+0x40>
    Wire.beginTransmission(device_address);
    Wire.write(reg);
    Wire.write(value);
    Wire.endTransmission();
#elif defined(DRV8214_PLATFORM_STM32)
    uint8_t data[2] = { reg, value };
 800a7e2:	79bb      	ldrb	r3, [r7, #6]
 800a7e4:	733b      	strb	r3, [r7, #12]
 800a7e6:	797b      	ldrb	r3, [r7, #5]
 800a7e8:	737b      	strb	r3, [r7, #13]
    // STM32 HAL expects the 7-bit address to be shifted left by 1
    HAL_I2C_Master_Transmit(drv_i2c_handle, (uint16_t)(device_address << 1), data, 2, HAL_MAX_DELAY);
 800a7ea:	4b09      	ldr	r3, [pc, #36]	@ (800a810 <_Z26drv8214_i2c_write_registerhhh+0x48>)
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	b299      	uxth	r1, r3
 800a7f6:	f107 020c 	add.w	r2, r7, #12
 800a7fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	2302      	movs	r3, #2
 800a802:	f002 f93b 	bl	800ca7c <HAL_I2C_Master_Transmit>
 800a806:	e000      	b.n	800a80a <_Z26drv8214_i2c_write_registerhhh+0x42>
        return;
 800a808:	bf00      	nop
    // Add error handling for HAL_StatusTypeDef if needed
#endif
}
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	200006e0 	.word	0x200006e0

0800a814 <_Z25drv8214_i2c_read_registerhh>:

uint8_t drv8214_i2c_read_register(uint8_t device_address, uint8_t reg) {
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af02      	add	r7, sp, #8
 800a81a:	4603      	mov	r3, r0
 800a81c:	460a      	mov	r2, r1
 800a81e:	71fb      	strb	r3, [r7, #7]
 800a820:	4613      	mov	r3, r2
 800a822:	71bb      	strb	r3, [r7, #6]
    if (drv_i2c_handle == NULL) {
 800a824:	4b1c      	ldr	r3, [pc, #112]	@ (800a898 <_Z25drv8214_i2c_read_registerhh+0x84>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <_Z25drv8214_i2c_read_registerhh+0x1c>
         // Handle error: I2C handle not set
        return 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	e02f      	b.n	800a890 <_Z25drv8214_i2c_read_registerhh+0x7c>
    if (Wire.available()) {
        return Wire.read();
    }
    return 0; // Error or no data
#elif defined(DRV8214_PLATFORM_STM32)
    uint8_t data = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	73fb      	strb	r3, [r7, #15]
    // STM32 HAL I2C typically uses separate Transmit then Receive for this,
    // or HAL_I2C_Mem_Read for register-based reads.
    // Your Arduino code pattern translates better to separate Transmit/Receive.
    if (HAL_I2C_Master_Transmit(drv_i2c_handle, (uint16_t)(device_address << 1), &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 800a834:	4b18      	ldr	r3, [pc, #96]	@ (800a898 <_Z25drv8214_i2c_read_registerhh+0x84>)
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	79fb      	ldrb	r3, [r7, #7]
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	b299      	uxth	r1, r3
 800a840:	1dba      	adds	r2, r7, #6
 800a842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	2301      	movs	r3, #1
 800a84a:	f002 f917 	bl	800ca7c <HAL_I2C_Master_Transmit>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	bf0c      	ite	eq
 800a854:	2301      	moveq	r3, #1
 800a856:	2300      	movne	r3, #0
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d017      	beq.n	800a88e <_Z25drv8214_i2c_read_registerhh+0x7a>
        if (HAL_I2C_Master_Receive(drv_i2c_handle, (uint16_t)(device_address << 1), &data, 1, HAL_MAX_DELAY) == HAL_OK) {
 800a85e:	4b0e      	ldr	r3, [pc, #56]	@ (800a898 <_Z25drv8214_i2c_read_registerhh+0x84>)
 800a860:	6818      	ldr	r0, [r3, #0]
 800a862:	79fb      	ldrb	r3, [r7, #7]
 800a864:	b29b      	uxth	r3, r3
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	b299      	uxth	r1, r3
 800a86a:	f107 020f 	add.w	r2, r7, #15
 800a86e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	2301      	movs	r3, #1
 800a876:	f002 fa19 	bl	800ccac <HAL_I2C_Master_Receive>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	bf0c      	ite	eq
 800a880:	2301      	moveq	r3, #1
 800a882:	2300      	movne	r3, #0
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <_Z25drv8214_i2c_read_registerhh+0x7a>
            return data;
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
 800a88c:	e000      	b.n	800a890 <_Z25drv8214_i2c_read_registerhh+0x7c>
        }
    }
    // Consider using HAL_I2C_Mem_Read for more robustness:
    // HAL_I2C_Mem_Read(drv_i2c_handle, (uint16_t)(device_address << 1), reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
    return 0; // Error
 800a88e:	2300      	movs	r3, #0
#endif
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	200006e0 	.word	0x200006e0

0800a89c <_Z27drv8214_i2c_modify_registerhhhh>:

void drv8214_i2c_modify_register(uint8_t device_address, uint8_t reg, uint8_t mask, uint8_t enable_bits) {
 800a89c:	b590      	push	{r4, r7, lr}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	4623      	mov	r3, r4
 800a8ac:	71fb      	strb	r3, [r7, #7]
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	71bb      	strb	r3, [r7, #6]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	717b      	strb	r3, [r7, #5]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	713b      	strb	r3, [r7, #4]
    uint8_t current_value = drv8214_i2c_read_register(device_address, reg);
 800a8ba:	79ba      	ldrb	r2, [r7, #6]
 800a8bc:	79fb      	ldrb	r3, [r7, #7]
 800a8be:	4611      	mov	r1, r2
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7ff ffa7 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	73fb      	strb	r3, [r7, #15]
    if (enable_bits) {
 800a8ca:	793b      	ldrb	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d004      	beq.n	800a8da <_Z27drv8214_i2c_modify_registerhhhh+0x3e>
        current_value |= mask;  // Set bits
 800a8d0:	7bfa      	ldrb	r2, [r7, #15]
 800a8d2:	797b      	ldrb	r3, [r7, #5]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	73fb      	strb	r3, [r7, #15]
 800a8d8:	e008      	b.n	800a8ec <_Z27drv8214_i2c_modify_registerhhhh+0x50>
    } else {
        current_value &= ~mask; // Clear bits
 800a8da:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a8de:	43db      	mvns	r3, r3
 800a8e0:	b25a      	sxtb	r2, r3
 800a8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	b25b      	sxtb	r3, r3
 800a8ea:	73fb      	strb	r3, [r7, #15]
    }
    drv8214_i2c_write_register(device_address, reg, current_value);
 800a8ec:	7bfa      	ldrb	r2, [r7, #15]
 800a8ee:	79b9      	ldrb	r1, [r7, #6]
 800a8f0:	79fb      	ldrb	r3, [r7, #7]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff ff68 	bl	800a7c8 <_Z26drv8214_i2c_write_registerhhh>
}
 800a8f8:	bf00      	nop
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd90      	pop	{r4, r7, pc}

0800a900 <_Z32drv8214_i2c_modify_register_bitshhhh>:

void drv8214_i2c_modify_register_bits(uint8_t device_address, uint8_t reg, uint8_t mask, uint8_t new_value) {
 800a900:	b590      	push	{r4, r7, lr}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	4604      	mov	r4, r0
 800a908:	4608      	mov	r0, r1
 800a90a:	4611      	mov	r1, r2
 800a90c:	461a      	mov	r2, r3
 800a90e:	4623      	mov	r3, r4
 800a910:	71fb      	strb	r3, [r7, #7]
 800a912:	4603      	mov	r3, r0
 800a914:	71bb      	strb	r3, [r7, #6]
 800a916:	460b      	mov	r3, r1
 800a918:	717b      	strb	r3, [r7, #5]
 800a91a:	4613      	mov	r3, r2
 800a91c:	713b      	strb	r3, [r7, #4]
    uint8_t current_value = drv8214_i2c_read_register(device_address, reg);
 800a91e:	79ba      	ldrb	r2, [r7, #6]
 800a920:	79fb      	ldrb	r3, [r7, #7]
 800a922:	4611      	mov	r1, r2
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff ff75 	bl	800a814 <_Z25drv8214_i2c_read_registerhh>
 800a92a:	4603      	mov	r3, r0
 800a92c:	73fb      	strb	r3, [r7, #15]
    current_value = (current_value & ~mask) | (new_value & mask); // Apply new value only to masked bits
 800a92e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a932:	43db      	mvns	r3, r3
 800a934:	b25a      	sxtb	r2, r3
 800a936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a93a:	4013      	ands	r3, r2
 800a93c:	b25a      	sxtb	r2, r3
 800a93e:	7939      	ldrb	r1, [r7, #4]
 800a940:	797b      	ldrb	r3, [r7, #5]
 800a942:	400b      	ands	r3, r1
 800a944:	b2db      	uxtb	r3, r3
 800a946:	b25b      	sxtb	r3, r3
 800a948:	4313      	orrs	r3, r2
 800a94a:	b25b      	sxtb	r3, r3
 800a94c:	73fb      	strb	r3, [r7, #15]
    drv8214_i2c_write_register(device_address, reg, current_value);
 800a94e:	7bfa      	ldrb	r2, [r7, #15]
 800a950:	79b9      	ldrb	r1, [r7, #6]
 800a952:	79fb      	ldrb	r3, [r7, #7]
 800a954:	4618      	mov	r0, r3
 800a956:	f7ff ff37 	bl	800a7c8 <_Z26drv8214_i2c_write_registerhhh>
}
 800a95a:	bf00      	nop
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd90      	pop	{r4, r7, pc}
	...

0800a964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a96e:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a0 <HAL_Init+0x3c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a0b      	ldr	r2, [pc, #44]	@ (800a9a0 <HAL_Init+0x3c>)
 800a974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a978:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a97a:	2003      	movs	r0, #3
 800a97c:	f001 fb4c 	bl	800c018 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a980:	200f      	movs	r0, #15
 800a982:	f000 f80f 	bl	800a9a4 <HAL_InitTick>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	71fb      	strb	r3, [r7, #7]
 800a990:	e001      	b.n	800a996 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a992:	f7f8 fcd8 	bl	8003346 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a996:	79fb      	ldrb	r3, [r7, #7]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	58004000 	.word	0x58004000

0800a9a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800a9b0:	4b17      	ldr	r3, [pc, #92]	@ (800aa10 <HAL_InitTick+0x6c>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d024      	beq.n	800aa02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a9b8:	f004 fc60 	bl	800f27c <HAL_RCC_GetHCLKFreq>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	4b14      	ldr	r3, [pc, #80]	@ (800aa10 <HAL_InitTick+0x6c>)
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a9c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f001 fb54 	bl	800c07e <HAL_SYSTICK_Config>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10f      	bne.n	800a9fc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b0f      	cmp	r3, #15
 800a9e0:	d809      	bhi.n	800a9f6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9ea:	f001 fb20 	bl	800c02e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a9ee:	4a09      	ldr	r2, [pc, #36]	@ (800aa14 <HAL_InitTick+0x70>)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	e007      	b.n	800aa06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	73fb      	strb	r3, [r7, #15]
 800a9fa:	e004      	b.n	800aa06 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	73fb      	strb	r3, [r7, #15]
 800aa00:	e001      	b.n	800aa06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20000094 	.word	0x20000094
 800aa14:	20000090 	.word	0x20000090

0800aa18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800aa1c:	4b06      	ldr	r3, [pc, #24]	@ (800aa38 <HAL_IncTick+0x20>)
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	461a      	mov	r2, r3
 800aa22:	4b06      	ldr	r3, [pc, #24]	@ (800aa3c <HAL_IncTick+0x24>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4413      	add	r3, r2
 800aa28:	4a04      	ldr	r2, [pc, #16]	@ (800aa3c <HAL_IncTick+0x24>)
 800aa2a:	6013      	str	r3, [r2, #0]
}
 800aa2c:	bf00      	nop
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	20000094 	.word	0x20000094
 800aa3c:	200006e4 	.word	0x200006e4

0800aa40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aa40:	b480      	push	{r7}
 800aa42:	af00      	add	r7, sp, #0
  return uwTick;
 800aa44:	4b03      	ldr	r3, [pc, #12]	@ (800aa54 <HAL_GetTick+0x14>)
 800aa46:	681b      	ldr	r3, [r3, #0]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	200006e4 	.word	0x200006e4

0800aa58 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800aa5c:	4b03      	ldr	r3, [pc, #12]	@ (800aa6c <HAL_GetTickPrio+0x14>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	20000090 	.word	0x20000090

0800aa70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aa78:	f7ff ffe2 	bl	800aa40 <HAL_GetTick>
 800aa7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa88:	d005      	beq.n	800aa96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aa8a:	4b0a      	ldr	r3, [pc, #40]	@ (800aab4 <HAL_Delay+0x44>)
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4413      	add	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aa96:	bf00      	nop
 800aa98:	f7ff ffd2 	bl	800aa40 <HAL_GetTick>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d8f7      	bhi.n	800aa98 <HAL_Delay+0x28>
  {
  }
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20000094 	.word	0x20000094

0800aab8 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	431a      	orrs	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800aad2:	bf00      	nop
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800aade:	b480      	push	{r7}
 800aae0:	b083      	sub	sp, #12
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	431a      	orrs	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	609a      	str	r2, [r3, #8]
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3360      	adds	r3, #96	@ 0x60
 800ab32:	461a      	mov	r2, r3
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	4b08      	ldr	r3, [pc, #32]	@ (800ab64 <LL_ADC_SetOffset+0x44>)
 800ab42:	4013      	ands	r3, r2
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	430a      	orrs	r2, r1
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800ab58:	bf00      	nop
 800ab5a:	371c      	adds	r7, #28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	03fff000 	.word	0x03fff000

0800ab68 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	3360      	adds	r3, #96	@ 0x60
 800ab76:	461a      	mov	r2, r3
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	4413      	add	r3, r2
 800ab7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3360      	adds	r3, #96	@ 0x60
 800aba4:	461a      	mov	r2, r3
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	431a      	orrs	r2, r3
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800abbe:	bf00      	nop
 800abc0:	371c      	adds	r7, #28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800abca:	b480      	push	{r7}
 800abcc:	b083      	sub	sp, #12
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800abde:	2301      	movs	r3, #1
 800abe0:	e000      	b.n	800abe4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800abe2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3330      	adds	r3, #48	@ 0x30
 800ac00:	461a      	mov	r2, r3
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	0a1b      	lsrs	r3, r3, #8
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	f003 030c 	and.w	r3, r3, #12
 800ac0c:	4413      	add	r3, r2
 800ac0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f003 031f 	and.w	r3, r3, #31
 800ac1a:	211f      	movs	r1, #31
 800ac1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac20:	43db      	mvns	r3, r3
 800ac22:	401a      	ands	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	0e9b      	lsrs	r3, r3, #26
 800ac28:	f003 011f 	and.w	r1, r3, #31
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f003 031f 	and.w	r3, r3, #31
 800ac32:	fa01 f303 	lsl.w	r3, r1, r3
 800ac36:	431a      	orrs	r2, r3
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800ac3c:	bf00      	nop
 800ac3e:	371c      	adds	r7, #28
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b087      	sub	sp, #28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	3314      	adds	r3, #20
 800ac58:	461a      	mov	r2, r3
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	0e5b      	lsrs	r3, r3, #25
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	f003 0304 	and.w	r3, r3, #4
 800ac64:	4413      	add	r3, r2
 800ac66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	0d1b      	lsrs	r3, r3, #20
 800ac70:	f003 031f 	and.w	r3, r3, #31
 800ac74:	2107      	movs	r1, #7
 800ac76:	fa01 f303 	lsl.w	r3, r1, r3
 800ac7a:	43db      	mvns	r3, r3
 800ac7c:	401a      	ands	r2, r3
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	0d1b      	lsrs	r3, r3, #20
 800ac82:	f003 031f 	and.w	r3, r3, #31
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	fa01 f303 	lsl.w	r3, r1, r3
 800ac8c:	431a      	orrs	r2, r3
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800ac92:	bf00      	nop
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
	...

0800aca0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acb8:	43db      	mvns	r3, r3
 800acba:	401a      	ands	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f003 0318 	and.w	r3, r3, #24
 800acc2:	4908      	ldr	r1, [pc, #32]	@ (800ace4 <LL_ADC_SetChannelSingleDiff+0x44>)
 800acc4:	40d9      	lsrs	r1, r3
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	400b      	ands	r3, r1
 800acca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acce:	431a      	orrs	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800acd6:	bf00      	nop
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	0007ffff 	.word	0x0007ffff

0800ace8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800acf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	6093      	str	r3, [r2, #8]
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad20:	d101      	bne.n	800ad26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e000      	b.n	800ad28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800ad44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ad48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad70:	d101      	bne.n	800ad76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e000      	b.n	800ad78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ad94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ad98:	f043 0201 	orr.w	r2, r3, #1
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800adbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800adc0:	f043 0202 	orr.w	r2, r3, #2
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d101      	bne.n	800adec <LL_ADC_IsEnabled+0x18>
 800ade8:	2301      	movs	r3, #1
 800adea:	e000      	b.n	800adee <LL_ADC_IsEnabled+0x1a>
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	f003 0302 	and.w	r3, r3, #2
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d101      	bne.n	800ae12 <LL_ADC_IsDisableOngoing+0x18>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <LL_ADC_IsDisableOngoing+0x1a>
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ae34:	f043 0204 	orr.w	r2, r3, #4
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ae5c:	f043 0210 	orr.w	r2, r3, #16
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	f003 0304 	and.w	r3, r3, #4
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d101      	bne.n	800ae88 <LL_ADC_REG_IsConversionOngoing+0x18>
 800ae84:	2301      	movs	r3, #1
 800ae86:	e000      	b.n	800ae8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b083      	sub	sp, #12
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aea6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800aeaa:	f043 0220 	orr.w	r2, r3, #32
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800aeb2:	bf00      	nop
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800aebe:	b480      	push	{r7}
 800aec0:	b083      	sub	sp, #12
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	f003 0308 	and.w	r3, r3, #8
 800aece:	2b08      	cmp	r3, #8
 800aed0:	d101      	bne.n	800aed6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e000      	b.n	800aed8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800aef0:	2300      	movs	r3, #0
 800aef2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800aef4:	2300      	movs	r3, #0
 800aef6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e12e      	b.n	800b160 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d109      	bne.n	800af24 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7f6 f907 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff feef 	bl	800ad0c <LL_ADC_IsDeepPowerDownEnabled>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d004      	beq.n	800af3e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4618      	mov	r0, r3
 800af3a:	f7ff fed5 	bl	800ace8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff ff0a 	bl	800ad5c <LL_ADC_IsInternalRegulatorEnabled>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d115      	bne.n	800af7a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4618      	mov	r0, r3
 800af54:	f7ff feee 	bl	800ad34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800af58:	4b83      	ldr	r3, [pc, #524]	@ (800b168 <HAL_ADC_Init+0x284>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	099b      	lsrs	r3, r3, #6
 800af5e:	4a83      	ldr	r2, [pc, #524]	@ (800b16c <HAL_ADC_Init+0x288>)
 800af60:	fba2 2303 	umull	r2, r3, r2, r3
 800af64:	099b      	lsrs	r3, r3, #6
 800af66:	3301      	adds	r3, #1
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800af6c:	e002      	b.n	800af74 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	3b01      	subs	r3, #1
 800af72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1f9      	bne.n	800af6e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4618      	mov	r0, r3
 800af80:	f7ff feec 	bl	800ad5c <LL_ADC_IsInternalRegulatorEnabled>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10d      	bne.n	800afa6 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af8e:	f043 0210 	orr.w	r2, r3, #16
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af9a:	f043 0201 	orr.w	r2, r3, #1
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff ff60 	bl	800ae70 <LL_ADC_REG_IsConversionOngoing>
 800afb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb6:	f003 0310 	and.w	r3, r3, #16
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f040 80c7 	bne.w	800b14e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f040 80c3 	bne.w	800b14e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afcc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800afd0:	f043 0202 	orr.w	r2, r3, #2
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff fef9 	bl	800add4 <LL_ADC_IsEnabled>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10b      	bne.n	800b000 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800afe8:	4861      	ldr	r0, [pc, #388]	@ (800b170 <HAL_ADC_Init+0x28c>)
 800afea:	f7ff fef3 	bl	800add4 <LL_ADC_IsEnabled>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d105      	bne.n	800b000 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	4619      	mov	r1, r3
 800affa:	485e      	ldr	r0, [pc, #376]	@ (800b174 <HAL_ADC_Init+0x290>)
 800affc:	f7ff fd5c 	bl	800aab8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	7e5b      	ldrb	r3, [r3, #25]
 800b004:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b00a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800b010:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800b016:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b01e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800b020:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	4313      	orrs	r3, r2
 800b026:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d106      	bne.n	800b040 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b036:	3b01      	subs	r3, #1
 800b038:	045b      	lsls	r3, r3, #17
 800b03a:	69ba      	ldr	r2, [r7, #24]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b044:	2b00      	cmp	r3, #0
 800b046:	d009      	beq.n	800b05c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b04c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b054:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b056:	69ba      	ldr	r2, [r7, #24]
 800b058:	4313      	orrs	r3, r2
 800b05a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68da      	ldr	r2, [r3, #12]
 800b062:	4b45      	ldr	r3, [pc, #276]	@ (800b178 <HAL_ADC_Init+0x294>)
 800b064:	4013      	ands	r3, r2
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	69b9      	ldr	r1, [r7, #24]
 800b06c:	430b      	orrs	r3, r1
 800b06e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4618      	mov	r0, r3
 800b076:	f7ff fefb 	bl	800ae70 <LL_ADC_REG_IsConversionOngoing>
 800b07a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff ff1c 	bl	800aebe <LL_ADC_INJ_IsConversionOngoing>
 800b086:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d13d      	bne.n	800b10a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d13a      	bne.n	800b10a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b098:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0a0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0b0:	f023 0302 	bic.w	r3, r3, #2
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	6812      	ldr	r2, [r2, #0]
 800b0b8:	69b9      	ldr	r1, [r7, #24]
 800b0ba:	430b      	orrs	r3, r1
 800b0bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d118      	bne.n	800b0fa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b0d2:	f023 0304 	bic.w	r3, r3, #4
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b0de:	4311      	orrs	r1, r2
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b0e4:	4311      	orrs	r1, r2
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b0ea:	430a      	orrs	r2, r1
 800b0ec:	431a      	orrs	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f042 0201 	orr.w	r2, r2, #1
 800b0f6:	611a      	str	r2, [r3, #16]
 800b0f8:	e007      	b.n	800b10a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	691a      	ldr	r2, [r3, #16]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f022 0201 	bic.w	r2, r2, #1
 800b108:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d10c      	bne.n	800b12c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b118:	f023 010f 	bic.w	r1, r3, #15
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	69db      	ldr	r3, [r3, #28]
 800b120:	1e5a      	subs	r2, r3, #1
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	430a      	orrs	r2, r1
 800b128:	631a      	str	r2, [r3, #48]	@ 0x30
 800b12a:	e007      	b.n	800b13c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f022 020f 	bic.w	r2, r2, #15
 800b13a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b140:	f023 0303 	bic.w	r3, r3, #3
 800b144:	f043 0201 	orr.w	r2, r3, #1
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	655a      	str	r2, [r3, #84]	@ 0x54
 800b14c:	e007      	b.n	800b15e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b152:	f043 0210 	orr.w	r2, r3, #16
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b15e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3720      	adds	r7, #32
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	2000007c 	.word	0x2000007c
 800b16c:	053e2d63 	.word	0x053e2d63
 800b170:	50040000 	.word	0x50040000
 800b174:	50040300 	.word	0x50040300
 800b178:	fff0c007 	.word	0xfff0c007

0800b17c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4618      	mov	r0, r3
 800b18a:	f7ff fe71 	bl	800ae70 <LL_ADC_REG_IsConversionOngoing>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d140      	bne.n	800b216 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d101      	bne.n	800b1a2 <HAL_ADC_Start+0x26>
 800b19e:	2302      	movs	r3, #2
 800b1a0:	e03c      	b.n	800b21c <HAL_ADC_Start+0xa0>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fd8a 	bl	800bcc4 <ADC_Enable>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d128      	bne.n	800b20c <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b1c2:	f023 0301 	bic.w	r3, r3, #1
 800b1c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1da:	d106      	bne.n	800b1ea <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1e0:	f023 0206 	bic.w	r2, r3, #6
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	659a      	str	r2, [r3, #88]	@ 0x58
 800b1e8:	e002      	b.n	800b1f0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	221c      	movs	r2, #28
 800b1f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4618      	mov	r0, r3
 800b206:	f7ff fe0b 	bl	800ae20 <LL_ADC_REG_StartConversion>
 800b20a:	e006      	b.n	800b21a <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800b214:	e001      	b.n	800b21a <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b216:	2302      	movs	r3, #2
 800b218:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <HAL_ADC_Stop+0x16>
 800b236:	2302      	movs	r3, #2
 800b238:	e023      	b.n	800b282 <HAL_ADC_Stop+0x5e>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800b242:	2103      	movs	r1, #3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fc81 	bl	800bb4c <ADC_ConversionStop>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800b24e:	7bfb      	ldrb	r3, [r7, #15]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d111      	bne.n	800b278 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fdaf 	bl	800bdb8 <ADC_Disable>
 800b25a:	4603      	mov	r3, r0
 800b25c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800b25e:	7bfb      	ldrb	r3, [r7, #15]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d109      	bne.n	800b278 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b268:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b26c:	f023 0301 	bic.w	r3, r3, #1
 800b270:	f043 0201 	orr.w	r2, r3, #1
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b280:	7bfb      	ldrb	r3, [r7, #15]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	2b08      	cmp	r3, #8
 800b29a:	d102      	bne.n	800b2a2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800b29c:	2308      	movs	r3, #8
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	e010      	b.n	800b2c4 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d007      	beq.n	800b2c0 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2b4:	f043 0220 	orr.w	r2, r3, #32
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e06d      	b.n	800b39c <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800b2c0:	2304      	movs	r3, #4
 800b2c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800b2c4:	f7ff fbbc 	bl	800aa40 <HAL_GetTick>
 800b2c8:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b2ca:	e021      	b.n	800b310 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2d2:	d01d      	beq.n	800b310 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800b2d4:	f7ff fbb4 	bl	800aa40 <HAL_GetTick>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d302      	bcc.n	800b2ea <HAL_ADC_PollForConversion+0x60>
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d112      	bne.n	800b310 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10b      	bne.n	800b310 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2fc:	f043 0204 	orr.w	r2, r3, #4
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800b30c:	2303      	movs	r3, #3
 800b30e:	e045      	b.n	800b39c <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	4013      	ands	r3, r2
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0d6      	beq.n	800b2cc <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b322:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff fc4b 	bl	800abca <LL_ADC_REG_IsTriggerSourceSWStart>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d01c      	beq.n	800b374 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	7e5b      	ldrb	r3, [r3, #25]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d118      	bne.n	800b374 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0308 	and.w	r3, r3, #8
 800b34c:	2b08      	cmp	r3, #8
 800b34e:	d111      	bne.n	800b374 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b354:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b364:	2b00      	cmp	r3, #0
 800b366:	d105      	bne.n	800b374 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b36c:	f043 0201 	orr.w	r2, r3, #1
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2b08      	cmp	r3, #8
 800b378:	d104      	bne.n	800b384 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2208      	movs	r2, #8
 800b380:	601a      	str	r2, [r3, #0]
 800b382:	e00a      	b.n	800b39a <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d103      	bne.n	800b39a <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	220c      	movs	r2, #12
 800b398:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
	...

0800b3c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b0b6      	sub	sp, #216	@ 0xd8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d101      	bne.n	800b3e2 <HAL_ADC_ConfigChannel+0x22>
 800b3de:	2302      	movs	r3, #2
 800b3e0:	e39f      	b.n	800bb22 <HAL_ADC_ConfigChannel+0x762>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7ff fd3e 	bl	800ae70 <LL_ADC_REG_IsConversionOngoing>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f040 8384 	bne.w	800bb04 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6818      	ldr	r0, [r3, #0]
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	6859      	ldr	r1, [r3, #4]
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	461a      	mov	r2, r3
 800b40a:	f7ff fbf1 	bl	800abf0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff fd2c 	bl	800ae70 <LL_ADC_REG_IsConversionOngoing>
 800b418:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4618      	mov	r0, r3
 800b422:	f7ff fd4c 	bl	800aebe <LL_ADC_INJ_IsConversionOngoing>
 800b426:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b42a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f040 81a6 	bne.w	800b780 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f040 81a1 	bne.w	800b780 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6818      	ldr	r0, [r3, #0]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	6819      	ldr	r1, [r3, #0]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	461a      	mov	r2, r3
 800b44c:	f7ff fbfc 	bl	800ac48 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	695a      	ldr	r2, [r3, #20]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	08db      	lsrs	r3, r3, #3
 800b45c:	f003 0303 	and.w	r3, r3, #3
 800b460:	005b      	lsls	r3, r3, #1
 800b462:	fa02 f303 	lsl.w	r3, r2, r3
 800b466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	2b04      	cmp	r3, #4
 800b470:	d00a      	beq.n	800b488 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6818      	ldr	r0, [r3, #0]
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	6919      	ldr	r1, [r3, #16]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b482:	f7ff fb4d 	bl	800ab20 <LL_ADC_SetOffset>
 800b486:	e17b      	b.n	800b780 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2100      	movs	r1, #0
 800b48e:	4618      	mov	r0, r3
 800b490:	f7ff fb6a 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b494:	4603      	mov	r3, r0
 800b496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10a      	bne.n	800b4b4 <HAL_ADC_ConfigChannel+0xf4>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7ff fb5f 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	0e9b      	lsrs	r3, r3, #26
 800b4ae:	f003 021f 	and.w	r2, r3, #31
 800b4b2:	e01e      	b.n	800b4f2 <HAL_ADC_ConfigChannel+0x132>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff fb54 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b4ca:	fa93 f3a3 	rbit	r3, r3
 800b4ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b4d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b4d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b4da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800b4e2:	2320      	movs	r3, #32
 800b4e4:	e004      	b.n	800b4f0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800b4e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b4ea:	fab3 f383 	clz	r3, r3
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d105      	bne.n	800b50a <HAL_ADC_ConfigChannel+0x14a>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	0e9b      	lsrs	r3, r3, #26
 800b504:	f003 031f 	and.w	r3, r3, #31
 800b508:	e018      	b.n	800b53c <HAL_ADC_ConfigChannel+0x17c>
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b512:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b516:	fa93 f3a3 	rbit	r3, r3
 800b51a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800b51e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800b526:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800b52e:	2320      	movs	r3, #32
 800b530:	e004      	b.n	800b53c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800b532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b536:	fab3 f383 	clz	r3, r3
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d106      	bne.n	800b54e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2200      	movs	r2, #0
 800b546:	2100      	movs	r1, #0
 800b548:	4618      	mov	r0, r3
 800b54a:	f7ff fb23 	bl	800ab94 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2101      	movs	r1, #1
 800b554:	4618      	mov	r0, r3
 800b556:	f7ff fb07 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b55a:	4603      	mov	r3, r0
 800b55c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10a      	bne.n	800b57a <HAL_ADC_ConfigChannel+0x1ba>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2101      	movs	r1, #1
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff fafc 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b570:	4603      	mov	r3, r0
 800b572:	0e9b      	lsrs	r3, r3, #26
 800b574:	f003 021f 	and.w	r2, r3, #31
 800b578:	e01e      	b.n	800b5b8 <HAL_ADC_ConfigChannel+0x1f8>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2101      	movs	r1, #1
 800b580:	4618      	mov	r0, r3
 800b582:	f7ff faf1 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b586:	4603      	mov	r3, r0
 800b588:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b58c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b590:	fa93 f3a3 	rbit	r3, r3
 800b594:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800b598:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b59c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800b5a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d101      	bne.n	800b5ac <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800b5a8:	2320      	movs	r3, #32
 800b5aa:	e004      	b.n	800b5b6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800b5ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5b0:	fab3 f383 	clz	r3, r3
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d105      	bne.n	800b5d0 <HAL_ADC_ConfigChannel+0x210>
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	0e9b      	lsrs	r3, r3, #26
 800b5ca:	f003 031f 	and.w	r3, r3, #31
 800b5ce:	e018      	b.n	800b602 <HAL_ADC_ConfigChannel+0x242>
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b5dc:	fa93 f3a3 	rbit	r3, r3
 800b5e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800b5e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b5e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800b5ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800b5f4:	2320      	movs	r3, #32
 800b5f6:	e004      	b.n	800b602 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800b5f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b5fc:	fab3 f383 	clz	r3, r3
 800b600:	b2db      	uxtb	r3, r3
 800b602:	429a      	cmp	r2, r3
 800b604:	d106      	bne.n	800b614 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2200      	movs	r2, #0
 800b60c:	2101      	movs	r1, #1
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff fac0 	bl	800ab94 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2102      	movs	r1, #2
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7ff faa4 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b620:	4603      	mov	r3, r0
 800b622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10a      	bne.n	800b640 <HAL_ADC_ConfigChannel+0x280>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2102      	movs	r1, #2
 800b630:	4618      	mov	r0, r3
 800b632:	f7ff fa99 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b636:	4603      	mov	r3, r0
 800b638:	0e9b      	lsrs	r3, r3, #26
 800b63a:	f003 021f 	and.w	r2, r3, #31
 800b63e:	e01e      	b.n	800b67e <HAL_ADC_ConfigChannel+0x2be>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2102      	movs	r1, #2
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff fa8e 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b64c:	4603      	mov	r3, r0
 800b64e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b656:	fa93 f3a3 	rbit	r3, r3
 800b65a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800b65e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800b666:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800b66e:	2320      	movs	r3, #32
 800b670:	e004      	b.n	800b67c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800b672:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b676:	fab3 f383 	clz	r3, r3
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	461a      	mov	r2, r3
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b686:	2b00      	cmp	r3, #0
 800b688:	d105      	bne.n	800b696 <HAL_ADC_ConfigChannel+0x2d6>
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	0e9b      	lsrs	r3, r3, #26
 800b690:	f003 031f 	and.w	r3, r3, #31
 800b694:	e016      	b.n	800b6c4 <HAL_ADC_ConfigChannel+0x304>
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b69e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b6a2:	fa93 f3a3 	rbit	r3, r3
 800b6a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800b6a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b6aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800b6ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800b6b6:	2320      	movs	r3, #32
 800b6b8:	e004      	b.n	800b6c4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800b6ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6be:	fab3 f383 	clz	r3, r3
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d106      	bne.n	800b6d6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	2102      	movs	r1, #2
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff fa5f 	bl	800ab94 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2103      	movs	r1, #3
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7ff fa43 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10a      	bne.n	800b702 <HAL_ADC_ConfigChannel+0x342>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2103      	movs	r1, #3
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7ff fa38 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	0e9b      	lsrs	r3, r3, #26
 800b6fc:	f003 021f 	and.w	r2, r3, #31
 800b700:	e017      	b.n	800b732 <HAL_ADC_ConfigChannel+0x372>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2103      	movs	r1, #3
 800b708:	4618      	mov	r0, r3
 800b70a:	f7ff fa2d 	bl	800ab68 <LL_ADC_GetOffsetChannel>
 800b70e:	4603      	mov	r3, r0
 800b710:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b712:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b714:	fa93 f3a3 	rbit	r3, r3
 800b718:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800b71a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b71c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800b71e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b720:	2b00      	cmp	r3, #0
 800b722:	d101      	bne.n	800b728 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800b724:	2320      	movs	r3, #32
 800b726:	e003      	b.n	800b730 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800b728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b72a:	fab3 f383 	clz	r3, r3
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	461a      	mov	r2, r3
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d105      	bne.n	800b74a <HAL_ADC_ConfigChannel+0x38a>
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	0e9b      	lsrs	r3, r3, #26
 800b744:	f003 031f 	and.w	r3, r3, #31
 800b748:	e011      	b.n	800b76e <HAL_ADC_ConfigChannel+0x3ae>
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b752:	fa93 f3a3 	rbit	r3, r3
 800b756:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800b758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b75a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800b75c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d101      	bne.n	800b766 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800b762:	2320      	movs	r3, #32
 800b764:	e003      	b.n	800b76e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800b766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b768:	fab3 f383 	clz	r3, r3
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	429a      	cmp	r2, r3
 800b770:	d106      	bne.n	800b780 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2200      	movs	r2, #0
 800b778:	2103      	movs	r1, #3
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7ff fa0a 	bl	800ab94 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fb25 	bl	800add4 <LL_ADC_IsEnabled>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f040 81c2 	bne.w	800bb16 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6818      	ldr	r0, [r3, #0]
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	6819      	ldr	r1, [r3, #0]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	f7ff fa7e 	bl	800aca0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	4a8e      	ldr	r2, [pc, #568]	@ (800b9e4 <HAL_ADC_ConfigChannel+0x624>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	f040 8130 	bne.w	800ba10 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10b      	bne.n	800b7d8 <HAL_ADC_ConfigChannel+0x418>
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	0e9b      	lsrs	r3, r3, #26
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	f003 031f 	and.w	r3, r3, #31
 800b7cc:	2b09      	cmp	r3, #9
 800b7ce:	bf94      	ite	ls
 800b7d0:	2301      	movls	r3, #1
 800b7d2:	2300      	movhi	r3, #0
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	e019      	b.n	800b80c <HAL_ADC_ConfigChannel+0x44c>
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7e0:	fa93 f3a3 	rbit	r3, r3
 800b7e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800b7e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7e8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800b7ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800b7f0:	2320      	movs	r3, #32
 800b7f2:	e003      	b.n	800b7fc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800b7f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b7f6:	fab3 f383 	clz	r3, r3
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	f003 031f 	and.w	r3, r3, #31
 800b802:	2b09      	cmp	r3, #9
 800b804:	bf94      	ite	ls
 800b806:	2301      	movls	r3, #1
 800b808:	2300      	movhi	r3, #0
 800b80a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d079      	beq.n	800b904 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d107      	bne.n	800b82c <HAL_ADC_ConfigChannel+0x46c>
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	0e9b      	lsrs	r3, r3, #26
 800b822:	3301      	adds	r3, #1
 800b824:	069b      	lsls	r3, r3, #26
 800b826:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b82a:	e015      	b.n	800b858 <HAL_ADC_ConfigChannel+0x498>
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b834:	fa93 f3a3 	rbit	r3, r3
 800b838:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800b83a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b83c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800b83e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800b844:	2320      	movs	r3, #32
 800b846:	e003      	b.n	800b850 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800b848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b84a:	fab3 f383 	clz	r3, r3
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	3301      	adds	r3, #1
 800b852:	069b      	lsls	r3, r3, #26
 800b854:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b860:	2b00      	cmp	r3, #0
 800b862:	d109      	bne.n	800b878 <HAL_ADC_ConfigChannel+0x4b8>
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	0e9b      	lsrs	r3, r3, #26
 800b86a:	3301      	adds	r3, #1
 800b86c:	f003 031f 	and.w	r3, r3, #31
 800b870:	2101      	movs	r1, #1
 800b872:	fa01 f303 	lsl.w	r3, r1, r3
 800b876:	e017      	b.n	800b8a8 <HAL_ADC_ConfigChannel+0x4e8>
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b87e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b880:	fa93 f3a3 	rbit	r3, r3
 800b884:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800b886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b888:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800b88a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800b890:	2320      	movs	r3, #32
 800b892:	e003      	b.n	800b89c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800b894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b896:	fab3 f383 	clz	r3, r3
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	3301      	adds	r3, #1
 800b89e:	f003 031f 	and.w	r3, r3, #31
 800b8a2:	2101      	movs	r1, #1
 800b8a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8a8:	ea42 0103 	orr.w	r1, r2, r3
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10a      	bne.n	800b8ce <HAL_ADC_ConfigChannel+0x50e>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	0e9b      	lsrs	r3, r3, #26
 800b8be:	3301      	adds	r3, #1
 800b8c0:	f003 021f 	and.w	r2, r3, #31
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	005b      	lsls	r3, r3, #1
 800b8c8:	4413      	add	r3, r2
 800b8ca:	051b      	lsls	r3, r3, #20
 800b8cc:	e018      	b.n	800b900 <HAL_ADC_ConfigChannel+0x540>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d6:	fa93 f3a3 	rbit	r3, r3
 800b8da:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800b8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800b8e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800b8e6:	2320      	movs	r3, #32
 800b8e8:	e003      	b.n	800b8f2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800b8ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ec:	fab3 f383 	clz	r3, r3
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	f003 021f 	and.w	r2, r3, #31
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	4413      	add	r3, r2
 800b8fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b900:	430b      	orrs	r3, r1
 800b902:	e080      	b.n	800ba06 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d107      	bne.n	800b920 <HAL_ADC_ConfigChannel+0x560>
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	0e9b      	lsrs	r3, r3, #26
 800b916:	3301      	adds	r3, #1
 800b918:	069b      	lsls	r3, r3, #26
 800b91a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b91e:	e015      	b.n	800b94c <HAL_ADC_ConfigChannel+0x58c>
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b928:	fa93 f3a3 	rbit	r3, r3
 800b92c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800b92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b930:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800b932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800b938:	2320      	movs	r3, #32
 800b93a:	e003      	b.n	800b944 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800b93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b93e:	fab3 f383 	clz	r3, r3
 800b942:	b2db      	uxtb	r3, r3
 800b944:	3301      	adds	r3, #1
 800b946:	069b      	lsls	r3, r3, #26
 800b948:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b954:	2b00      	cmp	r3, #0
 800b956:	d109      	bne.n	800b96c <HAL_ADC_ConfigChannel+0x5ac>
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	0e9b      	lsrs	r3, r3, #26
 800b95e:	3301      	adds	r3, #1
 800b960:	f003 031f 	and.w	r3, r3, #31
 800b964:	2101      	movs	r1, #1
 800b966:	fa01 f303 	lsl.w	r3, r1, r3
 800b96a:	e017      	b.n	800b99c <HAL_ADC_ConfigChannel+0x5dc>
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b972:	6a3b      	ldr	r3, [r7, #32]
 800b974:	fa93 f3a3 	rbit	r3, r3
 800b978:	61fb      	str	r3, [r7, #28]
  return result;
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800b984:	2320      	movs	r3, #32
 800b986:	e003      	b.n	800b990 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800b988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98a:	fab3 f383 	clz	r3, r3
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	3301      	adds	r3, #1
 800b992:	f003 031f 	and.w	r3, r3, #31
 800b996:	2101      	movs	r1, #1
 800b998:	fa01 f303 	lsl.w	r3, r1, r3
 800b99c:	ea42 0103 	orr.w	r1, r2, r3
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10d      	bne.n	800b9c8 <HAL_ADC_ConfigChannel+0x608>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	0e9b      	lsrs	r3, r3, #26
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	f003 021f 	and.w	r2, r3, #31
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	005b      	lsls	r3, r3, #1
 800b9bc:	4413      	add	r3, r2
 800b9be:	3b1e      	subs	r3, #30
 800b9c0:	051b      	lsls	r3, r3, #20
 800b9c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b9c6:	e01d      	b.n	800ba04 <HAL_ADC_ConfigChannel+0x644>
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	fa93 f3a3 	rbit	r3, r3
 800b9d4:	613b      	str	r3, [r7, #16]
  return result;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d103      	bne.n	800b9e8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800b9e0:	2320      	movs	r3, #32
 800b9e2:	e005      	b.n	800b9f0 <HAL_ADC_ConfigChannel+0x630>
 800b9e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	fab3 f383 	clz	r3, r3
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	f003 021f 	and.w	r2, r3, #31
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	4413      	add	r3, r2
 800b9fc:	3b1e      	subs	r3, #30
 800b9fe:	051b      	lsls	r3, r3, #20
 800ba00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ba04:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	f7ff f91c 	bl	800ac48 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	4b45      	ldr	r3, [pc, #276]	@ (800bb2c <HAL_ADC_ConfigChannel+0x76c>)
 800ba16:	4013      	ands	r3, r2
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d07c      	beq.n	800bb16 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ba1c:	4844      	ldr	r0, [pc, #272]	@ (800bb30 <HAL_ADC_ConfigChannel+0x770>)
 800ba1e:	f7ff f871 	bl	800ab04 <LL_ADC_GetCommonPathInternalCh>
 800ba22:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ba26:	4843      	ldr	r0, [pc, #268]	@ (800bb34 <HAL_ADC_ConfigChannel+0x774>)
 800ba28:	f7ff f9d4 	bl	800add4 <LL_ADC_IsEnabled>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d15e      	bne.n	800baf0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a40      	ldr	r2, [pc, #256]	@ (800bb38 <HAL_ADC_ConfigChannel+0x778>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d127      	bne.n	800ba8c <HAL_ADC_ConfigChannel+0x6cc>
 800ba3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ba40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d121      	bne.n	800ba8c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a39      	ldr	r2, [pc, #228]	@ (800bb34 <HAL_ADC_ConfigChannel+0x774>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d161      	bne.n	800bb16 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800ba52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ba56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4834      	ldr	r0, [pc, #208]	@ (800bb30 <HAL_ADC_ConfigChannel+0x770>)
 800ba5e:	f7ff f83e 	bl	800aade <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ba62:	4b36      	ldr	r3, [pc, #216]	@ (800bb3c <HAL_ADC_ConfigChannel+0x77c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	099b      	lsrs	r3, r3, #6
 800ba68:	4a35      	ldr	r2, [pc, #212]	@ (800bb40 <HAL_ADC_ConfigChannel+0x780>)
 800ba6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba6e:	099b      	lsrs	r3, r3, #6
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	4613      	mov	r3, r2
 800ba74:	005b      	lsls	r3, r3, #1
 800ba76:	4413      	add	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800ba7c:	e002      	b.n	800ba84 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3b01      	subs	r3, #1
 800ba82:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1f9      	bne.n	800ba7e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ba8a:	e044      	b.n	800bb16 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a2c      	ldr	r2, [pc, #176]	@ (800bb44 <HAL_ADC_ConfigChannel+0x784>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d113      	bne.n	800babe <HAL_ADC_ConfigChannel+0x6fe>
 800ba96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ba9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10d      	bne.n	800babe <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a23      	ldr	r2, [pc, #140]	@ (800bb34 <HAL_ADC_ConfigChannel+0x774>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d134      	bne.n	800bb16 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800baac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bab0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bab4:	4619      	mov	r1, r3
 800bab6:	481e      	ldr	r0, [pc, #120]	@ (800bb30 <HAL_ADC_ConfigChannel+0x770>)
 800bab8:	f7ff f811 	bl	800aade <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800babc:	e02b      	b.n	800bb16 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a21      	ldr	r2, [pc, #132]	@ (800bb48 <HAL_ADC_ConfigChannel+0x788>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d126      	bne.n	800bb16 <HAL_ADC_ConfigChannel+0x756>
 800bac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bacc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d120      	bne.n	800bb16 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a16      	ldr	r2, [pc, #88]	@ (800bb34 <HAL_ADC_ConfigChannel+0x774>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d11b      	bne.n	800bb16 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800bade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bae2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bae6:	4619      	mov	r1, r3
 800bae8:	4811      	ldr	r0, [pc, #68]	@ (800bb30 <HAL_ADC_ConfigChannel+0x770>)
 800baea:	f7fe fff8 	bl	800aade <LL_ADC_SetCommonPathInternalCh>
 800baee:	e012      	b.n	800bb16 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baf4:	f043 0220 	orr.w	r2, r3, #32
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800bb02:	e008      	b.n	800bb16 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb08:	f043 0220 	orr.w	r2, r3, #32
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800bb1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	37d8      	adds	r7, #216	@ 0xd8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	80080000 	.word	0x80080000
 800bb30:	50040300 	.word	0x50040300
 800bb34:	50040000 	.word	0x50040000
 800bb38:	c7520000 	.word	0xc7520000
 800bb3c:	2000007c 	.word	0x2000007c
 800bb40:	053e2d63 	.word	0x053e2d63
 800bb44:	cb840000 	.word	0xcb840000
 800bb48:	80000001 	.word	0x80000001

0800bb4c <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7ff f984 	bl	800ae70 <LL_ADC_REG_IsConversionOngoing>
 800bb68:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7ff f9a5 	bl	800aebe <LL_ADC_INJ_IsConversionOngoing>
 800bb74:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d103      	bne.n	800bb84 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f000 8098 	beq.w	800bcb4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d02a      	beq.n	800bbe8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	7e5b      	ldrb	r3, [r3, #25]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d126      	bne.n	800bbe8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	7e1b      	ldrb	r3, [r3, #24]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d122      	bne.n	800bbe8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800bba2:	2301      	movs	r3, #1
 800bba4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800bba6:	e014      	b.n	800bbd2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	4a45      	ldr	r2, [pc, #276]	@ (800bcc0 <ADC_ConversionStop+0x174>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d90d      	bls.n	800bbcc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbb4:	f043 0210 	orr.w	r2, r3, #16
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbc0:	f043 0201 	orr.w	r2, r3, #1
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e074      	b.n	800bcb6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbdc:	2b40      	cmp	r3, #64	@ 0x40
 800bbde:	d1e3      	bne.n	800bba8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2240      	movs	r2, #64	@ 0x40
 800bbe6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d014      	beq.n	800bc18 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7ff f93c 	bl	800ae70 <LL_ADC_REG_IsConversionOngoing>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00c      	beq.n	800bc18 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7ff f8f9 	bl	800adfa <LL_ADC_IsDisableOngoing>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d104      	bne.n	800bc18 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7ff f918 	bl	800ae48 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d014      	beq.n	800bc48 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7ff f94b 	bl	800aebe <LL_ADC_INJ_IsConversionOngoing>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00c      	beq.n	800bc48 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7ff f8e1 	bl	800adfa <LL_ADC_IsDisableOngoing>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d104      	bne.n	800bc48 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff f927 	bl	800ae96 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d005      	beq.n	800bc5a <ADC_ConversionStop+0x10e>
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	2b03      	cmp	r3, #3
 800bc52:	d105      	bne.n	800bc60 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800bc54:	230c      	movs	r3, #12
 800bc56:	617b      	str	r3, [r7, #20]
        break;
 800bc58:	e005      	b.n	800bc66 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800bc5a:	2308      	movs	r3, #8
 800bc5c:	617b      	str	r3, [r7, #20]
        break;
 800bc5e:	e002      	b.n	800bc66 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800bc60:	2304      	movs	r3, #4
 800bc62:	617b      	str	r3, [r7, #20]
        break;
 800bc64:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800bc66:	f7fe feeb 	bl	800aa40 <HAL_GetTick>
 800bc6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bc6c:	e01b      	b.n	800bca6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800bc6e:	f7fe fee7 	bl	800aa40 <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	2b05      	cmp	r3, #5
 800bc7a:	d914      	bls.n	800bca6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	689a      	ldr	r2, [r3, #8]
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	4013      	ands	r3, r2
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00d      	beq.n	800bca6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc8e:	f043 0210 	orr.w	r2, r3, #16
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc9a:	f043 0201 	orr.w	r2, r3, #1
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	e007      	b.n	800bcb6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	4013      	ands	r3, r2
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1dc      	bne.n	800bc6e <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3720      	adds	r7, #32
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	a33fffff 	.word	0xa33fffff

0800bcc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7ff f87d 	bl	800add4 <LL_ADC_IsEnabled>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d15e      	bne.n	800bd9e <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	689a      	ldr	r2, [r3, #8]
 800bce6:	4b30      	ldr	r3, [pc, #192]	@ (800bda8 <ADC_Enable+0xe4>)
 800bce8:	4013      	ands	r3, r2
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00d      	beq.n	800bd0a <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcf2:	f043 0210 	orr.w	r2, r3, #16
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcfe:	f043 0201 	orr.w	r2, r3, #1
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e04a      	b.n	800bda0 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff f838 	bl	800ad84 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800bd14:	4825      	ldr	r0, [pc, #148]	@ (800bdac <ADC_Enable+0xe8>)
 800bd16:	f7fe fef5 	bl	800ab04 <LL_ADC_GetCommonPathInternalCh>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00f      	beq.n	800bd44 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bd24:	4b22      	ldr	r3, [pc, #136]	@ (800bdb0 <ADC_Enable+0xec>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	099b      	lsrs	r3, r3, #6
 800bd2a:	4a22      	ldr	r2, [pc, #136]	@ (800bdb4 <ADC_Enable+0xf0>)
 800bd2c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd30:	099b      	lsrs	r3, r3, #6
 800bd32:	3301      	adds	r3, #1
 800bd34:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800bd36:	e002      	b.n	800bd3e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1f9      	bne.n	800bd38 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800bd44:	f7fe fe7c 	bl	800aa40 <HAL_GetTick>
 800bd48:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bd4a:	e021      	b.n	800bd90 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7ff f83f 	bl	800add4 <LL_ADC_IsEnabled>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d104      	bne.n	800bd66 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff f80f 	bl	800ad84 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800bd66:	f7fe fe6b 	bl	800aa40 <HAL_GetTick>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d90d      	bls.n	800bd90 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd78:	f043 0210 	orr.w	r2, r3, #16
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd84:	f043 0201 	orr.w	r2, r3, #1
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e007      	b.n	800bda0 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d1d6      	bne.n	800bd4c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	8000003f 	.word	0x8000003f
 800bdac:	50040300 	.word	0x50040300
 800bdb0:	2000007c 	.word	0x2000007c
 800bdb4:	053e2d63 	.word	0x053e2d63

0800bdb8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff f818 	bl	800adfa <LL_ADC_IsDisableOngoing>
 800bdca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fe ffff 	bl	800add4 <LL_ADC_IsEnabled>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d047      	beq.n	800be6c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d144      	bne.n	800be6c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	f003 030d 	and.w	r3, r3, #13
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d10c      	bne.n	800be0a <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fe ffd9 	bl	800adac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2203      	movs	r2, #3
 800be00:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800be02:	f7fe fe1d 	bl	800aa40 <HAL_GetTick>
 800be06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800be08:	e029      	b.n	800be5e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be0e:	f043 0210 	orr.w	r2, r3, #16
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be1a:	f043 0201 	orr.w	r2, r3, #1
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	e023      	b.n	800be6e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800be26:	f7fe fe0b 	bl	800aa40 <HAL_GetTick>
 800be2a:	4602      	mov	r2, r0
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	1ad3      	subs	r3, r2, r3
 800be30:	2b02      	cmp	r3, #2
 800be32:	d914      	bls.n	800be5e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00d      	beq.n	800be5e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be46:	f043 0210 	orr.w	r2, r3, #16
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be52:	f043 0201 	orr.w	r2, r3, #1
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	e007      	b.n	800be6e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1dc      	bne.n	800be26 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
	...

0800be78 <__NVIC_SetPriorityGrouping>:
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800be88:	4b0c      	ldr	r3, [pc, #48]	@ (800bebc <__NVIC_SetPriorityGrouping+0x44>)
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800be94:	4013      	ands	r3, r2
 800be96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800bea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800beaa:	4a04      	ldr	r2, [pc, #16]	@ (800bebc <__NVIC_SetPriorityGrouping+0x44>)
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	60d3      	str	r3, [r2, #12]
}
 800beb0:	bf00      	nop
 800beb2:	3714      	adds	r7, #20
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	e000ed00 	.word	0xe000ed00

0800bec0 <__NVIC_GetPriorityGrouping>:
{
 800bec0:	b480      	push	{r7}
 800bec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bec4:	4b04      	ldr	r3, [pc, #16]	@ (800bed8 <__NVIC_GetPriorityGrouping+0x18>)
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	0a1b      	lsrs	r3, r3, #8
 800beca:	f003 0307 	and.w	r3, r3, #7
}
 800bece:	4618      	mov	r0, r3
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	e000ed00 	.word	0xe000ed00

0800bedc <__NVIC_EnableIRQ>:
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	4603      	mov	r3, r0
 800bee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800beea:	2b00      	cmp	r3, #0
 800beec:	db0b      	blt.n	800bf06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800beee:	79fb      	ldrb	r3, [r7, #7]
 800bef0:	f003 021f 	and.w	r2, r3, #31
 800bef4:	4907      	ldr	r1, [pc, #28]	@ (800bf14 <__NVIC_EnableIRQ+0x38>)
 800bef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800befa:	095b      	lsrs	r3, r3, #5
 800befc:	2001      	movs	r0, #1
 800befe:	fa00 f202 	lsl.w	r2, r0, r2
 800bf02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bf06:	bf00      	nop
 800bf08:	370c      	adds	r7, #12
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	e000e100 	.word	0xe000e100

0800bf18 <__NVIC_SetPriority>:
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	4603      	mov	r3, r0
 800bf20:	6039      	str	r1, [r7, #0]
 800bf22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	db0a      	blt.n	800bf42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	490c      	ldr	r1, [pc, #48]	@ (800bf64 <__NVIC_SetPriority+0x4c>)
 800bf32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf36:	0112      	lsls	r2, r2, #4
 800bf38:	b2d2      	uxtb	r2, r2
 800bf3a:	440b      	add	r3, r1
 800bf3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bf40:	e00a      	b.n	800bf58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	4908      	ldr	r1, [pc, #32]	@ (800bf68 <__NVIC_SetPriority+0x50>)
 800bf48:	79fb      	ldrb	r3, [r7, #7]
 800bf4a:	f003 030f 	and.w	r3, r3, #15
 800bf4e:	3b04      	subs	r3, #4
 800bf50:	0112      	lsls	r2, r2, #4
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	440b      	add	r3, r1
 800bf56:	761a      	strb	r2, [r3, #24]
}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	e000e100 	.word	0xe000e100
 800bf68:	e000ed00 	.word	0xe000ed00

0800bf6c <NVIC_EncodePriority>:
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b089      	sub	sp, #36	@ 0x24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f003 0307 	and.w	r3, r3, #7
 800bf7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	f1c3 0307 	rsb	r3, r3, #7
 800bf86:	2b04      	cmp	r3, #4
 800bf88:	bf28      	it	cs
 800bf8a:	2304      	movcs	r3, #4
 800bf8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	3304      	adds	r3, #4
 800bf92:	2b06      	cmp	r3, #6
 800bf94:	d902      	bls.n	800bf9c <NVIC_EncodePriority+0x30>
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	3b03      	subs	r3, #3
 800bf9a:	e000      	b.n	800bf9e <NVIC_EncodePriority+0x32>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bfa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfaa:	43da      	mvns	r2, r3
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	401a      	ands	r2, r3
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bfb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	fa01 f303 	lsl.w	r3, r1, r3
 800bfbe:	43d9      	mvns	r1, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bfc4:	4313      	orrs	r3, r2
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3724      	adds	r7, #36	@ 0x24
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
	...

0800bfd4 <SysTick_Config>:
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bfe4:	d301      	bcc.n	800bfea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e00f      	b.n	800c00a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bfea:	4a0a      	ldr	r2, [pc, #40]	@ (800c014 <SysTick_Config+0x40>)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3b01      	subs	r3, #1
 800bff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bff2:	210f      	movs	r1, #15
 800bff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bff8:	f7ff ff8e 	bl	800bf18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bffc:	4b05      	ldr	r3, [pc, #20]	@ (800c014 <SysTick_Config+0x40>)
 800bffe:	2200      	movs	r2, #0
 800c000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c002:	4b04      	ldr	r3, [pc, #16]	@ (800c014 <SysTick_Config+0x40>)
 800c004:	2207      	movs	r2, #7
 800c006:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	e000e010 	.word	0xe000e010

0800c018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f7ff ff29 	bl	800be78 <__NVIC_SetPriorityGrouping>
}
 800c026:	bf00      	nop
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b086      	sub	sp, #24
 800c032:	af00      	add	r7, sp, #0
 800c034:	4603      	mov	r3, r0
 800c036:	60b9      	str	r1, [r7, #8]
 800c038:	607a      	str	r2, [r7, #4]
 800c03a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c03c:	f7ff ff40 	bl	800bec0 <__NVIC_GetPriorityGrouping>
 800c040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	68b9      	ldr	r1, [r7, #8]
 800c046:	6978      	ldr	r0, [r7, #20]
 800c048:	f7ff ff90 	bl	800bf6c <NVIC_EncodePriority>
 800c04c:	4602      	mov	r2, r0
 800c04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c052:	4611      	mov	r1, r2
 800c054:	4618      	mov	r0, r3
 800c056:	f7ff ff5f 	bl	800bf18 <__NVIC_SetPriority>
}
 800c05a:	bf00      	nop
 800c05c:	3718      	adds	r7, #24
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b082      	sub	sp, #8
 800c066:	af00      	add	r7, sp, #0
 800c068:	4603      	mov	r3, r0
 800c06a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c06c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c070:	4618      	mov	r0, r3
 800c072:	f7ff ff33 	bl	800bedc <__NVIC_EnableIRQ>
}
 800c076:	bf00      	nop
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b082      	sub	sp, #8
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7ff ffa4 	bl	800bfd4 <SysTick_Config>
 800c08c:	4603      	mov	r3, r0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
	...

0800c098 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e08e      	b.n	800c1c8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	4b47      	ldr	r3, [pc, #284]	@ (800c1d0 <HAL_DMA_Init+0x138>)
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d80f      	bhi.n	800c0d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	4b45      	ldr	r3, [pc, #276]	@ (800c1d4 <HAL_DMA_Init+0x13c>)
 800c0be:	4413      	add	r3, r2
 800c0c0:	4a45      	ldr	r2, [pc, #276]	@ (800c1d8 <HAL_DMA_Init+0x140>)
 800c0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0c6:	091b      	lsrs	r3, r3, #4
 800c0c8:	009a      	lsls	r2, r3, #2
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a42      	ldr	r2, [pc, #264]	@ (800c1dc <HAL_DMA_Init+0x144>)
 800c0d2:	641a      	str	r2, [r3, #64]	@ 0x40
 800c0d4:	e00e      	b.n	800c0f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	4b40      	ldr	r3, [pc, #256]	@ (800c1e0 <HAL_DMA_Init+0x148>)
 800c0de:	4413      	add	r3, r2
 800c0e0:	4a3d      	ldr	r2, [pc, #244]	@ (800c1d8 <HAL_DMA_Init+0x140>)
 800c0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e6:	091b      	lsrs	r3, r3, #4
 800c0e8:	009a      	lsls	r2, r3, #2
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a3c      	ldr	r2, [pc, #240]	@ (800c1e4 <HAL_DMA_Init+0x14c>)
 800c0f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c10a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c10e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c118:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a1b      	ldr	r3, [r3, #32]
 800c136:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c138:	68fa      	ldr	r2, [r7, #12]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f9bc 	bl	800c4c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c154:	d102      	bne.n	800c15c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	685a      	ldr	r2, [r3, #4]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c164:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c168:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c172:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d010      	beq.n	800c19e <HAL_DMA_Init+0x106>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	2b04      	cmp	r3, #4
 800c182:	d80c      	bhi.n	800c19e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 f9db 	bl	800c540 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c18e:	2200      	movs	r2, #0
 800c190:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c19a:	605a      	str	r2, [r3, #4]
 800c19c:	e008      	b.n	800c1b0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	40020407 	.word	0x40020407
 800c1d4:	bffdfff8 	.word	0xbffdfff8
 800c1d8:	cccccccd 	.word	0xcccccccd
 800c1dc:	40020000 	.word	0x40020000
 800c1e0:	bffdfbf8 	.word	0xbffdfbf8
 800c1e4:	40020400 	.word	0x40020400

0800c1e8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d101      	bne.n	800c1fa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e04f      	b.n	800c29a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c200:	b2db      	uxtb	r3, r3
 800c202:	2b02      	cmp	r3, #2
 800c204:	d008      	beq.n	800c218 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2204      	movs	r2, #4
 800c20a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	e040      	b.n	800c29a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f022 020e 	bic.w	r2, r2, #14
 800c226:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c232:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c236:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f022 0201 	bic.w	r2, r2, #1
 800c246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c24c:	f003 021c 	and.w	r2, r3, #28
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c254:	2101      	movs	r1, #1
 800c256:	fa01 f202 	lsl.w	r2, r1, r2
 800c25a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c264:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00c      	beq.n	800c288 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c27c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c286:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800c298:	2300      	movs	r3, #0
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	370c      	adds	r7, #12
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr

0800c2a6 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b084      	sub	sp, #16
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d005      	beq.n	800c2ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2204      	movs	r2, #4
 800c2c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	73fb      	strb	r3, [r7, #15]
 800c2c8:	e047      	b.n	800c35a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f022 020e 	bic.w	r2, r2, #14
 800c2d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f022 0201 	bic.w	r2, r2, #1
 800c2e8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2fe:	f003 021c 	and.w	r2, r3, #28
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c306:	2101      	movs	r1, #1
 800c308:	fa01 f202 	lsl.w	r2, r1, r2
 800c30c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c316:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00c      	beq.n	800c33a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c32a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c32e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c338:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	4798      	blx	r3
    }
  }
  return status;
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c380:	f003 031c 	and.w	r3, r3, #28
 800c384:	2204      	movs	r2, #4
 800c386:	409a      	lsls	r2, r3
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	4013      	ands	r3, r2
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d026      	beq.n	800c3de <HAL_DMA_IRQHandler+0x7a>
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	f003 0304 	and.w	r3, r3, #4
 800c396:	2b00      	cmp	r3, #0
 800c398:	d021      	beq.n	800c3de <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f003 0320 	and.w	r3, r3, #32
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d107      	bne.n	800c3b8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f022 0204 	bic.w	r2, r2, #4
 800c3b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3bc:	f003 021c 	and.w	r2, r3, #28
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3c4:	2104      	movs	r1, #4
 800c3c6:	fa01 f202 	lsl.w	r2, r1, r2
 800c3ca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d071      	beq.n	800c4b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c3dc:	e06c      	b.n	800c4b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3e2:	f003 031c 	and.w	r3, r3, #28
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	409a      	lsls	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d02e      	beq.n	800c450 <HAL_DMA_IRQHandler+0xec>
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	f003 0302 	and.w	r3, r3, #2
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d029      	beq.n	800c450 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f003 0320 	and.w	r3, r3, #32
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10b      	bne.n	800c422 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f022 020a 	bic.w	r2, r2, #10
 800c418:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2201      	movs	r2, #1
 800c41e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c426:	f003 021c 	and.w	r2, r3, #28
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c42e:	2102      	movs	r1, #2
 800c430:	fa01 f202 	lsl.w	r2, r1, r2
 800c434:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c442:	2b00      	cmp	r3, #0
 800c444:	d038      	beq.n	800c4b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c44e:	e033      	b.n	800c4b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c454:	f003 031c 	and.w	r3, r3, #28
 800c458:	2208      	movs	r2, #8
 800c45a:	409a      	lsls	r2, r3
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	4013      	ands	r3, r2
 800c460:	2b00      	cmp	r3, #0
 800c462:	d02a      	beq.n	800c4ba <HAL_DMA_IRQHandler+0x156>
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	f003 0308 	and.w	r3, r3, #8
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d025      	beq.n	800c4ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f022 020e 	bic.w	r2, r2, #14
 800c47c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c482:	f003 021c 	and.w	r2, r3, #28
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c48a:	2101      	movs	r1, #1
 800c48c:	fa01 f202 	lsl.w	r2, r1, r2
 800c490:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2201      	movs	r2, #1
 800c496:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d004      	beq.n	800c4ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c4b8:	bf00      	nop
 800c4ba:	bf00      	nop
}
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
	...

0800c4c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	4b17      	ldr	r3, [pc, #92]	@ (800c530 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d80a      	bhi.n	800c4ee <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4dc:	089b      	lsrs	r3, r3, #2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4e4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	6493      	str	r3, [r2, #72]	@ 0x48
 800c4ec:	e007      	b.n	800c4fe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4f2:	089b      	lsrs	r3, r3, #2
 800c4f4:	009a      	lsls	r2, r3, #2
 800c4f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c534 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c4f8:	4413      	add	r3, r2
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	b2db      	uxtb	r3, r3
 800c504:	3b08      	subs	r3, #8
 800c506:	4a0c      	ldr	r2, [pc, #48]	@ (800c538 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c508:	fba2 2303 	umull	r2, r3, r2, r3
 800c50c:	091b      	lsrs	r3, r3, #4
 800c50e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a0a      	ldr	r2, [pc, #40]	@ (800c53c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c514:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f003 031f 	and.w	r3, r3, #31
 800c51c:	2201      	movs	r2, #1
 800c51e:	409a      	lsls	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c524:	bf00      	nop
 800c526:	3714      	adds	r7, #20
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	40020407 	.word	0x40020407
 800c534:	4002081c 	.word	0x4002081c
 800c538:	cccccccd 	.word	0xcccccccd
 800c53c:	40020880 	.word	0x40020880

0800c540 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c550:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	4b0b      	ldr	r3, [pc, #44]	@ (800c584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c556:	4413      	add	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	461a      	mov	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4a09      	ldr	r2, [pc, #36]	@ (800c588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800c564:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3b01      	subs	r3, #1
 800c56a:	f003 0303 	and.w	r3, r3, #3
 800c56e:	2201      	movs	r2, #1
 800c570:	409a      	lsls	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800c576:	bf00      	nop
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	1000823f 	.word	0x1000823f
 800c588:	40020940 	.word	0x40020940

0800c58c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b087      	sub	sp, #28
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c596:	2300      	movs	r3, #0
 800c598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c59a:	e14c      	b.n	800c836 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	2101      	movs	r1, #1
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5a8:	4013      	ands	r3, r2
 800c5aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f000 813e 	beq.w	800c830 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	f003 0303 	and.w	r3, r3, #3
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d005      	beq.n	800c5cc <HAL_GPIO_Init+0x40>
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	f003 0303 	and.w	r3, r3, #3
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d130      	bne.n	800c62e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	2203      	movs	r2, #3
 800c5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5dc:	43db      	mvns	r3, r3
 800c5de:	693a      	ldr	r2, [r7, #16]
 800c5e0:	4013      	ands	r3, r2
 800c5e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	68da      	ldr	r2, [r3, #12]
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	005b      	lsls	r3, r3, #1
 800c5ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c602:	2201      	movs	r2, #1
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	fa02 f303 	lsl.w	r3, r2, r3
 800c60a:	43db      	mvns	r3, r3
 800c60c:	693a      	ldr	r2, [r7, #16]
 800c60e:	4013      	ands	r3, r2
 800c610:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	091b      	lsrs	r3, r3, #4
 800c618:	f003 0201 	and.w	r2, r3, #1
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	fa02 f303 	lsl.w	r3, r2, r3
 800c622:	693a      	ldr	r2, [r7, #16]
 800c624:	4313      	orrs	r3, r2
 800c626:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	693a      	ldr	r2, [r7, #16]
 800c62c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	f003 0303 	and.w	r3, r3, #3
 800c636:	2b03      	cmp	r3, #3
 800c638:	d017      	beq.n	800c66a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	2203      	movs	r2, #3
 800c646:	fa02 f303 	lsl.w	r3, r2, r3
 800c64a:	43db      	mvns	r3, r3
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	4013      	ands	r3, r2
 800c650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	689a      	ldr	r2, [r3, #8]
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	fa02 f303 	lsl.w	r3, r2, r3
 800c65e:	693a      	ldr	r2, [r7, #16]
 800c660:	4313      	orrs	r3, r2
 800c662:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	f003 0303 	and.w	r3, r3, #3
 800c672:	2b02      	cmp	r3, #2
 800c674:	d123      	bne.n	800c6be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	08da      	lsrs	r2, r3, #3
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	3208      	adds	r2, #8
 800c67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c682:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	220f      	movs	r2, #15
 800c68e:	fa02 f303 	lsl.w	r3, r2, r3
 800c692:	43db      	mvns	r3, r3
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	4013      	ands	r3, r2
 800c698:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	691a      	ldr	r2, [r3, #16]
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	f003 0307 	and.w	r3, r3, #7
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6aa:	693a      	ldr	r2, [r7, #16]
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	08da      	lsrs	r2, r3, #3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3208      	adds	r2, #8
 800c6b8:	6939      	ldr	r1, [r7, #16]
 800c6ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	2203      	movs	r2, #3
 800c6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ce:	43db      	mvns	r3, r3
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	4013      	ands	r3, r2
 800c6d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	f003 0203 	and.w	r2, r3, #3
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	005b      	lsls	r3, r3, #1
 800c6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f000 8098 	beq.w	800c830 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800c700:	4a54      	ldr	r2, [pc, #336]	@ (800c854 <HAL_GPIO_Init+0x2c8>)
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	089b      	lsrs	r3, r3, #2
 800c706:	3302      	adds	r3, #2
 800c708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c70c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	f003 0303 	and.w	r3, r3, #3
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	220f      	movs	r2, #15
 800c718:	fa02 f303 	lsl.w	r3, r2, r3
 800c71c:	43db      	mvns	r3, r3
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	4013      	ands	r3, r2
 800c722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c72a:	d019      	beq.n	800c760 <HAL_GPIO_Init+0x1d4>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a4a      	ldr	r2, [pc, #296]	@ (800c858 <HAL_GPIO_Init+0x2cc>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d013      	beq.n	800c75c <HAL_GPIO_Init+0x1d0>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a49      	ldr	r2, [pc, #292]	@ (800c85c <HAL_GPIO_Init+0x2d0>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d00d      	beq.n	800c758 <HAL_GPIO_Init+0x1cc>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a48      	ldr	r2, [pc, #288]	@ (800c860 <HAL_GPIO_Init+0x2d4>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d007      	beq.n	800c754 <HAL_GPIO_Init+0x1c8>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4a47      	ldr	r2, [pc, #284]	@ (800c864 <HAL_GPIO_Init+0x2d8>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d101      	bne.n	800c750 <HAL_GPIO_Init+0x1c4>
 800c74c:	2304      	movs	r3, #4
 800c74e:	e008      	b.n	800c762 <HAL_GPIO_Init+0x1d6>
 800c750:	2307      	movs	r3, #7
 800c752:	e006      	b.n	800c762 <HAL_GPIO_Init+0x1d6>
 800c754:	2303      	movs	r3, #3
 800c756:	e004      	b.n	800c762 <HAL_GPIO_Init+0x1d6>
 800c758:	2302      	movs	r3, #2
 800c75a:	e002      	b.n	800c762 <HAL_GPIO_Init+0x1d6>
 800c75c:	2301      	movs	r3, #1
 800c75e:	e000      	b.n	800c762 <HAL_GPIO_Init+0x1d6>
 800c760:	2300      	movs	r3, #0
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	f002 0203 	and.w	r2, r2, #3
 800c768:	0092      	lsls	r2, r2, #2
 800c76a:	4093      	lsls	r3, r2
 800c76c:	693a      	ldr	r2, [r7, #16]
 800c76e:	4313      	orrs	r3, r2
 800c770:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c772:	4938      	ldr	r1, [pc, #224]	@ (800c854 <HAL_GPIO_Init+0x2c8>)
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	089b      	lsrs	r3, r3, #2
 800c778:	3302      	adds	r3, #2
 800c77a:	693a      	ldr	r2, [r7, #16]
 800c77c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c780:	4b39      	ldr	r3, [pc, #228]	@ (800c868 <HAL_GPIO_Init+0x2dc>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	43db      	mvns	r3, r3
 800c78a:	693a      	ldr	r2, [r7, #16]
 800c78c:	4013      	ands	r3, r2
 800c78e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c7a4:	4a30      	ldr	r2, [pc, #192]	@ (800c868 <HAL_GPIO_Init+0x2dc>)
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c7aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c868 <HAL_GPIO_Init+0x2dc>)
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	43db      	mvns	r3, r3
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d003      	beq.n	800c7ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c7ce:	4a26      	ldr	r2, [pc, #152]	@ (800c868 <HAL_GPIO_Init+0x2dc>)
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c7d4:	4b24      	ldr	r3, [pc, #144]	@ (800c868 <HAL_GPIO_Init+0x2dc>)
 800c7d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	43db      	mvns	r3, r3
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	4013      	ands	r3, r2
 800c7e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d003      	beq.n	800c7fa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c7fa:	4a1b      	ldr	r2, [pc, #108]	@ (800c868 <HAL_GPIO_Init+0x2dc>)
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800c802:	4b19      	ldr	r3, [pc, #100]	@ (800c868 <HAL_GPIO_Init+0x2dc>)
 800c804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	43db      	mvns	r3, r3
 800c80e:	693a      	ldr	r2, [r7, #16]
 800c810:	4013      	ands	r3, r2
 800c812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800c820:	693a      	ldr	r2, [r7, #16]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	4313      	orrs	r3, r2
 800c826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c828:	4a0f      	ldr	r2, [pc, #60]	@ (800c868 <HAL_GPIO_Init+0x2dc>)
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	3301      	adds	r3, #1
 800c834:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	fa22 f303 	lsr.w	r3, r2, r3
 800c840:	2b00      	cmp	r3, #0
 800c842:	f47f aeab 	bne.w	800c59c <HAL_GPIO_Init+0x10>
  }
}
 800c846:	bf00      	nop
 800c848:	bf00      	nop
 800c84a:	371c      	adds	r7, #28
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	40010000 	.word	0x40010000
 800c858:	48000400 	.word	0x48000400
 800c85c:	48000800 	.word	0x48000800
 800c860:	48000c00 	.word	0x48000c00
 800c864:	48001000 	.word	0x48001000
 800c868:	58000800 	.word	0x58000800

0800c86c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	691a      	ldr	r2, [r3, #16]
 800c87c:	887b      	ldrh	r3, [r7, #2]
 800c87e:	4013      	ands	r3, r2
 800c880:	2b00      	cmp	r3, #0
 800c882:	d002      	beq.n	800c88a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c884:	2301      	movs	r3, #1
 800c886:	73fb      	strb	r3, [r7, #15]
 800c888:	e001      	b.n	800c88e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c88a:	2300      	movs	r3, #0
 800c88c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3714      	adds	r7, #20
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	807b      	strh	r3, [r7, #2]
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c8ac:	787b      	ldrb	r3, [r7, #1]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d003      	beq.n	800c8ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c8b2:	887a      	ldrh	r2, [r7, #2]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c8b8:	e002      	b.n	800c8c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c8ba:	887a      	ldrh	r2, [r7, #2]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c8d6:	4b08      	ldr	r3, [pc, #32]	@ (800c8f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c8d8:	68da      	ldr	r2, [r3, #12]
 800c8da:	88fb      	ldrh	r3, [r7, #6]
 800c8dc:	4013      	ands	r3, r2
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d006      	beq.n	800c8f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c8e2:	4a05      	ldr	r2, [pc, #20]	@ (800c8f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c8e4:	88fb      	ldrh	r3, [r7, #6]
 800c8e6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c8e8:	88fb      	ldrh	r3, [r7, #6]
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7f5 ff26 	bl	800273c <HAL_GPIO_EXTI_Callback>
  }
}
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	58000800 	.word	0x58000800

0800c8fc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800c902:	4b0a      	ldr	r3, [pc, #40]	@ (800c92c <HAL_HSEM_IRQHandler+0x30>)
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800c908:	4b08      	ldr	r3, [pc, #32]	@ (800c92c <HAL_HSEM_IRQHandler+0x30>)
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	43db      	mvns	r3, r3
 800c910:	4906      	ldr	r1, [pc, #24]	@ (800c92c <HAL_HSEM_IRQHandler+0x30>)
 800c912:	4013      	ands	r3, r2
 800c914:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800c916:	4a05      	ldr	r2, [pc, #20]	@ (800c92c <HAL_HSEM_IRQHandler+0x30>)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 f807 	bl	800c930 <HAL_HSEM_FreeCallback>
}
 800c922:	bf00      	nop
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	58001500 	.word	0x58001500

0800c930 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800c938:	bf00      	nop
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr

0800c944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c952:	2301      	movs	r3, #1
 800c954:	e08d      	b.n	800ca72 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d106      	bne.n	800c970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7f4 fe4c 	bl	8001608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2224      	movs	r2, #36	@ 0x24
 800c974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f022 0201 	bic.w	r2, r2, #1
 800c986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c994:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	689a      	ldr	r2, [r3, #8]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c9a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d107      	bne.n	800c9be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	689a      	ldr	r2, [r3, #8]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c9ba:	609a      	str	r2, [r3, #8]
 800c9bc:	e006      	b.n	800c9cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	689a      	ldr	r2, [r3, #8]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800c9ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	d108      	bne.n	800c9e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	685a      	ldr	r2, [r3, #4]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9e2:	605a      	str	r2, [r3, #4]
 800c9e4:	e007      	b.n	800c9f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c9f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	6812      	ldr	r2, [r2, #0]
 800ca00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ca04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68da      	ldr	r2, [r3, #12]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ca18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	691a      	ldr	r2, [r3, #16]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	695b      	ldr	r3, [r3, #20]
 800ca22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	430a      	orrs	r2, r1
 800ca32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	69d9      	ldr	r1, [r3, #28]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a1a      	ldr	r2, [r3, #32]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	430a      	orrs	r2, r1
 800ca42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f042 0201 	orr.w	r2, r2, #1
 800ca52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2220      	movs	r2, #32
 800ca5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800ca70:	2300      	movs	r3, #0
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
	...

0800ca7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b088      	sub	sp, #32
 800ca80:	af02      	add	r7, sp, #8
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	607a      	str	r2, [r7, #4]
 800ca86:	461a      	mov	r2, r3
 800ca88:	460b      	mov	r3, r1
 800ca8a:	817b      	strh	r3, [r7, #10]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	2b20      	cmp	r3, #32
 800ca9a:	f040 80fd 	bne.w	800cc98 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d101      	bne.n	800caac <HAL_I2C_Master_Transmit+0x30>
 800caa8:	2302      	movs	r3, #2
 800caaa:	e0f6      	b.n	800cc9a <HAL_I2C_Master_Transmit+0x21e>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cab4:	f7fd ffc4 	bl	800aa40 <HAL_GetTick>
 800cab8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	2319      	movs	r3, #25
 800cac0:	2201      	movs	r2, #1
 800cac2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 fdcc 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d001      	beq.n	800cad6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e0e1      	b.n	800cc9a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2221      	movs	r2, #33	@ 0x21
 800cada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2210      	movs	r2, #16
 800cae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2200      	movs	r2, #0
 800caea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	893a      	ldrh	r2, [r7, #8]
 800caf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2200      	movs	r2, #0
 800cafc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	2bff      	cmp	r3, #255	@ 0xff
 800cb06:	d906      	bls.n	800cb16 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	22ff      	movs	r2, #255	@ 0xff
 800cb0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800cb0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cb12:	617b      	str	r3, [r7, #20]
 800cb14:	e007      	b.n	800cb26 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800cb20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cb24:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d024      	beq.n	800cb78 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb32:	781a      	ldrb	r2, [r3, #0]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb3e:	1c5a      	adds	r2, r3, #1
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb56:	3b01      	subs	r3, #1
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	3301      	adds	r3, #1
 800cb66:	b2da      	uxtb	r2, r3
 800cb68:	8979      	ldrh	r1, [r7, #10]
 800cb6a:	4b4e      	ldr	r3, [pc, #312]	@ (800cca4 <HAL_I2C_Master_Transmit+0x228>)
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f000 ffc7 	bl	800db04 <I2C_TransferConfig>
 800cb76:	e066      	b.n	800cc46 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb7c:	b2da      	uxtb	r2, r3
 800cb7e:	8979      	ldrh	r1, [r7, #10]
 800cb80:	4b48      	ldr	r3, [pc, #288]	@ (800cca4 <HAL_I2C_Master_Transmit+0x228>)
 800cb82:	9300      	str	r3, [sp, #0]
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f000 ffbc 	bl	800db04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800cb8c:	e05b      	b.n	800cc46 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	6a39      	ldr	r1, [r7, #32]
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	f000 fdbf 	bl	800d716 <I2C_WaitOnTXISFlagUntilTimeout>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d001      	beq.n	800cba2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e07b      	b.n	800cc9a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cba6:	781a      	ldrb	r2, [r3, #0]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbb2:	1c5a      	adds	r2, r3, #1
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d034      	beq.n	800cc46 <HAL_I2C_Master_Transmit+0x1ca>
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d130      	bne.n	800cc46 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	2200      	movs	r2, #0
 800cbec:	2180      	movs	r1, #128	@ 0x80
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f000 fd38 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e04d      	b.n	800cc9a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	2bff      	cmp	r3, #255	@ 0xff
 800cc06:	d90e      	bls.n	800cc26 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	22ff      	movs	r2, #255	@ 0xff
 800cc0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc12:	b2da      	uxtb	r2, r3
 800cc14:	8979      	ldrh	r1, [r7, #10]
 800cc16:	2300      	movs	r3, #0
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	f000 ff70 	bl	800db04 <I2C_TransferConfig>
 800cc24:	e00f      	b.n	800cc46 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc2a:	b29a      	uxth	r2, r3
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	8979      	ldrh	r1, [r7, #10]
 800cc38:	2300      	movs	r3, #0
 800cc3a:	9300      	str	r3, [sp, #0]
 800cc3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f000 ff5f 	bl	800db04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d19e      	bne.n	800cb8e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc50:	693a      	ldr	r2, [r7, #16]
 800cc52:	6a39      	ldr	r1, [r7, #32]
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f000 fda5 	bl	800d7a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d001      	beq.n	800cc64 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	e01a      	b.n	800cc9a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2220      	movs	r2, #32
 800cc6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6859      	ldr	r1, [r3, #4]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	4b0c      	ldr	r3, [pc, #48]	@ (800cca8 <HAL_I2C_Master_Transmit+0x22c>)
 800cc78:	400b      	ands	r3, r1
 800cc7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2220      	movs	r2, #32
 800cc80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	e000      	b.n	800cc9a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800cc98:	2302      	movs	r3, #2
  }
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	80002000 	.word	0x80002000
 800cca8:	fe00e800 	.word	0xfe00e800

0800ccac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b088      	sub	sp, #32
 800ccb0:	af02      	add	r7, sp, #8
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	607a      	str	r2, [r7, #4]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	460b      	mov	r3, r1
 800ccba:	817b      	strh	r3, [r7, #10]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	2b20      	cmp	r3, #32
 800ccca:	f040 80db 	bne.w	800ce84 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d101      	bne.n	800ccdc <HAL_I2C_Master_Receive+0x30>
 800ccd8:	2302      	movs	r3, #2
 800ccda:	e0d4      	b.n	800ce86 <HAL_I2C_Master_Receive+0x1da>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cce4:	f7fd feac 	bl	800aa40 <HAL_GetTick>
 800cce8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	9300      	str	r3, [sp, #0]
 800ccee:	2319      	movs	r3, #25
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f000 fcb4 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d001      	beq.n	800cd06 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	e0bf      	b.n	800ce86 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2222      	movs	r2, #34	@ 0x22
 800cd0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2210      	movs	r2, #16
 800cd12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	893a      	ldrh	r2, [r7, #8]
 800cd26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	2bff      	cmp	r3, #255	@ 0xff
 800cd36:	d90e      	bls.n	800cd56 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	22ff      	movs	r2, #255	@ 0xff
 800cd3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	8979      	ldrh	r1, [r7, #10]
 800cd46:	4b52      	ldr	r3, [pc, #328]	@ (800ce90 <HAL_I2C_Master_Receive+0x1e4>)
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f000 fed8 	bl	800db04 <I2C_TransferConfig>
 800cd54:	e06d      	b.n	800ce32 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	8979      	ldrh	r1, [r7, #10]
 800cd68:	4b49      	ldr	r3, [pc, #292]	@ (800ce90 <HAL_I2C_Master_Receive+0x1e4>)
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f000 fec7 	bl	800db04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800cd76:	e05c      	b.n	800ce32 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd78:	697a      	ldr	r2, [r7, #20]
 800cd7a:	6a39      	ldr	r1, [r7, #32]
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f000 fd55 	bl	800d82c <I2C_WaitOnRXNEFlagUntilTimeout>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d001      	beq.n	800cd8c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e07c      	b.n	800ce86 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd96:	b2d2      	uxtb	r2, r2
 800cd98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd9e:	1c5a      	adds	r2, r3, #1
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	b29a      	uxth	r2, r3
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d034      	beq.n	800ce32 <HAL_I2C_Master_Receive+0x186>
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d130      	bne.n	800ce32 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	6a3b      	ldr	r3, [r7, #32]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	2180      	movs	r1, #128	@ 0x80
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f000 fc42 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d001      	beq.n	800cdea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e04d      	b.n	800ce86 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	2bff      	cmp	r3, #255	@ 0xff
 800cdf2:	d90e      	bls.n	800ce12 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	22ff      	movs	r2, #255	@ 0xff
 800cdf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdfe:	b2da      	uxtb	r2, r3
 800ce00:	8979      	ldrh	r1, [r7, #10]
 800ce02:	2300      	movs	r3, #0
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ce0a:	68f8      	ldr	r0, [r7, #12]
 800ce0c:	f000 fe7a 	bl	800db04 <I2C_TransferConfig>
 800ce10:	e00f      	b.n	800ce32 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce16:	b29a      	uxth	r2, r3
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	8979      	ldrh	r1, [r7, #10]
 800ce24:	2300      	movs	r3, #0
 800ce26:	9300      	str	r3, [sp, #0]
 800ce28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f000 fe69 	bl	800db04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d19d      	bne.n	800cd78 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce3c:	697a      	ldr	r2, [r7, #20]
 800ce3e:	6a39      	ldr	r1, [r7, #32]
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f000 fcaf 	bl	800d7a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d001      	beq.n	800ce50 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	e01a      	b.n	800ce86 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2220      	movs	r2, #32
 800ce56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	6859      	ldr	r1, [r3, #4]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	4b0c      	ldr	r3, [pc, #48]	@ (800ce94 <HAL_I2C_Master_Receive+0x1e8>)
 800ce64:	400b      	ands	r3, r1
 800ce66:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2220      	movs	r2, #32
 800ce6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2200      	movs	r2, #0
 800ce74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	e000      	b.n	800ce86 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800ce84:	2302      	movs	r3, #2
  }
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3718      	adds	r7, #24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	80002400 	.word	0x80002400
 800ce94:	fe00e800 	.word	0xfe00e800

0800ce98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b088      	sub	sp, #32
 800ce9c:	af02      	add	r7, sp, #8
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	4608      	mov	r0, r1
 800cea2:	4611      	mov	r1, r2
 800cea4:	461a      	mov	r2, r3
 800cea6:	4603      	mov	r3, r0
 800cea8:	817b      	strh	r3, [r7, #10]
 800ceaa:	460b      	mov	r3, r1
 800ceac:	813b      	strh	r3, [r7, #8]
 800ceae:	4613      	mov	r3, r2
 800ceb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	2b20      	cmp	r3, #32
 800cebc:	f040 80f9 	bne.w	800d0b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cec0:	6a3b      	ldr	r3, [r7, #32]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <HAL_I2C_Mem_Write+0x34>
 800cec6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d105      	bne.n	800ced8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ced2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ced4:	2301      	movs	r3, #1
 800ced6:	e0ed      	b.n	800d0b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d101      	bne.n	800cee6 <HAL_I2C_Mem_Write+0x4e>
 800cee2:	2302      	movs	r3, #2
 800cee4:	e0e6      	b.n	800d0b4 <HAL_I2C_Mem_Write+0x21c>
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2201      	movs	r2, #1
 800ceea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ceee:	f7fd fda7 	bl	800aa40 <HAL_GetTick>
 800cef2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	2319      	movs	r3, #25
 800cefa:	2201      	movs	r2, #1
 800cefc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f000 fbaf 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d001      	beq.n	800cf10 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e0d1      	b.n	800d0b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2221      	movs	r2, #33	@ 0x21
 800cf14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2240      	movs	r2, #64	@ 0x40
 800cf1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2200      	movs	r2, #0
 800cf24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6a3a      	ldr	r2, [r7, #32]
 800cf2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cf30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2200      	movs	r2, #0
 800cf36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cf38:	88f8      	ldrh	r0, [r7, #6]
 800cf3a:	893a      	ldrh	r2, [r7, #8]
 800cf3c:	8979      	ldrh	r1, [r7, #10]
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	9301      	str	r3, [sp, #4]
 800cf42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	4603      	mov	r3, r0
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f000 fabf 	bl	800d4cc <I2C_RequestMemoryWrite>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d005      	beq.n	800cf60 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e0a9      	b.n	800d0b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	2bff      	cmp	r3, #255	@ 0xff
 800cf68:	d90e      	bls.n	800cf88 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	22ff      	movs	r2, #255	@ 0xff
 800cf6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	8979      	ldrh	r1, [r7, #10]
 800cf78:	2300      	movs	r3, #0
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f000 fdbf 	bl	800db04 <I2C_TransferConfig>
 800cf86:	e00f      	b.n	800cfa8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	8979      	ldrh	r1, [r7, #10]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f000 fdae 	bl	800db04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cfa8:	697a      	ldr	r2, [r7, #20]
 800cfaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f000 fbb2 	bl	800d716 <I2C_WaitOnTXISFlagUntilTimeout>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d001      	beq.n	800cfbc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e07b      	b.n	800d0b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfc0:	781a      	ldrb	r2, [r3, #0]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfcc:	1c5a      	adds	r2, r3, #1
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfe4:	3b01      	subs	r3, #1
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d034      	beq.n	800d060 <HAL_I2C_Mem_Write+0x1c8>
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d130      	bne.n	800d060 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d004:	2200      	movs	r2, #0
 800d006:	2180      	movs	r1, #128	@ 0x80
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f000 fb2b 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800d014:	2301      	movs	r3, #1
 800d016:	e04d      	b.n	800d0b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	2bff      	cmp	r3, #255	@ 0xff
 800d020:	d90e      	bls.n	800d040 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	22ff      	movs	r2, #255	@ 0xff
 800d026:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	8979      	ldrh	r1, [r7, #10]
 800d030:	2300      	movs	r3, #0
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f000 fd63 	bl	800db04 <I2C_TransferConfig>
 800d03e:	e00f      	b.n	800d060 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d044:	b29a      	uxth	r2, r3
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	8979      	ldrh	r1, [r7, #10]
 800d052:	2300      	movs	r3, #0
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f000 fd52 	bl	800db04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d064:	b29b      	uxth	r3, r3
 800d066:	2b00      	cmp	r3, #0
 800d068:	d19e      	bne.n	800cfa8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d06a:	697a      	ldr	r2, [r7, #20]
 800d06c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f000 fb98 	bl	800d7a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d001      	beq.n	800d07e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e01a      	b.n	800d0b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2220      	movs	r2, #32
 800d084:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6859      	ldr	r1, [r3, #4]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	4b0a      	ldr	r3, [pc, #40]	@ (800d0bc <HAL_I2C_Mem_Write+0x224>)
 800d092:	400b      	ands	r3, r1
 800d094:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2220      	movs	r2, #32
 800d09a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	e000      	b.n	800d0b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800d0b2:	2302      	movs	r3, #2
  }
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3718      	adds	r7, #24
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	fe00e800 	.word	0xfe00e800

0800d0c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b088      	sub	sp, #32
 800d0c4:	af02      	add	r7, sp, #8
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	4608      	mov	r0, r1
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	817b      	strh	r3, [r7, #10]
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	813b      	strh	r3, [r7, #8]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	2b20      	cmp	r3, #32
 800d0e4:	f040 80fd 	bne.w	800d2e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0e8:	6a3b      	ldr	r3, [r7, #32]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d002      	beq.n	800d0f4 <HAL_I2C_Mem_Read+0x34>
 800d0ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d105      	bne.n	800d100 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e0f1      	b.n	800d2e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d106:	2b01      	cmp	r3, #1
 800d108:	d101      	bne.n	800d10e <HAL_I2C_Mem_Read+0x4e>
 800d10a:	2302      	movs	r3, #2
 800d10c:	e0ea      	b.n	800d2e4 <HAL_I2C_Mem_Read+0x224>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2201      	movs	r2, #1
 800d112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d116:	f7fd fc93 	bl	800aa40 <HAL_GetTick>
 800d11a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	2319      	movs	r3, #25
 800d122:	2201      	movs	r2, #1
 800d124:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f000 fa9b 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800d134:	2301      	movs	r3, #1
 800d136:	e0d5      	b.n	800d2e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2222      	movs	r2, #34	@ 0x22
 800d13c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2240      	movs	r2, #64	@ 0x40
 800d144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6a3a      	ldr	r2, [r7, #32]
 800d152:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d158:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d160:	88f8      	ldrh	r0, [r7, #6]
 800d162:	893a      	ldrh	r2, [r7, #8]
 800d164:	8979      	ldrh	r1, [r7, #10]
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	9301      	str	r3, [sp, #4]
 800d16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	4603      	mov	r3, r0
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f000 f9ff 	bl	800d574 <I2C_RequestMemoryRead>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d005      	beq.n	800d188 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800d184:	2301      	movs	r3, #1
 800d186:	e0ad      	b.n	800d2e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	2bff      	cmp	r3, #255	@ 0xff
 800d190:	d90e      	bls.n	800d1b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	22ff      	movs	r2, #255	@ 0xff
 800d196:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	8979      	ldrh	r1, [r7, #10]
 800d1a0:	4b52      	ldr	r3, [pc, #328]	@ (800d2ec <HAL_I2C_Mem_Read+0x22c>)
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f000 fcab 	bl	800db04 <I2C_TransferConfig>
 800d1ae:	e00f      	b.n	800d1d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	8979      	ldrh	r1, [r7, #10]
 800d1c2:	4b4a      	ldr	r3, [pc, #296]	@ (800d2ec <HAL_I2C_Mem_Read+0x22c>)
 800d1c4:	9300      	str	r3, [sp, #0]
 800d1c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f000 fc9a 	bl	800db04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	2104      	movs	r1, #4
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f000 fa42 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e07c      	b.n	800d2e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f4:	b2d2      	uxtb	r2, r2
 800d1f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1fc:	1c5a      	adds	r2, r3, #1
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d206:	3b01      	subs	r3, #1
 800d208:	b29a      	uxth	r2, r3
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d212:	b29b      	uxth	r3, r3
 800d214:	3b01      	subs	r3, #1
 800d216:	b29a      	uxth	r2, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d220:	b29b      	uxth	r3, r3
 800d222:	2b00      	cmp	r3, #0
 800d224:	d034      	beq.n	800d290 <HAL_I2C_Mem_Read+0x1d0>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d130      	bne.n	800d290 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d234:	2200      	movs	r2, #0
 800d236:	2180      	movs	r1, #128	@ 0x80
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f000 fa13 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d001      	beq.n	800d248 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	e04d      	b.n	800d2e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	2bff      	cmp	r3, #255	@ 0xff
 800d250:	d90e      	bls.n	800d270 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	22ff      	movs	r2, #255	@ 0xff
 800d256:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	8979      	ldrh	r1, [r7, #10]
 800d260:	2300      	movs	r3, #0
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f000 fc4b 	bl	800db04 <I2C_TransferConfig>
 800d26e:	e00f      	b.n	800d290 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d274:	b29a      	uxth	r2, r3
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d27e:	b2da      	uxtb	r2, r3
 800d280:	8979      	ldrh	r1, [r7, #10]
 800d282:	2300      	movs	r3, #0
 800d284:	9300      	str	r3, [sp, #0]
 800d286:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f000 fc3a 	bl	800db04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d294:	b29b      	uxth	r3, r3
 800d296:	2b00      	cmp	r3, #0
 800d298:	d19a      	bne.n	800d1d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d29a:	697a      	ldr	r2, [r7, #20]
 800d29c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d29e:	68f8      	ldr	r0, [r7, #12]
 800d2a0:	f000 fa80 	bl	800d7a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d001      	beq.n	800d2ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e01a      	b.n	800d2e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2220      	movs	r2, #32
 800d2b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6859      	ldr	r1, [r3, #4]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d2f0 <HAL_I2C_Mem_Read+0x230>)
 800d2c2:	400b      	ands	r3, r1
 800d2c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2220      	movs	r2, #32
 800d2ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	e000      	b.n	800d2e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d2e2:	2302      	movs	r3, #2
  }
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3718      	adds	r7, #24
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	80002400 	.word	0x80002400
 800d2f0:	fe00e800 	.word	0xfe00e800

0800d2f4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08a      	sub	sp, #40	@ 0x28
 800d2f8:	af02      	add	r7, sp, #8
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	607a      	str	r2, [r7, #4]
 800d2fe:	603b      	str	r3, [r7, #0]
 800d300:	460b      	mov	r3, r1
 800d302:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800d304:	2300      	movs	r3, #0
 800d306:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b20      	cmp	r3, #32
 800d312:	f040 80d6 	bne.w	800d4c2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	699b      	ldr	r3, [r3, #24]
 800d31c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d324:	d101      	bne.n	800d32a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800d326:	2302      	movs	r3, #2
 800d328:	e0cc      	b.n	800d4c4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d330:	2b01      	cmp	r3, #1
 800d332:	d101      	bne.n	800d338 <HAL_I2C_IsDeviceReady+0x44>
 800d334:	2302      	movs	r3, #2
 800d336:	e0c5      	b.n	800d4c4 <HAL_I2C_IsDeviceReady+0x1d0>
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2201      	movs	r2, #1
 800d33c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2224      	movs	r2, #36	@ 0x24
 800d344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2200      	movs	r2, #0
 800d34c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	2b01      	cmp	r3, #1
 800d354:	d107      	bne.n	800d366 <HAL_I2C_IsDeviceReady+0x72>
 800d356:	897b      	ldrh	r3, [r7, #10]
 800d358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d35c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d360:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d364:	e006      	b.n	800d374 <HAL_I2C_IsDeviceReady+0x80>
 800d366:	897b      	ldrh	r3, [r7, #10]
 800d368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d36c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d370:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	6812      	ldr	r2, [r2, #0]
 800d378:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800d37a:	f7fd fb61 	bl	800aa40 <HAL_GetTick>
 800d37e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	699b      	ldr	r3, [r3, #24]
 800d386:	f003 0320 	and.w	r3, r3, #32
 800d38a:	2b20      	cmp	r3, #32
 800d38c:	bf0c      	ite	eq
 800d38e:	2301      	moveq	r3, #1
 800d390:	2300      	movne	r3, #0
 800d392:	b2db      	uxtb	r3, r3
 800d394:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	699b      	ldr	r3, [r3, #24]
 800d39c:	f003 0310 	and.w	r3, r3, #16
 800d3a0:	2b10      	cmp	r3, #16
 800d3a2:	bf0c      	ite	eq
 800d3a4:	2301      	moveq	r3, #1
 800d3a6:	2300      	movne	r3, #0
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d3ac:	e034      	b.n	800d418 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3b4:	d01a      	beq.n	800d3ec <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d3b6:	f7fd fb43 	bl	800aa40 <HAL_GetTick>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	1ad3      	subs	r3, r2, r3
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d302      	bcc.n	800d3cc <HAL_I2C_IsDeviceReady+0xd8>
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d10f      	bne.n	800d3ec <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2220      	movs	r2, #32
 800d3d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3d8:	f043 0220 	orr.w	r2, r3, #32
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e06b      	b.n	800d4c4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	699b      	ldr	r3, [r3, #24]
 800d3f2:	f003 0320 	and.w	r3, r3, #32
 800d3f6:	2b20      	cmp	r3, #32
 800d3f8:	bf0c      	ite	eq
 800d3fa:	2301      	moveq	r3, #1
 800d3fc:	2300      	movne	r3, #0
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	f003 0310 	and.w	r3, r3, #16
 800d40c:	2b10      	cmp	r3, #16
 800d40e:	bf0c      	ite	eq
 800d410:	2301      	moveq	r3, #1
 800d412:	2300      	movne	r3, #0
 800d414:	b2db      	uxtb	r3, r3
 800d416:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d418:	7ffb      	ldrb	r3, [r7, #31]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d102      	bne.n	800d424 <HAL_I2C_IsDeviceReady+0x130>
 800d41e:	7fbb      	ldrb	r3, [r7, #30]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d0c4      	beq.n	800d3ae <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	f003 0310 	and.w	r3, r3, #16
 800d42e:	2b10      	cmp	r3, #16
 800d430:	d01a      	beq.n	800d468 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2200      	movs	r2, #0
 800d43a:	2120      	movs	r1, #32
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	f000 f911 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d001      	beq.n	800d44c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	e03b      	b.n	800d4c4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2220      	movs	r2, #32
 800d452:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2220      	movs	r2, #32
 800d458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800d464:	2300      	movs	r3, #0
 800d466:	e02d      	b.n	800d4c4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	2200      	movs	r2, #0
 800d470:	2120      	movs	r1, #32
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f000 f8f6 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d001      	beq.n	800d482 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800d47e:	2301      	movs	r3, #1
 800d480:	e020      	b.n	800d4c4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2210      	movs	r2, #16
 800d488:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2220      	movs	r2, #32
 800d490:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	3301      	adds	r3, #1
 800d496:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	f63f af56 	bhi.w	800d34e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2220      	movs	r2, #32
 800d4a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4ae:	f043 0220 	orr.w	r2, r3, #32
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e000      	b.n	800d4c4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800d4c2:	2302      	movs	r3, #2
  }
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3720      	adds	r7, #32
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af02      	add	r7, sp, #8
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	4608      	mov	r0, r1
 800d4d6:	4611      	mov	r1, r2
 800d4d8:	461a      	mov	r2, r3
 800d4da:	4603      	mov	r3, r0
 800d4dc:	817b      	strh	r3, [r7, #10]
 800d4de:	460b      	mov	r3, r1
 800d4e0:	813b      	strh	r3, [r7, #8]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d4e6:	88fb      	ldrh	r3, [r7, #6]
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	8979      	ldrh	r1, [r7, #10]
 800d4ec:	4b20      	ldr	r3, [pc, #128]	@ (800d570 <I2C_RequestMemoryWrite+0xa4>)
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f000 fb05 	bl	800db04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d4fa:	69fa      	ldr	r2, [r7, #28]
 800d4fc:	69b9      	ldr	r1, [r7, #24]
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f000 f909 	bl	800d716 <I2C_WaitOnTXISFlagUntilTimeout>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d001      	beq.n	800d50e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d50a:	2301      	movs	r3, #1
 800d50c:	e02c      	b.n	800d568 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d50e:	88fb      	ldrh	r3, [r7, #6]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d105      	bne.n	800d520 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d514:	893b      	ldrh	r3, [r7, #8]
 800d516:	b2da      	uxtb	r2, r3
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	629a      	str	r2, [r3, #40]	@ 0x28
 800d51e:	e015      	b.n	800d54c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d520:	893b      	ldrh	r3, [r7, #8]
 800d522:	0a1b      	lsrs	r3, r3, #8
 800d524:	b29b      	uxth	r3, r3
 800d526:	b2da      	uxtb	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d52e:	69fa      	ldr	r2, [r7, #28]
 800d530:	69b9      	ldr	r1, [r7, #24]
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f000 f8ef 	bl	800d716 <I2C_WaitOnTXISFlagUntilTimeout>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d001      	beq.n	800d542 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d53e:	2301      	movs	r3, #1
 800d540:	e012      	b.n	800d568 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d542:	893b      	ldrh	r3, [r7, #8]
 800d544:	b2da      	uxtb	r2, r3
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	2200      	movs	r2, #0
 800d554:	2180      	movs	r1, #128	@ 0x80
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f000 f884 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d562:	2301      	movs	r3, #1
 800d564:	e000      	b.n	800d568 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	80002000 	.word	0x80002000

0800d574 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b086      	sub	sp, #24
 800d578:	af02      	add	r7, sp, #8
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	4608      	mov	r0, r1
 800d57e:	4611      	mov	r1, r2
 800d580:	461a      	mov	r2, r3
 800d582:	4603      	mov	r3, r0
 800d584:	817b      	strh	r3, [r7, #10]
 800d586:	460b      	mov	r3, r1
 800d588:	813b      	strh	r3, [r7, #8]
 800d58a:	4613      	mov	r3, r2
 800d58c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d58e:	88fb      	ldrh	r3, [r7, #6]
 800d590:	b2da      	uxtb	r2, r3
 800d592:	8979      	ldrh	r1, [r7, #10]
 800d594:	4b20      	ldr	r3, [pc, #128]	@ (800d618 <I2C_RequestMemoryRead+0xa4>)
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	2300      	movs	r3, #0
 800d59a:	68f8      	ldr	r0, [r7, #12]
 800d59c:	f000 fab2 	bl	800db04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5a0:	69fa      	ldr	r2, [r7, #28]
 800d5a2:	69b9      	ldr	r1, [r7, #24]
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f000 f8b6 	bl	800d716 <I2C_WaitOnTXISFlagUntilTimeout>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d001      	beq.n	800d5b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e02c      	b.n	800d60e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d5b4:	88fb      	ldrh	r3, [r7, #6]
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d105      	bne.n	800d5c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d5ba:	893b      	ldrh	r3, [r7, #8]
 800d5bc:	b2da      	uxtb	r2, r3
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	629a      	str	r2, [r3, #40]	@ 0x28
 800d5c4:	e015      	b.n	800d5f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d5c6:	893b      	ldrh	r3, [r7, #8]
 800d5c8:	0a1b      	lsrs	r3, r3, #8
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	b2da      	uxtb	r2, r3
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5d4:	69fa      	ldr	r2, [r7, #28]
 800d5d6:	69b9      	ldr	r1, [r7, #24]
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	f000 f89c 	bl	800d716 <I2C_WaitOnTXISFlagUntilTimeout>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d001      	beq.n	800d5e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e012      	b.n	800d60e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d5e8:	893b      	ldrh	r3, [r7, #8]
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2140      	movs	r1, #64	@ 0x40
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f000 f831 	bl	800d664 <I2C_WaitOnFlagUntilTimeout>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d001      	beq.n	800d60c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d608:	2301      	movs	r3, #1
 800d60a:	e000      	b.n	800d60e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	80002000 	.word	0x80002000

0800d61c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	699b      	ldr	r3, [r3, #24]
 800d62a:	f003 0302 	and.w	r3, r3, #2
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d103      	bne.n	800d63a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2200      	movs	r2, #0
 800d638:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	699b      	ldr	r3, [r3, #24]
 800d640:	f003 0301 	and.w	r3, r3, #1
 800d644:	2b01      	cmp	r3, #1
 800d646:	d007      	beq.n	800d658 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	699a      	ldr	r2, [r3, #24]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f042 0201 	orr.w	r2, r2, #1
 800d656:	619a      	str	r2, [r3, #24]
  }
}
 800d658:	bf00      	nop
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	603b      	str	r3, [r7, #0]
 800d670:	4613      	mov	r3, r2
 800d672:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d674:	e03b      	b.n	800d6ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d676:	69ba      	ldr	r2, [r7, #24]
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	68f8      	ldr	r0, [r7, #12]
 800d67c:	f000 f962 	bl	800d944 <I2C_IsErrorOccurred>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e041      	b.n	800d70e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d690:	d02d      	beq.n	800d6ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d692:	f7fd f9d5 	bl	800aa40 <HAL_GetTick>
 800d696:	4602      	mov	r2, r0
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	683a      	ldr	r2, [r7, #0]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d302      	bcc.n	800d6a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d122      	bne.n	800d6ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	699a      	ldr	r2, [r3, #24]
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	bf0c      	ite	eq
 800d6b8:	2301      	moveq	r3, #1
 800d6ba:	2300      	movne	r3, #0
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	461a      	mov	r2, r3
 800d6c0:	79fb      	ldrb	r3, [r7, #7]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d113      	bne.n	800d6ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6ca:	f043 0220 	orr.w	r2, r3, #32
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2220      	movs	r2, #32
 800d6d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e00f      	b.n	800d70e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	699a      	ldr	r2, [r3, #24]
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	68ba      	ldr	r2, [r7, #8]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	bf0c      	ite	eq
 800d6fe:	2301      	moveq	r3, #1
 800d700:	2300      	movne	r3, #0
 800d702:	b2db      	uxtb	r3, r3
 800d704:	461a      	mov	r2, r3
 800d706:	79fb      	ldrb	r3, [r7, #7]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d0b4      	beq.n	800d676 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d716:	b580      	push	{r7, lr}
 800d718:	b084      	sub	sp, #16
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	60f8      	str	r0, [r7, #12]
 800d71e:	60b9      	str	r1, [r7, #8]
 800d720:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d722:	e033      	b.n	800d78c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	68b9      	ldr	r1, [r7, #8]
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f000 f90b 	bl	800d944 <I2C_IsErrorOccurred>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d001      	beq.n	800d738 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d734:	2301      	movs	r3, #1
 800d736:	e031      	b.n	800d79c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d73e:	d025      	beq.n	800d78c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d740:	f7fd f97e 	bl	800aa40 <HAL_GetTick>
 800d744:	4602      	mov	r2, r0
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d302      	bcc.n	800d756 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d11a      	bne.n	800d78c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	f003 0302 	and.w	r3, r3, #2
 800d760:	2b02      	cmp	r3, #2
 800d762:	d013      	beq.n	800d78c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d768:	f043 0220 	orr.w	r2, r3, #32
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2220      	movs	r2, #32
 800d774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d788:	2301      	movs	r3, #1
 800d78a:	e007      	b.n	800d79c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	699b      	ldr	r3, [r3, #24]
 800d792:	f003 0302 	and.w	r3, r3, #2
 800d796:	2b02      	cmp	r3, #2
 800d798:	d1c4      	bne.n	800d724 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3710      	adds	r7, #16
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d7b0:	e02f      	b.n	800d812 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	68b9      	ldr	r1, [r7, #8]
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f000 f8c4 	bl	800d944 <I2C_IsErrorOccurred>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d001      	beq.n	800d7c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e02d      	b.n	800d822 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7c6:	f7fd f93b 	bl	800aa40 <HAL_GetTick>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d302      	bcc.n	800d7dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d11a      	bne.n	800d812 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	699b      	ldr	r3, [r3, #24]
 800d7e2:	f003 0320 	and.w	r3, r3, #32
 800d7e6:	2b20      	cmp	r3, #32
 800d7e8:	d013      	beq.n	800d812 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7ee:	f043 0220 	orr.w	r2, r3, #32
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2220      	movs	r2, #32
 800d7fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800d80e:	2301      	movs	r3, #1
 800d810:	e007      	b.n	800d822 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	699b      	ldr	r3, [r3, #24]
 800d818:	f003 0320 	and.w	r3, r3, #32
 800d81c:	2b20      	cmp	r3, #32
 800d81e:	d1c8      	bne.n	800d7b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
	...

0800d82c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b086      	sub	sp, #24
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d83c:	e071      	b.n	800d922 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	68b9      	ldr	r1, [r7, #8]
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f000 f87e 	bl	800d944 <I2C_IsErrorOccurred>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d001      	beq.n	800d852 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800d84e:	2301      	movs	r3, #1
 800d850:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	699b      	ldr	r3, [r3, #24]
 800d858:	f003 0320 	and.w	r3, r3, #32
 800d85c:	2b20      	cmp	r3, #32
 800d85e:	d13b      	bne.n	800d8d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800d860:	7dfb      	ldrb	r3, [r7, #23]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d138      	bne.n	800d8d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	f003 0304 	and.w	r3, r3, #4
 800d870:	2b04      	cmp	r3, #4
 800d872:	d105      	bne.n	800d880 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d001      	beq.n	800d880 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	699b      	ldr	r3, [r3, #24]
 800d886:	f003 0310 	and.w	r3, r3, #16
 800d88a:	2b10      	cmp	r3, #16
 800d88c:	d121      	bne.n	800d8d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2210      	movs	r2, #16
 800d894:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2204      	movs	r2, #4
 800d89a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2220      	movs	r2, #32
 800d8a2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6859      	ldr	r1, [r3, #4]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	4b24      	ldr	r3, [pc, #144]	@ (800d940 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800d8b0:	400b      	ands	r3, r1
 800d8b2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2220      	movs	r2, #32
 800d8b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	75fb      	strb	r3, [r7, #23]
 800d8d0:	e002      	b.n	800d8d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800d8d8:	f7fd f8b2 	bl	800aa40 <HAL_GetTick>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d302      	bcc.n	800d8ee <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d119      	bne.n	800d922 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800d8ee:	7dfb      	ldrb	r3, [r7, #23]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d116      	bne.n	800d922 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	699b      	ldr	r3, [r3, #24]
 800d8fa:	f003 0304 	and.w	r3, r3, #4
 800d8fe:	2b04      	cmp	r3, #4
 800d900:	d00f      	beq.n	800d922 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d906:	f043 0220 	orr.w	r2, r3, #32
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2220      	movs	r2, #32
 800d912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	699b      	ldr	r3, [r3, #24]
 800d928:	f003 0304 	and.w	r3, r3, #4
 800d92c:	2b04      	cmp	r3, #4
 800d92e:	d002      	beq.n	800d936 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800d930:	7dfb      	ldrb	r3, [r7, #23]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d083      	beq.n	800d83e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800d936:	7dfb      	ldrb	r3, [r7, #23]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3718      	adds	r7, #24
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	fe00e800 	.word	0xfe00e800

0800d944 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b08a      	sub	sp, #40	@ 0x28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d950:	2300      	movs	r3, #0
 800d952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	699b      	ldr	r3, [r3, #24]
 800d95c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	f003 0310 	and.w	r3, r3, #16
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d068      	beq.n	800da42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2210      	movs	r2, #16
 800d976:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d978:	e049      	b.n	800da0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d980:	d045      	beq.n	800da0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d982:	f7fd f85d 	bl	800aa40 <HAL_GetTick>
 800d986:	4602      	mov	r2, r0
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	1ad3      	subs	r3, r2, r3
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d302      	bcc.n	800d998 <I2C_IsErrorOccurred+0x54>
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d13a      	bne.n	800da0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d9a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d9aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	699b      	ldr	r3, [r3, #24]
 800d9b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d9ba:	d121      	bne.n	800da00 <I2C_IsErrorOccurred+0xbc>
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d9c2:	d01d      	beq.n	800da00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d9c4:	7cfb      	ldrb	r3, [r7, #19]
 800d9c6:	2b20      	cmp	r3, #32
 800d9c8:	d01a      	beq.n	800da00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d9d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d9da:	f7fd f831 	bl	800aa40 <HAL_GetTick>
 800d9de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d9e0:	e00e      	b.n	800da00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d9e2:	f7fd f82d 	bl	800aa40 <HAL_GetTick>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	2b19      	cmp	r3, #25
 800d9ee:	d907      	bls.n	800da00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	f043 0320 	orr.w	r3, r3, #32
 800d9f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800d9fe:	e006      	b.n	800da0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	699b      	ldr	r3, [r3, #24]
 800da06:	f003 0320 	and.w	r3, r3, #32
 800da0a:	2b20      	cmp	r3, #32
 800da0c:	d1e9      	bne.n	800d9e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	f003 0320 	and.w	r3, r3, #32
 800da18:	2b20      	cmp	r3, #32
 800da1a:	d003      	beq.n	800da24 <I2C_IsErrorOccurred+0xe0>
 800da1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da20:	2b00      	cmp	r3, #0
 800da22:	d0aa      	beq.n	800d97a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800da24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d103      	bne.n	800da34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	2220      	movs	r2, #32
 800da32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800da34:	6a3b      	ldr	r3, [r7, #32]
 800da36:	f043 0304 	orr.w	r3, r3, #4
 800da3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800da3c:	2301      	movs	r3, #1
 800da3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	699b      	ldr	r3, [r3, #24]
 800da48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da50:	2b00      	cmp	r3, #0
 800da52:	d00b      	beq.n	800da6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800da54:	6a3b      	ldr	r3, [r7, #32]
 800da56:	f043 0301 	orr.w	r3, r3, #1
 800da5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800da64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da72:	2b00      	cmp	r3, #0
 800da74:	d00b      	beq.n	800da8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	f043 0308 	orr.w	r3, r3, #8
 800da7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800da86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800da88:	2301      	movs	r3, #1
 800da8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da94:	2b00      	cmp	r3, #0
 800da96:	d00b      	beq.n	800dab0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800da98:	6a3b      	ldr	r3, [r7, #32]
 800da9a:	f043 0302 	orr.w	r3, r3, #2
 800da9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800daa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800daaa:	2301      	movs	r3, #1
 800daac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800dab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d01c      	beq.n	800daf2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f7ff fdaf 	bl	800d61c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	6859      	ldr	r1, [r3, #4]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	4b0d      	ldr	r3, [pc, #52]	@ (800db00 <I2C_IsErrorOccurred+0x1bc>)
 800daca:	400b      	ands	r3, r1
 800dacc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dad2:	6a3b      	ldr	r3, [r7, #32]
 800dad4:	431a      	orrs	r2, r3
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2220      	movs	r2, #32
 800dade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2200      	movs	r2, #0
 800daee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800daf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3728      	adds	r7, #40	@ 0x28
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	fe00e800 	.word	0xfe00e800

0800db04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800db04:	b480      	push	{r7}
 800db06:	b087      	sub	sp, #28
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	607b      	str	r3, [r7, #4]
 800db0e:	460b      	mov	r3, r1
 800db10:	817b      	strh	r3, [r7, #10]
 800db12:	4613      	mov	r3, r2
 800db14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db16:	897b      	ldrh	r3, [r7, #10]
 800db18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800db1c:	7a7b      	ldrb	r3, [r7, #9]
 800db1e:	041b      	lsls	r3, r3, #16
 800db20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db2a:	6a3b      	ldr	r3, [r7, #32]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	6a3b      	ldr	r3, [r7, #32]
 800db3c:	0d5b      	lsrs	r3, r3, #21
 800db3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800db42:	4b08      	ldr	r3, [pc, #32]	@ (800db64 <I2C_TransferConfig+0x60>)
 800db44:	430b      	orrs	r3, r1
 800db46:	43db      	mvns	r3, r3
 800db48:	ea02 0103 	and.w	r1, r2, r3
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	697a      	ldr	r2, [r7, #20]
 800db52:	430a      	orrs	r2, r1
 800db54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800db56:	bf00      	nop
 800db58:	371c      	adds	r7, #28
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	03ff63ff 	.word	0x03ff63ff

0800db68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b20      	cmp	r3, #32
 800db7c:	d138      	bne.n	800dbf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800db84:	2b01      	cmp	r3, #1
 800db86:	d101      	bne.n	800db8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800db88:	2302      	movs	r3, #2
 800db8a:	e032      	b.n	800dbf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2224      	movs	r2, #36	@ 0x24
 800db98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f022 0201 	bic.w	r2, r2, #1
 800dbaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800dbba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6819      	ldr	r1, [r3, #0]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	683a      	ldr	r2, [r7, #0]
 800dbc8:	430a      	orrs	r2, r1
 800dbca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f042 0201 	orr.w	r2, r2, #1
 800dbda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2220      	movs	r2, #32
 800dbe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dbec:	2300      	movs	r3, #0
 800dbee:	e000      	b.n	800dbf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dbf0:	2302      	movs	r3, #2
  }
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b085      	sub	sp, #20
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
 800dc06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	2b20      	cmp	r3, #32
 800dc12:	d139      	bne.n	800dc88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d101      	bne.n	800dc22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800dc1e:	2302      	movs	r3, #2
 800dc20:	e033      	b.n	800dc8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2201      	movs	r2, #1
 800dc26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2224      	movs	r2, #36	@ 0x24
 800dc2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f022 0201 	bic.w	r2, r2, #1
 800dc40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dc50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	021b      	lsls	r3, r3, #8
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f042 0201 	orr.w	r2, r2, #1
 800dc72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2220      	movs	r2, #32
 800dc78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dc84:	2300      	movs	r3, #0
 800dc86:	e000      	b.n	800dc8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800dc88:	2302      	movs	r3, #2
  }
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3714      	adds	r7, #20
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
	...

0800dc98 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800dca0:	2300      	movs	r3, #0
 800dca2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d01e      	beq.n	800dce8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800dcaa:	4b13      	ldr	r3, [pc, #76]	@ (800dcf8 <HAL_IPCC_Init+0x60>)
 800dcac:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d102      	bne.n	800dcc0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7f3 fd4a 	bl	8001754 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800dcc0:	68b8      	ldr	r0, [r7, #8]
 800dcc2:	f000 f8f5 	bl	800deb0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f8c6 	bl	800de64 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2201      	movs	r2, #1
 800dce2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800dce6:	e001      	b.n	800dcec <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800dce8:	2301      	movs	r3, #1
 800dcea:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800dcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	58000c00 	.word	0x58000c00

0800dcfc <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800dd04:	2300      	movs	r3, #0
 800dd06:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800dd08:	4b22      	ldr	r3, [pc, #136]	@ (800dd94 <HAL_IPCC_TX_IRQHandler+0x98>)
 800dd0a:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	43db      	mvns	r3, r3
 800dd12:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800dd16:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	041b      	lsls	r3, r3, #16
 800dd1e:	43db      	mvns	r3, r3
 800dd20:	697a      	ldr	r2, [r7, #20]
 800dd22:	4013      	ands	r3, r2
 800dd24:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800dd26:	e02c      	b.n	800dd82 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	f003 030f 	and.w	r3, r3, #15
 800dd2e:	3310      	adds	r3, #16
 800dd30:	2201      	movs	r2, #1
 800dd32:	fa02 f303 	lsl.w	r3, r2, r3
 800dd36:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 800dd38:	697a      	ldr	r2, [r7, #20]
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d01c      	beq.n	800dd7c <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	685a      	ldr	r2, [r3, #4]
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	431a      	orrs	r2, r3
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	3306      	adds	r3, #6
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d009      	beq.n	800dd72 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	3306      	adds	r3, #6
 800dd64:	009b      	lsls	r3, r3, #2
 800dd66:	4413      	add	r3, r2
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	6939      	ldr	r1, [r7, #16]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	43db      	mvns	r3, r3
 800dd76:	697a      	ldr	r2, [r7, #20]
 800dd78:	4013      	ands	r3, r2
 800dd7a:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1cf      	bne.n	800dd28 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 800dd88:	bf00      	nop
 800dd8a:	bf00      	nop
 800dd8c:	3718      	adds	r7, #24
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	58000c00 	.word	0x58000c00

0800dd98 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800dda0:	2300      	movs	r3, #0
 800dda2:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800dda4:	4b20      	ldr	r3, [pc, #128]	@ (800de28 <HAL_IPCC_RX_IRQHandler+0x90>)
 800dda6:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 800dda8:	4b20      	ldr	r3, [pc, #128]	@ (800de2c <HAL_IPCC_RX_IRQHandler+0x94>)
 800ddaa:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	43db      	mvns	r3, r3
 800ddb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ddb6:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	69fa      	ldr	r2, [r7, #28]
 800ddbe:	4013      	ands	r3, r2
 800ddc0:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800ddc2:	e029      	b.n	800de18 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	f003 030f 	and.w	r3, r3, #15
 800ddca:	2201      	movs	r2, #1
 800ddcc:	fa02 f303 	lsl.w	r3, r2, r3
 800ddd0:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 800ddd2:	69fa      	ldr	r2, [r7, #28]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	4013      	ands	r3, r2
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d01a      	beq.n	800de12 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	431a      	orrs	r2, r3
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	4413      	add	r3, r2
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d008      	beq.n	800de08 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	4413      	add	r3, r2
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	2201      	movs	r2, #1
 800de02:	69b9      	ldr	r1, [r7, #24]
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	43db      	mvns	r3, r3
 800de0c:	69fa      	ldr	r2, [r7, #28]
 800de0e:	4013      	ands	r3, r2
 800de10:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	3301      	adds	r3, #1
 800de16:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d1d2      	bne.n	800ddc4 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 800de1e:	bf00      	nop
 800de20:	bf00      	nop
 800de22:	3720      	adds	r7, #32
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	58000c00 	.word	0x58000c00
 800de2c:	58000c10 	.word	0x58000c10

0800de30 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800de30:	b480      	push	{r7}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	4613      	mov	r3, r2
 800de3c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800de3e:	bf00      	nop
 800de40:	3714      	adds	r7, #20
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800de4a:	b480      	push	{r7}
 800de4c:	b085      	sub	sp, #20
 800de4e:	af00      	add	r7, sp, #0
 800de50:	60f8      	str	r0, [r7, #12]
 800de52:	60b9      	str	r1, [r7, #8]
 800de54:	4613      	mov	r3, r2
 800de56:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800de58:	bf00      	nop
 800de5a:	3714      	adds	r7, #20
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800de6c:	2300      	movs	r3, #0
 800de6e:	60fb      	str	r3, [r7, #12]
 800de70:	e00f      	b.n	800de92 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	4413      	add	r3, r2
 800de7a:	4a0b      	ldr	r2, [pc, #44]	@ (800dea8 <IPCC_SetDefaultCallbacks+0x44>)
 800de7c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	3306      	adds	r3, #6
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	4413      	add	r3, r2
 800de88:	4a08      	ldr	r2, [pc, #32]	@ (800deac <IPCC_SetDefaultCallbacks+0x48>)
 800de8a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	3301      	adds	r3, #1
 800de90:	60fb      	str	r3, [r7, #12]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2b05      	cmp	r3, #5
 800de96:	d9ec      	bls.n	800de72 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800de98:	bf00      	nop
 800de9a:	bf00      	nop
 800de9c:	3714      	adds	r7, #20
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop
 800dea8:	0800de31 	.word	0x0800de31
 800deac:	0800de4b 	.word	0x0800de4b

0800deb0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2200      	movs	r2, #0
 800debc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800dec4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	223f      	movs	r2, #63	@ 0x3f
 800deca:	609a      	str	r2, [r3, #8]
}
 800decc:	bf00      	nop
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800dee0:	4b06      	ldr	r3, [pc, #24]	@ (800defc <LL_EXTI_EnableIT_0_31+0x24>)
 800dee2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800dee6:	4905      	ldr	r1, [pc, #20]	@ (800defc <LL_EXTI_EnableIT_0_31+0x24>)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4313      	orrs	r3, r2
 800deec:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	58000800 	.word	0x58000800

0800df00 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800df08:	4b07      	ldr	r3, [pc, #28]	@ (800df28 <LL_EXTI_DisableIT_0_31+0x28>)
 800df0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	43db      	mvns	r3, r3
 800df12:	4905      	ldr	r1, [pc, #20]	@ (800df28 <LL_EXTI_DisableIT_0_31+0x28>)
 800df14:	4013      	ands	r3, r2
 800df16:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800df1a:	bf00      	nop
 800df1c:	370c      	adds	r7, #12
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	58000800 	.word	0x58000800

0800df2c <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 800df34:	4b07      	ldr	r3, [pc, #28]	@ (800df54 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800df36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	43db      	mvns	r3, r3
 800df3e:	4905      	ldr	r1, [pc, #20]	@ (800df54 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800df40:	4013      	ands	r3, r2
 800df42:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
}
 800df46:	bf00      	nop
 800df48:	370c      	adds	r7, #12
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	58000800 	.word	0x58000800

0800df58 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800df60:	4b05      	ldr	r3, [pc, #20]	@ (800df78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	4904      	ldr	r1, [pc, #16]	@ (800df78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4313      	orrs	r3, r2
 800df6a:	600b      	str	r3, [r1, #0]

}
 800df6c:	bf00      	nop
 800df6e:	370c      	adds	r7, #12
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr
 800df78:	58000800 	.word	0x58000800

0800df7c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800df84:	4b06      	ldr	r3, [pc, #24]	@ (800dfa0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800df86:	681a      	ldr	r2, [r3, #0]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	43db      	mvns	r3, r3
 800df8c:	4904      	ldr	r1, [pc, #16]	@ (800dfa0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800df8e:	4013      	ands	r3, r2
 800df90:	600b      	str	r3, [r1, #0]

}
 800df92:	bf00      	nop
 800df94:	370c      	adds	r7, #12
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	58000800 	.word	0x58000800

0800dfa4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800dfac:	4b05      	ldr	r3, [pc, #20]	@ (800dfc4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800dfae:	685a      	ldr	r2, [r3, #4]
 800dfb0:	4904      	ldr	r1, [pc, #16]	@ (800dfc4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	604b      	str	r3, [r1, #4]
}
 800dfb8:	bf00      	nop
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr
 800dfc4:	58000800 	.word	0x58000800

0800dfc8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800dfd0:	4b06      	ldr	r3, [pc, #24]	@ (800dfec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	43db      	mvns	r3, r3
 800dfd8:	4904      	ldr	r1, [pc, #16]	@ (800dfec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800dfda:	4013      	ands	r3, r2
 800dfdc:	604b      	str	r3, [r1, #4]
}
 800dfde:	bf00      	nop
 800dfe0:	370c      	adds	r7, #12
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	58000800 	.word	0x58000800

0800dff0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800dff0:	b480      	push	{r7}
 800dff2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dff4:	4b05      	ldr	r3, [pc, #20]	@ (800e00c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a04      	ldr	r2, [pc, #16]	@ (800e00c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800dffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dffe:	6013      	str	r3, [r2, #0]
}
 800e000:	bf00      	nop
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	58000400 	.word	0x58000400

0800e010 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800e018:	4b1d      	ldr	r3, [pc, #116]	@ (800e090 <HAL_PWR_ConfigPVD+0x80>)
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	f023 020e 	bic.w	r2, r3, #14
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	491a      	ldr	r1, [pc, #104]	@ (800e090 <HAL_PWR_ConfigPVD+0x80>)
 800e026:	4313      	orrs	r3, r2
 800e028:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 800e02a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e02e:	f7ff ff67 	bl	800df00 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 800e032:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e036:	f7ff ff79 	bl	800df2c <LL_C2_EXTI_DisableIT_0_31>

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800e03a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e03e:	f7ff ffc3 	bl	800dfc8 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800e042:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e046:	f7ff ff99 	bl	800df7c <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e052:	2b00      	cmp	r3, #0
 800e054:	d003      	beq.n	800e05e <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800e056:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e05a:	f7ff ff3d 	bl	800ded8 <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	f003 0301 	and.w	r3, r3, #1
 800e066:	2b00      	cmp	r3, #0
 800e068:	d003      	beq.n	800e072 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800e06a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e06e:	f7ff ff73 	bl	800df58 <LL_EXTI_EnableRisingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	f003 0302 	and.w	r3, r3, #2
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d003      	beq.n	800e086 <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800e07e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e082:	f7ff ff8f 	bl	800dfa4 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800e086:	2300      	movs	r3, #0
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	58000400 	.word	0x58000400

0800e094 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800e094:	b480      	push	{r7}
 800e096:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800e098:	4b05      	ldr	r3, [pc, #20]	@ (800e0b0 <HAL_PWR_EnablePVD+0x1c>)
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	4a04      	ldr	r2, [pc, #16]	@ (800e0b0 <HAL_PWR_EnablePVD+0x1c>)
 800e09e:	f043 0301 	orr.w	r3, r3, #1
 800e0a2:	6053      	str	r3, [r2, #4]
}
 800e0a4:	bf00      	nop
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop
 800e0b0:	58000400 	.word	0x58000400

0800e0b4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 800e0bc:	4b0c      	ldr	r3, [pc, #48]	@ (800e0f0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800e0be:	68da      	ldr	r2, [r3, #12]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f003 031f 	and.w	r3, r3, #31
 800e0c6:	43db      	mvns	r3, r3
 800e0c8:	401a      	ands	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	095b      	lsrs	r3, r3, #5
 800e0ce:	4908      	ldr	r1, [pc, #32]	@ (800e0f0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800e0d4:	4b06      	ldr	r3, [pc, #24]	@ (800e0f0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800e0d6:	689a      	ldr	r2, [r3, #8]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f003 031f 	and.w	r3, r3, #31
 800e0de:	4904      	ldr	r1, [pc, #16]	@ (800e0f0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	608b      	str	r3, [r1, #8]
}
 800e0e4:	bf00      	nop
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr
 800e0f0:	58000400 	.word	0x58000400

0800e0f4 <HAL_PWR_EnterSTANDBYMode>:
  * @note  According to system power policy, system entering in Standby mode
  *        is depending on other CPU power mode.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 800e0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800e12c <HAL_PWR_EnterSTANDBYMode+0x38>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f023 0307 	bic.w	r3, r3, #7
 800e100:	4a0a      	ldr	r2, [pc, #40]	@ (800e12c <HAL_PWR_EnterSTANDBYMode+0x38>)
 800e102:	f043 0303 	orr.w	r3, r3, #3
 800e106:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e108:	4b09      	ldr	r3, [pc, #36]	@ (800e130 <HAL_PWR_EnterSTANDBYMode+0x3c>)
 800e10a:	691b      	ldr	r3, [r3, #16]
 800e10c:	4a08      	ldr	r2, [pc, #32]	@ (800e130 <HAL_PWR_EnterSTANDBYMode+0x3c>)
 800e10e:	f043 0304 	orr.w	r3, r3, #4
 800e112:	6113      	str	r3, [r2, #16]
#if defined (__CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 800e114:	bf30      	wfi

  /* Following code is executed after wake up if system did not go to STANDBY
     mode according to system power policy */

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e116:	4b06      	ldr	r3, [pc, #24]	@ (800e130 <HAL_PWR_EnterSTANDBYMode+0x3c>)
 800e118:	691b      	ldr	r3, [r3, #16]
 800e11a:	4a05      	ldr	r2, [pc, #20]	@ (800e130 <HAL_PWR_EnterSTANDBYMode+0x3c>)
 800e11c:	f023 0304 	bic.w	r3, r3, #4
 800e120:	6113      	str	r3, [r2, #16]
}
 800e122:	bf00      	nop
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	58000400 	.word	0x58000400
 800e130:	e000ed00 	.word	0xe000ed00

0800e134 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e134:	b480      	push	{r7}
 800e136:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800e138:	4b04      	ldr	r3, [pc, #16]	@ (800e14c <HAL_PWREx_GetVoltageRange+0x18>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800e140:	4618      	mov	r0, r3
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	58000400 	.word	0x58000400

0800e150 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800e150:	b480      	push	{r7}
 800e152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800e154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e15e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e162:	d101      	bne.n	800e168 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800e164:	2301      	movs	r3, #1
 800e166:	e000      	b.n	800e16a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800e168:	2300      	movs	r3, #0
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr

0800e174 <LL_RCC_HSE_Enable>:
{
 800e174:	b480      	push	{r7}
 800e176:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800e178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e186:	6013      	str	r3, [r2, #0]
}
 800e188:	bf00      	nop
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <LL_RCC_HSE_Disable>:
{
 800e192:	b480      	push	{r7}
 800e194:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800e196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e1a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e1a4:	6013      	str	r3, [r2, #0]
}
 800e1a6:	bf00      	nop
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <LL_RCC_HSE_IsReady>:
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e1b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e1be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e1c2:	d101      	bne.n	800e1c8 <LL_RCC_HSE_IsReady+0x18>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	e000      	b.n	800e1ca <LL_RCC_HSE_IsReady+0x1a>
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <LL_RCC_HSI_Enable>:
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e1d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e1e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e1e6:	6013      	str	r3, [r2, #0]
}
 800e1e8:	bf00      	nop
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr

0800e1f2 <LL_RCC_HSI_Disable>:
{
 800e1f2:	b480      	push	{r7}
 800e1f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800e1f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e204:	6013      	str	r3, [r2, #0]
}
 800e206:	bf00      	nop
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <LL_RCC_HSI_IsReady>:
{
 800e210:	b480      	push	{r7}
 800e212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e21e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e222:	d101      	bne.n	800e228 <LL_RCC_HSI_IsReady+0x18>
 800e224:	2301      	movs	r3, #1
 800e226:	e000      	b.n	800e22a <LL_RCC_HSI_IsReady+0x1a>
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <LL_RCC_HSI_SetCalibTrimming>:
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800e23c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	061b      	lsls	r3, r3, #24
 800e24a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e24e:	4313      	orrs	r3, r2
 800e250:	604b      	str	r3, [r1, #4]
}
 800e252:	bf00      	nop
 800e254:	370c      	adds	r7, #12
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr

0800e25e <LL_RCC_HSI48_Enable>:
{
 800e25e:	b480      	push	{r7}
 800e260:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e26a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e26e:	f043 0301 	orr.w	r3, r3, #1
 800e272:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e276:	bf00      	nop
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <LL_RCC_HSI48_Disable>:
{
 800e280:	b480      	push	{r7}
 800e282:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e288:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e28c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e290:	f023 0301 	bic.w	r3, r3, #1
 800e294:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e298:	bf00      	nop
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr

0800e2a2 <LL_RCC_HSI48_IsReady>:
{
 800e2a2:	b480      	push	{r7}
 800e2a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800e2a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e2ae:	f003 0302 	and.w	r3, r3, #2
 800e2b2:	2b02      	cmp	r3, #2
 800e2b4:	d101      	bne.n	800e2ba <LL_RCC_HSI48_IsReady+0x18>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e000      	b.n	800e2bc <LL_RCC_HSI48_IsReady+0x1a>
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr

0800e2c6 <LL_RCC_LSE_Enable>:
{
 800e2c6:	b480      	push	{r7}
 800e2c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e2ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e2d6:	f043 0301 	orr.w	r3, r3, #1
 800e2da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e2de:	bf00      	nop
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <LL_RCC_LSE_Disable>:
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e2ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e2f8:	f023 0301 	bic.w	r3, r3, #1
 800e2fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e300:	bf00      	nop
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr

0800e30a <LL_RCC_LSE_EnableBypass>:
{
 800e30a:	b480      	push	{r7}
 800e30c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e30e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e316:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e31a:	f043 0304 	orr.w	r3, r3, #4
 800e31e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e322:	bf00      	nop
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <LL_RCC_LSE_DisableBypass>:
{
 800e32c:	b480      	push	{r7}
 800e32e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e338:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e33c:	f023 0304 	bic.w	r3, r3, #4
 800e340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e344:	bf00      	nop
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr

0800e34e <LL_RCC_LSE_IsReady>:
{
 800e34e:	b480      	push	{r7}
 800e350:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e35a:	f003 0302 	and.w	r3, r3, #2
 800e35e:	2b02      	cmp	r3, #2
 800e360:	d101      	bne.n	800e366 <LL_RCC_LSE_IsReady+0x18>
 800e362:	2301      	movs	r3, #1
 800e364:	e000      	b.n	800e368 <LL_RCC_LSE_IsReady+0x1a>
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr

0800e372 <LL_RCC_LSI1_Enable>:
{
 800e372:	b480      	push	{r7}
 800e374:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e37a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e37e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e382:	f043 0301 	orr.w	r3, r3, #1
 800e386:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e38a:	bf00      	nop
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <LL_RCC_LSI1_Disable>:
{
 800e394:	b480      	push	{r7}
 800e396:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e39c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e3a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e3a4:	f023 0301 	bic.w	r3, r3, #1
 800e3a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e3ac:	bf00      	nop
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr

0800e3b6 <LL_RCC_LSI1_IsReady>:
{
 800e3b6:	b480      	push	{r7}
 800e3b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e3ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e3c2:	f003 0302 	and.w	r3, r3, #2
 800e3c6:	2b02      	cmp	r3, #2
 800e3c8:	d101      	bne.n	800e3ce <LL_RCC_LSI1_IsReady+0x18>
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e000      	b.n	800e3d0 <LL_RCC_LSI1_IsReady+0x1a>
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr

0800e3da <LL_RCC_LSI2_Enable>:
{
 800e3da:	b480      	push	{r7}
 800e3dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e3de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e3e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e3ea:	f043 0304 	orr.w	r3, r3, #4
 800e3ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e3f2:	bf00      	nop
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <LL_RCC_LSI2_Disable>:
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e408:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e40c:	f023 0304 	bic.w	r3, r3, #4
 800e410:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e414:	bf00      	nop
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr

0800e41e <LL_RCC_LSI2_IsReady>:
{
 800e41e:	b480      	push	{r7}
 800e420:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e42a:	f003 0308 	and.w	r3, r3, #8
 800e42e:	2b08      	cmp	r3, #8
 800e430:	d101      	bne.n	800e436 <LL_RCC_LSI2_IsReady+0x18>
 800e432:	2301      	movs	r3, #1
 800e434:	e000      	b.n	800e438 <LL_RCC_LSI2_IsReady+0x1a>
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr

0800e442 <LL_RCC_LSI2_SetTrimming>:
{
 800e442:	b480      	push	{r7}
 800e444:	b083      	sub	sp, #12
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800e44a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e44e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e452:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	021b      	lsls	r3, r3, #8
 800e45a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e45e:	4313      	orrs	r3, r2
 800e460:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800e464:	bf00      	nop
 800e466:	370c      	adds	r7, #12
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <LL_RCC_MSI_Enable>:
{
 800e470:	b480      	push	{r7}
 800e472:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800e474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e47e:	f043 0301 	orr.w	r3, r3, #1
 800e482:	6013      	str	r3, [r2, #0]
}
 800e484:	bf00      	nop
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr

0800e48e <LL_RCC_MSI_Disable>:
{
 800e48e:	b480      	push	{r7}
 800e490:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800e492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e49c:	f023 0301 	bic.w	r3, r3, #1
 800e4a0:	6013      	str	r3, [r2, #0]
}
 800e4a2:	bf00      	nop
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <LL_RCC_MSI_IsReady>:
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e4b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f003 0302 	and.w	r3, r3, #2
 800e4ba:	2b02      	cmp	r3, #2
 800e4bc:	d101      	bne.n	800e4c2 <LL_RCC_MSI_IsReady+0x16>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e000      	b.n	800e4c4 <LL_RCC_MSI_IsReady+0x18>
 800e4c2:	2300      	movs	r3, #0
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr

0800e4ce <LL_RCC_MSI_SetRange>:
{
 800e4ce:	b480      	push	{r7}
 800e4d0:	b083      	sub	sp, #12
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800e4d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e4e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	600b      	str	r3, [r1, #0]
}
 800e4ea:	bf00      	nop
 800e4ec:	370c      	adds	r7, #12
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr

0800e4f6 <LL_RCC_MSI_GetRange>:
{
 800e4f6:	b480      	push	{r7}
 800e4f8:	b083      	sub	sp, #12
 800e4fa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800e4fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e506:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2bb0      	cmp	r3, #176	@ 0xb0
 800e50c:	d901      	bls.n	800e512 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800e50e:	23b0      	movs	r3, #176	@ 0xb0
 800e510:	607b      	str	r3, [r7, #4]
  return msiRange;
 800e512:	687b      	ldr	r3, [r7, #4]
}
 800e514:	4618      	mov	r0, r3
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <LL_RCC_MSI_SetCalibTrimming>:
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800e528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	021b      	lsls	r3, r3, #8
 800e536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e53a:	4313      	orrs	r3, r2
 800e53c:	604b      	str	r3, [r1, #4]
}
 800e53e:	bf00      	nop
 800e540:	370c      	adds	r7, #12
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr

0800e54a <LL_RCC_SetSysClkSource>:
{
 800e54a:	b480      	push	{r7}
 800e54c:	b083      	sub	sp, #12
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800e552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	f023 0203 	bic.w	r2, r3, #3
 800e55c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4313      	orrs	r3, r2
 800e564:	608b      	str	r3, [r1, #8]
}
 800e566:	bf00      	nop
 800e568:	370c      	adds	r7, #12
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr

0800e572 <LL_RCC_GetSysClkSource>:
{
 800e572:	b480      	push	{r7}
 800e574:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e57a:	689b      	ldr	r3, [r3, #8]
 800e57c:	f003 030c 	and.w	r3, r3, #12
}
 800e580:	4618      	mov	r0, r3
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <LL_RCC_SetAHBPrescaler>:
{
 800e58a:	b480      	push	{r7}
 800e58c:	b083      	sub	sp, #12
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800e592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e596:	689b      	ldr	r3, [r3, #8]
 800e598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e59c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	608b      	str	r3, [r1, #8]
}
 800e5a6:	bf00      	nop
 800e5a8:	370c      	adds	r7, #12
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr

0800e5b2 <LL_C2_RCC_SetAHBPrescaler>:
{
 800e5b2:	b480      	push	{r7}
 800e5b4:	b083      	sub	sp, #12
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800e5ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5be:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e5c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e5c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e5d2:	bf00      	nop
 800e5d4:	370c      	adds	r7, #12
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr

0800e5de <LL_RCC_SetAHB4Prescaler>:
{
 800e5de:	b480      	push	{r7}
 800e5e0:	b083      	sub	sp, #12
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800e5e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e5ee:	f023 020f 	bic.w	r2, r3, #15
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	091b      	lsrs	r3, r3, #4
 800e5f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e600:	bf00      	nop
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <LL_RCC_SetAPB1Prescaler>:
{
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800e614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e61e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4313      	orrs	r3, r2
 800e626:	608b      	str	r3, [r1, #8]
}
 800e628:	bf00      	nop
 800e62a:	370c      	adds	r7, #12
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <LL_RCC_SetAPB2Prescaler>:
{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800e63c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e646:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4313      	orrs	r3, r2
 800e64e:	608b      	str	r3, [r1, #8]
}
 800e650:	bf00      	nop
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <LL_RCC_GetAHBPrescaler>:
{
 800e65c:	b480      	push	{r7}
 800e65e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr

0800e674 <LL_RCC_GetAHB4Prescaler>:
{
 800e674:	b480      	push	{r7}
 800e676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800e678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e67c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e680:	011b      	lsls	r3, r3, #4
 800e682:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e686:	4618      	mov	r0, r3
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <LL_RCC_GetAPB1Prescaler>:
{
 800e690:	b480      	push	{r7}
 800e692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800e694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <LL_RCC_GetAPB2Prescaler>:
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800e6ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800e6c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e6ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e6d2:	6013      	str	r3, [r2, #0]
}
 800e6d4:	bf00      	nop
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr

0800e6de <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800e6de:	b480      	push	{r7}
 800e6e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800e6e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e6ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e6f0:	6013      	str	r3, [r2, #0]
}
 800e6f2:	bf00      	nop
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800e700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e70a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e70e:	d101      	bne.n	800e714 <LL_RCC_PLL_IsReady+0x18>
 800e710:	2301      	movs	r3, #1
 800e712:	e000      	b.n	800e716 <LL_RCC_PLL_IsReady+0x1a>
 800e714:	2300      	movs	r3, #0
}
 800e716:	4618      	mov	r0, r3
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e720:	b480      	push	{r7}
 800e722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	0a1b      	lsrs	r3, r3, #8
 800e72c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800e730:	4618      	mov	r0, r3
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e73a:	b480      	push	{r7}
 800e73c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e73e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800e748:	4618      	mov	r0, r3
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr

0800e752 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e752:	b480      	push	{r7}
 800e754:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800e760:	4618      	mov	r0, r3
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e76a:	b480      	push	{r7}
 800e76c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e76e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	f003 0303 	and.w	r3, r3, #3
}
 800e778:	4618      	mov	r0, r3
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr

0800e782 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800e782:	b480      	push	{r7}
 800e784:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800e786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e794:	d101      	bne.n	800e79a <LL_RCC_IsActiveFlag_HPRE+0x18>
 800e796:	2301      	movs	r3, #1
 800e798:	e000      	b.n	800e79c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800e79a:	2300      	movs	r3, #0
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr

0800e7a6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800e7a6:	b480      	push	{r7}
 800e7a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800e7aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e7b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e7ba:	d101      	bne.n	800e7c0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e000      	b.n	800e7c2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800e7d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e7d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e7dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7e0:	d101      	bne.n	800e7e6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e000      	b.n	800e7e8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800e7f2:	b480      	push	{r7}
 800e7f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800e7f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e800:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e804:	d101      	bne.n	800e80a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800e806:	2301      	movs	r3, #1
 800e808:	e000      	b.n	800e80c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr

0800e816 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800e816:	b480      	push	{r7}
 800e818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800e81a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e81e:	689b      	ldr	r3, [r3, #8]
 800e820:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e824:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e828:	d101      	bne.n	800e82e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800e82a:	2301      	movs	r3, #1
 800e82c:	e000      	b.n	800e830 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800e82e:	2300      	movs	r3, #0
}
 800e830:	4618      	mov	r0, r3
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
	...

0800e83c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e83c:	b590      	push	{r4, r7, lr}
 800e83e:	b08d      	sub	sp, #52	@ 0x34
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d101      	bne.n	800e84e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e84a:	2301      	movs	r3, #1
 800e84c:	e363      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f003 0320 	and.w	r3, r3, #32
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 808d 	beq.w	800e976 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e85c:	f7ff fe89 	bl	800e572 <LL_RCC_GetSysClkSource>
 800e860:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e862:	f7ff ff82 	bl	800e76a <LL_RCC_PLL_GetMainSource>
 800e866:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800e868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d005      	beq.n	800e87a <HAL_RCC_OscConfig+0x3e>
 800e86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e870:	2b0c      	cmp	r3, #12
 800e872:	d147      	bne.n	800e904 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800e874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e876:	2b01      	cmp	r3, #1
 800e878:	d144      	bne.n	800e904 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	69db      	ldr	r3, [r3, #28]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d101      	bne.n	800e886 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800e882:	2301      	movs	r3, #1
 800e884:	e347      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e88a:	f7ff fe34 	bl	800e4f6 <LL_RCC_MSI_GetRange>
 800e88e:	4603      	mov	r3, r0
 800e890:	429c      	cmp	r4, r3
 800e892:	d914      	bls.n	800e8be <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e898:	4618      	mov	r0, r3
 800e89a:	f000 fd2f 	bl	800f2fc <RCC_SetFlashLatencyFromMSIRange>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d001      	beq.n	800e8a8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	e336      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7ff fe0e 	bl	800e4ce <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6a1b      	ldr	r3, [r3, #32]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7ff fe32 	bl	800e520 <LL_RCC_MSI_SetCalibTrimming>
 800e8bc:	e013      	b.n	800e8e6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7ff fe03 	bl	800e4ce <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6a1b      	ldr	r3, [r3, #32]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7ff fe27 	bl	800e520 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f000 fd10 	bl	800f2fc <RCC_SetFlashLatencyFromMSIRange>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d001      	beq.n	800e8e6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	e317      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e8e6:	f000 fcc9 	bl	800f27c <HAL_RCC_GetHCLKFreq>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	4aa4      	ldr	r2, [pc, #656]	@ (800eb80 <HAL_RCC_OscConfig+0x344>)
 800e8ee:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e8f0:	4ba4      	ldr	r3, [pc, #656]	@ (800eb84 <HAL_RCC_OscConfig+0x348>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fc f855 	bl	800a9a4 <HAL_InitTick>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d039      	beq.n	800e974 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800e900:	2301      	movs	r3, #1
 800e902:	e308      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	69db      	ldr	r3, [r3, #28]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d01e      	beq.n	800e94a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e90c:	f7ff fdb0 	bl	800e470 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e910:	f7fc f896 	bl	800aa40 <HAL_GetTick>
 800e914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800e916:	e008      	b.n	800e92a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e918:	f7fc f892 	bl	800aa40 <HAL_GetTick>
 800e91c:	4602      	mov	r2, r0
 800e91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	2b02      	cmp	r3, #2
 800e924:	d901      	bls.n	800e92a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e926:	2303      	movs	r3, #3
 800e928:	e2f5      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800e92a:	f7ff fdbf 	bl	800e4ac <LL_RCC_MSI_IsReady>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d0f1      	beq.n	800e918 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e938:	4618      	mov	r0, r3
 800e93a:	f7ff fdc8 	bl	800e4ce <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6a1b      	ldr	r3, [r3, #32]
 800e942:	4618      	mov	r0, r3
 800e944:	f7ff fdec 	bl	800e520 <LL_RCC_MSI_SetCalibTrimming>
 800e948:	e015      	b.n	800e976 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e94a:	f7ff fda0 	bl	800e48e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e94e:	f7fc f877 	bl	800aa40 <HAL_GetTick>
 800e952:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800e954:	e008      	b.n	800e968 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e956:	f7fc f873 	bl	800aa40 <HAL_GetTick>
 800e95a:	4602      	mov	r2, r0
 800e95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95e:	1ad3      	subs	r3, r2, r3
 800e960:	2b02      	cmp	r3, #2
 800e962:	d901      	bls.n	800e968 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800e964:	2303      	movs	r3, #3
 800e966:	e2d6      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800e968:	f7ff fda0 	bl	800e4ac <LL_RCC_MSI_IsReady>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1f1      	bne.n	800e956 <HAL_RCC_OscConfig+0x11a>
 800e972:	e000      	b.n	800e976 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e974:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f003 0301 	and.w	r3, r3, #1
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d047      	beq.n	800ea12 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e982:	f7ff fdf6 	bl	800e572 <LL_RCC_GetSysClkSource>
 800e986:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e988:	f7ff feef 	bl	800e76a <LL_RCC_PLL_GetMainSource>
 800e98c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800e98e:	6a3b      	ldr	r3, [r7, #32]
 800e990:	2b08      	cmp	r3, #8
 800e992:	d005      	beq.n	800e9a0 <HAL_RCC_OscConfig+0x164>
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	2b0c      	cmp	r3, #12
 800e998:	d108      	bne.n	800e9ac <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	2b03      	cmp	r3, #3
 800e99e:	d105      	bne.n	800e9ac <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d134      	bne.n	800ea12 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e2b4      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e9b4:	d102      	bne.n	800e9bc <HAL_RCC_OscConfig+0x180>
 800e9b6:	f7ff fbdd 	bl	800e174 <LL_RCC_HSE_Enable>
 800e9ba:	e001      	b.n	800e9c0 <HAL_RCC_OscConfig+0x184>
 800e9bc:	f7ff fbe9 	bl	800e192 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d012      	beq.n	800e9ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9c8:	f7fc f83a 	bl	800aa40 <HAL_GetTick>
 800e9cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800e9ce:	e008      	b.n	800e9e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e9d0:	f7fc f836 	bl	800aa40 <HAL_GetTick>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d8:	1ad3      	subs	r3, r2, r3
 800e9da:	2b64      	cmp	r3, #100	@ 0x64
 800e9dc:	d901      	bls.n	800e9e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800e9de:	2303      	movs	r3, #3
 800e9e0:	e299      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800e9e2:	f7ff fbe5 	bl	800e1b0 <LL_RCC_HSE_IsReady>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d0f1      	beq.n	800e9d0 <HAL_RCC_OscConfig+0x194>
 800e9ec:	e011      	b.n	800ea12 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9ee:	f7fc f827 	bl	800aa40 <HAL_GetTick>
 800e9f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800e9f4:	e008      	b.n	800ea08 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e9f6:	f7fc f823 	bl	800aa40 <HAL_GetTick>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9fe:	1ad3      	subs	r3, r2, r3
 800ea00:	2b64      	cmp	r3, #100	@ 0x64
 800ea02:	d901      	bls.n	800ea08 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ea04:	2303      	movs	r3, #3
 800ea06:	e286      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800ea08:	f7ff fbd2 	bl	800e1b0 <LL_RCC_HSE_IsReady>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1f1      	bne.n	800e9f6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f003 0302 	and.w	r3, r3, #2
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d04c      	beq.n	800eab8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ea1e:	f7ff fda8 	bl	800e572 <LL_RCC_GetSysClkSource>
 800ea22:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ea24:	f7ff fea1 	bl	800e76a <LL_RCC_PLL_GetMainSource>
 800ea28:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	2b04      	cmp	r3, #4
 800ea2e:	d005      	beq.n	800ea3c <HAL_RCC_OscConfig+0x200>
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	2b0c      	cmp	r3, #12
 800ea34:	d10e      	bne.n	800ea54 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	d10b      	bne.n	800ea54 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d101      	bne.n	800ea48 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800ea44:	2301      	movs	r3, #1
 800ea46:	e266      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	691b      	ldr	r3, [r3, #16]
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7ff fbf1 	bl	800e234 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ea52:	e031      	b.n	800eab8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d019      	beq.n	800ea90 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ea5c:	f7ff fbba 	bl	800e1d4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea60:	f7fb ffee 	bl	800aa40 <HAL_GetTick>
 800ea64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800ea66:	e008      	b.n	800ea7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea68:	f7fb ffea 	bl	800aa40 <HAL_GetTick>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	2b02      	cmp	r3, #2
 800ea74:	d901      	bls.n	800ea7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800ea76:	2303      	movs	r3, #3
 800ea78:	e24d      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800ea7a:	f7ff fbc9 	bl	800e210 <LL_RCC_HSI_IsReady>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d0f1      	beq.n	800ea68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	691b      	ldr	r3, [r3, #16]
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff fbd3 	bl	800e234 <LL_RCC_HSI_SetCalibTrimming>
 800ea8e:	e013      	b.n	800eab8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ea90:	f7ff fbaf 	bl	800e1f2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea94:	f7fb ffd4 	bl	800aa40 <HAL_GetTick>
 800ea98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800ea9a:	e008      	b.n	800eaae <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea9c:	f7fb ffd0 	bl	800aa40 <HAL_GetTick>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa4:	1ad3      	subs	r3, r2, r3
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d901      	bls.n	800eaae <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800eaaa:	2303      	movs	r3, #3
 800eaac:	e233      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800eaae:	f7ff fbaf 	bl	800e210 <LL_RCC_HSI_IsReady>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1f1      	bne.n	800ea9c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f003 0308 	and.w	r3, r3, #8
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d106      	bne.n	800ead2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f000 80a3 	beq.w	800ec18 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	695b      	ldr	r3, [r3, #20]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d076      	beq.n	800ebc8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f003 0310 	and.w	r3, r3, #16
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d046      	beq.n	800eb74 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800eae6:	f7ff fc66 	bl	800e3b6 <LL_RCC_LSI1_IsReady>
 800eaea:	4603      	mov	r3, r0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d113      	bne.n	800eb18 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800eaf0:	f7ff fc3f 	bl	800e372 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800eaf4:	f7fb ffa4 	bl	800aa40 <HAL_GetTick>
 800eaf8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800eafa:	e008      	b.n	800eb0e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800eafc:	f7fb ffa0 	bl	800aa40 <HAL_GetTick>
 800eb00:	4602      	mov	r2, r0
 800eb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	2b02      	cmp	r3, #2
 800eb08:	d901      	bls.n	800eb0e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800eb0a:	2303      	movs	r3, #3
 800eb0c:	e203      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800eb0e:	f7ff fc52 	bl	800e3b6 <LL_RCC_LSI1_IsReady>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d0f1      	beq.n	800eafc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800eb18:	f7ff fc5f 	bl	800e3da <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb1c:	f7fb ff90 	bl	800aa40 <HAL_GetTick>
 800eb20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800eb22:	e008      	b.n	800eb36 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800eb24:	f7fb ff8c 	bl	800aa40 <HAL_GetTick>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	d901      	bls.n	800eb36 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800eb32:	2303      	movs	r3, #3
 800eb34:	e1ef      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800eb36:	f7ff fc72 	bl	800e41e <LL_RCC_LSI2_IsReady>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d0f1      	beq.n	800eb24 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	699b      	ldr	r3, [r3, #24]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff fc7c 	bl	800e442 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800eb4a:	f7ff fc23 	bl	800e394 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb4e:	f7fb ff77 	bl	800aa40 <HAL_GetTick>
 800eb52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800eb54:	e008      	b.n	800eb68 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800eb56:	f7fb ff73 	bl	800aa40 <HAL_GetTick>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	d901      	bls.n	800eb68 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800eb64:	2303      	movs	r3, #3
 800eb66:	e1d6      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800eb68:	f7ff fc25 	bl	800e3b6 <LL_RCC_LSI1_IsReady>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1f1      	bne.n	800eb56 <HAL_RCC_OscConfig+0x31a>
 800eb72:	e051      	b.n	800ec18 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800eb74:	f7ff fbfd 	bl	800e372 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb78:	f7fb ff62 	bl	800aa40 <HAL_GetTick>
 800eb7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800eb7e:	e00c      	b.n	800eb9a <HAL_RCC_OscConfig+0x35e>
 800eb80:	2000007c 	.word	0x2000007c
 800eb84:	20000090 	.word	0x20000090
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800eb88:	f7fb ff5a 	bl	800aa40 <HAL_GetTick>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	d901      	bls.n	800eb9a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800eb96:	2303      	movs	r3, #3
 800eb98:	e1bd      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800eb9a:	f7ff fc0c 	bl	800e3b6 <LL_RCC_LSI1_IsReady>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d0f1      	beq.n	800eb88 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800eba4:	f7ff fc2a 	bl	800e3fc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800eba8:	e008      	b.n	800ebbc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ebaa:	f7fb ff49 	bl	800aa40 <HAL_GetTick>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb2:	1ad3      	subs	r3, r2, r3
 800ebb4:	2b03      	cmp	r3, #3
 800ebb6:	d901      	bls.n	800ebbc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800ebb8:	2303      	movs	r3, #3
 800ebba:	e1ac      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ebbc:	f7ff fc2f 	bl	800e41e <LL_RCC_LSI2_IsReady>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1f1      	bne.n	800ebaa <HAL_RCC_OscConfig+0x36e>
 800ebc6:	e027      	b.n	800ec18 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ebc8:	f7ff fc18 	bl	800e3fc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebcc:	f7fb ff38 	bl	800aa40 <HAL_GetTick>
 800ebd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ebd2:	e008      	b.n	800ebe6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ebd4:	f7fb ff34 	bl	800aa40 <HAL_GetTick>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebdc:	1ad3      	subs	r3, r2, r3
 800ebde:	2b03      	cmp	r3, #3
 800ebe0:	d901      	bls.n	800ebe6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	e197      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ebe6:	f7ff fc1a 	bl	800e41e <LL_RCC_LSI2_IsReady>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1f1      	bne.n	800ebd4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800ebf0:	f7ff fbd0 	bl	800e394 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebf4:	f7fb ff24 	bl	800aa40 <HAL_GetTick>
 800ebf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ebfa:	e008      	b.n	800ec0e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ebfc:	f7fb ff20 	bl	800aa40 <HAL_GetTick>
 800ec00:	4602      	mov	r2, r0
 800ec02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	2b02      	cmp	r3, #2
 800ec08:	d901      	bls.n	800ec0e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800ec0a:	2303      	movs	r3, #3
 800ec0c:	e183      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ec0e:	f7ff fbd2 	bl	800e3b6 <LL_RCC_LSI1_IsReady>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d1f1      	bne.n	800ebfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f003 0304 	and.w	r3, r3, #4
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d05b      	beq.n	800ecdc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ec24:	4ba7      	ldr	r3, [pc, #668]	@ (800eec4 <HAL_RCC_OscConfig+0x688>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d114      	bne.n	800ec5a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ec30:	f7ff f9de 	bl	800dff0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ec34:	f7fb ff04 	bl	800aa40 <HAL_GetTick>
 800ec38:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ec3a:	e008      	b.n	800ec4e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ec3c:	f7fb ff00 	bl	800aa40 <HAL_GetTick>
 800ec40:	4602      	mov	r2, r0
 800ec42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec44:	1ad3      	subs	r3, r2, r3
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	d901      	bls.n	800ec4e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ec4a:	2303      	movs	r3, #3
 800ec4c:	e163      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ec4e:	4b9d      	ldr	r3, [pc, #628]	@ (800eec4 <HAL_RCC_OscConfig+0x688>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d0f0      	beq.n	800ec3c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d102      	bne.n	800ec68 <HAL_RCC_OscConfig+0x42c>
 800ec62:	f7ff fb30 	bl	800e2c6 <LL_RCC_LSE_Enable>
 800ec66:	e00c      	b.n	800ec82 <HAL_RCC_OscConfig+0x446>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	2b05      	cmp	r3, #5
 800ec6e:	d104      	bne.n	800ec7a <HAL_RCC_OscConfig+0x43e>
 800ec70:	f7ff fb4b 	bl	800e30a <LL_RCC_LSE_EnableBypass>
 800ec74:	f7ff fb27 	bl	800e2c6 <LL_RCC_LSE_Enable>
 800ec78:	e003      	b.n	800ec82 <HAL_RCC_OscConfig+0x446>
 800ec7a:	f7ff fb35 	bl	800e2e8 <LL_RCC_LSE_Disable>
 800ec7e:	f7ff fb55 	bl	800e32c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d014      	beq.n	800ecb4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec8a:	f7fb fed9 	bl	800aa40 <HAL_GetTick>
 800ec8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ec90:	e00a      	b.n	800eca8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec92:	f7fb fed5 	bl	800aa40 <HAL_GetTick>
 800ec96:	4602      	mov	r2, r0
 800ec98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d901      	bls.n	800eca8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800eca4:	2303      	movs	r3, #3
 800eca6:	e136      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800eca8:	f7ff fb51 	bl	800e34e <LL_RCC_LSE_IsReady>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d0ef      	beq.n	800ec92 <HAL_RCC_OscConfig+0x456>
 800ecb2:	e013      	b.n	800ecdc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ecb4:	f7fb fec4 	bl	800aa40 <HAL_GetTick>
 800ecb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ecba:	e00a      	b.n	800ecd2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ecbc:	f7fb fec0 	bl	800aa40 <HAL_GetTick>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc4:	1ad3      	subs	r3, r2, r3
 800ecc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d901      	bls.n	800ecd2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ecce:	2303      	movs	r3, #3
 800ecd0:	e121      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ecd2:	f7ff fb3c 	bl	800e34e <LL_RCC_LSE_IsReady>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d1ef      	bne.n	800ecbc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d02c      	beq.n	800ed42 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d014      	beq.n	800ed1a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ecf0:	f7ff fab5 	bl	800e25e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ecf4:	f7fb fea4 	bl	800aa40 <HAL_GetTick>
 800ecf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ecfa:	e008      	b.n	800ed0e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ecfc:	f7fb fea0 	bl	800aa40 <HAL_GetTick>
 800ed00:	4602      	mov	r2, r0
 800ed02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed04:	1ad3      	subs	r3, r2, r3
 800ed06:	2b02      	cmp	r3, #2
 800ed08:	d901      	bls.n	800ed0e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800ed0a:	2303      	movs	r3, #3
 800ed0c:	e103      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ed0e:	f7ff fac8 	bl	800e2a2 <LL_RCC_HSI48_IsReady>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d0f1      	beq.n	800ecfc <HAL_RCC_OscConfig+0x4c0>
 800ed18:	e013      	b.n	800ed42 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ed1a:	f7ff fab1 	bl	800e280 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed1e:	f7fb fe8f 	bl	800aa40 <HAL_GetTick>
 800ed22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ed24:	e008      	b.n	800ed38 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ed26:	f7fb fe8b 	bl	800aa40 <HAL_GetTick>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed2e:	1ad3      	subs	r3, r2, r3
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	d901      	bls.n	800ed38 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800ed34:	2303      	movs	r3, #3
 800ed36:	e0ee      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ed38:	f7ff fab3 	bl	800e2a2 <LL_RCC_HSI48_IsReady>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1f1      	bne.n	800ed26 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f000 80e4 	beq.w	800ef14 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ed4c:	f7ff fc11 	bl	800e572 <LL_RCC_GetSysClkSource>
 800ed50:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800ed52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	f040 80b4 	bne.w	800eecc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f003 0203 	and.w	r2, r3, #3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d123      	bne.n	800edba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d11c      	bne.n	800edba <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	0a1b      	lsrs	r3, r3, #8
 800ed84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d114      	bne.n	800edba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d10d      	bne.n	800edba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d106      	bne.n	800edba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d05d      	beq.n	800ee76 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	2b0c      	cmp	r3, #12
 800edbe:	d058      	beq.n	800ee72 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800edc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d001      	beq.n	800edd2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800edce:	2301      	movs	r3, #1
 800edd0:	e0a1      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800edd2:	f7ff fc84 	bl	800e6de <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800edd6:	f7fb fe33 	bl	800aa40 <HAL_GetTick>
 800edda:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eddc:	e008      	b.n	800edf0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800edde:	f7fb fe2f 	bl	800aa40 <HAL_GetTick>
 800ede2:	4602      	mov	r2, r0
 800ede4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	2b02      	cmp	r3, #2
 800edea:	d901      	bls.n	800edf0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800edec:	2303      	movs	r3, #3
 800edee:	e092      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800edf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d1ef      	bne.n	800edde <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800edfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee02:	68da      	ldr	r2, [r3, #12]
 800ee04:	4b30      	ldr	r3, [pc, #192]	@ (800eec8 <HAL_RCC_OscConfig+0x68c>)
 800ee06:	4013      	ands	r3, r2
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ee10:	4311      	orrs	r1, r2
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ee16:	0212      	lsls	r2, r2, #8
 800ee18:	4311      	orrs	r1, r2
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ee1e:	4311      	orrs	r1, r2
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ee24:	4311      	orrs	r1, r2
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ee2a:	430a      	orrs	r2, r1
 800ee2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ee30:	4313      	orrs	r3, r2
 800ee32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ee34:	f7ff fc44 	bl	800e6c0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ee38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ee42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ee46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ee48:	f7fb fdfa 	bl	800aa40 <HAL_GetTick>
 800ee4c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ee4e:	e008      	b.n	800ee62 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ee50:	f7fb fdf6 	bl	800aa40 <HAL_GetTick>
 800ee54:	4602      	mov	r2, r0
 800ee56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d901      	bls.n	800ee62 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800ee5e:	2303      	movs	r3, #3
 800ee60:	e059      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ee62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d0ef      	beq.n	800ee50 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ee70:	e050      	b.n	800ef14 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ee72:	2301      	movs	r3, #1
 800ee74:	e04f      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ee76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d147      	bne.n	800ef14 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ee84:	f7ff fc1c 	bl	800e6c0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ee88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ee92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ee96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ee98:	f7fb fdd2 	bl	800aa40 <HAL_GetTick>
 800ee9c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ee9e:	e008      	b.n	800eeb2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eea0:	f7fb fdce 	bl	800aa40 <HAL_GetTick>
 800eea4:	4602      	mov	r2, r0
 800eea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eea8:	1ad3      	subs	r3, r2, r3
 800eeaa:	2b02      	cmp	r3, #2
 800eeac:	d901      	bls.n	800eeb2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800eeae:	2303      	movs	r3, #3
 800eeb0:	e031      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eeb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d0ef      	beq.n	800eea0 <HAL_RCC_OscConfig+0x664>
 800eec0:	e028      	b.n	800ef14 <HAL_RCC_OscConfig+0x6d8>
 800eec2:	bf00      	nop
 800eec4:	58000400 	.word	0x58000400
 800eec8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	2b0c      	cmp	r3, #12
 800eed0:	d01e      	beq.n	800ef10 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eed2:	f7ff fc04 	bl	800e6de <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eed6:	f7fb fdb3 	bl	800aa40 <HAL_GetTick>
 800eeda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eedc:	e008      	b.n	800eef0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eede:	f7fb fdaf 	bl	800aa40 <HAL_GetTick>
 800eee2:	4602      	mov	r2, r0
 800eee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee6:	1ad3      	subs	r3, r2, r3
 800eee8:	2b02      	cmp	r3, #2
 800eeea:	d901      	bls.n	800eef0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800eeec:	2303      	movs	r3, #3
 800eeee:	e012      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1ef      	bne.n	800eede <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800eefe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef02:	68da      	ldr	r2, [r3, #12]
 800ef04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ef08:	4b05      	ldr	r3, [pc, #20]	@ (800ef20 <HAL_RCC_OscConfig+0x6e4>)
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	60cb      	str	r3, [r1, #12]
 800ef0e:	e001      	b.n	800ef14 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ef10:	2301      	movs	r3, #1
 800ef12:	e000      	b.n	800ef16 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800ef14:	2300      	movs	r3, #0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3734      	adds	r7, #52	@ 0x34
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd90      	pop	{r4, r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	eefefffc 	.word	0xeefefffc

0800ef24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ef34:	2301      	movs	r3, #1
 800ef36:	e12d      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ef38:	4b98      	ldr	r3, [pc, #608]	@ (800f19c <HAL_RCC_ClockConfig+0x278>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f003 0307 	and.w	r3, r3, #7
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d91b      	bls.n	800ef7e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef46:	4b95      	ldr	r3, [pc, #596]	@ (800f19c <HAL_RCC_ClockConfig+0x278>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f023 0207 	bic.w	r2, r3, #7
 800ef4e:	4993      	ldr	r1, [pc, #588]	@ (800f19c <HAL_RCC_ClockConfig+0x278>)
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	4313      	orrs	r3, r2
 800ef54:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ef56:	f7fb fd73 	bl	800aa40 <HAL_GetTick>
 800ef5a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef5c:	e008      	b.n	800ef70 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ef5e:	f7fb fd6f 	bl	800aa40 <HAL_GetTick>
 800ef62:	4602      	mov	r2, r0
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	1ad3      	subs	r3, r2, r3
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d901      	bls.n	800ef70 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800ef6c:	2303      	movs	r3, #3
 800ef6e:	e111      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef70:	4b8a      	ldr	r3, [pc, #552]	@ (800f19c <HAL_RCC_ClockConfig+0x278>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f003 0307 	and.w	r3, r3, #7
 800ef78:	683a      	ldr	r2, [r7, #0]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d1ef      	bne.n	800ef5e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f003 0302 	and.w	r3, r3, #2
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d016      	beq.n	800efb8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	689b      	ldr	r3, [r3, #8]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7ff fafb 	bl	800e58a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ef94:	f7fb fd54 	bl	800aa40 <HAL_GetTick>
 800ef98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ef9a:	e008      	b.n	800efae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ef9c:	f7fb fd50 	bl	800aa40 <HAL_GetTick>
 800efa0:	4602      	mov	r2, r0
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	1ad3      	subs	r3, r2, r3
 800efa6:	2b02      	cmp	r3, #2
 800efa8:	d901      	bls.n	800efae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800efaa:	2303      	movs	r3, #3
 800efac:	e0f2      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800efae:	f7ff fbe8 	bl	800e782 <LL_RCC_IsActiveFlag_HPRE>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d0f1      	beq.n	800ef9c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f003 0320 	and.w	r3, r3, #32
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d016      	beq.n	800eff2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	695b      	ldr	r3, [r3, #20]
 800efc8:	4618      	mov	r0, r3
 800efca:	f7ff faf2 	bl	800e5b2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800efce:	f7fb fd37 	bl	800aa40 <HAL_GetTick>
 800efd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800efd4:	e008      	b.n	800efe8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800efd6:	f7fb fd33 	bl	800aa40 <HAL_GetTick>
 800efda:	4602      	mov	r2, r0
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	d901      	bls.n	800efe8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800efe4:	2303      	movs	r3, #3
 800efe6:	e0d5      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800efe8:	f7ff fbdd 	bl	800e7a6 <LL_RCC_IsActiveFlag_C2HPRE>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d0f1      	beq.n	800efd6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800effa:	2b00      	cmp	r3, #0
 800effc:	d016      	beq.n	800f02c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	699b      	ldr	r3, [r3, #24]
 800f002:	4618      	mov	r0, r3
 800f004:	f7ff faeb 	bl	800e5de <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f008:	f7fb fd1a 	bl	800aa40 <HAL_GetTick>
 800f00c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f00e:	e008      	b.n	800f022 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f010:	f7fb fd16 	bl	800aa40 <HAL_GetTick>
 800f014:	4602      	mov	r2, r0
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	1ad3      	subs	r3, r2, r3
 800f01a:	2b02      	cmp	r3, #2
 800f01c:	d901      	bls.n	800f022 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800f01e:	2303      	movs	r3, #3
 800f020:	e0b8      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f022:	f7ff fbd3 	bl	800e7cc <LL_RCC_IsActiveFlag_SHDHPRE>
 800f026:	4603      	mov	r3, r0
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d0f1      	beq.n	800f010 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f003 0304 	and.w	r3, r3, #4
 800f034:	2b00      	cmp	r3, #0
 800f036:	d016      	beq.n	800f066 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7ff fae5 	bl	800e60c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f042:	f7fb fcfd 	bl	800aa40 <HAL_GetTick>
 800f046:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f048:	e008      	b.n	800f05c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f04a:	f7fb fcf9 	bl	800aa40 <HAL_GetTick>
 800f04e:	4602      	mov	r2, r0
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	1ad3      	subs	r3, r2, r3
 800f054:	2b02      	cmp	r3, #2
 800f056:	d901      	bls.n	800f05c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800f058:	2303      	movs	r3, #3
 800f05a:	e09b      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f05c:	f7ff fbc9 	bl	800e7f2 <LL_RCC_IsActiveFlag_PPRE1>
 800f060:	4603      	mov	r3, r0
 800f062:	2b00      	cmp	r3, #0
 800f064:	d0f1      	beq.n	800f04a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f003 0308 	and.w	r3, r3, #8
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d017      	beq.n	800f0a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	691b      	ldr	r3, [r3, #16]
 800f076:	00db      	lsls	r3, r3, #3
 800f078:	4618      	mov	r0, r3
 800f07a:	f7ff fadb 	bl	800e634 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f07e:	f7fb fcdf 	bl	800aa40 <HAL_GetTick>
 800f082:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f084:	e008      	b.n	800f098 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f086:	f7fb fcdb 	bl	800aa40 <HAL_GetTick>
 800f08a:	4602      	mov	r2, r0
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	2b02      	cmp	r3, #2
 800f092:	d901      	bls.n	800f098 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800f094:	2303      	movs	r3, #3
 800f096:	e07d      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f098:	f7ff fbbd 	bl	800e816 <LL_RCC_IsActiveFlag_PPRE2>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d0f1      	beq.n	800f086 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f003 0301 	and.w	r3, r3, #1
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d043      	beq.n	800f136 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	2b02      	cmp	r3, #2
 800f0b4:	d106      	bne.n	800f0c4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800f0b6:	f7ff f87b 	bl	800e1b0 <LL_RCC_HSE_IsReady>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d11e      	bne.n	800f0fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	e067      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	2b03      	cmp	r3, #3
 800f0ca:	d106      	bne.n	800f0da <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800f0cc:	f7ff fb16 	bl	800e6fc <LL_RCC_PLL_IsReady>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d113      	bne.n	800f0fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	e05c      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	685b      	ldr	r3, [r3, #4]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d106      	bne.n	800f0f0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800f0e2:	f7ff f9e3 	bl	800e4ac <LL_RCC_MSI_IsReady>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d108      	bne.n	800f0fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	e051      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800f0f0:	f7ff f88e 	bl	800e210 <LL_RCC_HSI_IsReady>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d101      	bne.n	800f0fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e04a      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	4618      	mov	r0, r3
 800f104:	f7ff fa21 	bl	800e54a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f108:	f7fb fc9a 	bl	800aa40 <HAL_GetTick>
 800f10c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f10e:	e00a      	b.n	800f126 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f110:	f7fb fc96 	bl	800aa40 <HAL_GetTick>
 800f114:	4602      	mov	r2, r0
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f11e:	4293      	cmp	r3, r2
 800f120:	d901      	bls.n	800f126 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800f122:	2303      	movs	r3, #3
 800f124:	e036      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f126:	f7ff fa24 	bl	800e572 <LL_RCC_GetSysClkSource>
 800f12a:	4602      	mov	r2, r0
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	429a      	cmp	r2, r3
 800f134:	d1ec      	bne.n	800f110 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f136:	4b19      	ldr	r3, [pc, #100]	@ (800f19c <HAL_RCC_ClockConfig+0x278>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f003 0307 	and.w	r3, r3, #7
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	429a      	cmp	r2, r3
 800f142:	d21b      	bcs.n	800f17c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f144:	4b15      	ldr	r3, [pc, #84]	@ (800f19c <HAL_RCC_ClockConfig+0x278>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f023 0207 	bic.w	r2, r3, #7
 800f14c:	4913      	ldr	r1, [pc, #76]	@ (800f19c <HAL_RCC_ClockConfig+0x278>)
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	4313      	orrs	r3, r2
 800f152:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f154:	f7fb fc74 	bl	800aa40 <HAL_GetTick>
 800f158:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f15a:	e008      	b.n	800f16e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f15c:	f7fb fc70 	bl	800aa40 <HAL_GetTick>
 800f160:	4602      	mov	r2, r0
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	2b02      	cmp	r3, #2
 800f168:	d901      	bls.n	800f16e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800f16a:	2303      	movs	r3, #3
 800f16c:	e012      	b.n	800f194 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f16e:	4b0b      	ldr	r3, [pc, #44]	@ (800f19c <HAL_RCC_ClockConfig+0x278>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f003 0307 	and.w	r3, r3, #7
 800f176:	683a      	ldr	r2, [r7, #0]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d1ef      	bne.n	800f15c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f17c:	f000 f87e 	bl	800f27c <HAL_RCC_GetHCLKFreq>
 800f180:	4603      	mov	r3, r0
 800f182:	4a07      	ldr	r2, [pc, #28]	@ (800f1a0 <HAL_RCC_ClockConfig+0x27c>)
 800f184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800f186:	f7fb fc67 	bl	800aa58 <HAL_GetTickPrio>
 800f18a:	4603      	mov	r3, r0
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7fb fc09 	bl	800a9a4 <HAL_InitTick>
 800f192:	4603      	mov	r3, r0
}
 800f194:	4618      	mov	r0, r3
 800f196:	3710      	adds	r7, #16
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	58004000 	.word	0x58004000
 800f1a0:	2000007c 	.word	0x2000007c

0800f1a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f1a4:	b590      	push	{r4, r7, lr}
 800f1a6:	b085      	sub	sp, #20
 800f1a8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f1aa:	f7ff f9e2 	bl	800e572 <LL_RCC_GetSysClkSource>
 800f1ae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10a      	bne.n	800f1cc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f1b6:	f7ff f99e 	bl	800e4f6 <LL_RCC_MSI_GetRange>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	091b      	lsrs	r3, r3, #4
 800f1be:	f003 030f 	and.w	r3, r3, #15
 800f1c2:	4a2b      	ldr	r2, [pc, #172]	@ (800f270 <HAL_RCC_GetSysClockFreq+0xcc>)
 800f1c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1c8:	60fb      	str	r3, [r7, #12]
 800f1ca:	e04b      	b.n	800f264 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b04      	cmp	r3, #4
 800f1d0:	d102      	bne.n	800f1d8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f1d2:	4b28      	ldr	r3, [pc, #160]	@ (800f274 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f1d4:	60fb      	str	r3, [r7, #12]
 800f1d6:	e045      	b.n	800f264 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b08      	cmp	r3, #8
 800f1dc:	d10a      	bne.n	800f1f4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f1de:	f7fe ffb7 	bl	800e150 <LL_RCC_HSE_IsEnabledDiv2>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d102      	bne.n	800f1ee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800f1e8:	4b22      	ldr	r3, [pc, #136]	@ (800f274 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f1ea:	60fb      	str	r3, [r7, #12]
 800f1ec:	e03a      	b.n	800f264 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800f1ee:	4b22      	ldr	r3, [pc, #136]	@ (800f278 <HAL_RCC_GetSysClockFreq+0xd4>)
 800f1f0:	60fb      	str	r3, [r7, #12]
 800f1f2:	e037      	b.n	800f264 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800f1f4:	f7ff fab9 	bl	800e76a <LL_RCC_PLL_GetMainSource>
 800f1f8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b02      	cmp	r3, #2
 800f1fe:	d003      	beq.n	800f208 <HAL_RCC_GetSysClockFreq+0x64>
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	2b03      	cmp	r3, #3
 800f204:	d003      	beq.n	800f20e <HAL_RCC_GetSysClockFreq+0x6a>
 800f206:	e00d      	b.n	800f224 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800f208:	4b1a      	ldr	r3, [pc, #104]	@ (800f274 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f20a:	60bb      	str	r3, [r7, #8]
        break;
 800f20c:	e015      	b.n	800f23a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f20e:	f7fe ff9f 	bl	800e150 <LL_RCC_HSE_IsEnabledDiv2>
 800f212:	4603      	mov	r3, r0
 800f214:	2b01      	cmp	r3, #1
 800f216:	d102      	bne.n	800f21e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800f218:	4b16      	ldr	r3, [pc, #88]	@ (800f274 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f21a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800f21c:	e00d      	b.n	800f23a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800f21e:	4b16      	ldr	r3, [pc, #88]	@ (800f278 <HAL_RCC_GetSysClockFreq+0xd4>)
 800f220:	60bb      	str	r3, [r7, #8]
        break;
 800f222:	e00a      	b.n	800f23a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f224:	f7ff f967 	bl	800e4f6 <LL_RCC_MSI_GetRange>
 800f228:	4603      	mov	r3, r0
 800f22a:	091b      	lsrs	r3, r3, #4
 800f22c:	f003 030f 	and.w	r3, r3, #15
 800f230:	4a0f      	ldr	r2, [pc, #60]	@ (800f270 <HAL_RCC_GetSysClockFreq+0xcc>)
 800f232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f236:	60bb      	str	r3, [r7, #8]
        break;
 800f238:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800f23a:	f7ff fa71 	bl	800e720 <LL_RCC_PLL_GetN>
 800f23e:	4602      	mov	r2, r0
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	fb03 f402 	mul.w	r4, r3, r2
 800f246:	f7ff fa84 	bl	800e752 <LL_RCC_PLL_GetDivider>
 800f24a:	4603      	mov	r3, r0
 800f24c:	091b      	lsrs	r3, r3, #4
 800f24e:	3301      	adds	r3, #1
 800f250:	fbb4 f4f3 	udiv	r4, r4, r3
 800f254:	f7ff fa71 	bl	800e73a <LL_RCC_PLL_GetR>
 800f258:	4603      	mov	r3, r0
 800f25a:	0f5b      	lsrs	r3, r3, #29
 800f25c:	3301      	adds	r3, #1
 800f25e:	fbb4 f3f3 	udiv	r3, r4, r3
 800f262:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800f264:	68fb      	ldr	r3, [r7, #12]
}
 800f266:	4618      	mov	r0, r3
 800f268:	3714      	adds	r7, #20
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd90      	pop	{r4, r7, pc}
 800f26e:	bf00      	nop
 800f270:	08016608 	.word	0x08016608
 800f274:	00f42400 	.word	0x00f42400
 800f278:	01e84800 	.word	0x01e84800

0800f27c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f27c:	b598      	push	{r3, r4, r7, lr}
 800f27e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800f280:	f7ff ff90 	bl	800f1a4 <HAL_RCC_GetSysClockFreq>
 800f284:	4604      	mov	r4, r0
 800f286:	f7ff f9e9 	bl	800e65c <LL_RCC_GetAHBPrescaler>
 800f28a:	4603      	mov	r3, r0
 800f28c:	091b      	lsrs	r3, r3, #4
 800f28e:	f003 030f 	and.w	r3, r3, #15
 800f292:	4a03      	ldr	r2, [pc, #12]	@ (800f2a0 <HAL_RCC_GetHCLKFreq+0x24>)
 800f294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f298:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	bd98      	pop	{r3, r4, r7, pc}
 800f2a0:	080165a8 	.word	0x080165a8

0800f2a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f2a4:	b598      	push	{r3, r4, r7, lr}
 800f2a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800f2a8:	f7ff ffe8 	bl	800f27c <HAL_RCC_GetHCLKFreq>
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	f7ff f9ef 	bl	800e690 <LL_RCC_GetAPB1Prescaler>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	0a1b      	lsrs	r3, r3, #8
 800f2b6:	f003 0307 	and.w	r3, r3, #7
 800f2ba:	4a04      	ldr	r2, [pc, #16]	@ (800f2cc <HAL_RCC_GetPCLK1Freq+0x28>)
 800f2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2c0:	f003 031f 	and.w	r3, r3, #31
 800f2c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	bd98      	pop	{r3, r4, r7, pc}
 800f2cc:	080165e8 	.word	0x080165e8

0800f2d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f2d0:	b598      	push	{r3, r4, r7, lr}
 800f2d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800f2d4:	f7ff ffd2 	bl	800f27c <HAL_RCC_GetHCLKFreq>
 800f2d8:	4604      	mov	r4, r0
 800f2da:	f7ff f9e5 	bl	800e6a8 <LL_RCC_GetAPB2Prescaler>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	0adb      	lsrs	r3, r3, #11
 800f2e2:	f003 0307 	and.w	r3, r3, #7
 800f2e6:	4a04      	ldr	r2, [pc, #16]	@ (800f2f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ec:	f003 031f 	and.w	r3, r3, #31
 800f2f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	bd98      	pop	{r3, r4, r7, pc}
 800f2f8:	080165e8 	.word	0x080165e8

0800f2fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800f2fc:	b590      	push	{r4, r7, lr}
 800f2fe:	b085      	sub	sp, #20
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2bb0      	cmp	r3, #176	@ 0xb0
 800f308:	d903      	bls.n	800f312 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800f30a:	4b15      	ldr	r3, [pc, #84]	@ (800f360 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f30e:	60fb      	str	r3, [r7, #12]
 800f310:	e007      	b.n	800f322 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	091b      	lsrs	r3, r3, #4
 800f316:	f003 030f 	and.w	r3, r3, #15
 800f31a:	4a11      	ldr	r2, [pc, #68]	@ (800f360 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f320:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800f322:	f7ff f9a7 	bl	800e674 <LL_RCC_GetAHB4Prescaler>
 800f326:	4603      	mov	r3, r0
 800f328:	091b      	lsrs	r3, r3, #4
 800f32a:	f003 030f 	and.w	r3, r3, #15
 800f32e:	4a0d      	ldr	r2, [pc, #52]	@ (800f364 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800f330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	fbb2 f3f3 	udiv	r3, r2, r3
 800f33a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	4a0a      	ldr	r2, [pc, #40]	@ (800f368 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800f340:	fba2 2303 	umull	r2, r3, r2, r3
 800f344:	0c9c      	lsrs	r4, r3, #18
 800f346:	f7fe fef5 	bl	800e134 <HAL_PWREx_GetVoltageRange>
 800f34a:	4603      	mov	r3, r0
 800f34c:	4619      	mov	r1, r3
 800f34e:	4620      	mov	r0, r4
 800f350:	f000 f80c 	bl	800f36c <RCC_SetFlashLatency>
 800f354:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800f356:	4618      	mov	r0, r3
 800f358:	3714      	adds	r7, #20
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd90      	pop	{r4, r7, pc}
 800f35e:	bf00      	nop
 800f360:	08016608 	.word	0x08016608
 800f364:	080165a8 	.word	0x080165a8
 800f368:	431bde83 	.word	0x431bde83

0800f36c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800f36c:	b590      	push	{r4, r7, lr}
 800f36e:	b093      	sub	sp, #76	@ 0x4c
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800f376:	4b37      	ldr	r3, [pc, #220]	@ (800f454 <RCC_SetFlashLatency+0xe8>)
 800f378:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800f37c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f37e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800f382:	4a35      	ldr	r2, [pc, #212]	@ (800f458 <RCC_SetFlashLatency+0xec>)
 800f384:	f107 031c 	add.w	r3, r7, #28
 800f388:	ca07      	ldmia	r2, {r0, r1, r2}
 800f38a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800f38e:	4b33      	ldr	r3, [pc, #204]	@ (800f45c <RCC_SetFlashLatency+0xf0>)
 800f390:	f107 040c 	add.w	r4, r7, #12
 800f394:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f396:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800f39a:	2300      	movs	r3, #0
 800f39c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f3a4:	d11a      	bne.n	800f3dc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f3aa:	e013      	b.n	800f3d4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800f3ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	3348      	adds	r3, #72	@ 0x48
 800f3b2:	443b      	add	r3, r7
 800f3b4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800f3b8:	687a      	ldr	r2, [r7, #4]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d807      	bhi.n	800f3ce <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f3be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	3348      	adds	r3, #72	@ 0x48
 800f3c4:	443b      	add	r3, r7
 800f3c6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f3ca:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f3cc:	e020      	b.n	800f410 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f3ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f3d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3d6:	2b03      	cmp	r3, #3
 800f3d8:	d9e8      	bls.n	800f3ac <RCC_SetFlashLatency+0x40>
 800f3da:	e019      	b.n	800f410 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f3dc:	2300      	movs	r3, #0
 800f3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3e0:	e013      	b.n	800f40a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800f3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3e4:	009b      	lsls	r3, r3, #2
 800f3e6:	3348      	adds	r3, #72	@ 0x48
 800f3e8:	443b      	add	r3, r7
 800f3ea:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d807      	bhi.n	800f404 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f3f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	3348      	adds	r3, #72	@ 0x48
 800f3fa:	443b      	add	r3, r7
 800f3fc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f400:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f402:	e005      	b.n	800f410 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f406:	3301      	adds	r3, #1
 800f408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f40c:	2b02      	cmp	r3, #2
 800f40e:	d9e8      	bls.n	800f3e2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800f410:	4b13      	ldr	r3, [pc, #76]	@ (800f460 <RCC_SetFlashLatency+0xf4>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f023 0207 	bic.w	r2, r3, #7
 800f418:	4911      	ldr	r1, [pc, #68]	@ (800f460 <RCC_SetFlashLatency+0xf4>)
 800f41a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f41c:	4313      	orrs	r3, r2
 800f41e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f420:	f7fb fb0e 	bl	800aa40 <HAL_GetTick>
 800f424:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f426:	e008      	b.n	800f43a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f428:	f7fb fb0a 	bl	800aa40 <HAL_GetTick>
 800f42c:	4602      	mov	r2, r0
 800f42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	2b02      	cmp	r3, #2
 800f434:	d901      	bls.n	800f43a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800f436:	2303      	movs	r3, #3
 800f438:	e007      	b.n	800f44a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f43a:	4b09      	ldr	r3, [pc, #36]	@ (800f460 <RCC_SetFlashLatency+0xf4>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f003 0307 	and.w	r3, r3, #7
 800f442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f444:	429a      	cmp	r2, r3
 800f446:	d1ef      	bne.n	800f428 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800f448:	2300      	movs	r3, #0
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	374c      	adds	r7, #76	@ 0x4c
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd90      	pop	{r4, r7, pc}
 800f452:	bf00      	nop
 800f454:	0801657c 	.word	0x0801657c
 800f458:	0801658c 	.word	0x0801658c
 800f45c:	08016598 	.word	0x08016598
 800f460:	58004000 	.word	0x58004000

0800f464 <LL_RCC_LSE_IsEnabled>:
{
 800f464:	b480      	push	{r7}
 800f466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800f468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f470:	f003 0301 	and.w	r3, r3, #1
 800f474:	2b01      	cmp	r3, #1
 800f476:	d101      	bne.n	800f47c <LL_RCC_LSE_IsEnabled+0x18>
 800f478:	2301      	movs	r3, #1
 800f47a:	e000      	b.n	800f47e <LL_RCC_LSE_IsEnabled+0x1a>
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <LL_RCC_LSE_IsReady>:
{
 800f488:	b480      	push	{r7}
 800f48a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f48c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f494:	f003 0302 	and.w	r3, r3, #2
 800f498:	2b02      	cmp	r3, #2
 800f49a:	d101      	bne.n	800f4a0 <LL_RCC_LSE_IsReady+0x18>
 800f49c:	2301      	movs	r3, #1
 800f49e:	e000      	b.n	800f4a2 <LL_RCC_LSE_IsReady+0x1a>
 800f4a0:	2300      	movs	r3, #0
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <LL_RCC_SetRFWKPClockSource>:
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800f4b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f4b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f4bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800f4c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800f4cc:	bf00      	nop
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <LL_RCC_SetSMPSClockSource>:
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800f4e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4e6:	f023 0203 	bic.w	r2, r3, #3
 800f4ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4313      	orrs	r3, r2
 800f4f2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f4f4:	bf00      	nop
 800f4f6:	370c      	adds	r7, #12
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <LL_RCC_SetSMPSPrescaler>:
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800f508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f50c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f50e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800f512:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4313      	orrs	r3, r2
 800f51a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f51c:	bf00      	nop
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr

0800f528 <LL_RCC_SetUSARTClockSource>:
{
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800f530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f538:	f023 0203 	bic.w	r2, r3, #3
 800f53c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4313      	orrs	r3, r2
 800f544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f548:	bf00      	nop
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <LL_RCC_SetLPUARTClockSource>:
{
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800f55c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f564:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f568:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4313      	orrs	r3, r2
 800f570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f574:	bf00      	nop
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <LL_RCC_SetI2CClockSource>:
{
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800f588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f58c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	091b      	lsrs	r3, r3, #4
 800f594:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f598:	43db      	mvns	r3, r3
 800f59a:	401a      	ands	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	011b      	lsls	r3, r3, #4
 800f5a0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f5a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f5ae:	bf00      	nop
 800f5b0:	370c      	adds	r7, #12
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr

0800f5ba <LL_RCC_SetLPTIMClockSource>:
{
 800f5ba:	b480      	push	{r7}
 800f5bc:	b083      	sub	sp, #12
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800f5c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	0c1b      	lsrs	r3, r3, #16
 800f5ce:	041b      	lsls	r3, r3, #16
 800f5d0:	43db      	mvns	r3, r3
 800f5d2:	401a      	ands	r2, r3
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	041b      	lsls	r3, r3, #16
 800f5d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f5e2:	bf00      	nop
 800f5e4:	370c      	adds	r7, #12
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr

0800f5ee <LL_RCC_SetSAIClockSource>:
{
 800f5ee:	b480      	push	{r7}
 800f5f0:	b083      	sub	sp, #12
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800f5f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f5fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800f602:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4313      	orrs	r3, r2
 800f60a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f60e:	bf00      	nop
 800f610:	370c      	adds	r7, #12
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr

0800f61a <LL_RCC_SetRNGClockSource>:
{
 800f61a:	b480      	push	{r7}
 800f61c:	b083      	sub	sp, #12
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800f622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f62a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800f62e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4313      	orrs	r3, r2
 800f636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f63a:	bf00      	nop
 800f63c:	370c      	adds	r7, #12
 800f63e:	46bd      	mov	sp, r7
 800f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f644:	4770      	bx	lr

0800f646 <LL_RCC_SetCLK48ClockSource>:
{
 800f646:	b480      	push	{r7}
 800f648:	b083      	sub	sp, #12
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800f64e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f656:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f65a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4313      	orrs	r3, r2
 800f662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f666:	bf00      	nop
 800f668:	370c      	adds	r7, #12
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr

0800f672 <LL_RCC_SetUSBClockSource>:
{
 800f672:	b580      	push	{r7, lr}
 800f674:	b082      	sub	sp, #8
 800f676:	af00      	add	r7, sp, #0
 800f678:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7ff ffe3 	bl	800f646 <LL_RCC_SetCLK48ClockSource>
}
 800f680:	bf00      	nop
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <LL_RCC_SetADCClockSource>:
{
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800f690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f698:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800f69c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f6a8:	bf00      	nop
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <LL_RCC_SetRTCClockSource>:
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800f6bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f6c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800f6d4:	bf00      	nop
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <LL_RCC_GetRTCClockSource>:
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800f6e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f8:	4770      	bx	lr

0800f6fa <LL_RCC_ForceBackupDomainReset>:
{
 800f6fa:	b480      	push	{r7}
 800f6fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f6fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f706:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f70a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f70e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f712:	bf00      	nop
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <LL_RCC_ReleaseBackupDomainReset>:
{
 800f71c:	b480      	push	{r7}
 800f71e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f728:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f72c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f734:	bf00      	nop
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr

0800f73e <LL_RCC_PLLSAI1_Enable>:
{
 800f73e:	b480      	push	{r7}
 800f740:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f74c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f750:	6013      	str	r3, [r2, #0]
}
 800f752:	bf00      	nop
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <LL_RCC_PLLSAI1_Disable>:
{
 800f75c:	b480      	push	{r7}
 800f75e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f76a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f76e:	6013      	str	r3, [r2, #0]
}
 800f770:	bf00      	nop
 800f772:	46bd      	mov	sp, r7
 800f774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f778:	4770      	bx	lr

0800f77a <LL_RCC_PLLSAI1_IsReady>:
{
 800f77a:	b480      	push	{r7}
 800f77c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800f77e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f78c:	d101      	bne.n	800f792 <LL_RCC_PLLSAI1_IsReady+0x18>
 800f78e:	2301      	movs	r3, #1
 800f790:	e000      	b.n	800f794 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr

0800f79e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b088      	sub	sp, #32
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d034      	beq.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f7c2:	d021      	beq.n	800f808 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800f7c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f7c8:	d81b      	bhi.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f7ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f7ce:	d01d      	beq.n	800f80c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800f7d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f7d4:	d815      	bhi.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d00b      	beq.n	800f7f2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800f7da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f7de:	d110      	bne.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800f7e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f7ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f7ee:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800f7f0:	e00d      	b.n	800f80e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f000 f947 	bl	800fa8a <RCCEx_PLLSAI1_ConfigNP>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f800:	e005      	b.n	800f80e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800f802:	2301      	movs	r3, #1
 800f804:	77fb      	strb	r3, [r7, #31]
        break;
 800f806:	e002      	b.n	800f80e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f808:	bf00      	nop
 800f80a:	e000      	b.n	800f80e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f80c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f80e:	7ffb      	ldrb	r3, [r7, #31]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d105      	bne.n	800f820 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f818:	4618      	mov	r0, r3
 800f81a:	f7ff fee8 	bl	800f5ee <LL_RCC_SetSAIClockSource>
 800f81e:	e001      	b.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f820:	7ffb      	ldrb	r3, [r7, #31]
 800f822:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d046      	beq.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800f830:	f7ff ff56 	bl	800f6e0 <LL_RCC_GetRTCClockSource>
 800f834:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f83a:	69ba      	ldr	r2, [r7, #24]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d03c      	beq.n	800f8ba <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f840:	f7fe fbd6 	bl	800dff0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800f844:	69bb      	ldr	r3, [r7, #24]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d105      	bne.n	800f856 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f84e:	4618      	mov	r0, r3
 800f850:	f7ff ff30 	bl	800f6b4 <LL_RCC_SetRTCClockSource>
 800f854:	e02e      	b.n	800f8b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800f856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f85e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800f860:	f7ff ff4b 	bl	800f6fa <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800f864:	f7ff ff5a 	bl	800f71c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f872:	4313      	orrs	r3, r2
 800f874:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800f876:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800f880:	f7ff fdf0 	bl	800f464 <LL_RCC_LSE_IsEnabled>
 800f884:	4603      	mov	r3, r0
 800f886:	2b01      	cmp	r3, #1
 800f888:	d114      	bne.n	800f8b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f88a:	f7fb f8d9 	bl	800aa40 <HAL_GetTick>
 800f88e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800f890:	e00b      	b.n	800f8aa <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f892:	f7fb f8d5 	bl	800aa40 <HAL_GetTick>
 800f896:	4602      	mov	r2, r0
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d902      	bls.n	800f8aa <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800f8a4:	2303      	movs	r3, #3
 800f8a6:	77fb      	strb	r3, [r7, #31]
              break;
 800f8a8:	e004      	b.n	800f8b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800f8aa:	f7ff fded 	bl	800f488 <LL_RCC_LSE_IsReady>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d1ee      	bne.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800f8b4:	7ffb      	ldrb	r3, [r7, #31]
 800f8b6:	77bb      	strb	r3, [r7, #30]
 800f8b8:	e001      	b.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8ba:	7ffb      	ldrb	r3, [r7, #31]
 800f8bc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f003 0301 	and.w	r3, r3, #1
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d004      	beq.n	800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	699b      	ldr	r3, [r3, #24]
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7ff fe2a 	bl	800f528 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f003 0302 	and.w	r3, r3, #2
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d004      	beq.n	800f8ea <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	69db      	ldr	r3, [r3, #28]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7ff fe35 	bl	800f554 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f003 0310 	and.w	r3, r3, #16
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d004      	beq.n	800f900 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7ff fe5d 	bl	800f5ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f003 0320 	and.w	r3, r3, #32
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d004      	beq.n	800f916 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f910:	4618      	mov	r0, r3
 800f912:	f7ff fe52 	bl	800f5ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f003 0304 	and.w	r3, r3, #4
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d004      	beq.n	800f92c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6a1b      	ldr	r3, [r3, #32]
 800f926:	4618      	mov	r0, r3
 800f928:	f7ff fe2a 	bl	800f580 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f003 0308 	and.w	r3, r3, #8
 800f934:	2b00      	cmp	r3, #0
 800f936:	d004      	beq.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7ff fe1f 	bl	800f580 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d022      	beq.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f952:	4618      	mov	r0, r3
 800f954:	f7ff fe8d 	bl	800f672 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f95c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f960:	d107      	bne.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800f962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f96c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f970:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f976:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f97a:	d10b      	bne.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	3304      	adds	r3, #4
 800f980:	4618      	mov	r0, r3
 800f982:	f000 f8dd 	bl	800fb40 <RCCEx_PLLSAI1_ConfigNQ>
 800f986:	4603      	mov	r3, r0
 800f988:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f98a:	7ffb      	ldrb	r3, [r7, #31]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d001      	beq.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800f990:	7ffb      	ldrb	r3, [r7, #31]
 800f992:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d02b      	beq.n	800f9f8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9a8:	d008      	beq.n	800f9bc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f9b2:	d003      	beq.n	800f9bc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d105      	bne.n	800f9c8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7ff fe2a 	bl	800f61a <LL_RCC_SetRNGClockSource>
 800f9c6:	e00a      	b.n	800f9de <HAL_RCCEx_PeriphCLKConfig+0x240>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f9d0:	60fb      	str	r3, [r7, #12]
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	f7ff fe21 	bl	800f61a <LL_RCC_SetRNGClockSource>
 800f9d8:	68f8      	ldr	r0, [r7, #12]
 800f9da:	f7ff fe34 	bl	800f646 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9e2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800f9e6:	d107      	bne.n	800f9f8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800f9e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9ec:	68db      	ldr	r3, [r3, #12]
 800f9ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f9f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f9f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d022      	beq.n	800fa4a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7ff fe3d 	bl	800f688 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa16:	d107      	bne.n	800fa28 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800fa18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fa22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fa26:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa30:	d10b      	bne.n	800fa4a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	3304      	adds	r3, #4
 800fa36:	4618      	mov	r0, r3
 800fa38:	f000 f8dd 	bl	800fbf6 <RCCEx_PLLSAI1_ConfigNR>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800fa40:	7ffb      	ldrb	r3, [r7, #31]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d001      	beq.n	800fa4a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800fa46:	7ffb      	ldrb	r3, [r7, #31]
 800fa48:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d004      	beq.n	800fa60 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7ff fd26 	bl	800f4ac <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d009      	beq.n	800fa80 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7ff fd45 	bl	800f500 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7ff fd2c 	bl	800f4d8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800fa80:	7fbb      	ldrb	r3, [r7, #30]
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3720      	adds	r7, #32
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b084      	sub	sp, #16
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fa92:	2300      	movs	r3, #0
 800fa94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fa96:	f7ff fe61 	bl	800f75c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fa9a:	f7fa ffd1 	bl	800aa40 <HAL_GetTick>
 800fa9e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800faa0:	e009      	b.n	800fab6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800faa2:	f7fa ffcd 	bl	800aa40 <HAL_GetTick>
 800faa6:	4602      	mov	r2, r0
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	1ad3      	subs	r3, r2, r3
 800faac:	2b02      	cmp	r3, #2
 800faae:	d902      	bls.n	800fab6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800fab0:	2303      	movs	r3, #3
 800fab2:	73fb      	strb	r3, [r7, #15]
      break;
 800fab4:	e004      	b.n	800fac0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fab6:	f7ff fe60 	bl	800f77a <LL_RCC_PLLSAI1_IsReady>
 800faba:	4603      	mov	r3, r0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d1f0      	bne.n	800faa2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800fac0:	7bfb      	ldrb	r3, [r7, #15]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d137      	bne.n	800fb36 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800faca:	691b      	ldr	r3, [r3, #16]
 800facc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	021b      	lsls	r3, r3, #8
 800fad6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fada:	4313      	orrs	r3, r2
 800fadc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800fade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fae2:	691b      	ldr	r3, [r3, #16]
 800fae4:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800faf0:	4313      	orrs	r3, r2
 800faf2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800faf4:	f7ff fe23 	bl	800f73e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800faf8:	f7fa ffa2 	bl	800aa40 <HAL_GetTick>
 800fafc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fafe:	e009      	b.n	800fb14 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fb00:	f7fa ff9e 	bl	800aa40 <HAL_GetTick>
 800fb04:	4602      	mov	r2, r0
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	2b02      	cmp	r3, #2
 800fb0c:	d902      	bls.n	800fb14 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800fb0e:	2303      	movs	r3, #3
 800fb10:	73fb      	strb	r3, [r7, #15]
        break;
 800fb12:	e004      	b.n	800fb1e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fb14:	f7ff fe31 	bl	800f77a <LL_RCC_PLLSAI1_IsReady>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d1f0      	bne.n	800fb00 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800fb1e:	7bfb      	ldrb	r3, [r7, #15]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d108      	bne.n	800fb36 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fb24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb28:	691a      	ldr	r2, [r3, #16]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	691b      	ldr	r3, [r3, #16]
 800fb2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fb32:	4313      	orrs	r3, r2
 800fb34:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fb36:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3710      	adds	r7, #16
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fb4c:	f7ff fe06 	bl	800f75c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fb50:	f7fa ff76 	bl	800aa40 <HAL_GetTick>
 800fb54:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fb56:	e009      	b.n	800fb6c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fb58:	f7fa ff72 	bl	800aa40 <HAL_GetTick>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	1ad3      	subs	r3, r2, r3
 800fb62:	2b02      	cmp	r3, #2
 800fb64:	d902      	bls.n	800fb6c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800fb66:	2303      	movs	r3, #3
 800fb68:	73fb      	strb	r3, [r7, #15]
      break;
 800fb6a:	e004      	b.n	800fb76 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fb6c:	f7ff fe05 	bl	800f77a <LL_RCC_PLLSAI1_IsReady>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d1f0      	bne.n	800fb58 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800fb76:	7bfb      	ldrb	r3, [r7, #15]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d137      	bne.n	800fbec <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fb7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb80:	691b      	ldr	r3, [r3, #16]
 800fb82:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	021b      	lsls	r3, r3, #8
 800fb8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fb90:	4313      	orrs	r3, r2
 800fb92:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800fb94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb98:	691b      	ldr	r3, [r3, #16]
 800fb9a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	689b      	ldr	r3, [r3, #8]
 800fba2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fba6:	4313      	orrs	r3, r2
 800fba8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fbaa:	f7ff fdc8 	bl	800f73e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fbae:	f7fa ff47 	bl	800aa40 <HAL_GetTick>
 800fbb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fbb4:	e009      	b.n	800fbca <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fbb6:	f7fa ff43 	bl	800aa40 <HAL_GetTick>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	1ad3      	subs	r3, r2, r3
 800fbc0:	2b02      	cmp	r3, #2
 800fbc2:	d902      	bls.n	800fbca <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800fbc4:	2303      	movs	r3, #3
 800fbc6:	73fb      	strb	r3, [r7, #15]
        break;
 800fbc8:	e004      	b.n	800fbd4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fbca:	f7ff fdd6 	bl	800f77a <LL_RCC_PLLSAI1_IsReady>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d1f0      	bne.n	800fbb6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800fbd4:	7bfb      	ldrb	r3, [r7, #15]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d108      	bne.n	800fbec <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fbda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fbde:	691a      	ldr	r2, [r3, #16]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	691b      	ldr	r3, [r3, #16]
 800fbe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b084      	sub	sp, #16
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fc02:	f7ff fdab 	bl	800f75c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fc06:	f7fa ff1b 	bl	800aa40 <HAL_GetTick>
 800fc0a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fc0c:	e009      	b.n	800fc22 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fc0e:	f7fa ff17 	bl	800aa40 <HAL_GetTick>
 800fc12:	4602      	mov	r2, r0
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	1ad3      	subs	r3, r2, r3
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	d902      	bls.n	800fc22 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800fc1c:	2303      	movs	r3, #3
 800fc1e:	73fb      	strb	r3, [r7, #15]
      break;
 800fc20:	e004      	b.n	800fc2c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fc22:	f7ff fdaa 	bl	800f77a <LL_RCC_PLLSAI1_IsReady>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d1f0      	bne.n	800fc0e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800fc2c:	7bfb      	ldrb	r3, [r7, #15]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d137      	bne.n	800fca2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fc32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc36:	691b      	ldr	r3, [r3, #16]
 800fc38:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	021b      	lsls	r3, r3, #8
 800fc42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fc46:	4313      	orrs	r3, r2
 800fc48:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800fc4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc4e:	691b      	ldr	r3, [r3, #16]
 800fc50:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fc60:	f7ff fd6d 	bl	800f73e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc64:	f7fa feec 	bl	800aa40 <HAL_GetTick>
 800fc68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fc6a:	e009      	b.n	800fc80 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fc6c:	f7fa fee8 	bl	800aa40 <HAL_GetTick>
 800fc70:	4602      	mov	r2, r0
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	1ad3      	subs	r3, r2, r3
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	d902      	bls.n	800fc80 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800fc7a:	2303      	movs	r3, #3
 800fc7c:	73fb      	strb	r3, [r7, #15]
        break;
 800fc7e:	e004      	b.n	800fc8a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fc80:	f7ff fd7b 	bl	800f77a <LL_RCC_PLLSAI1_IsReady>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d1f0      	bne.n	800fc6c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800fc8a:	7bfb      	ldrb	r3, [r7, #15]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d108      	bne.n	800fca2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fc90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc94:	691a      	ldr	r2, [r3, #16]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3710      	adds	r7, #16
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d101      	bne.n	800fcc2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	e07a      	b.n	800fdb8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800fcc8:	b2db      	uxtb	r3, r3
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d106      	bne.n	800fcdc <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f7f3 f9fa 	bl	80030d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2202      	movs	r2, #2
 800fce0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	68db      	ldr	r3, [r3, #12]
 800fcea:	f003 0310 	and.w	r3, r3, #16
 800fcee:	2b10      	cmp	r3, #16
 800fcf0:	d058      	beq.n	800fda4 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	22ca      	movs	r2, #202	@ 0xca
 800fcf8:	625a      	str	r2, [r3, #36]	@ 0x24
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2253      	movs	r2, #83	@ 0x53
 800fd00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f882 	bl	800fe0c <RTC_EnterInitMode>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800fd0c:	7bfb      	ldrb	r3, [r7, #15]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d12c      	bne.n	800fd6c <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	689b      	ldr	r3, [r3, #8]
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	6812      	ldr	r2, [r2, #0]
 800fd1c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fd20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd24:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6899      	ldr	r1, [r3, #8]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	685a      	ldr	r2, [r3, #4]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	691b      	ldr	r3, [r3, #16]
 800fd34:	431a      	orrs	r2, r3
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	699b      	ldr	r3, [r3, #24]
 800fd3a:	431a      	orrs	r2, r3
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	430a      	orrs	r2, r1
 800fd42:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	68d2      	ldr	r2, [r2, #12]
 800fd4c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	6919      	ldr	r1, [r3, #16]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	689b      	ldr	r3, [r3, #8]
 800fd58:	041a      	lsls	r2, r3, #16
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	430a      	orrs	r2, r1
 800fd60:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f000 f88a 	bl	800fe7c <RTC_ExitInitMode>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800fd6c:	7bfb      	ldrb	r3, [r7, #15]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d113      	bne.n	800fd9a <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f022 0203 	bic.w	r2, r2, #3
 800fd80:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	69da      	ldr	r2, [r3, #28]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	695b      	ldr	r3, [r3, #20]
 800fd90:	431a      	orrs	r2, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	430a      	orrs	r2, r1
 800fd98:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	22ff      	movs	r2, #255	@ 0xff
 800fda0:	625a      	str	r2, [r3, #36]	@ 0x24
 800fda2:	e001      	b.n	800fda8 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800fda4:	2300      	movs	r3, #0
 800fda6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800fda8:	7bfb      	ldrb	r3, [r7, #15]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d103      	bne.n	800fdb6 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800fdb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3710      	adds	r7, #16
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a0d      	ldr	r2, [pc, #52]	@ (800fe08 <HAL_RTC_WaitForSynchro+0x48>)
 800fdd2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800fdd4:	f7fa fe34 	bl	800aa40 <HAL_GetTick>
 800fdd8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fdda:	e009      	b.n	800fdf0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fddc:	f7fa fe30 	bl	800aa40 <HAL_GetTick>
 800fde0:	4602      	mov	r2, r0
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	1ad3      	subs	r3, r2, r3
 800fde6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fdea:	d901      	bls.n	800fdf0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800fdec:	2303      	movs	r3, #3
 800fdee:	e007      	b.n	800fe00 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	f003 0320 	and.w	r3, r3, #32
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d0ee      	beq.n	800fddc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800fdfe:	2300      	movs	r3, #0
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	0001ff5f 	.word	0x0001ff5f

0800fe0c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fe14:	2300      	movs	r3, #0
 800fe16:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d123      	bne.n	800fe72 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	68da      	ldr	r2, [r3, #12]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800fe38:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800fe3a:	f7fa fe01 	bl	800aa40 <HAL_GetTick>
 800fe3e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800fe40:	e00d      	b.n	800fe5e <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fe42:	f7fa fdfd 	bl	800aa40 <HAL_GetTick>
 800fe46:	4602      	mov	r2, r0
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fe50:	d905      	bls.n	800fe5e <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2204      	movs	r2, #4
 800fe56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d102      	bne.n	800fe72 <RTC_EnterInitMode+0x66>
 800fe6c:	7bfb      	ldrb	r3, [r7, #15]
 800fe6e:	2b01      	cmp	r3, #1
 800fe70:	d1e7      	bne.n	800fe42 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800fe72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3710      	adds	r7, #16
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe84:	2300      	movs	r3, #0
 800fe86:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	68da      	ldr	r2, [r3, #12]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fe96:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	689b      	ldr	r3, [r3, #8]
 800fe9e:	f003 0320 	and.w	r3, r3, #32
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d10b      	bne.n	800febe <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f7ff ff8a 	bl	800fdc0 <HAL_RTC_WaitForSynchro>
 800feac:	4603      	mov	r3, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d005      	beq.n	800febe <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2204      	movs	r2, #4
 800feb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800feba:	2301      	movs	r3, #1
 800febc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800febe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800fec8:	b480      	push	{r7}
 800feca:	b087      	sub	sp, #28
 800fecc:	af00      	add	r7, sp, #0
 800fece:	60f8      	str	r0, [r7, #12]
 800fed0:	60b9      	str	r1, [r7, #8]
 800fed2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800fed4:	4b5f      	ldr	r3, [pc, #380]	@ (8010054 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a5f      	ldr	r2, [pc, #380]	@ (8010058 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800feda:	fba2 2303 	umull	r2, r3, r2, r3
 800fede:	0adb      	lsrs	r3, r3, #11
 800fee0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fee4:	fb02 f303 	mul.w	r3, r2, r3
 800fee8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d101      	bne.n	800fef8 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 800fef4:	2302      	movs	r3, #2
 800fef6:	e0a7      	b.n	8010048 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2201      	movs	r2, #1
 800fefc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2202      	movs	r2, #2
 800ff04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	22ca      	movs	r2, #202	@ 0xca
 800ff0e:	625a      	str	r2, [r3, #36]	@ 0x24
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	2253      	movs	r2, #83	@ 0x53
 800ff16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d01a      	beq.n	800ff5c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	3b01      	subs	r3, #1
 800ff2a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d10d      	bne.n	800ff4e <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	22ff      	movs	r2, #255	@ 0xff
 800ff38:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2203      	movs	r2, #3
 800ff3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	2200      	movs	r2, #0
 800ff46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800ff4a:	2303      	movs	r3, #3
 800ff4c:	e07c      	b.n	8010048 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	f003 0304 	and.w	r3, r3, #4
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d1e4      	bne.n	800ff26 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	689a      	ldr	r2, [r3, #8]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ff6a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	b2da      	uxtb	r2, r3
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800ff7c:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800ff7e:	4b35      	ldr	r3, [pc, #212]	@ (8010054 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	4a35      	ldr	r2, [pc, #212]	@ (8010058 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800ff84:	fba2 2303 	umull	r2, r3, r2, r3
 800ff88:	0adb      	lsrs	r3, r3, #11
 800ff8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ff8e:	fb02 f303 	mul.w	r3, r2, r3
 800ff92:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	3b01      	subs	r3, #1
 800ff98:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d10d      	bne.n	800ffbc <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	22ff      	movs	r2, #255	@ 0xff
 800ffa6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2203      	movs	r2, #3
 800ffac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800ffb8:	2303      	movs	r3, #3
 800ffba:	e045      	b.n	8010048 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	68db      	ldr	r3, [r3, #12]
 800ffc2:	f003 0304 	and.w	r3, r3, #4
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d0e4      	beq.n	800ff94 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	689a      	ldr	r2, [r3, #8]
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f022 0207 	bic.w	r2, r2, #7
 800ffd8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	6899      	ldr	r1, [r3, #8]
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	430a      	orrs	r2, r1
 800ffe8:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800fff2:	4b1a      	ldr	r3, [pc, #104]	@ (801005c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800fff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fff8:	4a18      	ldr	r2, [pc, #96]	@ (801005c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800fffa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fffe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8010002:	4b16      	ldr	r3, [pc, #88]	@ (801005c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	4a15      	ldr	r2, [pc, #84]	@ (801005c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8010008:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801000c:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	689a      	ldr	r2, [r3, #8]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801001c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	689a      	ldr	r2, [r3, #8]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801002c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	22ff      	movs	r2, #255	@ 0xff
 8010034:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2201      	movs	r2, #1
 801003a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2200      	movs	r2, #0
 8010042:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8010046:	2300      	movs	r3, #0
}
 8010048:	4618      	mov	r0, r3
 801004a:	371c      	adds	r7, #28
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr
 8010054:	2000007c 	.word	0x2000007c
 8010058:	10624dd3 	.word	0x10624dd3
 801005c:	58000800 	.word	0x58000800

08010060 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8010068:	4b0f      	ldr	r3, [pc, #60]	@ (80100a8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 801006a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 801006e:	60da      	str	r2, [r3, #12]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00b      	beq.n	8010096 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	b2da      	uxtb	r2, r3
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 801008e:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f000 f80b 	bl	80100ac <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2201      	movs	r2, #1
 801009a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 801009e:	bf00      	nop
 80100a0:	3708      	adds	r7, #8
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	58000800 	.word	0x58000800

080100ac <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80100b4:	bf00      	nop
 80100b6:	370c      	adds	r7, #12
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr

080100c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d101      	bne.n	80100d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80100ce:	2301      	movs	r3, #1
 80100d0:	e095      	b.n	80101fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d108      	bne.n	80100ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80100e2:	d009      	beq.n	80100f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2200      	movs	r2, #0
 80100e8:	61da      	str	r2, [r3, #28]
 80100ea:	e005      	b.n	80100f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2200      	movs	r2, #0
 80100f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2200      	movs	r2, #0
 80100f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010104:	b2db      	uxtb	r3, r3
 8010106:	2b00      	cmp	r3, #0
 8010108:	d106      	bne.n	8010118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7f3 f882 	bl	800321c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2202      	movs	r2, #2
 801011c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801012e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010138:	d902      	bls.n	8010140 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801013a:	2300      	movs	r3, #0
 801013c:	60fb      	str	r3, [r7, #12]
 801013e:	e002      	b.n	8010146 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010144:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801014e:	d007      	beq.n	8010160 <HAL_SPI_Init+0xa0>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010158:	d002      	beq.n	8010160 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	689b      	ldr	r3, [r3, #8]
 801016c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8010170:	431a      	orrs	r2, r3
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	691b      	ldr	r3, [r3, #16]
 8010176:	f003 0302 	and.w	r3, r3, #2
 801017a:	431a      	orrs	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	695b      	ldr	r3, [r3, #20]
 8010180:	f003 0301 	and.w	r3, r3, #1
 8010184:	431a      	orrs	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	699b      	ldr	r3, [r3, #24]
 801018a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801018e:	431a      	orrs	r2, r3
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	69db      	ldr	r3, [r3, #28]
 8010194:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010198:	431a      	orrs	r2, r3
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6a1b      	ldr	r3, [r3, #32]
 801019e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101a2:	ea42 0103 	orr.w	r1, r2, r3
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	430a      	orrs	r2, r1
 80101b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	699b      	ldr	r3, [r3, #24]
 80101ba:	0c1b      	lsrs	r3, r3, #16
 80101bc:	f003 0204 	and.w	r2, r3, #4
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101c4:	f003 0310 	and.w	r3, r3, #16
 80101c8:	431a      	orrs	r2, r3
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101ce:	f003 0308 	and.w	r3, r3, #8
 80101d2:	431a      	orrs	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	68db      	ldr	r3, [r3, #12]
 80101d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80101dc:	ea42 0103 	orr.w	r1, r2, r3
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	430a      	orrs	r2, r1
 80101ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2201      	movs	r2, #1
 80101f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3710      	adds	r7, #16
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}

08010206 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010206:	b580      	push	{r7, lr}
 8010208:	b088      	sub	sp, #32
 801020a:	af00      	add	r7, sp, #0
 801020c:	60f8      	str	r0, [r7, #12]
 801020e:	60b9      	str	r1, [r7, #8]
 8010210:	603b      	str	r3, [r7, #0]
 8010212:	4613      	mov	r3, r2
 8010214:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010216:	f7fa fc13 	bl	800aa40 <HAL_GetTick>
 801021a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 801021c:	88fb      	ldrh	r3, [r7, #6]
 801021e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010226:	b2db      	uxtb	r3, r3
 8010228:	2b01      	cmp	r3, #1
 801022a:	d001      	beq.n	8010230 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 801022c:	2302      	movs	r3, #2
 801022e:	e15c      	b.n	80104ea <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d002      	beq.n	801023c <HAL_SPI_Transmit+0x36>
 8010236:	88fb      	ldrh	r3, [r7, #6]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d101      	bne.n	8010240 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 801023c:	2301      	movs	r3, #1
 801023e:	e154      	b.n	80104ea <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8010246:	2b01      	cmp	r3, #1
 8010248:	d101      	bne.n	801024e <HAL_SPI_Transmit+0x48>
 801024a:	2302      	movs	r3, #2
 801024c:	e14d      	b.n	80104ea <HAL_SPI_Transmit+0x2e4>
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2201      	movs	r2, #1
 8010252:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2203      	movs	r2, #3
 801025a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2200      	movs	r2, #0
 8010262:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	68ba      	ldr	r2, [r7, #8]
 8010268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	88fa      	ldrh	r2, [r7, #6]
 801026e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	88fa      	ldrh	r2, [r7, #6]
 8010274:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2200      	movs	r2, #0
 801027a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2200      	movs	r2, #0
 8010280:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2200      	movs	r2, #0
 8010288:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2200      	movs	r2, #0
 8010290:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2200      	movs	r2, #0
 8010296:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	689b      	ldr	r3, [r3, #8]
 801029c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80102a0:	d10f      	bne.n	80102c2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80102b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80102c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102cc:	2b40      	cmp	r3, #64	@ 0x40
 80102ce:	d007      	beq.n	80102e0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80102de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80102e8:	d952      	bls.n	8010390 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d002      	beq.n	80102f8 <HAL_SPI_Transmit+0xf2>
 80102f2:	8b7b      	ldrh	r3, [r7, #26]
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d145      	bne.n	8010384 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102fc:	881a      	ldrh	r2, [r3, #0]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010308:	1c9a      	adds	r2, r3, #2
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010312:	b29b      	uxth	r3, r3
 8010314:	3b01      	subs	r3, #1
 8010316:	b29a      	uxth	r2, r3
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801031c:	e032      	b.n	8010384 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	689b      	ldr	r3, [r3, #8]
 8010324:	f003 0302 	and.w	r3, r3, #2
 8010328:	2b02      	cmp	r3, #2
 801032a:	d112      	bne.n	8010352 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010330:	881a      	ldrh	r2, [r3, #0]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801033c:	1c9a      	adds	r2, r3, #2
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010346:	b29b      	uxth	r3, r3
 8010348:	3b01      	subs	r3, #1
 801034a:	b29a      	uxth	r2, r3
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010350:	e018      	b.n	8010384 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010352:	f7fa fb75 	bl	800aa40 <HAL_GetTick>
 8010356:	4602      	mov	r2, r0
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	683a      	ldr	r2, [r7, #0]
 801035e:	429a      	cmp	r2, r3
 8010360:	d803      	bhi.n	801036a <HAL_SPI_Transmit+0x164>
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010368:	d102      	bne.n	8010370 <HAL_SPI_Transmit+0x16a>
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d109      	bne.n	8010384 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2201      	movs	r2, #1
 8010374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	2200      	movs	r2, #0
 801037c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8010380:	2303      	movs	r3, #3
 8010382:	e0b2      	b.n	80104ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010388:	b29b      	uxth	r3, r3
 801038a:	2b00      	cmp	r3, #0
 801038c:	d1c7      	bne.n	801031e <HAL_SPI_Transmit+0x118>
 801038e:	e083      	b.n	8010498 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <HAL_SPI_Transmit+0x198>
 8010398:	8b7b      	ldrh	r3, [r7, #26]
 801039a:	2b01      	cmp	r3, #1
 801039c:	d177      	bne.n	801048e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d912      	bls.n	80103ce <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ac:	881a      	ldrh	r2, [r3, #0]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103b8:	1c9a      	adds	r2, r3, #2
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	3b02      	subs	r3, #2
 80103c6:	b29a      	uxth	r2, r3
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80103cc:	e05f      	b.n	801048e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	330c      	adds	r3, #12
 80103d8:	7812      	ldrb	r2, [r2, #0]
 80103da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103e0:	1c5a      	adds	r2, r3, #1
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	3b01      	subs	r3, #1
 80103ee:	b29a      	uxth	r2, r3
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80103f4:	e04b      	b.n	801048e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	f003 0302 	and.w	r3, r3, #2
 8010400:	2b02      	cmp	r3, #2
 8010402:	d12b      	bne.n	801045c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010408:	b29b      	uxth	r3, r3
 801040a:	2b01      	cmp	r3, #1
 801040c:	d912      	bls.n	8010434 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010412:	881a      	ldrh	r2, [r3, #0]
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801041e:	1c9a      	adds	r2, r3, #2
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010428:	b29b      	uxth	r3, r3
 801042a:	3b02      	subs	r3, #2
 801042c:	b29a      	uxth	r2, r3
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010432:	e02c      	b.n	801048e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	330c      	adds	r3, #12
 801043e:	7812      	ldrb	r2, [r2, #0]
 8010440:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010446:	1c5a      	adds	r2, r3, #1
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010450:	b29b      	uxth	r3, r3
 8010452:	3b01      	subs	r3, #1
 8010454:	b29a      	uxth	r2, r3
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801045a:	e018      	b.n	801048e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801045c:	f7fa faf0 	bl	800aa40 <HAL_GetTick>
 8010460:	4602      	mov	r2, r0
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	1ad3      	subs	r3, r2, r3
 8010466:	683a      	ldr	r2, [r7, #0]
 8010468:	429a      	cmp	r2, r3
 801046a:	d803      	bhi.n	8010474 <HAL_SPI_Transmit+0x26e>
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010472:	d102      	bne.n	801047a <HAL_SPI_Transmit+0x274>
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d109      	bne.n	801048e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2201      	movs	r2, #1
 801047e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2200      	movs	r2, #0
 8010486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 801048a:	2303      	movs	r3, #3
 801048c:	e02d      	b.n	80104ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010492:	b29b      	uxth	r3, r3
 8010494:	2b00      	cmp	r3, #0
 8010496:	d1ae      	bne.n	80103f6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010498:	69fa      	ldr	r2, [r7, #28]
 801049a:	6839      	ldr	r1, [r7, #0]
 801049c:	68f8      	ldr	r0, [r7, #12]
 801049e:	f000 fa67 	bl	8010970 <SPI_EndRxTxTransaction>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d002      	beq.n	80104ae <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2220      	movs	r2, #32
 80104ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	689b      	ldr	r3, [r3, #8]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d10a      	bne.n	80104cc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80104b6:	2300      	movs	r3, #0
 80104b8:	617b      	str	r3, [r7, #20]
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	617b      	str	r3, [r7, #20]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	689b      	ldr	r3, [r3, #8]
 80104c8:	617b      	str	r3, [r7, #20]
 80104ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2201      	movs	r2, #1
 80104d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2200      	movs	r2, #0
 80104d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d001      	beq.n	80104e8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80104e4:	2301      	movs	r3, #1
 80104e6:	e000      	b.n	80104ea <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80104e8:	2300      	movs	r3, #0
  }
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3720      	adds	r7, #32
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
	...

080104f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b088      	sub	sp, #32
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	689b      	ldr	r3, [r3, #8]
 801050a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	099b      	lsrs	r3, r3, #6
 8010510:	f003 0301 	and.w	r3, r3, #1
 8010514:	2b00      	cmp	r3, #0
 8010516:	d10f      	bne.n	8010538 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8010518:	69bb      	ldr	r3, [r7, #24]
 801051a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801051e:	2b00      	cmp	r3, #0
 8010520:	d00a      	beq.n	8010538 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8010522:	69fb      	ldr	r3, [r7, #28]
 8010524:	099b      	lsrs	r3, r3, #6
 8010526:	f003 0301 	and.w	r3, r3, #1
 801052a:	2b00      	cmp	r3, #0
 801052c:	d004      	beq.n	8010538 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	4798      	blx	r3
    return;
 8010536:	e0d7      	b.n	80106e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	085b      	lsrs	r3, r3, #1
 801053c:	f003 0301 	and.w	r3, r3, #1
 8010540:	2b00      	cmp	r3, #0
 8010542:	d00a      	beq.n	801055a <HAL_SPI_IRQHandler+0x66>
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	09db      	lsrs	r3, r3, #7
 8010548:	f003 0301 	and.w	r3, r3, #1
 801054c:	2b00      	cmp	r3, #0
 801054e:	d004      	beq.n	801055a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	4798      	blx	r3
    return;
 8010558:	e0c6      	b.n	80106e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	095b      	lsrs	r3, r3, #5
 801055e:	f003 0301 	and.w	r3, r3, #1
 8010562:	2b00      	cmp	r3, #0
 8010564:	d10c      	bne.n	8010580 <HAL_SPI_IRQHandler+0x8c>
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	099b      	lsrs	r3, r3, #6
 801056a:	f003 0301 	and.w	r3, r3, #1
 801056e:	2b00      	cmp	r3, #0
 8010570:	d106      	bne.n	8010580 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8010572:	69bb      	ldr	r3, [r7, #24]
 8010574:	0a1b      	lsrs	r3, r3, #8
 8010576:	f003 0301 	and.w	r3, r3, #1
 801057a:	2b00      	cmp	r3, #0
 801057c:	f000 80b4 	beq.w	80106e8 <HAL_SPI_IRQHandler+0x1f4>
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	095b      	lsrs	r3, r3, #5
 8010584:	f003 0301 	and.w	r3, r3, #1
 8010588:	2b00      	cmp	r3, #0
 801058a:	f000 80ad 	beq.w	80106e8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	099b      	lsrs	r3, r3, #6
 8010592:	f003 0301 	and.w	r3, r3, #1
 8010596:	2b00      	cmp	r3, #0
 8010598:	d023      	beq.n	80105e2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	2b03      	cmp	r3, #3
 80105a4:	d011      	beq.n	80105ca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105aa:	f043 0204 	orr.w	r2, r3, #4
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80105b2:	2300      	movs	r3, #0
 80105b4:	617b      	str	r3, [r7, #20]
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	617b      	str	r3, [r7, #20]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	617b      	str	r3, [r7, #20]
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	e00b      	b.n	80105e2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80105ca:	2300      	movs	r3, #0
 80105cc:	613b      	str	r3, [r7, #16]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	613b      	str	r3, [r7, #16]
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	689b      	ldr	r3, [r3, #8]
 80105dc:	613b      	str	r3, [r7, #16]
 80105de:	693b      	ldr	r3, [r7, #16]
        return;
 80105e0:	e082      	b.n	80106e8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	095b      	lsrs	r3, r3, #5
 80105e6:	f003 0301 	and.w	r3, r3, #1
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d014      	beq.n	8010618 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105f2:	f043 0201 	orr.w	r2, r3, #1
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80105fa:	2300      	movs	r3, #0
 80105fc:	60fb      	str	r3, [r7, #12]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	60fb      	str	r3, [r7, #12]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010614:	601a      	str	r2, [r3, #0]
 8010616:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	0a1b      	lsrs	r3, r3, #8
 801061c:	f003 0301 	and.w	r3, r3, #1
 8010620:	2b00      	cmp	r3, #0
 8010622:	d00c      	beq.n	801063e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010628:	f043 0208 	orr.w	r2, r3, #8
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010630:	2300      	movs	r3, #0
 8010632:	60bb      	str	r3, [r7, #8]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	689b      	ldr	r3, [r3, #8]
 801063a:	60bb      	str	r3, [r7, #8]
 801063c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010642:	2b00      	cmp	r3, #0
 8010644:	d04f      	beq.n	80106e6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	685a      	ldr	r2, [r3, #4]
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010654:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2201      	movs	r2, #1
 801065a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	f003 0302 	and.w	r3, r3, #2
 8010664:	2b00      	cmp	r3, #0
 8010666:	d104      	bne.n	8010672 <HAL_SPI_IRQHandler+0x17e>
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	f003 0301 	and.w	r3, r3, #1
 801066e:	2b00      	cmp	r3, #0
 8010670:	d034      	beq.n	80106dc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	685a      	ldr	r2, [r3, #4]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f022 0203 	bic.w	r2, r2, #3
 8010680:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010686:	2b00      	cmp	r3, #0
 8010688:	d011      	beq.n	80106ae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801068e:	4a18      	ldr	r2, [pc, #96]	@ (80106f0 <HAL_SPI_IRQHandler+0x1fc>)
 8010690:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010696:	4618      	mov	r0, r3
 8010698:	f7fb fe05 	bl	800c2a6 <HAL_DMA_Abort_IT>
 801069c:	4603      	mov	r3, r0
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d005      	beq.n	80106ae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d016      	beq.n	80106e4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106ba:	4a0d      	ldr	r2, [pc, #52]	@ (80106f0 <HAL_SPI_IRQHandler+0x1fc>)
 80106bc:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7fb fdef 	bl	800c2a6 <HAL_DMA_Abort_IT>
 80106c8:	4603      	mov	r3, r0
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d00a      	beq.n	80106e4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80106da:	e003      	b.n	80106e4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f000 f809 	bl	80106f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80106e2:	e000      	b.n	80106e6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80106e4:	bf00      	nop
    return;
 80106e6:	bf00      	nop
  }
}
 80106e8:	3720      	adds	r7, #32
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	08010709 	.word	0x08010709

080106f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80106fc:	bf00      	nop
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010714:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	2200      	movs	r2, #0
 801071a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2200      	movs	r2, #0
 8010722:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010724:	68f8      	ldr	r0, [r7, #12]
 8010726:	f7ff ffe5 	bl	80106f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801072a:	bf00      	nop
 801072c:	3710      	adds	r7, #16
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
	...

08010734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b088      	sub	sp, #32
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	603b      	str	r3, [r7, #0]
 8010740:	4613      	mov	r3, r2
 8010742:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010744:	f7fa f97c 	bl	800aa40 <HAL_GetTick>
 8010748:	4602      	mov	r2, r0
 801074a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801074c:	1a9b      	subs	r3, r3, r2
 801074e:	683a      	ldr	r2, [r7, #0]
 8010750:	4413      	add	r3, r2
 8010752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010754:	f7fa f974 	bl	800aa40 <HAL_GetTick>
 8010758:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801075a:	4b39      	ldr	r3, [pc, #228]	@ (8010840 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	015b      	lsls	r3, r3, #5
 8010760:	0d1b      	lsrs	r3, r3, #20
 8010762:	69fa      	ldr	r2, [r7, #28]
 8010764:	fb02 f303 	mul.w	r3, r2, r3
 8010768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801076a:	e054      	b.n	8010816 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010772:	d050      	beq.n	8010816 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010774:	f7fa f964 	bl	800aa40 <HAL_GetTick>
 8010778:	4602      	mov	r2, r0
 801077a:	69bb      	ldr	r3, [r7, #24]
 801077c:	1ad3      	subs	r3, r2, r3
 801077e:	69fa      	ldr	r2, [r7, #28]
 8010780:	429a      	cmp	r2, r3
 8010782:	d902      	bls.n	801078a <SPI_WaitFlagStateUntilTimeout+0x56>
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d13d      	bne.n	8010806 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	685a      	ldr	r2, [r3, #4]
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80107a2:	d111      	bne.n	80107c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80107ac:	d004      	beq.n	80107b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	689b      	ldr	r3, [r3, #8]
 80107b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80107b6:	d107      	bne.n	80107c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80107c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80107d0:	d10f      	bne.n	80107f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80107e0:	601a      	str	r2, [r3, #0]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80107f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2201      	movs	r2, #1
 80107f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2200      	movs	r2, #0
 80107fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8010802:	2303      	movs	r3, #3
 8010804:	e017      	b.n	8010836 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d101      	bne.n	8010810 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801080c:	2300      	movs	r3, #0
 801080e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	3b01      	subs	r3, #1
 8010814:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	689a      	ldr	r2, [r3, #8]
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	4013      	ands	r3, r2
 8010820:	68ba      	ldr	r2, [r7, #8]
 8010822:	429a      	cmp	r2, r3
 8010824:	bf0c      	ite	eq
 8010826:	2301      	moveq	r3, #1
 8010828:	2300      	movne	r3, #0
 801082a:	b2db      	uxtb	r3, r3
 801082c:	461a      	mov	r2, r3
 801082e:	79fb      	ldrb	r3, [r7, #7]
 8010830:	429a      	cmp	r2, r3
 8010832:	d19b      	bne.n	801076c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010834:	2300      	movs	r3, #0
}
 8010836:	4618      	mov	r0, r3
 8010838:	3720      	adds	r7, #32
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	2000007c 	.word	0x2000007c

08010844 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b08a      	sub	sp, #40	@ 0x28
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	607a      	str	r2, [r7, #4]
 8010850:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8010852:	2300      	movs	r3, #0
 8010854:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8010856:	f7fa f8f3 	bl	800aa40 <HAL_GetTick>
 801085a:	4602      	mov	r2, r0
 801085c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801085e:	1a9b      	subs	r3, r3, r2
 8010860:	683a      	ldr	r2, [r7, #0]
 8010862:	4413      	add	r3, r2
 8010864:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8010866:	f7fa f8eb 	bl	800aa40 <HAL_GetTick>
 801086a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	330c      	adds	r3, #12
 8010872:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8010874:	4b3d      	ldr	r3, [pc, #244]	@ (801096c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	4613      	mov	r3, r2
 801087a:	009b      	lsls	r3, r3, #2
 801087c:	4413      	add	r3, r2
 801087e:	00da      	lsls	r2, r3, #3
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	0d1b      	lsrs	r3, r3, #20
 8010884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010886:	fb02 f303 	mul.w	r3, r2, r3
 801088a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801088c:	e060      	b.n	8010950 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8010894:	d107      	bne.n	80108a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d104      	bne.n	80108a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801089c:	69fb      	ldr	r3, [r7, #28]
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	b2db      	uxtb	r3, r3
 80108a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80108a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80108ac:	d050      	beq.n	8010950 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80108ae:	f7fa f8c7 	bl	800aa40 <HAL_GetTick>
 80108b2:	4602      	mov	r2, r0
 80108b4:	6a3b      	ldr	r3, [r7, #32]
 80108b6:	1ad3      	subs	r3, r2, r3
 80108b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d902      	bls.n	80108c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80108be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d13d      	bne.n	8010940 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	685a      	ldr	r2, [r3, #4]
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80108d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80108dc:	d111      	bne.n	8010902 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	689b      	ldr	r3, [r3, #8]
 80108e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80108e6:	d004      	beq.n	80108f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	689b      	ldr	r3, [r3, #8]
 80108ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80108f0:	d107      	bne.n	8010902 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010900:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801090a:	d10f      	bne.n	801092c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	681a      	ldr	r2, [r3, #0]
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801091a:	601a      	str	r2, [r3, #0]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	681a      	ldr	r2, [r3, #0]
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801092a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	2201      	movs	r2, #1
 8010930:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2200      	movs	r2, #0
 8010938:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801093c:	2303      	movs	r3, #3
 801093e:	e010      	b.n	8010962 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010940:	69bb      	ldr	r3, [r7, #24]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d101      	bne.n	801094a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8010946:	2300      	movs	r3, #0
 8010948:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 801094a:	69bb      	ldr	r3, [r7, #24]
 801094c:	3b01      	subs	r3, #1
 801094e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	689a      	ldr	r2, [r3, #8]
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	4013      	ands	r3, r2
 801095a:	687a      	ldr	r2, [r7, #4]
 801095c:	429a      	cmp	r2, r3
 801095e:	d196      	bne.n	801088e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8010960:	2300      	movs	r3, #0
}
 8010962:	4618      	mov	r0, r3
 8010964:	3728      	adds	r7, #40	@ 0x28
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	2000007c 	.word	0x2000007c

08010970 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b086      	sub	sp, #24
 8010974:	af02      	add	r7, sp, #8
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	9300      	str	r3, [sp, #0]
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	2200      	movs	r2, #0
 8010984:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f7ff ff5b 	bl	8010844 <SPI_WaitFifoStateUntilTimeout>
 801098e:	4603      	mov	r3, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	d007      	beq.n	80109a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010998:	f043 0220 	orr.w	r2, r3, #32
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80109a0:	2303      	movs	r3, #3
 80109a2:	e027      	b.n	80109f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	9300      	str	r3, [sp, #0]
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	2200      	movs	r2, #0
 80109ac:	2180      	movs	r1, #128	@ 0x80
 80109ae:	68f8      	ldr	r0, [r7, #12]
 80109b0:	f7ff fec0 	bl	8010734 <SPI_WaitFlagStateUntilTimeout>
 80109b4:	4603      	mov	r3, r0
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d007      	beq.n	80109ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80109be:	f043 0220 	orr.w	r2, r3, #32
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80109c6:	2303      	movs	r3, #3
 80109c8:	e014      	b.n	80109f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	9300      	str	r3, [sp, #0]
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	2200      	movs	r2, #0
 80109d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f7ff ff34 	bl	8010844 <SPI_WaitFifoStateUntilTimeout>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d007      	beq.n	80109f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80109e6:	f043 0220 	orr.w	r2, r3, #32
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80109ee:	2303      	movs	r3, #3
 80109f0:	e000      	b.n	80109f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80109f2:	2300      	movs	r3, #0
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3710      	adds	r7, #16
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d101      	bne.n	8010a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	e049      	b.n	8010aa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010a14:	b2db      	uxtb	r3, r3
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d106      	bne.n	8010a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f7f2 fefa 	bl	800381c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2202      	movs	r2, #2
 8010a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	3304      	adds	r3, #4
 8010a38:	4619      	mov	r1, r3
 8010a3a:	4610      	mov	r0, r2
 8010a3c:	f000 faac 	bl	8010f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2201      	movs	r2, #1
 8010a44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2201      	movs	r2, #1
 8010a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2201      	movs	r2, #1
 8010a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2201      	movs	r2, #1
 8010a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2201      	movs	r2, #1
 8010a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2201      	movs	r2, #1
 8010a94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2201      	movs	r2, #1
 8010a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010aa0:	2300      	movs	r3, #0
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
	...

08010aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010aba:	b2db      	uxtb	r3, r3
 8010abc:	2b01      	cmp	r3, #1
 8010abe:	d001      	beq.n	8010ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	e036      	b.n	8010b32 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2202      	movs	r2, #2
 8010ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	68da      	ldr	r2, [r3, #12]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f042 0201 	orr.w	r2, r2, #1
 8010ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a17      	ldr	r2, [pc, #92]	@ (8010b40 <HAL_TIM_Base_Start_IT+0x94>)
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d004      	beq.n	8010af0 <HAL_TIM_Base_Start_IT+0x44>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010aee:	d115      	bne.n	8010b1c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	689a      	ldr	r2, [r3, #8]
 8010af6:	4b13      	ldr	r3, [pc, #76]	@ (8010b44 <HAL_TIM_Base_Start_IT+0x98>)
 8010af8:	4013      	ands	r3, r2
 8010afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2b06      	cmp	r3, #6
 8010b00:	d015      	beq.n	8010b2e <HAL_TIM_Base_Start_IT+0x82>
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b08:	d011      	beq.n	8010b2e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f042 0201 	orr.w	r2, r2, #1
 8010b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b1a:	e008      	b.n	8010b2e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	681a      	ldr	r2, [r3, #0]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	f042 0201 	orr.w	r2, r2, #1
 8010b2a:	601a      	str	r2, [r3, #0]
 8010b2c:	e000      	b.n	8010b30 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010b30:	2300      	movs	r3, #0
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3714      	adds	r7, #20
 8010b36:	46bd      	mov	sp, r7
 8010b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3c:	4770      	bx	lr
 8010b3e:	bf00      	nop
 8010b40:	40012c00 	.word	0x40012c00
 8010b44:	00010007 	.word	0x00010007

08010b48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	68da      	ldr	r2, [r3, #12]
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f022 0201 	bic.w	r2, r2, #1
 8010b5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	6a1b      	ldr	r3, [r3, #32]
 8010b66:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 8010b6a:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d10f      	bne.n	8010b92 <HAL_TIM_Base_Stop_IT+0x4a>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	6a1a      	ldr	r2, [r3, #32]
 8010b78:	f240 4344 	movw	r3, #1092	@ 0x444
 8010b7c:	4013      	ands	r3, r2
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d107      	bne.n	8010b92 <HAL_TIM_Base_Stop_IT+0x4a>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f022 0201 	bic.w	r2, r2, #1
 8010b90:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2201      	movs	r2, #1
 8010b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8010b9a:	2300      	movs	r3, #0
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	370c      	adds	r7, #12
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr

08010ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	691b      	ldr	r3, [r3, #16]
 8010bbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	f003 0302 	and.w	r3, r3, #2
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d020      	beq.n	8010c0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f003 0302 	and.w	r3, r3, #2
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d01b      	beq.n	8010c0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f06f 0202 	mvn.w	r2, #2
 8010bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2201      	movs	r2, #1
 8010be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	699b      	ldr	r3, [r3, #24]
 8010bea:	f003 0303 	and.w	r3, r3, #3
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d003      	beq.n	8010bfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 f9b2 	bl	8010f5c <HAL_TIM_IC_CaptureCallback>
 8010bf8:	e005      	b.n	8010c06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f000 f9a4 	bl	8010f48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f000 f9b5 	bl	8010f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	f003 0304 	and.w	r3, r3, #4
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d020      	beq.n	8010c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f003 0304 	and.w	r3, r3, #4
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d01b      	beq.n	8010c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	f06f 0204 	mvn.w	r2, #4
 8010c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2202      	movs	r2, #2
 8010c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	699b      	ldr	r3, [r3, #24]
 8010c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d003      	beq.n	8010c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 f98c 	bl	8010f5c <HAL_TIM_IC_CaptureCallback>
 8010c44:	e005      	b.n	8010c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 f97e 	bl	8010f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f000 f98f 	bl	8010f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2200      	movs	r2, #0
 8010c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	f003 0308 	and.w	r3, r3, #8
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d020      	beq.n	8010ca4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	f003 0308 	and.w	r3, r3, #8
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d01b      	beq.n	8010ca4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f06f 0208 	mvn.w	r2, #8
 8010c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2204      	movs	r2, #4
 8010c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	69db      	ldr	r3, [r3, #28]
 8010c82:	f003 0303 	and.w	r3, r3, #3
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d003      	beq.n	8010c92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f000 f966 	bl	8010f5c <HAL_TIM_IC_CaptureCallback>
 8010c90:	e005      	b.n	8010c9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f000 f958 	bl	8010f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f000 f969 	bl	8010f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	f003 0310 	and.w	r3, r3, #16
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d020      	beq.n	8010cf0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f003 0310 	and.w	r3, r3, #16
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d01b      	beq.n	8010cf0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f06f 0210 	mvn.w	r2, #16
 8010cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2208      	movs	r2, #8
 8010cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	69db      	ldr	r3, [r3, #28]
 8010cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d003      	beq.n	8010cde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f000 f940 	bl	8010f5c <HAL_TIM_IC_CaptureCallback>
 8010cdc:	e005      	b.n	8010cea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 f932 	bl	8010f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f000 f943 	bl	8010f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2200      	movs	r2, #0
 8010cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	f003 0301 	and.w	r3, r3, #1
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d00c      	beq.n	8010d14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f003 0301 	and.w	r3, r3, #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d007      	beq.n	8010d14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	f06f 0201 	mvn.w	r2, #1
 8010d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f7f1 fd82 	bl	8002818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d104      	bne.n	8010d28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d00c      	beq.n	8010d42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d007      	beq.n	8010d42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8010d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f000 fa9b 	bl	8011278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d00c      	beq.n	8010d66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d007      	beq.n	8010d66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f000 fa93 	bl	801128c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d00c      	beq.n	8010d8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d007      	beq.n	8010d8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 f8fd 	bl	8010f84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	f003 0320 	and.w	r3, r3, #32
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d00c      	beq.n	8010dae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f003 0320 	and.w	r3, r3, #32
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d007      	beq.n	8010dae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f06f 0220 	mvn.w	r2, #32
 8010da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f000 fa5b 	bl	8011264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010dae:	bf00      	nop
 8010db0:	3710      	adds	r7, #16
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}

08010db6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010db6:	b580      	push	{r7, lr}
 8010db8:	b084      	sub	sp, #16
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	6078      	str	r0, [r7, #4]
 8010dbe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010dca:	2b01      	cmp	r3, #1
 8010dcc:	d101      	bne.n	8010dd2 <HAL_TIM_ConfigClockSource+0x1c>
 8010dce:	2302      	movs	r3, #2
 8010dd0:	e0b6      	b.n	8010f40 <HAL_TIM_ConfigClockSource+0x18a>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2202      	movs	r2, #2
 8010dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	689b      	ldr	r3, [r3, #8]
 8010de8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8010df0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010df4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010dfc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	68ba      	ldr	r2, [r7, #8]
 8010e04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010e0e:	d03e      	beq.n	8010e8e <HAL_TIM_ConfigClockSource+0xd8>
 8010e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010e14:	f200 8087 	bhi.w	8010f26 <HAL_TIM_ConfigClockSource+0x170>
 8010e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e1c:	f000 8086 	beq.w	8010f2c <HAL_TIM_ConfigClockSource+0x176>
 8010e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e24:	d87f      	bhi.n	8010f26 <HAL_TIM_ConfigClockSource+0x170>
 8010e26:	2b70      	cmp	r3, #112	@ 0x70
 8010e28:	d01a      	beq.n	8010e60 <HAL_TIM_ConfigClockSource+0xaa>
 8010e2a:	2b70      	cmp	r3, #112	@ 0x70
 8010e2c:	d87b      	bhi.n	8010f26 <HAL_TIM_ConfigClockSource+0x170>
 8010e2e:	2b60      	cmp	r3, #96	@ 0x60
 8010e30:	d050      	beq.n	8010ed4 <HAL_TIM_ConfigClockSource+0x11e>
 8010e32:	2b60      	cmp	r3, #96	@ 0x60
 8010e34:	d877      	bhi.n	8010f26 <HAL_TIM_ConfigClockSource+0x170>
 8010e36:	2b50      	cmp	r3, #80	@ 0x50
 8010e38:	d03c      	beq.n	8010eb4 <HAL_TIM_ConfigClockSource+0xfe>
 8010e3a:	2b50      	cmp	r3, #80	@ 0x50
 8010e3c:	d873      	bhi.n	8010f26 <HAL_TIM_ConfigClockSource+0x170>
 8010e3e:	2b40      	cmp	r3, #64	@ 0x40
 8010e40:	d058      	beq.n	8010ef4 <HAL_TIM_ConfigClockSource+0x13e>
 8010e42:	2b40      	cmp	r3, #64	@ 0x40
 8010e44:	d86f      	bhi.n	8010f26 <HAL_TIM_ConfigClockSource+0x170>
 8010e46:	2b30      	cmp	r3, #48	@ 0x30
 8010e48:	d064      	beq.n	8010f14 <HAL_TIM_ConfigClockSource+0x15e>
 8010e4a:	2b30      	cmp	r3, #48	@ 0x30
 8010e4c:	d86b      	bhi.n	8010f26 <HAL_TIM_ConfigClockSource+0x170>
 8010e4e:	2b20      	cmp	r3, #32
 8010e50:	d060      	beq.n	8010f14 <HAL_TIM_ConfigClockSource+0x15e>
 8010e52:	2b20      	cmp	r3, #32
 8010e54:	d867      	bhi.n	8010f26 <HAL_TIM_ConfigClockSource+0x170>
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d05c      	beq.n	8010f14 <HAL_TIM_ConfigClockSource+0x15e>
 8010e5a:	2b10      	cmp	r3, #16
 8010e5c:	d05a      	beq.n	8010f14 <HAL_TIM_ConfigClockSource+0x15e>
 8010e5e:	e062      	b.n	8010f26 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010e70:	f000 f978 	bl	8011164 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	689b      	ldr	r3, [r3, #8]
 8010e7a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010e82:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	68ba      	ldr	r2, [r7, #8]
 8010e8a:	609a      	str	r2, [r3, #8]
      break;
 8010e8c:	e04f      	b.n	8010f2e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010e9e:	f000 f961 	bl	8011164 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	689a      	ldr	r2, [r3, #8]
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010eb0:	609a      	str	r2, [r3, #8]
      break;
 8010eb2:	e03c      	b.n	8010f2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	f000 f8d3 	bl	801106c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2150      	movs	r1, #80	@ 0x50
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f000 f92c 	bl	801112a <TIM_ITRx_SetConfig>
      break;
 8010ed2:	e02c      	b.n	8010f2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	f000 f8f2 	bl	80110ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2160      	movs	r1, #96	@ 0x60
 8010eec:	4618      	mov	r0, r3
 8010eee:	f000 f91c 	bl	801112a <TIM_ITRx_SetConfig>
      break;
 8010ef2:	e01c      	b.n	8010f2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010f00:	461a      	mov	r2, r3
 8010f02:	f000 f8b3 	bl	801106c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2140      	movs	r1, #64	@ 0x40
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f000 f90c 	bl	801112a <TIM_ITRx_SetConfig>
      break;
 8010f12:	e00c      	b.n	8010f2e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	4610      	mov	r0, r2
 8010f20:	f000 f903 	bl	801112a <TIM_ITRx_SetConfig>
      break;
 8010f24:	e003      	b.n	8010f2e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8010f26:	2301      	movs	r3, #1
 8010f28:	73fb      	strb	r3, [r7, #15]
      break;
 8010f2a:	e000      	b.n	8010f2e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8010f2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2201      	movs	r2, #1
 8010f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	3710      	adds	r7, #16
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b083      	sub	sp, #12
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010f50:	bf00      	nop
 8010f52:	370c      	adds	r7, #12
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr

08010f5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b083      	sub	sp, #12
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010f64:	bf00      	nop
 8010f66:	370c      	adds	r7, #12
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6e:	4770      	bx	lr

08010f70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010f70:	b480      	push	{r7}
 8010f72:	b083      	sub	sp, #12
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010f78:	bf00      	nop
 8010f7a:	370c      	adds	r7, #12
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr

08010f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010f8c:	bf00      	nop
 8010f8e:	370c      	adds	r7, #12
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr

08010f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	4a2d      	ldr	r2, [pc, #180]	@ (8011060 <TIM_Base_SetConfig+0xc8>)
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d003      	beq.n	8010fb8 <TIM_Base_SetConfig+0x20>
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fb6:	d108      	bne.n	8010fca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	4313      	orrs	r3, r2
 8010fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4a24      	ldr	r2, [pc, #144]	@ (8011060 <TIM_Base_SetConfig+0xc8>)
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	d00b      	beq.n	8010fea <TIM_Base_SetConfig+0x52>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fd8:	d007      	beq.n	8010fea <TIM_Base_SetConfig+0x52>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	4a21      	ldr	r2, [pc, #132]	@ (8011064 <TIM_Base_SetConfig+0xcc>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d003      	beq.n	8010fea <TIM_Base_SetConfig+0x52>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	4a20      	ldr	r2, [pc, #128]	@ (8011068 <TIM_Base_SetConfig+0xd0>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d108      	bne.n	8010ffc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	68db      	ldr	r3, [r3, #12]
 8010ff6:	68fa      	ldr	r2, [r7, #12]
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	695b      	ldr	r3, [r3, #20]
 8011006:	4313      	orrs	r3, r2
 8011008:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	689a      	ldr	r2, [r3, #8]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	681a      	ldr	r2, [r3, #0]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4a10      	ldr	r2, [pc, #64]	@ (8011060 <TIM_Base_SetConfig+0xc8>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d007      	beq.n	8011032 <TIM_Base_SetConfig+0x9a>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4a0f      	ldr	r2, [pc, #60]	@ (8011064 <TIM_Base_SetConfig+0xcc>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d003      	beq.n	8011032 <TIM_Base_SetConfig+0x9a>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4a0e      	ldr	r2, [pc, #56]	@ (8011068 <TIM_Base_SetConfig+0xd0>)
 801102e:	4293      	cmp	r3, r2
 8011030:	d103      	bne.n	801103a <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	691a      	ldr	r2, [r3, #16]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f043 0204 	orr.w	r2, r3, #4
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2201      	movs	r2, #1
 801104a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	68fa      	ldr	r2, [r7, #12]
 8011050:	601a      	str	r2, [r3, #0]
}
 8011052:	bf00      	nop
 8011054:	3714      	adds	r7, #20
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr
 801105e:	bf00      	nop
 8011060:	40012c00 	.word	0x40012c00
 8011064:	40014400 	.word	0x40014400
 8011068:	40014800 	.word	0x40014800

0801106c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801106c:	b480      	push	{r7}
 801106e:	b087      	sub	sp, #28
 8011070:	af00      	add	r7, sp, #0
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	60b9      	str	r1, [r7, #8]
 8011076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	6a1b      	ldr	r3, [r3, #32]
 801107c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	6a1b      	ldr	r3, [r3, #32]
 8011082:	f023 0201 	bic.w	r2, r3, #1
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	699b      	ldr	r3, [r3, #24]
 801108e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	011b      	lsls	r3, r3, #4
 801109c:	693a      	ldr	r2, [r7, #16]
 801109e:	4313      	orrs	r3, r2
 80110a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	f023 030a 	bic.w	r3, r3, #10
 80110a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80110aa:	697a      	ldr	r2, [r7, #20]
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	4313      	orrs	r3, r2
 80110b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	693a      	ldr	r2, [r7, #16]
 80110b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	697a      	ldr	r2, [r7, #20]
 80110bc:	621a      	str	r2, [r3, #32]
}
 80110be:	bf00      	nop
 80110c0:	371c      	adds	r7, #28
 80110c2:	46bd      	mov	sp, r7
 80110c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c8:	4770      	bx	lr

080110ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80110ca:	b480      	push	{r7}
 80110cc:	b087      	sub	sp, #28
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	60f8      	str	r0, [r7, #12]
 80110d2:	60b9      	str	r1, [r7, #8]
 80110d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6a1b      	ldr	r3, [r3, #32]
 80110da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6a1b      	ldr	r3, [r3, #32]
 80110e0:	f023 0210 	bic.w	r2, r3, #16
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	699b      	ldr	r3, [r3, #24]
 80110ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80110f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	031b      	lsls	r3, r3, #12
 80110fa:	693a      	ldr	r2, [r7, #16]
 80110fc:	4313      	orrs	r3, r2
 80110fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011106:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	011b      	lsls	r3, r3, #4
 801110c:	697a      	ldr	r2, [r7, #20]
 801110e:	4313      	orrs	r3, r2
 8011110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	693a      	ldr	r2, [r7, #16]
 8011116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	697a      	ldr	r2, [r7, #20]
 801111c:	621a      	str	r2, [r3, #32]
}
 801111e:	bf00      	nop
 8011120:	371c      	adds	r7, #28
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr

0801112a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801112a:	b480      	push	{r7}
 801112c:	b085      	sub	sp, #20
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
 8011132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	689b      	ldr	r3, [r3, #8]
 8011138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8011140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011146:	683a      	ldr	r2, [r7, #0]
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	4313      	orrs	r3, r2
 801114c:	f043 0307 	orr.w	r3, r3, #7
 8011150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	68fa      	ldr	r2, [r7, #12]
 8011156:	609a      	str	r2, [r3, #8]
}
 8011158:	bf00      	nop
 801115a:	3714      	adds	r7, #20
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr

08011164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011164:	b480      	push	{r7}
 8011166:	b087      	sub	sp, #28
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	607a      	str	r2, [r7, #4]
 8011170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	689b      	ldr	r3, [r3, #8]
 8011176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801117e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	021a      	lsls	r2, r3, #8
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	431a      	orrs	r2, r3
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	4313      	orrs	r3, r2
 801118c:	697a      	ldr	r2, [r7, #20]
 801118e:	4313      	orrs	r3, r2
 8011190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	697a      	ldr	r2, [r7, #20]
 8011196:	609a      	str	r2, [r3, #8]
}
 8011198:	bf00      	nop
 801119a:	371c      	adds	r7, #28
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b085      	sub	sp, #20
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d101      	bne.n	80111bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80111b8:	2302      	movs	r3, #2
 80111ba:	e04a      	b.n	8011252 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2201      	movs	r2, #1
 80111c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2202      	movs	r2, #2
 80111c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	689b      	ldr	r3, [r3, #8]
 80111da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4a1f      	ldr	r2, [pc, #124]	@ (8011260 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80111e2:	4293      	cmp	r3, r2
 80111e4:	d108      	bne.n	80111f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80111ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	68fa      	ldr	r2, [r7, #12]
 80111f4:	4313      	orrs	r3, r2
 80111f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80111fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	4313      	orrs	r3, r2
 8011208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68fa      	ldr	r2, [r7, #12]
 8011210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	4a12      	ldr	r2, [pc, #72]	@ (8011260 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d004      	beq.n	8011226 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011224:	d10c      	bne.n	8011240 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801122c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	689b      	ldr	r3, [r3, #8]
 8011232:	68ba      	ldr	r2, [r7, #8]
 8011234:	4313      	orrs	r3, r2
 8011236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	68ba      	ldr	r2, [r7, #8]
 801123e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2201      	movs	r2, #1
 8011244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2200      	movs	r2, #0
 801124c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011250:	2300      	movs	r3, #0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3714      	adds	r7, #20
 8011256:	46bd      	mov	sp, r7
 8011258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	40012c00 	.word	0x40012c00

08011264 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801126c:	bf00      	nop
 801126e:	370c      	adds	r7, #12
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr

08011278 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011278:	b480      	push	{r7}
 801127a:	b083      	sub	sp, #12
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011280:	bf00      	nop
 8011282:	370c      	adds	r7, #12
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr

0801128c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801128c:	b480      	push	{r7}
 801128e:	b083      	sub	sp, #12
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011294:	bf00      	nop
 8011296:	370c      	adds	r7, #12
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr

080112a0 <LL_RCC_GetUSARTClockSource>:
{
 80112a0:	b480      	push	{r7}
 80112a2:	b083      	sub	sp, #12
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80112a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80112ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	4013      	ands	r3, r2
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	370c      	adds	r7, #12
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr

080112c0 <LL_RCC_GetLPUARTClockSource>:
{
 80112c0:	b480      	push	{r7}
 80112c2:	b083      	sub	sp, #12
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80112c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80112cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	4013      	ands	r3, r2
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	370c      	adds	r7, #12
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr

080112e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d101      	bne.n	80112f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80112ee:	2301      	movs	r3, #1
 80112f0:	e042      	b.n	8011378 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d106      	bne.n	801130a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2200      	movs	r2, #0
 8011300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7f2 fb33 	bl	8003970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2224      	movs	r2, #36	@ 0x24
 801130e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	681a      	ldr	r2, [r3, #0]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	f022 0201 	bic.w	r2, r2, #1
 8011320:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011326:	2b00      	cmp	r3, #0
 8011328:	d002      	beq.n	8011330 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f000 fdb2 	bl	8011e94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f000 fb87 	bl	8011a44 <UART_SetConfig>
 8011336:	4603      	mov	r3, r0
 8011338:	2b01      	cmp	r3, #1
 801133a:	d101      	bne.n	8011340 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801133c:	2301      	movs	r3, #1
 801133e:	e01b      	b.n	8011378 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	685a      	ldr	r2, [r3, #4]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801134e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	689a      	ldr	r2, [r3, #8]
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801135e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	681a      	ldr	r2, [r3, #0]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	f042 0201 	orr.w	r2, r2, #1
 801136e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f000 fe31 	bl	8011fd8 <UART_CheckIdleState>
 8011376:	4603      	mov	r3, r0
}
 8011378:	4618      	mov	r0, r3
 801137a:	3708      	adds	r7, #8
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b0ba      	sub	sp, #232	@ 0xe8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	69db      	ldr	r3, [r3, #28]
 801138e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	689b      	ldr	r3, [r3, #8]
 80113a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80113a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80113aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80113ae:	4013      	ands	r3, r2
 80113b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80113b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d11b      	bne.n	80113f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80113bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80113c0:	f003 0320 	and.w	r3, r3, #32
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d015      	beq.n	80113f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80113c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80113cc:	f003 0320 	and.w	r3, r3, #32
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d105      	bne.n	80113e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80113d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80113d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d009      	beq.n	80113f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	f000 8300 	beq.w	80119ea <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	4798      	blx	r3
      }
      return;
 80113f2:	e2fa      	b.n	80119ea <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80113f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f000 8123 	beq.w	8011644 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80113fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011402:	4b8d      	ldr	r3, [pc, #564]	@ (8011638 <HAL_UART_IRQHandler+0x2b8>)
 8011404:	4013      	ands	r3, r2
 8011406:	2b00      	cmp	r3, #0
 8011408:	d106      	bne.n	8011418 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801140a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801140e:	4b8b      	ldr	r3, [pc, #556]	@ (801163c <HAL_UART_IRQHandler+0x2bc>)
 8011410:	4013      	ands	r3, r2
 8011412:	2b00      	cmp	r3, #0
 8011414:	f000 8116 	beq.w	8011644 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801141c:	f003 0301 	and.w	r3, r3, #1
 8011420:	2b00      	cmp	r3, #0
 8011422:	d011      	beq.n	8011448 <HAL_UART_IRQHandler+0xc8>
 8011424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801142c:	2b00      	cmp	r3, #0
 801142e:	d00b      	beq.n	8011448 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2201      	movs	r2, #1
 8011436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801143e:	f043 0201 	orr.w	r2, r3, #1
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801144c:	f003 0302 	and.w	r3, r3, #2
 8011450:	2b00      	cmp	r3, #0
 8011452:	d011      	beq.n	8011478 <HAL_UART_IRQHandler+0xf8>
 8011454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011458:	f003 0301 	and.w	r3, r3, #1
 801145c:	2b00      	cmp	r3, #0
 801145e:	d00b      	beq.n	8011478 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	2202      	movs	r2, #2
 8011466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801146e:	f043 0204 	orr.w	r2, r3, #4
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801147c:	f003 0304 	and.w	r3, r3, #4
 8011480:	2b00      	cmp	r3, #0
 8011482:	d011      	beq.n	80114a8 <HAL_UART_IRQHandler+0x128>
 8011484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011488:	f003 0301 	and.w	r3, r3, #1
 801148c:	2b00      	cmp	r3, #0
 801148e:	d00b      	beq.n	80114a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	2204      	movs	r2, #4
 8011496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801149e:	f043 0202 	orr.w	r2, r3, #2
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80114a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114ac:	f003 0308 	and.w	r3, r3, #8
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d017      	beq.n	80114e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80114b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80114b8:	f003 0320 	and.w	r3, r3, #32
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d105      	bne.n	80114cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80114c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80114c4:	4b5c      	ldr	r3, [pc, #368]	@ (8011638 <HAL_UART_IRQHandler+0x2b8>)
 80114c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d00b      	beq.n	80114e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	2208      	movs	r2, #8
 80114d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80114da:	f043 0208 	orr.w	r2, r3, #8
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80114e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d012      	beq.n	8011516 <HAL_UART_IRQHandler+0x196>
 80114f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80114f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00c      	beq.n	8011516 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011504:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801150c:	f043 0220 	orr.w	r2, r3, #32
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801151c:	2b00      	cmp	r3, #0
 801151e:	f000 8266 	beq.w	80119ee <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011526:	f003 0320 	and.w	r3, r3, #32
 801152a:	2b00      	cmp	r3, #0
 801152c:	d013      	beq.n	8011556 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801152e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011532:	f003 0320 	and.w	r3, r3, #32
 8011536:	2b00      	cmp	r3, #0
 8011538:	d105      	bne.n	8011546 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801153a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011542:	2b00      	cmp	r3, #0
 8011544:	d007      	beq.n	8011556 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801154a:	2b00      	cmp	r3, #0
 801154c:	d003      	beq.n	8011556 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801155c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801156a:	2b40      	cmp	r3, #64	@ 0x40
 801156c:	d005      	beq.n	801157a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801156e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011572:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011576:	2b00      	cmp	r3, #0
 8011578:	d054      	beq.n	8011624 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f000 fe43 	bl	8012206 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	689b      	ldr	r3, [r3, #8]
 8011586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801158a:	2b40      	cmp	r3, #64	@ 0x40
 801158c:	d146      	bne.n	801161c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	3308      	adds	r3, #8
 8011594:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011598:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801159c:	e853 3f00 	ldrex	r3, [r3]
 80115a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80115a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80115a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80115ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	3308      	adds	r3, #8
 80115b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80115ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80115be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80115c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80115ca:	e841 2300 	strex	r3, r2, [r1]
 80115ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80115d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d1d9      	bne.n	801158e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d017      	beq.n	8011614 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115ea:	4a15      	ldr	r2, [pc, #84]	@ (8011640 <HAL_UART_IRQHandler+0x2c0>)
 80115ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7fa fe56 	bl	800c2a6 <HAL_DMA_Abort_IT>
 80115fa:	4603      	mov	r3, r0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d019      	beq.n	8011634 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801160e:	4610      	mov	r0, r2
 8011610:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011612:	e00f      	b.n	8011634 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f000 f9ff 	bl	8011a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801161a:	e00b      	b.n	8011634 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f000 f9fb 	bl	8011a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011622:	e007      	b.n	8011634 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 f9f7 	bl	8011a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2200      	movs	r2, #0
 801162e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8011632:	e1dc      	b.n	80119ee <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011634:	bf00      	nop
    return;
 8011636:	e1da      	b.n	80119ee <HAL_UART_IRQHandler+0x66e>
 8011638:	10000001 	.word	0x10000001
 801163c:	04000120 	.word	0x04000120
 8011640:	080122d3 	.word	0x080122d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011648:	2b01      	cmp	r3, #1
 801164a:	f040 8170 	bne.w	801192e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801164e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011652:	f003 0310 	and.w	r3, r3, #16
 8011656:	2b00      	cmp	r3, #0
 8011658:	f000 8169 	beq.w	801192e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801165c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011660:	f003 0310 	and.w	r3, r3, #16
 8011664:	2b00      	cmp	r3, #0
 8011666:	f000 8162 	beq.w	801192e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	2210      	movs	r2, #16
 8011670:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	689b      	ldr	r3, [r3, #8]
 8011678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801167c:	2b40      	cmp	r3, #64	@ 0x40
 801167e:	f040 80d8 	bne.w	8011832 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011690:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011694:	2b00      	cmp	r3, #0
 8011696:	f000 80af 	beq.w	80117f8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80116a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80116a4:	429a      	cmp	r2, r3
 80116a6:	f080 80a7 	bcs.w	80117f8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80116b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f003 0320 	and.w	r3, r3, #32
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	f040 8087 	bne.w	80117d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80116d4:	e853 3f00 	ldrex	r3, [r3]
 80116d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80116dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80116e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80116e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	461a      	mov	r2, r3
 80116ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80116f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80116f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80116fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011702:	e841 2300 	strex	r3, r2, [r1]
 8011706:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801170a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801170e:	2b00      	cmp	r3, #0
 8011710:	d1da      	bne.n	80116c8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	3308      	adds	r3, #8
 8011718:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801171a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801171c:	e853 3f00 	ldrex	r3, [r3]
 8011720:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011722:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011724:	f023 0301 	bic.w	r3, r3, #1
 8011728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	3308      	adds	r3, #8
 8011732:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011736:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801173a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801173c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801173e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011742:	e841 2300 	strex	r3, r2, [r1]
 8011746:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801174a:	2b00      	cmp	r3, #0
 801174c:	d1e1      	bne.n	8011712 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	3308      	adds	r3, #8
 8011754:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011756:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011758:	e853 3f00 	ldrex	r3, [r3]
 801175c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801175e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	3308      	adds	r3, #8
 801176e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011772:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011774:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011776:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011778:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801177a:	e841 2300 	strex	r3, r2, [r1]
 801177e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1e3      	bne.n	801174e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2220      	movs	r2, #32
 801178a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2200      	movs	r2, #0
 8011792:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801179a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801179c:	e853 3f00 	ldrex	r3, [r3]
 80117a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80117a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117a4:	f023 0310 	bic.w	r3, r3, #16
 80117a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	461a      	mov	r2, r3
 80117b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80117b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80117bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80117be:	e841 2300 	strex	r3, r2, [r1]
 80117c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80117c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d1e4      	bne.n	8011794 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fa fd09 	bl	800c1e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2202      	movs	r2, #2
 80117da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	1ad3      	subs	r3, r2, r3
 80117ec:	b29b      	uxth	r3, r3
 80117ee:	4619      	mov	r1, r3
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f000 f91b 	bl	8011a2c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80117f6:	e0fc      	b.n	80119f2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80117fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011802:	429a      	cmp	r2, r3
 8011804:	f040 80f5 	bne.w	80119f2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f003 0320 	and.w	r3, r3, #32
 8011816:	2b20      	cmp	r3, #32
 8011818:	f040 80eb 	bne.w	80119f2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2202      	movs	r2, #2
 8011820:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011828:	4619      	mov	r1, r3
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f000 f8fe 	bl	8011a2c <HAL_UARTEx_RxEventCallback>
      return;
 8011830:	e0df      	b.n	80119f2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801183e:	b29b      	uxth	r3, r3
 8011840:	1ad3      	subs	r3, r2, r3
 8011842:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801184c:	b29b      	uxth	r3, r3
 801184e:	2b00      	cmp	r3, #0
 8011850:	f000 80d1 	beq.w	80119f6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8011854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011858:	2b00      	cmp	r3, #0
 801185a:	f000 80cc 	beq.w	80119f6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011866:	e853 3f00 	ldrex	r3, [r3]
 801186a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801186c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801186e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011872:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	461a      	mov	r2, r3
 801187c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011880:	647b      	str	r3, [r7, #68]	@ 0x44
 8011882:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011884:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011886:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011888:	e841 2300 	strex	r3, r2, [r1]
 801188c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801188e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011890:	2b00      	cmp	r3, #0
 8011892:	d1e4      	bne.n	801185e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	3308      	adds	r3, #8
 801189a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801189e:	e853 3f00 	ldrex	r3, [r3]
 80118a2:	623b      	str	r3, [r7, #32]
   return(result);
 80118a4:	6a3b      	ldr	r3, [r7, #32]
 80118a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80118aa:	f023 0301 	bic.w	r3, r3, #1
 80118ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	3308      	adds	r3, #8
 80118b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80118bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80118be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80118c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118c4:	e841 2300 	strex	r3, r2, [r1]
 80118c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80118ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d1e1      	bne.n	8011894 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2220      	movs	r2, #32
 80118d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2200      	movs	r2, #0
 80118dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2200      	movs	r2, #0
 80118e2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	e853 3f00 	ldrex	r3, [r3]
 80118f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	f023 0310 	bic.w	r3, r3, #16
 80118f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	461a      	mov	r2, r3
 8011902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011906:	61fb      	str	r3, [r7, #28]
 8011908:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801190a:	69b9      	ldr	r1, [r7, #24]
 801190c:	69fa      	ldr	r2, [r7, #28]
 801190e:	e841 2300 	strex	r3, r2, [r1]
 8011912:	617b      	str	r3, [r7, #20]
   return(result);
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d1e4      	bne.n	80118e4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2202      	movs	r2, #2
 801191e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011924:	4619      	mov	r1, r3
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f000 f880 	bl	8011a2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801192c:	e063      	b.n	80119f6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801192e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011936:	2b00      	cmp	r3, #0
 8011938:	d00e      	beq.n	8011958 <HAL_UART_IRQHandler+0x5d8>
 801193a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801193e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011942:	2b00      	cmp	r3, #0
 8011944:	d008      	beq.n	8011958 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801194e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f000 fcfb 	bl	801234c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011956:	e051      	b.n	80119fc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801195c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011960:	2b00      	cmp	r3, #0
 8011962:	d014      	beq.n	801198e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801196c:	2b00      	cmp	r3, #0
 801196e:	d105      	bne.n	801197c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011974:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011978:	2b00      	cmp	r3, #0
 801197a:	d008      	beq.n	801198e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011980:	2b00      	cmp	r3, #0
 8011982:	d03a      	beq.n	80119fa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	4798      	blx	r3
    }
    return;
 801198c:	e035      	b.n	80119fa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801198e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011996:	2b00      	cmp	r3, #0
 8011998:	d009      	beq.n	80119ae <HAL_UART_IRQHandler+0x62e>
 801199a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801199e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d003      	beq.n	80119ae <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f000 fca5 	bl	80122f6 <UART_EndTransmit_IT>
    return;
 80119ac:	e026      	b.n	80119fc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80119ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80119b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d009      	beq.n	80119ce <HAL_UART_IRQHandler+0x64e>
 80119ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80119be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d003      	beq.n	80119ce <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 fcd4 	bl	8012374 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80119cc:	e016      	b.n	80119fc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80119ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80119d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d010      	beq.n	80119fc <HAL_UART_IRQHandler+0x67c>
 80119da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80119de:	2b00      	cmp	r3, #0
 80119e0:	da0c      	bge.n	80119fc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f000 fcbc 	bl	8012360 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80119e8:	e008      	b.n	80119fc <HAL_UART_IRQHandler+0x67c>
      return;
 80119ea:	bf00      	nop
 80119ec:	e006      	b.n	80119fc <HAL_UART_IRQHandler+0x67c>
    return;
 80119ee:	bf00      	nop
 80119f0:	e004      	b.n	80119fc <HAL_UART_IRQHandler+0x67c>
      return;
 80119f2:	bf00      	nop
 80119f4:	e002      	b.n	80119fc <HAL_UART_IRQHandler+0x67c>
      return;
 80119f6:	bf00      	nop
 80119f8:	e000      	b.n	80119fc <HAL_UART_IRQHandler+0x67c>
    return;
 80119fa:	bf00      	nop
  }
}
 80119fc:	37e8      	adds	r7, #232	@ 0xe8
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
 8011a02:	bf00      	nop

08011a04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011a04:	b480      	push	{r7}
 8011a06:	b083      	sub	sp, #12
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011a0c:	bf00      	nop
 8011a0e:	370c      	adds	r7, #12
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr

08011a18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b083      	sub	sp, #12
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011a20:	bf00      	nop
 8011a22:	370c      	adds	r7, #12
 8011a24:	46bd      	mov	sp, r7
 8011a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2a:	4770      	bx	lr

08011a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	b083      	sub	sp, #12
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	460b      	mov	r3, r1
 8011a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011a38:	bf00      	nop
 8011a3a:	370c      	adds	r7, #12
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr

08011a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a48:	b08c      	sub	sp, #48	@ 0x30
 8011a4a:	af00      	add	r7, sp, #0
 8011a4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	689a      	ldr	r2, [r3, #8]
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	691b      	ldr	r3, [r3, #16]
 8011a5c:	431a      	orrs	r2, r3
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	695b      	ldr	r3, [r3, #20]
 8011a62:	431a      	orrs	r2, r3
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	69db      	ldr	r3, [r3, #28]
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	681a      	ldr	r2, [r3, #0]
 8011a72:	4baf      	ldr	r3, [pc, #700]	@ (8011d30 <UART_SetConfig+0x2ec>)
 8011a74:	4013      	ands	r3, r2
 8011a76:	697a      	ldr	r2, [r7, #20]
 8011a78:	6812      	ldr	r2, [r2, #0]
 8011a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011a7c:	430b      	orrs	r3, r1
 8011a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	68da      	ldr	r2, [r3, #12]
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	430a      	orrs	r2, r1
 8011a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	699b      	ldr	r3, [r3, #24]
 8011a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	4aa4      	ldr	r2, [pc, #656]	@ (8011d34 <UART_SetConfig+0x2f0>)
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d004      	beq.n	8011ab0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	6a1b      	ldr	r3, [r3, #32]
 8011aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011aac:	4313      	orrs	r3, r2
 8011aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	689b      	ldr	r3, [r3, #8]
 8011ab6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8011aba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8011abe:	697a      	ldr	r2, [r7, #20]
 8011ac0:	6812      	ldr	r2, [r2, #0]
 8011ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ac4:	430b      	orrs	r3, r1
 8011ac6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ace:	f023 010f 	bic.w	r1, r3, #15
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	430a      	orrs	r2, r1
 8011adc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	4a95      	ldr	r2, [pc, #596]	@ (8011d38 <UART_SetConfig+0x2f4>)
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d125      	bne.n	8011b34 <UART_SetConfig+0xf0>
 8011ae8:	2003      	movs	r0, #3
 8011aea:	f7ff fbd9 	bl	80112a0 <LL_RCC_GetUSARTClockSource>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b03      	cmp	r3, #3
 8011af2:	d81b      	bhi.n	8011b2c <UART_SetConfig+0xe8>
 8011af4:	a201      	add	r2, pc, #4	@ (adr r2, 8011afc <UART_SetConfig+0xb8>)
 8011af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011afa:	bf00      	nop
 8011afc:	08011b0d 	.word	0x08011b0d
 8011b00:	08011b1d 	.word	0x08011b1d
 8011b04:	08011b15 	.word	0x08011b15
 8011b08:	08011b25 	.word	0x08011b25
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b12:	e042      	b.n	8011b9a <UART_SetConfig+0x156>
 8011b14:	2302      	movs	r3, #2
 8011b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b1a:	e03e      	b.n	8011b9a <UART_SetConfig+0x156>
 8011b1c:	2304      	movs	r3, #4
 8011b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b22:	e03a      	b.n	8011b9a <UART_SetConfig+0x156>
 8011b24:	2308      	movs	r3, #8
 8011b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b2a:	e036      	b.n	8011b9a <UART_SetConfig+0x156>
 8011b2c:	2310      	movs	r3, #16
 8011b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b32:	e032      	b.n	8011b9a <UART_SetConfig+0x156>
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4a7e      	ldr	r2, [pc, #504]	@ (8011d34 <UART_SetConfig+0x2f0>)
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	d12a      	bne.n	8011b94 <UART_SetConfig+0x150>
 8011b3e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8011b42:	f7ff fbbd 	bl	80112c0 <LL_RCC_GetLPUARTClockSource>
 8011b46:	4603      	mov	r3, r0
 8011b48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011b4c:	d01a      	beq.n	8011b84 <UART_SetConfig+0x140>
 8011b4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011b52:	d81b      	bhi.n	8011b8c <UART_SetConfig+0x148>
 8011b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011b58:	d00c      	beq.n	8011b74 <UART_SetConfig+0x130>
 8011b5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011b5e:	d815      	bhi.n	8011b8c <UART_SetConfig+0x148>
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d003      	beq.n	8011b6c <UART_SetConfig+0x128>
 8011b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011b68:	d008      	beq.n	8011b7c <UART_SetConfig+0x138>
 8011b6a:	e00f      	b.n	8011b8c <UART_SetConfig+0x148>
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b72:	e012      	b.n	8011b9a <UART_SetConfig+0x156>
 8011b74:	2302      	movs	r3, #2
 8011b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b7a:	e00e      	b.n	8011b9a <UART_SetConfig+0x156>
 8011b7c:	2304      	movs	r3, #4
 8011b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b82:	e00a      	b.n	8011b9a <UART_SetConfig+0x156>
 8011b84:	2308      	movs	r3, #8
 8011b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b8a:	e006      	b.n	8011b9a <UART_SetConfig+0x156>
 8011b8c:	2310      	movs	r3, #16
 8011b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b92:	e002      	b.n	8011b9a <UART_SetConfig+0x156>
 8011b94:	2310      	movs	r3, #16
 8011b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	4a65      	ldr	r2, [pc, #404]	@ (8011d34 <UART_SetConfig+0x2f0>)
 8011ba0:	4293      	cmp	r3, r2
 8011ba2:	f040 8097 	bne.w	8011cd4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011baa:	2b08      	cmp	r3, #8
 8011bac:	d823      	bhi.n	8011bf6 <UART_SetConfig+0x1b2>
 8011bae:	a201      	add	r2, pc, #4	@ (adr r2, 8011bb4 <UART_SetConfig+0x170>)
 8011bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bb4:	08011bd9 	.word	0x08011bd9
 8011bb8:	08011bf7 	.word	0x08011bf7
 8011bbc:	08011be1 	.word	0x08011be1
 8011bc0:	08011bf7 	.word	0x08011bf7
 8011bc4:	08011be7 	.word	0x08011be7
 8011bc8:	08011bf7 	.word	0x08011bf7
 8011bcc:	08011bf7 	.word	0x08011bf7
 8011bd0:	08011bf7 	.word	0x08011bf7
 8011bd4:	08011bef 	.word	0x08011bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011bd8:	f7fd fb64 	bl	800f2a4 <HAL_RCC_GetPCLK1Freq>
 8011bdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011bde:	e010      	b.n	8011c02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011be0:	4b56      	ldr	r3, [pc, #344]	@ (8011d3c <UART_SetConfig+0x2f8>)
 8011be2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011be4:	e00d      	b.n	8011c02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011be6:	f7fd fadd 	bl	800f1a4 <HAL_RCC_GetSysClockFreq>
 8011bea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011bec:	e009      	b.n	8011c02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011bee:	f248 0306 	movw	r3, #32774	@ 0x8006
 8011bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011bf4:	e005      	b.n	8011c02 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011c00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f000 812b 	beq.w	8011e60 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c0e:	4a4c      	ldr	r2, [pc, #304]	@ (8011d40 <UART_SetConfig+0x2fc>)
 8011c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c14:	461a      	mov	r2, r3
 8011c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	685a      	ldr	r2, [r3, #4]
 8011c22:	4613      	mov	r3, r2
 8011c24:	005b      	lsls	r3, r3, #1
 8011c26:	4413      	add	r3, r2
 8011c28:	69ba      	ldr	r2, [r7, #24]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d305      	bcc.n	8011c3a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011c34:	69ba      	ldr	r2, [r7, #24]
 8011c36:	429a      	cmp	r2, r3
 8011c38:	d903      	bls.n	8011c42 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011c40:	e10e      	b.n	8011e60 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c44:	2200      	movs	r2, #0
 8011c46:	60bb      	str	r3, [r7, #8]
 8011c48:	60fa      	str	r2, [r7, #12]
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c4e:	4a3c      	ldr	r2, [pc, #240]	@ (8011d40 <UART_SetConfig+0x2fc>)
 8011c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c54:	b29b      	uxth	r3, r3
 8011c56:	2200      	movs	r2, #0
 8011c58:	603b      	str	r3, [r7, #0]
 8011c5a:	607a      	str	r2, [r7, #4]
 8011c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011c64:	f7ee ff98 	bl	8000b98 <__aeabi_uldivmod>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	460b      	mov	r3, r1
 8011c6c:	4610      	mov	r0, r2
 8011c6e:	4619      	mov	r1, r3
 8011c70:	f04f 0200 	mov.w	r2, #0
 8011c74:	f04f 0300 	mov.w	r3, #0
 8011c78:	020b      	lsls	r3, r1, #8
 8011c7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011c7e:	0202      	lsls	r2, r0, #8
 8011c80:	6979      	ldr	r1, [r7, #20]
 8011c82:	6849      	ldr	r1, [r1, #4]
 8011c84:	0849      	lsrs	r1, r1, #1
 8011c86:	2000      	movs	r0, #0
 8011c88:	460c      	mov	r4, r1
 8011c8a:	4605      	mov	r5, r0
 8011c8c:	eb12 0804 	adds.w	r8, r2, r4
 8011c90:	eb43 0905 	adc.w	r9, r3, r5
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	469a      	mov	sl, r3
 8011c9c:	4693      	mov	fp, r2
 8011c9e:	4652      	mov	r2, sl
 8011ca0:	465b      	mov	r3, fp
 8011ca2:	4640      	mov	r0, r8
 8011ca4:	4649      	mov	r1, r9
 8011ca6:	f7ee ff77 	bl	8000b98 <__aeabi_uldivmod>
 8011caa:	4602      	mov	r2, r0
 8011cac:	460b      	mov	r3, r1
 8011cae:	4613      	mov	r3, r2
 8011cb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011cb2:	6a3b      	ldr	r3, [r7, #32]
 8011cb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011cb8:	d308      	bcc.n	8011ccc <UART_SetConfig+0x288>
 8011cba:	6a3b      	ldr	r3, [r7, #32]
 8011cbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011cc0:	d204      	bcs.n	8011ccc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	6a3a      	ldr	r2, [r7, #32]
 8011cc8:	60da      	str	r2, [r3, #12]
 8011cca:	e0c9      	b.n	8011e60 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8011ccc:	2301      	movs	r3, #1
 8011cce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011cd2:	e0c5      	b.n	8011e60 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	69db      	ldr	r3, [r3, #28]
 8011cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011cdc:	d16d      	bne.n	8011dba <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8011cde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011ce2:	3b01      	subs	r3, #1
 8011ce4:	2b07      	cmp	r3, #7
 8011ce6:	d82d      	bhi.n	8011d44 <UART_SetConfig+0x300>
 8011ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8011cf0 <UART_SetConfig+0x2ac>)
 8011cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cee:	bf00      	nop
 8011cf0:	08011d11 	.word	0x08011d11
 8011cf4:	08011d19 	.word	0x08011d19
 8011cf8:	08011d45 	.word	0x08011d45
 8011cfc:	08011d1f 	.word	0x08011d1f
 8011d00:	08011d45 	.word	0x08011d45
 8011d04:	08011d45 	.word	0x08011d45
 8011d08:	08011d45 	.word	0x08011d45
 8011d0c:	08011d27 	.word	0x08011d27
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011d10:	f7fd fade 	bl	800f2d0 <HAL_RCC_GetPCLK2Freq>
 8011d14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011d16:	e01b      	b.n	8011d50 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011d18:	4b08      	ldr	r3, [pc, #32]	@ (8011d3c <UART_SetConfig+0x2f8>)
 8011d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011d1c:	e018      	b.n	8011d50 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011d1e:	f7fd fa41 	bl	800f1a4 <HAL_RCC_GetSysClockFreq>
 8011d22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011d24:	e014      	b.n	8011d50 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d26:	f248 0306 	movw	r3, #32774	@ 0x8006
 8011d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011d2c:	e010      	b.n	8011d50 <UART_SetConfig+0x30c>
 8011d2e:	bf00      	nop
 8011d30:	cfff69f3 	.word	0xcfff69f3
 8011d34:	40008000 	.word	0x40008000
 8011d38:	40013800 	.word	0x40013800
 8011d3c:	00f42400 	.word	0x00f42400
 8011d40:	08018694 	.word	0x08018694
      default:
        pclk = 0U;
 8011d44:	2300      	movs	r3, #0
 8011d46:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011d48:	2301      	movs	r3, #1
 8011d4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011d4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f000 8084 	beq.w	8011e60 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d5c:	4a4b      	ldr	r2, [pc, #300]	@ (8011e8c <UART_SetConfig+0x448>)
 8011d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d62:	461a      	mov	r2, r3
 8011d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d66:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d6a:	005a      	lsls	r2, r3, #1
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	085b      	lsrs	r3, r3, #1
 8011d72:	441a      	add	r2, r3
 8011d74:	697b      	ldr	r3, [r7, #20]
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d7c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d7e:	6a3b      	ldr	r3, [r7, #32]
 8011d80:	2b0f      	cmp	r3, #15
 8011d82:	d916      	bls.n	8011db2 <UART_SetConfig+0x36e>
 8011d84:	6a3b      	ldr	r3, [r7, #32]
 8011d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d8a:	d212      	bcs.n	8011db2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011d8c:	6a3b      	ldr	r3, [r7, #32]
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	f023 030f 	bic.w	r3, r3, #15
 8011d94:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011d96:	6a3b      	ldr	r3, [r7, #32]
 8011d98:	085b      	lsrs	r3, r3, #1
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	f003 0307 	and.w	r3, r3, #7
 8011da0:	b29a      	uxth	r2, r3
 8011da2:	8bfb      	ldrh	r3, [r7, #30]
 8011da4:	4313      	orrs	r3, r2
 8011da6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	8bfa      	ldrh	r2, [r7, #30]
 8011dae:	60da      	str	r2, [r3, #12]
 8011db0:	e056      	b.n	8011e60 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8011db2:	2301      	movs	r3, #1
 8011db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011db8:	e052      	b.n	8011e60 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011dba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011dbe:	3b01      	subs	r3, #1
 8011dc0:	2b07      	cmp	r3, #7
 8011dc2:	d822      	bhi.n	8011e0a <UART_SetConfig+0x3c6>
 8011dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8011dcc <UART_SetConfig+0x388>)
 8011dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dca:	bf00      	nop
 8011dcc:	08011ded 	.word	0x08011ded
 8011dd0:	08011df5 	.word	0x08011df5
 8011dd4:	08011e0b 	.word	0x08011e0b
 8011dd8:	08011dfb 	.word	0x08011dfb
 8011ddc:	08011e0b 	.word	0x08011e0b
 8011de0:	08011e0b 	.word	0x08011e0b
 8011de4:	08011e0b 	.word	0x08011e0b
 8011de8:	08011e03 	.word	0x08011e03
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011dec:	f7fd fa70 	bl	800f2d0 <HAL_RCC_GetPCLK2Freq>
 8011df0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011df2:	e010      	b.n	8011e16 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011df4:	4b26      	ldr	r3, [pc, #152]	@ (8011e90 <UART_SetConfig+0x44c>)
 8011df6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011df8:	e00d      	b.n	8011e16 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011dfa:	f7fd f9d3 	bl	800f1a4 <HAL_RCC_GetSysClockFreq>
 8011dfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011e00:	e009      	b.n	8011e16 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011e02:	f248 0306 	movw	r3, #32774	@ 0x8006
 8011e06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011e08:	e005      	b.n	8011e16 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011e0e:	2301      	movs	r3, #1
 8011e10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011e14:	bf00      	nop
    }

    if (pclk != 0U)
 8011e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d021      	beq.n	8011e60 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e20:	4a1a      	ldr	r2, [pc, #104]	@ (8011e8c <UART_SetConfig+0x448>)
 8011e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e26:	461a      	mov	r2, r3
 8011e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	085b      	lsrs	r3, r3, #1
 8011e34:	441a      	add	r2, r3
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011e40:	6a3b      	ldr	r3, [r7, #32]
 8011e42:	2b0f      	cmp	r3, #15
 8011e44:	d909      	bls.n	8011e5a <UART_SetConfig+0x416>
 8011e46:	6a3b      	ldr	r3, [r7, #32]
 8011e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011e4c:	d205      	bcs.n	8011e5a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011e4e:	6a3b      	ldr	r3, [r7, #32]
 8011e50:	b29a      	uxth	r2, r3
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	60da      	str	r2, [r3, #12]
 8011e58:	e002      	b.n	8011e60 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	2201      	movs	r2, #1
 8011e64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	2201      	movs	r2, #1
 8011e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	2200      	movs	r2, #0
 8011e74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011e7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3730      	adds	r7, #48	@ 0x30
 8011e84:	46bd      	mov	sp, r7
 8011e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011e8a:	bf00      	nop
 8011e8c:	08018694 	.word	0x08018694
 8011e90:	00f42400 	.word	0x00f42400

08011e94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011e94:	b480      	push	{r7}
 8011e96:	b083      	sub	sp, #12
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ea0:	f003 0308 	and.w	r3, r3, #8
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d00a      	beq.n	8011ebe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	430a      	orrs	r2, r1
 8011ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ec2:	f003 0301 	and.w	r3, r3, #1
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d00a      	beq.n	8011ee0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	430a      	orrs	r2, r1
 8011ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ee4:	f003 0302 	and.w	r3, r3, #2
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d00a      	beq.n	8011f02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	430a      	orrs	r2, r1
 8011f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f06:	f003 0304 	and.w	r3, r3, #4
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d00a      	beq.n	8011f24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	685b      	ldr	r3, [r3, #4]
 8011f14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	430a      	orrs	r2, r1
 8011f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f28:	f003 0310 	and.w	r3, r3, #16
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d00a      	beq.n	8011f46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	689b      	ldr	r3, [r3, #8]
 8011f36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	430a      	orrs	r2, r1
 8011f44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f4a:	f003 0320 	and.w	r3, r3, #32
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d00a      	beq.n	8011f68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	689b      	ldr	r3, [r3, #8]
 8011f58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	430a      	orrs	r2, r1
 8011f66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d01a      	beq.n	8011faa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	685b      	ldr	r3, [r3, #4]
 8011f7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	430a      	orrs	r2, r1
 8011f88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011f92:	d10a      	bne.n	8011faa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	430a      	orrs	r2, r1
 8011fa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d00a      	beq.n	8011fcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	685b      	ldr	r3, [r3, #4]
 8011fbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	430a      	orrs	r2, r1
 8011fca:	605a      	str	r2, [r3, #4]
  }
}
 8011fcc:	bf00      	nop
 8011fce:	370c      	adds	r7, #12
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd6:	4770      	bx	lr

08011fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b098      	sub	sp, #96	@ 0x60
 8011fdc:	af02      	add	r7, sp, #8
 8011fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011fe8:	f7f8 fd2a 	bl	800aa40 <HAL_GetTick>
 8011fec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	f003 0308 	and.w	r3, r3, #8
 8011ff8:	2b08      	cmp	r3, #8
 8011ffa:	d12f      	bne.n	801205c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ffc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012000:	9300      	str	r3, [sp, #0]
 8012002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012004:	2200      	movs	r2, #0
 8012006:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f000 f88e 	bl	801212c <UART_WaitOnFlagUntilTimeout>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d022      	beq.n	801205c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801201c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801201e:	e853 3f00 	ldrex	r3, [r3]
 8012022:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801202a:	653b      	str	r3, [r7, #80]	@ 0x50
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	461a      	mov	r2, r3
 8012032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012034:	647b      	str	r3, [r7, #68]	@ 0x44
 8012036:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012038:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801203a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801203c:	e841 2300 	strex	r3, r2, [r1]
 8012040:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012044:	2b00      	cmp	r3, #0
 8012046:	d1e6      	bne.n	8012016 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2220      	movs	r2, #32
 801204c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2200      	movs	r2, #0
 8012054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012058:	2303      	movs	r3, #3
 801205a:	e063      	b.n	8012124 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	f003 0304 	and.w	r3, r3, #4
 8012066:	2b04      	cmp	r3, #4
 8012068:	d149      	bne.n	80120fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801206a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801206e:	9300      	str	r3, [sp, #0]
 8012070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012072:	2200      	movs	r2, #0
 8012074:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f000 f857 	bl	801212c <UART_WaitOnFlagUntilTimeout>
 801207e:	4603      	mov	r3, r0
 8012080:	2b00      	cmp	r3, #0
 8012082:	d03c      	beq.n	80120fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801208c:	e853 3f00 	ldrex	r3, [r3]
 8012090:	623b      	str	r3, [r7, #32]
   return(result);
 8012092:	6a3b      	ldr	r3, [r7, #32]
 8012094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012098:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	461a      	mov	r2, r3
 80120a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80120a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80120a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120aa:	e841 2300 	strex	r3, r2, [r1]
 80120ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80120b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d1e6      	bne.n	8012084 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	3308      	adds	r3, #8
 80120bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	e853 3f00 	ldrex	r3, [r3]
 80120c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	f023 0301 	bic.w	r3, r3, #1
 80120cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	3308      	adds	r3, #8
 80120d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80120d6:	61fa      	str	r2, [r7, #28]
 80120d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120da:	69b9      	ldr	r1, [r7, #24]
 80120dc:	69fa      	ldr	r2, [r7, #28]
 80120de:	e841 2300 	strex	r3, r2, [r1]
 80120e2:	617b      	str	r3, [r7, #20]
   return(result);
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d1e5      	bne.n	80120b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2220      	movs	r2, #32
 80120ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2200      	movs	r2, #0
 80120f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80120fa:	2303      	movs	r3, #3
 80120fc:	e012      	b.n	8012124 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2220      	movs	r2, #32
 8012102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2220      	movs	r2, #32
 801210a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2200      	movs	r2, #0
 8012112:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2200      	movs	r2, #0
 8012118:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2200      	movs	r2, #0
 801211e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012122:	2300      	movs	r3, #0
}
 8012124:	4618      	mov	r0, r3
 8012126:	3758      	adds	r7, #88	@ 0x58
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	603b      	str	r3, [r7, #0]
 8012138:	4613      	mov	r3, r2
 801213a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801213c:	e04f      	b.n	80121de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801213e:	69bb      	ldr	r3, [r7, #24]
 8012140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012144:	d04b      	beq.n	80121de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012146:	f7f8 fc7b 	bl	800aa40 <HAL_GetTick>
 801214a:	4602      	mov	r2, r0
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	1ad3      	subs	r3, r2, r3
 8012150:	69ba      	ldr	r2, [r7, #24]
 8012152:	429a      	cmp	r2, r3
 8012154:	d302      	bcc.n	801215c <UART_WaitOnFlagUntilTimeout+0x30>
 8012156:	69bb      	ldr	r3, [r7, #24]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d101      	bne.n	8012160 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801215c:	2303      	movs	r3, #3
 801215e:	e04e      	b.n	80121fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f003 0304 	and.w	r3, r3, #4
 801216a:	2b00      	cmp	r3, #0
 801216c:	d037      	beq.n	80121de <UART_WaitOnFlagUntilTimeout+0xb2>
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	2b80      	cmp	r3, #128	@ 0x80
 8012172:	d034      	beq.n	80121de <UART_WaitOnFlagUntilTimeout+0xb2>
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	2b40      	cmp	r3, #64	@ 0x40
 8012178:	d031      	beq.n	80121de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	69db      	ldr	r3, [r3, #28]
 8012180:	f003 0308 	and.w	r3, r3, #8
 8012184:	2b08      	cmp	r3, #8
 8012186:	d110      	bne.n	80121aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2208      	movs	r2, #8
 801218e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012190:	68f8      	ldr	r0, [r7, #12]
 8012192:	f000 f838 	bl	8012206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2208      	movs	r2, #8
 801219a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2200      	movs	r2, #0
 80121a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80121a6:	2301      	movs	r3, #1
 80121a8:	e029      	b.n	80121fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	69db      	ldr	r3, [r3, #28]
 80121b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80121b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80121b8:	d111      	bne.n	80121de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80121c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80121c4:	68f8      	ldr	r0, [r7, #12]
 80121c6:	f000 f81e 	bl	8012206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2220      	movs	r2, #32
 80121ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	2200      	movs	r2, #0
 80121d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80121da:	2303      	movs	r3, #3
 80121dc:	e00f      	b.n	80121fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	69da      	ldr	r2, [r3, #28]
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	4013      	ands	r3, r2
 80121e8:	68ba      	ldr	r2, [r7, #8]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	bf0c      	ite	eq
 80121ee:	2301      	moveq	r3, #1
 80121f0:	2300      	movne	r3, #0
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	461a      	mov	r2, r3
 80121f6:	79fb      	ldrb	r3, [r7, #7]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d0a0      	beq.n	801213e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80121fc:	2300      	movs	r3, #0
}
 80121fe:	4618      	mov	r0, r3
 8012200:	3710      	adds	r7, #16
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}

08012206 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012206:	b480      	push	{r7}
 8012208:	b095      	sub	sp, #84	@ 0x54
 801220a:	af00      	add	r7, sp, #0
 801220c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012216:	e853 3f00 	ldrex	r3, [r3]
 801221a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801221e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	461a      	mov	r2, r3
 801222a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801222c:	643b      	str	r3, [r7, #64]	@ 0x40
 801222e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012230:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012232:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012234:	e841 2300 	strex	r3, r2, [r1]
 8012238:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801223a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801223c:	2b00      	cmp	r3, #0
 801223e:	d1e6      	bne.n	801220e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	3308      	adds	r3, #8
 8012246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012248:	6a3b      	ldr	r3, [r7, #32]
 801224a:	e853 3f00 	ldrex	r3, [r3]
 801224e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012256:	f023 0301 	bic.w	r3, r3, #1
 801225a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	3308      	adds	r3, #8
 8012262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012264:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012266:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801226a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801226c:	e841 2300 	strex	r3, r2, [r1]
 8012270:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012274:	2b00      	cmp	r3, #0
 8012276:	d1e3      	bne.n	8012240 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801227c:	2b01      	cmp	r3, #1
 801227e:	d118      	bne.n	80122b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	e853 3f00 	ldrex	r3, [r3]
 801228c:	60bb      	str	r3, [r7, #8]
   return(result);
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	f023 0310 	bic.w	r3, r3, #16
 8012294:	647b      	str	r3, [r7, #68]	@ 0x44
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	461a      	mov	r2, r3
 801229c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801229e:	61bb      	str	r3, [r7, #24]
 80122a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122a2:	6979      	ldr	r1, [r7, #20]
 80122a4:	69ba      	ldr	r2, [r7, #24]
 80122a6:	e841 2300 	strex	r3, r2, [r1]
 80122aa:	613b      	str	r3, [r7, #16]
   return(result);
 80122ac:	693b      	ldr	r3, [r7, #16]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d1e6      	bne.n	8012280 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2220      	movs	r2, #32
 80122b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2200      	movs	r2, #0
 80122be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2200      	movs	r2, #0
 80122c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80122c6:	bf00      	nop
 80122c8:	3754      	adds	r7, #84	@ 0x54
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr

080122d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80122d2:	b580      	push	{r7, lr}
 80122d4:	b084      	sub	sp, #16
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2200      	movs	r2, #0
 80122e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80122e8:	68f8      	ldr	r0, [r7, #12]
 80122ea:	f7ff fb95 	bl	8011a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122ee:	bf00      	nop
 80122f0:	3710      	adds	r7, #16
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b088      	sub	sp, #32
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	e853 3f00 	ldrex	r3, [r3]
 801230a:	60bb      	str	r3, [r7, #8]
   return(result);
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012312:	61fb      	str	r3, [r7, #28]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	461a      	mov	r2, r3
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	61bb      	str	r3, [r7, #24]
 801231e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012320:	6979      	ldr	r1, [r7, #20]
 8012322:	69ba      	ldr	r2, [r7, #24]
 8012324:	e841 2300 	strex	r3, r2, [r1]
 8012328:	613b      	str	r3, [r7, #16]
   return(result);
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d1e6      	bne.n	80122fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2220      	movs	r2, #32
 8012334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2200      	movs	r2, #0
 801233c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f7ff fb60 	bl	8011a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012344:	bf00      	nop
 8012346:	3720      	adds	r7, #32
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}

0801234c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012354:	bf00      	nop
 8012356:	370c      	adds	r7, #12
 8012358:	46bd      	mov	sp, r7
 801235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235e:	4770      	bx	lr

08012360 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012360:	b480      	push	{r7}
 8012362:	b083      	sub	sp, #12
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012368:	bf00      	nop
 801236a:	370c      	adds	r7, #12
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012374:	b480      	push	{r7}
 8012376:	b083      	sub	sp, #12
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801237c:	bf00      	nop
 801237e:	370c      	adds	r7, #12
 8012380:	46bd      	mov	sp, r7
 8012382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012386:	4770      	bx	lr

08012388 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012388:	b480      	push	{r7}
 801238a:	b085      	sub	sp, #20
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012396:	2b01      	cmp	r3, #1
 8012398:	d101      	bne.n	801239e <HAL_UARTEx_DisableFifoMode+0x16>
 801239a:	2302      	movs	r3, #2
 801239c:	e027      	b.n	80123ee <HAL_UARTEx_DisableFifoMode+0x66>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2201      	movs	r2, #1
 80123a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2224      	movs	r2, #36	@ 0x24
 80123aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	681a      	ldr	r2, [r3, #0]
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f022 0201 	bic.w	r2, r2, #1
 80123c4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80123cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2200      	movs	r2, #0
 80123d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	68fa      	ldr	r2, [r7, #12]
 80123da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2220      	movs	r2, #32
 80123e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2200      	movs	r2, #0
 80123e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80123ec:	2300      	movs	r3, #0
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3714      	adds	r7, #20
 80123f2:	46bd      	mov	sp, r7
 80123f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f8:	4770      	bx	lr

080123fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80123fa:	b580      	push	{r7, lr}
 80123fc:	b084      	sub	sp, #16
 80123fe:	af00      	add	r7, sp, #0
 8012400:	6078      	str	r0, [r7, #4]
 8012402:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801240a:	2b01      	cmp	r3, #1
 801240c:	d101      	bne.n	8012412 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801240e:	2302      	movs	r3, #2
 8012410:	e02d      	b.n	801246e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2201      	movs	r2, #1
 8012416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2224      	movs	r2, #36	@ 0x24
 801241e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f022 0201 	bic.w	r2, r2, #1
 8012438:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	689b      	ldr	r3, [r3, #8]
 8012440:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	683a      	ldr	r2, [r7, #0]
 801244a:	430a      	orrs	r2, r1
 801244c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f000 f850 	bl	80124f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	68fa      	ldr	r2, [r7, #12]
 801245a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2220      	movs	r2, #32
 8012460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2200      	movs	r2, #0
 8012468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801246c:	2300      	movs	r3, #0
}
 801246e:	4618      	mov	r0, r3
 8012470:	3710      	adds	r7, #16
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}

08012476 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012476:	b580      	push	{r7, lr}
 8012478:	b084      	sub	sp, #16
 801247a:	af00      	add	r7, sp, #0
 801247c:	6078      	str	r0, [r7, #4]
 801247e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012486:	2b01      	cmp	r3, #1
 8012488:	d101      	bne.n	801248e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801248a:	2302      	movs	r3, #2
 801248c:	e02d      	b.n	80124ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2201      	movs	r2, #1
 8012492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2224      	movs	r2, #36	@ 0x24
 801249a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	681a      	ldr	r2, [r3, #0]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f022 0201 	bic.w	r2, r2, #1
 80124b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	689b      	ldr	r3, [r3, #8]
 80124bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	683a      	ldr	r2, [r7, #0]
 80124c6:	430a      	orrs	r2, r1
 80124c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f000 f812 	bl	80124f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	68fa      	ldr	r2, [r7, #12]
 80124d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2220      	movs	r2, #32
 80124dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2200      	movs	r2, #0
 80124e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80124e8:	2300      	movs	r3, #0
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	3710      	adds	r7, #16
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
	...

080124f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80124f4:	b480      	push	{r7}
 80124f6:	b085      	sub	sp, #20
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012500:	2b00      	cmp	r3, #0
 8012502:	d108      	bne.n	8012516 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2201      	movs	r2, #1
 8012508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2201      	movs	r2, #1
 8012510:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012514:	e031      	b.n	801257a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012516:	2308      	movs	r3, #8
 8012518:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801251a:	2308      	movs	r3, #8
 801251c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	689b      	ldr	r3, [r3, #8]
 8012524:	0e5b      	lsrs	r3, r3, #25
 8012526:	b2db      	uxtb	r3, r3
 8012528:	f003 0307 	and.w	r3, r3, #7
 801252c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	689b      	ldr	r3, [r3, #8]
 8012534:	0f5b      	lsrs	r3, r3, #29
 8012536:	b2db      	uxtb	r3, r3
 8012538:	f003 0307 	and.w	r3, r3, #7
 801253c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801253e:	7bbb      	ldrb	r3, [r7, #14]
 8012540:	7b3a      	ldrb	r2, [r7, #12]
 8012542:	4911      	ldr	r1, [pc, #68]	@ (8012588 <UARTEx_SetNbDataToProcess+0x94>)
 8012544:	5c8a      	ldrb	r2, [r1, r2]
 8012546:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801254a:	7b3a      	ldrb	r2, [r7, #12]
 801254c:	490f      	ldr	r1, [pc, #60]	@ (801258c <UARTEx_SetNbDataToProcess+0x98>)
 801254e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012550:	fb93 f3f2 	sdiv	r3, r3, r2
 8012554:	b29a      	uxth	r2, r3
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801255c:	7bfb      	ldrb	r3, [r7, #15]
 801255e:	7b7a      	ldrb	r2, [r7, #13]
 8012560:	4909      	ldr	r1, [pc, #36]	@ (8012588 <UARTEx_SetNbDataToProcess+0x94>)
 8012562:	5c8a      	ldrb	r2, [r1, r2]
 8012564:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012568:	7b7a      	ldrb	r2, [r7, #13]
 801256a:	4908      	ldr	r1, [pc, #32]	@ (801258c <UARTEx_SetNbDataToProcess+0x98>)
 801256c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801256e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012572:	b29a      	uxth	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801257a:	bf00      	nop
 801257c:	3714      	adds	r7, #20
 801257e:	46bd      	mov	sp, r7
 8012580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012584:	4770      	bx	lr
 8012586:	bf00      	nop
 8012588:	080186ac 	.word	0x080186ac
 801258c:	080186b4 	.word	0x080186b4

08012590 <_Z14i2c_mux_selectP7i2c_muxi>:

	// Ensure all channels are disabled by default
	return i2c_mux_select_multi(mux, 0);
}

int i2c_mux_select(i2c_mux_t* mux, int ch) {
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]

	// If ch is in range 0-7 then one channel is enabled, else all are disabled
	uint8_t mask = 1 << ch;
 801259a:	2201      	movs	r2, #1
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	fa02 f303 	lsl.w	r3, r2, r3
 80125a2:	73fb      	strb	r3, [r7, #15]
	return i2c_mux_select_multi(mux, mask);
 80125a4:	7bfb      	ldrb	r3, [r7, #15]
 80125a6:	4619      	mov	r1, r3
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f000 f805 	bl	80125b8 <_Z20i2c_mux_select_multiP7i2c_muxh>
 80125ae:	4603      	mov	r3, r0
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3710      	adds	r7, #16
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <_Z20i2c_mux_select_multiP7i2c_muxh>:

int i2c_mux_select_multi(i2c_mux_t* mux, uint8_t mask) {
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b086      	sub	sp, #24
 80125bc:	af02      	add	r7, sp, #8
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	460b      	mov	r3, r1
 80125c2:	70fb      	strb	r3, [r7, #3]
	if (mux->hi2c == NULL) return 1;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d101      	bne.n	80125d0 <_Z20i2c_mux_select_multiP7i2c_muxh+0x18>
 80125cc:	2301      	movs	r3, #1
 80125ce:	e02f      	b.n	8012630 <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>

	// Transmit bitmask to multiplexer
	uint8_t addr = (I2C_MUX_BASE_ADDR + mux->addr_offset) << 1;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	7a9b      	ldrb	r3, [r3, #10]
 80125d4:	3370      	adds	r3, #112	@ 0x70
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	005b      	lsls	r3, r3, #1
 80125da:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(mux->hi2c, addr, &mask, 1, I2C_MUX_TIMEOUT);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6818      	ldr	r0, [r3, #0]
 80125e0:	7bfb      	ldrb	r3, [r7, #15]
 80125e2:	b299      	uxth	r1, r3
 80125e4:	1cfa      	adds	r2, r7, #3
 80125e6:	2301      	movs	r3, #1
 80125e8:	9300      	str	r3, [sp, #0]
 80125ea:	2301      	movs	r3, #1
 80125ec:	f7fa fa46 	bl	800ca7c <HAL_I2C_Master_Transmit>
 80125f0:	4603      	mov	r3, r0
 80125f2:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK) return 1;
 80125f4:	7bbb      	ldrb	r3, [r7, #14]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d001      	beq.n	80125fe <_Z20i2c_mux_select_multiP7i2c_muxh+0x46>
 80125fa:	2301      	movs	r3, #1
 80125fc:	e018      	b.n	8012630 <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>

	// Read back bitmask from multiplexer to verify
	uint8_t mask_check = 0;
 80125fe:	2300      	movs	r3, #0
 8012600:	737b      	strb	r3, [r7, #13]
	res = HAL_I2C_Master_Receive(mux->hi2c, addr, &mask_check, 1, I2C_MUX_TIMEOUT);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6818      	ldr	r0, [r3, #0]
 8012606:	7bfb      	ldrb	r3, [r7, #15]
 8012608:	b299      	uxth	r1, r3
 801260a:	f107 020d 	add.w	r2, r7, #13
 801260e:	2301      	movs	r3, #1
 8012610:	9300      	str	r3, [sp, #0]
 8012612:	2301      	movs	r3, #1
 8012614:	f7fa fb4a 	bl	800ccac <HAL_I2C_Master_Receive>
 8012618:	4603      	mov	r3, r0
 801261a:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK || mask_check != mask) return 1;
 801261c:	7bbb      	ldrb	r3, [r7, #14]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d103      	bne.n	801262a <_Z20i2c_mux_select_multiP7i2c_muxh+0x72>
 8012622:	7b7a      	ldrb	r2, [r7, #13]
 8012624:	78fb      	ldrb	r3, [r7, #3]
 8012626:	429a      	cmp	r2, r3
 8012628:	d001      	beq.n	801262e <_Z20i2c_mux_select_multiP7i2c_muxh+0x76>
 801262a:	2301      	movs	r3, #1
 801262c:	e000      	b.n	8012630 <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>
	return 0;
 801262e:	2300      	movs	r3, #0
}
 8012630:	4618      	mov	r0, r3
 8012632:	3710      	adds	r7, #16
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}

08012638 <roundf>:
 8012638:	ee10 0a10 	vmov	r0, s0
 801263c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8012640:	3a7f      	subs	r2, #127	@ 0x7f
 8012642:	2a16      	cmp	r2, #22
 8012644:	dc15      	bgt.n	8012672 <roundf+0x3a>
 8012646:	2a00      	cmp	r2, #0
 8012648:	da08      	bge.n	801265c <roundf+0x24>
 801264a:	3201      	adds	r2, #1
 801264c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8012650:	d101      	bne.n	8012656 <roundf+0x1e>
 8012652:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8012656:	ee00 3a10 	vmov	s0, r3
 801265a:	4770      	bx	lr
 801265c:	4907      	ldr	r1, [pc, #28]	@ (801267c <roundf+0x44>)
 801265e:	4111      	asrs	r1, r2
 8012660:	4201      	tst	r1, r0
 8012662:	d0fa      	beq.n	801265a <roundf+0x22>
 8012664:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8012668:	4113      	asrs	r3, r2
 801266a:	4403      	add	r3, r0
 801266c:	ea23 0301 	bic.w	r3, r3, r1
 8012670:	e7f1      	b.n	8012656 <roundf+0x1e>
 8012672:	2a80      	cmp	r2, #128	@ 0x80
 8012674:	d1f1      	bne.n	801265a <roundf+0x22>
 8012676:	ee30 0a00 	vadd.f32	s0, s0, s0
 801267a:	4770      	bx	lr
 801267c:	007fffff 	.word	0x007fffff

08012680 <__cvt>:
 8012680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012684:	ec57 6b10 	vmov	r6, r7, d0
 8012688:	2f00      	cmp	r7, #0
 801268a:	460c      	mov	r4, r1
 801268c:	4619      	mov	r1, r3
 801268e:	463b      	mov	r3, r7
 8012690:	bfbb      	ittet	lt
 8012692:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012696:	461f      	movlt	r7, r3
 8012698:	2300      	movge	r3, #0
 801269a:	232d      	movlt	r3, #45	@ 0x2d
 801269c:	700b      	strb	r3, [r1, #0]
 801269e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80126a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80126a4:	4691      	mov	r9, r2
 80126a6:	f023 0820 	bic.w	r8, r3, #32
 80126aa:	bfbc      	itt	lt
 80126ac:	4632      	movlt	r2, r6
 80126ae:	4616      	movlt	r6, r2
 80126b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80126b4:	d005      	beq.n	80126c2 <__cvt+0x42>
 80126b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80126ba:	d100      	bne.n	80126be <__cvt+0x3e>
 80126bc:	3401      	adds	r4, #1
 80126be:	2102      	movs	r1, #2
 80126c0:	e000      	b.n	80126c4 <__cvt+0x44>
 80126c2:	2103      	movs	r1, #3
 80126c4:	ab03      	add	r3, sp, #12
 80126c6:	9301      	str	r3, [sp, #4]
 80126c8:	ab02      	add	r3, sp, #8
 80126ca:	9300      	str	r3, [sp, #0]
 80126cc:	ec47 6b10 	vmov	d0, r6, r7
 80126d0:	4653      	mov	r3, sl
 80126d2:	4622      	mov	r2, r4
 80126d4:	f000 fe5c 	bl	8013390 <_dtoa_r>
 80126d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80126dc:	4605      	mov	r5, r0
 80126de:	d119      	bne.n	8012714 <__cvt+0x94>
 80126e0:	f019 0f01 	tst.w	r9, #1
 80126e4:	d00e      	beq.n	8012704 <__cvt+0x84>
 80126e6:	eb00 0904 	add.w	r9, r0, r4
 80126ea:	2200      	movs	r2, #0
 80126ec:	2300      	movs	r3, #0
 80126ee:	4630      	mov	r0, r6
 80126f0:	4639      	mov	r1, r7
 80126f2:	f7ee f9c1 	bl	8000a78 <__aeabi_dcmpeq>
 80126f6:	b108      	cbz	r0, 80126fc <__cvt+0x7c>
 80126f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80126fc:	2230      	movs	r2, #48	@ 0x30
 80126fe:	9b03      	ldr	r3, [sp, #12]
 8012700:	454b      	cmp	r3, r9
 8012702:	d31e      	bcc.n	8012742 <__cvt+0xc2>
 8012704:	9b03      	ldr	r3, [sp, #12]
 8012706:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012708:	1b5b      	subs	r3, r3, r5
 801270a:	4628      	mov	r0, r5
 801270c:	6013      	str	r3, [r2, #0]
 801270e:	b004      	add	sp, #16
 8012710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012714:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012718:	eb00 0904 	add.w	r9, r0, r4
 801271c:	d1e5      	bne.n	80126ea <__cvt+0x6a>
 801271e:	7803      	ldrb	r3, [r0, #0]
 8012720:	2b30      	cmp	r3, #48	@ 0x30
 8012722:	d10a      	bne.n	801273a <__cvt+0xba>
 8012724:	2200      	movs	r2, #0
 8012726:	2300      	movs	r3, #0
 8012728:	4630      	mov	r0, r6
 801272a:	4639      	mov	r1, r7
 801272c:	f7ee f9a4 	bl	8000a78 <__aeabi_dcmpeq>
 8012730:	b918      	cbnz	r0, 801273a <__cvt+0xba>
 8012732:	f1c4 0401 	rsb	r4, r4, #1
 8012736:	f8ca 4000 	str.w	r4, [sl]
 801273a:	f8da 3000 	ldr.w	r3, [sl]
 801273e:	4499      	add	r9, r3
 8012740:	e7d3      	b.n	80126ea <__cvt+0x6a>
 8012742:	1c59      	adds	r1, r3, #1
 8012744:	9103      	str	r1, [sp, #12]
 8012746:	701a      	strb	r2, [r3, #0]
 8012748:	e7d9      	b.n	80126fe <__cvt+0x7e>

0801274a <__exponent>:
 801274a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801274c:	2900      	cmp	r1, #0
 801274e:	bfba      	itte	lt
 8012750:	4249      	neglt	r1, r1
 8012752:	232d      	movlt	r3, #45	@ 0x2d
 8012754:	232b      	movge	r3, #43	@ 0x2b
 8012756:	2909      	cmp	r1, #9
 8012758:	7002      	strb	r2, [r0, #0]
 801275a:	7043      	strb	r3, [r0, #1]
 801275c:	dd29      	ble.n	80127b2 <__exponent+0x68>
 801275e:	f10d 0307 	add.w	r3, sp, #7
 8012762:	461d      	mov	r5, r3
 8012764:	270a      	movs	r7, #10
 8012766:	461a      	mov	r2, r3
 8012768:	fbb1 f6f7 	udiv	r6, r1, r7
 801276c:	fb07 1416 	mls	r4, r7, r6, r1
 8012770:	3430      	adds	r4, #48	@ 0x30
 8012772:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012776:	460c      	mov	r4, r1
 8012778:	2c63      	cmp	r4, #99	@ 0x63
 801277a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801277e:	4631      	mov	r1, r6
 8012780:	dcf1      	bgt.n	8012766 <__exponent+0x1c>
 8012782:	3130      	adds	r1, #48	@ 0x30
 8012784:	1e94      	subs	r4, r2, #2
 8012786:	f803 1c01 	strb.w	r1, [r3, #-1]
 801278a:	1c41      	adds	r1, r0, #1
 801278c:	4623      	mov	r3, r4
 801278e:	42ab      	cmp	r3, r5
 8012790:	d30a      	bcc.n	80127a8 <__exponent+0x5e>
 8012792:	f10d 0309 	add.w	r3, sp, #9
 8012796:	1a9b      	subs	r3, r3, r2
 8012798:	42ac      	cmp	r4, r5
 801279a:	bf88      	it	hi
 801279c:	2300      	movhi	r3, #0
 801279e:	3302      	adds	r3, #2
 80127a0:	4403      	add	r3, r0
 80127a2:	1a18      	subs	r0, r3, r0
 80127a4:	b003      	add	sp, #12
 80127a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80127ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 80127b0:	e7ed      	b.n	801278e <__exponent+0x44>
 80127b2:	2330      	movs	r3, #48	@ 0x30
 80127b4:	3130      	adds	r1, #48	@ 0x30
 80127b6:	7083      	strb	r3, [r0, #2]
 80127b8:	70c1      	strb	r1, [r0, #3]
 80127ba:	1d03      	adds	r3, r0, #4
 80127bc:	e7f1      	b.n	80127a2 <__exponent+0x58>
	...

080127c0 <_printf_float>:
 80127c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c4:	b08d      	sub	sp, #52	@ 0x34
 80127c6:	460c      	mov	r4, r1
 80127c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80127cc:	4616      	mov	r6, r2
 80127ce:	461f      	mov	r7, r3
 80127d0:	4605      	mov	r5, r0
 80127d2:	f000 fd51 	bl	8013278 <_localeconv_r>
 80127d6:	6803      	ldr	r3, [r0, #0]
 80127d8:	9304      	str	r3, [sp, #16]
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ed fd20 	bl	8000220 <strlen>
 80127e0:	2300      	movs	r3, #0
 80127e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80127e4:	f8d8 3000 	ldr.w	r3, [r8]
 80127e8:	9005      	str	r0, [sp, #20]
 80127ea:	3307      	adds	r3, #7
 80127ec:	f023 0307 	bic.w	r3, r3, #7
 80127f0:	f103 0208 	add.w	r2, r3, #8
 80127f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80127f8:	f8d4 b000 	ldr.w	fp, [r4]
 80127fc:	f8c8 2000 	str.w	r2, [r8]
 8012800:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012804:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012808:	9307      	str	r3, [sp, #28]
 801280a:	f8cd 8018 	str.w	r8, [sp, #24]
 801280e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012816:	4b9c      	ldr	r3, [pc, #624]	@ (8012a88 <_printf_float+0x2c8>)
 8012818:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801281c:	f7ee f95e 	bl	8000adc <__aeabi_dcmpun>
 8012820:	bb70      	cbnz	r0, 8012880 <_printf_float+0xc0>
 8012822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012826:	4b98      	ldr	r3, [pc, #608]	@ (8012a88 <_printf_float+0x2c8>)
 8012828:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801282c:	f7ee f938 	bl	8000aa0 <__aeabi_dcmple>
 8012830:	bb30      	cbnz	r0, 8012880 <_printf_float+0xc0>
 8012832:	2200      	movs	r2, #0
 8012834:	2300      	movs	r3, #0
 8012836:	4640      	mov	r0, r8
 8012838:	4649      	mov	r1, r9
 801283a:	f7ee f927 	bl	8000a8c <__aeabi_dcmplt>
 801283e:	b110      	cbz	r0, 8012846 <_printf_float+0x86>
 8012840:	232d      	movs	r3, #45	@ 0x2d
 8012842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012846:	4a91      	ldr	r2, [pc, #580]	@ (8012a8c <_printf_float+0x2cc>)
 8012848:	4b91      	ldr	r3, [pc, #580]	@ (8012a90 <_printf_float+0x2d0>)
 801284a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801284e:	bf8c      	ite	hi
 8012850:	4690      	movhi	r8, r2
 8012852:	4698      	movls	r8, r3
 8012854:	2303      	movs	r3, #3
 8012856:	6123      	str	r3, [r4, #16]
 8012858:	f02b 0304 	bic.w	r3, fp, #4
 801285c:	6023      	str	r3, [r4, #0]
 801285e:	f04f 0900 	mov.w	r9, #0
 8012862:	9700      	str	r7, [sp, #0]
 8012864:	4633      	mov	r3, r6
 8012866:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012868:	4621      	mov	r1, r4
 801286a:	4628      	mov	r0, r5
 801286c:	f000 f9d2 	bl	8012c14 <_printf_common>
 8012870:	3001      	adds	r0, #1
 8012872:	f040 808d 	bne.w	8012990 <_printf_float+0x1d0>
 8012876:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801287a:	b00d      	add	sp, #52	@ 0x34
 801287c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012880:	4642      	mov	r2, r8
 8012882:	464b      	mov	r3, r9
 8012884:	4640      	mov	r0, r8
 8012886:	4649      	mov	r1, r9
 8012888:	f7ee f928 	bl	8000adc <__aeabi_dcmpun>
 801288c:	b140      	cbz	r0, 80128a0 <_printf_float+0xe0>
 801288e:	464b      	mov	r3, r9
 8012890:	2b00      	cmp	r3, #0
 8012892:	bfbc      	itt	lt
 8012894:	232d      	movlt	r3, #45	@ 0x2d
 8012896:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801289a:	4a7e      	ldr	r2, [pc, #504]	@ (8012a94 <_printf_float+0x2d4>)
 801289c:	4b7e      	ldr	r3, [pc, #504]	@ (8012a98 <_printf_float+0x2d8>)
 801289e:	e7d4      	b.n	801284a <_printf_float+0x8a>
 80128a0:	6863      	ldr	r3, [r4, #4]
 80128a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80128a6:	9206      	str	r2, [sp, #24]
 80128a8:	1c5a      	adds	r2, r3, #1
 80128aa:	d13b      	bne.n	8012924 <_printf_float+0x164>
 80128ac:	2306      	movs	r3, #6
 80128ae:	6063      	str	r3, [r4, #4]
 80128b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80128b4:	2300      	movs	r3, #0
 80128b6:	6022      	str	r2, [r4, #0]
 80128b8:	9303      	str	r3, [sp, #12]
 80128ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80128bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80128c0:	ab09      	add	r3, sp, #36	@ 0x24
 80128c2:	9300      	str	r3, [sp, #0]
 80128c4:	6861      	ldr	r1, [r4, #4]
 80128c6:	ec49 8b10 	vmov	d0, r8, r9
 80128ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80128ce:	4628      	mov	r0, r5
 80128d0:	f7ff fed6 	bl	8012680 <__cvt>
 80128d4:	9b06      	ldr	r3, [sp, #24]
 80128d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80128d8:	2b47      	cmp	r3, #71	@ 0x47
 80128da:	4680      	mov	r8, r0
 80128dc:	d129      	bne.n	8012932 <_printf_float+0x172>
 80128de:	1cc8      	adds	r0, r1, #3
 80128e0:	db02      	blt.n	80128e8 <_printf_float+0x128>
 80128e2:	6863      	ldr	r3, [r4, #4]
 80128e4:	4299      	cmp	r1, r3
 80128e6:	dd41      	ble.n	801296c <_printf_float+0x1ac>
 80128e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80128ec:	fa5f fa8a 	uxtb.w	sl, sl
 80128f0:	3901      	subs	r1, #1
 80128f2:	4652      	mov	r2, sl
 80128f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80128f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80128fa:	f7ff ff26 	bl	801274a <__exponent>
 80128fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012900:	1813      	adds	r3, r2, r0
 8012902:	2a01      	cmp	r2, #1
 8012904:	4681      	mov	r9, r0
 8012906:	6123      	str	r3, [r4, #16]
 8012908:	dc02      	bgt.n	8012910 <_printf_float+0x150>
 801290a:	6822      	ldr	r2, [r4, #0]
 801290c:	07d2      	lsls	r2, r2, #31
 801290e:	d501      	bpl.n	8012914 <_printf_float+0x154>
 8012910:	3301      	adds	r3, #1
 8012912:	6123      	str	r3, [r4, #16]
 8012914:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012918:	2b00      	cmp	r3, #0
 801291a:	d0a2      	beq.n	8012862 <_printf_float+0xa2>
 801291c:	232d      	movs	r3, #45	@ 0x2d
 801291e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012922:	e79e      	b.n	8012862 <_printf_float+0xa2>
 8012924:	9a06      	ldr	r2, [sp, #24]
 8012926:	2a47      	cmp	r2, #71	@ 0x47
 8012928:	d1c2      	bne.n	80128b0 <_printf_float+0xf0>
 801292a:	2b00      	cmp	r3, #0
 801292c:	d1c0      	bne.n	80128b0 <_printf_float+0xf0>
 801292e:	2301      	movs	r3, #1
 8012930:	e7bd      	b.n	80128ae <_printf_float+0xee>
 8012932:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012936:	d9db      	bls.n	80128f0 <_printf_float+0x130>
 8012938:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801293c:	d118      	bne.n	8012970 <_printf_float+0x1b0>
 801293e:	2900      	cmp	r1, #0
 8012940:	6863      	ldr	r3, [r4, #4]
 8012942:	dd0b      	ble.n	801295c <_printf_float+0x19c>
 8012944:	6121      	str	r1, [r4, #16]
 8012946:	b913      	cbnz	r3, 801294e <_printf_float+0x18e>
 8012948:	6822      	ldr	r2, [r4, #0]
 801294a:	07d0      	lsls	r0, r2, #31
 801294c:	d502      	bpl.n	8012954 <_printf_float+0x194>
 801294e:	3301      	adds	r3, #1
 8012950:	440b      	add	r3, r1
 8012952:	6123      	str	r3, [r4, #16]
 8012954:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012956:	f04f 0900 	mov.w	r9, #0
 801295a:	e7db      	b.n	8012914 <_printf_float+0x154>
 801295c:	b913      	cbnz	r3, 8012964 <_printf_float+0x1a4>
 801295e:	6822      	ldr	r2, [r4, #0]
 8012960:	07d2      	lsls	r2, r2, #31
 8012962:	d501      	bpl.n	8012968 <_printf_float+0x1a8>
 8012964:	3302      	adds	r3, #2
 8012966:	e7f4      	b.n	8012952 <_printf_float+0x192>
 8012968:	2301      	movs	r3, #1
 801296a:	e7f2      	b.n	8012952 <_printf_float+0x192>
 801296c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012972:	4299      	cmp	r1, r3
 8012974:	db05      	blt.n	8012982 <_printf_float+0x1c2>
 8012976:	6823      	ldr	r3, [r4, #0]
 8012978:	6121      	str	r1, [r4, #16]
 801297a:	07d8      	lsls	r0, r3, #31
 801297c:	d5ea      	bpl.n	8012954 <_printf_float+0x194>
 801297e:	1c4b      	adds	r3, r1, #1
 8012980:	e7e7      	b.n	8012952 <_printf_float+0x192>
 8012982:	2900      	cmp	r1, #0
 8012984:	bfd4      	ite	le
 8012986:	f1c1 0202 	rsble	r2, r1, #2
 801298a:	2201      	movgt	r2, #1
 801298c:	4413      	add	r3, r2
 801298e:	e7e0      	b.n	8012952 <_printf_float+0x192>
 8012990:	6823      	ldr	r3, [r4, #0]
 8012992:	055a      	lsls	r2, r3, #21
 8012994:	d407      	bmi.n	80129a6 <_printf_float+0x1e6>
 8012996:	6923      	ldr	r3, [r4, #16]
 8012998:	4642      	mov	r2, r8
 801299a:	4631      	mov	r1, r6
 801299c:	4628      	mov	r0, r5
 801299e:	47b8      	blx	r7
 80129a0:	3001      	adds	r0, #1
 80129a2:	d12b      	bne.n	80129fc <_printf_float+0x23c>
 80129a4:	e767      	b.n	8012876 <_printf_float+0xb6>
 80129a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80129aa:	f240 80dd 	bls.w	8012b68 <_printf_float+0x3a8>
 80129ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80129b2:	2200      	movs	r2, #0
 80129b4:	2300      	movs	r3, #0
 80129b6:	f7ee f85f 	bl	8000a78 <__aeabi_dcmpeq>
 80129ba:	2800      	cmp	r0, #0
 80129bc:	d033      	beq.n	8012a26 <_printf_float+0x266>
 80129be:	4a37      	ldr	r2, [pc, #220]	@ (8012a9c <_printf_float+0x2dc>)
 80129c0:	2301      	movs	r3, #1
 80129c2:	4631      	mov	r1, r6
 80129c4:	4628      	mov	r0, r5
 80129c6:	47b8      	blx	r7
 80129c8:	3001      	adds	r0, #1
 80129ca:	f43f af54 	beq.w	8012876 <_printf_float+0xb6>
 80129ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80129d2:	4543      	cmp	r3, r8
 80129d4:	db02      	blt.n	80129dc <_printf_float+0x21c>
 80129d6:	6823      	ldr	r3, [r4, #0]
 80129d8:	07d8      	lsls	r0, r3, #31
 80129da:	d50f      	bpl.n	80129fc <_printf_float+0x23c>
 80129dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80129e0:	4631      	mov	r1, r6
 80129e2:	4628      	mov	r0, r5
 80129e4:	47b8      	blx	r7
 80129e6:	3001      	adds	r0, #1
 80129e8:	f43f af45 	beq.w	8012876 <_printf_float+0xb6>
 80129ec:	f04f 0900 	mov.w	r9, #0
 80129f0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80129f4:	f104 0a1a 	add.w	sl, r4, #26
 80129f8:	45c8      	cmp	r8, r9
 80129fa:	dc09      	bgt.n	8012a10 <_printf_float+0x250>
 80129fc:	6823      	ldr	r3, [r4, #0]
 80129fe:	079b      	lsls	r3, r3, #30
 8012a00:	f100 8103 	bmi.w	8012c0a <_printf_float+0x44a>
 8012a04:	68e0      	ldr	r0, [r4, #12]
 8012a06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a08:	4298      	cmp	r0, r3
 8012a0a:	bfb8      	it	lt
 8012a0c:	4618      	movlt	r0, r3
 8012a0e:	e734      	b.n	801287a <_printf_float+0xba>
 8012a10:	2301      	movs	r3, #1
 8012a12:	4652      	mov	r2, sl
 8012a14:	4631      	mov	r1, r6
 8012a16:	4628      	mov	r0, r5
 8012a18:	47b8      	blx	r7
 8012a1a:	3001      	adds	r0, #1
 8012a1c:	f43f af2b 	beq.w	8012876 <_printf_float+0xb6>
 8012a20:	f109 0901 	add.w	r9, r9, #1
 8012a24:	e7e8      	b.n	80129f8 <_printf_float+0x238>
 8012a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	dc39      	bgt.n	8012aa0 <_printf_float+0x2e0>
 8012a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8012a9c <_printf_float+0x2dc>)
 8012a2e:	2301      	movs	r3, #1
 8012a30:	4631      	mov	r1, r6
 8012a32:	4628      	mov	r0, r5
 8012a34:	47b8      	blx	r7
 8012a36:	3001      	adds	r0, #1
 8012a38:	f43f af1d 	beq.w	8012876 <_printf_float+0xb6>
 8012a3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012a40:	ea59 0303 	orrs.w	r3, r9, r3
 8012a44:	d102      	bne.n	8012a4c <_printf_float+0x28c>
 8012a46:	6823      	ldr	r3, [r4, #0]
 8012a48:	07d9      	lsls	r1, r3, #31
 8012a4a:	d5d7      	bpl.n	80129fc <_printf_float+0x23c>
 8012a4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a50:	4631      	mov	r1, r6
 8012a52:	4628      	mov	r0, r5
 8012a54:	47b8      	blx	r7
 8012a56:	3001      	adds	r0, #1
 8012a58:	f43f af0d 	beq.w	8012876 <_printf_float+0xb6>
 8012a5c:	f04f 0a00 	mov.w	sl, #0
 8012a60:	f104 0b1a 	add.w	fp, r4, #26
 8012a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a66:	425b      	negs	r3, r3
 8012a68:	4553      	cmp	r3, sl
 8012a6a:	dc01      	bgt.n	8012a70 <_printf_float+0x2b0>
 8012a6c:	464b      	mov	r3, r9
 8012a6e:	e793      	b.n	8012998 <_printf_float+0x1d8>
 8012a70:	2301      	movs	r3, #1
 8012a72:	465a      	mov	r2, fp
 8012a74:	4631      	mov	r1, r6
 8012a76:	4628      	mov	r0, r5
 8012a78:	47b8      	blx	r7
 8012a7a:	3001      	adds	r0, #1
 8012a7c:	f43f aefb 	beq.w	8012876 <_printf_float+0xb6>
 8012a80:	f10a 0a01 	add.w	sl, sl, #1
 8012a84:	e7ee      	b.n	8012a64 <_printf_float+0x2a4>
 8012a86:	bf00      	nop
 8012a88:	7fefffff 	.word	0x7fefffff
 8012a8c:	080186c0 	.word	0x080186c0
 8012a90:	080186bc 	.word	0x080186bc
 8012a94:	080186c8 	.word	0x080186c8
 8012a98:	080186c4 	.word	0x080186c4
 8012a9c:	080186cc 	.word	0x080186cc
 8012aa0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012aa2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012aa6:	4553      	cmp	r3, sl
 8012aa8:	bfa8      	it	ge
 8012aaa:	4653      	movge	r3, sl
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	4699      	mov	r9, r3
 8012ab0:	dc36      	bgt.n	8012b20 <_printf_float+0x360>
 8012ab2:	f04f 0b00 	mov.w	fp, #0
 8012ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012aba:	f104 021a 	add.w	r2, r4, #26
 8012abe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012ac0:	9306      	str	r3, [sp, #24]
 8012ac2:	eba3 0309 	sub.w	r3, r3, r9
 8012ac6:	455b      	cmp	r3, fp
 8012ac8:	dc31      	bgt.n	8012b2e <_printf_float+0x36e>
 8012aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012acc:	459a      	cmp	sl, r3
 8012ace:	dc3a      	bgt.n	8012b46 <_printf_float+0x386>
 8012ad0:	6823      	ldr	r3, [r4, #0]
 8012ad2:	07da      	lsls	r2, r3, #31
 8012ad4:	d437      	bmi.n	8012b46 <_printf_float+0x386>
 8012ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ad8:	ebaa 0903 	sub.w	r9, sl, r3
 8012adc:	9b06      	ldr	r3, [sp, #24]
 8012ade:	ebaa 0303 	sub.w	r3, sl, r3
 8012ae2:	4599      	cmp	r9, r3
 8012ae4:	bfa8      	it	ge
 8012ae6:	4699      	movge	r9, r3
 8012ae8:	f1b9 0f00 	cmp.w	r9, #0
 8012aec:	dc33      	bgt.n	8012b56 <_printf_float+0x396>
 8012aee:	f04f 0800 	mov.w	r8, #0
 8012af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012af6:	f104 0b1a 	add.w	fp, r4, #26
 8012afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012afc:	ebaa 0303 	sub.w	r3, sl, r3
 8012b00:	eba3 0309 	sub.w	r3, r3, r9
 8012b04:	4543      	cmp	r3, r8
 8012b06:	f77f af79 	ble.w	80129fc <_printf_float+0x23c>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	465a      	mov	r2, fp
 8012b0e:	4631      	mov	r1, r6
 8012b10:	4628      	mov	r0, r5
 8012b12:	47b8      	blx	r7
 8012b14:	3001      	adds	r0, #1
 8012b16:	f43f aeae 	beq.w	8012876 <_printf_float+0xb6>
 8012b1a:	f108 0801 	add.w	r8, r8, #1
 8012b1e:	e7ec      	b.n	8012afa <_printf_float+0x33a>
 8012b20:	4642      	mov	r2, r8
 8012b22:	4631      	mov	r1, r6
 8012b24:	4628      	mov	r0, r5
 8012b26:	47b8      	blx	r7
 8012b28:	3001      	adds	r0, #1
 8012b2a:	d1c2      	bne.n	8012ab2 <_printf_float+0x2f2>
 8012b2c:	e6a3      	b.n	8012876 <_printf_float+0xb6>
 8012b2e:	2301      	movs	r3, #1
 8012b30:	4631      	mov	r1, r6
 8012b32:	4628      	mov	r0, r5
 8012b34:	9206      	str	r2, [sp, #24]
 8012b36:	47b8      	blx	r7
 8012b38:	3001      	adds	r0, #1
 8012b3a:	f43f ae9c 	beq.w	8012876 <_printf_float+0xb6>
 8012b3e:	9a06      	ldr	r2, [sp, #24]
 8012b40:	f10b 0b01 	add.w	fp, fp, #1
 8012b44:	e7bb      	b.n	8012abe <_printf_float+0x2fe>
 8012b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b4a:	4631      	mov	r1, r6
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	47b8      	blx	r7
 8012b50:	3001      	adds	r0, #1
 8012b52:	d1c0      	bne.n	8012ad6 <_printf_float+0x316>
 8012b54:	e68f      	b.n	8012876 <_printf_float+0xb6>
 8012b56:	9a06      	ldr	r2, [sp, #24]
 8012b58:	464b      	mov	r3, r9
 8012b5a:	4442      	add	r2, r8
 8012b5c:	4631      	mov	r1, r6
 8012b5e:	4628      	mov	r0, r5
 8012b60:	47b8      	blx	r7
 8012b62:	3001      	adds	r0, #1
 8012b64:	d1c3      	bne.n	8012aee <_printf_float+0x32e>
 8012b66:	e686      	b.n	8012876 <_printf_float+0xb6>
 8012b68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012b6c:	f1ba 0f01 	cmp.w	sl, #1
 8012b70:	dc01      	bgt.n	8012b76 <_printf_float+0x3b6>
 8012b72:	07db      	lsls	r3, r3, #31
 8012b74:	d536      	bpl.n	8012be4 <_printf_float+0x424>
 8012b76:	2301      	movs	r3, #1
 8012b78:	4642      	mov	r2, r8
 8012b7a:	4631      	mov	r1, r6
 8012b7c:	4628      	mov	r0, r5
 8012b7e:	47b8      	blx	r7
 8012b80:	3001      	adds	r0, #1
 8012b82:	f43f ae78 	beq.w	8012876 <_printf_float+0xb6>
 8012b86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b8a:	4631      	mov	r1, r6
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	47b8      	blx	r7
 8012b90:	3001      	adds	r0, #1
 8012b92:	f43f ae70 	beq.w	8012876 <_printf_float+0xb6>
 8012b96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012ba2:	f7ed ff69 	bl	8000a78 <__aeabi_dcmpeq>
 8012ba6:	b9c0      	cbnz	r0, 8012bda <_printf_float+0x41a>
 8012ba8:	4653      	mov	r3, sl
 8012baa:	f108 0201 	add.w	r2, r8, #1
 8012bae:	4631      	mov	r1, r6
 8012bb0:	4628      	mov	r0, r5
 8012bb2:	47b8      	blx	r7
 8012bb4:	3001      	adds	r0, #1
 8012bb6:	d10c      	bne.n	8012bd2 <_printf_float+0x412>
 8012bb8:	e65d      	b.n	8012876 <_printf_float+0xb6>
 8012bba:	2301      	movs	r3, #1
 8012bbc:	465a      	mov	r2, fp
 8012bbe:	4631      	mov	r1, r6
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	47b8      	blx	r7
 8012bc4:	3001      	adds	r0, #1
 8012bc6:	f43f ae56 	beq.w	8012876 <_printf_float+0xb6>
 8012bca:	f108 0801 	add.w	r8, r8, #1
 8012bce:	45d0      	cmp	r8, sl
 8012bd0:	dbf3      	blt.n	8012bba <_printf_float+0x3fa>
 8012bd2:	464b      	mov	r3, r9
 8012bd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012bd8:	e6df      	b.n	801299a <_printf_float+0x1da>
 8012bda:	f04f 0800 	mov.w	r8, #0
 8012bde:	f104 0b1a 	add.w	fp, r4, #26
 8012be2:	e7f4      	b.n	8012bce <_printf_float+0x40e>
 8012be4:	2301      	movs	r3, #1
 8012be6:	4642      	mov	r2, r8
 8012be8:	e7e1      	b.n	8012bae <_printf_float+0x3ee>
 8012bea:	2301      	movs	r3, #1
 8012bec:	464a      	mov	r2, r9
 8012bee:	4631      	mov	r1, r6
 8012bf0:	4628      	mov	r0, r5
 8012bf2:	47b8      	blx	r7
 8012bf4:	3001      	adds	r0, #1
 8012bf6:	f43f ae3e 	beq.w	8012876 <_printf_float+0xb6>
 8012bfa:	f108 0801 	add.w	r8, r8, #1
 8012bfe:	68e3      	ldr	r3, [r4, #12]
 8012c00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012c02:	1a5b      	subs	r3, r3, r1
 8012c04:	4543      	cmp	r3, r8
 8012c06:	dcf0      	bgt.n	8012bea <_printf_float+0x42a>
 8012c08:	e6fc      	b.n	8012a04 <_printf_float+0x244>
 8012c0a:	f04f 0800 	mov.w	r8, #0
 8012c0e:	f104 0919 	add.w	r9, r4, #25
 8012c12:	e7f4      	b.n	8012bfe <_printf_float+0x43e>

08012c14 <_printf_common>:
 8012c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c18:	4616      	mov	r6, r2
 8012c1a:	4698      	mov	r8, r3
 8012c1c:	688a      	ldr	r2, [r1, #8]
 8012c1e:	690b      	ldr	r3, [r1, #16]
 8012c20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012c24:	4293      	cmp	r3, r2
 8012c26:	bfb8      	it	lt
 8012c28:	4613      	movlt	r3, r2
 8012c2a:	6033      	str	r3, [r6, #0]
 8012c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012c30:	4607      	mov	r7, r0
 8012c32:	460c      	mov	r4, r1
 8012c34:	b10a      	cbz	r2, 8012c3a <_printf_common+0x26>
 8012c36:	3301      	adds	r3, #1
 8012c38:	6033      	str	r3, [r6, #0]
 8012c3a:	6823      	ldr	r3, [r4, #0]
 8012c3c:	0699      	lsls	r1, r3, #26
 8012c3e:	bf42      	ittt	mi
 8012c40:	6833      	ldrmi	r3, [r6, #0]
 8012c42:	3302      	addmi	r3, #2
 8012c44:	6033      	strmi	r3, [r6, #0]
 8012c46:	6825      	ldr	r5, [r4, #0]
 8012c48:	f015 0506 	ands.w	r5, r5, #6
 8012c4c:	d106      	bne.n	8012c5c <_printf_common+0x48>
 8012c4e:	f104 0a19 	add.w	sl, r4, #25
 8012c52:	68e3      	ldr	r3, [r4, #12]
 8012c54:	6832      	ldr	r2, [r6, #0]
 8012c56:	1a9b      	subs	r3, r3, r2
 8012c58:	42ab      	cmp	r3, r5
 8012c5a:	dc26      	bgt.n	8012caa <_printf_common+0x96>
 8012c5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012c60:	6822      	ldr	r2, [r4, #0]
 8012c62:	3b00      	subs	r3, #0
 8012c64:	bf18      	it	ne
 8012c66:	2301      	movne	r3, #1
 8012c68:	0692      	lsls	r2, r2, #26
 8012c6a:	d42b      	bmi.n	8012cc4 <_printf_common+0xb0>
 8012c6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012c70:	4641      	mov	r1, r8
 8012c72:	4638      	mov	r0, r7
 8012c74:	47c8      	blx	r9
 8012c76:	3001      	adds	r0, #1
 8012c78:	d01e      	beq.n	8012cb8 <_printf_common+0xa4>
 8012c7a:	6823      	ldr	r3, [r4, #0]
 8012c7c:	6922      	ldr	r2, [r4, #16]
 8012c7e:	f003 0306 	and.w	r3, r3, #6
 8012c82:	2b04      	cmp	r3, #4
 8012c84:	bf02      	ittt	eq
 8012c86:	68e5      	ldreq	r5, [r4, #12]
 8012c88:	6833      	ldreq	r3, [r6, #0]
 8012c8a:	1aed      	subeq	r5, r5, r3
 8012c8c:	68a3      	ldr	r3, [r4, #8]
 8012c8e:	bf0c      	ite	eq
 8012c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c94:	2500      	movne	r5, #0
 8012c96:	4293      	cmp	r3, r2
 8012c98:	bfc4      	itt	gt
 8012c9a:	1a9b      	subgt	r3, r3, r2
 8012c9c:	18ed      	addgt	r5, r5, r3
 8012c9e:	2600      	movs	r6, #0
 8012ca0:	341a      	adds	r4, #26
 8012ca2:	42b5      	cmp	r5, r6
 8012ca4:	d11a      	bne.n	8012cdc <_printf_common+0xc8>
 8012ca6:	2000      	movs	r0, #0
 8012ca8:	e008      	b.n	8012cbc <_printf_common+0xa8>
 8012caa:	2301      	movs	r3, #1
 8012cac:	4652      	mov	r2, sl
 8012cae:	4641      	mov	r1, r8
 8012cb0:	4638      	mov	r0, r7
 8012cb2:	47c8      	blx	r9
 8012cb4:	3001      	adds	r0, #1
 8012cb6:	d103      	bne.n	8012cc0 <_printf_common+0xac>
 8012cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cc0:	3501      	adds	r5, #1
 8012cc2:	e7c6      	b.n	8012c52 <_printf_common+0x3e>
 8012cc4:	18e1      	adds	r1, r4, r3
 8012cc6:	1c5a      	adds	r2, r3, #1
 8012cc8:	2030      	movs	r0, #48	@ 0x30
 8012cca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012cce:	4422      	add	r2, r4
 8012cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012cd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012cd8:	3302      	adds	r3, #2
 8012cda:	e7c7      	b.n	8012c6c <_printf_common+0x58>
 8012cdc:	2301      	movs	r3, #1
 8012cde:	4622      	mov	r2, r4
 8012ce0:	4641      	mov	r1, r8
 8012ce2:	4638      	mov	r0, r7
 8012ce4:	47c8      	blx	r9
 8012ce6:	3001      	adds	r0, #1
 8012ce8:	d0e6      	beq.n	8012cb8 <_printf_common+0xa4>
 8012cea:	3601      	adds	r6, #1
 8012cec:	e7d9      	b.n	8012ca2 <_printf_common+0x8e>
	...

08012cf0 <_printf_i>:
 8012cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012cf4:	7e0f      	ldrb	r7, [r1, #24]
 8012cf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012cf8:	2f78      	cmp	r7, #120	@ 0x78
 8012cfa:	4691      	mov	r9, r2
 8012cfc:	4680      	mov	r8, r0
 8012cfe:	460c      	mov	r4, r1
 8012d00:	469a      	mov	sl, r3
 8012d02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012d06:	d807      	bhi.n	8012d18 <_printf_i+0x28>
 8012d08:	2f62      	cmp	r7, #98	@ 0x62
 8012d0a:	d80a      	bhi.n	8012d22 <_printf_i+0x32>
 8012d0c:	2f00      	cmp	r7, #0
 8012d0e:	f000 80d1 	beq.w	8012eb4 <_printf_i+0x1c4>
 8012d12:	2f58      	cmp	r7, #88	@ 0x58
 8012d14:	f000 80b8 	beq.w	8012e88 <_printf_i+0x198>
 8012d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012d20:	e03a      	b.n	8012d98 <_printf_i+0xa8>
 8012d22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012d26:	2b15      	cmp	r3, #21
 8012d28:	d8f6      	bhi.n	8012d18 <_printf_i+0x28>
 8012d2a:	a101      	add	r1, pc, #4	@ (adr r1, 8012d30 <_printf_i+0x40>)
 8012d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d30:	08012d89 	.word	0x08012d89
 8012d34:	08012d9d 	.word	0x08012d9d
 8012d38:	08012d19 	.word	0x08012d19
 8012d3c:	08012d19 	.word	0x08012d19
 8012d40:	08012d19 	.word	0x08012d19
 8012d44:	08012d19 	.word	0x08012d19
 8012d48:	08012d9d 	.word	0x08012d9d
 8012d4c:	08012d19 	.word	0x08012d19
 8012d50:	08012d19 	.word	0x08012d19
 8012d54:	08012d19 	.word	0x08012d19
 8012d58:	08012d19 	.word	0x08012d19
 8012d5c:	08012e9b 	.word	0x08012e9b
 8012d60:	08012dc7 	.word	0x08012dc7
 8012d64:	08012e55 	.word	0x08012e55
 8012d68:	08012d19 	.word	0x08012d19
 8012d6c:	08012d19 	.word	0x08012d19
 8012d70:	08012ebd 	.word	0x08012ebd
 8012d74:	08012d19 	.word	0x08012d19
 8012d78:	08012dc7 	.word	0x08012dc7
 8012d7c:	08012d19 	.word	0x08012d19
 8012d80:	08012d19 	.word	0x08012d19
 8012d84:	08012e5d 	.word	0x08012e5d
 8012d88:	6833      	ldr	r3, [r6, #0]
 8012d8a:	1d1a      	adds	r2, r3, #4
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	6032      	str	r2, [r6, #0]
 8012d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012d98:	2301      	movs	r3, #1
 8012d9a:	e09c      	b.n	8012ed6 <_printf_i+0x1e6>
 8012d9c:	6833      	ldr	r3, [r6, #0]
 8012d9e:	6820      	ldr	r0, [r4, #0]
 8012da0:	1d19      	adds	r1, r3, #4
 8012da2:	6031      	str	r1, [r6, #0]
 8012da4:	0606      	lsls	r6, r0, #24
 8012da6:	d501      	bpl.n	8012dac <_printf_i+0xbc>
 8012da8:	681d      	ldr	r5, [r3, #0]
 8012daa:	e003      	b.n	8012db4 <_printf_i+0xc4>
 8012dac:	0645      	lsls	r5, r0, #25
 8012dae:	d5fb      	bpl.n	8012da8 <_printf_i+0xb8>
 8012db0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012db4:	2d00      	cmp	r5, #0
 8012db6:	da03      	bge.n	8012dc0 <_printf_i+0xd0>
 8012db8:	232d      	movs	r3, #45	@ 0x2d
 8012dba:	426d      	negs	r5, r5
 8012dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012dc0:	4858      	ldr	r0, [pc, #352]	@ (8012f24 <_printf_i+0x234>)
 8012dc2:	230a      	movs	r3, #10
 8012dc4:	e011      	b.n	8012dea <_printf_i+0xfa>
 8012dc6:	6821      	ldr	r1, [r4, #0]
 8012dc8:	6833      	ldr	r3, [r6, #0]
 8012dca:	0608      	lsls	r0, r1, #24
 8012dcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8012dd0:	d402      	bmi.n	8012dd8 <_printf_i+0xe8>
 8012dd2:	0649      	lsls	r1, r1, #25
 8012dd4:	bf48      	it	mi
 8012dd6:	b2ad      	uxthmi	r5, r5
 8012dd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8012dda:	4852      	ldr	r0, [pc, #328]	@ (8012f24 <_printf_i+0x234>)
 8012ddc:	6033      	str	r3, [r6, #0]
 8012dde:	bf14      	ite	ne
 8012de0:	230a      	movne	r3, #10
 8012de2:	2308      	moveq	r3, #8
 8012de4:	2100      	movs	r1, #0
 8012de6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012dea:	6866      	ldr	r6, [r4, #4]
 8012dec:	60a6      	str	r6, [r4, #8]
 8012dee:	2e00      	cmp	r6, #0
 8012df0:	db05      	blt.n	8012dfe <_printf_i+0x10e>
 8012df2:	6821      	ldr	r1, [r4, #0]
 8012df4:	432e      	orrs	r6, r5
 8012df6:	f021 0104 	bic.w	r1, r1, #4
 8012dfa:	6021      	str	r1, [r4, #0]
 8012dfc:	d04b      	beq.n	8012e96 <_printf_i+0x1a6>
 8012dfe:	4616      	mov	r6, r2
 8012e00:	fbb5 f1f3 	udiv	r1, r5, r3
 8012e04:	fb03 5711 	mls	r7, r3, r1, r5
 8012e08:	5dc7      	ldrb	r7, [r0, r7]
 8012e0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012e0e:	462f      	mov	r7, r5
 8012e10:	42bb      	cmp	r3, r7
 8012e12:	460d      	mov	r5, r1
 8012e14:	d9f4      	bls.n	8012e00 <_printf_i+0x110>
 8012e16:	2b08      	cmp	r3, #8
 8012e18:	d10b      	bne.n	8012e32 <_printf_i+0x142>
 8012e1a:	6823      	ldr	r3, [r4, #0]
 8012e1c:	07df      	lsls	r7, r3, #31
 8012e1e:	d508      	bpl.n	8012e32 <_printf_i+0x142>
 8012e20:	6923      	ldr	r3, [r4, #16]
 8012e22:	6861      	ldr	r1, [r4, #4]
 8012e24:	4299      	cmp	r1, r3
 8012e26:	bfde      	ittt	le
 8012e28:	2330      	movle	r3, #48	@ 0x30
 8012e2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012e2e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8012e32:	1b92      	subs	r2, r2, r6
 8012e34:	6122      	str	r2, [r4, #16]
 8012e36:	f8cd a000 	str.w	sl, [sp]
 8012e3a:	464b      	mov	r3, r9
 8012e3c:	aa03      	add	r2, sp, #12
 8012e3e:	4621      	mov	r1, r4
 8012e40:	4640      	mov	r0, r8
 8012e42:	f7ff fee7 	bl	8012c14 <_printf_common>
 8012e46:	3001      	adds	r0, #1
 8012e48:	d14a      	bne.n	8012ee0 <_printf_i+0x1f0>
 8012e4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e4e:	b004      	add	sp, #16
 8012e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e54:	6823      	ldr	r3, [r4, #0]
 8012e56:	f043 0320 	orr.w	r3, r3, #32
 8012e5a:	6023      	str	r3, [r4, #0]
 8012e5c:	4832      	ldr	r0, [pc, #200]	@ (8012f28 <_printf_i+0x238>)
 8012e5e:	2778      	movs	r7, #120	@ 0x78
 8012e60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012e64:	6823      	ldr	r3, [r4, #0]
 8012e66:	6831      	ldr	r1, [r6, #0]
 8012e68:	061f      	lsls	r7, r3, #24
 8012e6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8012e6e:	d402      	bmi.n	8012e76 <_printf_i+0x186>
 8012e70:	065f      	lsls	r7, r3, #25
 8012e72:	bf48      	it	mi
 8012e74:	b2ad      	uxthmi	r5, r5
 8012e76:	6031      	str	r1, [r6, #0]
 8012e78:	07d9      	lsls	r1, r3, #31
 8012e7a:	bf44      	itt	mi
 8012e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8012e80:	6023      	strmi	r3, [r4, #0]
 8012e82:	b11d      	cbz	r5, 8012e8c <_printf_i+0x19c>
 8012e84:	2310      	movs	r3, #16
 8012e86:	e7ad      	b.n	8012de4 <_printf_i+0xf4>
 8012e88:	4826      	ldr	r0, [pc, #152]	@ (8012f24 <_printf_i+0x234>)
 8012e8a:	e7e9      	b.n	8012e60 <_printf_i+0x170>
 8012e8c:	6823      	ldr	r3, [r4, #0]
 8012e8e:	f023 0320 	bic.w	r3, r3, #32
 8012e92:	6023      	str	r3, [r4, #0]
 8012e94:	e7f6      	b.n	8012e84 <_printf_i+0x194>
 8012e96:	4616      	mov	r6, r2
 8012e98:	e7bd      	b.n	8012e16 <_printf_i+0x126>
 8012e9a:	6833      	ldr	r3, [r6, #0]
 8012e9c:	6825      	ldr	r5, [r4, #0]
 8012e9e:	6961      	ldr	r1, [r4, #20]
 8012ea0:	1d18      	adds	r0, r3, #4
 8012ea2:	6030      	str	r0, [r6, #0]
 8012ea4:	062e      	lsls	r6, r5, #24
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	d501      	bpl.n	8012eae <_printf_i+0x1be>
 8012eaa:	6019      	str	r1, [r3, #0]
 8012eac:	e002      	b.n	8012eb4 <_printf_i+0x1c4>
 8012eae:	0668      	lsls	r0, r5, #25
 8012eb0:	d5fb      	bpl.n	8012eaa <_printf_i+0x1ba>
 8012eb2:	8019      	strh	r1, [r3, #0]
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	6123      	str	r3, [r4, #16]
 8012eb8:	4616      	mov	r6, r2
 8012eba:	e7bc      	b.n	8012e36 <_printf_i+0x146>
 8012ebc:	6833      	ldr	r3, [r6, #0]
 8012ebe:	1d1a      	adds	r2, r3, #4
 8012ec0:	6032      	str	r2, [r6, #0]
 8012ec2:	681e      	ldr	r6, [r3, #0]
 8012ec4:	6862      	ldr	r2, [r4, #4]
 8012ec6:	2100      	movs	r1, #0
 8012ec8:	4630      	mov	r0, r6
 8012eca:	f7ed f959 	bl	8000180 <memchr>
 8012ece:	b108      	cbz	r0, 8012ed4 <_printf_i+0x1e4>
 8012ed0:	1b80      	subs	r0, r0, r6
 8012ed2:	6060      	str	r0, [r4, #4]
 8012ed4:	6863      	ldr	r3, [r4, #4]
 8012ed6:	6123      	str	r3, [r4, #16]
 8012ed8:	2300      	movs	r3, #0
 8012eda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ede:	e7aa      	b.n	8012e36 <_printf_i+0x146>
 8012ee0:	6923      	ldr	r3, [r4, #16]
 8012ee2:	4632      	mov	r2, r6
 8012ee4:	4649      	mov	r1, r9
 8012ee6:	4640      	mov	r0, r8
 8012ee8:	47d0      	blx	sl
 8012eea:	3001      	adds	r0, #1
 8012eec:	d0ad      	beq.n	8012e4a <_printf_i+0x15a>
 8012eee:	6823      	ldr	r3, [r4, #0]
 8012ef0:	079b      	lsls	r3, r3, #30
 8012ef2:	d413      	bmi.n	8012f1c <_printf_i+0x22c>
 8012ef4:	68e0      	ldr	r0, [r4, #12]
 8012ef6:	9b03      	ldr	r3, [sp, #12]
 8012ef8:	4298      	cmp	r0, r3
 8012efa:	bfb8      	it	lt
 8012efc:	4618      	movlt	r0, r3
 8012efe:	e7a6      	b.n	8012e4e <_printf_i+0x15e>
 8012f00:	2301      	movs	r3, #1
 8012f02:	4632      	mov	r2, r6
 8012f04:	4649      	mov	r1, r9
 8012f06:	4640      	mov	r0, r8
 8012f08:	47d0      	blx	sl
 8012f0a:	3001      	adds	r0, #1
 8012f0c:	d09d      	beq.n	8012e4a <_printf_i+0x15a>
 8012f0e:	3501      	adds	r5, #1
 8012f10:	68e3      	ldr	r3, [r4, #12]
 8012f12:	9903      	ldr	r1, [sp, #12]
 8012f14:	1a5b      	subs	r3, r3, r1
 8012f16:	42ab      	cmp	r3, r5
 8012f18:	dcf2      	bgt.n	8012f00 <_printf_i+0x210>
 8012f1a:	e7eb      	b.n	8012ef4 <_printf_i+0x204>
 8012f1c:	2500      	movs	r5, #0
 8012f1e:	f104 0619 	add.w	r6, r4, #25
 8012f22:	e7f5      	b.n	8012f10 <_printf_i+0x220>
 8012f24:	080186ce 	.word	0x080186ce
 8012f28:	080186df 	.word	0x080186df

08012f2c <sniprintf>:
 8012f2c:	b40c      	push	{r2, r3}
 8012f2e:	b530      	push	{r4, r5, lr}
 8012f30:	4b18      	ldr	r3, [pc, #96]	@ (8012f94 <sniprintf+0x68>)
 8012f32:	1e0c      	subs	r4, r1, #0
 8012f34:	681d      	ldr	r5, [r3, #0]
 8012f36:	b09d      	sub	sp, #116	@ 0x74
 8012f38:	da08      	bge.n	8012f4c <sniprintf+0x20>
 8012f3a:	238b      	movs	r3, #139	@ 0x8b
 8012f3c:	602b      	str	r3, [r5, #0]
 8012f3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f42:	b01d      	add	sp, #116	@ 0x74
 8012f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f48:	b002      	add	sp, #8
 8012f4a:	4770      	bx	lr
 8012f4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012f50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012f54:	f04f 0300 	mov.w	r3, #0
 8012f58:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012f5a:	bf14      	ite	ne
 8012f5c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8012f60:	4623      	moveq	r3, r4
 8012f62:	9304      	str	r3, [sp, #16]
 8012f64:	9307      	str	r3, [sp, #28]
 8012f66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012f6a:	9002      	str	r0, [sp, #8]
 8012f6c:	9006      	str	r0, [sp, #24]
 8012f6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012f72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012f74:	ab21      	add	r3, sp, #132	@ 0x84
 8012f76:	a902      	add	r1, sp, #8
 8012f78:	4628      	mov	r0, r5
 8012f7a:	9301      	str	r3, [sp, #4]
 8012f7c:	f001 f834 	bl	8013fe8 <_svfiprintf_r>
 8012f80:	1c43      	adds	r3, r0, #1
 8012f82:	bfbc      	itt	lt
 8012f84:	238b      	movlt	r3, #139	@ 0x8b
 8012f86:	602b      	strlt	r3, [r5, #0]
 8012f88:	2c00      	cmp	r4, #0
 8012f8a:	d0da      	beq.n	8012f42 <sniprintf+0x16>
 8012f8c:	9b02      	ldr	r3, [sp, #8]
 8012f8e:	2200      	movs	r2, #0
 8012f90:	701a      	strb	r2, [r3, #0]
 8012f92:	e7d6      	b.n	8012f42 <sniprintf+0x16>
 8012f94:	200000a4 	.word	0x200000a4

08012f98 <std>:
 8012f98:	2300      	movs	r3, #0
 8012f9a:	b510      	push	{r4, lr}
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8012fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012fa6:	6083      	str	r3, [r0, #8]
 8012fa8:	8181      	strh	r1, [r0, #12]
 8012faa:	6643      	str	r3, [r0, #100]	@ 0x64
 8012fac:	81c2      	strh	r2, [r0, #14]
 8012fae:	6183      	str	r3, [r0, #24]
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	2208      	movs	r2, #8
 8012fb4:	305c      	adds	r0, #92	@ 0x5c
 8012fb6:	f000 f929 	bl	801320c <memset>
 8012fba:	4b0d      	ldr	r3, [pc, #52]	@ (8012ff0 <std+0x58>)
 8012fbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8012fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8012ff4 <std+0x5c>)
 8012fc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012ff8 <std+0x60>)
 8012fc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8012ffc <std+0x64>)
 8012fc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8012fca:	4b0d      	ldr	r3, [pc, #52]	@ (8013000 <std+0x68>)
 8012fcc:	6224      	str	r4, [r4, #32]
 8012fce:	429c      	cmp	r4, r3
 8012fd0:	d006      	beq.n	8012fe0 <std+0x48>
 8012fd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012fd6:	4294      	cmp	r4, r2
 8012fd8:	d002      	beq.n	8012fe0 <std+0x48>
 8012fda:	33d0      	adds	r3, #208	@ 0xd0
 8012fdc:	429c      	cmp	r4, r3
 8012fde:	d105      	bne.n	8012fec <std+0x54>
 8012fe0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fe8:	f000 b942 	b.w	8013270 <__retarget_lock_init_recursive>
 8012fec:	bd10      	pop	{r4, pc}
 8012fee:	bf00      	nop
 8012ff0:	08014e1d 	.word	0x08014e1d
 8012ff4:	08014e3f 	.word	0x08014e3f
 8012ff8:	08014e77 	.word	0x08014e77
 8012ffc:	08014e9b 	.word	0x08014e9b
 8013000:	200006e8 	.word	0x200006e8

08013004 <stdio_exit_handler>:
 8013004:	4a02      	ldr	r2, [pc, #8]	@ (8013010 <stdio_exit_handler+0xc>)
 8013006:	4903      	ldr	r1, [pc, #12]	@ (8013014 <stdio_exit_handler+0x10>)
 8013008:	4803      	ldr	r0, [pc, #12]	@ (8013018 <stdio_exit_handler+0x14>)
 801300a:	f000 b869 	b.w	80130e0 <_fwalk_sglue>
 801300e:	bf00      	nop
 8013010:	20000098 	.word	0x20000098
 8013014:	080146c1 	.word	0x080146c1
 8013018:	200000a8 	.word	0x200000a8

0801301c <cleanup_stdio>:
 801301c:	6841      	ldr	r1, [r0, #4]
 801301e:	4b0c      	ldr	r3, [pc, #48]	@ (8013050 <cleanup_stdio+0x34>)
 8013020:	4299      	cmp	r1, r3
 8013022:	b510      	push	{r4, lr}
 8013024:	4604      	mov	r4, r0
 8013026:	d001      	beq.n	801302c <cleanup_stdio+0x10>
 8013028:	f001 fb4a 	bl	80146c0 <_fflush_r>
 801302c:	68a1      	ldr	r1, [r4, #8]
 801302e:	4b09      	ldr	r3, [pc, #36]	@ (8013054 <cleanup_stdio+0x38>)
 8013030:	4299      	cmp	r1, r3
 8013032:	d002      	beq.n	801303a <cleanup_stdio+0x1e>
 8013034:	4620      	mov	r0, r4
 8013036:	f001 fb43 	bl	80146c0 <_fflush_r>
 801303a:	68e1      	ldr	r1, [r4, #12]
 801303c:	4b06      	ldr	r3, [pc, #24]	@ (8013058 <cleanup_stdio+0x3c>)
 801303e:	4299      	cmp	r1, r3
 8013040:	d004      	beq.n	801304c <cleanup_stdio+0x30>
 8013042:	4620      	mov	r0, r4
 8013044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013048:	f001 bb3a 	b.w	80146c0 <_fflush_r>
 801304c:	bd10      	pop	{r4, pc}
 801304e:	bf00      	nop
 8013050:	200006e8 	.word	0x200006e8
 8013054:	20000750 	.word	0x20000750
 8013058:	200007b8 	.word	0x200007b8

0801305c <global_stdio_init.part.0>:
 801305c:	b510      	push	{r4, lr}
 801305e:	4b0b      	ldr	r3, [pc, #44]	@ (801308c <global_stdio_init.part.0+0x30>)
 8013060:	4c0b      	ldr	r4, [pc, #44]	@ (8013090 <global_stdio_init.part.0+0x34>)
 8013062:	4a0c      	ldr	r2, [pc, #48]	@ (8013094 <global_stdio_init.part.0+0x38>)
 8013064:	601a      	str	r2, [r3, #0]
 8013066:	4620      	mov	r0, r4
 8013068:	2200      	movs	r2, #0
 801306a:	2104      	movs	r1, #4
 801306c:	f7ff ff94 	bl	8012f98 <std>
 8013070:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013074:	2201      	movs	r2, #1
 8013076:	2109      	movs	r1, #9
 8013078:	f7ff ff8e 	bl	8012f98 <std>
 801307c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013080:	2202      	movs	r2, #2
 8013082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013086:	2112      	movs	r1, #18
 8013088:	f7ff bf86 	b.w	8012f98 <std>
 801308c:	20000820 	.word	0x20000820
 8013090:	200006e8 	.word	0x200006e8
 8013094:	08013005 	.word	0x08013005

08013098 <__sfp_lock_acquire>:
 8013098:	4801      	ldr	r0, [pc, #4]	@ (80130a0 <__sfp_lock_acquire+0x8>)
 801309a:	f000 b8ea 	b.w	8013272 <__retarget_lock_acquire_recursive>
 801309e:	bf00      	nop
 80130a0:	20000825 	.word	0x20000825

080130a4 <__sfp_lock_release>:
 80130a4:	4801      	ldr	r0, [pc, #4]	@ (80130ac <__sfp_lock_release+0x8>)
 80130a6:	f000 b8e5 	b.w	8013274 <__retarget_lock_release_recursive>
 80130aa:	bf00      	nop
 80130ac:	20000825 	.word	0x20000825

080130b0 <__sinit>:
 80130b0:	b510      	push	{r4, lr}
 80130b2:	4604      	mov	r4, r0
 80130b4:	f7ff fff0 	bl	8013098 <__sfp_lock_acquire>
 80130b8:	6a23      	ldr	r3, [r4, #32]
 80130ba:	b11b      	cbz	r3, 80130c4 <__sinit+0x14>
 80130bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130c0:	f7ff bff0 	b.w	80130a4 <__sfp_lock_release>
 80130c4:	4b04      	ldr	r3, [pc, #16]	@ (80130d8 <__sinit+0x28>)
 80130c6:	6223      	str	r3, [r4, #32]
 80130c8:	4b04      	ldr	r3, [pc, #16]	@ (80130dc <__sinit+0x2c>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d1f5      	bne.n	80130bc <__sinit+0xc>
 80130d0:	f7ff ffc4 	bl	801305c <global_stdio_init.part.0>
 80130d4:	e7f2      	b.n	80130bc <__sinit+0xc>
 80130d6:	bf00      	nop
 80130d8:	0801301d 	.word	0x0801301d
 80130dc:	20000820 	.word	0x20000820

080130e0 <_fwalk_sglue>:
 80130e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130e4:	4607      	mov	r7, r0
 80130e6:	4688      	mov	r8, r1
 80130e8:	4614      	mov	r4, r2
 80130ea:	2600      	movs	r6, #0
 80130ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80130f0:	f1b9 0901 	subs.w	r9, r9, #1
 80130f4:	d505      	bpl.n	8013102 <_fwalk_sglue+0x22>
 80130f6:	6824      	ldr	r4, [r4, #0]
 80130f8:	2c00      	cmp	r4, #0
 80130fa:	d1f7      	bne.n	80130ec <_fwalk_sglue+0xc>
 80130fc:	4630      	mov	r0, r6
 80130fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013102:	89ab      	ldrh	r3, [r5, #12]
 8013104:	2b01      	cmp	r3, #1
 8013106:	d907      	bls.n	8013118 <_fwalk_sglue+0x38>
 8013108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801310c:	3301      	adds	r3, #1
 801310e:	d003      	beq.n	8013118 <_fwalk_sglue+0x38>
 8013110:	4629      	mov	r1, r5
 8013112:	4638      	mov	r0, r7
 8013114:	47c0      	blx	r8
 8013116:	4306      	orrs	r6, r0
 8013118:	3568      	adds	r5, #104	@ 0x68
 801311a:	e7e9      	b.n	80130f0 <_fwalk_sglue+0x10>

0801311c <iprintf>:
 801311c:	b40f      	push	{r0, r1, r2, r3}
 801311e:	b507      	push	{r0, r1, r2, lr}
 8013120:	4906      	ldr	r1, [pc, #24]	@ (801313c <iprintf+0x20>)
 8013122:	ab04      	add	r3, sp, #16
 8013124:	6808      	ldr	r0, [r1, #0]
 8013126:	f853 2b04 	ldr.w	r2, [r3], #4
 801312a:	6881      	ldr	r1, [r0, #8]
 801312c:	9301      	str	r3, [sp, #4]
 801312e:	f001 f881 	bl	8014234 <_vfiprintf_r>
 8013132:	b003      	add	sp, #12
 8013134:	f85d eb04 	ldr.w	lr, [sp], #4
 8013138:	b004      	add	sp, #16
 801313a:	4770      	bx	lr
 801313c:	200000a4 	.word	0x200000a4

08013140 <putchar>:
 8013140:	4b02      	ldr	r3, [pc, #8]	@ (801314c <putchar+0xc>)
 8013142:	4601      	mov	r1, r0
 8013144:	6818      	ldr	r0, [r3, #0]
 8013146:	6882      	ldr	r2, [r0, #8]
 8013148:	f001 bfd0 	b.w	80150ec <_putc_r>
 801314c:	200000a4 	.word	0x200000a4

08013150 <_puts_r>:
 8013150:	6a03      	ldr	r3, [r0, #32]
 8013152:	b570      	push	{r4, r5, r6, lr}
 8013154:	6884      	ldr	r4, [r0, #8]
 8013156:	4605      	mov	r5, r0
 8013158:	460e      	mov	r6, r1
 801315a:	b90b      	cbnz	r3, 8013160 <_puts_r+0x10>
 801315c:	f7ff ffa8 	bl	80130b0 <__sinit>
 8013160:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013162:	07db      	lsls	r3, r3, #31
 8013164:	d405      	bmi.n	8013172 <_puts_r+0x22>
 8013166:	89a3      	ldrh	r3, [r4, #12]
 8013168:	0598      	lsls	r0, r3, #22
 801316a:	d402      	bmi.n	8013172 <_puts_r+0x22>
 801316c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801316e:	f000 f880 	bl	8013272 <__retarget_lock_acquire_recursive>
 8013172:	89a3      	ldrh	r3, [r4, #12]
 8013174:	0719      	lsls	r1, r3, #28
 8013176:	d502      	bpl.n	801317e <_puts_r+0x2e>
 8013178:	6923      	ldr	r3, [r4, #16]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d135      	bne.n	80131ea <_puts_r+0x9a>
 801317e:	4621      	mov	r1, r4
 8013180:	4628      	mov	r0, r5
 8013182:	f001 fefb 	bl	8014f7c <__swsetup_r>
 8013186:	b380      	cbz	r0, 80131ea <_puts_r+0x9a>
 8013188:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801318c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801318e:	07da      	lsls	r2, r3, #31
 8013190:	d405      	bmi.n	801319e <_puts_r+0x4e>
 8013192:	89a3      	ldrh	r3, [r4, #12]
 8013194:	059b      	lsls	r3, r3, #22
 8013196:	d402      	bmi.n	801319e <_puts_r+0x4e>
 8013198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801319a:	f000 f86b 	bl	8013274 <__retarget_lock_release_recursive>
 801319e:	4628      	mov	r0, r5
 80131a0:	bd70      	pop	{r4, r5, r6, pc}
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	da04      	bge.n	80131b0 <_puts_r+0x60>
 80131a6:	69a2      	ldr	r2, [r4, #24]
 80131a8:	429a      	cmp	r2, r3
 80131aa:	dc17      	bgt.n	80131dc <_puts_r+0x8c>
 80131ac:	290a      	cmp	r1, #10
 80131ae:	d015      	beq.n	80131dc <_puts_r+0x8c>
 80131b0:	6823      	ldr	r3, [r4, #0]
 80131b2:	1c5a      	adds	r2, r3, #1
 80131b4:	6022      	str	r2, [r4, #0]
 80131b6:	7019      	strb	r1, [r3, #0]
 80131b8:	68a3      	ldr	r3, [r4, #8]
 80131ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80131be:	3b01      	subs	r3, #1
 80131c0:	60a3      	str	r3, [r4, #8]
 80131c2:	2900      	cmp	r1, #0
 80131c4:	d1ed      	bne.n	80131a2 <_puts_r+0x52>
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	da11      	bge.n	80131ee <_puts_r+0x9e>
 80131ca:	4622      	mov	r2, r4
 80131cc:	210a      	movs	r1, #10
 80131ce:	4628      	mov	r0, r5
 80131d0:	f001 fe95 	bl	8014efe <__swbuf_r>
 80131d4:	3001      	adds	r0, #1
 80131d6:	d0d7      	beq.n	8013188 <_puts_r+0x38>
 80131d8:	250a      	movs	r5, #10
 80131da:	e7d7      	b.n	801318c <_puts_r+0x3c>
 80131dc:	4622      	mov	r2, r4
 80131de:	4628      	mov	r0, r5
 80131e0:	f001 fe8d 	bl	8014efe <__swbuf_r>
 80131e4:	3001      	adds	r0, #1
 80131e6:	d1e7      	bne.n	80131b8 <_puts_r+0x68>
 80131e8:	e7ce      	b.n	8013188 <_puts_r+0x38>
 80131ea:	3e01      	subs	r6, #1
 80131ec:	e7e4      	b.n	80131b8 <_puts_r+0x68>
 80131ee:	6823      	ldr	r3, [r4, #0]
 80131f0:	1c5a      	adds	r2, r3, #1
 80131f2:	6022      	str	r2, [r4, #0]
 80131f4:	220a      	movs	r2, #10
 80131f6:	701a      	strb	r2, [r3, #0]
 80131f8:	e7ee      	b.n	80131d8 <_puts_r+0x88>
	...

080131fc <puts>:
 80131fc:	4b02      	ldr	r3, [pc, #8]	@ (8013208 <puts+0xc>)
 80131fe:	4601      	mov	r1, r0
 8013200:	6818      	ldr	r0, [r3, #0]
 8013202:	f7ff bfa5 	b.w	8013150 <_puts_r>
 8013206:	bf00      	nop
 8013208:	200000a4 	.word	0x200000a4

0801320c <memset>:
 801320c:	4402      	add	r2, r0
 801320e:	4603      	mov	r3, r0
 8013210:	4293      	cmp	r3, r2
 8013212:	d100      	bne.n	8013216 <memset+0xa>
 8013214:	4770      	bx	lr
 8013216:	f803 1b01 	strb.w	r1, [r3], #1
 801321a:	e7f9      	b.n	8013210 <memset+0x4>

0801321c <__errno>:
 801321c:	4b01      	ldr	r3, [pc, #4]	@ (8013224 <__errno+0x8>)
 801321e:	6818      	ldr	r0, [r3, #0]
 8013220:	4770      	bx	lr
 8013222:	bf00      	nop
 8013224:	200000a4 	.word	0x200000a4

08013228 <__libc_init_array>:
 8013228:	b570      	push	{r4, r5, r6, lr}
 801322a:	4d0d      	ldr	r5, [pc, #52]	@ (8013260 <__libc_init_array+0x38>)
 801322c:	4c0d      	ldr	r4, [pc, #52]	@ (8013264 <__libc_init_array+0x3c>)
 801322e:	1b64      	subs	r4, r4, r5
 8013230:	10a4      	asrs	r4, r4, #2
 8013232:	2600      	movs	r6, #0
 8013234:	42a6      	cmp	r6, r4
 8013236:	d109      	bne.n	801324c <__libc_init_array+0x24>
 8013238:	4d0b      	ldr	r5, [pc, #44]	@ (8013268 <__libc_init_array+0x40>)
 801323a:	4c0c      	ldr	r4, [pc, #48]	@ (801326c <__libc_init_array+0x44>)
 801323c:	f002 f92a 	bl	8015494 <_init>
 8013240:	1b64      	subs	r4, r4, r5
 8013242:	10a4      	asrs	r4, r4, #2
 8013244:	2600      	movs	r6, #0
 8013246:	42a6      	cmp	r6, r4
 8013248:	d105      	bne.n	8013256 <__libc_init_array+0x2e>
 801324a:	bd70      	pop	{r4, r5, r6, pc}
 801324c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013250:	4798      	blx	r3
 8013252:	3601      	adds	r6, #1
 8013254:	e7ee      	b.n	8013234 <__libc_init_array+0xc>
 8013256:	f855 3b04 	ldr.w	r3, [r5], #4
 801325a:	4798      	blx	r3
 801325c:	3601      	adds	r6, #1
 801325e:	e7f2      	b.n	8013246 <__libc_init_array+0x1e>
 8013260:	08018a3c 	.word	0x08018a3c
 8013264:	08018a3c 	.word	0x08018a3c
 8013268:	08018a3c 	.word	0x08018a3c
 801326c:	08018a44 	.word	0x08018a44

08013270 <__retarget_lock_init_recursive>:
 8013270:	4770      	bx	lr

08013272 <__retarget_lock_acquire_recursive>:
 8013272:	4770      	bx	lr

08013274 <__retarget_lock_release_recursive>:
 8013274:	4770      	bx	lr
	...

08013278 <_localeconv_r>:
 8013278:	4800      	ldr	r0, [pc, #0]	@ (801327c <_localeconv_r+0x4>)
 801327a:	4770      	bx	lr
 801327c:	200001e4 	.word	0x200001e4

08013280 <quorem>:
 8013280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013284:	6903      	ldr	r3, [r0, #16]
 8013286:	690c      	ldr	r4, [r1, #16]
 8013288:	42a3      	cmp	r3, r4
 801328a:	4607      	mov	r7, r0
 801328c:	db7e      	blt.n	801338c <quorem+0x10c>
 801328e:	3c01      	subs	r4, #1
 8013290:	f101 0814 	add.w	r8, r1, #20
 8013294:	00a3      	lsls	r3, r4, #2
 8013296:	f100 0514 	add.w	r5, r0, #20
 801329a:	9300      	str	r3, [sp, #0]
 801329c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80132a0:	9301      	str	r3, [sp, #4]
 80132a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80132a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80132aa:	3301      	adds	r3, #1
 80132ac:	429a      	cmp	r2, r3
 80132ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80132b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80132b6:	d32e      	bcc.n	8013316 <quorem+0x96>
 80132b8:	f04f 0a00 	mov.w	sl, #0
 80132bc:	46c4      	mov	ip, r8
 80132be:	46ae      	mov	lr, r5
 80132c0:	46d3      	mov	fp, sl
 80132c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80132c6:	b298      	uxth	r0, r3
 80132c8:	fb06 a000 	mla	r0, r6, r0, sl
 80132cc:	0c02      	lsrs	r2, r0, #16
 80132ce:	0c1b      	lsrs	r3, r3, #16
 80132d0:	fb06 2303 	mla	r3, r6, r3, r2
 80132d4:	f8de 2000 	ldr.w	r2, [lr]
 80132d8:	b280      	uxth	r0, r0
 80132da:	b292      	uxth	r2, r2
 80132dc:	1a12      	subs	r2, r2, r0
 80132de:	445a      	add	r2, fp
 80132e0:	f8de 0000 	ldr.w	r0, [lr]
 80132e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80132ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80132f2:	b292      	uxth	r2, r2
 80132f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80132f8:	45e1      	cmp	r9, ip
 80132fa:	f84e 2b04 	str.w	r2, [lr], #4
 80132fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013302:	d2de      	bcs.n	80132c2 <quorem+0x42>
 8013304:	9b00      	ldr	r3, [sp, #0]
 8013306:	58eb      	ldr	r3, [r5, r3]
 8013308:	b92b      	cbnz	r3, 8013316 <quorem+0x96>
 801330a:	9b01      	ldr	r3, [sp, #4]
 801330c:	3b04      	subs	r3, #4
 801330e:	429d      	cmp	r5, r3
 8013310:	461a      	mov	r2, r3
 8013312:	d32f      	bcc.n	8013374 <quorem+0xf4>
 8013314:	613c      	str	r4, [r7, #16]
 8013316:	4638      	mov	r0, r7
 8013318:	f001 fc78 	bl	8014c0c <__mcmp>
 801331c:	2800      	cmp	r0, #0
 801331e:	db25      	blt.n	801336c <quorem+0xec>
 8013320:	4629      	mov	r1, r5
 8013322:	2000      	movs	r0, #0
 8013324:	f858 2b04 	ldr.w	r2, [r8], #4
 8013328:	f8d1 c000 	ldr.w	ip, [r1]
 801332c:	fa1f fe82 	uxth.w	lr, r2
 8013330:	fa1f f38c 	uxth.w	r3, ip
 8013334:	eba3 030e 	sub.w	r3, r3, lr
 8013338:	4403      	add	r3, r0
 801333a:	0c12      	lsrs	r2, r2, #16
 801333c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013340:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013344:	b29b      	uxth	r3, r3
 8013346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801334a:	45c1      	cmp	r9, r8
 801334c:	f841 3b04 	str.w	r3, [r1], #4
 8013350:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013354:	d2e6      	bcs.n	8013324 <quorem+0xa4>
 8013356:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801335a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801335e:	b922      	cbnz	r2, 801336a <quorem+0xea>
 8013360:	3b04      	subs	r3, #4
 8013362:	429d      	cmp	r5, r3
 8013364:	461a      	mov	r2, r3
 8013366:	d30b      	bcc.n	8013380 <quorem+0x100>
 8013368:	613c      	str	r4, [r7, #16]
 801336a:	3601      	adds	r6, #1
 801336c:	4630      	mov	r0, r6
 801336e:	b003      	add	sp, #12
 8013370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013374:	6812      	ldr	r2, [r2, #0]
 8013376:	3b04      	subs	r3, #4
 8013378:	2a00      	cmp	r2, #0
 801337a:	d1cb      	bne.n	8013314 <quorem+0x94>
 801337c:	3c01      	subs	r4, #1
 801337e:	e7c6      	b.n	801330e <quorem+0x8e>
 8013380:	6812      	ldr	r2, [r2, #0]
 8013382:	3b04      	subs	r3, #4
 8013384:	2a00      	cmp	r2, #0
 8013386:	d1ef      	bne.n	8013368 <quorem+0xe8>
 8013388:	3c01      	subs	r4, #1
 801338a:	e7ea      	b.n	8013362 <quorem+0xe2>
 801338c:	2000      	movs	r0, #0
 801338e:	e7ee      	b.n	801336e <quorem+0xee>

08013390 <_dtoa_r>:
 8013390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013394:	69c7      	ldr	r7, [r0, #28]
 8013396:	b097      	sub	sp, #92	@ 0x5c
 8013398:	ed8d 0b04 	vstr	d0, [sp, #16]
 801339c:	ec55 4b10 	vmov	r4, r5, d0
 80133a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80133a2:	9107      	str	r1, [sp, #28]
 80133a4:	4681      	mov	r9, r0
 80133a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80133a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80133aa:	b97f      	cbnz	r7, 80133cc <_dtoa_r+0x3c>
 80133ac:	2010      	movs	r0, #16
 80133ae:	f001 f859 	bl	8014464 <malloc>
 80133b2:	4602      	mov	r2, r0
 80133b4:	f8c9 001c 	str.w	r0, [r9, #28]
 80133b8:	b920      	cbnz	r0, 80133c4 <_dtoa_r+0x34>
 80133ba:	4ba9      	ldr	r3, [pc, #676]	@ (8013660 <_dtoa_r+0x2d0>)
 80133bc:	21ef      	movs	r1, #239	@ 0xef
 80133be:	48a9      	ldr	r0, [pc, #676]	@ (8013664 <_dtoa_r+0x2d4>)
 80133c0:	f001 ff68 	bl	8015294 <__assert_func>
 80133c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80133c8:	6007      	str	r7, [r0, #0]
 80133ca:	60c7      	str	r7, [r0, #12]
 80133cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80133d0:	6819      	ldr	r1, [r3, #0]
 80133d2:	b159      	cbz	r1, 80133ec <_dtoa_r+0x5c>
 80133d4:	685a      	ldr	r2, [r3, #4]
 80133d6:	604a      	str	r2, [r1, #4]
 80133d8:	2301      	movs	r3, #1
 80133da:	4093      	lsls	r3, r2
 80133dc:	608b      	str	r3, [r1, #8]
 80133de:	4648      	mov	r0, r9
 80133e0:	f001 f9e2 	bl	80147a8 <_Bfree>
 80133e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80133e8:	2200      	movs	r2, #0
 80133ea:	601a      	str	r2, [r3, #0]
 80133ec:	1e2b      	subs	r3, r5, #0
 80133ee:	bfb9      	ittee	lt
 80133f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80133f4:	9305      	strlt	r3, [sp, #20]
 80133f6:	2300      	movge	r3, #0
 80133f8:	6033      	strge	r3, [r6, #0]
 80133fa:	9f05      	ldr	r7, [sp, #20]
 80133fc:	4b9a      	ldr	r3, [pc, #616]	@ (8013668 <_dtoa_r+0x2d8>)
 80133fe:	bfbc      	itt	lt
 8013400:	2201      	movlt	r2, #1
 8013402:	6032      	strlt	r2, [r6, #0]
 8013404:	43bb      	bics	r3, r7
 8013406:	d112      	bne.n	801342e <_dtoa_r+0x9e>
 8013408:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801340a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801340e:	6013      	str	r3, [r2, #0]
 8013410:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013414:	4323      	orrs	r3, r4
 8013416:	f000 855a 	beq.w	8013ece <_dtoa_r+0xb3e>
 801341a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801341c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801367c <_dtoa_r+0x2ec>
 8013420:	2b00      	cmp	r3, #0
 8013422:	f000 855c 	beq.w	8013ede <_dtoa_r+0xb4e>
 8013426:	f10a 0303 	add.w	r3, sl, #3
 801342a:	f000 bd56 	b.w	8013eda <_dtoa_r+0xb4a>
 801342e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013432:	2200      	movs	r2, #0
 8013434:	ec51 0b17 	vmov	r0, r1, d7
 8013438:	2300      	movs	r3, #0
 801343a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801343e:	f7ed fb1b 	bl	8000a78 <__aeabi_dcmpeq>
 8013442:	4680      	mov	r8, r0
 8013444:	b158      	cbz	r0, 801345e <_dtoa_r+0xce>
 8013446:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013448:	2301      	movs	r3, #1
 801344a:	6013      	str	r3, [r2, #0]
 801344c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801344e:	b113      	cbz	r3, 8013456 <_dtoa_r+0xc6>
 8013450:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013452:	4b86      	ldr	r3, [pc, #536]	@ (801366c <_dtoa_r+0x2dc>)
 8013454:	6013      	str	r3, [r2, #0]
 8013456:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013680 <_dtoa_r+0x2f0>
 801345a:	f000 bd40 	b.w	8013ede <_dtoa_r+0xb4e>
 801345e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8013462:	aa14      	add	r2, sp, #80	@ 0x50
 8013464:	a915      	add	r1, sp, #84	@ 0x54
 8013466:	4648      	mov	r0, r9
 8013468:	f001 fc80 	bl	8014d6c <__d2b>
 801346c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013470:	9002      	str	r0, [sp, #8]
 8013472:	2e00      	cmp	r6, #0
 8013474:	d078      	beq.n	8013568 <_dtoa_r+0x1d8>
 8013476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013478:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801347c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013480:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013484:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013488:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801348c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013490:	4619      	mov	r1, r3
 8013492:	2200      	movs	r2, #0
 8013494:	4b76      	ldr	r3, [pc, #472]	@ (8013670 <_dtoa_r+0x2e0>)
 8013496:	f7ec fecf 	bl	8000238 <__aeabi_dsub>
 801349a:	a36b      	add	r3, pc, #428	@ (adr r3, 8013648 <_dtoa_r+0x2b8>)
 801349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a0:	f7ed f882 	bl	80005a8 <__aeabi_dmul>
 80134a4:	a36a      	add	r3, pc, #424	@ (adr r3, 8013650 <_dtoa_r+0x2c0>)
 80134a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134aa:	f7ec fec7 	bl	800023c <__adddf3>
 80134ae:	4604      	mov	r4, r0
 80134b0:	4630      	mov	r0, r6
 80134b2:	460d      	mov	r5, r1
 80134b4:	f7ed f80e 	bl	80004d4 <__aeabi_i2d>
 80134b8:	a367      	add	r3, pc, #412	@ (adr r3, 8013658 <_dtoa_r+0x2c8>)
 80134ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134be:	f7ed f873 	bl	80005a8 <__aeabi_dmul>
 80134c2:	4602      	mov	r2, r0
 80134c4:	460b      	mov	r3, r1
 80134c6:	4620      	mov	r0, r4
 80134c8:	4629      	mov	r1, r5
 80134ca:	f7ec feb7 	bl	800023c <__adddf3>
 80134ce:	4604      	mov	r4, r0
 80134d0:	460d      	mov	r5, r1
 80134d2:	f7ed fb19 	bl	8000b08 <__aeabi_d2iz>
 80134d6:	2200      	movs	r2, #0
 80134d8:	4607      	mov	r7, r0
 80134da:	2300      	movs	r3, #0
 80134dc:	4620      	mov	r0, r4
 80134de:	4629      	mov	r1, r5
 80134e0:	f7ed fad4 	bl	8000a8c <__aeabi_dcmplt>
 80134e4:	b140      	cbz	r0, 80134f8 <_dtoa_r+0x168>
 80134e6:	4638      	mov	r0, r7
 80134e8:	f7ec fff4 	bl	80004d4 <__aeabi_i2d>
 80134ec:	4622      	mov	r2, r4
 80134ee:	462b      	mov	r3, r5
 80134f0:	f7ed fac2 	bl	8000a78 <__aeabi_dcmpeq>
 80134f4:	b900      	cbnz	r0, 80134f8 <_dtoa_r+0x168>
 80134f6:	3f01      	subs	r7, #1
 80134f8:	2f16      	cmp	r7, #22
 80134fa:	d852      	bhi.n	80135a2 <_dtoa_r+0x212>
 80134fc:	4b5d      	ldr	r3, [pc, #372]	@ (8013674 <_dtoa_r+0x2e4>)
 80134fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013506:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801350a:	f7ed fabf 	bl	8000a8c <__aeabi_dcmplt>
 801350e:	2800      	cmp	r0, #0
 8013510:	d049      	beq.n	80135a6 <_dtoa_r+0x216>
 8013512:	3f01      	subs	r7, #1
 8013514:	2300      	movs	r3, #0
 8013516:	9310      	str	r3, [sp, #64]	@ 0x40
 8013518:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801351a:	1b9b      	subs	r3, r3, r6
 801351c:	1e5a      	subs	r2, r3, #1
 801351e:	bf45      	ittet	mi
 8013520:	f1c3 0301 	rsbmi	r3, r3, #1
 8013524:	9300      	strmi	r3, [sp, #0]
 8013526:	2300      	movpl	r3, #0
 8013528:	2300      	movmi	r3, #0
 801352a:	9206      	str	r2, [sp, #24]
 801352c:	bf54      	ite	pl
 801352e:	9300      	strpl	r3, [sp, #0]
 8013530:	9306      	strmi	r3, [sp, #24]
 8013532:	2f00      	cmp	r7, #0
 8013534:	db39      	blt.n	80135aa <_dtoa_r+0x21a>
 8013536:	9b06      	ldr	r3, [sp, #24]
 8013538:	970d      	str	r7, [sp, #52]	@ 0x34
 801353a:	443b      	add	r3, r7
 801353c:	9306      	str	r3, [sp, #24]
 801353e:	2300      	movs	r3, #0
 8013540:	9308      	str	r3, [sp, #32]
 8013542:	9b07      	ldr	r3, [sp, #28]
 8013544:	2b09      	cmp	r3, #9
 8013546:	d863      	bhi.n	8013610 <_dtoa_r+0x280>
 8013548:	2b05      	cmp	r3, #5
 801354a:	bfc4      	itt	gt
 801354c:	3b04      	subgt	r3, #4
 801354e:	9307      	strgt	r3, [sp, #28]
 8013550:	9b07      	ldr	r3, [sp, #28]
 8013552:	f1a3 0302 	sub.w	r3, r3, #2
 8013556:	bfcc      	ite	gt
 8013558:	2400      	movgt	r4, #0
 801355a:	2401      	movle	r4, #1
 801355c:	2b03      	cmp	r3, #3
 801355e:	d863      	bhi.n	8013628 <_dtoa_r+0x298>
 8013560:	e8df f003 	tbb	[pc, r3]
 8013564:	2b375452 	.word	0x2b375452
 8013568:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801356c:	441e      	add	r6, r3
 801356e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013572:	2b20      	cmp	r3, #32
 8013574:	bfc1      	itttt	gt
 8013576:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801357a:	409f      	lslgt	r7, r3
 801357c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013580:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013584:	bfd6      	itet	le
 8013586:	f1c3 0320 	rsble	r3, r3, #32
 801358a:	ea47 0003 	orrgt.w	r0, r7, r3
 801358e:	fa04 f003 	lslle.w	r0, r4, r3
 8013592:	f7ec ff8f 	bl	80004b4 <__aeabi_ui2d>
 8013596:	2201      	movs	r2, #1
 8013598:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801359c:	3e01      	subs	r6, #1
 801359e:	9212      	str	r2, [sp, #72]	@ 0x48
 80135a0:	e776      	b.n	8013490 <_dtoa_r+0x100>
 80135a2:	2301      	movs	r3, #1
 80135a4:	e7b7      	b.n	8013516 <_dtoa_r+0x186>
 80135a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80135a8:	e7b6      	b.n	8013518 <_dtoa_r+0x188>
 80135aa:	9b00      	ldr	r3, [sp, #0]
 80135ac:	1bdb      	subs	r3, r3, r7
 80135ae:	9300      	str	r3, [sp, #0]
 80135b0:	427b      	negs	r3, r7
 80135b2:	9308      	str	r3, [sp, #32]
 80135b4:	2300      	movs	r3, #0
 80135b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80135b8:	e7c3      	b.n	8013542 <_dtoa_r+0x1b2>
 80135ba:	2301      	movs	r3, #1
 80135bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80135be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135c0:	eb07 0b03 	add.w	fp, r7, r3
 80135c4:	f10b 0301 	add.w	r3, fp, #1
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	9303      	str	r3, [sp, #12]
 80135cc:	bfb8      	it	lt
 80135ce:	2301      	movlt	r3, #1
 80135d0:	e006      	b.n	80135e0 <_dtoa_r+0x250>
 80135d2:	2301      	movs	r3, #1
 80135d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80135d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135d8:	2b00      	cmp	r3, #0
 80135da:	dd28      	ble.n	801362e <_dtoa_r+0x29e>
 80135dc:	469b      	mov	fp, r3
 80135de:	9303      	str	r3, [sp, #12]
 80135e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80135e4:	2100      	movs	r1, #0
 80135e6:	2204      	movs	r2, #4
 80135e8:	f102 0514 	add.w	r5, r2, #20
 80135ec:	429d      	cmp	r5, r3
 80135ee:	d926      	bls.n	801363e <_dtoa_r+0x2ae>
 80135f0:	6041      	str	r1, [r0, #4]
 80135f2:	4648      	mov	r0, r9
 80135f4:	f001 f898 	bl	8014728 <_Balloc>
 80135f8:	4682      	mov	sl, r0
 80135fa:	2800      	cmp	r0, #0
 80135fc:	d142      	bne.n	8013684 <_dtoa_r+0x2f4>
 80135fe:	4b1e      	ldr	r3, [pc, #120]	@ (8013678 <_dtoa_r+0x2e8>)
 8013600:	4602      	mov	r2, r0
 8013602:	f240 11af 	movw	r1, #431	@ 0x1af
 8013606:	e6da      	b.n	80133be <_dtoa_r+0x2e>
 8013608:	2300      	movs	r3, #0
 801360a:	e7e3      	b.n	80135d4 <_dtoa_r+0x244>
 801360c:	2300      	movs	r3, #0
 801360e:	e7d5      	b.n	80135bc <_dtoa_r+0x22c>
 8013610:	2401      	movs	r4, #1
 8013612:	2300      	movs	r3, #0
 8013614:	9307      	str	r3, [sp, #28]
 8013616:	9409      	str	r4, [sp, #36]	@ 0x24
 8013618:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801361c:	2200      	movs	r2, #0
 801361e:	f8cd b00c 	str.w	fp, [sp, #12]
 8013622:	2312      	movs	r3, #18
 8013624:	920c      	str	r2, [sp, #48]	@ 0x30
 8013626:	e7db      	b.n	80135e0 <_dtoa_r+0x250>
 8013628:	2301      	movs	r3, #1
 801362a:	9309      	str	r3, [sp, #36]	@ 0x24
 801362c:	e7f4      	b.n	8013618 <_dtoa_r+0x288>
 801362e:	f04f 0b01 	mov.w	fp, #1
 8013632:	f8cd b00c 	str.w	fp, [sp, #12]
 8013636:	465b      	mov	r3, fp
 8013638:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801363c:	e7d0      	b.n	80135e0 <_dtoa_r+0x250>
 801363e:	3101      	adds	r1, #1
 8013640:	0052      	lsls	r2, r2, #1
 8013642:	e7d1      	b.n	80135e8 <_dtoa_r+0x258>
 8013644:	f3af 8000 	nop.w
 8013648:	636f4361 	.word	0x636f4361
 801364c:	3fd287a7 	.word	0x3fd287a7
 8013650:	8b60c8b3 	.word	0x8b60c8b3
 8013654:	3fc68a28 	.word	0x3fc68a28
 8013658:	509f79fb 	.word	0x509f79fb
 801365c:	3fd34413 	.word	0x3fd34413
 8013660:	080186fd 	.word	0x080186fd
 8013664:	08018714 	.word	0x08018714
 8013668:	7ff00000 	.word	0x7ff00000
 801366c:	080186cd 	.word	0x080186cd
 8013670:	3ff80000 	.word	0x3ff80000
 8013674:	08018868 	.word	0x08018868
 8013678:	0801876c 	.word	0x0801876c
 801367c:	080186f9 	.word	0x080186f9
 8013680:	080186cc 	.word	0x080186cc
 8013684:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013688:	6018      	str	r0, [r3, #0]
 801368a:	9b03      	ldr	r3, [sp, #12]
 801368c:	2b0e      	cmp	r3, #14
 801368e:	f200 80a1 	bhi.w	80137d4 <_dtoa_r+0x444>
 8013692:	2c00      	cmp	r4, #0
 8013694:	f000 809e 	beq.w	80137d4 <_dtoa_r+0x444>
 8013698:	2f00      	cmp	r7, #0
 801369a:	dd33      	ble.n	8013704 <_dtoa_r+0x374>
 801369c:	4b9c      	ldr	r3, [pc, #624]	@ (8013910 <_dtoa_r+0x580>)
 801369e:	f007 020f 	and.w	r2, r7, #15
 80136a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80136a6:	ed93 7b00 	vldr	d7, [r3]
 80136aa:	05f8      	lsls	r0, r7, #23
 80136ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80136b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80136b4:	d516      	bpl.n	80136e4 <_dtoa_r+0x354>
 80136b6:	4b97      	ldr	r3, [pc, #604]	@ (8013914 <_dtoa_r+0x584>)
 80136b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80136bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80136c0:	f7ed f89c 	bl	80007fc <__aeabi_ddiv>
 80136c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80136c8:	f004 040f 	and.w	r4, r4, #15
 80136cc:	2603      	movs	r6, #3
 80136ce:	4d91      	ldr	r5, [pc, #580]	@ (8013914 <_dtoa_r+0x584>)
 80136d0:	b954      	cbnz	r4, 80136e8 <_dtoa_r+0x358>
 80136d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80136d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80136da:	f7ed f88f 	bl	80007fc <__aeabi_ddiv>
 80136de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80136e2:	e028      	b.n	8013736 <_dtoa_r+0x3a6>
 80136e4:	2602      	movs	r6, #2
 80136e6:	e7f2      	b.n	80136ce <_dtoa_r+0x33e>
 80136e8:	07e1      	lsls	r1, r4, #31
 80136ea:	d508      	bpl.n	80136fe <_dtoa_r+0x36e>
 80136ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80136f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80136f4:	f7ec ff58 	bl	80005a8 <__aeabi_dmul>
 80136f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80136fc:	3601      	adds	r6, #1
 80136fe:	1064      	asrs	r4, r4, #1
 8013700:	3508      	adds	r5, #8
 8013702:	e7e5      	b.n	80136d0 <_dtoa_r+0x340>
 8013704:	f000 80af 	beq.w	8013866 <_dtoa_r+0x4d6>
 8013708:	427c      	negs	r4, r7
 801370a:	4b81      	ldr	r3, [pc, #516]	@ (8013910 <_dtoa_r+0x580>)
 801370c:	4d81      	ldr	r5, [pc, #516]	@ (8013914 <_dtoa_r+0x584>)
 801370e:	f004 020f 	and.w	r2, r4, #15
 8013712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801371e:	f7ec ff43 	bl	80005a8 <__aeabi_dmul>
 8013722:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013726:	1124      	asrs	r4, r4, #4
 8013728:	2300      	movs	r3, #0
 801372a:	2602      	movs	r6, #2
 801372c:	2c00      	cmp	r4, #0
 801372e:	f040 808f 	bne.w	8013850 <_dtoa_r+0x4c0>
 8013732:	2b00      	cmp	r3, #0
 8013734:	d1d3      	bne.n	80136de <_dtoa_r+0x34e>
 8013736:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013738:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801373c:	2b00      	cmp	r3, #0
 801373e:	f000 8094 	beq.w	801386a <_dtoa_r+0x4da>
 8013742:	4b75      	ldr	r3, [pc, #468]	@ (8013918 <_dtoa_r+0x588>)
 8013744:	2200      	movs	r2, #0
 8013746:	4620      	mov	r0, r4
 8013748:	4629      	mov	r1, r5
 801374a:	f7ed f99f 	bl	8000a8c <__aeabi_dcmplt>
 801374e:	2800      	cmp	r0, #0
 8013750:	f000 808b 	beq.w	801386a <_dtoa_r+0x4da>
 8013754:	9b03      	ldr	r3, [sp, #12]
 8013756:	2b00      	cmp	r3, #0
 8013758:	f000 8087 	beq.w	801386a <_dtoa_r+0x4da>
 801375c:	f1bb 0f00 	cmp.w	fp, #0
 8013760:	dd34      	ble.n	80137cc <_dtoa_r+0x43c>
 8013762:	4620      	mov	r0, r4
 8013764:	4b6d      	ldr	r3, [pc, #436]	@ (801391c <_dtoa_r+0x58c>)
 8013766:	2200      	movs	r2, #0
 8013768:	4629      	mov	r1, r5
 801376a:	f7ec ff1d 	bl	80005a8 <__aeabi_dmul>
 801376e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013772:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8013776:	3601      	adds	r6, #1
 8013778:	465c      	mov	r4, fp
 801377a:	4630      	mov	r0, r6
 801377c:	f7ec feaa 	bl	80004d4 <__aeabi_i2d>
 8013780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013784:	f7ec ff10 	bl	80005a8 <__aeabi_dmul>
 8013788:	4b65      	ldr	r3, [pc, #404]	@ (8013920 <_dtoa_r+0x590>)
 801378a:	2200      	movs	r2, #0
 801378c:	f7ec fd56 	bl	800023c <__adddf3>
 8013790:	4605      	mov	r5, r0
 8013792:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013796:	2c00      	cmp	r4, #0
 8013798:	d16a      	bne.n	8013870 <_dtoa_r+0x4e0>
 801379a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801379e:	4b61      	ldr	r3, [pc, #388]	@ (8013924 <_dtoa_r+0x594>)
 80137a0:	2200      	movs	r2, #0
 80137a2:	f7ec fd49 	bl	8000238 <__aeabi_dsub>
 80137a6:	4602      	mov	r2, r0
 80137a8:	460b      	mov	r3, r1
 80137aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80137ae:	462a      	mov	r2, r5
 80137b0:	4633      	mov	r3, r6
 80137b2:	f7ed f989 	bl	8000ac8 <__aeabi_dcmpgt>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	f040 8298 	bne.w	8013cec <_dtoa_r+0x95c>
 80137bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80137c0:	462a      	mov	r2, r5
 80137c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80137c6:	f7ed f961 	bl	8000a8c <__aeabi_dcmplt>
 80137ca:	bb38      	cbnz	r0, 801381c <_dtoa_r+0x48c>
 80137cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80137d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80137d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	f2c0 8157 	blt.w	8013a8a <_dtoa_r+0x6fa>
 80137dc:	2f0e      	cmp	r7, #14
 80137de:	f300 8154 	bgt.w	8013a8a <_dtoa_r+0x6fa>
 80137e2:	4b4b      	ldr	r3, [pc, #300]	@ (8013910 <_dtoa_r+0x580>)
 80137e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80137e8:	ed93 7b00 	vldr	d7, [r3]
 80137ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	ed8d 7b00 	vstr	d7, [sp]
 80137f4:	f280 80e5 	bge.w	80139c2 <_dtoa_r+0x632>
 80137f8:	9b03      	ldr	r3, [sp, #12]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	f300 80e1 	bgt.w	80139c2 <_dtoa_r+0x632>
 8013800:	d10c      	bne.n	801381c <_dtoa_r+0x48c>
 8013802:	4b48      	ldr	r3, [pc, #288]	@ (8013924 <_dtoa_r+0x594>)
 8013804:	2200      	movs	r2, #0
 8013806:	ec51 0b17 	vmov	r0, r1, d7
 801380a:	f7ec fecd 	bl	80005a8 <__aeabi_dmul>
 801380e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013812:	f7ed f94f 	bl	8000ab4 <__aeabi_dcmpge>
 8013816:	2800      	cmp	r0, #0
 8013818:	f000 8266 	beq.w	8013ce8 <_dtoa_r+0x958>
 801381c:	2400      	movs	r4, #0
 801381e:	4625      	mov	r5, r4
 8013820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013822:	4656      	mov	r6, sl
 8013824:	ea6f 0803 	mvn.w	r8, r3
 8013828:	2700      	movs	r7, #0
 801382a:	4621      	mov	r1, r4
 801382c:	4648      	mov	r0, r9
 801382e:	f000 ffbb 	bl	80147a8 <_Bfree>
 8013832:	2d00      	cmp	r5, #0
 8013834:	f000 80bd 	beq.w	80139b2 <_dtoa_r+0x622>
 8013838:	b12f      	cbz	r7, 8013846 <_dtoa_r+0x4b6>
 801383a:	42af      	cmp	r7, r5
 801383c:	d003      	beq.n	8013846 <_dtoa_r+0x4b6>
 801383e:	4639      	mov	r1, r7
 8013840:	4648      	mov	r0, r9
 8013842:	f000 ffb1 	bl	80147a8 <_Bfree>
 8013846:	4629      	mov	r1, r5
 8013848:	4648      	mov	r0, r9
 801384a:	f000 ffad 	bl	80147a8 <_Bfree>
 801384e:	e0b0      	b.n	80139b2 <_dtoa_r+0x622>
 8013850:	07e2      	lsls	r2, r4, #31
 8013852:	d505      	bpl.n	8013860 <_dtoa_r+0x4d0>
 8013854:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013858:	f7ec fea6 	bl	80005a8 <__aeabi_dmul>
 801385c:	3601      	adds	r6, #1
 801385e:	2301      	movs	r3, #1
 8013860:	1064      	asrs	r4, r4, #1
 8013862:	3508      	adds	r5, #8
 8013864:	e762      	b.n	801372c <_dtoa_r+0x39c>
 8013866:	2602      	movs	r6, #2
 8013868:	e765      	b.n	8013736 <_dtoa_r+0x3a6>
 801386a:	9c03      	ldr	r4, [sp, #12]
 801386c:	46b8      	mov	r8, r7
 801386e:	e784      	b.n	801377a <_dtoa_r+0x3ea>
 8013870:	4b27      	ldr	r3, [pc, #156]	@ (8013910 <_dtoa_r+0x580>)
 8013872:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013874:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013878:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801387c:	4454      	add	r4, sl
 801387e:	2900      	cmp	r1, #0
 8013880:	d054      	beq.n	801392c <_dtoa_r+0x59c>
 8013882:	4929      	ldr	r1, [pc, #164]	@ (8013928 <_dtoa_r+0x598>)
 8013884:	2000      	movs	r0, #0
 8013886:	f7ec ffb9 	bl	80007fc <__aeabi_ddiv>
 801388a:	4633      	mov	r3, r6
 801388c:	462a      	mov	r2, r5
 801388e:	f7ec fcd3 	bl	8000238 <__aeabi_dsub>
 8013892:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013896:	4656      	mov	r6, sl
 8013898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801389c:	f7ed f934 	bl	8000b08 <__aeabi_d2iz>
 80138a0:	4605      	mov	r5, r0
 80138a2:	f7ec fe17 	bl	80004d4 <__aeabi_i2d>
 80138a6:	4602      	mov	r2, r0
 80138a8:	460b      	mov	r3, r1
 80138aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80138ae:	f7ec fcc3 	bl	8000238 <__aeabi_dsub>
 80138b2:	3530      	adds	r5, #48	@ 0x30
 80138b4:	4602      	mov	r2, r0
 80138b6:	460b      	mov	r3, r1
 80138b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80138bc:	f806 5b01 	strb.w	r5, [r6], #1
 80138c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80138c4:	f7ed f8e2 	bl	8000a8c <__aeabi_dcmplt>
 80138c8:	2800      	cmp	r0, #0
 80138ca:	d172      	bne.n	80139b2 <_dtoa_r+0x622>
 80138cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138d0:	4911      	ldr	r1, [pc, #68]	@ (8013918 <_dtoa_r+0x588>)
 80138d2:	2000      	movs	r0, #0
 80138d4:	f7ec fcb0 	bl	8000238 <__aeabi_dsub>
 80138d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80138dc:	f7ed f8d6 	bl	8000a8c <__aeabi_dcmplt>
 80138e0:	2800      	cmp	r0, #0
 80138e2:	f040 80b4 	bne.w	8013a4e <_dtoa_r+0x6be>
 80138e6:	42a6      	cmp	r6, r4
 80138e8:	f43f af70 	beq.w	80137cc <_dtoa_r+0x43c>
 80138ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80138f0:	4b0a      	ldr	r3, [pc, #40]	@ (801391c <_dtoa_r+0x58c>)
 80138f2:	2200      	movs	r2, #0
 80138f4:	f7ec fe58 	bl	80005a8 <__aeabi_dmul>
 80138f8:	4b08      	ldr	r3, [pc, #32]	@ (801391c <_dtoa_r+0x58c>)
 80138fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80138fe:	2200      	movs	r2, #0
 8013900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013904:	f7ec fe50 	bl	80005a8 <__aeabi_dmul>
 8013908:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801390c:	e7c4      	b.n	8013898 <_dtoa_r+0x508>
 801390e:	bf00      	nop
 8013910:	08018868 	.word	0x08018868
 8013914:	08018840 	.word	0x08018840
 8013918:	3ff00000 	.word	0x3ff00000
 801391c:	40240000 	.word	0x40240000
 8013920:	401c0000 	.word	0x401c0000
 8013924:	40140000 	.word	0x40140000
 8013928:	3fe00000 	.word	0x3fe00000
 801392c:	4631      	mov	r1, r6
 801392e:	4628      	mov	r0, r5
 8013930:	f7ec fe3a 	bl	80005a8 <__aeabi_dmul>
 8013934:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013938:	9413      	str	r4, [sp, #76]	@ 0x4c
 801393a:	4656      	mov	r6, sl
 801393c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013940:	f7ed f8e2 	bl	8000b08 <__aeabi_d2iz>
 8013944:	4605      	mov	r5, r0
 8013946:	f7ec fdc5 	bl	80004d4 <__aeabi_i2d>
 801394a:	4602      	mov	r2, r0
 801394c:	460b      	mov	r3, r1
 801394e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013952:	f7ec fc71 	bl	8000238 <__aeabi_dsub>
 8013956:	3530      	adds	r5, #48	@ 0x30
 8013958:	f806 5b01 	strb.w	r5, [r6], #1
 801395c:	4602      	mov	r2, r0
 801395e:	460b      	mov	r3, r1
 8013960:	42a6      	cmp	r6, r4
 8013962:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013966:	f04f 0200 	mov.w	r2, #0
 801396a:	d124      	bne.n	80139b6 <_dtoa_r+0x626>
 801396c:	4baf      	ldr	r3, [pc, #700]	@ (8013c2c <_dtoa_r+0x89c>)
 801396e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013972:	f7ec fc63 	bl	800023c <__adddf3>
 8013976:	4602      	mov	r2, r0
 8013978:	460b      	mov	r3, r1
 801397a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801397e:	f7ed f8a3 	bl	8000ac8 <__aeabi_dcmpgt>
 8013982:	2800      	cmp	r0, #0
 8013984:	d163      	bne.n	8013a4e <_dtoa_r+0x6be>
 8013986:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801398a:	49a8      	ldr	r1, [pc, #672]	@ (8013c2c <_dtoa_r+0x89c>)
 801398c:	2000      	movs	r0, #0
 801398e:	f7ec fc53 	bl	8000238 <__aeabi_dsub>
 8013992:	4602      	mov	r2, r0
 8013994:	460b      	mov	r3, r1
 8013996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801399a:	f7ed f877 	bl	8000a8c <__aeabi_dcmplt>
 801399e:	2800      	cmp	r0, #0
 80139a0:	f43f af14 	beq.w	80137cc <_dtoa_r+0x43c>
 80139a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80139a6:	1e73      	subs	r3, r6, #1
 80139a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80139aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80139ae:	2b30      	cmp	r3, #48	@ 0x30
 80139b0:	d0f8      	beq.n	80139a4 <_dtoa_r+0x614>
 80139b2:	4647      	mov	r7, r8
 80139b4:	e03b      	b.n	8013a2e <_dtoa_r+0x69e>
 80139b6:	4b9e      	ldr	r3, [pc, #632]	@ (8013c30 <_dtoa_r+0x8a0>)
 80139b8:	f7ec fdf6 	bl	80005a8 <__aeabi_dmul>
 80139bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80139c0:	e7bc      	b.n	801393c <_dtoa_r+0x5ac>
 80139c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80139c6:	4656      	mov	r6, sl
 80139c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139cc:	4620      	mov	r0, r4
 80139ce:	4629      	mov	r1, r5
 80139d0:	f7ec ff14 	bl	80007fc <__aeabi_ddiv>
 80139d4:	f7ed f898 	bl	8000b08 <__aeabi_d2iz>
 80139d8:	4680      	mov	r8, r0
 80139da:	f7ec fd7b 	bl	80004d4 <__aeabi_i2d>
 80139de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139e2:	f7ec fde1 	bl	80005a8 <__aeabi_dmul>
 80139e6:	4602      	mov	r2, r0
 80139e8:	460b      	mov	r3, r1
 80139ea:	4620      	mov	r0, r4
 80139ec:	4629      	mov	r1, r5
 80139ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80139f2:	f7ec fc21 	bl	8000238 <__aeabi_dsub>
 80139f6:	f806 4b01 	strb.w	r4, [r6], #1
 80139fa:	9d03      	ldr	r5, [sp, #12]
 80139fc:	eba6 040a 	sub.w	r4, r6, sl
 8013a00:	42a5      	cmp	r5, r4
 8013a02:	4602      	mov	r2, r0
 8013a04:	460b      	mov	r3, r1
 8013a06:	d133      	bne.n	8013a70 <_dtoa_r+0x6e0>
 8013a08:	f7ec fc18 	bl	800023c <__adddf3>
 8013a0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a10:	4604      	mov	r4, r0
 8013a12:	460d      	mov	r5, r1
 8013a14:	f7ed f858 	bl	8000ac8 <__aeabi_dcmpgt>
 8013a18:	b9c0      	cbnz	r0, 8013a4c <_dtoa_r+0x6bc>
 8013a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a1e:	4620      	mov	r0, r4
 8013a20:	4629      	mov	r1, r5
 8013a22:	f7ed f829 	bl	8000a78 <__aeabi_dcmpeq>
 8013a26:	b110      	cbz	r0, 8013a2e <_dtoa_r+0x69e>
 8013a28:	f018 0f01 	tst.w	r8, #1
 8013a2c:	d10e      	bne.n	8013a4c <_dtoa_r+0x6bc>
 8013a2e:	9902      	ldr	r1, [sp, #8]
 8013a30:	4648      	mov	r0, r9
 8013a32:	f000 feb9 	bl	80147a8 <_Bfree>
 8013a36:	2300      	movs	r3, #0
 8013a38:	7033      	strb	r3, [r6, #0]
 8013a3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013a3c:	3701      	adds	r7, #1
 8013a3e:	601f      	str	r7, [r3, #0]
 8013a40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	f000 824b 	beq.w	8013ede <_dtoa_r+0xb4e>
 8013a48:	601e      	str	r6, [r3, #0]
 8013a4a:	e248      	b.n	8013ede <_dtoa_r+0xb4e>
 8013a4c:	46b8      	mov	r8, r7
 8013a4e:	4633      	mov	r3, r6
 8013a50:	461e      	mov	r6, r3
 8013a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a56:	2a39      	cmp	r2, #57	@ 0x39
 8013a58:	d106      	bne.n	8013a68 <_dtoa_r+0x6d8>
 8013a5a:	459a      	cmp	sl, r3
 8013a5c:	d1f8      	bne.n	8013a50 <_dtoa_r+0x6c0>
 8013a5e:	2230      	movs	r2, #48	@ 0x30
 8013a60:	f108 0801 	add.w	r8, r8, #1
 8013a64:	f88a 2000 	strb.w	r2, [sl]
 8013a68:	781a      	ldrb	r2, [r3, #0]
 8013a6a:	3201      	adds	r2, #1
 8013a6c:	701a      	strb	r2, [r3, #0]
 8013a6e:	e7a0      	b.n	80139b2 <_dtoa_r+0x622>
 8013a70:	4b6f      	ldr	r3, [pc, #444]	@ (8013c30 <_dtoa_r+0x8a0>)
 8013a72:	2200      	movs	r2, #0
 8013a74:	f7ec fd98 	bl	80005a8 <__aeabi_dmul>
 8013a78:	2200      	movs	r2, #0
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	4604      	mov	r4, r0
 8013a7e:	460d      	mov	r5, r1
 8013a80:	f7ec fffa 	bl	8000a78 <__aeabi_dcmpeq>
 8013a84:	2800      	cmp	r0, #0
 8013a86:	d09f      	beq.n	80139c8 <_dtoa_r+0x638>
 8013a88:	e7d1      	b.n	8013a2e <_dtoa_r+0x69e>
 8013a8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a8c:	2a00      	cmp	r2, #0
 8013a8e:	f000 80ea 	beq.w	8013c66 <_dtoa_r+0x8d6>
 8013a92:	9a07      	ldr	r2, [sp, #28]
 8013a94:	2a01      	cmp	r2, #1
 8013a96:	f300 80cd 	bgt.w	8013c34 <_dtoa_r+0x8a4>
 8013a9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013a9c:	2a00      	cmp	r2, #0
 8013a9e:	f000 80c1 	beq.w	8013c24 <_dtoa_r+0x894>
 8013aa2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013aa6:	9c08      	ldr	r4, [sp, #32]
 8013aa8:	9e00      	ldr	r6, [sp, #0]
 8013aaa:	9a00      	ldr	r2, [sp, #0]
 8013aac:	441a      	add	r2, r3
 8013aae:	9200      	str	r2, [sp, #0]
 8013ab0:	9a06      	ldr	r2, [sp, #24]
 8013ab2:	2101      	movs	r1, #1
 8013ab4:	441a      	add	r2, r3
 8013ab6:	4648      	mov	r0, r9
 8013ab8:	9206      	str	r2, [sp, #24]
 8013aba:	f000 ff29 	bl	8014910 <__i2b>
 8013abe:	4605      	mov	r5, r0
 8013ac0:	b166      	cbz	r6, 8013adc <_dtoa_r+0x74c>
 8013ac2:	9b06      	ldr	r3, [sp, #24]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	dd09      	ble.n	8013adc <_dtoa_r+0x74c>
 8013ac8:	42b3      	cmp	r3, r6
 8013aca:	9a00      	ldr	r2, [sp, #0]
 8013acc:	bfa8      	it	ge
 8013ace:	4633      	movge	r3, r6
 8013ad0:	1ad2      	subs	r2, r2, r3
 8013ad2:	9200      	str	r2, [sp, #0]
 8013ad4:	9a06      	ldr	r2, [sp, #24]
 8013ad6:	1af6      	subs	r6, r6, r3
 8013ad8:	1ad3      	subs	r3, r2, r3
 8013ada:	9306      	str	r3, [sp, #24]
 8013adc:	9b08      	ldr	r3, [sp, #32]
 8013ade:	b30b      	cbz	r3, 8013b24 <_dtoa_r+0x794>
 8013ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	f000 80c6 	beq.w	8013c74 <_dtoa_r+0x8e4>
 8013ae8:	2c00      	cmp	r4, #0
 8013aea:	f000 80c0 	beq.w	8013c6e <_dtoa_r+0x8de>
 8013aee:	4629      	mov	r1, r5
 8013af0:	4622      	mov	r2, r4
 8013af2:	4648      	mov	r0, r9
 8013af4:	f000 ffc4 	bl	8014a80 <__pow5mult>
 8013af8:	9a02      	ldr	r2, [sp, #8]
 8013afa:	4601      	mov	r1, r0
 8013afc:	4605      	mov	r5, r0
 8013afe:	4648      	mov	r0, r9
 8013b00:	f000 ff1c 	bl	801493c <__multiply>
 8013b04:	9902      	ldr	r1, [sp, #8]
 8013b06:	4680      	mov	r8, r0
 8013b08:	4648      	mov	r0, r9
 8013b0a:	f000 fe4d 	bl	80147a8 <_Bfree>
 8013b0e:	9b08      	ldr	r3, [sp, #32]
 8013b10:	1b1b      	subs	r3, r3, r4
 8013b12:	9308      	str	r3, [sp, #32]
 8013b14:	f000 80b1 	beq.w	8013c7a <_dtoa_r+0x8ea>
 8013b18:	9a08      	ldr	r2, [sp, #32]
 8013b1a:	4641      	mov	r1, r8
 8013b1c:	4648      	mov	r0, r9
 8013b1e:	f000 ffaf 	bl	8014a80 <__pow5mult>
 8013b22:	9002      	str	r0, [sp, #8]
 8013b24:	2101      	movs	r1, #1
 8013b26:	4648      	mov	r0, r9
 8013b28:	f000 fef2 	bl	8014910 <__i2b>
 8013b2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013b2e:	4604      	mov	r4, r0
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	f000 81d8 	beq.w	8013ee6 <_dtoa_r+0xb56>
 8013b36:	461a      	mov	r2, r3
 8013b38:	4601      	mov	r1, r0
 8013b3a:	4648      	mov	r0, r9
 8013b3c:	f000 ffa0 	bl	8014a80 <__pow5mult>
 8013b40:	9b07      	ldr	r3, [sp, #28]
 8013b42:	2b01      	cmp	r3, #1
 8013b44:	4604      	mov	r4, r0
 8013b46:	f300 809f 	bgt.w	8013c88 <_dtoa_r+0x8f8>
 8013b4a:	9b04      	ldr	r3, [sp, #16]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	f040 8097 	bne.w	8013c80 <_dtoa_r+0x8f0>
 8013b52:	9b05      	ldr	r3, [sp, #20]
 8013b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f040 8093 	bne.w	8013c84 <_dtoa_r+0x8f4>
 8013b5e:	9b05      	ldr	r3, [sp, #20]
 8013b60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013b64:	0d1b      	lsrs	r3, r3, #20
 8013b66:	051b      	lsls	r3, r3, #20
 8013b68:	b133      	cbz	r3, 8013b78 <_dtoa_r+0x7e8>
 8013b6a:	9b00      	ldr	r3, [sp, #0]
 8013b6c:	3301      	adds	r3, #1
 8013b6e:	9300      	str	r3, [sp, #0]
 8013b70:	9b06      	ldr	r3, [sp, #24]
 8013b72:	3301      	adds	r3, #1
 8013b74:	9306      	str	r3, [sp, #24]
 8013b76:	2301      	movs	r3, #1
 8013b78:	9308      	str	r3, [sp, #32]
 8013b7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	f000 81b8 	beq.w	8013ef2 <_dtoa_r+0xb62>
 8013b82:	6923      	ldr	r3, [r4, #16]
 8013b84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013b88:	6918      	ldr	r0, [r3, #16]
 8013b8a:	f000 fe75 	bl	8014878 <__hi0bits>
 8013b8e:	f1c0 0020 	rsb	r0, r0, #32
 8013b92:	9b06      	ldr	r3, [sp, #24]
 8013b94:	4418      	add	r0, r3
 8013b96:	f010 001f 	ands.w	r0, r0, #31
 8013b9a:	f000 8082 	beq.w	8013ca2 <_dtoa_r+0x912>
 8013b9e:	f1c0 0320 	rsb	r3, r0, #32
 8013ba2:	2b04      	cmp	r3, #4
 8013ba4:	dd73      	ble.n	8013c8e <_dtoa_r+0x8fe>
 8013ba6:	9b00      	ldr	r3, [sp, #0]
 8013ba8:	f1c0 001c 	rsb	r0, r0, #28
 8013bac:	4403      	add	r3, r0
 8013bae:	9300      	str	r3, [sp, #0]
 8013bb0:	9b06      	ldr	r3, [sp, #24]
 8013bb2:	4403      	add	r3, r0
 8013bb4:	4406      	add	r6, r0
 8013bb6:	9306      	str	r3, [sp, #24]
 8013bb8:	9b00      	ldr	r3, [sp, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	dd05      	ble.n	8013bca <_dtoa_r+0x83a>
 8013bbe:	9902      	ldr	r1, [sp, #8]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	4648      	mov	r0, r9
 8013bc4:	f000 ffb6 	bl	8014b34 <__lshift>
 8013bc8:	9002      	str	r0, [sp, #8]
 8013bca:	9b06      	ldr	r3, [sp, #24]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	dd05      	ble.n	8013bdc <_dtoa_r+0x84c>
 8013bd0:	4621      	mov	r1, r4
 8013bd2:	461a      	mov	r2, r3
 8013bd4:	4648      	mov	r0, r9
 8013bd6:	f000 ffad 	bl	8014b34 <__lshift>
 8013bda:	4604      	mov	r4, r0
 8013bdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d061      	beq.n	8013ca6 <_dtoa_r+0x916>
 8013be2:	9802      	ldr	r0, [sp, #8]
 8013be4:	4621      	mov	r1, r4
 8013be6:	f001 f811 	bl	8014c0c <__mcmp>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	da5b      	bge.n	8013ca6 <_dtoa_r+0x916>
 8013bee:	2300      	movs	r3, #0
 8013bf0:	9902      	ldr	r1, [sp, #8]
 8013bf2:	220a      	movs	r2, #10
 8013bf4:	4648      	mov	r0, r9
 8013bf6:	f000 fdf9 	bl	80147ec <__multadd>
 8013bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bfc:	9002      	str	r0, [sp, #8]
 8013bfe:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	f000 8177 	beq.w	8013ef6 <_dtoa_r+0xb66>
 8013c08:	4629      	mov	r1, r5
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	220a      	movs	r2, #10
 8013c0e:	4648      	mov	r0, r9
 8013c10:	f000 fdec 	bl	80147ec <__multadd>
 8013c14:	f1bb 0f00 	cmp.w	fp, #0
 8013c18:	4605      	mov	r5, r0
 8013c1a:	dc6f      	bgt.n	8013cfc <_dtoa_r+0x96c>
 8013c1c:	9b07      	ldr	r3, [sp, #28]
 8013c1e:	2b02      	cmp	r3, #2
 8013c20:	dc49      	bgt.n	8013cb6 <_dtoa_r+0x926>
 8013c22:	e06b      	b.n	8013cfc <_dtoa_r+0x96c>
 8013c24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013c26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013c2a:	e73c      	b.n	8013aa6 <_dtoa_r+0x716>
 8013c2c:	3fe00000 	.word	0x3fe00000
 8013c30:	40240000 	.word	0x40240000
 8013c34:	9b03      	ldr	r3, [sp, #12]
 8013c36:	1e5c      	subs	r4, r3, #1
 8013c38:	9b08      	ldr	r3, [sp, #32]
 8013c3a:	42a3      	cmp	r3, r4
 8013c3c:	db09      	blt.n	8013c52 <_dtoa_r+0x8c2>
 8013c3e:	1b1c      	subs	r4, r3, r4
 8013c40:	9b03      	ldr	r3, [sp, #12]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	f6bf af30 	bge.w	8013aa8 <_dtoa_r+0x718>
 8013c48:	9b00      	ldr	r3, [sp, #0]
 8013c4a:	9a03      	ldr	r2, [sp, #12]
 8013c4c:	1a9e      	subs	r6, r3, r2
 8013c4e:	2300      	movs	r3, #0
 8013c50:	e72b      	b.n	8013aaa <_dtoa_r+0x71a>
 8013c52:	9b08      	ldr	r3, [sp, #32]
 8013c54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013c56:	9408      	str	r4, [sp, #32]
 8013c58:	1ae3      	subs	r3, r4, r3
 8013c5a:	441a      	add	r2, r3
 8013c5c:	9e00      	ldr	r6, [sp, #0]
 8013c5e:	9b03      	ldr	r3, [sp, #12]
 8013c60:	920d      	str	r2, [sp, #52]	@ 0x34
 8013c62:	2400      	movs	r4, #0
 8013c64:	e721      	b.n	8013aaa <_dtoa_r+0x71a>
 8013c66:	9c08      	ldr	r4, [sp, #32]
 8013c68:	9e00      	ldr	r6, [sp, #0]
 8013c6a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8013c6c:	e728      	b.n	8013ac0 <_dtoa_r+0x730>
 8013c6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013c72:	e751      	b.n	8013b18 <_dtoa_r+0x788>
 8013c74:	9a08      	ldr	r2, [sp, #32]
 8013c76:	9902      	ldr	r1, [sp, #8]
 8013c78:	e750      	b.n	8013b1c <_dtoa_r+0x78c>
 8013c7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8013c7e:	e751      	b.n	8013b24 <_dtoa_r+0x794>
 8013c80:	2300      	movs	r3, #0
 8013c82:	e779      	b.n	8013b78 <_dtoa_r+0x7e8>
 8013c84:	9b04      	ldr	r3, [sp, #16]
 8013c86:	e777      	b.n	8013b78 <_dtoa_r+0x7e8>
 8013c88:	2300      	movs	r3, #0
 8013c8a:	9308      	str	r3, [sp, #32]
 8013c8c:	e779      	b.n	8013b82 <_dtoa_r+0x7f2>
 8013c8e:	d093      	beq.n	8013bb8 <_dtoa_r+0x828>
 8013c90:	9a00      	ldr	r2, [sp, #0]
 8013c92:	331c      	adds	r3, #28
 8013c94:	441a      	add	r2, r3
 8013c96:	9200      	str	r2, [sp, #0]
 8013c98:	9a06      	ldr	r2, [sp, #24]
 8013c9a:	441a      	add	r2, r3
 8013c9c:	441e      	add	r6, r3
 8013c9e:	9206      	str	r2, [sp, #24]
 8013ca0:	e78a      	b.n	8013bb8 <_dtoa_r+0x828>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	e7f4      	b.n	8013c90 <_dtoa_r+0x900>
 8013ca6:	9b03      	ldr	r3, [sp, #12]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	46b8      	mov	r8, r7
 8013cac:	dc20      	bgt.n	8013cf0 <_dtoa_r+0x960>
 8013cae:	469b      	mov	fp, r3
 8013cb0:	9b07      	ldr	r3, [sp, #28]
 8013cb2:	2b02      	cmp	r3, #2
 8013cb4:	dd1e      	ble.n	8013cf4 <_dtoa_r+0x964>
 8013cb6:	f1bb 0f00 	cmp.w	fp, #0
 8013cba:	f47f adb1 	bne.w	8013820 <_dtoa_r+0x490>
 8013cbe:	4621      	mov	r1, r4
 8013cc0:	465b      	mov	r3, fp
 8013cc2:	2205      	movs	r2, #5
 8013cc4:	4648      	mov	r0, r9
 8013cc6:	f000 fd91 	bl	80147ec <__multadd>
 8013cca:	4601      	mov	r1, r0
 8013ccc:	4604      	mov	r4, r0
 8013cce:	9802      	ldr	r0, [sp, #8]
 8013cd0:	f000 ff9c 	bl	8014c0c <__mcmp>
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	f77f ada3 	ble.w	8013820 <_dtoa_r+0x490>
 8013cda:	4656      	mov	r6, sl
 8013cdc:	2331      	movs	r3, #49	@ 0x31
 8013cde:	f806 3b01 	strb.w	r3, [r6], #1
 8013ce2:	f108 0801 	add.w	r8, r8, #1
 8013ce6:	e59f      	b.n	8013828 <_dtoa_r+0x498>
 8013ce8:	9c03      	ldr	r4, [sp, #12]
 8013cea:	46b8      	mov	r8, r7
 8013cec:	4625      	mov	r5, r4
 8013cee:	e7f4      	b.n	8013cda <_dtoa_r+0x94a>
 8013cf0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	f000 8101 	beq.w	8013efe <_dtoa_r+0xb6e>
 8013cfc:	2e00      	cmp	r6, #0
 8013cfe:	dd05      	ble.n	8013d0c <_dtoa_r+0x97c>
 8013d00:	4629      	mov	r1, r5
 8013d02:	4632      	mov	r2, r6
 8013d04:	4648      	mov	r0, r9
 8013d06:	f000 ff15 	bl	8014b34 <__lshift>
 8013d0a:	4605      	mov	r5, r0
 8013d0c:	9b08      	ldr	r3, [sp, #32]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d05c      	beq.n	8013dcc <_dtoa_r+0xa3c>
 8013d12:	6869      	ldr	r1, [r5, #4]
 8013d14:	4648      	mov	r0, r9
 8013d16:	f000 fd07 	bl	8014728 <_Balloc>
 8013d1a:	4606      	mov	r6, r0
 8013d1c:	b928      	cbnz	r0, 8013d2a <_dtoa_r+0x99a>
 8013d1e:	4b82      	ldr	r3, [pc, #520]	@ (8013f28 <_dtoa_r+0xb98>)
 8013d20:	4602      	mov	r2, r0
 8013d22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013d26:	f7ff bb4a 	b.w	80133be <_dtoa_r+0x2e>
 8013d2a:	692a      	ldr	r2, [r5, #16]
 8013d2c:	3202      	adds	r2, #2
 8013d2e:	0092      	lsls	r2, r2, #2
 8013d30:	f105 010c 	add.w	r1, r5, #12
 8013d34:	300c      	adds	r0, #12
 8013d36:	f001 fa9f 	bl	8015278 <memcpy>
 8013d3a:	2201      	movs	r2, #1
 8013d3c:	4631      	mov	r1, r6
 8013d3e:	4648      	mov	r0, r9
 8013d40:	f000 fef8 	bl	8014b34 <__lshift>
 8013d44:	f10a 0301 	add.w	r3, sl, #1
 8013d48:	9300      	str	r3, [sp, #0]
 8013d4a:	eb0a 030b 	add.w	r3, sl, fp
 8013d4e:	9308      	str	r3, [sp, #32]
 8013d50:	9b04      	ldr	r3, [sp, #16]
 8013d52:	f003 0301 	and.w	r3, r3, #1
 8013d56:	462f      	mov	r7, r5
 8013d58:	9306      	str	r3, [sp, #24]
 8013d5a:	4605      	mov	r5, r0
 8013d5c:	9b00      	ldr	r3, [sp, #0]
 8013d5e:	9802      	ldr	r0, [sp, #8]
 8013d60:	4621      	mov	r1, r4
 8013d62:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8013d66:	f7ff fa8b 	bl	8013280 <quorem>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	3330      	adds	r3, #48	@ 0x30
 8013d6e:	9003      	str	r0, [sp, #12]
 8013d70:	4639      	mov	r1, r7
 8013d72:	9802      	ldr	r0, [sp, #8]
 8013d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d76:	f000 ff49 	bl	8014c0c <__mcmp>
 8013d7a:	462a      	mov	r2, r5
 8013d7c:	9004      	str	r0, [sp, #16]
 8013d7e:	4621      	mov	r1, r4
 8013d80:	4648      	mov	r0, r9
 8013d82:	f000 ff5f 	bl	8014c44 <__mdiff>
 8013d86:	68c2      	ldr	r2, [r0, #12]
 8013d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d8a:	4606      	mov	r6, r0
 8013d8c:	bb02      	cbnz	r2, 8013dd0 <_dtoa_r+0xa40>
 8013d8e:	4601      	mov	r1, r0
 8013d90:	9802      	ldr	r0, [sp, #8]
 8013d92:	f000 ff3b 	bl	8014c0c <__mcmp>
 8013d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d98:	4602      	mov	r2, r0
 8013d9a:	4631      	mov	r1, r6
 8013d9c:	4648      	mov	r0, r9
 8013d9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8013da2:	f000 fd01 	bl	80147a8 <_Bfree>
 8013da6:	9b07      	ldr	r3, [sp, #28]
 8013da8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013daa:	9e00      	ldr	r6, [sp, #0]
 8013dac:	ea42 0103 	orr.w	r1, r2, r3
 8013db0:	9b06      	ldr	r3, [sp, #24]
 8013db2:	4319      	orrs	r1, r3
 8013db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013db6:	d10d      	bne.n	8013dd4 <_dtoa_r+0xa44>
 8013db8:	2b39      	cmp	r3, #57	@ 0x39
 8013dba:	d027      	beq.n	8013e0c <_dtoa_r+0xa7c>
 8013dbc:	9a04      	ldr	r2, [sp, #16]
 8013dbe:	2a00      	cmp	r2, #0
 8013dc0:	dd01      	ble.n	8013dc6 <_dtoa_r+0xa36>
 8013dc2:	9b03      	ldr	r3, [sp, #12]
 8013dc4:	3331      	adds	r3, #49	@ 0x31
 8013dc6:	f88b 3000 	strb.w	r3, [fp]
 8013dca:	e52e      	b.n	801382a <_dtoa_r+0x49a>
 8013dcc:	4628      	mov	r0, r5
 8013dce:	e7b9      	b.n	8013d44 <_dtoa_r+0x9b4>
 8013dd0:	2201      	movs	r2, #1
 8013dd2:	e7e2      	b.n	8013d9a <_dtoa_r+0xa0a>
 8013dd4:	9904      	ldr	r1, [sp, #16]
 8013dd6:	2900      	cmp	r1, #0
 8013dd8:	db04      	blt.n	8013de4 <_dtoa_r+0xa54>
 8013dda:	9807      	ldr	r0, [sp, #28]
 8013ddc:	4301      	orrs	r1, r0
 8013dde:	9806      	ldr	r0, [sp, #24]
 8013de0:	4301      	orrs	r1, r0
 8013de2:	d120      	bne.n	8013e26 <_dtoa_r+0xa96>
 8013de4:	2a00      	cmp	r2, #0
 8013de6:	ddee      	ble.n	8013dc6 <_dtoa_r+0xa36>
 8013de8:	9902      	ldr	r1, [sp, #8]
 8013dea:	9300      	str	r3, [sp, #0]
 8013dec:	2201      	movs	r2, #1
 8013dee:	4648      	mov	r0, r9
 8013df0:	f000 fea0 	bl	8014b34 <__lshift>
 8013df4:	4621      	mov	r1, r4
 8013df6:	9002      	str	r0, [sp, #8]
 8013df8:	f000 ff08 	bl	8014c0c <__mcmp>
 8013dfc:	2800      	cmp	r0, #0
 8013dfe:	9b00      	ldr	r3, [sp, #0]
 8013e00:	dc02      	bgt.n	8013e08 <_dtoa_r+0xa78>
 8013e02:	d1e0      	bne.n	8013dc6 <_dtoa_r+0xa36>
 8013e04:	07da      	lsls	r2, r3, #31
 8013e06:	d5de      	bpl.n	8013dc6 <_dtoa_r+0xa36>
 8013e08:	2b39      	cmp	r3, #57	@ 0x39
 8013e0a:	d1da      	bne.n	8013dc2 <_dtoa_r+0xa32>
 8013e0c:	2339      	movs	r3, #57	@ 0x39
 8013e0e:	f88b 3000 	strb.w	r3, [fp]
 8013e12:	4633      	mov	r3, r6
 8013e14:	461e      	mov	r6, r3
 8013e16:	3b01      	subs	r3, #1
 8013e18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013e1c:	2a39      	cmp	r2, #57	@ 0x39
 8013e1e:	d04e      	beq.n	8013ebe <_dtoa_r+0xb2e>
 8013e20:	3201      	adds	r2, #1
 8013e22:	701a      	strb	r2, [r3, #0]
 8013e24:	e501      	b.n	801382a <_dtoa_r+0x49a>
 8013e26:	2a00      	cmp	r2, #0
 8013e28:	dd03      	ble.n	8013e32 <_dtoa_r+0xaa2>
 8013e2a:	2b39      	cmp	r3, #57	@ 0x39
 8013e2c:	d0ee      	beq.n	8013e0c <_dtoa_r+0xa7c>
 8013e2e:	3301      	adds	r3, #1
 8013e30:	e7c9      	b.n	8013dc6 <_dtoa_r+0xa36>
 8013e32:	9a00      	ldr	r2, [sp, #0]
 8013e34:	9908      	ldr	r1, [sp, #32]
 8013e36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013e3a:	428a      	cmp	r2, r1
 8013e3c:	d028      	beq.n	8013e90 <_dtoa_r+0xb00>
 8013e3e:	9902      	ldr	r1, [sp, #8]
 8013e40:	2300      	movs	r3, #0
 8013e42:	220a      	movs	r2, #10
 8013e44:	4648      	mov	r0, r9
 8013e46:	f000 fcd1 	bl	80147ec <__multadd>
 8013e4a:	42af      	cmp	r7, r5
 8013e4c:	9002      	str	r0, [sp, #8]
 8013e4e:	f04f 0300 	mov.w	r3, #0
 8013e52:	f04f 020a 	mov.w	r2, #10
 8013e56:	4639      	mov	r1, r7
 8013e58:	4648      	mov	r0, r9
 8013e5a:	d107      	bne.n	8013e6c <_dtoa_r+0xadc>
 8013e5c:	f000 fcc6 	bl	80147ec <__multadd>
 8013e60:	4607      	mov	r7, r0
 8013e62:	4605      	mov	r5, r0
 8013e64:	9b00      	ldr	r3, [sp, #0]
 8013e66:	3301      	adds	r3, #1
 8013e68:	9300      	str	r3, [sp, #0]
 8013e6a:	e777      	b.n	8013d5c <_dtoa_r+0x9cc>
 8013e6c:	f000 fcbe 	bl	80147ec <__multadd>
 8013e70:	4629      	mov	r1, r5
 8013e72:	4607      	mov	r7, r0
 8013e74:	2300      	movs	r3, #0
 8013e76:	220a      	movs	r2, #10
 8013e78:	4648      	mov	r0, r9
 8013e7a:	f000 fcb7 	bl	80147ec <__multadd>
 8013e7e:	4605      	mov	r5, r0
 8013e80:	e7f0      	b.n	8013e64 <_dtoa_r+0xad4>
 8013e82:	f1bb 0f00 	cmp.w	fp, #0
 8013e86:	bfcc      	ite	gt
 8013e88:	465e      	movgt	r6, fp
 8013e8a:	2601      	movle	r6, #1
 8013e8c:	4456      	add	r6, sl
 8013e8e:	2700      	movs	r7, #0
 8013e90:	9902      	ldr	r1, [sp, #8]
 8013e92:	9300      	str	r3, [sp, #0]
 8013e94:	2201      	movs	r2, #1
 8013e96:	4648      	mov	r0, r9
 8013e98:	f000 fe4c 	bl	8014b34 <__lshift>
 8013e9c:	4621      	mov	r1, r4
 8013e9e:	9002      	str	r0, [sp, #8]
 8013ea0:	f000 feb4 	bl	8014c0c <__mcmp>
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	dcb4      	bgt.n	8013e12 <_dtoa_r+0xa82>
 8013ea8:	d102      	bne.n	8013eb0 <_dtoa_r+0xb20>
 8013eaa:	9b00      	ldr	r3, [sp, #0]
 8013eac:	07db      	lsls	r3, r3, #31
 8013eae:	d4b0      	bmi.n	8013e12 <_dtoa_r+0xa82>
 8013eb0:	4633      	mov	r3, r6
 8013eb2:	461e      	mov	r6, r3
 8013eb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013eb8:	2a30      	cmp	r2, #48	@ 0x30
 8013eba:	d0fa      	beq.n	8013eb2 <_dtoa_r+0xb22>
 8013ebc:	e4b5      	b.n	801382a <_dtoa_r+0x49a>
 8013ebe:	459a      	cmp	sl, r3
 8013ec0:	d1a8      	bne.n	8013e14 <_dtoa_r+0xa84>
 8013ec2:	2331      	movs	r3, #49	@ 0x31
 8013ec4:	f108 0801 	add.w	r8, r8, #1
 8013ec8:	f88a 3000 	strb.w	r3, [sl]
 8013ecc:	e4ad      	b.n	801382a <_dtoa_r+0x49a>
 8013ece:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013ed0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8013f2c <_dtoa_r+0xb9c>
 8013ed4:	b11b      	cbz	r3, 8013ede <_dtoa_r+0xb4e>
 8013ed6:	f10a 0308 	add.w	r3, sl, #8
 8013eda:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013edc:	6013      	str	r3, [r2, #0]
 8013ede:	4650      	mov	r0, sl
 8013ee0:	b017      	add	sp, #92	@ 0x5c
 8013ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ee6:	9b07      	ldr	r3, [sp, #28]
 8013ee8:	2b01      	cmp	r3, #1
 8013eea:	f77f ae2e 	ble.w	8013b4a <_dtoa_r+0x7ba>
 8013eee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013ef0:	9308      	str	r3, [sp, #32]
 8013ef2:	2001      	movs	r0, #1
 8013ef4:	e64d      	b.n	8013b92 <_dtoa_r+0x802>
 8013ef6:	f1bb 0f00 	cmp.w	fp, #0
 8013efa:	f77f aed9 	ble.w	8013cb0 <_dtoa_r+0x920>
 8013efe:	4656      	mov	r6, sl
 8013f00:	9802      	ldr	r0, [sp, #8]
 8013f02:	4621      	mov	r1, r4
 8013f04:	f7ff f9bc 	bl	8013280 <quorem>
 8013f08:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8013f0c:	f806 3b01 	strb.w	r3, [r6], #1
 8013f10:	eba6 020a 	sub.w	r2, r6, sl
 8013f14:	4593      	cmp	fp, r2
 8013f16:	ddb4      	ble.n	8013e82 <_dtoa_r+0xaf2>
 8013f18:	9902      	ldr	r1, [sp, #8]
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	220a      	movs	r2, #10
 8013f1e:	4648      	mov	r0, r9
 8013f20:	f000 fc64 	bl	80147ec <__multadd>
 8013f24:	9002      	str	r0, [sp, #8]
 8013f26:	e7eb      	b.n	8013f00 <_dtoa_r+0xb70>
 8013f28:	0801876c 	.word	0x0801876c
 8013f2c:	080186f0 	.word	0x080186f0

08013f30 <__ssputs_r>:
 8013f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f34:	688e      	ldr	r6, [r1, #8]
 8013f36:	461f      	mov	r7, r3
 8013f38:	42be      	cmp	r6, r7
 8013f3a:	680b      	ldr	r3, [r1, #0]
 8013f3c:	4682      	mov	sl, r0
 8013f3e:	460c      	mov	r4, r1
 8013f40:	4690      	mov	r8, r2
 8013f42:	d82d      	bhi.n	8013fa0 <__ssputs_r+0x70>
 8013f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013f48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013f4c:	d026      	beq.n	8013f9c <__ssputs_r+0x6c>
 8013f4e:	6965      	ldr	r5, [r4, #20]
 8013f50:	6909      	ldr	r1, [r1, #16]
 8013f52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f56:	eba3 0901 	sub.w	r9, r3, r1
 8013f5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013f5e:	1c7b      	adds	r3, r7, #1
 8013f60:	444b      	add	r3, r9
 8013f62:	106d      	asrs	r5, r5, #1
 8013f64:	429d      	cmp	r5, r3
 8013f66:	bf38      	it	cc
 8013f68:	461d      	movcc	r5, r3
 8013f6a:	0553      	lsls	r3, r2, #21
 8013f6c:	d527      	bpl.n	8013fbe <__ssputs_r+0x8e>
 8013f6e:	4629      	mov	r1, r5
 8013f70:	f000 faa2 	bl	80144b8 <_malloc_r>
 8013f74:	4606      	mov	r6, r0
 8013f76:	b360      	cbz	r0, 8013fd2 <__ssputs_r+0xa2>
 8013f78:	6921      	ldr	r1, [r4, #16]
 8013f7a:	464a      	mov	r2, r9
 8013f7c:	f001 f97c 	bl	8015278 <memcpy>
 8013f80:	89a3      	ldrh	r3, [r4, #12]
 8013f82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f8a:	81a3      	strh	r3, [r4, #12]
 8013f8c:	6126      	str	r6, [r4, #16]
 8013f8e:	6165      	str	r5, [r4, #20]
 8013f90:	444e      	add	r6, r9
 8013f92:	eba5 0509 	sub.w	r5, r5, r9
 8013f96:	6026      	str	r6, [r4, #0]
 8013f98:	60a5      	str	r5, [r4, #8]
 8013f9a:	463e      	mov	r6, r7
 8013f9c:	42be      	cmp	r6, r7
 8013f9e:	d900      	bls.n	8013fa2 <__ssputs_r+0x72>
 8013fa0:	463e      	mov	r6, r7
 8013fa2:	6820      	ldr	r0, [r4, #0]
 8013fa4:	4632      	mov	r2, r6
 8013fa6:	4641      	mov	r1, r8
 8013fa8:	f001 f8d4 	bl	8015154 <memmove>
 8013fac:	68a3      	ldr	r3, [r4, #8]
 8013fae:	1b9b      	subs	r3, r3, r6
 8013fb0:	60a3      	str	r3, [r4, #8]
 8013fb2:	6823      	ldr	r3, [r4, #0]
 8013fb4:	4433      	add	r3, r6
 8013fb6:	6023      	str	r3, [r4, #0]
 8013fb8:	2000      	movs	r0, #0
 8013fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fbe:	462a      	mov	r2, r5
 8013fc0:	f000 ff6f 	bl	8014ea2 <_realloc_r>
 8013fc4:	4606      	mov	r6, r0
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	d1e0      	bne.n	8013f8c <__ssputs_r+0x5c>
 8013fca:	6921      	ldr	r1, [r4, #16]
 8013fcc:	4650      	mov	r0, sl
 8013fce:	f001 f993 	bl	80152f8 <_free_r>
 8013fd2:	230c      	movs	r3, #12
 8013fd4:	f8ca 3000 	str.w	r3, [sl]
 8013fd8:	89a3      	ldrh	r3, [r4, #12]
 8013fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013fde:	81a3      	strh	r3, [r4, #12]
 8013fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013fe4:	e7e9      	b.n	8013fba <__ssputs_r+0x8a>
	...

08013fe8 <_svfiprintf_r>:
 8013fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fec:	4698      	mov	r8, r3
 8013fee:	898b      	ldrh	r3, [r1, #12]
 8013ff0:	061b      	lsls	r3, r3, #24
 8013ff2:	b09d      	sub	sp, #116	@ 0x74
 8013ff4:	4607      	mov	r7, r0
 8013ff6:	460d      	mov	r5, r1
 8013ff8:	4614      	mov	r4, r2
 8013ffa:	d510      	bpl.n	801401e <_svfiprintf_r+0x36>
 8013ffc:	690b      	ldr	r3, [r1, #16]
 8013ffe:	b973      	cbnz	r3, 801401e <_svfiprintf_r+0x36>
 8014000:	2140      	movs	r1, #64	@ 0x40
 8014002:	f000 fa59 	bl	80144b8 <_malloc_r>
 8014006:	6028      	str	r0, [r5, #0]
 8014008:	6128      	str	r0, [r5, #16]
 801400a:	b930      	cbnz	r0, 801401a <_svfiprintf_r+0x32>
 801400c:	230c      	movs	r3, #12
 801400e:	603b      	str	r3, [r7, #0]
 8014010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014014:	b01d      	add	sp, #116	@ 0x74
 8014016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801401a:	2340      	movs	r3, #64	@ 0x40
 801401c:	616b      	str	r3, [r5, #20]
 801401e:	2300      	movs	r3, #0
 8014020:	9309      	str	r3, [sp, #36]	@ 0x24
 8014022:	2320      	movs	r3, #32
 8014024:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014028:	f8cd 800c 	str.w	r8, [sp, #12]
 801402c:	2330      	movs	r3, #48	@ 0x30
 801402e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80141cc <_svfiprintf_r+0x1e4>
 8014032:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014036:	f04f 0901 	mov.w	r9, #1
 801403a:	4623      	mov	r3, r4
 801403c:	469a      	mov	sl, r3
 801403e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014042:	b10a      	cbz	r2, 8014048 <_svfiprintf_r+0x60>
 8014044:	2a25      	cmp	r2, #37	@ 0x25
 8014046:	d1f9      	bne.n	801403c <_svfiprintf_r+0x54>
 8014048:	ebba 0b04 	subs.w	fp, sl, r4
 801404c:	d00b      	beq.n	8014066 <_svfiprintf_r+0x7e>
 801404e:	465b      	mov	r3, fp
 8014050:	4622      	mov	r2, r4
 8014052:	4629      	mov	r1, r5
 8014054:	4638      	mov	r0, r7
 8014056:	f7ff ff6b 	bl	8013f30 <__ssputs_r>
 801405a:	3001      	adds	r0, #1
 801405c:	f000 80a7 	beq.w	80141ae <_svfiprintf_r+0x1c6>
 8014060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014062:	445a      	add	r2, fp
 8014064:	9209      	str	r2, [sp, #36]	@ 0x24
 8014066:	f89a 3000 	ldrb.w	r3, [sl]
 801406a:	2b00      	cmp	r3, #0
 801406c:	f000 809f 	beq.w	80141ae <_svfiprintf_r+0x1c6>
 8014070:	2300      	movs	r3, #0
 8014072:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801407a:	f10a 0a01 	add.w	sl, sl, #1
 801407e:	9304      	str	r3, [sp, #16]
 8014080:	9307      	str	r3, [sp, #28]
 8014082:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014086:	931a      	str	r3, [sp, #104]	@ 0x68
 8014088:	4654      	mov	r4, sl
 801408a:	2205      	movs	r2, #5
 801408c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014090:	484e      	ldr	r0, [pc, #312]	@ (80141cc <_svfiprintf_r+0x1e4>)
 8014092:	f7ec f875 	bl	8000180 <memchr>
 8014096:	9a04      	ldr	r2, [sp, #16]
 8014098:	b9d8      	cbnz	r0, 80140d2 <_svfiprintf_r+0xea>
 801409a:	06d0      	lsls	r0, r2, #27
 801409c:	bf44      	itt	mi
 801409e:	2320      	movmi	r3, #32
 80140a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80140a4:	0711      	lsls	r1, r2, #28
 80140a6:	bf44      	itt	mi
 80140a8:	232b      	movmi	r3, #43	@ 0x2b
 80140aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80140ae:	f89a 3000 	ldrb.w	r3, [sl]
 80140b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80140b4:	d015      	beq.n	80140e2 <_svfiprintf_r+0xfa>
 80140b6:	9a07      	ldr	r2, [sp, #28]
 80140b8:	4654      	mov	r4, sl
 80140ba:	2000      	movs	r0, #0
 80140bc:	f04f 0c0a 	mov.w	ip, #10
 80140c0:	4621      	mov	r1, r4
 80140c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140c6:	3b30      	subs	r3, #48	@ 0x30
 80140c8:	2b09      	cmp	r3, #9
 80140ca:	d94b      	bls.n	8014164 <_svfiprintf_r+0x17c>
 80140cc:	b1b0      	cbz	r0, 80140fc <_svfiprintf_r+0x114>
 80140ce:	9207      	str	r2, [sp, #28]
 80140d0:	e014      	b.n	80140fc <_svfiprintf_r+0x114>
 80140d2:	eba0 0308 	sub.w	r3, r0, r8
 80140d6:	fa09 f303 	lsl.w	r3, r9, r3
 80140da:	4313      	orrs	r3, r2
 80140dc:	9304      	str	r3, [sp, #16]
 80140de:	46a2      	mov	sl, r4
 80140e0:	e7d2      	b.n	8014088 <_svfiprintf_r+0xa0>
 80140e2:	9b03      	ldr	r3, [sp, #12]
 80140e4:	1d19      	adds	r1, r3, #4
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	9103      	str	r1, [sp, #12]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	bfbb      	ittet	lt
 80140ee:	425b      	neglt	r3, r3
 80140f0:	f042 0202 	orrlt.w	r2, r2, #2
 80140f4:	9307      	strge	r3, [sp, #28]
 80140f6:	9307      	strlt	r3, [sp, #28]
 80140f8:	bfb8      	it	lt
 80140fa:	9204      	strlt	r2, [sp, #16]
 80140fc:	7823      	ldrb	r3, [r4, #0]
 80140fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8014100:	d10a      	bne.n	8014118 <_svfiprintf_r+0x130>
 8014102:	7863      	ldrb	r3, [r4, #1]
 8014104:	2b2a      	cmp	r3, #42	@ 0x2a
 8014106:	d132      	bne.n	801416e <_svfiprintf_r+0x186>
 8014108:	9b03      	ldr	r3, [sp, #12]
 801410a:	1d1a      	adds	r2, r3, #4
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	9203      	str	r2, [sp, #12]
 8014110:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014114:	3402      	adds	r4, #2
 8014116:	9305      	str	r3, [sp, #20]
 8014118:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80141dc <_svfiprintf_r+0x1f4>
 801411c:	7821      	ldrb	r1, [r4, #0]
 801411e:	2203      	movs	r2, #3
 8014120:	4650      	mov	r0, sl
 8014122:	f7ec f82d 	bl	8000180 <memchr>
 8014126:	b138      	cbz	r0, 8014138 <_svfiprintf_r+0x150>
 8014128:	9b04      	ldr	r3, [sp, #16]
 801412a:	eba0 000a 	sub.w	r0, r0, sl
 801412e:	2240      	movs	r2, #64	@ 0x40
 8014130:	4082      	lsls	r2, r0
 8014132:	4313      	orrs	r3, r2
 8014134:	3401      	adds	r4, #1
 8014136:	9304      	str	r3, [sp, #16]
 8014138:	f814 1b01 	ldrb.w	r1, [r4], #1
 801413c:	4824      	ldr	r0, [pc, #144]	@ (80141d0 <_svfiprintf_r+0x1e8>)
 801413e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014142:	2206      	movs	r2, #6
 8014144:	f7ec f81c 	bl	8000180 <memchr>
 8014148:	2800      	cmp	r0, #0
 801414a:	d036      	beq.n	80141ba <_svfiprintf_r+0x1d2>
 801414c:	4b21      	ldr	r3, [pc, #132]	@ (80141d4 <_svfiprintf_r+0x1ec>)
 801414e:	bb1b      	cbnz	r3, 8014198 <_svfiprintf_r+0x1b0>
 8014150:	9b03      	ldr	r3, [sp, #12]
 8014152:	3307      	adds	r3, #7
 8014154:	f023 0307 	bic.w	r3, r3, #7
 8014158:	3308      	adds	r3, #8
 801415a:	9303      	str	r3, [sp, #12]
 801415c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801415e:	4433      	add	r3, r6
 8014160:	9309      	str	r3, [sp, #36]	@ 0x24
 8014162:	e76a      	b.n	801403a <_svfiprintf_r+0x52>
 8014164:	fb0c 3202 	mla	r2, ip, r2, r3
 8014168:	460c      	mov	r4, r1
 801416a:	2001      	movs	r0, #1
 801416c:	e7a8      	b.n	80140c0 <_svfiprintf_r+0xd8>
 801416e:	2300      	movs	r3, #0
 8014170:	3401      	adds	r4, #1
 8014172:	9305      	str	r3, [sp, #20]
 8014174:	4619      	mov	r1, r3
 8014176:	f04f 0c0a 	mov.w	ip, #10
 801417a:	4620      	mov	r0, r4
 801417c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014180:	3a30      	subs	r2, #48	@ 0x30
 8014182:	2a09      	cmp	r2, #9
 8014184:	d903      	bls.n	801418e <_svfiprintf_r+0x1a6>
 8014186:	2b00      	cmp	r3, #0
 8014188:	d0c6      	beq.n	8014118 <_svfiprintf_r+0x130>
 801418a:	9105      	str	r1, [sp, #20]
 801418c:	e7c4      	b.n	8014118 <_svfiprintf_r+0x130>
 801418e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014192:	4604      	mov	r4, r0
 8014194:	2301      	movs	r3, #1
 8014196:	e7f0      	b.n	801417a <_svfiprintf_r+0x192>
 8014198:	ab03      	add	r3, sp, #12
 801419a:	9300      	str	r3, [sp, #0]
 801419c:	462a      	mov	r2, r5
 801419e:	4b0e      	ldr	r3, [pc, #56]	@ (80141d8 <_svfiprintf_r+0x1f0>)
 80141a0:	a904      	add	r1, sp, #16
 80141a2:	4638      	mov	r0, r7
 80141a4:	f7fe fb0c 	bl	80127c0 <_printf_float>
 80141a8:	1c42      	adds	r2, r0, #1
 80141aa:	4606      	mov	r6, r0
 80141ac:	d1d6      	bne.n	801415c <_svfiprintf_r+0x174>
 80141ae:	89ab      	ldrh	r3, [r5, #12]
 80141b0:	065b      	lsls	r3, r3, #25
 80141b2:	f53f af2d 	bmi.w	8014010 <_svfiprintf_r+0x28>
 80141b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80141b8:	e72c      	b.n	8014014 <_svfiprintf_r+0x2c>
 80141ba:	ab03      	add	r3, sp, #12
 80141bc:	9300      	str	r3, [sp, #0]
 80141be:	462a      	mov	r2, r5
 80141c0:	4b05      	ldr	r3, [pc, #20]	@ (80141d8 <_svfiprintf_r+0x1f0>)
 80141c2:	a904      	add	r1, sp, #16
 80141c4:	4638      	mov	r0, r7
 80141c6:	f7fe fd93 	bl	8012cf0 <_printf_i>
 80141ca:	e7ed      	b.n	80141a8 <_svfiprintf_r+0x1c0>
 80141cc:	0801877d 	.word	0x0801877d
 80141d0:	08018787 	.word	0x08018787
 80141d4:	080127c1 	.word	0x080127c1
 80141d8:	08013f31 	.word	0x08013f31
 80141dc:	08018783 	.word	0x08018783

080141e0 <__sfputc_r>:
 80141e0:	6893      	ldr	r3, [r2, #8]
 80141e2:	3b01      	subs	r3, #1
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	b410      	push	{r4}
 80141e8:	6093      	str	r3, [r2, #8]
 80141ea:	da08      	bge.n	80141fe <__sfputc_r+0x1e>
 80141ec:	6994      	ldr	r4, [r2, #24]
 80141ee:	42a3      	cmp	r3, r4
 80141f0:	db01      	blt.n	80141f6 <__sfputc_r+0x16>
 80141f2:	290a      	cmp	r1, #10
 80141f4:	d103      	bne.n	80141fe <__sfputc_r+0x1e>
 80141f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141fa:	f000 be80 	b.w	8014efe <__swbuf_r>
 80141fe:	6813      	ldr	r3, [r2, #0]
 8014200:	1c58      	adds	r0, r3, #1
 8014202:	6010      	str	r0, [r2, #0]
 8014204:	7019      	strb	r1, [r3, #0]
 8014206:	4608      	mov	r0, r1
 8014208:	f85d 4b04 	ldr.w	r4, [sp], #4
 801420c:	4770      	bx	lr

0801420e <__sfputs_r>:
 801420e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014210:	4606      	mov	r6, r0
 8014212:	460f      	mov	r7, r1
 8014214:	4614      	mov	r4, r2
 8014216:	18d5      	adds	r5, r2, r3
 8014218:	42ac      	cmp	r4, r5
 801421a:	d101      	bne.n	8014220 <__sfputs_r+0x12>
 801421c:	2000      	movs	r0, #0
 801421e:	e007      	b.n	8014230 <__sfputs_r+0x22>
 8014220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014224:	463a      	mov	r2, r7
 8014226:	4630      	mov	r0, r6
 8014228:	f7ff ffda 	bl	80141e0 <__sfputc_r>
 801422c:	1c43      	adds	r3, r0, #1
 801422e:	d1f3      	bne.n	8014218 <__sfputs_r+0xa>
 8014230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014234 <_vfiprintf_r>:
 8014234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014238:	460d      	mov	r5, r1
 801423a:	b09d      	sub	sp, #116	@ 0x74
 801423c:	4614      	mov	r4, r2
 801423e:	4698      	mov	r8, r3
 8014240:	4606      	mov	r6, r0
 8014242:	b118      	cbz	r0, 801424c <_vfiprintf_r+0x18>
 8014244:	6a03      	ldr	r3, [r0, #32]
 8014246:	b90b      	cbnz	r3, 801424c <_vfiprintf_r+0x18>
 8014248:	f7fe ff32 	bl	80130b0 <__sinit>
 801424c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801424e:	07d9      	lsls	r1, r3, #31
 8014250:	d405      	bmi.n	801425e <_vfiprintf_r+0x2a>
 8014252:	89ab      	ldrh	r3, [r5, #12]
 8014254:	059a      	lsls	r2, r3, #22
 8014256:	d402      	bmi.n	801425e <_vfiprintf_r+0x2a>
 8014258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801425a:	f7ff f80a 	bl	8013272 <__retarget_lock_acquire_recursive>
 801425e:	89ab      	ldrh	r3, [r5, #12]
 8014260:	071b      	lsls	r3, r3, #28
 8014262:	d501      	bpl.n	8014268 <_vfiprintf_r+0x34>
 8014264:	692b      	ldr	r3, [r5, #16]
 8014266:	b99b      	cbnz	r3, 8014290 <_vfiprintf_r+0x5c>
 8014268:	4629      	mov	r1, r5
 801426a:	4630      	mov	r0, r6
 801426c:	f000 fe86 	bl	8014f7c <__swsetup_r>
 8014270:	b170      	cbz	r0, 8014290 <_vfiprintf_r+0x5c>
 8014272:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014274:	07dc      	lsls	r4, r3, #31
 8014276:	d504      	bpl.n	8014282 <_vfiprintf_r+0x4e>
 8014278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801427c:	b01d      	add	sp, #116	@ 0x74
 801427e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014282:	89ab      	ldrh	r3, [r5, #12]
 8014284:	0598      	lsls	r0, r3, #22
 8014286:	d4f7      	bmi.n	8014278 <_vfiprintf_r+0x44>
 8014288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801428a:	f7fe fff3 	bl	8013274 <__retarget_lock_release_recursive>
 801428e:	e7f3      	b.n	8014278 <_vfiprintf_r+0x44>
 8014290:	2300      	movs	r3, #0
 8014292:	9309      	str	r3, [sp, #36]	@ 0x24
 8014294:	2320      	movs	r3, #32
 8014296:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801429a:	f8cd 800c 	str.w	r8, [sp, #12]
 801429e:	2330      	movs	r3, #48	@ 0x30
 80142a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014450 <_vfiprintf_r+0x21c>
 80142a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80142a8:	f04f 0901 	mov.w	r9, #1
 80142ac:	4623      	mov	r3, r4
 80142ae:	469a      	mov	sl, r3
 80142b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142b4:	b10a      	cbz	r2, 80142ba <_vfiprintf_r+0x86>
 80142b6:	2a25      	cmp	r2, #37	@ 0x25
 80142b8:	d1f9      	bne.n	80142ae <_vfiprintf_r+0x7a>
 80142ba:	ebba 0b04 	subs.w	fp, sl, r4
 80142be:	d00b      	beq.n	80142d8 <_vfiprintf_r+0xa4>
 80142c0:	465b      	mov	r3, fp
 80142c2:	4622      	mov	r2, r4
 80142c4:	4629      	mov	r1, r5
 80142c6:	4630      	mov	r0, r6
 80142c8:	f7ff ffa1 	bl	801420e <__sfputs_r>
 80142cc:	3001      	adds	r0, #1
 80142ce:	f000 80a7 	beq.w	8014420 <_vfiprintf_r+0x1ec>
 80142d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142d4:	445a      	add	r2, fp
 80142d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80142d8:	f89a 3000 	ldrb.w	r3, [sl]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	f000 809f 	beq.w	8014420 <_vfiprintf_r+0x1ec>
 80142e2:	2300      	movs	r3, #0
 80142e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80142e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142ec:	f10a 0a01 	add.w	sl, sl, #1
 80142f0:	9304      	str	r3, [sp, #16]
 80142f2:	9307      	str	r3, [sp, #28]
 80142f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80142f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80142fa:	4654      	mov	r4, sl
 80142fc:	2205      	movs	r2, #5
 80142fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014302:	4853      	ldr	r0, [pc, #332]	@ (8014450 <_vfiprintf_r+0x21c>)
 8014304:	f7eb ff3c 	bl	8000180 <memchr>
 8014308:	9a04      	ldr	r2, [sp, #16]
 801430a:	b9d8      	cbnz	r0, 8014344 <_vfiprintf_r+0x110>
 801430c:	06d1      	lsls	r1, r2, #27
 801430e:	bf44      	itt	mi
 8014310:	2320      	movmi	r3, #32
 8014312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014316:	0713      	lsls	r3, r2, #28
 8014318:	bf44      	itt	mi
 801431a:	232b      	movmi	r3, #43	@ 0x2b
 801431c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014320:	f89a 3000 	ldrb.w	r3, [sl]
 8014324:	2b2a      	cmp	r3, #42	@ 0x2a
 8014326:	d015      	beq.n	8014354 <_vfiprintf_r+0x120>
 8014328:	9a07      	ldr	r2, [sp, #28]
 801432a:	4654      	mov	r4, sl
 801432c:	2000      	movs	r0, #0
 801432e:	f04f 0c0a 	mov.w	ip, #10
 8014332:	4621      	mov	r1, r4
 8014334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014338:	3b30      	subs	r3, #48	@ 0x30
 801433a:	2b09      	cmp	r3, #9
 801433c:	d94b      	bls.n	80143d6 <_vfiprintf_r+0x1a2>
 801433e:	b1b0      	cbz	r0, 801436e <_vfiprintf_r+0x13a>
 8014340:	9207      	str	r2, [sp, #28]
 8014342:	e014      	b.n	801436e <_vfiprintf_r+0x13a>
 8014344:	eba0 0308 	sub.w	r3, r0, r8
 8014348:	fa09 f303 	lsl.w	r3, r9, r3
 801434c:	4313      	orrs	r3, r2
 801434e:	9304      	str	r3, [sp, #16]
 8014350:	46a2      	mov	sl, r4
 8014352:	e7d2      	b.n	80142fa <_vfiprintf_r+0xc6>
 8014354:	9b03      	ldr	r3, [sp, #12]
 8014356:	1d19      	adds	r1, r3, #4
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	9103      	str	r1, [sp, #12]
 801435c:	2b00      	cmp	r3, #0
 801435e:	bfbb      	ittet	lt
 8014360:	425b      	neglt	r3, r3
 8014362:	f042 0202 	orrlt.w	r2, r2, #2
 8014366:	9307      	strge	r3, [sp, #28]
 8014368:	9307      	strlt	r3, [sp, #28]
 801436a:	bfb8      	it	lt
 801436c:	9204      	strlt	r2, [sp, #16]
 801436e:	7823      	ldrb	r3, [r4, #0]
 8014370:	2b2e      	cmp	r3, #46	@ 0x2e
 8014372:	d10a      	bne.n	801438a <_vfiprintf_r+0x156>
 8014374:	7863      	ldrb	r3, [r4, #1]
 8014376:	2b2a      	cmp	r3, #42	@ 0x2a
 8014378:	d132      	bne.n	80143e0 <_vfiprintf_r+0x1ac>
 801437a:	9b03      	ldr	r3, [sp, #12]
 801437c:	1d1a      	adds	r2, r3, #4
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	9203      	str	r2, [sp, #12]
 8014382:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014386:	3402      	adds	r4, #2
 8014388:	9305      	str	r3, [sp, #20]
 801438a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014460 <_vfiprintf_r+0x22c>
 801438e:	7821      	ldrb	r1, [r4, #0]
 8014390:	2203      	movs	r2, #3
 8014392:	4650      	mov	r0, sl
 8014394:	f7eb fef4 	bl	8000180 <memchr>
 8014398:	b138      	cbz	r0, 80143aa <_vfiprintf_r+0x176>
 801439a:	9b04      	ldr	r3, [sp, #16]
 801439c:	eba0 000a 	sub.w	r0, r0, sl
 80143a0:	2240      	movs	r2, #64	@ 0x40
 80143a2:	4082      	lsls	r2, r0
 80143a4:	4313      	orrs	r3, r2
 80143a6:	3401      	adds	r4, #1
 80143a8:	9304      	str	r3, [sp, #16]
 80143aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ae:	4829      	ldr	r0, [pc, #164]	@ (8014454 <_vfiprintf_r+0x220>)
 80143b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80143b4:	2206      	movs	r2, #6
 80143b6:	f7eb fee3 	bl	8000180 <memchr>
 80143ba:	2800      	cmp	r0, #0
 80143bc:	d03f      	beq.n	801443e <_vfiprintf_r+0x20a>
 80143be:	4b26      	ldr	r3, [pc, #152]	@ (8014458 <_vfiprintf_r+0x224>)
 80143c0:	bb1b      	cbnz	r3, 801440a <_vfiprintf_r+0x1d6>
 80143c2:	9b03      	ldr	r3, [sp, #12]
 80143c4:	3307      	adds	r3, #7
 80143c6:	f023 0307 	bic.w	r3, r3, #7
 80143ca:	3308      	adds	r3, #8
 80143cc:	9303      	str	r3, [sp, #12]
 80143ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143d0:	443b      	add	r3, r7
 80143d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80143d4:	e76a      	b.n	80142ac <_vfiprintf_r+0x78>
 80143d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80143da:	460c      	mov	r4, r1
 80143dc:	2001      	movs	r0, #1
 80143de:	e7a8      	b.n	8014332 <_vfiprintf_r+0xfe>
 80143e0:	2300      	movs	r3, #0
 80143e2:	3401      	adds	r4, #1
 80143e4:	9305      	str	r3, [sp, #20]
 80143e6:	4619      	mov	r1, r3
 80143e8:	f04f 0c0a 	mov.w	ip, #10
 80143ec:	4620      	mov	r0, r4
 80143ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143f2:	3a30      	subs	r2, #48	@ 0x30
 80143f4:	2a09      	cmp	r2, #9
 80143f6:	d903      	bls.n	8014400 <_vfiprintf_r+0x1cc>
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d0c6      	beq.n	801438a <_vfiprintf_r+0x156>
 80143fc:	9105      	str	r1, [sp, #20]
 80143fe:	e7c4      	b.n	801438a <_vfiprintf_r+0x156>
 8014400:	fb0c 2101 	mla	r1, ip, r1, r2
 8014404:	4604      	mov	r4, r0
 8014406:	2301      	movs	r3, #1
 8014408:	e7f0      	b.n	80143ec <_vfiprintf_r+0x1b8>
 801440a:	ab03      	add	r3, sp, #12
 801440c:	9300      	str	r3, [sp, #0]
 801440e:	462a      	mov	r2, r5
 8014410:	4b12      	ldr	r3, [pc, #72]	@ (801445c <_vfiprintf_r+0x228>)
 8014412:	a904      	add	r1, sp, #16
 8014414:	4630      	mov	r0, r6
 8014416:	f7fe f9d3 	bl	80127c0 <_printf_float>
 801441a:	4607      	mov	r7, r0
 801441c:	1c78      	adds	r0, r7, #1
 801441e:	d1d6      	bne.n	80143ce <_vfiprintf_r+0x19a>
 8014420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014422:	07d9      	lsls	r1, r3, #31
 8014424:	d405      	bmi.n	8014432 <_vfiprintf_r+0x1fe>
 8014426:	89ab      	ldrh	r3, [r5, #12]
 8014428:	059a      	lsls	r2, r3, #22
 801442a:	d402      	bmi.n	8014432 <_vfiprintf_r+0x1fe>
 801442c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801442e:	f7fe ff21 	bl	8013274 <__retarget_lock_release_recursive>
 8014432:	89ab      	ldrh	r3, [r5, #12]
 8014434:	065b      	lsls	r3, r3, #25
 8014436:	f53f af1f 	bmi.w	8014278 <_vfiprintf_r+0x44>
 801443a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801443c:	e71e      	b.n	801427c <_vfiprintf_r+0x48>
 801443e:	ab03      	add	r3, sp, #12
 8014440:	9300      	str	r3, [sp, #0]
 8014442:	462a      	mov	r2, r5
 8014444:	4b05      	ldr	r3, [pc, #20]	@ (801445c <_vfiprintf_r+0x228>)
 8014446:	a904      	add	r1, sp, #16
 8014448:	4630      	mov	r0, r6
 801444a:	f7fe fc51 	bl	8012cf0 <_printf_i>
 801444e:	e7e4      	b.n	801441a <_vfiprintf_r+0x1e6>
 8014450:	0801877d 	.word	0x0801877d
 8014454:	08018787 	.word	0x08018787
 8014458:	080127c1 	.word	0x080127c1
 801445c:	0801420f 	.word	0x0801420f
 8014460:	08018783 	.word	0x08018783

08014464 <malloc>:
 8014464:	4b02      	ldr	r3, [pc, #8]	@ (8014470 <malloc+0xc>)
 8014466:	4601      	mov	r1, r0
 8014468:	6818      	ldr	r0, [r3, #0]
 801446a:	f000 b825 	b.w	80144b8 <_malloc_r>
 801446e:	bf00      	nop
 8014470:	200000a4 	.word	0x200000a4

08014474 <sbrk_aligned>:
 8014474:	b570      	push	{r4, r5, r6, lr}
 8014476:	4e0f      	ldr	r6, [pc, #60]	@ (80144b4 <sbrk_aligned+0x40>)
 8014478:	460c      	mov	r4, r1
 801447a:	6831      	ldr	r1, [r6, #0]
 801447c:	4605      	mov	r5, r0
 801447e:	b911      	cbnz	r1, 8014486 <sbrk_aligned+0x12>
 8014480:	f000 feb6 	bl	80151f0 <_sbrk_r>
 8014484:	6030      	str	r0, [r6, #0]
 8014486:	4621      	mov	r1, r4
 8014488:	4628      	mov	r0, r5
 801448a:	f000 feb1 	bl	80151f0 <_sbrk_r>
 801448e:	1c43      	adds	r3, r0, #1
 8014490:	d103      	bne.n	801449a <sbrk_aligned+0x26>
 8014492:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8014496:	4620      	mov	r0, r4
 8014498:	bd70      	pop	{r4, r5, r6, pc}
 801449a:	1cc4      	adds	r4, r0, #3
 801449c:	f024 0403 	bic.w	r4, r4, #3
 80144a0:	42a0      	cmp	r0, r4
 80144a2:	d0f8      	beq.n	8014496 <sbrk_aligned+0x22>
 80144a4:	1a21      	subs	r1, r4, r0
 80144a6:	4628      	mov	r0, r5
 80144a8:	f000 fea2 	bl	80151f0 <_sbrk_r>
 80144ac:	3001      	adds	r0, #1
 80144ae:	d1f2      	bne.n	8014496 <sbrk_aligned+0x22>
 80144b0:	e7ef      	b.n	8014492 <sbrk_aligned+0x1e>
 80144b2:	bf00      	nop
 80144b4:	20000828 	.word	0x20000828

080144b8 <_malloc_r>:
 80144b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144bc:	1ccd      	adds	r5, r1, #3
 80144be:	f025 0503 	bic.w	r5, r5, #3
 80144c2:	3508      	adds	r5, #8
 80144c4:	2d0c      	cmp	r5, #12
 80144c6:	bf38      	it	cc
 80144c8:	250c      	movcc	r5, #12
 80144ca:	2d00      	cmp	r5, #0
 80144cc:	4606      	mov	r6, r0
 80144ce:	db01      	blt.n	80144d4 <_malloc_r+0x1c>
 80144d0:	42a9      	cmp	r1, r5
 80144d2:	d904      	bls.n	80144de <_malloc_r+0x26>
 80144d4:	230c      	movs	r3, #12
 80144d6:	6033      	str	r3, [r6, #0]
 80144d8:	2000      	movs	r0, #0
 80144da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80145b4 <_malloc_r+0xfc>
 80144e2:	f000 f915 	bl	8014710 <__malloc_lock>
 80144e6:	f8d8 3000 	ldr.w	r3, [r8]
 80144ea:	461c      	mov	r4, r3
 80144ec:	bb44      	cbnz	r4, 8014540 <_malloc_r+0x88>
 80144ee:	4629      	mov	r1, r5
 80144f0:	4630      	mov	r0, r6
 80144f2:	f7ff ffbf 	bl	8014474 <sbrk_aligned>
 80144f6:	1c43      	adds	r3, r0, #1
 80144f8:	4604      	mov	r4, r0
 80144fa:	d158      	bne.n	80145ae <_malloc_r+0xf6>
 80144fc:	f8d8 4000 	ldr.w	r4, [r8]
 8014500:	4627      	mov	r7, r4
 8014502:	2f00      	cmp	r7, #0
 8014504:	d143      	bne.n	801458e <_malloc_r+0xd6>
 8014506:	2c00      	cmp	r4, #0
 8014508:	d04b      	beq.n	80145a2 <_malloc_r+0xea>
 801450a:	6823      	ldr	r3, [r4, #0]
 801450c:	4639      	mov	r1, r7
 801450e:	4630      	mov	r0, r6
 8014510:	eb04 0903 	add.w	r9, r4, r3
 8014514:	f000 fe6c 	bl	80151f0 <_sbrk_r>
 8014518:	4581      	cmp	r9, r0
 801451a:	d142      	bne.n	80145a2 <_malloc_r+0xea>
 801451c:	6821      	ldr	r1, [r4, #0]
 801451e:	1a6d      	subs	r5, r5, r1
 8014520:	4629      	mov	r1, r5
 8014522:	4630      	mov	r0, r6
 8014524:	f7ff ffa6 	bl	8014474 <sbrk_aligned>
 8014528:	3001      	adds	r0, #1
 801452a:	d03a      	beq.n	80145a2 <_malloc_r+0xea>
 801452c:	6823      	ldr	r3, [r4, #0]
 801452e:	442b      	add	r3, r5
 8014530:	6023      	str	r3, [r4, #0]
 8014532:	f8d8 3000 	ldr.w	r3, [r8]
 8014536:	685a      	ldr	r2, [r3, #4]
 8014538:	bb62      	cbnz	r2, 8014594 <_malloc_r+0xdc>
 801453a:	f8c8 7000 	str.w	r7, [r8]
 801453e:	e00f      	b.n	8014560 <_malloc_r+0xa8>
 8014540:	6822      	ldr	r2, [r4, #0]
 8014542:	1b52      	subs	r2, r2, r5
 8014544:	d420      	bmi.n	8014588 <_malloc_r+0xd0>
 8014546:	2a0b      	cmp	r2, #11
 8014548:	d917      	bls.n	801457a <_malloc_r+0xc2>
 801454a:	1961      	adds	r1, r4, r5
 801454c:	42a3      	cmp	r3, r4
 801454e:	6025      	str	r5, [r4, #0]
 8014550:	bf18      	it	ne
 8014552:	6059      	strne	r1, [r3, #4]
 8014554:	6863      	ldr	r3, [r4, #4]
 8014556:	bf08      	it	eq
 8014558:	f8c8 1000 	streq.w	r1, [r8]
 801455c:	5162      	str	r2, [r4, r5]
 801455e:	604b      	str	r3, [r1, #4]
 8014560:	4630      	mov	r0, r6
 8014562:	f000 f8db 	bl	801471c <__malloc_unlock>
 8014566:	f104 000b 	add.w	r0, r4, #11
 801456a:	1d23      	adds	r3, r4, #4
 801456c:	f020 0007 	bic.w	r0, r0, #7
 8014570:	1ac2      	subs	r2, r0, r3
 8014572:	bf1c      	itt	ne
 8014574:	1a1b      	subne	r3, r3, r0
 8014576:	50a3      	strne	r3, [r4, r2]
 8014578:	e7af      	b.n	80144da <_malloc_r+0x22>
 801457a:	6862      	ldr	r2, [r4, #4]
 801457c:	42a3      	cmp	r3, r4
 801457e:	bf0c      	ite	eq
 8014580:	f8c8 2000 	streq.w	r2, [r8]
 8014584:	605a      	strne	r2, [r3, #4]
 8014586:	e7eb      	b.n	8014560 <_malloc_r+0xa8>
 8014588:	4623      	mov	r3, r4
 801458a:	6864      	ldr	r4, [r4, #4]
 801458c:	e7ae      	b.n	80144ec <_malloc_r+0x34>
 801458e:	463c      	mov	r4, r7
 8014590:	687f      	ldr	r7, [r7, #4]
 8014592:	e7b6      	b.n	8014502 <_malloc_r+0x4a>
 8014594:	461a      	mov	r2, r3
 8014596:	685b      	ldr	r3, [r3, #4]
 8014598:	42a3      	cmp	r3, r4
 801459a:	d1fb      	bne.n	8014594 <_malloc_r+0xdc>
 801459c:	2300      	movs	r3, #0
 801459e:	6053      	str	r3, [r2, #4]
 80145a0:	e7de      	b.n	8014560 <_malloc_r+0xa8>
 80145a2:	230c      	movs	r3, #12
 80145a4:	6033      	str	r3, [r6, #0]
 80145a6:	4630      	mov	r0, r6
 80145a8:	f000 f8b8 	bl	801471c <__malloc_unlock>
 80145ac:	e794      	b.n	80144d8 <_malloc_r+0x20>
 80145ae:	6005      	str	r5, [r0, #0]
 80145b0:	e7d6      	b.n	8014560 <_malloc_r+0xa8>
 80145b2:	bf00      	nop
 80145b4:	2000082c 	.word	0x2000082c

080145b8 <__sflush_r>:
 80145b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80145bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145c0:	0716      	lsls	r6, r2, #28
 80145c2:	4605      	mov	r5, r0
 80145c4:	460c      	mov	r4, r1
 80145c6:	d454      	bmi.n	8014672 <__sflush_r+0xba>
 80145c8:	684b      	ldr	r3, [r1, #4]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	dc02      	bgt.n	80145d4 <__sflush_r+0x1c>
 80145ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	dd48      	ble.n	8014666 <__sflush_r+0xae>
 80145d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80145d6:	2e00      	cmp	r6, #0
 80145d8:	d045      	beq.n	8014666 <__sflush_r+0xae>
 80145da:	2300      	movs	r3, #0
 80145dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80145e0:	682f      	ldr	r7, [r5, #0]
 80145e2:	6a21      	ldr	r1, [r4, #32]
 80145e4:	602b      	str	r3, [r5, #0]
 80145e6:	d030      	beq.n	801464a <__sflush_r+0x92>
 80145e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80145ea:	89a3      	ldrh	r3, [r4, #12]
 80145ec:	0759      	lsls	r1, r3, #29
 80145ee:	d505      	bpl.n	80145fc <__sflush_r+0x44>
 80145f0:	6863      	ldr	r3, [r4, #4]
 80145f2:	1ad2      	subs	r2, r2, r3
 80145f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80145f6:	b10b      	cbz	r3, 80145fc <__sflush_r+0x44>
 80145f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80145fa:	1ad2      	subs	r2, r2, r3
 80145fc:	2300      	movs	r3, #0
 80145fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014600:	6a21      	ldr	r1, [r4, #32]
 8014602:	4628      	mov	r0, r5
 8014604:	47b0      	blx	r6
 8014606:	1c43      	adds	r3, r0, #1
 8014608:	89a3      	ldrh	r3, [r4, #12]
 801460a:	d106      	bne.n	801461a <__sflush_r+0x62>
 801460c:	6829      	ldr	r1, [r5, #0]
 801460e:	291d      	cmp	r1, #29
 8014610:	d82b      	bhi.n	801466a <__sflush_r+0xb2>
 8014612:	4a2a      	ldr	r2, [pc, #168]	@ (80146bc <__sflush_r+0x104>)
 8014614:	40ca      	lsrs	r2, r1
 8014616:	07d6      	lsls	r6, r2, #31
 8014618:	d527      	bpl.n	801466a <__sflush_r+0xb2>
 801461a:	2200      	movs	r2, #0
 801461c:	6062      	str	r2, [r4, #4]
 801461e:	04d9      	lsls	r1, r3, #19
 8014620:	6922      	ldr	r2, [r4, #16]
 8014622:	6022      	str	r2, [r4, #0]
 8014624:	d504      	bpl.n	8014630 <__sflush_r+0x78>
 8014626:	1c42      	adds	r2, r0, #1
 8014628:	d101      	bne.n	801462e <__sflush_r+0x76>
 801462a:	682b      	ldr	r3, [r5, #0]
 801462c:	b903      	cbnz	r3, 8014630 <__sflush_r+0x78>
 801462e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014632:	602f      	str	r7, [r5, #0]
 8014634:	b1b9      	cbz	r1, 8014666 <__sflush_r+0xae>
 8014636:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801463a:	4299      	cmp	r1, r3
 801463c:	d002      	beq.n	8014644 <__sflush_r+0x8c>
 801463e:	4628      	mov	r0, r5
 8014640:	f000 fe5a 	bl	80152f8 <_free_r>
 8014644:	2300      	movs	r3, #0
 8014646:	6363      	str	r3, [r4, #52]	@ 0x34
 8014648:	e00d      	b.n	8014666 <__sflush_r+0xae>
 801464a:	2301      	movs	r3, #1
 801464c:	4628      	mov	r0, r5
 801464e:	47b0      	blx	r6
 8014650:	4602      	mov	r2, r0
 8014652:	1c50      	adds	r0, r2, #1
 8014654:	d1c9      	bne.n	80145ea <__sflush_r+0x32>
 8014656:	682b      	ldr	r3, [r5, #0]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d0c6      	beq.n	80145ea <__sflush_r+0x32>
 801465c:	2b1d      	cmp	r3, #29
 801465e:	d001      	beq.n	8014664 <__sflush_r+0xac>
 8014660:	2b16      	cmp	r3, #22
 8014662:	d11e      	bne.n	80146a2 <__sflush_r+0xea>
 8014664:	602f      	str	r7, [r5, #0]
 8014666:	2000      	movs	r0, #0
 8014668:	e022      	b.n	80146b0 <__sflush_r+0xf8>
 801466a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801466e:	b21b      	sxth	r3, r3
 8014670:	e01b      	b.n	80146aa <__sflush_r+0xf2>
 8014672:	690f      	ldr	r7, [r1, #16]
 8014674:	2f00      	cmp	r7, #0
 8014676:	d0f6      	beq.n	8014666 <__sflush_r+0xae>
 8014678:	0793      	lsls	r3, r2, #30
 801467a:	680e      	ldr	r6, [r1, #0]
 801467c:	bf08      	it	eq
 801467e:	694b      	ldreq	r3, [r1, #20]
 8014680:	600f      	str	r7, [r1, #0]
 8014682:	bf18      	it	ne
 8014684:	2300      	movne	r3, #0
 8014686:	eba6 0807 	sub.w	r8, r6, r7
 801468a:	608b      	str	r3, [r1, #8]
 801468c:	f1b8 0f00 	cmp.w	r8, #0
 8014690:	dde9      	ble.n	8014666 <__sflush_r+0xae>
 8014692:	6a21      	ldr	r1, [r4, #32]
 8014694:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014696:	4643      	mov	r3, r8
 8014698:	463a      	mov	r2, r7
 801469a:	4628      	mov	r0, r5
 801469c:	47b0      	blx	r6
 801469e:	2800      	cmp	r0, #0
 80146a0:	dc08      	bgt.n	80146b4 <__sflush_r+0xfc>
 80146a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146aa:	81a3      	strh	r3, [r4, #12]
 80146ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80146b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146b4:	4407      	add	r7, r0
 80146b6:	eba8 0800 	sub.w	r8, r8, r0
 80146ba:	e7e7      	b.n	801468c <__sflush_r+0xd4>
 80146bc:	20400001 	.word	0x20400001

080146c0 <_fflush_r>:
 80146c0:	b538      	push	{r3, r4, r5, lr}
 80146c2:	690b      	ldr	r3, [r1, #16]
 80146c4:	4605      	mov	r5, r0
 80146c6:	460c      	mov	r4, r1
 80146c8:	b913      	cbnz	r3, 80146d0 <_fflush_r+0x10>
 80146ca:	2500      	movs	r5, #0
 80146cc:	4628      	mov	r0, r5
 80146ce:	bd38      	pop	{r3, r4, r5, pc}
 80146d0:	b118      	cbz	r0, 80146da <_fflush_r+0x1a>
 80146d2:	6a03      	ldr	r3, [r0, #32]
 80146d4:	b90b      	cbnz	r3, 80146da <_fflush_r+0x1a>
 80146d6:	f7fe fceb 	bl	80130b0 <__sinit>
 80146da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d0f3      	beq.n	80146ca <_fflush_r+0xa>
 80146e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80146e4:	07d0      	lsls	r0, r2, #31
 80146e6:	d404      	bmi.n	80146f2 <_fflush_r+0x32>
 80146e8:	0599      	lsls	r1, r3, #22
 80146ea:	d402      	bmi.n	80146f2 <_fflush_r+0x32>
 80146ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146ee:	f7fe fdc0 	bl	8013272 <__retarget_lock_acquire_recursive>
 80146f2:	4628      	mov	r0, r5
 80146f4:	4621      	mov	r1, r4
 80146f6:	f7ff ff5f 	bl	80145b8 <__sflush_r>
 80146fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80146fc:	07da      	lsls	r2, r3, #31
 80146fe:	4605      	mov	r5, r0
 8014700:	d4e4      	bmi.n	80146cc <_fflush_r+0xc>
 8014702:	89a3      	ldrh	r3, [r4, #12]
 8014704:	059b      	lsls	r3, r3, #22
 8014706:	d4e1      	bmi.n	80146cc <_fflush_r+0xc>
 8014708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801470a:	f7fe fdb3 	bl	8013274 <__retarget_lock_release_recursive>
 801470e:	e7dd      	b.n	80146cc <_fflush_r+0xc>

08014710 <__malloc_lock>:
 8014710:	4801      	ldr	r0, [pc, #4]	@ (8014718 <__malloc_lock+0x8>)
 8014712:	f7fe bdae 	b.w	8013272 <__retarget_lock_acquire_recursive>
 8014716:	bf00      	nop
 8014718:	20000824 	.word	0x20000824

0801471c <__malloc_unlock>:
 801471c:	4801      	ldr	r0, [pc, #4]	@ (8014724 <__malloc_unlock+0x8>)
 801471e:	f7fe bda9 	b.w	8013274 <__retarget_lock_release_recursive>
 8014722:	bf00      	nop
 8014724:	20000824 	.word	0x20000824

08014728 <_Balloc>:
 8014728:	b570      	push	{r4, r5, r6, lr}
 801472a:	69c6      	ldr	r6, [r0, #28]
 801472c:	4604      	mov	r4, r0
 801472e:	460d      	mov	r5, r1
 8014730:	b976      	cbnz	r6, 8014750 <_Balloc+0x28>
 8014732:	2010      	movs	r0, #16
 8014734:	f7ff fe96 	bl	8014464 <malloc>
 8014738:	4602      	mov	r2, r0
 801473a:	61e0      	str	r0, [r4, #28]
 801473c:	b920      	cbnz	r0, 8014748 <_Balloc+0x20>
 801473e:	4b18      	ldr	r3, [pc, #96]	@ (80147a0 <_Balloc+0x78>)
 8014740:	4818      	ldr	r0, [pc, #96]	@ (80147a4 <_Balloc+0x7c>)
 8014742:	216b      	movs	r1, #107	@ 0x6b
 8014744:	f000 fda6 	bl	8015294 <__assert_func>
 8014748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801474c:	6006      	str	r6, [r0, #0]
 801474e:	60c6      	str	r6, [r0, #12]
 8014750:	69e6      	ldr	r6, [r4, #28]
 8014752:	68f3      	ldr	r3, [r6, #12]
 8014754:	b183      	cbz	r3, 8014778 <_Balloc+0x50>
 8014756:	69e3      	ldr	r3, [r4, #28]
 8014758:	68db      	ldr	r3, [r3, #12]
 801475a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801475e:	b9b8      	cbnz	r0, 8014790 <_Balloc+0x68>
 8014760:	2101      	movs	r1, #1
 8014762:	fa01 f605 	lsl.w	r6, r1, r5
 8014766:	1d72      	adds	r2, r6, #5
 8014768:	0092      	lsls	r2, r2, #2
 801476a:	4620      	mov	r0, r4
 801476c:	f000 fdb0 	bl	80152d0 <_calloc_r>
 8014770:	b160      	cbz	r0, 801478c <_Balloc+0x64>
 8014772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014776:	e00e      	b.n	8014796 <_Balloc+0x6e>
 8014778:	2221      	movs	r2, #33	@ 0x21
 801477a:	2104      	movs	r1, #4
 801477c:	4620      	mov	r0, r4
 801477e:	f000 fda7 	bl	80152d0 <_calloc_r>
 8014782:	69e3      	ldr	r3, [r4, #28]
 8014784:	60f0      	str	r0, [r6, #12]
 8014786:	68db      	ldr	r3, [r3, #12]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d1e4      	bne.n	8014756 <_Balloc+0x2e>
 801478c:	2000      	movs	r0, #0
 801478e:	bd70      	pop	{r4, r5, r6, pc}
 8014790:	6802      	ldr	r2, [r0, #0]
 8014792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014796:	2300      	movs	r3, #0
 8014798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801479c:	e7f7      	b.n	801478e <_Balloc+0x66>
 801479e:	bf00      	nop
 80147a0:	080186fd 	.word	0x080186fd
 80147a4:	0801878e 	.word	0x0801878e

080147a8 <_Bfree>:
 80147a8:	b570      	push	{r4, r5, r6, lr}
 80147aa:	69c6      	ldr	r6, [r0, #28]
 80147ac:	4605      	mov	r5, r0
 80147ae:	460c      	mov	r4, r1
 80147b0:	b976      	cbnz	r6, 80147d0 <_Bfree+0x28>
 80147b2:	2010      	movs	r0, #16
 80147b4:	f7ff fe56 	bl	8014464 <malloc>
 80147b8:	4602      	mov	r2, r0
 80147ba:	61e8      	str	r0, [r5, #28]
 80147bc:	b920      	cbnz	r0, 80147c8 <_Bfree+0x20>
 80147be:	4b09      	ldr	r3, [pc, #36]	@ (80147e4 <_Bfree+0x3c>)
 80147c0:	4809      	ldr	r0, [pc, #36]	@ (80147e8 <_Bfree+0x40>)
 80147c2:	218f      	movs	r1, #143	@ 0x8f
 80147c4:	f000 fd66 	bl	8015294 <__assert_func>
 80147c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80147cc:	6006      	str	r6, [r0, #0]
 80147ce:	60c6      	str	r6, [r0, #12]
 80147d0:	b13c      	cbz	r4, 80147e2 <_Bfree+0x3a>
 80147d2:	69eb      	ldr	r3, [r5, #28]
 80147d4:	6862      	ldr	r2, [r4, #4]
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80147dc:	6021      	str	r1, [r4, #0]
 80147de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80147e2:	bd70      	pop	{r4, r5, r6, pc}
 80147e4:	080186fd 	.word	0x080186fd
 80147e8:	0801878e 	.word	0x0801878e

080147ec <__multadd>:
 80147ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147f0:	690d      	ldr	r5, [r1, #16]
 80147f2:	4607      	mov	r7, r0
 80147f4:	460c      	mov	r4, r1
 80147f6:	461e      	mov	r6, r3
 80147f8:	f101 0c14 	add.w	ip, r1, #20
 80147fc:	2000      	movs	r0, #0
 80147fe:	f8dc 3000 	ldr.w	r3, [ip]
 8014802:	b299      	uxth	r1, r3
 8014804:	fb02 6101 	mla	r1, r2, r1, r6
 8014808:	0c1e      	lsrs	r6, r3, #16
 801480a:	0c0b      	lsrs	r3, r1, #16
 801480c:	fb02 3306 	mla	r3, r2, r6, r3
 8014810:	b289      	uxth	r1, r1
 8014812:	3001      	adds	r0, #1
 8014814:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014818:	4285      	cmp	r5, r0
 801481a:	f84c 1b04 	str.w	r1, [ip], #4
 801481e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014822:	dcec      	bgt.n	80147fe <__multadd+0x12>
 8014824:	b30e      	cbz	r6, 801486a <__multadd+0x7e>
 8014826:	68a3      	ldr	r3, [r4, #8]
 8014828:	42ab      	cmp	r3, r5
 801482a:	dc19      	bgt.n	8014860 <__multadd+0x74>
 801482c:	6861      	ldr	r1, [r4, #4]
 801482e:	4638      	mov	r0, r7
 8014830:	3101      	adds	r1, #1
 8014832:	f7ff ff79 	bl	8014728 <_Balloc>
 8014836:	4680      	mov	r8, r0
 8014838:	b928      	cbnz	r0, 8014846 <__multadd+0x5a>
 801483a:	4602      	mov	r2, r0
 801483c:	4b0c      	ldr	r3, [pc, #48]	@ (8014870 <__multadd+0x84>)
 801483e:	480d      	ldr	r0, [pc, #52]	@ (8014874 <__multadd+0x88>)
 8014840:	21ba      	movs	r1, #186	@ 0xba
 8014842:	f000 fd27 	bl	8015294 <__assert_func>
 8014846:	6922      	ldr	r2, [r4, #16]
 8014848:	3202      	adds	r2, #2
 801484a:	f104 010c 	add.w	r1, r4, #12
 801484e:	0092      	lsls	r2, r2, #2
 8014850:	300c      	adds	r0, #12
 8014852:	f000 fd11 	bl	8015278 <memcpy>
 8014856:	4621      	mov	r1, r4
 8014858:	4638      	mov	r0, r7
 801485a:	f7ff ffa5 	bl	80147a8 <_Bfree>
 801485e:	4644      	mov	r4, r8
 8014860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014864:	3501      	adds	r5, #1
 8014866:	615e      	str	r6, [r3, #20]
 8014868:	6125      	str	r5, [r4, #16]
 801486a:	4620      	mov	r0, r4
 801486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014870:	0801876c 	.word	0x0801876c
 8014874:	0801878e 	.word	0x0801878e

08014878 <__hi0bits>:
 8014878:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801487c:	4603      	mov	r3, r0
 801487e:	bf36      	itet	cc
 8014880:	0403      	lslcc	r3, r0, #16
 8014882:	2000      	movcs	r0, #0
 8014884:	2010      	movcc	r0, #16
 8014886:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801488a:	bf3c      	itt	cc
 801488c:	021b      	lslcc	r3, r3, #8
 801488e:	3008      	addcc	r0, #8
 8014890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014894:	bf3c      	itt	cc
 8014896:	011b      	lslcc	r3, r3, #4
 8014898:	3004      	addcc	r0, #4
 801489a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801489e:	bf3c      	itt	cc
 80148a0:	009b      	lslcc	r3, r3, #2
 80148a2:	3002      	addcc	r0, #2
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	db05      	blt.n	80148b4 <__hi0bits+0x3c>
 80148a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80148ac:	f100 0001 	add.w	r0, r0, #1
 80148b0:	bf08      	it	eq
 80148b2:	2020      	moveq	r0, #32
 80148b4:	4770      	bx	lr

080148b6 <__lo0bits>:
 80148b6:	6803      	ldr	r3, [r0, #0]
 80148b8:	4602      	mov	r2, r0
 80148ba:	f013 0007 	ands.w	r0, r3, #7
 80148be:	d00b      	beq.n	80148d8 <__lo0bits+0x22>
 80148c0:	07d9      	lsls	r1, r3, #31
 80148c2:	d421      	bmi.n	8014908 <__lo0bits+0x52>
 80148c4:	0798      	lsls	r0, r3, #30
 80148c6:	bf49      	itett	mi
 80148c8:	085b      	lsrmi	r3, r3, #1
 80148ca:	089b      	lsrpl	r3, r3, #2
 80148cc:	2001      	movmi	r0, #1
 80148ce:	6013      	strmi	r3, [r2, #0]
 80148d0:	bf5c      	itt	pl
 80148d2:	6013      	strpl	r3, [r2, #0]
 80148d4:	2002      	movpl	r0, #2
 80148d6:	4770      	bx	lr
 80148d8:	b299      	uxth	r1, r3
 80148da:	b909      	cbnz	r1, 80148e0 <__lo0bits+0x2a>
 80148dc:	0c1b      	lsrs	r3, r3, #16
 80148de:	2010      	movs	r0, #16
 80148e0:	b2d9      	uxtb	r1, r3
 80148e2:	b909      	cbnz	r1, 80148e8 <__lo0bits+0x32>
 80148e4:	3008      	adds	r0, #8
 80148e6:	0a1b      	lsrs	r3, r3, #8
 80148e8:	0719      	lsls	r1, r3, #28
 80148ea:	bf04      	itt	eq
 80148ec:	091b      	lsreq	r3, r3, #4
 80148ee:	3004      	addeq	r0, #4
 80148f0:	0799      	lsls	r1, r3, #30
 80148f2:	bf04      	itt	eq
 80148f4:	089b      	lsreq	r3, r3, #2
 80148f6:	3002      	addeq	r0, #2
 80148f8:	07d9      	lsls	r1, r3, #31
 80148fa:	d403      	bmi.n	8014904 <__lo0bits+0x4e>
 80148fc:	085b      	lsrs	r3, r3, #1
 80148fe:	f100 0001 	add.w	r0, r0, #1
 8014902:	d003      	beq.n	801490c <__lo0bits+0x56>
 8014904:	6013      	str	r3, [r2, #0]
 8014906:	4770      	bx	lr
 8014908:	2000      	movs	r0, #0
 801490a:	4770      	bx	lr
 801490c:	2020      	movs	r0, #32
 801490e:	4770      	bx	lr

08014910 <__i2b>:
 8014910:	b510      	push	{r4, lr}
 8014912:	460c      	mov	r4, r1
 8014914:	2101      	movs	r1, #1
 8014916:	f7ff ff07 	bl	8014728 <_Balloc>
 801491a:	4602      	mov	r2, r0
 801491c:	b928      	cbnz	r0, 801492a <__i2b+0x1a>
 801491e:	4b05      	ldr	r3, [pc, #20]	@ (8014934 <__i2b+0x24>)
 8014920:	4805      	ldr	r0, [pc, #20]	@ (8014938 <__i2b+0x28>)
 8014922:	f240 1145 	movw	r1, #325	@ 0x145
 8014926:	f000 fcb5 	bl	8015294 <__assert_func>
 801492a:	2301      	movs	r3, #1
 801492c:	6144      	str	r4, [r0, #20]
 801492e:	6103      	str	r3, [r0, #16]
 8014930:	bd10      	pop	{r4, pc}
 8014932:	bf00      	nop
 8014934:	0801876c 	.word	0x0801876c
 8014938:	0801878e 	.word	0x0801878e

0801493c <__multiply>:
 801493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014940:	4617      	mov	r7, r2
 8014942:	690a      	ldr	r2, [r1, #16]
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	429a      	cmp	r2, r3
 8014948:	bfa8      	it	ge
 801494a:	463b      	movge	r3, r7
 801494c:	4689      	mov	r9, r1
 801494e:	bfa4      	itt	ge
 8014950:	460f      	movge	r7, r1
 8014952:	4699      	movge	r9, r3
 8014954:	693d      	ldr	r5, [r7, #16]
 8014956:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	6879      	ldr	r1, [r7, #4]
 801495e:	eb05 060a 	add.w	r6, r5, sl
 8014962:	42b3      	cmp	r3, r6
 8014964:	b085      	sub	sp, #20
 8014966:	bfb8      	it	lt
 8014968:	3101      	addlt	r1, #1
 801496a:	f7ff fedd 	bl	8014728 <_Balloc>
 801496e:	b930      	cbnz	r0, 801497e <__multiply+0x42>
 8014970:	4602      	mov	r2, r0
 8014972:	4b41      	ldr	r3, [pc, #260]	@ (8014a78 <__multiply+0x13c>)
 8014974:	4841      	ldr	r0, [pc, #260]	@ (8014a7c <__multiply+0x140>)
 8014976:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801497a:	f000 fc8b 	bl	8015294 <__assert_func>
 801497e:	f100 0414 	add.w	r4, r0, #20
 8014982:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014986:	4623      	mov	r3, r4
 8014988:	2200      	movs	r2, #0
 801498a:	4573      	cmp	r3, lr
 801498c:	d320      	bcc.n	80149d0 <__multiply+0x94>
 801498e:	f107 0814 	add.w	r8, r7, #20
 8014992:	f109 0114 	add.w	r1, r9, #20
 8014996:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801499a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801499e:	9302      	str	r3, [sp, #8]
 80149a0:	1beb      	subs	r3, r5, r7
 80149a2:	3b15      	subs	r3, #21
 80149a4:	f023 0303 	bic.w	r3, r3, #3
 80149a8:	3304      	adds	r3, #4
 80149aa:	3715      	adds	r7, #21
 80149ac:	42bd      	cmp	r5, r7
 80149ae:	bf38      	it	cc
 80149b0:	2304      	movcc	r3, #4
 80149b2:	9301      	str	r3, [sp, #4]
 80149b4:	9b02      	ldr	r3, [sp, #8]
 80149b6:	9103      	str	r1, [sp, #12]
 80149b8:	428b      	cmp	r3, r1
 80149ba:	d80c      	bhi.n	80149d6 <__multiply+0x9a>
 80149bc:	2e00      	cmp	r6, #0
 80149be:	dd03      	ble.n	80149c8 <__multiply+0x8c>
 80149c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d055      	beq.n	8014a74 <__multiply+0x138>
 80149c8:	6106      	str	r6, [r0, #16]
 80149ca:	b005      	add	sp, #20
 80149cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149d0:	f843 2b04 	str.w	r2, [r3], #4
 80149d4:	e7d9      	b.n	801498a <__multiply+0x4e>
 80149d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80149da:	f1ba 0f00 	cmp.w	sl, #0
 80149de:	d01f      	beq.n	8014a20 <__multiply+0xe4>
 80149e0:	46c4      	mov	ip, r8
 80149e2:	46a1      	mov	r9, r4
 80149e4:	2700      	movs	r7, #0
 80149e6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80149ea:	f8d9 3000 	ldr.w	r3, [r9]
 80149ee:	fa1f fb82 	uxth.w	fp, r2
 80149f2:	b29b      	uxth	r3, r3
 80149f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80149f8:	443b      	add	r3, r7
 80149fa:	f8d9 7000 	ldr.w	r7, [r9]
 80149fe:	0c12      	lsrs	r2, r2, #16
 8014a00:	0c3f      	lsrs	r7, r7, #16
 8014a02:	fb0a 7202 	mla	r2, sl, r2, r7
 8014a06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014a0a:	b29b      	uxth	r3, r3
 8014a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014a10:	4565      	cmp	r5, ip
 8014a12:	f849 3b04 	str.w	r3, [r9], #4
 8014a16:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8014a1a:	d8e4      	bhi.n	80149e6 <__multiply+0xaa>
 8014a1c:	9b01      	ldr	r3, [sp, #4]
 8014a1e:	50e7      	str	r7, [r4, r3]
 8014a20:	9b03      	ldr	r3, [sp, #12]
 8014a22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014a26:	3104      	adds	r1, #4
 8014a28:	f1b9 0f00 	cmp.w	r9, #0
 8014a2c:	d020      	beq.n	8014a70 <__multiply+0x134>
 8014a2e:	6823      	ldr	r3, [r4, #0]
 8014a30:	4647      	mov	r7, r8
 8014a32:	46a4      	mov	ip, r4
 8014a34:	f04f 0a00 	mov.w	sl, #0
 8014a38:	f8b7 b000 	ldrh.w	fp, [r7]
 8014a3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014a40:	fb09 220b 	mla	r2, r9, fp, r2
 8014a44:	4452      	add	r2, sl
 8014a46:	b29b      	uxth	r3, r3
 8014a48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014a4c:	f84c 3b04 	str.w	r3, [ip], #4
 8014a50:	f857 3b04 	ldr.w	r3, [r7], #4
 8014a54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014a58:	f8bc 3000 	ldrh.w	r3, [ip]
 8014a5c:	fb09 330a 	mla	r3, r9, sl, r3
 8014a60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014a64:	42bd      	cmp	r5, r7
 8014a66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014a6a:	d8e5      	bhi.n	8014a38 <__multiply+0xfc>
 8014a6c:	9a01      	ldr	r2, [sp, #4]
 8014a6e:	50a3      	str	r3, [r4, r2]
 8014a70:	3404      	adds	r4, #4
 8014a72:	e79f      	b.n	80149b4 <__multiply+0x78>
 8014a74:	3e01      	subs	r6, #1
 8014a76:	e7a1      	b.n	80149bc <__multiply+0x80>
 8014a78:	0801876c 	.word	0x0801876c
 8014a7c:	0801878e 	.word	0x0801878e

08014a80 <__pow5mult>:
 8014a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a84:	4615      	mov	r5, r2
 8014a86:	f012 0203 	ands.w	r2, r2, #3
 8014a8a:	4607      	mov	r7, r0
 8014a8c:	460e      	mov	r6, r1
 8014a8e:	d007      	beq.n	8014aa0 <__pow5mult+0x20>
 8014a90:	4c25      	ldr	r4, [pc, #148]	@ (8014b28 <__pow5mult+0xa8>)
 8014a92:	3a01      	subs	r2, #1
 8014a94:	2300      	movs	r3, #0
 8014a96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014a9a:	f7ff fea7 	bl	80147ec <__multadd>
 8014a9e:	4606      	mov	r6, r0
 8014aa0:	10ad      	asrs	r5, r5, #2
 8014aa2:	d03d      	beq.n	8014b20 <__pow5mult+0xa0>
 8014aa4:	69fc      	ldr	r4, [r7, #28]
 8014aa6:	b97c      	cbnz	r4, 8014ac8 <__pow5mult+0x48>
 8014aa8:	2010      	movs	r0, #16
 8014aaa:	f7ff fcdb 	bl	8014464 <malloc>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	61f8      	str	r0, [r7, #28]
 8014ab2:	b928      	cbnz	r0, 8014ac0 <__pow5mult+0x40>
 8014ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8014b2c <__pow5mult+0xac>)
 8014ab6:	481e      	ldr	r0, [pc, #120]	@ (8014b30 <__pow5mult+0xb0>)
 8014ab8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014abc:	f000 fbea 	bl	8015294 <__assert_func>
 8014ac0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014ac4:	6004      	str	r4, [r0, #0]
 8014ac6:	60c4      	str	r4, [r0, #12]
 8014ac8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014acc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014ad0:	b94c      	cbnz	r4, 8014ae6 <__pow5mult+0x66>
 8014ad2:	f240 2171 	movw	r1, #625	@ 0x271
 8014ad6:	4638      	mov	r0, r7
 8014ad8:	f7ff ff1a 	bl	8014910 <__i2b>
 8014adc:	2300      	movs	r3, #0
 8014ade:	f8c8 0008 	str.w	r0, [r8, #8]
 8014ae2:	4604      	mov	r4, r0
 8014ae4:	6003      	str	r3, [r0, #0]
 8014ae6:	f04f 0900 	mov.w	r9, #0
 8014aea:	07eb      	lsls	r3, r5, #31
 8014aec:	d50a      	bpl.n	8014b04 <__pow5mult+0x84>
 8014aee:	4631      	mov	r1, r6
 8014af0:	4622      	mov	r2, r4
 8014af2:	4638      	mov	r0, r7
 8014af4:	f7ff ff22 	bl	801493c <__multiply>
 8014af8:	4631      	mov	r1, r6
 8014afa:	4680      	mov	r8, r0
 8014afc:	4638      	mov	r0, r7
 8014afe:	f7ff fe53 	bl	80147a8 <_Bfree>
 8014b02:	4646      	mov	r6, r8
 8014b04:	106d      	asrs	r5, r5, #1
 8014b06:	d00b      	beq.n	8014b20 <__pow5mult+0xa0>
 8014b08:	6820      	ldr	r0, [r4, #0]
 8014b0a:	b938      	cbnz	r0, 8014b1c <__pow5mult+0x9c>
 8014b0c:	4622      	mov	r2, r4
 8014b0e:	4621      	mov	r1, r4
 8014b10:	4638      	mov	r0, r7
 8014b12:	f7ff ff13 	bl	801493c <__multiply>
 8014b16:	6020      	str	r0, [r4, #0]
 8014b18:	f8c0 9000 	str.w	r9, [r0]
 8014b1c:	4604      	mov	r4, r0
 8014b1e:	e7e4      	b.n	8014aea <__pow5mult+0x6a>
 8014b20:	4630      	mov	r0, r6
 8014b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b26:	bf00      	nop
 8014b28:	08018830 	.word	0x08018830
 8014b2c:	080186fd 	.word	0x080186fd
 8014b30:	0801878e 	.word	0x0801878e

08014b34 <__lshift>:
 8014b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b38:	460c      	mov	r4, r1
 8014b3a:	6849      	ldr	r1, [r1, #4]
 8014b3c:	6923      	ldr	r3, [r4, #16]
 8014b3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014b42:	68a3      	ldr	r3, [r4, #8]
 8014b44:	4607      	mov	r7, r0
 8014b46:	4691      	mov	r9, r2
 8014b48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014b4c:	f108 0601 	add.w	r6, r8, #1
 8014b50:	42b3      	cmp	r3, r6
 8014b52:	db0b      	blt.n	8014b6c <__lshift+0x38>
 8014b54:	4638      	mov	r0, r7
 8014b56:	f7ff fde7 	bl	8014728 <_Balloc>
 8014b5a:	4605      	mov	r5, r0
 8014b5c:	b948      	cbnz	r0, 8014b72 <__lshift+0x3e>
 8014b5e:	4602      	mov	r2, r0
 8014b60:	4b28      	ldr	r3, [pc, #160]	@ (8014c04 <__lshift+0xd0>)
 8014b62:	4829      	ldr	r0, [pc, #164]	@ (8014c08 <__lshift+0xd4>)
 8014b64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014b68:	f000 fb94 	bl	8015294 <__assert_func>
 8014b6c:	3101      	adds	r1, #1
 8014b6e:	005b      	lsls	r3, r3, #1
 8014b70:	e7ee      	b.n	8014b50 <__lshift+0x1c>
 8014b72:	2300      	movs	r3, #0
 8014b74:	f100 0114 	add.w	r1, r0, #20
 8014b78:	f100 0210 	add.w	r2, r0, #16
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	4553      	cmp	r3, sl
 8014b80:	db33      	blt.n	8014bea <__lshift+0xb6>
 8014b82:	6920      	ldr	r0, [r4, #16]
 8014b84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014b88:	f104 0314 	add.w	r3, r4, #20
 8014b8c:	f019 091f 	ands.w	r9, r9, #31
 8014b90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014b94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014b98:	d02b      	beq.n	8014bf2 <__lshift+0xbe>
 8014b9a:	f1c9 0e20 	rsb	lr, r9, #32
 8014b9e:	468a      	mov	sl, r1
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	6818      	ldr	r0, [r3, #0]
 8014ba4:	fa00 f009 	lsl.w	r0, r0, r9
 8014ba8:	4310      	orrs	r0, r2
 8014baa:	f84a 0b04 	str.w	r0, [sl], #4
 8014bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bb2:	459c      	cmp	ip, r3
 8014bb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8014bb8:	d8f3      	bhi.n	8014ba2 <__lshift+0x6e>
 8014bba:	ebac 0304 	sub.w	r3, ip, r4
 8014bbe:	3b15      	subs	r3, #21
 8014bc0:	f023 0303 	bic.w	r3, r3, #3
 8014bc4:	3304      	adds	r3, #4
 8014bc6:	f104 0015 	add.w	r0, r4, #21
 8014bca:	4560      	cmp	r0, ip
 8014bcc:	bf88      	it	hi
 8014bce:	2304      	movhi	r3, #4
 8014bd0:	50ca      	str	r2, [r1, r3]
 8014bd2:	b10a      	cbz	r2, 8014bd8 <__lshift+0xa4>
 8014bd4:	f108 0602 	add.w	r6, r8, #2
 8014bd8:	3e01      	subs	r6, #1
 8014bda:	4638      	mov	r0, r7
 8014bdc:	612e      	str	r6, [r5, #16]
 8014bde:	4621      	mov	r1, r4
 8014be0:	f7ff fde2 	bl	80147a8 <_Bfree>
 8014be4:	4628      	mov	r0, r5
 8014be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bea:	f842 0f04 	str.w	r0, [r2, #4]!
 8014bee:	3301      	adds	r3, #1
 8014bf0:	e7c5      	b.n	8014b7e <__lshift+0x4a>
 8014bf2:	3904      	subs	r1, #4
 8014bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bf8:	f841 2f04 	str.w	r2, [r1, #4]!
 8014bfc:	459c      	cmp	ip, r3
 8014bfe:	d8f9      	bhi.n	8014bf4 <__lshift+0xc0>
 8014c00:	e7ea      	b.n	8014bd8 <__lshift+0xa4>
 8014c02:	bf00      	nop
 8014c04:	0801876c 	.word	0x0801876c
 8014c08:	0801878e 	.word	0x0801878e

08014c0c <__mcmp>:
 8014c0c:	690a      	ldr	r2, [r1, #16]
 8014c0e:	4603      	mov	r3, r0
 8014c10:	6900      	ldr	r0, [r0, #16]
 8014c12:	1a80      	subs	r0, r0, r2
 8014c14:	b530      	push	{r4, r5, lr}
 8014c16:	d10e      	bne.n	8014c36 <__mcmp+0x2a>
 8014c18:	3314      	adds	r3, #20
 8014c1a:	3114      	adds	r1, #20
 8014c1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014c20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014c24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014c28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014c2c:	4295      	cmp	r5, r2
 8014c2e:	d003      	beq.n	8014c38 <__mcmp+0x2c>
 8014c30:	d205      	bcs.n	8014c3e <__mcmp+0x32>
 8014c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c36:	bd30      	pop	{r4, r5, pc}
 8014c38:	42a3      	cmp	r3, r4
 8014c3a:	d3f3      	bcc.n	8014c24 <__mcmp+0x18>
 8014c3c:	e7fb      	b.n	8014c36 <__mcmp+0x2a>
 8014c3e:	2001      	movs	r0, #1
 8014c40:	e7f9      	b.n	8014c36 <__mcmp+0x2a>
	...

08014c44 <__mdiff>:
 8014c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c48:	4689      	mov	r9, r1
 8014c4a:	4606      	mov	r6, r0
 8014c4c:	4611      	mov	r1, r2
 8014c4e:	4648      	mov	r0, r9
 8014c50:	4614      	mov	r4, r2
 8014c52:	f7ff ffdb 	bl	8014c0c <__mcmp>
 8014c56:	1e05      	subs	r5, r0, #0
 8014c58:	d112      	bne.n	8014c80 <__mdiff+0x3c>
 8014c5a:	4629      	mov	r1, r5
 8014c5c:	4630      	mov	r0, r6
 8014c5e:	f7ff fd63 	bl	8014728 <_Balloc>
 8014c62:	4602      	mov	r2, r0
 8014c64:	b928      	cbnz	r0, 8014c72 <__mdiff+0x2e>
 8014c66:	4b3f      	ldr	r3, [pc, #252]	@ (8014d64 <__mdiff+0x120>)
 8014c68:	f240 2137 	movw	r1, #567	@ 0x237
 8014c6c:	483e      	ldr	r0, [pc, #248]	@ (8014d68 <__mdiff+0x124>)
 8014c6e:	f000 fb11 	bl	8015294 <__assert_func>
 8014c72:	2301      	movs	r3, #1
 8014c74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014c78:	4610      	mov	r0, r2
 8014c7a:	b003      	add	sp, #12
 8014c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c80:	bfbc      	itt	lt
 8014c82:	464b      	movlt	r3, r9
 8014c84:	46a1      	movlt	r9, r4
 8014c86:	4630      	mov	r0, r6
 8014c88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014c8c:	bfba      	itte	lt
 8014c8e:	461c      	movlt	r4, r3
 8014c90:	2501      	movlt	r5, #1
 8014c92:	2500      	movge	r5, #0
 8014c94:	f7ff fd48 	bl	8014728 <_Balloc>
 8014c98:	4602      	mov	r2, r0
 8014c9a:	b918      	cbnz	r0, 8014ca4 <__mdiff+0x60>
 8014c9c:	4b31      	ldr	r3, [pc, #196]	@ (8014d64 <__mdiff+0x120>)
 8014c9e:	f240 2145 	movw	r1, #581	@ 0x245
 8014ca2:	e7e3      	b.n	8014c6c <__mdiff+0x28>
 8014ca4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014ca8:	6926      	ldr	r6, [r4, #16]
 8014caa:	60c5      	str	r5, [r0, #12]
 8014cac:	f109 0310 	add.w	r3, r9, #16
 8014cb0:	f109 0514 	add.w	r5, r9, #20
 8014cb4:	f104 0e14 	add.w	lr, r4, #20
 8014cb8:	f100 0b14 	add.w	fp, r0, #20
 8014cbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014cc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014cc4:	9301      	str	r3, [sp, #4]
 8014cc6:	46d9      	mov	r9, fp
 8014cc8:	f04f 0c00 	mov.w	ip, #0
 8014ccc:	9b01      	ldr	r3, [sp, #4]
 8014cce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014cd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014cd6:	9301      	str	r3, [sp, #4]
 8014cd8:	fa1f f38a 	uxth.w	r3, sl
 8014cdc:	4619      	mov	r1, r3
 8014cde:	b283      	uxth	r3, r0
 8014ce0:	1acb      	subs	r3, r1, r3
 8014ce2:	0c00      	lsrs	r0, r0, #16
 8014ce4:	4463      	add	r3, ip
 8014ce6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014cea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014cf4:	4576      	cmp	r6, lr
 8014cf6:	f849 3b04 	str.w	r3, [r9], #4
 8014cfa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014cfe:	d8e5      	bhi.n	8014ccc <__mdiff+0x88>
 8014d00:	1b33      	subs	r3, r6, r4
 8014d02:	3b15      	subs	r3, #21
 8014d04:	f023 0303 	bic.w	r3, r3, #3
 8014d08:	3415      	adds	r4, #21
 8014d0a:	3304      	adds	r3, #4
 8014d0c:	42a6      	cmp	r6, r4
 8014d0e:	bf38      	it	cc
 8014d10:	2304      	movcc	r3, #4
 8014d12:	441d      	add	r5, r3
 8014d14:	445b      	add	r3, fp
 8014d16:	461e      	mov	r6, r3
 8014d18:	462c      	mov	r4, r5
 8014d1a:	4544      	cmp	r4, r8
 8014d1c:	d30e      	bcc.n	8014d3c <__mdiff+0xf8>
 8014d1e:	f108 0103 	add.w	r1, r8, #3
 8014d22:	1b49      	subs	r1, r1, r5
 8014d24:	f021 0103 	bic.w	r1, r1, #3
 8014d28:	3d03      	subs	r5, #3
 8014d2a:	45a8      	cmp	r8, r5
 8014d2c:	bf38      	it	cc
 8014d2e:	2100      	movcc	r1, #0
 8014d30:	440b      	add	r3, r1
 8014d32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014d36:	b191      	cbz	r1, 8014d5e <__mdiff+0x11a>
 8014d38:	6117      	str	r7, [r2, #16]
 8014d3a:	e79d      	b.n	8014c78 <__mdiff+0x34>
 8014d3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014d40:	46e6      	mov	lr, ip
 8014d42:	0c08      	lsrs	r0, r1, #16
 8014d44:	fa1c fc81 	uxtah	ip, ip, r1
 8014d48:	4471      	add	r1, lr
 8014d4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014d4e:	b289      	uxth	r1, r1
 8014d50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014d54:	f846 1b04 	str.w	r1, [r6], #4
 8014d58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014d5c:	e7dd      	b.n	8014d1a <__mdiff+0xd6>
 8014d5e:	3f01      	subs	r7, #1
 8014d60:	e7e7      	b.n	8014d32 <__mdiff+0xee>
 8014d62:	bf00      	nop
 8014d64:	0801876c 	.word	0x0801876c
 8014d68:	0801878e 	.word	0x0801878e

08014d6c <__d2b>:
 8014d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014d70:	460f      	mov	r7, r1
 8014d72:	2101      	movs	r1, #1
 8014d74:	ec59 8b10 	vmov	r8, r9, d0
 8014d78:	4616      	mov	r6, r2
 8014d7a:	f7ff fcd5 	bl	8014728 <_Balloc>
 8014d7e:	4604      	mov	r4, r0
 8014d80:	b930      	cbnz	r0, 8014d90 <__d2b+0x24>
 8014d82:	4602      	mov	r2, r0
 8014d84:	4b23      	ldr	r3, [pc, #140]	@ (8014e14 <__d2b+0xa8>)
 8014d86:	4824      	ldr	r0, [pc, #144]	@ (8014e18 <__d2b+0xac>)
 8014d88:	f240 310f 	movw	r1, #783	@ 0x30f
 8014d8c:	f000 fa82 	bl	8015294 <__assert_func>
 8014d90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014d94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014d98:	b10d      	cbz	r5, 8014d9e <__d2b+0x32>
 8014d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014d9e:	9301      	str	r3, [sp, #4]
 8014da0:	f1b8 0300 	subs.w	r3, r8, #0
 8014da4:	d023      	beq.n	8014dee <__d2b+0x82>
 8014da6:	4668      	mov	r0, sp
 8014da8:	9300      	str	r3, [sp, #0]
 8014daa:	f7ff fd84 	bl	80148b6 <__lo0bits>
 8014dae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014db2:	b1d0      	cbz	r0, 8014dea <__d2b+0x7e>
 8014db4:	f1c0 0320 	rsb	r3, r0, #32
 8014db8:	fa02 f303 	lsl.w	r3, r2, r3
 8014dbc:	430b      	orrs	r3, r1
 8014dbe:	40c2      	lsrs	r2, r0
 8014dc0:	6163      	str	r3, [r4, #20]
 8014dc2:	9201      	str	r2, [sp, #4]
 8014dc4:	9b01      	ldr	r3, [sp, #4]
 8014dc6:	61a3      	str	r3, [r4, #24]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	bf0c      	ite	eq
 8014dcc:	2201      	moveq	r2, #1
 8014dce:	2202      	movne	r2, #2
 8014dd0:	6122      	str	r2, [r4, #16]
 8014dd2:	b1a5      	cbz	r5, 8014dfe <__d2b+0x92>
 8014dd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014dd8:	4405      	add	r5, r0
 8014dda:	603d      	str	r5, [r7, #0]
 8014ddc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014de0:	6030      	str	r0, [r6, #0]
 8014de2:	4620      	mov	r0, r4
 8014de4:	b003      	add	sp, #12
 8014de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014dea:	6161      	str	r1, [r4, #20]
 8014dec:	e7ea      	b.n	8014dc4 <__d2b+0x58>
 8014dee:	a801      	add	r0, sp, #4
 8014df0:	f7ff fd61 	bl	80148b6 <__lo0bits>
 8014df4:	9b01      	ldr	r3, [sp, #4]
 8014df6:	6163      	str	r3, [r4, #20]
 8014df8:	3020      	adds	r0, #32
 8014dfa:	2201      	movs	r2, #1
 8014dfc:	e7e8      	b.n	8014dd0 <__d2b+0x64>
 8014dfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014e02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014e06:	6038      	str	r0, [r7, #0]
 8014e08:	6918      	ldr	r0, [r3, #16]
 8014e0a:	f7ff fd35 	bl	8014878 <__hi0bits>
 8014e0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014e12:	e7e5      	b.n	8014de0 <__d2b+0x74>
 8014e14:	0801876c 	.word	0x0801876c
 8014e18:	0801878e 	.word	0x0801878e

08014e1c <__sread>:
 8014e1c:	b510      	push	{r4, lr}
 8014e1e:	460c      	mov	r4, r1
 8014e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e24:	f000 f9d2 	bl	80151cc <_read_r>
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	bfab      	itete	ge
 8014e2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8014e30:	181b      	addge	r3, r3, r0
 8014e32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014e36:	bfac      	ite	ge
 8014e38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014e3a:	81a3      	strhlt	r3, [r4, #12]
 8014e3c:	bd10      	pop	{r4, pc}

08014e3e <__swrite>:
 8014e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e42:	461f      	mov	r7, r3
 8014e44:	898b      	ldrh	r3, [r1, #12]
 8014e46:	05db      	lsls	r3, r3, #23
 8014e48:	4605      	mov	r5, r0
 8014e4a:	460c      	mov	r4, r1
 8014e4c:	4616      	mov	r6, r2
 8014e4e:	d505      	bpl.n	8014e5c <__swrite+0x1e>
 8014e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e54:	2302      	movs	r3, #2
 8014e56:	2200      	movs	r2, #0
 8014e58:	f000 f9a6 	bl	80151a8 <_lseek_r>
 8014e5c:	89a3      	ldrh	r3, [r4, #12]
 8014e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014e66:	81a3      	strh	r3, [r4, #12]
 8014e68:	4632      	mov	r2, r6
 8014e6a:	463b      	mov	r3, r7
 8014e6c:	4628      	mov	r0, r5
 8014e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e72:	f000 b9cd 	b.w	8015210 <_write_r>

08014e76 <__sseek>:
 8014e76:	b510      	push	{r4, lr}
 8014e78:	460c      	mov	r4, r1
 8014e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e7e:	f000 f993 	bl	80151a8 <_lseek_r>
 8014e82:	1c43      	adds	r3, r0, #1
 8014e84:	89a3      	ldrh	r3, [r4, #12]
 8014e86:	bf15      	itete	ne
 8014e88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014e8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014e8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014e92:	81a3      	strheq	r3, [r4, #12]
 8014e94:	bf18      	it	ne
 8014e96:	81a3      	strhne	r3, [r4, #12]
 8014e98:	bd10      	pop	{r4, pc}

08014e9a <__sclose>:
 8014e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e9e:	f000 b9c9 	b.w	8015234 <_close_r>

08014ea2 <_realloc_r>:
 8014ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ea6:	4607      	mov	r7, r0
 8014ea8:	4614      	mov	r4, r2
 8014eaa:	460d      	mov	r5, r1
 8014eac:	b921      	cbnz	r1, 8014eb8 <_realloc_r+0x16>
 8014eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014eb2:	4611      	mov	r1, r2
 8014eb4:	f7ff bb00 	b.w	80144b8 <_malloc_r>
 8014eb8:	b92a      	cbnz	r2, 8014ec6 <_realloc_r+0x24>
 8014eba:	f000 fa1d 	bl	80152f8 <_free_r>
 8014ebe:	4625      	mov	r5, r4
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ec6:	f000 fa73 	bl	80153b0 <_malloc_usable_size_r>
 8014eca:	4284      	cmp	r4, r0
 8014ecc:	4606      	mov	r6, r0
 8014ece:	d802      	bhi.n	8014ed6 <_realloc_r+0x34>
 8014ed0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014ed4:	d8f4      	bhi.n	8014ec0 <_realloc_r+0x1e>
 8014ed6:	4621      	mov	r1, r4
 8014ed8:	4638      	mov	r0, r7
 8014eda:	f7ff faed 	bl	80144b8 <_malloc_r>
 8014ede:	4680      	mov	r8, r0
 8014ee0:	b908      	cbnz	r0, 8014ee6 <_realloc_r+0x44>
 8014ee2:	4645      	mov	r5, r8
 8014ee4:	e7ec      	b.n	8014ec0 <_realloc_r+0x1e>
 8014ee6:	42b4      	cmp	r4, r6
 8014ee8:	4622      	mov	r2, r4
 8014eea:	4629      	mov	r1, r5
 8014eec:	bf28      	it	cs
 8014eee:	4632      	movcs	r2, r6
 8014ef0:	f000 f9c2 	bl	8015278 <memcpy>
 8014ef4:	4629      	mov	r1, r5
 8014ef6:	4638      	mov	r0, r7
 8014ef8:	f000 f9fe 	bl	80152f8 <_free_r>
 8014efc:	e7f1      	b.n	8014ee2 <_realloc_r+0x40>

08014efe <__swbuf_r>:
 8014efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f00:	460e      	mov	r6, r1
 8014f02:	4614      	mov	r4, r2
 8014f04:	4605      	mov	r5, r0
 8014f06:	b118      	cbz	r0, 8014f10 <__swbuf_r+0x12>
 8014f08:	6a03      	ldr	r3, [r0, #32]
 8014f0a:	b90b      	cbnz	r3, 8014f10 <__swbuf_r+0x12>
 8014f0c:	f7fe f8d0 	bl	80130b0 <__sinit>
 8014f10:	69a3      	ldr	r3, [r4, #24]
 8014f12:	60a3      	str	r3, [r4, #8]
 8014f14:	89a3      	ldrh	r3, [r4, #12]
 8014f16:	071a      	lsls	r2, r3, #28
 8014f18:	d501      	bpl.n	8014f1e <__swbuf_r+0x20>
 8014f1a:	6923      	ldr	r3, [r4, #16]
 8014f1c:	b943      	cbnz	r3, 8014f30 <__swbuf_r+0x32>
 8014f1e:	4621      	mov	r1, r4
 8014f20:	4628      	mov	r0, r5
 8014f22:	f000 f82b 	bl	8014f7c <__swsetup_r>
 8014f26:	b118      	cbz	r0, 8014f30 <__swbuf_r+0x32>
 8014f28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014f2c:	4638      	mov	r0, r7
 8014f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f30:	6823      	ldr	r3, [r4, #0]
 8014f32:	6922      	ldr	r2, [r4, #16]
 8014f34:	1a98      	subs	r0, r3, r2
 8014f36:	6963      	ldr	r3, [r4, #20]
 8014f38:	b2f6      	uxtb	r6, r6
 8014f3a:	4283      	cmp	r3, r0
 8014f3c:	4637      	mov	r7, r6
 8014f3e:	dc05      	bgt.n	8014f4c <__swbuf_r+0x4e>
 8014f40:	4621      	mov	r1, r4
 8014f42:	4628      	mov	r0, r5
 8014f44:	f7ff fbbc 	bl	80146c0 <_fflush_r>
 8014f48:	2800      	cmp	r0, #0
 8014f4a:	d1ed      	bne.n	8014f28 <__swbuf_r+0x2a>
 8014f4c:	68a3      	ldr	r3, [r4, #8]
 8014f4e:	3b01      	subs	r3, #1
 8014f50:	60a3      	str	r3, [r4, #8]
 8014f52:	6823      	ldr	r3, [r4, #0]
 8014f54:	1c5a      	adds	r2, r3, #1
 8014f56:	6022      	str	r2, [r4, #0]
 8014f58:	701e      	strb	r6, [r3, #0]
 8014f5a:	6962      	ldr	r2, [r4, #20]
 8014f5c:	1c43      	adds	r3, r0, #1
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	d004      	beq.n	8014f6c <__swbuf_r+0x6e>
 8014f62:	89a3      	ldrh	r3, [r4, #12]
 8014f64:	07db      	lsls	r3, r3, #31
 8014f66:	d5e1      	bpl.n	8014f2c <__swbuf_r+0x2e>
 8014f68:	2e0a      	cmp	r6, #10
 8014f6a:	d1df      	bne.n	8014f2c <__swbuf_r+0x2e>
 8014f6c:	4621      	mov	r1, r4
 8014f6e:	4628      	mov	r0, r5
 8014f70:	f7ff fba6 	bl	80146c0 <_fflush_r>
 8014f74:	2800      	cmp	r0, #0
 8014f76:	d0d9      	beq.n	8014f2c <__swbuf_r+0x2e>
 8014f78:	e7d6      	b.n	8014f28 <__swbuf_r+0x2a>
	...

08014f7c <__swsetup_r>:
 8014f7c:	b538      	push	{r3, r4, r5, lr}
 8014f7e:	4b29      	ldr	r3, [pc, #164]	@ (8015024 <__swsetup_r+0xa8>)
 8014f80:	4605      	mov	r5, r0
 8014f82:	6818      	ldr	r0, [r3, #0]
 8014f84:	460c      	mov	r4, r1
 8014f86:	b118      	cbz	r0, 8014f90 <__swsetup_r+0x14>
 8014f88:	6a03      	ldr	r3, [r0, #32]
 8014f8a:	b90b      	cbnz	r3, 8014f90 <__swsetup_r+0x14>
 8014f8c:	f7fe f890 	bl	80130b0 <__sinit>
 8014f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f94:	0719      	lsls	r1, r3, #28
 8014f96:	d422      	bmi.n	8014fde <__swsetup_r+0x62>
 8014f98:	06da      	lsls	r2, r3, #27
 8014f9a:	d407      	bmi.n	8014fac <__swsetup_r+0x30>
 8014f9c:	2209      	movs	r2, #9
 8014f9e:	602a      	str	r2, [r5, #0]
 8014fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014fa4:	81a3      	strh	r3, [r4, #12]
 8014fa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014faa:	e033      	b.n	8015014 <__swsetup_r+0x98>
 8014fac:	0758      	lsls	r0, r3, #29
 8014fae:	d512      	bpl.n	8014fd6 <__swsetup_r+0x5a>
 8014fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014fb2:	b141      	cbz	r1, 8014fc6 <__swsetup_r+0x4a>
 8014fb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014fb8:	4299      	cmp	r1, r3
 8014fba:	d002      	beq.n	8014fc2 <__swsetup_r+0x46>
 8014fbc:	4628      	mov	r0, r5
 8014fbe:	f000 f99b 	bl	80152f8 <_free_r>
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8014fc6:	89a3      	ldrh	r3, [r4, #12]
 8014fc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014fcc:	81a3      	strh	r3, [r4, #12]
 8014fce:	2300      	movs	r3, #0
 8014fd0:	6063      	str	r3, [r4, #4]
 8014fd2:	6923      	ldr	r3, [r4, #16]
 8014fd4:	6023      	str	r3, [r4, #0]
 8014fd6:	89a3      	ldrh	r3, [r4, #12]
 8014fd8:	f043 0308 	orr.w	r3, r3, #8
 8014fdc:	81a3      	strh	r3, [r4, #12]
 8014fde:	6923      	ldr	r3, [r4, #16]
 8014fe0:	b94b      	cbnz	r3, 8014ff6 <__swsetup_r+0x7a>
 8014fe2:	89a3      	ldrh	r3, [r4, #12]
 8014fe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014fec:	d003      	beq.n	8014ff6 <__swsetup_r+0x7a>
 8014fee:	4621      	mov	r1, r4
 8014ff0:	4628      	mov	r0, r5
 8014ff2:	f000 f83f 	bl	8015074 <__smakebuf_r>
 8014ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ffa:	f013 0201 	ands.w	r2, r3, #1
 8014ffe:	d00a      	beq.n	8015016 <__swsetup_r+0x9a>
 8015000:	2200      	movs	r2, #0
 8015002:	60a2      	str	r2, [r4, #8]
 8015004:	6962      	ldr	r2, [r4, #20]
 8015006:	4252      	negs	r2, r2
 8015008:	61a2      	str	r2, [r4, #24]
 801500a:	6922      	ldr	r2, [r4, #16]
 801500c:	b942      	cbnz	r2, 8015020 <__swsetup_r+0xa4>
 801500e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015012:	d1c5      	bne.n	8014fa0 <__swsetup_r+0x24>
 8015014:	bd38      	pop	{r3, r4, r5, pc}
 8015016:	0799      	lsls	r1, r3, #30
 8015018:	bf58      	it	pl
 801501a:	6962      	ldrpl	r2, [r4, #20]
 801501c:	60a2      	str	r2, [r4, #8]
 801501e:	e7f4      	b.n	801500a <__swsetup_r+0x8e>
 8015020:	2000      	movs	r0, #0
 8015022:	e7f7      	b.n	8015014 <__swsetup_r+0x98>
 8015024:	200000a4 	.word	0x200000a4

08015028 <__swhatbuf_r>:
 8015028:	b570      	push	{r4, r5, r6, lr}
 801502a:	460c      	mov	r4, r1
 801502c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015030:	2900      	cmp	r1, #0
 8015032:	b096      	sub	sp, #88	@ 0x58
 8015034:	4615      	mov	r5, r2
 8015036:	461e      	mov	r6, r3
 8015038:	da0d      	bge.n	8015056 <__swhatbuf_r+0x2e>
 801503a:	89a3      	ldrh	r3, [r4, #12]
 801503c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015040:	f04f 0100 	mov.w	r1, #0
 8015044:	bf14      	ite	ne
 8015046:	2340      	movne	r3, #64	@ 0x40
 8015048:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801504c:	2000      	movs	r0, #0
 801504e:	6031      	str	r1, [r6, #0]
 8015050:	602b      	str	r3, [r5, #0]
 8015052:	b016      	add	sp, #88	@ 0x58
 8015054:	bd70      	pop	{r4, r5, r6, pc}
 8015056:	466a      	mov	r2, sp
 8015058:	f000 f8fc 	bl	8015254 <_fstat_r>
 801505c:	2800      	cmp	r0, #0
 801505e:	dbec      	blt.n	801503a <__swhatbuf_r+0x12>
 8015060:	9901      	ldr	r1, [sp, #4]
 8015062:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015066:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801506a:	4259      	negs	r1, r3
 801506c:	4159      	adcs	r1, r3
 801506e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015072:	e7eb      	b.n	801504c <__swhatbuf_r+0x24>

08015074 <__smakebuf_r>:
 8015074:	898b      	ldrh	r3, [r1, #12]
 8015076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015078:	079d      	lsls	r5, r3, #30
 801507a:	4606      	mov	r6, r0
 801507c:	460c      	mov	r4, r1
 801507e:	d507      	bpl.n	8015090 <__smakebuf_r+0x1c>
 8015080:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015084:	6023      	str	r3, [r4, #0]
 8015086:	6123      	str	r3, [r4, #16]
 8015088:	2301      	movs	r3, #1
 801508a:	6163      	str	r3, [r4, #20]
 801508c:	b003      	add	sp, #12
 801508e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015090:	ab01      	add	r3, sp, #4
 8015092:	466a      	mov	r2, sp
 8015094:	f7ff ffc8 	bl	8015028 <__swhatbuf_r>
 8015098:	9f00      	ldr	r7, [sp, #0]
 801509a:	4605      	mov	r5, r0
 801509c:	4639      	mov	r1, r7
 801509e:	4630      	mov	r0, r6
 80150a0:	f7ff fa0a 	bl	80144b8 <_malloc_r>
 80150a4:	b948      	cbnz	r0, 80150ba <__smakebuf_r+0x46>
 80150a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150aa:	059a      	lsls	r2, r3, #22
 80150ac:	d4ee      	bmi.n	801508c <__smakebuf_r+0x18>
 80150ae:	f023 0303 	bic.w	r3, r3, #3
 80150b2:	f043 0302 	orr.w	r3, r3, #2
 80150b6:	81a3      	strh	r3, [r4, #12]
 80150b8:	e7e2      	b.n	8015080 <__smakebuf_r+0xc>
 80150ba:	89a3      	ldrh	r3, [r4, #12]
 80150bc:	6020      	str	r0, [r4, #0]
 80150be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80150c2:	81a3      	strh	r3, [r4, #12]
 80150c4:	9b01      	ldr	r3, [sp, #4]
 80150c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80150ca:	b15b      	cbz	r3, 80150e4 <__smakebuf_r+0x70>
 80150cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150d0:	4630      	mov	r0, r6
 80150d2:	f000 f859 	bl	8015188 <_isatty_r>
 80150d6:	b128      	cbz	r0, 80150e4 <__smakebuf_r+0x70>
 80150d8:	89a3      	ldrh	r3, [r4, #12]
 80150da:	f023 0303 	bic.w	r3, r3, #3
 80150de:	f043 0301 	orr.w	r3, r3, #1
 80150e2:	81a3      	strh	r3, [r4, #12]
 80150e4:	89a3      	ldrh	r3, [r4, #12]
 80150e6:	431d      	orrs	r5, r3
 80150e8:	81a5      	strh	r5, [r4, #12]
 80150ea:	e7cf      	b.n	801508c <__smakebuf_r+0x18>

080150ec <_putc_r>:
 80150ec:	b570      	push	{r4, r5, r6, lr}
 80150ee:	460d      	mov	r5, r1
 80150f0:	4614      	mov	r4, r2
 80150f2:	4606      	mov	r6, r0
 80150f4:	b118      	cbz	r0, 80150fe <_putc_r+0x12>
 80150f6:	6a03      	ldr	r3, [r0, #32]
 80150f8:	b90b      	cbnz	r3, 80150fe <_putc_r+0x12>
 80150fa:	f7fd ffd9 	bl	80130b0 <__sinit>
 80150fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015100:	07d8      	lsls	r0, r3, #31
 8015102:	d405      	bmi.n	8015110 <_putc_r+0x24>
 8015104:	89a3      	ldrh	r3, [r4, #12]
 8015106:	0599      	lsls	r1, r3, #22
 8015108:	d402      	bmi.n	8015110 <_putc_r+0x24>
 801510a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801510c:	f7fe f8b1 	bl	8013272 <__retarget_lock_acquire_recursive>
 8015110:	68a3      	ldr	r3, [r4, #8]
 8015112:	3b01      	subs	r3, #1
 8015114:	2b00      	cmp	r3, #0
 8015116:	60a3      	str	r3, [r4, #8]
 8015118:	da05      	bge.n	8015126 <_putc_r+0x3a>
 801511a:	69a2      	ldr	r2, [r4, #24]
 801511c:	4293      	cmp	r3, r2
 801511e:	db12      	blt.n	8015146 <_putc_r+0x5a>
 8015120:	b2eb      	uxtb	r3, r5
 8015122:	2b0a      	cmp	r3, #10
 8015124:	d00f      	beq.n	8015146 <_putc_r+0x5a>
 8015126:	6823      	ldr	r3, [r4, #0]
 8015128:	1c5a      	adds	r2, r3, #1
 801512a:	6022      	str	r2, [r4, #0]
 801512c:	701d      	strb	r5, [r3, #0]
 801512e:	b2ed      	uxtb	r5, r5
 8015130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015132:	07da      	lsls	r2, r3, #31
 8015134:	d405      	bmi.n	8015142 <_putc_r+0x56>
 8015136:	89a3      	ldrh	r3, [r4, #12]
 8015138:	059b      	lsls	r3, r3, #22
 801513a:	d402      	bmi.n	8015142 <_putc_r+0x56>
 801513c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801513e:	f7fe f899 	bl	8013274 <__retarget_lock_release_recursive>
 8015142:	4628      	mov	r0, r5
 8015144:	bd70      	pop	{r4, r5, r6, pc}
 8015146:	4629      	mov	r1, r5
 8015148:	4622      	mov	r2, r4
 801514a:	4630      	mov	r0, r6
 801514c:	f7ff fed7 	bl	8014efe <__swbuf_r>
 8015150:	4605      	mov	r5, r0
 8015152:	e7ed      	b.n	8015130 <_putc_r+0x44>

08015154 <memmove>:
 8015154:	4288      	cmp	r0, r1
 8015156:	b510      	push	{r4, lr}
 8015158:	eb01 0402 	add.w	r4, r1, r2
 801515c:	d902      	bls.n	8015164 <memmove+0x10>
 801515e:	4284      	cmp	r4, r0
 8015160:	4623      	mov	r3, r4
 8015162:	d807      	bhi.n	8015174 <memmove+0x20>
 8015164:	1e43      	subs	r3, r0, #1
 8015166:	42a1      	cmp	r1, r4
 8015168:	d008      	beq.n	801517c <memmove+0x28>
 801516a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801516e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015172:	e7f8      	b.n	8015166 <memmove+0x12>
 8015174:	4402      	add	r2, r0
 8015176:	4601      	mov	r1, r0
 8015178:	428a      	cmp	r2, r1
 801517a:	d100      	bne.n	801517e <memmove+0x2a>
 801517c:	bd10      	pop	{r4, pc}
 801517e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015186:	e7f7      	b.n	8015178 <memmove+0x24>

08015188 <_isatty_r>:
 8015188:	b538      	push	{r3, r4, r5, lr}
 801518a:	4d06      	ldr	r5, [pc, #24]	@ (80151a4 <_isatty_r+0x1c>)
 801518c:	2300      	movs	r3, #0
 801518e:	4604      	mov	r4, r0
 8015190:	4608      	mov	r0, r1
 8015192:	602b      	str	r3, [r5, #0]
 8015194:	f7ee f9fa 	bl	800358c <_isatty>
 8015198:	1c43      	adds	r3, r0, #1
 801519a:	d102      	bne.n	80151a2 <_isatty_r+0x1a>
 801519c:	682b      	ldr	r3, [r5, #0]
 801519e:	b103      	cbz	r3, 80151a2 <_isatty_r+0x1a>
 80151a0:	6023      	str	r3, [r4, #0]
 80151a2:	bd38      	pop	{r3, r4, r5, pc}
 80151a4:	20000830 	.word	0x20000830

080151a8 <_lseek_r>:
 80151a8:	b538      	push	{r3, r4, r5, lr}
 80151aa:	4d07      	ldr	r5, [pc, #28]	@ (80151c8 <_lseek_r+0x20>)
 80151ac:	4604      	mov	r4, r0
 80151ae:	4608      	mov	r0, r1
 80151b0:	4611      	mov	r1, r2
 80151b2:	2200      	movs	r2, #0
 80151b4:	602a      	str	r2, [r5, #0]
 80151b6:	461a      	mov	r2, r3
 80151b8:	f7ee f9f3 	bl	80035a2 <_lseek>
 80151bc:	1c43      	adds	r3, r0, #1
 80151be:	d102      	bne.n	80151c6 <_lseek_r+0x1e>
 80151c0:	682b      	ldr	r3, [r5, #0]
 80151c2:	b103      	cbz	r3, 80151c6 <_lseek_r+0x1e>
 80151c4:	6023      	str	r3, [r4, #0]
 80151c6:	bd38      	pop	{r3, r4, r5, pc}
 80151c8:	20000830 	.word	0x20000830

080151cc <_read_r>:
 80151cc:	b538      	push	{r3, r4, r5, lr}
 80151ce:	4d07      	ldr	r5, [pc, #28]	@ (80151ec <_read_r+0x20>)
 80151d0:	4604      	mov	r4, r0
 80151d2:	4608      	mov	r0, r1
 80151d4:	4611      	mov	r1, r2
 80151d6:	2200      	movs	r2, #0
 80151d8:	602a      	str	r2, [r5, #0]
 80151da:	461a      	mov	r2, r3
 80151dc:	f7ee f99d 	bl	800351a <_read>
 80151e0:	1c43      	adds	r3, r0, #1
 80151e2:	d102      	bne.n	80151ea <_read_r+0x1e>
 80151e4:	682b      	ldr	r3, [r5, #0]
 80151e6:	b103      	cbz	r3, 80151ea <_read_r+0x1e>
 80151e8:	6023      	str	r3, [r4, #0]
 80151ea:	bd38      	pop	{r3, r4, r5, pc}
 80151ec:	20000830 	.word	0x20000830

080151f0 <_sbrk_r>:
 80151f0:	b538      	push	{r3, r4, r5, lr}
 80151f2:	4d06      	ldr	r5, [pc, #24]	@ (801520c <_sbrk_r+0x1c>)
 80151f4:	2300      	movs	r3, #0
 80151f6:	4604      	mov	r4, r0
 80151f8:	4608      	mov	r0, r1
 80151fa:	602b      	str	r3, [r5, #0]
 80151fc:	f7ee f9de 	bl	80035bc <_sbrk>
 8015200:	1c43      	adds	r3, r0, #1
 8015202:	d102      	bne.n	801520a <_sbrk_r+0x1a>
 8015204:	682b      	ldr	r3, [r5, #0]
 8015206:	b103      	cbz	r3, 801520a <_sbrk_r+0x1a>
 8015208:	6023      	str	r3, [r4, #0]
 801520a:	bd38      	pop	{r3, r4, r5, pc}
 801520c:	20000830 	.word	0x20000830

08015210 <_write_r>:
 8015210:	b538      	push	{r3, r4, r5, lr}
 8015212:	4d07      	ldr	r5, [pc, #28]	@ (8015230 <_write_r+0x20>)
 8015214:	4604      	mov	r4, r0
 8015216:	4608      	mov	r0, r1
 8015218:	4611      	mov	r1, r2
 801521a:	2200      	movs	r2, #0
 801521c:	602a      	str	r2, [r5, #0]
 801521e:	461a      	mov	r2, r3
 8015220:	f7ed fade 	bl	80027e0 <_write>
 8015224:	1c43      	adds	r3, r0, #1
 8015226:	d102      	bne.n	801522e <_write_r+0x1e>
 8015228:	682b      	ldr	r3, [r5, #0]
 801522a:	b103      	cbz	r3, 801522e <_write_r+0x1e>
 801522c:	6023      	str	r3, [r4, #0]
 801522e:	bd38      	pop	{r3, r4, r5, pc}
 8015230:	20000830 	.word	0x20000830

08015234 <_close_r>:
 8015234:	b538      	push	{r3, r4, r5, lr}
 8015236:	4d06      	ldr	r5, [pc, #24]	@ (8015250 <_close_r+0x1c>)
 8015238:	2300      	movs	r3, #0
 801523a:	4604      	mov	r4, r0
 801523c:	4608      	mov	r0, r1
 801523e:	602b      	str	r3, [r5, #0]
 8015240:	f7ee f988 	bl	8003554 <_close>
 8015244:	1c43      	adds	r3, r0, #1
 8015246:	d102      	bne.n	801524e <_close_r+0x1a>
 8015248:	682b      	ldr	r3, [r5, #0]
 801524a:	b103      	cbz	r3, 801524e <_close_r+0x1a>
 801524c:	6023      	str	r3, [r4, #0]
 801524e:	bd38      	pop	{r3, r4, r5, pc}
 8015250:	20000830 	.word	0x20000830

08015254 <_fstat_r>:
 8015254:	b538      	push	{r3, r4, r5, lr}
 8015256:	4d07      	ldr	r5, [pc, #28]	@ (8015274 <_fstat_r+0x20>)
 8015258:	2300      	movs	r3, #0
 801525a:	4604      	mov	r4, r0
 801525c:	4608      	mov	r0, r1
 801525e:	4611      	mov	r1, r2
 8015260:	602b      	str	r3, [r5, #0]
 8015262:	f7ee f983 	bl	800356c <_fstat>
 8015266:	1c43      	adds	r3, r0, #1
 8015268:	d102      	bne.n	8015270 <_fstat_r+0x1c>
 801526a:	682b      	ldr	r3, [r5, #0]
 801526c:	b103      	cbz	r3, 8015270 <_fstat_r+0x1c>
 801526e:	6023      	str	r3, [r4, #0]
 8015270:	bd38      	pop	{r3, r4, r5, pc}
 8015272:	bf00      	nop
 8015274:	20000830 	.word	0x20000830

08015278 <memcpy>:
 8015278:	440a      	add	r2, r1
 801527a:	4291      	cmp	r1, r2
 801527c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015280:	d100      	bne.n	8015284 <memcpy+0xc>
 8015282:	4770      	bx	lr
 8015284:	b510      	push	{r4, lr}
 8015286:	f811 4b01 	ldrb.w	r4, [r1], #1
 801528a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801528e:	4291      	cmp	r1, r2
 8015290:	d1f9      	bne.n	8015286 <memcpy+0xe>
 8015292:	bd10      	pop	{r4, pc}

08015294 <__assert_func>:
 8015294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015296:	4614      	mov	r4, r2
 8015298:	461a      	mov	r2, r3
 801529a:	4b09      	ldr	r3, [pc, #36]	@ (80152c0 <__assert_func+0x2c>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	4605      	mov	r5, r0
 80152a0:	68d8      	ldr	r0, [r3, #12]
 80152a2:	b14c      	cbz	r4, 80152b8 <__assert_func+0x24>
 80152a4:	4b07      	ldr	r3, [pc, #28]	@ (80152c4 <__assert_func+0x30>)
 80152a6:	9100      	str	r1, [sp, #0]
 80152a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80152ac:	4906      	ldr	r1, [pc, #24]	@ (80152c8 <__assert_func+0x34>)
 80152ae:	462b      	mov	r3, r5
 80152b0:	f000 f886 	bl	80153c0 <fiprintf>
 80152b4:	f000 f8a3 	bl	80153fe <abort>
 80152b8:	4b04      	ldr	r3, [pc, #16]	@ (80152cc <__assert_func+0x38>)
 80152ba:	461c      	mov	r4, r3
 80152bc:	e7f3      	b.n	80152a6 <__assert_func+0x12>
 80152be:	bf00      	nop
 80152c0:	200000a4 	.word	0x200000a4
 80152c4:	080187f1 	.word	0x080187f1
 80152c8:	080187fe 	.word	0x080187fe
 80152cc:	0801882c 	.word	0x0801882c

080152d0 <_calloc_r>:
 80152d0:	b570      	push	{r4, r5, r6, lr}
 80152d2:	fba1 5402 	umull	r5, r4, r1, r2
 80152d6:	b934      	cbnz	r4, 80152e6 <_calloc_r+0x16>
 80152d8:	4629      	mov	r1, r5
 80152da:	f7ff f8ed 	bl	80144b8 <_malloc_r>
 80152de:	4606      	mov	r6, r0
 80152e0:	b928      	cbnz	r0, 80152ee <_calloc_r+0x1e>
 80152e2:	4630      	mov	r0, r6
 80152e4:	bd70      	pop	{r4, r5, r6, pc}
 80152e6:	220c      	movs	r2, #12
 80152e8:	6002      	str	r2, [r0, #0]
 80152ea:	2600      	movs	r6, #0
 80152ec:	e7f9      	b.n	80152e2 <_calloc_r+0x12>
 80152ee:	462a      	mov	r2, r5
 80152f0:	4621      	mov	r1, r4
 80152f2:	f7fd ff8b 	bl	801320c <memset>
 80152f6:	e7f4      	b.n	80152e2 <_calloc_r+0x12>

080152f8 <_free_r>:
 80152f8:	b538      	push	{r3, r4, r5, lr}
 80152fa:	4605      	mov	r5, r0
 80152fc:	2900      	cmp	r1, #0
 80152fe:	d041      	beq.n	8015384 <_free_r+0x8c>
 8015300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015304:	1f0c      	subs	r4, r1, #4
 8015306:	2b00      	cmp	r3, #0
 8015308:	bfb8      	it	lt
 801530a:	18e4      	addlt	r4, r4, r3
 801530c:	f7ff fa00 	bl	8014710 <__malloc_lock>
 8015310:	4a1d      	ldr	r2, [pc, #116]	@ (8015388 <_free_r+0x90>)
 8015312:	6813      	ldr	r3, [r2, #0]
 8015314:	b933      	cbnz	r3, 8015324 <_free_r+0x2c>
 8015316:	6063      	str	r3, [r4, #4]
 8015318:	6014      	str	r4, [r2, #0]
 801531a:	4628      	mov	r0, r5
 801531c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015320:	f7ff b9fc 	b.w	801471c <__malloc_unlock>
 8015324:	42a3      	cmp	r3, r4
 8015326:	d908      	bls.n	801533a <_free_r+0x42>
 8015328:	6820      	ldr	r0, [r4, #0]
 801532a:	1821      	adds	r1, r4, r0
 801532c:	428b      	cmp	r3, r1
 801532e:	bf01      	itttt	eq
 8015330:	6819      	ldreq	r1, [r3, #0]
 8015332:	685b      	ldreq	r3, [r3, #4]
 8015334:	1809      	addeq	r1, r1, r0
 8015336:	6021      	streq	r1, [r4, #0]
 8015338:	e7ed      	b.n	8015316 <_free_r+0x1e>
 801533a:	461a      	mov	r2, r3
 801533c:	685b      	ldr	r3, [r3, #4]
 801533e:	b10b      	cbz	r3, 8015344 <_free_r+0x4c>
 8015340:	42a3      	cmp	r3, r4
 8015342:	d9fa      	bls.n	801533a <_free_r+0x42>
 8015344:	6811      	ldr	r1, [r2, #0]
 8015346:	1850      	adds	r0, r2, r1
 8015348:	42a0      	cmp	r0, r4
 801534a:	d10b      	bne.n	8015364 <_free_r+0x6c>
 801534c:	6820      	ldr	r0, [r4, #0]
 801534e:	4401      	add	r1, r0
 8015350:	1850      	adds	r0, r2, r1
 8015352:	4283      	cmp	r3, r0
 8015354:	6011      	str	r1, [r2, #0]
 8015356:	d1e0      	bne.n	801531a <_free_r+0x22>
 8015358:	6818      	ldr	r0, [r3, #0]
 801535a:	685b      	ldr	r3, [r3, #4]
 801535c:	6053      	str	r3, [r2, #4]
 801535e:	4408      	add	r0, r1
 8015360:	6010      	str	r0, [r2, #0]
 8015362:	e7da      	b.n	801531a <_free_r+0x22>
 8015364:	d902      	bls.n	801536c <_free_r+0x74>
 8015366:	230c      	movs	r3, #12
 8015368:	602b      	str	r3, [r5, #0]
 801536a:	e7d6      	b.n	801531a <_free_r+0x22>
 801536c:	6820      	ldr	r0, [r4, #0]
 801536e:	1821      	adds	r1, r4, r0
 8015370:	428b      	cmp	r3, r1
 8015372:	bf04      	itt	eq
 8015374:	6819      	ldreq	r1, [r3, #0]
 8015376:	685b      	ldreq	r3, [r3, #4]
 8015378:	6063      	str	r3, [r4, #4]
 801537a:	bf04      	itt	eq
 801537c:	1809      	addeq	r1, r1, r0
 801537e:	6021      	streq	r1, [r4, #0]
 8015380:	6054      	str	r4, [r2, #4]
 8015382:	e7ca      	b.n	801531a <_free_r+0x22>
 8015384:	bd38      	pop	{r3, r4, r5, pc}
 8015386:	bf00      	nop
 8015388:	2000082c 	.word	0x2000082c

0801538c <__ascii_mbtowc>:
 801538c:	b082      	sub	sp, #8
 801538e:	b901      	cbnz	r1, 8015392 <__ascii_mbtowc+0x6>
 8015390:	a901      	add	r1, sp, #4
 8015392:	b142      	cbz	r2, 80153a6 <__ascii_mbtowc+0x1a>
 8015394:	b14b      	cbz	r3, 80153aa <__ascii_mbtowc+0x1e>
 8015396:	7813      	ldrb	r3, [r2, #0]
 8015398:	600b      	str	r3, [r1, #0]
 801539a:	7812      	ldrb	r2, [r2, #0]
 801539c:	1e10      	subs	r0, r2, #0
 801539e:	bf18      	it	ne
 80153a0:	2001      	movne	r0, #1
 80153a2:	b002      	add	sp, #8
 80153a4:	4770      	bx	lr
 80153a6:	4610      	mov	r0, r2
 80153a8:	e7fb      	b.n	80153a2 <__ascii_mbtowc+0x16>
 80153aa:	f06f 0001 	mvn.w	r0, #1
 80153ae:	e7f8      	b.n	80153a2 <__ascii_mbtowc+0x16>

080153b0 <_malloc_usable_size_r>:
 80153b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153b4:	1f18      	subs	r0, r3, #4
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	bfbc      	itt	lt
 80153ba:	580b      	ldrlt	r3, [r1, r0]
 80153bc:	18c0      	addlt	r0, r0, r3
 80153be:	4770      	bx	lr

080153c0 <fiprintf>:
 80153c0:	b40e      	push	{r1, r2, r3}
 80153c2:	b503      	push	{r0, r1, lr}
 80153c4:	4601      	mov	r1, r0
 80153c6:	ab03      	add	r3, sp, #12
 80153c8:	4805      	ldr	r0, [pc, #20]	@ (80153e0 <fiprintf+0x20>)
 80153ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80153ce:	6800      	ldr	r0, [r0, #0]
 80153d0:	9301      	str	r3, [sp, #4]
 80153d2:	f7fe ff2f 	bl	8014234 <_vfiprintf_r>
 80153d6:	b002      	add	sp, #8
 80153d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80153dc:	b003      	add	sp, #12
 80153de:	4770      	bx	lr
 80153e0:	200000a4 	.word	0x200000a4

080153e4 <__ascii_wctomb>:
 80153e4:	4603      	mov	r3, r0
 80153e6:	4608      	mov	r0, r1
 80153e8:	b141      	cbz	r1, 80153fc <__ascii_wctomb+0x18>
 80153ea:	2aff      	cmp	r2, #255	@ 0xff
 80153ec:	d904      	bls.n	80153f8 <__ascii_wctomb+0x14>
 80153ee:	228a      	movs	r2, #138	@ 0x8a
 80153f0:	601a      	str	r2, [r3, #0]
 80153f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80153f6:	4770      	bx	lr
 80153f8:	700a      	strb	r2, [r1, #0]
 80153fa:	2001      	movs	r0, #1
 80153fc:	4770      	bx	lr

080153fe <abort>:
 80153fe:	b508      	push	{r3, lr}
 8015400:	2006      	movs	r0, #6
 8015402:	f000 f82b 	bl	801545c <raise>
 8015406:	2001      	movs	r0, #1
 8015408:	f7ee f87c 	bl	8003504 <_exit>

0801540c <_raise_r>:
 801540c:	291f      	cmp	r1, #31
 801540e:	b538      	push	{r3, r4, r5, lr}
 8015410:	4605      	mov	r5, r0
 8015412:	460c      	mov	r4, r1
 8015414:	d904      	bls.n	8015420 <_raise_r+0x14>
 8015416:	2316      	movs	r3, #22
 8015418:	6003      	str	r3, [r0, #0]
 801541a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801541e:	bd38      	pop	{r3, r4, r5, pc}
 8015420:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015422:	b112      	cbz	r2, 801542a <_raise_r+0x1e>
 8015424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015428:	b94b      	cbnz	r3, 801543e <_raise_r+0x32>
 801542a:	4628      	mov	r0, r5
 801542c:	f000 f830 	bl	8015490 <_getpid_r>
 8015430:	4622      	mov	r2, r4
 8015432:	4601      	mov	r1, r0
 8015434:	4628      	mov	r0, r5
 8015436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801543a:	f000 b817 	b.w	801546c <_kill_r>
 801543e:	2b01      	cmp	r3, #1
 8015440:	d00a      	beq.n	8015458 <_raise_r+0x4c>
 8015442:	1c59      	adds	r1, r3, #1
 8015444:	d103      	bne.n	801544e <_raise_r+0x42>
 8015446:	2316      	movs	r3, #22
 8015448:	6003      	str	r3, [r0, #0]
 801544a:	2001      	movs	r0, #1
 801544c:	e7e7      	b.n	801541e <_raise_r+0x12>
 801544e:	2100      	movs	r1, #0
 8015450:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015454:	4620      	mov	r0, r4
 8015456:	4798      	blx	r3
 8015458:	2000      	movs	r0, #0
 801545a:	e7e0      	b.n	801541e <_raise_r+0x12>

0801545c <raise>:
 801545c:	4b02      	ldr	r3, [pc, #8]	@ (8015468 <raise+0xc>)
 801545e:	4601      	mov	r1, r0
 8015460:	6818      	ldr	r0, [r3, #0]
 8015462:	f7ff bfd3 	b.w	801540c <_raise_r>
 8015466:	bf00      	nop
 8015468:	200000a4 	.word	0x200000a4

0801546c <_kill_r>:
 801546c:	b538      	push	{r3, r4, r5, lr}
 801546e:	4d07      	ldr	r5, [pc, #28]	@ (801548c <_kill_r+0x20>)
 8015470:	2300      	movs	r3, #0
 8015472:	4604      	mov	r4, r0
 8015474:	4608      	mov	r0, r1
 8015476:	4611      	mov	r1, r2
 8015478:	602b      	str	r3, [r5, #0]
 801547a:	f7ee f833 	bl	80034e4 <_kill>
 801547e:	1c43      	adds	r3, r0, #1
 8015480:	d102      	bne.n	8015488 <_kill_r+0x1c>
 8015482:	682b      	ldr	r3, [r5, #0]
 8015484:	b103      	cbz	r3, 8015488 <_kill_r+0x1c>
 8015486:	6023      	str	r3, [r4, #0]
 8015488:	bd38      	pop	{r3, r4, r5, pc}
 801548a:	bf00      	nop
 801548c:	20000830 	.word	0x20000830

08015490 <_getpid_r>:
 8015490:	f7ee b820 	b.w	80034d4 <_getpid>

08015494 <_init>:
 8015494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015496:	bf00      	nop
 8015498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801549a:	bc08      	pop	{r3}
 801549c:	469e      	mov	lr, r3
 801549e:	4770      	bx	lr

080154a0 <_fini>:
 80154a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154a2:	bf00      	nop
 80154a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154a6:	bc08      	pop	{r3}
 80154a8:	469e      	mov	lr, r3
 80154aa:	4770      	bx	lr
