
PlumeSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a84  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  08009bc4  08009bc4  0000abc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a2d4  0800a2d4  0000b2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800a2dc  0800a2dc  0000b2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a2e4  0800a2e4  0000b2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  20000008  0800a2e8  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000440  20000084  0800a364  0000c084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200004c4  0800a364  0000c4c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026aca  00000000  00000000  0000c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005297  00000000  00000000  00032b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002510  00000000  00000000  00037e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001c4b  00000000  00000000  0003a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002981f  00000000  00000000  0003bf73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000267f1  00000000  00000000  00065792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fdbf9  00000000  00000000  0008bf83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00189b7c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a6ec  00000000  00000000  00189bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000079  00000000  00000000  001942ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000084 	.word	0x20000084
 800015c:	00000000 	.word	0x00000000
 8000160:	08009bac 	.word	0x08009bac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000088 	.word	0x20000088
 800017c:	08009bac 	.word	0x08009bac

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	@ 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2uiz>:
 80009bc:	004a      	lsls	r2, r1, #1
 80009be:	d211      	bcs.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c4:	d211      	bcs.n	80009ea <__aeabi_d2uiz+0x2e>
 80009c6:	d50d      	bpl.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d40e      	bmi.n	80009f0 <__aeabi_d2uiz+0x34>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	fa23 f002 	lsr.w	r0, r3, r2
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d102      	bne.n	80009f6 <__aeabi_d2uiz+0x3a>
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009f4:	4770      	bx	lr
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	4770      	bx	lr

080009fc <_ZL20ws2812_send_spi_datahhh>:

// Static variable to track if 5V power for the LED is currently on
static uint8_t s_is_led_power_on = 0;

// Internal helper function to send the SPI data for one LED
static void ws2812_send_spi_data(uint8_t r_scaled, uint8_t g_scaled, uint8_t b_scaled) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
 8000a06:	460b      	mov	r3, r1
 8000a08:	71bb      	strb	r3, [r7, #6]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	717b      	strb	r3, [r7, #5]
    uint32_t color_data = ((uint32_t)g_scaled << 16) | ((uint32_t)r_scaled << 8) | (uint32_t)b_scaled;
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	041a      	lsls	r2, r3, #16
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	021b      	lsls	r3, r3, #8
 8000a16:	431a      	orrs	r2, r3
 8000a18:	797b      	ldrb	r3, [r7, #5]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	623b      	str	r3, [r7, #32]
    uint8_t spi_tx_buffer[24]; // Buffer to hold the 24 * 3-bit encoded values

    // This encoding is for the Controllerstech method with ~2.4MHz SPI clock
    for (int i = 0; i < 24; i++) { // Iterate 24 times for 24 WS2812B data bits
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a22:	e019      	b.n	8000a58 <_ZL20ws2812_send_spi_datahhh+0x5c>
        if ((color_data >> (23 - i)) & 0x01) { // Check MSB first
 8000a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a26:	f1c3 0317 	rsb	r3, r3, #23
 8000a2a:	6a3a      	ldr	r2, [r7, #32]
 8000a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <_ZL20ws2812_send_spi_datahhh+0x4a>
            spi_tx_buffer[i] = 0b00000110; // WS2812B '1' (last 3 bits are 110)
 8000a38:	f107 0208 	add.w	r2, r7, #8
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	4413      	add	r3, r2
 8000a40:	2206      	movs	r2, #6
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e005      	b.n	8000a52 <_ZL20ws2812_send_spi_datahhh+0x56>
        } else {
            spi_tx_buffer[i] = 0b00000100; // WS2812B '0' (last 3 bits are 100)
 8000a46:	f107 0208 	add.w	r2, r7, #8
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4c:	4413      	add	r3, r2
 8000a4e:	2204      	movs	r2, #4
 8000a50:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 24; i++) { // Iterate 24 times for 24 WS2812B data bits
 8000a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a54:	3301      	adds	r3, #1
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5a:	2b17      	cmp	r3, #23
 8000a5c:	dde2      	ble.n	8000a24 <_ZL20ws2812_send_spi_datahhh+0x28>
        }
    }

    // Blocking SPI transmit
    HAL_SPI_Transmit(&hspi2, spi_tx_buffer, 24, 100); // 100ms timeout
 8000a5e:	f107 0108 	add.w	r1, r7, #8
 8000a62:	2364      	movs	r3, #100	@ 0x64
 8000a64:	2218      	movs	r2, #24
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <_ZL20ws2812_send_spi_datahhh+0x78>)
 8000a68:	f006 ff5b 	bl	8007922 <HAL_SPI_Transmit>
}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	@ 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000025c 	.word	0x2000025c

08000a78 <_Z15WS2812_SetColorhhhh>:
 * @param r Red component (0-255)
 * @param g Green component (0-255)
 * @param b Blue component (0-255)
 * @param brightness_val Brightness (0-100). If 0, LED will be turned off and power disabled.
 */
void WS2812_SetColor(uint8_t r, uint8_t g, uint8_t b, uint8_t brightness_val) {
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4604      	mov	r4, r0
 8000a80:	4608      	mov	r0, r1
 8000a82:	4611      	mov	r1, r2
 8000a84:	461a      	mov	r2, r3
 8000a86:	4623      	mov	r3, r4
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71bb      	strb	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	717b      	strb	r3, [r7, #5]
 8000a92:	4613      	mov	r3, r2
 8000a94:	713b      	strb	r3, [r7, #4]
    uint8_t r_scaled, g_scaled, b_scaled;

    if (brightness_val == 0 || (r == 0 && g == 0 && b == 0)) {
 8000a96:	793b      	ldrb	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d008      	beq.n	8000aae <_Z15WS2812_SetColorhhhh+0x36>
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d11a      	bne.n	8000ad8 <_Z15WS2812_SetColorhhhh+0x60>
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d117      	bne.n	8000ad8 <_Z15WS2812_SetColorhhhh+0x60>
 8000aa8:	797b      	ldrb	r3, [r7, #5]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d114      	bne.n	8000ad8 <_Z15WS2812_SetColorhhhh+0x60>
        // Turn LED completely OFF and disable 5V power
        if (s_is_led_power_on) {
 8000aae:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <_Z15WS2812_SetColorhhhh+0xdc>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d049      	beq.n	8000b4a <_Z15WS2812_SetColorhhhh+0xd2>
            // Send all zeros to ensure LED is off before cutting power,
            // though just cutting power after last command would also work.
            // This is more explicit.
            ws2812_send_spi_data(0, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff ff9e 	bl	80009fc <_ZL20ws2812_send_spi_datahhh>
            HAL_Delay(1); // Ensure data is latched/reset (MOSI idle low > 50us)
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f002 f821 	bl	8002b08 <HAL_Delay>
            HAL_GPIO_WritePin(LED_5V_EN_GPIO_Port, LED_5V_EN_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2104      	movs	r1, #4
 8000aca:	4823      	ldr	r0, [pc, #140]	@ (8000b58 <_Z15WS2812_SetColorhhhh+0xe0>)
 8000acc:	f003 feba 	bl	8004844 <HAL_GPIO_WritePin>
            s_is_led_power_on = 0;
 8000ad0:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <_Z15WS2812_SetColorhhhh+0xdc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
        }
        return; // Nothing more to do if brightness is 0 or color is black
 8000ad6:	e038      	b.n	8000b4a <_Z15WS2812_SetColorhhhh+0xd2>
    }

    // Ensure 5V power is ON if it wasn't already
    if (!s_is_led_power_on) {
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <_Z15WS2812_SetColorhhhh+0xdc>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d10a      	bne.n	8000af6 <_Z15WS2812_SetColorhhhh+0x7e>
        HAL_GPIO_WritePin(LED_5V_EN_GPIO_Port, LED_5V_EN_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	481c      	ldr	r0, [pc, #112]	@ (8000b58 <_Z15WS2812_SetColorhhhh+0xe0>)
 8000ae6:	f003 fead 	bl	8004844 <HAL_GPIO_WritePin>
        HAL_Delay(1); // Allow power to stabilize (adjust if too long/short)
 8000aea:	2001      	movs	r0, #1
 8000aec:	f002 f80c 	bl	8002b08 <HAL_Delay>
        s_is_led_power_on = 1;
 8000af0:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <_Z15WS2812_SetColorhhhh+0xdc>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
    }

    // Clamp brightness
    if (brightness_val > 100) {
 8000af6:	793b      	ldrb	r3, [r7, #4]
 8000af8:	2b64      	cmp	r3, #100	@ 0x64
 8000afa:	d901      	bls.n	8000b00 <_Z15WS2812_SetColorhhhh+0x88>
        brightness_val = 100;
 8000afc:	2364      	movs	r3, #100	@ 0x64
 8000afe:	713b      	strb	r3, [r7, #4]
    }

    // Scale colors by brightness
    // (uint32_t) cast is important to avoid overflow during multiplication before division
    r_scaled = (uint8_t)(((uint32_t)r * brightness_val) / 100);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	793a      	ldrb	r2, [r7, #4]
 8000b04:	fb02 f303 	mul.w	r3, r2, r3
 8000b08:	4a14      	ldr	r2, [pc, #80]	@ (8000b5c <_Z15WS2812_SetColorhhhh+0xe4>)
 8000b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	73fb      	strb	r3, [r7, #15]
    g_scaled = (uint8_t)(((uint32_t)g * brightness_val) / 100);
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	793a      	ldrb	r2, [r7, #4]
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	4a10      	ldr	r2, [pc, #64]	@ (8000b5c <_Z15WS2812_SetColorhhhh+0xe4>)
 8000b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b20:	095b      	lsrs	r3, r3, #5
 8000b22:	73bb      	strb	r3, [r7, #14]
    b_scaled = (uint8_t)(((uint32_t)b * brightness_val) / 100);
 8000b24:	797b      	ldrb	r3, [r7, #5]
 8000b26:	793a      	ldrb	r2, [r7, #4]
 8000b28:	fb02 f303 	mul.w	r3, r2, r3
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <_Z15WS2812_SetColorhhhh+0xe4>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	737b      	strb	r3, [r7, #13]

    ws2812_send_spi_data(r_scaled, g_scaled, b_scaled);
 8000b36:	7b7a      	ldrb	r2, [r7, #13]
 8000b38:	7bb9      	ldrb	r1, [r7, #14]
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff5d 	bl	80009fc <_ZL20ws2812_send_spi_datahhh>
    // After sending data, a low signal on DIN for >50µs is needed to latch the data
    // and reset the internal shift registers for the next data.
    // HAL_SPI_Transmit is blocking. After it finishes, the SPI MOSI line will
    // typically return to its idle state (which should be low for CPOL=Low).
    // A HAL_Delay(1) is much longer than 50µs and will ensure this latch/reset.
    HAL_Delay(1);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f001 ffe0 	bl	8002b08 <HAL_Delay>
 8000b48:	e000      	b.n	8000b4c <_Z15WS2812_SetColorhhhh+0xd4>
        return; // Nothing more to do if brightness is 0 or color is black
 8000b4a:	bf00      	nop
    // Power (PC2) remains ON until explicitly turned off by calling with brightness 0 or black.
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000a0 	.word	0x200000a0
 8000b58:	48000800 	.word	0x48000800
 8000b5c:	51eb851f 	.word	0x51eb851f

08000b60 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
 8000ba8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000baa:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bac:	4a29      	ldr	r2, [pc, #164]	@ (8000c54 <MX_ADC1_Init+0xc0>)
 8000bae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bb0:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb6:	4b26      	ldr	r3, [pc, #152]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bbc:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc2:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc8:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be8:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0a:	4811      	ldr	r0, [pc, #68]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000c0c:	f002 f9b6 	bl	8002f7c <HAL_ADC_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c16:	f000 fe1d 	bl	8001854 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <MX_ADC1_Init+0xc4>)
 8000c1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1e:	2306      	movs	r3, #6
 8000c20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000c22:	2304      	movs	r3, #4
 8000c24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c26:	237f      	movs	r3, #127	@ 0x7f
 8000c28:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <MX_ADC1_Init+0xbc>)
 8000c38:	f002 fc0e 	bl	8003458 <HAL_ADC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c42:	f000 fe07 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000a4 	.word	0x200000a4
 8000c54:	50040000 	.word	0x50040000
 8000c58:	19200040 	.word	0x19200040

08000c5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09c      	sub	sp, #112	@ 0x70
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2250      	movs	r2, #80	@ 0x50
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f007 ff87 	bl	8008b90 <memset>
  if(adcHandle->Instance==ADC1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <HAL_ADC_MspInit+0x9c>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d131      	bne.n	8000cf0 <HAL_ADC_MspInit+0x94>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c90:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000c92:	2318      	movs	r3, #24
 8000c94:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000c96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c9a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000c9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ca0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000ca2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ca6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8000ca8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cac:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f006 f8fe 	bl	8006eba <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8000cc4:	f000 fdc6 	bl	8001854 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cc8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ccc:	f7ff ff48 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff ff45 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BAT_SENSE_Pin;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(BAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cec:	f003 fc3a 	bl	8004564 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3770      	adds	r7, #112	@ 0x70
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	50040000 	.word	0x50040000

08000cfc <LL_AHB1_GRP1_EnableClock>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d20:	68fb      	ldr	r3, [r7, #12]
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d32:	2004      	movs	r0, #4
 8000d34:	f7ff ffe2 	bl	8000cfc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff ffdf 	bl	8000cfc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	200b      	movs	r0, #11
 8000d44:	f003 f9bf 	bl	80040c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d48:	200b      	movs	r0, #11
 8000d4a:	f003 f9d6 	bl	80040fa <HAL_NVIC_EnableIRQ>

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <LL_AHB2_GRP1_EnableClock>:
{
 8000d52:	b480      	push	{r7}
 8000d54:	b085      	sub	sp, #20
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4013      	ands	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA9   ------> USART1_TX
*/
void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff ffda 	bl	8000d52 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	2004      	movs	r0, #4
 8000da0:	f7ff ffd7 	bl	8000d52 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	2002      	movs	r0, #2
 8000da6:	f7ff ffd4 	bl	8000d52 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	2008      	movs	r0, #8
 8000dac:	f7ff ffd1 	bl	8000d52 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db0:	2010      	movs	r0, #16
 8000db2:	f7ff ffce 	bl	8000d52 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db6:	2080      	movs	r0, #128	@ 0x80
 8000db8:	f7ff ffcb 	bl	8000d52 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN2_Pin|MUX_RESET_Pin|RED_LED_Pin|EN1_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f248 410c 	movw	r1, #33804	@ 0x840c
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc6:	f003 fd3d 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_5V_EN_Pin|nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2184      	movs	r1, #132	@ 0x84
 8000dce:	4879      	ldr	r0, [pc, #484]	@ (8000fb4 <MX_GPIO_Init+0x230>)
 8000dd0:	f003 fd38 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4877      	ldr	r0, [pc, #476]	@ (8000fb8 <MX_GPIO_Init+0x234>)
 8000dda:	f003 fd33 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2102      	movs	r1, #2
 8000de2:	4876      	ldr	r0, [pc, #472]	@ (8000fbc <MX_GPIO_Init+0x238>)
 8000de4:	f003 fd2e 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN2_Pin MUX_RESET_Pin RED_LED_Pin EN1_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|MUX_RESET_Pin|RED_LED_Pin|EN1_Pin;
 8000de8:	f248 430c 	movw	r3, #33804	@ 0x840c
 8000dec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f003 fbaf 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_5V_EN_Pin */
  GPIO_InitStruct.Pin = LED_5V_EN_Pin;
 8000e06:	2304      	movs	r3, #4
 8000e08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e12:	2302      	movs	r3, #2
 8000e14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_5V_EN_GPIO_Port, &GPIO_InitStruct);
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4866      	ldr	r0, [pc, #408]	@ (8000fb4 <MX_GPIO_Init+0x230>)
 8000e1c:	f003 fba2 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000e20:	23b0      	movs	r3, #176	@ 0xb0
 8000e22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e24:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4863      	ldr	r0, [pc, #396]	@ (8000fc0 <MX_GPIO_Init+0x23c>)
 8000e34:	f003 fb96 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 8000e38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4859      	ldr	r0, [pc, #356]	@ (8000fb4 <MX_GPIO_Init+0x230>)
 8000e4e:	f003 fb89 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT13_Pin nFAULT17_Pin nFAULT3_Pin nFAULT4_Pin
                           nFAULT14_Pin nFAULT1_Pin */
  GPIO_InitStruct.Pin = nFAULT13_Pin|nFAULT17_Pin|nFAULT3_Pin|nFAULT4_Pin
 8000e52:	f246 430b 	movw	r3, #25611	@ 0x640b
 8000e56:	607b      	str	r3, [r7, #4]
                          |nFAULT14_Pin|nFAULT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4857      	ldr	r0, [pc, #348]	@ (8000fc4 <MX_GPIO_Init+0x240>)
 8000e66:	f003 fb7d 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT15_Pin nFAULT8_Pin */
  GPIO_InitStruct.Pin = nFAULT15_Pin|nFAULT8_Pin;
 8000e6a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4850      	ldr	r0, [pc, #320]	@ (8000fc0 <MX_GPIO_Init+0x23c>)
 8000e7e:	f003 fb71 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT9_Pin nFAULT7_Pin nFAULT6_Pin */
  GPIO_InitStruct.Pin = nFAULT9_Pin|nFAULT7_Pin|nFAULT6_Pin;
 8000e82:	2315      	movs	r3, #21
 8000e84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4619      	mov	r1, r3
 8000e92:	484a      	ldr	r0, [pc, #296]	@ (8000fbc <MX_GPIO_Init+0x238>)
 8000e94:	f003 fb66 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : nFAULT12_Pin */
  GPIO_InitStruct.Pin = nFAULT12_Pin;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(nFAULT12_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4842      	ldr	r0, [pc, #264]	@ (8000fb4 <MX_GPIO_Init+0x230>)
 8000eaa:	f003 fb5b 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT11_Pin nFAULT16_Pin nFAULT0_Pin nFAULT10_Pin */
  GPIO_InitStruct.Pin = nFAULT11_Pin|nFAULT16_Pin|nFAULT0_Pin|nFAULT10_Pin;
 8000eae:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000eb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec4:	f003 fb4e 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ec8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ecc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eda:	2307      	movs	r3, #7
 8000edc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee6:	f003 fb3d 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : nFAULT2_Pin */
  GPIO_InitStruct.Pin = nFAULT2_Pin;
 8000eea:	2301      	movs	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(nFAULT2_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	482f      	ldr	r0, [pc, #188]	@ (8000fb8 <MX_GPIO_Init+0x234>)
 8000efc:	f003 fb32 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_SENSE_EN_Pin */
  GPIO_InitStruct.Pin = BAT_SENSE_EN_Pin;
 8000f00:	2302      	movs	r3, #2
 8000f02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BAT_SENSE_EN_GPIO_Port, &GPIO_InitStruct);
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4828      	ldr	r0, [pc, #160]	@ (8000fb8 <MX_GPIO_Init+0x234>)
 8000f16:	f003 fb25 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_FRONT_Pin */
  GPIO_InitStruct.Pin = nSLEEP_FRONT_Pin;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(nSLEEP_FRONT_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4823      	ldr	r0, [pc, #140]	@ (8000fbc <MX_GPIO_Init+0x238>)
 8000f30:	f003 fb18 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin SWITCH2_Pin CHARGE_STATUS_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|SWITCH2_Pin|CHARGE_STATUS_Pin;
 8000f34:	f249 0310 	movw	r3, #36880	@ 0x9010
 8000f38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	481f      	ldr	r0, [pc, #124]	@ (8000fc4 <MX_GPIO_Init+0x240>)
 8000f48:	f003 fb0c 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_REAR_Pin */
  GPIO_InitStruct.Pin = nSLEEP_REAR_Pin;
 8000f4c:	2380      	movs	r3, #128	@ 0x80
 8000f4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(nSLEEP_REAR_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <MX_GPIO_Init+0x230>)
 8000f62:	f003 faff 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH1_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin;
 8000f66:	2308      	movs	r3, #8
 8000f68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4811      	ldr	r0, [pc, #68]	@ (8000fbc <MX_GPIO_Init+0x238>)
 8000f78:	f003 faf4 	bl	8004564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	200a      	movs	r0, #10
 8000f82:	f003 f8a0 	bl	80040c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f86:	200a      	movs	r0, #10
 8000f88:	f003 f8b7 	bl	80040fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2017      	movs	r0, #23
 8000f92:	f003 f898 	bl	80040c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f96:	2017      	movs	r0, #23
 8000f98:	f003 f8af 	bl	80040fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2028      	movs	r0, #40	@ 0x28
 8000fa2:	f003 f890 	bl	80040c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fa6:	2028      	movs	r0, #40	@ 0x28
 8000fa8:	f003 f8a7 	bl	80040fa <HAL_NVIC_EnableIRQ>

}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	48000800 	.word	0x48000800
 8000fb8:	48001c00 	.word	0x48001c00
 8000fbc:	48001000 	.word	0x48001000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000c00 	.word	0x48000c00

08000fc8 <LL_AHB2_GRP1_EnableClock>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fec:	68fb      	ldr	r3, [r7, #12]
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b085      	sub	sp, #20
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001006:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001008:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4313      	orrs	r3, r2
 8001010:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001016:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001032:	4a1c      	ldr	r2, [pc, #112]	@ (80010a4 <MX_I2C1_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0070133F;
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001038:	4a1b      	ldr	r2, [pc, #108]	@ (80010a8 <MX_I2C1_Init+0x7c>)
 800103a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800103c:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001042:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001044:	2201      	movs	r2, #1
 8001046:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001048:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_I2C1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001066:	480e      	ldr	r0, [pc, #56]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001068:	f003 fc40 	bl	80048ec <HAL_I2C_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001072:	f000 fbef 	bl	8001854 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001076:	2100      	movs	r1, #0
 8001078:	4809      	ldr	r0, [pc, #36]	@ (80010a0 <MX_I2C1_Init+0x74>)
 800107a:	f004 f987 	bl	800538c <HAL_I2CEx_ConfigAnalogFilter>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001084:	f000 fbe6 	bl	8001854 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001088:	2100      	movs	r1, #0
 800108a:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_I2C1_Init+0x74>)
 800108c:	f004 f9c9 	bl	8005422 <HAL_I2CEx_ConfigDigitalFilter>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001096:	f000 fbdd 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000108 	.word	0x20000108
 80010a4:	40005400 	.word	0x40005400
 80010a8:	0070133f 	.word	0x0070133f

080010ac <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <MX_I2C3_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001124 <MX_I2C3_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0070133F;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <MX_I2C3_Init+0x74>)
 80010b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <MX_I2C3_Init+0x7c>)
 80010ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010bc:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <MX_I2C3_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MX_I2C3_Init+0x74>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <MX_I2C3_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MX_I2C3_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <MX_I2C3_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_I2C3_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_I2C3_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010e6:	480e      	ldr	r0, [pc, #56]	@ (8001120 <MX_I2C3_Init+0x74>)
 80010e8:	f003 fc00 	bl	80048ec <HAL_I2C_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010f2:	f000 fbaf 	bl	8001854 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4809      	ldr	r0, [pc, #36]	@ (8001120 <MX_I2C3_Init+0x74>)
 80010fa:	f004 f947 	bl	800538c <HAL_I2CEx_ConfigAnalogFilter>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001104:	f000 fba6 	bl	8001854 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001108:	2100      	movs	r1, #0
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_I2C3_Init+0x74>)
 800110c:	f004 f989 	bl	8005422 <HAL_I2CEx_ConfigDigitalFilter>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 fb9d 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000015c 	.word	0x2000015c
 8001124:	40005c00 	.word	0x40005c00
 8001128:	0070133f 	.word	0x0070133f

0800112c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b09c      	sub	sp, #112	@ 0x70
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2250      	movs	r2, #80	@ 0x50
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f007 fd1f 	bl	8008b90 <memset>
  if(i2cHandle->Instance==I2C1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a2d      	ldr	r2, [pc, #180]	@ (800120c <HAL_I2C_MspInit+0xe0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d127      	bne.n	80011ac <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800115c:	2304      	movs	r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001160:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4618      	mov	r0, r3
 800116c:	f005 fea5 	bl	8006eba <HAL_RCCEx_PeriphCLKConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001176:	f000 fb6d 	bl	8001854 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2002      	movs	r0, #2
 800117c:	f7ff ff24 	bl	8000fc8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001180:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001184:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001186:	2312      	movs	r3, #18
 8001188:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001192:	2304      	movs	r3, #4
 8001194:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800119a:	4619      	mov	r1, r3
 800119c:	481c      	ldr	r0, [pc, #112]	@ (8001210 <HAL_I2C_MspInit+0xe4>)
 800119e:	f003 f9e1 	bl	8004564 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80011a6:	f7ff ff28 	bl	8000ffa <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80011aa:	e02a      	b.n	8001202 <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C3)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a18      	ldr	r2, [pc, #96]	@ (8001214 <HAL_I2C_MspInit+0xe8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d125      	bne.n	8001202 <HAL_I2C_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80011b6:	2308      	movs	r3, #8
 80011b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80011ba:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4618      	mov	r0, r3
 80011c6:	f005 fe78 	bl	8006eba <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 80011d0:	f000 fb40 	bl	8001854 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	2004      	movs	r0, #4
 80011d6:	f7ff fef7 	bl	8000fc8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80011da:	2303      	movs	r3, #3
 80011dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011de:	2312      	movs	r3, #18
 80011e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011ea:	2304      	movs	r3, #4
 80011ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011f2:	4619      	mov	r1, r3
 80011f4:	4808      	ldr	r0, [pc, #32]	@ (8001218 <HAL_I2C_MspInit+0xec>)
 80011f6:	f003 f9b5 	bl	8004564 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011fa:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80011fe:	f7ff fefc 	bl	8000ffa <LL_APB1_GRP1_EnableClock>
}
 8001202:	bf00      	nop
 8001204:	3770      	adds	r7, #112	@ 0x70
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40005400 	.word	0x40005400
 8001210:	48000400 	.word	0x48000400
 8001214:	40005c00 	.word	0x40005c00
 8001218:	48000800 	.word	0x48000800

0800121c <LL_AHB3_GRP1_EnableClock>:
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001228:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800122a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4313      	orrs	r3, r2
 8001232:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001238:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4013      	ands	r3, r2
 800123e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001240:	68fb      	ldr	r3, [r7, #12]
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <MX_IPCC_Init+0x20>)
 8001256:	4a07      	ldr	r2, [pc, #28]	@ (8001274 <MX_IPCC_Init+0x24>)
 8001258:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <MX_IPCC_Init+0x20>)
 800125c:	f004 f92e 	bl	80054bc <HAL_IPCC_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001266:	f000 faf5 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200001b0 	.word	0x200001b0
 8001274:	58000c00 	.word	0x58000c00

08001278 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <HAL_IPCC_MspInit+0x44>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d113      	bne.n	80012b2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800128a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800128e:	f7ff ffc5 	bl	800121c <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	202c      	movs	r0, #44	@ 0x2c
 8001298:	f002 ff15 	bl	80040c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800129c:	202c      	movs	r0, #44	@ 0x2c
 800129e:	f002 ff2c 	bl	80040fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	202d      	movs	r0, #45	@ 0x2d
 80012a8:	f002 ff0d 	bl	80040c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80012ac:	202d      	movs	r0, #45	@ 0x2d
 80012ae:	f002 ff24 	bl	80040fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	58000c00 	.word	0x58000c00

080012c0 <_ZN14DRV8214_ConfigC1Ev>:

enum ControlMode { PWM, PH_EN };
enum RegulationMode { CURRENT_FIXED, CURRENT_CYCLES, SPEED, VOLTAGE };
// when using I2C control, the speed/voltage cannot be controlled if using the CURRENT_FIXED or CURRENT_CYCLES regulation mode

struct DRV8214_Config {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	705a      	strb	r2, [r3, #1]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2202      	movs	r2, #2
 80012d8:	709a      	strb	r2, [r3, #2]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	70da      	strb	r2, [r3, #3]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	721a      	strb	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	725a      	strb	r2, [r3, #9]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	729a      	strb	r2, [r3, #10]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	72da      	strb	r2, [r3, #11]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2203      	movs	r2, #3
 8001304:	731a      	strb	r2, [r3, #12]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	771a      	strb	r2, [r3, #28]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	775a      	strb	r2, [r3, #29]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001330:	83da      	strh	r2, [r3, #30]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2020 	strb.w	r2, [r3, #32]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	845a      	strh	r2, [r3, #34]	@ 0x22
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	221e      	movs	r2, #30
 8001344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2203      	movs	r2, #3
 800134c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2202      	movs	r2, #2
 8001362:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_ZN7DRV8214C1Ehhthhht>:
        // Private functions
        void drvPrint(const char* message);

    public:
        // Constructor
        DRV8214(uint8_t addr, uint8_t id, uint16_t sense_resistor, uint8_t ripples, uint8_t rm, uint8_t reduction_ratio, uint16_t rpm) : address(addr), driver_ID(id), Ripropri(sense_resistor), ripples_per_revolution(ripples), motor_internal_resistance(rm), motor_reduction_ratio(reduction_ratio), motor_max_rpm(rpm) {}
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	4608      	mov	r0, r1
 800137e:	4611      	mov	r1, r2
 8001380:	461a      	mov	r2, r3
 8001382:	4603      	mov	r3, r0
 8001384:	70fb      	strb	r3, [r7, #3]
 8001386:	460b      	mov	r3, r1
 8001388:	70bb      	strb	r3, [r7, #2]
 800138a:	4613      	mov	r3, r2
 800138c:	803b      	strh	r3, [r7, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	78fa      	ldrb	r2, [r7, #3]
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	78ba      	ldrb	r2, [r7, #2]
 8001398:	705a      	strb	r2, [r3, #1]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	883a      	ldrh	r2, [r7, #0]
 800139e:	805a      	strh	r2, [r3, #2]
 80013a0:	7c3b      	ldrb	r3, [r7, #16]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	809a      	strh	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7d3a      	ldrb	r2, [r7, #20]
 80013ac:	719a      	strb	r2, [r3, #6]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7e3a      	ldrb	r2, [r7, #24]
 80013b2:	71da      	strb	r2, [r3, #7]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	8bba      	ldrh	r2, [r7, #28]
 80013b8:	811a      	strh	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	330c      	adds	r3, #12
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff7e 	bl	80012c0 <_ZN14DRV8214_ConfigC1Ev>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d6:	f001 fb11 	bl	80029fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013da:	f000 f93d 	bl	8001658 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013de:	f000 f9b1 	bl	8001744 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80013e2:	f7ff ff35 	bl	8001250 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f7ff fccd 	bl	8000d84 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ea:	f7ff fca0 	bl	8000d2e <MX_DMA_Init>
  MX_ADC1_Init();
 80013ee:	f7ff fbd1 	bl	8000b94 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013f2:	f7ff fe1b 	bl	800102c <MX_I2C1_Init>
  MX_I2C3_Init();
 80013f6:	f7ff fe59 	bl	80010ac <MX_I2C3_Init>
  MX_RTC_Init();
 80013fa:	f000 fa9b 	bl	8001934 <MX_RTC_Init>
  MX_TIM2_Init();
 80013fe:	f000 fdc3 	bl	8001f88 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001402:	f000 fb31 	bl	8001a68 <MX_SPI2_Init>
//    if (i == 0) { driver_configs[i].verbose = true; } // Set verbose only for the first driver
//    //drivers[i].setDebugStream(console); // Let the driver’s library know which stream to use for debug
//    drivers[i].init(driver_configs[i]);
//    drivers[i].resetFaultFlags();
//  }
  printf("\nDRV8214 drivers initialized successfully!\n");
 8001406:	4881      	ldr	r0, [pc, #516]	@ (800160c <main+0x23c>)
 8001408:	f007 fbba 	bl	8008b80 <puts>

  // Blink the LED to indicate startup finished
  WS2812_SetColor(255, 0, 0, 100);
 800140c:	2364      	movs	r3, #100	@ 0x64
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	20ff      	movs	r0, #255	@ 0xff
 8001414:	f7ff fb30 	bl	8000a78 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 8001418:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 800141c:	f001 fb74 	bl	8002b08 <HAL_Delay>
  WS2812_SetColor(0, 255, 0, 100);
 8001420:	2364      	movs	r3, #100	@ 0x64
 8001422:	2200      	movs	r2, #0
 8001424:	21ff      	movs	r1, #255	@ 0xff
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff fb26 	bl	8000a78 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 800142c:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001430:	f001 fb6a 	bl	8002b08 <HAL_Delay>
  WS2812_SetColor(0, 0, 255, 100);
 8001434:	2364      	movs	r3, #100	@ 0x64
 8001436:	22ff      	movs	r2, #255	@ 0xff
 8001438:	2100      	movs	r1, #0
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff fb1c 	bl	8000a78 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 8001440:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001444:	f001 fb60 	bl	8002b08 <HAL_Delay>
  WS2812_SetColor(0, 0, 0, 100); // Turn off the LED
 8001448:	2364      	movs	r3, #100	@ 0x64
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2000      	movs	r0, #0
 8001450:	f7ff fb12 	bl	8000a78 <_Z15WS2812_SetColorhhhh>

  while (1)
  {
    

    if (wakeup_event) {
 8001454:	4b6e      	ldr	r3, [pc, #440]	@ (8001610 <main+0x240>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d067      	beq.n	800152e <main+0x15e>
      // Process the wakeup event (button press)
      printf("Button press detected! ID: %d\r\n", button_ID);
 800145e:	4b6d      	ldr	r3, [pc, #436]	@ (8001614 <main+0x244>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4619      	mov	r1, r3
 8001466:	486c      	ldr	r0, [pc, #432]	@ (8001618 <main+0x248>)
 8001468:	f007 fb22 	bl	8008ab0 <iprintf>
      wakeup_event = false; // Reset flag AFTER processing it
 800146c:	4b68      	ldr	r3, [pc, #416]	@ (8001610 <main+0x240>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
      // display LED color based on button press
      switch (button_ID) {
 8001472:	4b68      	ldr	r3, [pc, #416]	@ (8001614 <main+0x244>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	3b01      	subs	r3, #1
 800147a:	2b03      	cmp	r3, #3
 800147c:	d846      	bhi.n	800150c <main+0x13c>
 800147e:	a201      	add	r2, pc, #4	@ (adr r2, 8001484 <main+0xb4>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	08001495 	.word	0x08001495
 8001488:	080014c3 	.word	0x080014c3
 800148c:	080014f1 	.word	0x080014f1
 8001490:	080014ff 	.word	0x080014ff
        case 1:
          WS2812_SetColor(255, 0, 0, 100); // Red
 8001494:	2364      	movs	r3, #100	@ 0x64
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	20ff      	movs	r0, #255	@ 0xff
 800149c:	f7ff faec 	bl	8000a78 <_Z15WS2812_SetColorhhhh>
          // Move the motor forward
          drivers[0].turnForward(speed_low, voltage, current);
 80014a0:	4b5e      	ldr	r3, [pc, #376]	@ (800161c <main+0x24c>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001620 <main+0x250>)
 80014a6:	edd2 7a00 	vldr	s15, [r2]
 80014aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001624 <main+0x254>)
 80014ac:	ed92 7a00 	vldr	s14, [r2]
 80014b0:	eef0 0a47 	vmov.f32	s1, s14
 80014b4:	eeb0 0a67 	vmov.f32	s0, s15
 80014b8:	4619      	mov	r1, r3
 80014ba:	485b      	ldr	r0, [pc, #364]	@ (8001628 <main+0x258>)
 80014bc:	f001 f8f4 	bl	80026a8 <_ZN7DRV821411turnForwardEtff>
          break;
 80014c0:	e02b      	b.n	800151a <main+0x14a>
        case 2:
          WS2812_SetColor(0, 255, 0, 100); // Green
 80014c2:	2364      	movs	r3, #100	@ 0x64
 80014c4:	2200      	movs	r2, #0
 80014c6:	21ff      	movs	r1, #255	@ 0xff
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff fad5 	bl	8000a78 <_Z15WS2812_SetColorhhhh>
          // Move the motor backward
          drivers[0].turnReverse(speed_low, voltage, current);
 80014ce:	4b53      	ldr	r3, [pc, #332]	@ (800161c <main+0x24c>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	4a53      	ldr	r2, [pc, #332]	@ (8001620 <main+0x250>)
 80014d4:	edd2 7a00 	vldr	s15, [r2]
 80014d8:	4a52      	ldr	r2, [pc, #328]	@ (8001624 <main+0x254>)
 80014da:	ed92 7a00 	vldr	s14, [r2]
 80014de:	eef0 0a47 	vmov.f32	s1, s14
 80014e2:	eeb0 0a67 	vmov.f32	s0, s15
 80014e6:	4619      	mov	r1, r3
 80014e8:	484f      	ldr	r0, [pc, #316]	@ (8001628 <main+0x258>)
 80014ea:	f001 f945 	bl	8002778 <_ZN7DRV821411turnReverseEtff>
          break;
 80014ee:	e014      	b.n	800151a <main+0x14a>
        case 3:
          WS2812_SetColor(0, 0, 255, 100); // Blue
 80014f0:	2364      	movs	r3, #100	@ 0x64
 80014f2:	22ff      	movs	r2, #255	@ 0xff
 80014f4:	2100      	movs	r1, #0
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff fabe 	bl	8000a78 <_Z15WS2812_SetColorhhhh>
          break;
 80014fc:	e00d      	b.n	800151a <main+0x14a>
        case 4:
          WS2812_SetColor(255, 255, 0, 100); // Yellow
 80014fe:	2364      	movs	r3, #100	@ 0x64
 8001500:	2200      	movs	r2, #0
 8001502:	21ff      	movs	r1, #255	@ 0xff
 8001504:	20ff      	movs	r0, #255	@ 0xff
 8001506:	f7ff fab7 	bl	8000a78 <_Z15WS2812_SetColorhhhh>
          break;
 800150a:	e006      	b.n	800151a <main+0x14a>
        default:
          WS2812_SetColor(0, 0, 0, 100); // Off
 800150c:	2364      	movs	r3, #100	@ 0x64
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff fab0 	bl	8000a78 <_Z15WS2812_SetColorhhhh>
          break;
 8001518:	bf00      	nop
      }
      HAL_Delay(1000);
 800151a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800151e:	f001 faf3 	bl	8002b08 <HAL_Delay>
      WS2812_SetColor(0, 0, 0, 100); // Turn off the LED
 8001522:	2364      	movs	r3, #100	@ 0x64
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff faa5 	bl	8000a78 <_Z15WS2812_SetColorhhhh>
    }

    if (g_measure_battery_flag)
 800152e:	4b3f      	ldr	r3, [pc, #252]	@ (800162c <main+0x25c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf14      	ite	ne
 8001538:	2301      	movne	r3, #1
 800153a:	2300      	moveq	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d088      	beq.n	8001454 <main+0x84>
    {
        g_measure_battery_flag = 0; // Reset the flag
 8001542:	4b3a      	ldr	r3, [pc, #232]	@ (800162c <main+0x25c>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]

        // 1. Enable BAT_SENSE circuitry
        HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2102      	movs	r1, #2
 800154c:	4838      	ldr	r0, [pc, #224]	@ (8001630 <main+0x260>)
 800154e:	f003 f979 	bl	8004844 <HAL_GPIO_WritePin>

        // 2. Wait for voltage to settle (C504 charging)
        // Tau = R_eff * C = 2.31kOhm * 100nF = 0.231 ms. 5*Tau ~ 1.15 ms.
        // Let's use a slightly larger delay for safety margin.
        HAL_Delay(10); 
 8001552:	200a      	movs	r0, #10
 8001554:	f001 fad8 	bl	8002b08 <HAL_Delay>

        // 3. Start ADC conversion
        if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8001558:	4836      	ldr	r0, [pc, #216]	@ (8001634 <main+0x264>)
 800155a:	f001 fe5b 	bl	8003214 <HAL_ADC_Start>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <main+0x1b0>
        {
            printf("ADC Start Error\r\n");
 800156e:	4832      	ldr	r0, [pc, #200]	@ (8001638 <main+0x268>)
 8001570:	f007 fb06 	bl	8008b80 <puts>
            // Optionally turn off BAT_SENSE_EN here if error occurs early
            HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2102      	movs	r1, #2
 8001578:	482d      	ldr	r0, [pc, #180]	@ (8001630 <main+0x260>)
 800157a:	f003 f963 	bl	8004844 <HAL_GPIO_WritePin>
 800157e:	e03f      	b.n	8001600 <main+0x230>
            // Handle error
        }
        else
        {
            // 4. Poll for ADC conversion complete (timeout e.g., 100ms)
            if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001580:	2164      	movs	r1, #100	@ 0x64
 8001582:	482c      	ldr	r0, [pc, #176]	@ (8001634 <main+0x264>)
 8001584:	f001 fecd 	bl	8003322 <HAL_ADC_PollForConversion>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d02d      	beq.n	80015f4 <main+0x224>
            {
                // 5. Read ADC value
                uint32_t adc_raw_value = HAL_ADC_GetValue(&hadc1);
 8001598:	4826      	ldr	r0, [pc, #152]	@ (8001634 <main+0x264>)
 800159a:	f001 ff4f 	bl	800343c <HAL_ADC_GetValue>
 800159e:	60f8      	str	r0, [r7, #12]

                // 6. Calculate voltage
                // V_sense = (ADC_raw / ADC_max_resolution) * V_ref
                float v_sense = ((float)adc_raw_value / ADC_RESOLUTION) * VREF_MCU;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015aa:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800163c <main+0x26c>
 80015ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b2:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001640 <main+0x270>
 80015b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ba:	edc7 7a02 	vstr	s15, [r7, #8]
                // VBAT = V_sense * (R502 + R503) / R503
                g_battery_voltage = v_sense * BATTERY_SENSE_DIVIDER_RATIO;
 80015be:	edd7 7a02 	vldr	s15, [r7, #8]
 80015c2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001644 <main+0x274>
 80015c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <main+0x278>)
 80015cc:	edc3 7a00 	vstr	s15, [r3]

                // For debugging:
                // Convert battery voltage to millivolts (integer)
                uint32_t battery_millivolts = (uint32_t)(g_battery_voltage * 1000.0f);
 80015d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <main+0x278>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800164c <main+0x27c>
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e2:	ee17 3a90 	vmov	r3, s15
 80015e6:	607b      	str	r3, [r7, #4]

                // Simple printf for debugging
                printf("ADC Raw: %lu, VBAT_mV: %lu\r\n",
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	68f9      	ldr	r1, [r7, #12]
 80015ec:	4818      	ldr	r0, [pc, #96]	@ (8001650 <main+0x280>)
 80015ee:	f007 fa5f 	bl	8008ab0 <iprintf>
 80015f2:	e002      	b.n	80015fa <main+0x22a>
                       adc_raw_value,
                       battery_millivolts);
            }
            else
            {
                printf("ADC Poll Timeout\r\n");
 80015f4:	4817      	ldr	r0, [pc, #92]	@ (8001654 <main+0x284>)
 80015f6:	f007 fac3 	bl	8008b80 <puts>
                // Handle timeout
            }
            // Stop ADC (important if not in continuous mode, good practice anyway)
            HAL_ADC_Stop(&hadc1);
 80015fa:	480e      	ldr	r0, [pc, #56]	@ (8001634 <main+0x264>)
 80015fc:	f001 fe5e 	bl	80032bc <HAL_ADC_Stop>
        }

        // 7. Disable BAT_SENSE circuitry to save power
        HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2102      	movs	r1, #2
 8001604:	480a      	ldr	r0, [pc, #40]	@ (8001630 <main+0x260>)
 8001606:	f003 f91d 	bl	8004844 <HAL_GPIO_WritePin>
//	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800160a:	e723      	b.n	8001454 <main+0x84>
 800160c:	08009bc4 	.word	0x08009bc4
 8001610:	200001f4 	.word	0x200001f4
 8001614:	200001f5 	.word	0x200001f5
 8001618:	08009bf0 	.word	0x08009bf0
 800161c:	20000010 	.word	0x20000010
 8001620:	20000014 	.word	0x20000014
 8001624:	20000018 	.word	0x20000018
 8001628:	20000200 	.word	0x20000200
 800162c:	200001ec 	.word	0x200001ec
 8001630:	48001c00 	.word	0x48001c00
 8001634:	200000a4 	.word	0x200000a4
 8001638:	08009c10 	.word	0x08009c10
 800163c:	457ff000 	.word	0x457ff000
 8001640:	40533333 	.word	0x40533333
 8001644:	3fa66666 	.word	0x3fa66666
 8001648:	200001f0 	.word	0x200001f0
 800164c:	447a0000 	.word	0x447a0000
 8001650:	08009c24 	.word	0x08009c24
 8001654:	08009c44 	.word	0x08009c44

08001658 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b09a      	sub	sp, #104	@ 0x68
 800165c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165e:	f107 0320 	add.w	r3, r7, #32
 8001662:	2248      	movs	r2, #72	@ 0x48
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f007 fa92 	bl	8008b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]
 800167a:	615a      	str	r2, [r3, #20]
 800167c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800167e:	4b30      	ldr	r3, [pc, #192]	@ (8001740 <_Z18SystemClock_Configv+0xe8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001686:	4a2e      	ldr	r2, [pc, #184]	@ (8001740 <_Z18SystemClock_Configv+0xe8>)
 8001688:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <_Z18SystemClock_Configv+0xe8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800169a:	232b      	movs	r3, #43	@ 0x2b
 800169c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800169e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016aa:	2301      	movs	r3, #1
 80016ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ae:	2340      	movs	r3, #64	@ 0x40
 80016b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016b6:	2360      	movs	r3, #96	@ 0x60
 80016b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016ba:	2305      	movs	r3, #5
 80016bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016be:	2302      	movs	r3, #2
 80016c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016c2:	2301      	movs	r3, #1
 80016c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 30;
 80016ca:	231e      	movs	r3, #30
 80016cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 80016d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016de:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 fc63 	bl	8005fb0 <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80016fa:	f000 f8ab 	bl	8001854 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80016fe:	236f      	movs	r3, #111	@ 0x6f
 8001700:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001702:	2303      	movs	r3, #3
 8001704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001712:	2380      	movs	r3, #128	@ 0x80
 8001714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2102      	movs	r1, #2
 800171e:	4618      	mov	r0, r3
 8001720:	f004 ffba 	bl	8006698 <HAL_RCC_ClockConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	bf14      	ite	ne
 800172a:	2301      	movne	r3, #1
 800172c:	2300      	moveq	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <_Z18SystemClock_Configv+0xe0>
  {
    Error_Handler();
 8001734:	f000 f88e 	bl	8001854 <Error_Handler>
  }
}
 8001738:	bf00      	nop
 800173a:	3768      	adds	r7, #104	@ 0x68
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	58000400 	.word	0x58000400

08001744 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b094      	sub	sp, #80	@ 0x50
 8001748:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800174a:	463b      	mov	r3, r7
 800174c:	2250      	movs	r2, #80	@ 0x50
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f007 fa1d 	bl	8008b90 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800175a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800175c:	2300      	movs	r3, #0
 800175e:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001760:	2310      	movs	r3, #16
 8001762:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	4618      	mov	r0, r3
 8001768:	f005 fba7 	bl	8006eba <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf14      	ite	ne
 8001772:	2301      	movne	r3, #1
 8001774:	2300      	moveq	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <_Z24PeriphCommonClock_Configv+0x3c>
  {
    Error_Handler();
 800177c:	f000 f86a 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001780:	bf00      	nop
 8001782:	3750      	adds	r7, #80	@ 0x50
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUTTON1_Pin) // Replace YOUR_BUTTON_PIN with the actual pin, e.g., GPIO_PIN_13
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	2b80      	cmp	r3, #128	@ 0x80
 8001796:	d109      	bne.n	80017ac <HAL_GPIO_EXTI_Callback+0x24>
  {
	  wakeup_event = true; // Set flag for next loop iteration
 8001798:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <HAL_GPIO_EXTI_Callback+0x80>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800179e:	4a1b      	ldr	r2, [pc, #108]	@ (800180c <HAL_GPIO_EXTI_Callback+0x84>)
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	60d3      	str	r3, [r2, #12]
	  button_ID = 1;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x88>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
	  button_ID = 4;
  }
  // You can add else if blocks for other EXTI pins if needed
  // else if (GPIO_Pin == OTHER_EXTI_PIN) { ... }
}
 80017aa:	e026      	b.n	80017fa <HAL_GPIO_EXTI_Callback+0x72>
  } else if (GPIO_Pin == BUTTON2_Pin) {
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	d109      	bne.n	80017c6 <HAL_GPIO_EXTI_Callback+0x3e>
	  wakeup_event = true; // Set flag for next loop iteration
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <HAL_GPIO_EXTI_Callback+0x80>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b8:	4a14      	ldr	r2, [pc, #80]	@ (800180c <HAL_GPIO_EXTI_Callback+0x84>)
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	60d3      	str	r3, [r2, #12]
	  button_ID = 2;
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x88>)
 80017c0:	2202      	movs	r2, #2
 80017c2:	701a      	strb	r2, [r3, #0]
}
 80017c4:	e019      	b.n	80017fa <HAL_GPIO_EXTI_Callback+0x72>
  else if (GPIO_Pin == BUTTON3_Pin) {
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	2b10      	cmp	r3, #16
 80017ca:	d109      	bne.n	80017e0 <HAL_GPIO_EXTI_Callback+0x58>
	  wakeup_event = true; // Set flag for next loop iteration
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_GPIO_EXTI_Callback+0x80>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017d2:	4a0e      	ldr	r2, [pc, #56]	@ (800180c <HAL_GPIO_EXTI_Callback+0x84>)
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	60d3      	str	r3, [r2, #12]
	  button_ID = 3;
 80017d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x88>)
 80017da:	2203      	movs	r2, #3
 80017dc:	701a      	strb	r2, [r3, #0]
}
 80017de:	e00c      	b.n	80017fa <HAL_GPIO_EXTI_Callback+0x72>
  else if (GPIO_Pin == BUTTON4_Pin) {
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017e6:	d108      	bne.n	80017fa <HAL_GPIO_EXTI_Callback+0x72>
	  wakeup_event = true; // Set flag for next loop iteration
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <HAL_GPIO_EXTI_Callback+0x80>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ee:	4a07      	ldr	r2, [pc, #28]	@ (800180c <HAL_GPIO_EXTI_Callback+0x84>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	60d3      	str	r3, [r2, #12]
	  button_ID = 4;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x88>)
 80017f6:	2204      	movs	r2, #4
 80017f8:	701a      	strb	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	200001f4 	.word	0x200001f4
 800180c:	58000800 	.word	0x58000800
 8001810:	200001f5 	.word	0x200001f5

08001814 <HAL_TIM_PeriodElapsedCallback>:
  }
  return len;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  // Check which Systick timer is generating the interrupt
  if (htim->Instance == TIM1) { // Or whatever your HAL_IncTick uses
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a09      	ldr	r2, [pc, #36]	@ (8001848 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d102      	bne.n	800182c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001826:	f001 f943 	bl	8002ab0 <HAL_IncTick>
  else if (htim->Instance == htim2.Instance) // Check against the specific timer instance
  {
    g_measure_battery_flag = 1;
  }
  // Add other timer callbacks if you have them
}
 800182a:	e008      	b.n	800183e <HAL_TIM_PeriodElapsedCallback+0x2a>
  else if (htim->Instance == htim2.Instance) // Check against the specific timer instance
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d102      	bne.n	800183e <HAL_TIM_PeriodElapsedCallback+0x2a>
    g_measure_battery_flag = 1;
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40012c00 	.word	0x40012c00
 800184c:	20000324 	.word	0x20000324
 8001850:	200001ec 	.word	0x200001ec

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <Error_Handler+0x8>

08001860 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af04      	add	r7, sp, #16
float half_range_ripples = full_range_ripples / 2;
 8001866:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <_Z41__static_initialization_and_destruction_0v+0x60>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	b29b      	uxth	r3, r3
 800186e:	ee07 3a90 	vmov	s15, r3
 8001872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001876:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <_Z41__static_initialization_and_destruction_0v+0x64>)
 8001878:	edc3 7a00 	vstr	s15, [r3]
float nb_ripples_per_mm = full_range_ripples / full_range_mm;
 800187c:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <_Z41__static_initialization_and_destruction_0v+0x60>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <_Z41__static_initialization_and_destruction_0v+0x68>)
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <_Z41__static_initialization_and_destruction_0v+0x6c>)
 8001894:	edc3 7a00 	vstr	s15, [r3]
};
 8001898:	480d      	ldr	r0, [pc, #52]	@ (80018d0 <_Z41__static_initialization_and_destruction_0v+0x70>)
 800189a:	f240 4382 	movw	r3, #1154	@ 0x482
 800189e:	9303      	str	r3, [sp, #12]
 80018a0:	231a      	movs	r3, #26
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	2314      	movs	r3, #20
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	2306      	movs	r3, #6
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 80018b0:	2200      	movs	r2, #0
 80018b2:	2130      	movs	r1, #48	@ 0x30
 80018b4:	f7ff fd5e 	bl	8001374 <_ZN7DRV8214C1Ehhthhht>
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000008 	.word	0x20000008
 80018c4:	200001f8 	.word	0x200001f8
 80018c8:	2000000c 	.word	0x2000000c
 80018cc:	200001fc 	.word	0x200001fc
 80018d0:	20000200 	.word	0x20000200

080018d4 <_GLOBAL__sub_I_g_measure_battery_flag>:
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	f7ff ffc2 	bl	8001860 <_Z41__static_initialization_and_destruction_0v>
 80018dc:	bd80      	pop	{r7, pc}

080018de <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_APB1_GRP1_EnableClock>:
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800190c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800190e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4013      	ands	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001924:	68fb      	ldr	r3, [r7, #12]
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001938:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <MX_RTC_Init+0x5c>)
 800193a:	4a16      	ldr	r2, [pc, #88]	@ (8001994 <MX_RTC_Init+0x60>)
 800193c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800193e:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <MX_RTC_Init+0x5c>)
 8001940:	2200      	movs	r2, #0
 8001942:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <MX_RTC_Init+0x5c>)
 8001946:	227f      	movs	r2, #127	@ 0x7f
 8001948:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <MX_RTC_Init+0x5c>)
 800194c:	22ff      	movs	r2, #255	@ 0xff
 800194e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <MX_RTC_Init+0x5c>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <MX_RTC_Init+0x5c>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <MX_RTC_Init+0x5c>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <MX_RTC_Init+0x5c>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001968:	4809      	ldr	r0, [pc, #36]	@ (8001990 <MX_RTC_Init+0x5c>)
 800196a:	f005 fd2d 	bl	80073c8 <HAL_RTC_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001974:	f7ff ff6e 	bl	8001854 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	4804      	ldr	r0, [pc, #16]	@ (8001990 <MX_RTC_Init+0x5c>)
 800197e:	f005 fe31 	bl	80075e4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001988:	f7ff ff64 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000238 	.word	0x20000238
 8001994:	40002800 	.word	0x40002800

08001998 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b096      	sub	sp, #88	@ 0x58
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	2250      	movs	r2, #80	@ 0x50
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f007 f8f1 	bl	8008b90 <memset>
  if(rtcHandle->Instance==RTC)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a13      	ldr	r2, [pc, #76]	@ (8001a00 <HAL_RTC_MspInit+0x68>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d11f      	bne.n	80019f8 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 80019b8:	f003 ff2c 	bl	8005814 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019c0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	4618      	mov	r0, r3
 80019ce:	f005 fa74 	bl	8006eba <HAL_RCCEx_PeriphCLKConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 80019d8:	f7ff ff3c 	bl	8001854 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019dc:	f7ff ff7f 	bl	80018de <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80019e0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80019e4:	f7ff ff8c 	bl	8001900 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	2003      	movs	r0, #3
 80019ee:	f002 fb6a 	bl	80040c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80019f2:	2003      	movs	r0, #3
 80019f4:	f002 fb81 	bl	80040fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80019f8:	bf00      	nop
 80019fa:	3758      	adds	r7, #88	@ 0x58
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40002800 	.word	0x40002800

08001a04 <LL_AHB2_GRP1_EnableClock>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a28:	68fb      	ldr	r3, [r7, #12]
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_APB1_GRP1_EnableClock>:
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4013      	ands	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <MX_SPI2_Init+0x78>)
 8001a70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001a74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a80:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001a82:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a86:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a88:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a94:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a9a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001a9e:	2218      	movs	r2, #24
 8001aa0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_SPI2_Init+0x74>)
 8001ac8:	f005 fe88 	bl	80077dc <HAL_SPI_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ad2:	f7ff febf 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000025c 	.word	0x2000025c
 8001ae0:	40003800 	.word	0x40003800

08001ae4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a31      	ldr	r2, [pc, #196]	@ (8001bc8 <HAL_SPI_MspInit+0xe4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d15b      	bne.n	8001bbe <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b06:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b0a:	f7ff ff94 	bl	8001a36 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	2004      	movs	r0, #4
 8001b10:	f7ff ff78 	bl	8001a04 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	2002      	movs	r0, #2
 8001b16:	f7ff ff75 	bl	8001a04 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	4619      	mov	r1, r3
 8001b34:	4825      	ldr	r0, [pc, #148]	@ (8001bcc <HAL_SPI_MspInit+0xe8>)
 8001b36:	f002 fd15 	bl	8004564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b4c:	2305      	movs	r3, #5
 8001b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	481e      	ldr	r0, [pc, #120]	@ (8001bd0 <HAL_SPI_MspInit+0xec>)
 8001b58:	f002 fd04 	bl	8004564 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd8 <HAL_SPI_MspInit+0xf4>)
 8001b60:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001b64:	2209      	movs	r2, #9
 8001b66:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b74:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001b76:	2280      	movs	r2, #128	@ 0x80
 8001b78:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b7a:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b92:	4810      	ldr	r0, [pc, #64]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001b94:	f002 facc 	bl	8004130 <HAL_DMA_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8001b9e:	f7ff fe59 	bl	8001854 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001ba6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <HAL_SPI_MspInit+0xf0>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2023      	movs	r0, #35	@ 0x23
 8001bb4:	f002 fa87 	bl	80040c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bb8:	2023      	movs	r0, #35	@ 0x23
 8001bba:	f002 fa9e 	bl	80040fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40003800 	.word	0x40003800
 8001bcc:	48000800 	.word	0x48000800
 8001bd0:	48000400 	.word	0x48000400
 8001bd4:	200002c0 	.word	0x200002c0
 8001bd8:	40020008 	.word	0x40020008

08001bdc <LL_AHB3_GRP1_EnableClock>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c00:	68fb      	ldr	r3, [r7, #12]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8001c14:	463b      	mov	r3, r7
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001c1c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001c20:	f7ff ffdc 	bl	8001bdc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	202e      	movs	r0, #46	@ 0x2e
 8001c2a:	f002 fa4c 	bl	80040c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001c2e:	202e      	movs	r0, #46	@ 0x2e
 8001c30:	f002 fa63 	bl	80040fa <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fdf8 	bl	8005834 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8001c44:	f003 fe38 	bl	80058b8 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <NMI_Handler+0x4>

08001c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <MemManage_Handler+0x4>

08001c68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <BusFault_Handler+0x4>

08001c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <UsageFault_Handler+0x4>

08001c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca6:	f000 ff03 	bl	8002ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <RTC_WKUP_IRQHandler+0x10>)
 8001cb6:	f005 fd61 	bl	800777c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000238 	.word	0x20000238

08001cc4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8001cc8:	2010      	movs	r0, #16
 8001cca:	f002 fdd3 	bl	8004874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001cd8:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <DMA1_Channel1_IRQHandler+0x10>)
 8001cda:	f002 fb30 	bl	800433e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002c0 	.word	0x200002c0

08001ce8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8001cec:	2020      	movs	r0, #32
 8001cee:	f002 fdc1 	bl	8004874 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8001cf2:	2080      	movs	r0, #128	@ 0x80
 8001cf4:	f002 fdbe 	bl	8004874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d00:	4802      	ldr	r0, [pc, #8]	@ (8001d0c <TIM2_IRQHandler+0x10>)
 8001d02:	f006 fa60 	bl	80081c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000324 	.word	0x20000324

08001d10 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d14:	4802      	ldr	r0, [pc, #8]	@ (8001d20 <SPI2_IRQHandler+0x10>)
 8001d16:	f005 ff7b 	bl	8007c10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000025c 	.word	0x2000025c

08001d24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 8001d28:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d2c:	f002 fda2 	bl	8004874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <IPCC_C1_RX_IRQHandler+0x10>)
 8001d3a:	f003 fc3f 	bl	80055bc <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200001b0 	.word	0x200001b0

08001d48 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <IPCC_C1_TX_IRQHandler+0x10>)
 8001d4e:	f003 fbe7 	bl	8005520 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200001b0 	.word	0x200001b0

08001d5c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001d60:	f002 fda0 	bl	80048a4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e00a      	b.n	8001d90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d7a:	f3af 8000 	nop.w
 8001d7e:	4601      	mov	r1, r0
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	60ba      	str	r2, [r7, #8]
 8001d86:	b2ca      	uxtb	r2, r1
 8001d88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbf0      	blt.n	8001d7a <_read+0x12>
  }

  return len;
 8001d98:	687b      	ldr	r3, [r7, #4]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e009      	b.n	8001dc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60ba      	str	r2, [r7, #8]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbf1      	blt.n	8001db4 <_write+0x12>
  }
  return len;
 8001dd0:	687b      	ldr	r3, [r7, #4]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_close>:

int _close(int file)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e02:	605a      	str	r2, [r3, #4]
  return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_isatty>:

int _isatty(int file)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ea0 <_sbrk+0x5c>)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <_sbrk+0x60>)
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <_sbrk+0x64>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <_sbrk+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d207      	bcs.n	8001e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e74:	f006 fe94 	bl	8008ba0 <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e82:	e009      	b.n	8001e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a05      	ldr	r2, [pc, #20]	@ (8001ea8 <_sbrk+0x64>)
 8001e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20030000 	.word	0x20030000
 8001ea4:	00000400 	.word	0x00000400
 8001ea8:	20000320 	.word	0x20000320
 8001eac:	200004c8 	.word	0x200004c8

08001eb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001eb4:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <SystemInit+0x98>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	4a23      	ldr	r2, [pc, #140]	@ (8001f48 <SystemInit+0x98>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ed8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001edc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ee8:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <SystemInit+0x9c>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001efa:	f023 0305 	bic.w	r3, r3, #5
 8001efe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <SystemInit+0xa0>)
 8001f1c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f22:	4a0b      	ldr	r2, [pc, #44]	@ (8001f50 <SystemInit+0xa0>)
 8001f24:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00
 8001f4c:	faf6fefb 	.word	0xfaf6fefb
 8001f50:	22041000 	.word	0x22041000

08001f54 <LL_APB1_GRP1_EnableClock>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f78:	68fb      	ldr	r3, [r7, #12]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <MX_TIM2_Init+0x98>)
 8001fa8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8001fae:	4b1c      	ldr	r3, [pc, #112]	@ (8002020 <MX_TIM2_Init+0x98>)
 8001fb0:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001fb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <MX_TIM2_Init+0x98>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001fbc:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <MX_TIM2_Init+0x98>)
 8001fbe:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001fc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc4:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <MX_TIM2_Init+0x98>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fca:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <MX_TIM2_Init+0x98>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fd0:	4813      	ldr	r0, [pc, #76]	@ (8002020 <MX_TIM2_Init+0x98>)
 8001fd2:	f006 f8a1 	bl	8008118 <HAL_TIM_Base_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001fdc:	f7ff fc3a 	bl	8001854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fe6:	f107 0310 	add.w	r3, r7, #16
 8001fea:	4619      	mov	r1, r3
 8001fec:	480c      	ldr	r0, [pc, #48]	@ (8002020 <MX_TIM2_Init+0x98>)
 8001fee:	f006 f9f1 	bl	80083d4 <HAL_TIM_ConfigClockSource>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ff8:	f7ff fc2c 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4805      	ldr	r0, [pc, #20]	@ (8002020 <MX_TIM2_Init+0x98>)
 800200a:	f006 fbdb 	bl	80087c4 <HAL_TIMEx_MasterConfigSynchronization>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002014:	f7ff fc1e 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000324 	.word	0x20000324

08002024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002034:	d10a      	bne.n	800204c <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002036:	2001      	movs	r0, #1
 8002038:	f7ff ff8c 	bl	8001f54 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	201c      	movs	r0, #28
 8002042:	f002 f840 	bl	80040c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002046:	201c      	movs	r0, #28
 8002048:	f002 f857 	bl	80040fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002054:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002056:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002058:	3304      	adds	r3, #4

0800205a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800205a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800205e:	d3f9      	bcc.n	8002054 <CopyDataInit>
  bx lr
 8002060:	4770      	bx	lr

08002062 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002062:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002064:	3004      	adds	r0, #4

08002066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002066:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002068:	d3fb      	bcc.n	8002062 <FillZerobss>
  bx lr
 800206a:	4770      	bx	lr

0800206c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800206c:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800206e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002070:	f7ff ff1e 	bl	8001eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002074:	480b      	ldr	r0, [pc, #44]	@ (80020a4 <LoopForever+0x6>)
 8002076:	490c      	ldr	r1, [pc, #48]	@ (80020a8 <LoopForever+0xa>)
 8002078:	4a0c      	ldr	r2, [pc, #48]	@ (80020ac <LoopForever+0xe>)
 800207a:	2300      	movs	r3, #0
 800207c:	f7ff ffed 	bl	800205a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002080:	480b      	ldr	r0, [pc, #44]	@ (80020b0 <LoopForever+0x12>)
 8002082:	490c      	ldr	r1, [pc, #48]	@ (80020b4 <LoopForever+0x16>)
 8002084:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <LoopForever+0x1a>)
 8002086:	2300      	movs	r3, #0
 8002088:	f7ff ffe7 	bl	800205a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800208c:	480b      	ldr	r0, [pc, #44]	@ (80020bc <LoopForever+0x1e>)
 800208e:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <LoopForever+0x22>)
 8002090:	2300      	movs	r3, #0
 8002092:	f7ff ffe8 	bl	8002066 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002096:	f006 fd89 	bl	8008bac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800209a:	f7ff f999 	bl	80013d0 <main>

0800209e <LoopForever>:

LoopForever:
  b LoopForever
 800209e:	e7fe      	b.n	800209e <LoopForever>
  ldr   r0, =_estack
 80020a0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80020a4:	20000008 	.word	0x20000008
 80020a8:	20000084 	.word	0x20000084
 80020ac:	0800a2e8 	.word	0x0800a2e8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80020b0:	20030000 	.word	0x20030000
 80020b4:	20030000 	.word	0x20030000
 80020b8:	0800a364 	.word	0x0800a364
  INIT_BSS _sbss, _ebss
 80020bc:	20000084 	.word	0x20000084
 80020c0:	200004c4 	.word	0x200004c4

080020c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC1_IRQHandler>

080020c6 <_ZN7DRV821413enableHbridgeEv>:
uint8_t DRV8214::getRC_CTRL8() {
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL8);
}

// --- Control Functions ---
void DRV8214::enableHbridge() {
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OUT, true);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7818      	ldrb	r0, [r3, #0]
 80020d2:	2301      	movs	r3, #1
 80020d4:	2280      	movs	r2, #128	@ 0x80
 80020d6:	2109      	movs	r1, #9
 80020d8:	f000 fc2c 	bl	8002934 <_Z27drv8214_i2c_modify_registerhhhh>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_ZN7DRV821414disableHbridgeEv>:

void DRV8214::disableHbridge() {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OUT, false);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7818      	ldrb	r0, [r3, #0]
 80020f0:	2300      	movs	r3, #0
 80020f2:	2280      	movs	r2, #128	@ 0x80
 80020f4:	2109      	movs	r1, #9
 80020f6:	f000 fc1d 	bl	8002934 <_Z27drv8214_i2c_modify_registerhhhh>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <_ZN7DRV821428setRegulationAndStallCurrentEf>:

void DRV8214::configureControl0(uint8_t control0) {
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL0, control0);
}

void DRV8214::setRegulationAndStallCurrent(float requested_current) {
 8002104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002108:	b0cd      	sub	sp, #308	@ 0x134
 800210a:	af08      	add	r7, sp, #32
 800210c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002110:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002114:	6018      	str	r0, [r3, #0]
 8002116:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800211a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800211e:	ed83 0a00 	vstr	s0, [r3]
    //   1X1b => 5560 μA/A, max current 0.125 A

    uint8_t cs_gain_sel;

    // Clamp very low currents (<0.125 A) to the lowest recommended setting:
    if (requested_current < 0.125f) {
 8002122:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002126:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213a:	d512      	bpl.n	8002162 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x5e>
        cs_gain_sel = 0b111; // 5560 μA/A, max current 0.125 A
 800213c:	2307      	movs	r3, #7
 800213e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 5560e-6; // Convert μA/A to A/A
 8002142:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002146:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a89      	ldr	r2, [pc, #548]	@ (8002374 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x270>)
 800214e:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.125f;
 8002150:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002154:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 800215e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002160:	e091      	b.n	8002286 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 0.25f) {
 8002162:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002166:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800216a:	edd3 7a00 	vldr	s15, [r3]
 800216e:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8002172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217a:	d512      	bpl.n	80021a2 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x9e>
        cs_gain_sel = 0b110; // 5560 μA/A, max current 0.25 A
 800217c:	2306      	movs	r3, #6
 800217e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 5560e-6;
 8002182:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002186:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a79      	ldr	r2, [pc, #484]	@ (8002374 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x270>)
 800218e:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.25f;
 8002190:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002194:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24
 80021a0:	e071      	b.n	8002286 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 0.5f) {
 80021a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80021b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ba:	d512      	bpl.n	80021e2 <_ZN7DRV821428setRegulationAndStallCurrentEf+0xde>
        cs_gain_sel = 0b011; // 1125 μA/A, max current 0.5 A
 80021bc:	2303      	movs	r3, #3
 80021be:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 1125e-6;
 80021c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002378 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x274>)
 80021ce:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.5f;
 80021d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80021de:	625a      	str	r2, [r3, #36]	@ 0x24
 80021e0:	e051      	b.n	8002286 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 1.0f) {
 80021e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fa:	d512      	bpl.n	8002222 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x11e>
        cs_gain_sel = 0b010; // 1125 μA/A, max current 1 A
 80021fc:	2302      	movs	r3, #2
 80021fe:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 1125e-6;
 8002202:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002206:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a5a      	ldr	r2, [pc, #360]	@ (8002378 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x274>)
 800220e:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 1.0f;
 8002210:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002214:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800221e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002220:	e031      	b.n	8002286 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 2.0f) {
 8002222:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002226:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	d512      	bpl.n	8002262 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x15e>
        cs_gain_sel = 0b001; // 225 μA/A, max current 2 A
 800223c:	2301      	movs	r3, #1
 800223e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 225e-6;
 8002242:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002246:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a4b      	ldr	r2, [pc, #300]	@ (800237c <_ZN7DRV821428setRegulationAndStallCurrentEf+0x278>)
 800224e:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 2.0f;
 8002250:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002254:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800225e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002260:	e011      	b.n	8002286 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else {
        // For >= 2.0 A, recommended setting is 000b (max current 4 A).
        // Also clamp above 4 A to the same setting (since 4 A is the top of the recommended range).
        cs_gain_sel = 0b000; // 225 μA/A, max current 4 A
 8002262:	2300      	movs	r3, #0
 8002264:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 225e-6;
 8002268:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800226c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a42      	ldr	r2, [pc, #264]	@ (800237c <_ZN7DRV821428setRegulationAndStallCurrentEf+0x278>)
 8002274:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 4.0f;
 8002276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800227a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL0, RC_CTRL0_CS_GAIN_SEL, cs_gain_sel);
 8002286:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800228a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	7818      	ldrb	r0, [r3, #0]
 8002292:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002296:	2207      	movs	r2, #7
 8002298:	2111      	movs	r1, #17
 800229a:	f000 fb7d 	bl	8002998 <_Z32drv8214_i2c_modify_register_bitshhhh>

    // Update Itrip calculation with the new scale
    config.Itrip = config.Vref / (Ripropri * config.Aipropri);
 800229e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	edd3 6a04 	vldr	s13, [r3, #16]
 80022ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	885b      	ldrh	r3, [r3, #2]
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80022ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	edc3 7a08 	vstr	s15, [r3, #32]

    if (config.verbose) {
 80022e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d038      	beq.n	8002368 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x264>
        char buffer[256];
        snprintf(buffer, sizeof(buffer), "Requested Itrip = %f A => Chosen CS_GAIN_SEL: 0b%d => Aipropri = %f uA/A => Actual Itrip = %f A\n", requested_current, cs_gain_sel, config.Aipropri, config.Itrip);
 80022f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022fa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	f7fe f8f2 	bl	80004e8 <__aeabi_f2d>
 8002304:	4604      	mov	r4, r0
 8002306:	460d      	mov	r5, r1
 8002308:	f897 610f 	ldrb.w	r6, [r7, #271]	@ 0x10f
 800230c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002310:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f8e5 	bl	80004e8 <__aeabi_f2d>
 800231e:	4680      	mov	r8, r0
 8002320:	4689      	mov	r9, r1
 8002322:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002326:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe f8da 	bl	80004e8 <__aeabi_f2d>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	f107 000c 	add.w	r0, r7, #12
 800233c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002340:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002344:	9602      	str	r6, [sp, #8]
 8002346:	e9cd 4500 	strd	r4, r5, [sp]
 800234a:	4a0d      	ldr	r2, [pc, #52]	@ (8002380 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x27c>)
 800234c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002350:	f006 fab6 	bl	80088c0 <sniprintf>
        drvPrint(buffer);
 8002354:	f107 020c 	add.w	r2, r7, #12
 8002358:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800235c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002360:	4611      	mov	r1, r2
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	f000 fa6c 	bl	8002840 <_ZN7DRV82148drvPrintEPKc>
    }
}
 8002368:	bf00      	nop
 800236a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800236e:	46bd      	mov	sp, r7
 8002370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002374:	3bb630a9 	.word	0x3bb630a9
 8002378:	3a9374bc 	.word	0x3a9374bc
 800237c:	396bedfa 	.word	0x396bedfa
 8002380:	08009c58 	.word	0x08009c58
 8002384:	00000000 	.word	0x00000000

08002388 <_ZN7DRV821414setRippleSpeedEt>:

void DRV8214::setRippleSpeed(uint16_t speed) {
 8002388:	b5b0      	push	{r4, r5, r7, lr}
 800238a:	b0d2      	sub	sp, #328	@ 0x148
 800238c:	af04      	add	r7, sp, #16
 800238e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002392:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002396:	6018      	str	r0, [r3, #0]
 8002398:	460a      	mov	r2, r1
 800239a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800239e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80023a2:	801a      	strh	r2, [r3, #0]
    if (speed > motor_max_rpm) { speed = motor_max_rpm; } // Cap speed to the maximum RPM of the motor
 80023a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80023a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	891b      	ldrh	r3, [r3, #8]
 80023b0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80023b4:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80023b8:	8812      	ldrh	r2, [r2, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d90a      	bls.n	80023d4 <_ZN7DRV821414setRippleSpeedEt+0x4c>
 80023be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80023c2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80023c6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80023ca:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	8912      	ldrh	r2, [r2, #8]
 80023d2:	801a      	strh	r2, [r3, #0]

    // Find the corresponding ripples frequency (Hz) value
    uint32_t ripple_speed = (speed * motor_reduction_ratio * ripples_per_revolution * 2 * M_PI) / 60;
 80023d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80023d8:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80023e2:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	79d2      	ldrb	r2, [r2, #7]
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80023f2:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	8892      	ldrh	r2, [r2, #4]
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f85f 	bl	80004c4 <__aeabi_i2d>
 8002406:	a36d      	add	r3, pc, #436	@ (adr r3, 80025bc <_ZN7DRV821414setRippleSpeedEt+0x234>)
 8002408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240c:	f7fe f8c4 	bl	8000598 <__aeabi_dmul>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	4b64      	ldr	r3, [pc, #400]	@ (80025b0 <_ZN7DRV821414setRippleSpeedEt+0x228>)
 800241e:	f7fe f9e5 	bl	80007ec <__aeabi_ddiv>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	f7fe fac7 	bl	80009bc <__aeabi_d2uiz>
 800242e:	4603      	mov	r3, r0
 8002430:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    // Define max feasible ripple speed based on 8-bit WSET_VSET and max scaling factor (128)
    const uint16_t MAX_SPEED = 32640; // 255 * 128 = 32640 rad/s
 8002434:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 8002438:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    
    // Cap threshold to the maximum feasible value
    if (ripple_speed > MAX_SPEED) { ripple_speed = MAX_SPEED; }
 800243c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002440:	f5b3 4fff 	cmp.w	r3, #32640	@ 0x7f80
 8002444:	d903      	bls.n	800244e <_ZN7DRV821414setRippleSpeedEt+0xc6>
 8002446:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 800244a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    struct ScaleOption {
        uint16_t scale;
        uint8_t bits;
    };

    ScaleOption scaleOptions[] = {
 800244e:	4b59      	ldr	r3, [pc, #356]	@ (80025b4 <_ZN7DRV821414setRippleSpeedEt+0x22c>)
 8002450:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 8002454:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002456:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {64, 0b10},
        {128, 0b11}
    };

    // Find the optimal scaling factor and 10-bit value
    uint16_t WSET_VSET = ripple_speed;
 800245a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800245e:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    uint8_t W_SCALE = 0b00;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131

    for (const auto &option : scaleOptions) {
 8002468:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800246c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002470:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002474:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002478:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800247c:	3310      	adds	r3, #16
 800247e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002482:	e024      	b.n	80024ce <_ZN7DRV821414setRippleSpeedEt+0x146>
 8002484:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002488:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        if (ripple_speed >= option.scale) {
 800248c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002498:	4293      	cmp	r3, r2
 800249a:	d313      	bcc.n	80024c4 <_ZN7DRV821414setRippleSpeedEt+0x13c>
            WSET_VSET = ripple_speed / option.scale;
 800249c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80024a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80024ac:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
            if (WSET_VSET <= 255) { // Ensure WSET_VSET fits within 8 bits
 80024b0:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80024b4:	2bff      	cmp	r3, #255	@ 0xff
 80024b6:	d805      	bhi.n	80024c4 <_ZN7DRV821414setRippleSpeedEt+0x13c>
                W_SCALE = option.bits;
 80024b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024bc:	789b      	ldrb	r3, [r3, #2]
 80024be:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
                break;
 80024c2:	e00a      	b.n	80024da <_ZN7DRV821414setRippleSpeedEt+0x152>
    for (const auto &option : scaleOptions) {
 80024c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024c8:	3304      	adds	r3, #4
 80024ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80024ce:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80024d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d1d4      	bne.n	8002484 <_ZN7DRV821414setRippleSpeedEt+0xfc>
            }
        }
    }
    config.w_scale = scaleOptions[W_SCALE].scale;
 80024da:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80024e4:	443b      	add	r3, r7
 80024e6:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80024f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    WSET_VSET = WSET_VSET & 0xFF; // Ensure WSET_VSET fits within 8 bits
 80024fa:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132

    if (config.verbose) {
 8002504:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002508:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002512:	2b00      	cmp	r3, #0
 8002514:	d02b      	beq.n	800256e <_ZN7DRV821414setRippleSpeedEt+0x1e6>
        char buffer[256];  // Adjust the buffer size as needed
        snprintf(buffer, sizeof(buffer), "WSET_VSET: %d | W_SCALE: %d or 0b%d | Effective Target Speed: %d rad/s\n", WSET_VSET, config.w_scale, W_SCALE, WSET_VSET * config.w_scale);
 8002516:	f8b7 4132 	ldrh.w	r4, [r7, #306]	@ 0x132
 800251a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800251e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002528:	461d      	mov	r5, r3
 800252a:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 800252e:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 8002532:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8002536:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800253a:	6809      	ldr	r1, [r1, #0]
 800253c:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 8002540:	fb01 f202 	mul.w	r2, r1, r2
 8002544:	f107 000c 	add.w	r0, r7, #12
 8002548:	9202      	str	r2, [sp, #8]
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	9500      	str	r5, [sp, #0]
 800254e:	4623      	mov	r3, r4
 8002550:	4a19      	ldr	r2, [pc, #100]	@ (80025b8 <_ZN7DRV821414setRippleSpeedEt+0x230>)
 8002552:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002556:	f006 f9b3 	bl	80088c0 <sniprintf>
        drvPrint(buffer);
 800255a:	f107 020c 	add.w	r2, r7, #12
 800255e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002562:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002566:	4611      	mov	r1, r2
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	f000 f969 	bl	8002840 <_ZN7DRV82148drvPrintEPKc>
    }
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, WSET_VSET);
 800256e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002572:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	210f      	movs	r1, #15
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f96c 	bl	8002860 <_Z26drv8214_i2c_write_registerhhh>
    drv8214_i2c_modify_register_bits(address, DRV8214_REG_CTRL0, REG_CTRL0_W_SCALE, W_SCALE);
 8002588:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800258c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	7818      	ldrb	r0, [r3, #0]
 8002594:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 8002598:	2203      	movs	r2, #3
 800259a:	210e      	movs	r1, #14
 800259c:	f000 f9fc 	bl	8002998 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 80025a0:	bf00      	nop
 80025a2:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bdb0      	pop	{r4, r5, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	f3af 8000 	nop.w
 80025b0:	404e0000 	.word	0x404e0000
 80025b4:	08009d04 	.word	0x08009d04
 80025b8:	08009cbc 	.word	0x08009cbc
 80025bc:	54442d18 	.word	0x54442d18
 80025c0:	400921fb 	.word	0x400921fb

080025c4 <_ZN7DRV821415setVoltageSpeedEf>:

void DRV8214::setVoltageSpeed(float voltage) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	ed87 0a02 	vstr	s0, [r7, #8]
    if (voltage < 0.0f) { voltage = 0.0f; } // Ensure voltage is non-negative
 80025d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	d502      	bpl.n	80025e4 <_ZN7DRV821415setVoltageSpeedEf+0x20>
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]

    // Depending on the VM_GAIN_SEL bit (voltage_range), clamp and scale accordingly
    if (config.voltage_range) {
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	7bdb      	ldrb	r3, [r3, #15]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d026      	beq.n	800263a <_ZN7DRV821415setVoltageSpeedEf+0x76>
        // VM_GAIN_SEL = 1 → Range: 0 to 3.92 V
        if (voltage > 3.92f) { voltage = 3.92f; }
 80025ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80025f0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002690 <_ZN7DRV821415setVoltageSpeedEf+0xcc>
 80025f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	dd01      	ble.n	8002602 <_ZN7DRV821415setVoltageSpeedEf+0x3e>
 80025fe:	4b25      	ldr	r3, [pc, #148]	@ (8002694 <_ZN7DRV821415setVoltageSpeedEf+0xd0>)
 8002600:	60bb      	str	r3, [r7, #8]
        // Apply formula from table 8-23: WSET_VSET = voltage * (255 / 3.92)
        float scaled = voltage * (255.0f / 3.92f);
 8002602:	edd7 7a02 	vldr	s15, [r7, #8]
 8002606:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002698 <_ZN7DRV821415setVoltageSpeedEf+0xd4>
 800260a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800260e:	edc7 7a05 	vstr	s15, [r7, #20]
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
 8002612:	edd7 7a05 	vldr	s15, [r7, #20]
 8002616:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800261a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800261e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002622:	edc7 7a01 	vstr	s15, [r7, #4]
 8002626:	793b      	ldrb	r3, [r7, #4]
 8002628:	74fb      	strb	r3, [r7, #19]
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	7cfa      	ldrb	r2, [r7, #19]
 8002630:	210f      	movs	r1, #15
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f914 	bl	8002860 <_Z26drv8214_i2c_write_registerhhh>
        // Apply formula from table 8-23: WSET_VSET = voltage * (255 / 15.7)
        float scaled = voltage * (255.0f / 15.7f);
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
    }
}
 8002638:	e025      	b.n	8002686 <_ZN7DRV821415setVoltageSpeedEf+0xc2>
        if (voltage > 15.7f) { voltage = 11.0f; } // Cap voltage to 11 V because of Overvoltage Protection
 800263a:	edd7 7a02 	vldr	s15, [r7, #8]
 800263e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800269c <_ZN7DRV821415setVoltageSpeedEf+0xd8>
 8002642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	dd01      	ble.n	8002650 <_ZN7DRV821415setVoltageSpeedEf+0x8c>
 800264c:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <_ZN7DRV821415setVoltageSpeedEf+0xdc>)
 800264e:	60bb      	str	r3, [r7, #8]
        float scaled = voltage * (255.0f / 15.7f);
 8002650:	edd7 7a02 	vldr	s15, [r7, #8]
 8002654:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80026a4 <_ZN7DRV821415setVoltageSpeedEf+0xe0>
 8002658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265c:	edc7 7a07 	vstr	s15, [r7, #28]
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
 8002660:	edd7 7a07 	vldr	s15, [r7, #28]
 8002664:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002668:	ee77 7a87 	vadd.f32	s15, s15, s14
 800266c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002670:	edc7 7a01 	vstr	s15, [r7, #4]
 8002674:	793b      	ldrb	r3, [r7, #4]
 8002676:	76fb      	strb	r3, [r7, #27]
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	7efa      	ldrb	r2, [r7, #27]
 800267e:	210f      	movs	r1, #15
 8002680:	4618      	mov	r0, r3
 8002682:	f000 f8ed 	bl	8002860 <_Z26drv8214_i2c_write_registerhhh>
}
 8002686:	bf00      	nop
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	407ae148 	.word	0x407ae148
 8002694:	407ae148 	.word	0x407ae148
 8002698:	42821a1f 	.word	0x42821a1f
 800269c:	417b3333 	.word	0x417b3333
 80026a0:	41300000 	.word	0x41300000
 80026a4:	4181efb2 	.word	0x4181efb2

080026a8 <_ZN7DRV821411turnForwardEtff>:
    }
    config.regulation_mode = regulation;
    drv8214_i2c_modify_register_bits(address, DRV8214_REG_CTRL0, REG_CTRL0_REG_CTRL, reg_ctrl);
}

void DRV8214::turnForward(uint16_t speed, float voltage, float requested_current) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	460b      	mov	r3, r1
 80026b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80026b6:	edc7 0a00 	vstr	s1, [r7]
 80026ba:	817b      	strh	r3, [r7, #10]
    disableHbridge();
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7ff fd11 	bl	80020e4 <_ZN7DRV821414disableHbridgeEv>
    switch (config.regulation_mode) {
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	7b9b      	ldrb	r3, [r3, #14]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d822      	bhi.n	8002710 <_ZN7DRV821411turnForwardEtff+0x68>
 80026ca:	a201      	add	r2, pc, #4	@ (adr r2, 80026d0 <_ZN7DRV821411turnForwardEtff+0x28>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026ed 	.word	0x080026ed
 80026d8:	080026f9 	.word	0x080026f9
 80026dc:	08002705 	.word	0x08002705
        case CURRENT_FIXED: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 80026e0:	ed97 0a00 	vldr	s0, [r7]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f7ff fd0d 	bl	8002104 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 80026ea:	e011      	b.n	8002710 <_ZN7DRV821411turnForwardEtff+0x68>
        case CURRENT_CYCLES: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 80026ec:	ed97 0a00 	vldr	s0, [r7]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff fd07 	bl	8002104 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 80026f6:	e00b      	b.n	8002710 <_ZN7DRV821411turnForwardEtff+0x68>
        case SPEED: 
            setRippleSpeed(speed);
 80026f8:	897b      	ldrh	r3, [r7, #10]
 80026fa:	4619      	mov	r1, r3
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f7ff fe43 	bl	8002388 <_ZN7DRV821414setRippleSpeedEt>
            break;
 8002702:	e005      	b.n	8002710 <_ZN7DRV821411turnForwardEtff+0x68>
        case VOLTAGE:
            setVoltageSpeed(voltage);
 8002704:	ed97 0a01 	vldr	s0, [r7, #4]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff ff5b 	bl	80025c4 <_ZN7DRV821415setVoltageSpeedEf>
            break;
 800270e:	bf00      	nop
    }
    enableHbridge();
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff fcd8 	bl	80020c6 <_ZN7DRV821413enableHbridgeEv>
    if (config.control_mode == PWM) {
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	7b5b      	ldrb	r3, [r3, #13]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10e      	bne.n	800273c <_ZN7DRV821411turnForwardEtff+0x94>
        // Table 8-5 => Forward => Input1=1, Input2=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);  // Input1=1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	7818      	ldrb	r0, [r3, #0]
 8002722:	2301      	movs	r3, #1
 8002724:	2202      	movs	r2, #2
 8002726:	210d      	movs	r1, #13
 8002728:	f000 f904 	bl	8002934 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false); // Input2=0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	7818      	ldrb	r0, [r3, #0]
 8002730:	2300      	movs	r3, #0
 8002732:	2201      	movs	r2, #1
 8002734:	210d      	movs	r1, #13
 8002736:	f000 f8fd 	bl	8002934 <_Z27drv8214_i2c_modify_registerhhhh>
 800273a:	e00d      	b.n	8002758 <_ZN7DRV821411turnForwardEtff+0xb0>
    } 
    else { // PH/EN mode
        // Table 8-4 => Forward => EN=1, PH=1
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true); // EN=1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	7818      	ldrb	r0, [r3, #0]
 8002740:	2301      	movs	r3, #1
 8002742:	2202      	movs	r2, #2
 8002744:	210d      	movs	r1, #13
 8002746:	f000 f8f5 	bl	8002934 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true); // PH=1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	7818      	ldrb	r0, [r3, #0]
 800274e:	2301      	movs	r3, #1
 8002750:	2201      	movs	r2, #1
 8002752:	210d      	movs	r1, #13
 8002754:	f000 f8ee 	bl	8002934 <_Z27drv8214_i2c_modify_registerhhhh>
    }
    if (config.verbose) { drvPrint("Turning Forward\n"); }
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <_ZN7DRV821411turnForwardEtff+0xc2>
 8002762:	4904      	ldr	r1, [pc, #16]	@ (8002774 <_ZN7DRV821411turnForwardEtff+0xcc>)
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f86b 	bl	8002840 <_ZN7DRV82148drvPrintEPKc>
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	08009d4c 	.word	0x08009d4c

08002778 <_ZN7DRV821411turnReverseEtff>:

void DRV8214::turnReverse(uint16_t speed, float voltage, float requested_current) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	460b      	mov	r3, r1
 8002782:	ed87 0a01 	vstr	s0, [r7, #4]
 8002786:	edc7 0a00 	vstr	s1, [r7]
 800278a:	817b      	strh	r3, [r7, #10]
    enableHbridge();
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff fc9a 	bl	80020c6 <_ZN7DRV821413enableHbridgeEv>
    switch (config.regulation_mode) {
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	7b9b      	ldrb	r3, [r3, #14]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d822      	bhi.n	80027e0 <_ZN7DRV821411turnReverseEtff+0x68>
 800279a:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <_ZN7DRV821411turnReverseEtff+0x28>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027bd 	.word	0x080027bd
 80027a8:	080027c9 	.word	0x080027c9
 80027ac:	080027d5 	.word	0x080027d5
        case CURRENT_FIXED: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 80027b0:	ed97 0a00 	vldr	s0, [r7]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7ff fca5 	bl	8002104 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 80027ba:	e011      	b.n	80027e0 <_ZN7DRV821411turnReverseEtff+0x68>
        case CURRENT_CYCLES: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 80027bc:	ed97 0a00 	vldr	s0, [r7]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f7ff fc9f 	bl	8002104 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 80027c6:	e00b      	b.n	80027e0 <_ZN7DRV821411turnReverseEtff+0x68>
        case SPEED: 
            setRippleSpeed(speed);
 80027c8:	897b      	ldrh	r3, [r7, #10]
 80027ca:	4619      	mov	r1, r3
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff fddb 	bl	8002388 <_ZN7DRV821414setRippleSpeedEt>
            break;
 80027d2:	e005      	b.n	80027e0 <_ZN7DRV821411turnReverseEtff+0x68>
        case VOLTAGE:
            setVoltageSpeed(voltage);
 80027d4:	ed97 0a01 	vldr	s0, [r7, #4]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff fef3 	bl	80025c4 <_ZN7DRV821415setVoltageSpeedEf>
            break;
 80027de:	bf00      	nop
    }
    if (config.control_mode == PWM) {
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	7b5b      	ldrb	r3, [r3, #13]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10e      	bne.n	8002806 <_ZN7DRV821411turnReverseEtff+0x8e>
        // Table 8-5 => Reverse => Input1=0, Input2=1
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, false);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	7818      	ldrb	r0, [r3, #0]
 80027ec:	2300      	movs	r3, #0
 80027ee:	2202      	movs	r2, #2
 80027f0:	210d      	movs	r1, #13
 80027f2:	f000 f89f 	bl	8002934 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	7818      	ldrb	r0, [r3, #0]
 80027fa:	2301      	movs	r3, #1
 80027fc:	2201      	movs	r2, #1
 80027fe:	210d      	movs	r1, #13
 8002800:	f000 f898 	bl	8002934 <_Z27drv8214_i2c_modify_registerhhhh>
 8002804:	e00d      	b.n	8002822 <_ZN7DRV821411turnReverseEtff+0xaa>
    } 
    else { // PH/EN mode
        // Table 8-4 => Reverse => EN=1, PH=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	7818      	ldrb	r0, [r3, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	2202      	movs	r2, #2
 800280e:	210d      	movs	r1, #13
 8002810:	f000 f890 	bl	8002934 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	7818      	ldrb	r0, [r3, #0]
 8002818:	2300      	movs	r3, #0
 800281a:	2201      	movs	r2, #1
 800281c:	210d      	movs	r1, #13
 800281e:	f000 f889 	bl	8002934 <_Z27drv8214_i2c_modify_registerhhhh>
    }
    if (config.verbose) { drvPrint("Turning Reverse\n"); }
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <_ZN7DRV821411turnReverseEtff+0xbc>
 800282c:	4903      	ldr	r1, [pc, #12]	@ (800283c <_ZN7DRV821411turnReverseEtff+0xc4>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f806 	bl	8002840 <_ZN7DRV82148drvPrintEPKc>
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	08009d60 	.word	0x08009d60

08002840 <_ZN7DRV82148drvPrintEPKc>:
        "KMC: %d | KMCScale: %d\n",
        config.kmc, config.kmc_scale);
    drvPrint(buffer);
}

void DRV8214::drvPrint(const char* msg) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    #elif defined(DRV8214_PLATFORM_STM32)
        // Option 1: Using HAL_UART_Transmit directly
        // HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    
        // Option 2: If you have retargeted printf to UART, you could simply use:
        printf("%s", msg);
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	4803      	ldr	r0, [pc, #12]	@ (800285c <_ZN7DRV82148drvPrintEPKc+0x1c>)
 800284e:	f006 f92f 	bl	8008ab0 <iprintf>
    #endif
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	0800a058 	.word	0x0800a058

08002860 <_Z26drv8214_i2c_write_registerhhh>:
    void drv8214_i2c_set_handle(I2C_HandleTypeDef* hi2c) {
        drv_i2c_handle = hi2c;
    }
#endif

void drv8214_i2c_write_register(uint8_t device_address, uint8_t reg, uint8_t value) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af02      	add	r7, sp, #8
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	460b      	mov	r3, r1
 800286c:	71bb      	strb	r3, [r7, #6]
 800286e:	4613      	mov	r3, r2
 8002870:	717b      	strb	r3, [r7, #5]
    if (drv_i2c_handle == NULL) {
 8002872:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <_Z26drv8214_i2c_write_registerhhh+0x48>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d012      	beq.n	80028a0 <_Z26drv8214_i2c_write_registerhhh+0x40>
    Wire.beginTransmission(device_address);
    Wire.write(reg);
    Wire.write(value);
    Wire.endTransmission();
#elif defined(DRV8214_PLATFORM_STM32)
    uint8_t data[2] = { reg, value };
 800287a:	79bb      	ldrb	r3, [r7, #6]
 800287c:	733b      	strb	r3, [r7, #12]
 800287e:	797b      	ldrb	r3, [r7, #5]
 8002880:	737b      	strb	r3, [r7, #13]
    // STM32 HAL expects the 7-bit address to be shifted left by 1
    HAL_I2C_Master_Transmit(drv_i2c_handle, (uint16_t)(device_address << 1), data, 2, HAL_MAX_DELAY);
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <_Z26drv8214_i2c_write_registerhhh+0x48>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	b29b      	uxth	r3, r3
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	b299      	uxth	r1, r3
 800288e:	f107 020c 	add.w	r2, r7, #12
 8002892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2302      	movs	r3, #2
 800289a:	f002 f8c3 	bl	8004a24 <HAL_I2C_Master_Transmit>
 800289e:	e000      	b.n	80028a2 <_Z26drv8214_i2c_write_registerhhh+0x42>
        return;
 80028a0:	bf00      	nop
    // Add error handling for HAL_StatusTypeDef if needed
#endif
}
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000370 	.word	0x20000370

080028ac <_Z25drv8214_i2c_read_registerhh>:

uint8_t drv8214_i2c_read_register(uint8_t device_address, uint8_t reg) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	4603      	mov	r3, r0
 80028b4:	460a      	mov	r2, r1
 80028b6:	71fb      	strb	r3, [r7, #7]
 80028b8:	4613      	mov	r3, r2
 80028ba:	71bb      	strb	r3, [r7, #6]
    if (drv_i2c_handle == NULL) {
 80028bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002930 <_Z25drv8214_i2c_read_registerhh+0x84>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <_Z25drv8214_i2c_read_registerhh+0x1c>
         // Handle error: I2C handle not set
        return 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e02f      	b.n	8002928 <_Z25drv8214_i2c_read_registerhh+0x7c>
    if (Wire.available()) {
        return Wire.read();
    }
    return 0; // Error or no data
#elif defined(DRV8214_PLATFORM_STM32)
    uint8_t data = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
    // STM32 HAL I2C typically uses separate Transmit then Receive for this,
    // or HAL_I2C_Mem_Read for register-based reads.
    // Your Arduino code pattern translates better to separate Transmit/Receive.
    if (HAL_I2C_Master_Transmit(drv_i2c_handle, (uint16_t)(device_address << 1), &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 80028cc:	4b18      	ldr	r3, [pc, #96]	@ (8002930 <_Z25drv8214_i2c_read_registerhh+0x84>)
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	b299      	uxth	r1, r3
 80028d8:	1dba      	adds	r2, r7, #6
 80028da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2301      	movs	r3, #1
 80028e2:	f002 f89f 	bl	8004a24 <HAL_I2C_Master_Transmit>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d017      	beq.n	8002926 <_Z25drv8214_i2c_read_registerhh+0x7a>
        if (HAL_I2C_Master_Receive(drv_i2c_handle, (uint16_t)(device_address << 1), &data, 1, HAL_MAX_DELAY) == HAL_OK) {
 80028f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <_Z25drv8214_i2c_read_registerhh+0x84>)
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	b299      	uxth	r1, r3
 8002902:	f107 020f 	add.w	r2, r7, #15
 8002906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2301      	movs	r3, #1
 800290e:	f002 f9a1 	bl	8004c54 <HAL_I2C_Master_Receive>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <_Z25drv8214_i2c_read_registerhh+0x7a>
            return data;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	e000      	b.n	8002928 <_Z25drv8214_i2c_read_registerhh+0x7c>
        }
    }
    // Consider using HAL_I2C_Mem_Read for more robustness:
    // HAL_I2C_Mem_Read(drv_i2c_handle, (uint16_t)(device_address << 1), reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
    return 0; // Error
 8002926:	2300      	movs	r3, #0
#endif
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000370 	.word	0x20000370

08002934 <_Z27drv8214_i2c_modify_registerhhhh>:

void drv8214_i2c_modify_register(uint8_t device_address, uint8_t reg, uint8_t mask, uint8_t enable_bits) {
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	4604      	mov	r4, r0
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4623      	mov	r3, r4
 8002944:	71fb      	strb	r3, [r7, #7]
 8002946:	4603      	mov	r3, r0
 8002948:	71bb      	strb	r3, [r7, #6]
 800294a:	460b      	mov	r3, r1
 800294c:	717b      	strb	r3, [r7, #5]
 800294e:	4613      	mov	r3, r2
 8002950:	713b      	strb	r3, [r7, #4]
    uint8_t current_value = drv8214_i2c_read_register(device_address, reg);
 8002952:	79ba      	ldrb	r2, [r7, #6]
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ffa7 	bl	80028ac <_Z25drv8214_i2c_read_registerhh>
 800295e:	4603      	mov	r3, r0
 8002960:	73fb      	strb	r3, [r7, #15]
    if (enable_bits) { // Assuming 1 means enable
 8002962:	793b      	ldrb	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <_Z27drv8214_i2c_modify_registerhhhh+0x3e>
        current_value |= mask;  // Set bits
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	797b      	ldrb	r3, [r7, #5]
 800296c:	4313      	orrs	r3, r2
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	e008      	b.n	8002984 <_Z27drv8214_i2c_modify_registerhhhh+0x50>
    } else {
        current_value &= ~mask; // Clear bits
 8002972:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002976:	43db      	mvns	r3, r3
 8002978:	b25a      	sxtb	r2, r3
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	4013      	ands	r3, r2
 8002980:	b25b      	sxtb	r3, r3
 8002982:	73fb      	strb	r3, [r7, #15]
    }
    drv8214_i2c_write_register(device_address, reg, current_value);
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	79b9      	ldrb	r1, [r7, #6]
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff68 	bl	8002860 <_Z26drv8214_i2c_write_registerhhh>
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bd90      	pop	{r4, r7, pc}

08002998 <_Z32drv8214_i2c_modify_register_bitshhhh>:

void drv8214_i2c_modify_register_bits(uint8_t device_address, uint8_t reg, uint8_t mask, uint8_t new_value) {
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	4604      	mov	r4, r0
 80029a0:	4608      	mov	r0, r1
 80029a2:	4611      	mov	r1, r2
 80029a4:	461a      	mov	r2, r3
 80029a6:	4623      	mov	r3, r4
 80029a8:	71fb      	strb	r3, [r7, #7]
 80029aa:	4603      	mov	r3, r0
 80029ac:	71bb      	strb	r3, [r7, #6]
 80029ae:	460b      	mov	r3, r1
 80029b0:	717b      	strb	r3, [r7, #5]
 80029b2:	4613      	mov	r3, r2
 80029b4:	713b      	strb	r3, [r7, #4]
    uint8_t current_value = drv8214_i2c_read_register(device_address, reg);
 80029b6:	79ba      	ldrb	r2, [r7, #6]
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff75 	bl	80028ac <_Z25drv8214_i2c_read_registerhh>
 80029c2:	4603      	mov	r3, r0
 80029c4:	73fb      	strb	r3, [r7, #15]
    current_value = (current_value & ~mask) | (new_value & mask); // Apply new value only to masked bits
 80029c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	b25a      	sxtb	r2, r3
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	4013      	ands	r3, r2
 80029d4:	b25a      	sxtb	r2, r3
 80029d6:	7939      	ldrb	r1, [r7, #4]
 80029d8:	797b      	ldrb	r3, [r7, #5]
 80029da:	400b      	ands	r3, r1
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	4313      	orrs	r3, r2
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	73fb      	strb	r3, [r7, #15]
    drv8214_i2c_write_register(device_address, reg, current_value);
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	79b9      	ldrb	r1, [r7, #6]
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff37 	bl	8002860 <_Z26drv8214_i2c_write_registerhhh>
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd90      	pop	{r4, r7, pc}
	...

080029fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a06:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <HAL_Init+0x3c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a38 <HAL_Init+0x3c>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a12:	2003      	movs	r0, #3
 8002a14:	f001 fb4c 	bl	80040b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a18:	200f      	movs	r0, #15
 8002a1a:	f000 f80f 	bl	8002a3c <HAL_InitTick>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	71fb      	strb	r3, [r7, #7]
 8002a28:	e001      	b.n	8002a2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a2a:	f7ff f8f0 	bl	8001c0e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	58004000 	.word	0x58004000

08002a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002a48:	4b17      	ldr	r3, [pc, #92]	@ (8002aa8 <HAL_InitTick+0x6c>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d024      	beq.n	8002a9a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a50:	f003 ffce 	bl	80069f0 <HAL_RCC_GetHCLKFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <HAL_InitTick+0x6c>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a60:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 fb54 	bl	8004116 <HAL_SYSTICK_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10f      	bne.n	8002a94 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b0f      	cmp	r3, #15
 8002a78:	d809      	bhi.n	8002a8e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a82:	f001 fb20 	bl	80040c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a86:	4a09      	ldr	r2, [pc, #36]	@ (8002aac <HAL_InitTick+0x70>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	e007      	b.n	8002a9e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	e004      	b.n	8002a9e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e001      	b.n	8002a9e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000024 	.word	0x20000024
 8002aac:	20000020 	.word	0x20000020

08002ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_IncTick+0x20>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_IncTick+0x24>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4413      	add	r3, r2
 8002ac0:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <HAL_IncTick+0x24>)
 8002ac2:	6013      	str	r3, [r2, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000024 	.word	0x20000024
 8002ad4:	20000374 	.word	0x20000374

08002ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return uwTick;
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_GetTick+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000374 	.word	0x20000374

08002af0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002af4:	4b03      	ldr	r3, [pc, #12]	@ (8002b04 <HAL_GetTickPrio+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000020 	.word	0x20000020

08002b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b10:	f7ff ffe2 	bl	8002ad8 <HAL_GetTick>
 8002b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b20:	d005      	beq.n	8002b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b22:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <HAL_Delay+0x44>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b2e:	bf00      	nop
 8002b30:	f7ff ffd2 	bl	8002ad8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d8f7      	bhi.n	8002b30 <HAL_Delay+0x28>
  {
  }
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000024 	.word	0x20000024

08002b50 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3360      	adds	r3, #96	@ 0x60
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <LL_ADC_SetOffset+0x44>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002bf0:	bf00      	nop
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	03fff000 	.word	0x03fff000

08002c00 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3360      	adds	r3, #96	@ 0x60
 8002c0e:	461a      	mov	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3360      	adds	r3, #96	@ 0x60
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c7a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3330      	adds	r3, #48	@ 0x30
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	4413      	add	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	211f      	movs	r1, #31
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	0e9b      	lsrs	r3, r3, #26
 8002cc0:	f003 011f 	and.w	r1, r3, #31
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3314      	adds	r3, #20
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	0e5b      	lsrs	r3, r3, #25
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	4413      	add	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	0d1b      	lsrs	r3, r3, #20
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2107      	movs	r1, #7
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	401a      	ands	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	0d1b      	lsrs	r3, r3, #20
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	431a      	orrs	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d50:	43db      	mvns	r3, r3
 8002d52:	401a      	ands	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0318 	and.w	r3, r3, #24
 8002d5a:	4908      	ldr	r1, [pc, #32]	@ (8002d7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d5c:	40d9      	lsrs	r1, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	400b      	ands	r3, r1
 8002d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d66:	431a      	orrs	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	0007ffff 	.word	0x0007ffff

08002d80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6093      	str	r3, [r2, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002db4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002db8:	d101      	bne.n	8002dbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ddc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002de0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e08:	d101      	bne.n	8002e0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e58:	f043 0202 	orr.w	r2, r3, #2
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <LL_ADC_IsEnabled+0x18>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <LL_ADC_IsEnabled+0x1a>
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d101      	bne.n	8002eaa <LL_ADC_IsDisableOngoing+0x18>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <LL_ADC_IsDisableOngoing+0x1a>
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ec8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ecc:	f043 0204 	orr.w	r2, r3, #4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ef0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ef4:	f043 0210 	orr.w	r2, r3, #16
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d101      	bne.n	8002f20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f3e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d101      	bne.n	8002f6e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e12e      	b.n	80031f8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fd fe57 	bl	8000c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff feef 	bl	8002da4 <LL_ADC_IsDeepPowerDownEnabled>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d004      	beq.n	8002fd6 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fed5 	bl	8002d80 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff0a 	bl	8002df4 <LL_ADC_IsInternalRegulatorEnabled>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d115      	bne.n	8003012 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff feee 	bl	8002dcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff0:	4b83      	ldr	r3, [pc, #524]	@ (8003200 <HAL_ADC_Init+0x284>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	4a83      	ldr	r2, [pc, #524]	@ (8003204 <HAL_ADC_Init+0x288>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	3301      	adds	r3, #1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003004:	e002      	b.n	800300c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	3b01      	subs	r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f9      	bne.n	8003006 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff feec 	bl	8002df4 <LL_ADC_IsInternalRegulatorEnabled>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10d      	bne.n	800303e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003026:	f043 0210 	orr.w	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff60 	bl	8002f08 <LL_ADC_REG_IsConversionOngoing>
 8003048:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 80c7 	bne.w	80031e6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f040 80c3 	bne.w	80031e6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003064:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003068:	f043 0202 	orr.w	r2, r3, #2
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fef9 	bl	8002e6c <LL_ADC_IsEnabled>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003080:	4861      	ldr	r0, [pc, #388]	@ (8003208 <HAL_ADC_Init+0x28c>)
 8003082:	f7ff fef3 	bl	8002e6c <LL_ADC_IsEnabled>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d105      	bne.n	8003098 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4619      	mov	r1, r3
 8003092:	485e      	ldr	r0, [pc, #376]	@ (800320c <HAL_ADC_Init+0x290>)
 8003094:	f7ff fd5c 	bl	8002b50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7e5b      	ldrb	r3, [r3, #25]
 800309c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80030a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80030ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80030b8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d106      	bne.n	80030d8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	3b01      	subs	r3, #1
 80030d0:	045b      	lsls	r3, r3, #17
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	4b45      	ldr	r3, [pc, #276]	@ (8003210 <HAL_ADC_Init+0x294>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	69b9      	ldr	r1, [r7, #24]
 8003104:	430b      	orrs	r3, r1
 8003106:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fefb 	bl	8002f08 <LL_ADC_REG_IsConversionOngoing>
 8003112:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff1c 	bl	8002f56 <LL_ADC_INJ_IsConversionOngoing>
 800311e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d13d      	bne.n	80031a2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d13a      	bne.n	80031a2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003130:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003138:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003148:	f023 0302 	bic.w	r3, r3, #2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	69b9      	ldr	r1, [r7, #24]
 8003152:	430b      	orrs	r3, r1
 8003154:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800315c:	2b01      	cmp	r3, #1
 800315e:	d118      	bne.n	8003192 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800316a:	f023 0304 	bic.w	r3, r3, #4
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800317c:	4311      	orrs	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003182:	430a      	orrs	r2, r1
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	611a      	str	r2, [r3, #16]
 8003190:	e007      	b.n	80031a2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d10c      	bne.n	80031c4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b0:	f023 010f 	bic.w	r1, r3, #15
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	1e5a      	subs	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80031c2:	e007      	b.n	80031d4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 020f 	bic.w	r2, r2, #15
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	f023 0303 	bic.w	r3, r3, #3
 80031dc:	f043 0201 	orr.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80031e4:	e007      	b.n	80031f6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ea:	f043 0210 	orr.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	2000001c 	.word	0x2000001c
 8003204:	053e2d63 	.word	0x053e2d63
 8003208:	50040000 	.word	0x50040000
 800320c:	50040300 	.word	0x50040300
 8003210:	fff0c007 	.word	0xfff0c007

08003214 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fe71 	bl	8002f08 <LL_ADC_REG_IsConversionOngoing>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d140      	bne.n	80032ae <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_ADC_Start+0x26>
 8003236:	2302      	movs	r3, #2
 8003238:	e03c      	b.n	80032b4 <HAL_ADC_Start+0xa0>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fd8a 	bl	8003d5c <ADC_Enable>
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d128      	bne.n	80032a4 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800326e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003272:	d106      	bne.n	8003282 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003278:	f023 0206 	bic.w	r2, r3, #6
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003280:	e002      	b.n	8003288 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	221c      	movs	r2, #28
 800328e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fe0b 	bl	8002eb8 <LL_ADC_REG_StartConversion>
 80032a2:	e006      	b.n	80032b2 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80032ac:	e001      	b.n	80032b2 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_Stop+0x16>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e023      	b.n	800331a <HAL_ADC_Stop+0x5e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80032da:	2103      	movs	r1, #3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fc81 	bl	8003be4 <ADC_ConversionStop>
 80032e2:	4603      	mov	r3, r0
 80032e4:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fdaf 	bl	8003e50 <ADC_Disable>
 80032f2:	4603      	mov	r3, r0
 80032f4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003300:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003304:	f023 0301 	bic.w	r3, r3, #1
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d102      	bne.n	800333a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003334:	2308      	movs	r3, #8
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e010      	b.n	800335c <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e06d      	b.n	8003434 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003358:	2304      	movs	r3, #4
 800335a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800335c:	f7ff fbbc 	bl	8002ad8 <HAL_GetTick>
 8003360:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003362:	e021      	b.n	80033a8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800336a:	d01d      	beq.n	80033a8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800336c:	f7ff fbb4 	bl	8002ad8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d302      	bcc.n	8003382 <HAL_ADC_PollForConversion+0x60>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d112      	bne.n	80033a8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003394:	f043 0204 	orr.w	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e045      	b.n	8003434 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0d6      	beq.n	8003364 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fc4b 	bl	8002c62 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01c      	beq.n	800340c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7e5b      	ldrb	r3, [r3, #25]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d111      	bne.n	800340c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b08      	cmp	r3, #8
 8003410:	d104      	bne.n	800341c <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2208      	movs	r2, #8
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e00a      	b.n	8003432 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d103      	bne.n	8003432 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	220c      	movs	r2, #12
 8003430:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b0b6      	sub	sp, #216	@ 0xd8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0x22>
 8003476:	2302      	movs	r3, #2
 8003478:	e39f      	b.n	8003bba <HAL_ADC_ConfigChannel+0x762>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff fd3e 	bl	8002f08 <LL_ADC_REG_IsConversionOngoing>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	f040 8384 	bne.w	8003b9c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	f7ff fbf1 	bl	8002c88 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fd2c 	bl	8002f08 <LL_ADC_REG_IsConversionOngoing>
 80034b0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fd4c 	bl	8002f56 <LL_ADC_INJ_IsConversionOngoing>
 80034be:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 81a6 	bne.w	8003818 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f040 81a1 	bne.w	8003818 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6819      	ldr	r1, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	461a      	mov	r2, r3
 80034e4:	f7ff fbfc 	bl	8002ce0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	08db      	lsrs	r3, r3, #3
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b04      	cmp	r3, #4
 8003508:	d00a      	beq.n	8003520 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6919      	ldr	r1, [r3, #16]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800351a:	f7ff fb4d 	bl	8002bb8 <LL_ADC_SetOffset>
 800351e:	e17b      	b.n	8003818 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fb6a 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 800352c:	4603      	mov	r3, r0
 800352e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <HAL_ADC_ConfigChannel+0xf4>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fb5f 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 8003542:	4603      	mov	r3, r0
 8003544:	0e9b      	lsrs	r3, r3, #26
 8003546:	f003 021f 	and.w	r2, r3, #31
 800354a:	e01e      	b.n	800358a <HAL_ADC_ConfigChannel+0x132>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fb54 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 8003558:	4603      	mov	r3, r0
 800355a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800356a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800356e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800357a:	2320      	movs	r3, #32
 800357c:	e004      	b.n	8003588 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800357e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x14a>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	0e9b      	lsrs	r3, r3, #26
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	e018      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x17c>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80035b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80035be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80035c6:	2320      	movs	r3, #32
 80035c8:	e004      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80035ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d106      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2200      	movs	r2, #0
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fb23 	bl	8002c2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fb07 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x1ba>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fafc 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 8003608:	4603      	mov	r3, r0
 800360a:	0e9b      	lsrs	r3, r3, #26
 800360c:	f003 021f 	and.w	r2, r3, #31
 8003610:	e01e      	b.n	8003650 <HAL_ADC_ConfigChannel+0x1f8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff faf1 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 800361e:	4603      	mov	r3, r0
 8003620:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003630:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003634:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003638:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003640:	2320      	movs	r3, #32
 8003642:	e004      	b.n	800364e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003644:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x210>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	0e9b      	lsrs	r3, r3, #26
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	e018      	b.n	800369a <HAL_ADC_ConfigChannel+0x242>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800367c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800368c:	2320      	movs	r3, #32
 800368e:	e004      	b.n	800369a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003690:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003694:	fab3 f383 	clz	r3, r3
 8003698:	b2db      	uxtb	r3, r3
 800369a:	429a      	cmp	r2, r3
 800369c:	d106      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	2101      	movs	r1, #1
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fac0 	bl	8002c2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2102      	movs	r1, #2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff faa4 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x280>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2102      	movs	r1, #2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fa99 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 80036ce:	4603      	mov	r3, r0
 80036d0:	0e9b      	lsrs	r3, r3, #26
 80036d2:	f003 021f 	and.w	r2, r3, #31
 80036d6:	e01e      	b.n	8003716 <HAL_ADC_ConfigChannel+0x2be>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2102      	movs	r1, #2
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fa8e 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80036f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80036fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003706:	2320      	movs	r3, #32
 8003708:	e004      	b.n	8003714 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800370a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371e:	2b00      	cmp	r3, #0
 8003720:	d105      	bne.n	800372e <HAL_ADC_ConfigChannel+0x2d6>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0e9b      	lsrs	r3, r3, #26
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	e016      	b.n	800375c <HAL_ADC_ConfigChannel+0x304>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003740:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003742:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003746:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e004      	b.n	800375c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003752:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	429a      	cmp	r2, r3
 800375e:	d106      	bne.n	800376e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2200      	movs	r2, #0
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fa5f 	bl	8002c2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2103      	movs	r1, #3
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fa43 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 800377a:	4603      	mov	r3, r0
 800377c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <HAL_ADC_ConfigChannel+0x342>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2103      	movs	r1, #3
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fa38 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 8003790:	4603      	mov	r3, r0
 8003792:	0e9b      	lsrs	r3, r3, #26
 8003794:	f003 021f 	and.w	r2, r3, #31
 8003798:	e017      	b.n	80037ca <HAL_ADC_ConfigChannel+0x372>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2103      	movs	r1, #3
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fa2d 	bl	8002c00 <LL_ADC_GetOffsetChannel>
 80037a6:	4603      	mov	r3, r0
 80037a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80037b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80037b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	e003      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80037c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x38a>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	0e9b      	lsrs	r3, r3, #26
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	e011      	b.n	8003806 <HAL_ADC_ConfigChannel+0x3ae>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ea:	fa93 f3a3 	rbit	r3, r3
 80037ee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80037f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80037f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80037fa:	2320      	movs	r3, #32
 80037fc:	e003      	b.n	8003806 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80037fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003800:	fab3 f383 	clz	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	429a      	cmp	r2, r3
 8003808:	d106      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	2103      	movs	r1, #3
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff fa0a 	bl	8002c2c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fb25 	bl	8002e6c <LL_ADC_IsEnabled>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	f040 81c2 	bne.w	8003bae <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6819      	ldr	r1, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	461a      	mov	r2, r3
 8003838:	f7ff fa7e 	bl	8002d38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a8e      	ldr	r2, [pc, #568]	@ (8003a7c <HAL_ADC_ConfigChannel+0x624>)
 8003842:	4293      	cmp	r3, r2
 8003844:	f040 8130 	bne.w	8003aa8 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10b      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x418>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	0e9b      	lsrs	r3, r3, #26
 800385e:	3301      	adds	r3, #1
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	2b09      	cmp	r3, #9
 8003866:	bf94      	ite	ls
 8003868:	2301      	movls	r3, #1
 800386a:	2300      	movhi	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e019      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x44c>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003878:	fa93 f3a3 	rbit	r3, r3
 800387c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800387e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003880:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003882:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003888:	2320      	movs	r3, #32
 800388a:	e003      	b.n	8003894 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800388c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	3301      	adds	r3, #1
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2b09      	cmp	r3, #9
 800389c:	bf94      	ite	ls
 800389e:	2301      	movls	r3, #1
 80038a0:	2300      	movhi	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d079      	beq.n	800399c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d107      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x46c>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	0e9b      	lsrs	r3, r3, #26
 80038ba:	3301      	adds	r3, #1
 80038bc:	069b      	lsls	r3, r3, #26
 80038be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038c2:	e015      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x498>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80038d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80038dc:	2320      	movs	r3, #32
 80038de:	e003      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80038e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	069b      	lsls	r3, r3, #26
 80038ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x4b8>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0e9b      	lsrs	r3, r3, #26
 8003902:	3301      	adds	r3, #1
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f303 	lsl.w	r3, r1, r3
 800390e:	e017      	b.n	8003940 <HAL_ADC_ConfigChannel+0x4e8>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800391e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003920:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	e003      	b.n	8003934 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800392c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	3301      	adds	r3, #1
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	ea42 0103 	orr.w	r1, r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x50e>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	0e9b      	lsrs	r3, r3, #26
 8003956:	3301      	adds	r3, #1
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	051b      	lsls	r3, r3, #20
 8003964:	e018      	b.n	8003998 <HAL_ADC_ConfigChannel+0x540>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003976:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800397e:	2320      	movs	r3, #32
 8003980:	e003      	b.n	800398a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	3301      	adds	r3, #1
 800398c:	f003 021f 	and.w	r2, r3, #31
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003998:	430b      	orrs	r3, r1
 800399a:	e080      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d107      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x560>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	0e9b      	lsrs	r3, r3, #26
 80039ae:	3301      	adds	r3, #1
 80039b0:	069b      	lsls	r3, r3, #26
 80039b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039b6:	e015      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x58c>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80039d0:	2320      	movs	r3, #32
 80039d2:	e003      	b.n	80039dc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	069b      	lsls	r3, r3, #26
 80039e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x5ac>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	0e9b      	lsrs	r3, r3, #26
 80039f6:	3301      	adds	r3, #1
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	2101      	movs	r1, #1
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	e017      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x5dc>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	61fb      	str	r3, [r7, #28]
  return result;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003a1c:	2320      	movs	r3, #32
 8003a1e:	e003      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	2101      	movs	r1, #1
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	ea42 0103 	orr.w	r1, r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10d      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x608>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	0e9b      	lsrs	r3, r3, #26
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	4613      	mov	r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	4413      	add	r3, r2
 8003a56:	3b1e      	subs	r3, #30
 8003a58:	051b      	lsls	r3, r3, #20
 8003a5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a5e:	e01d      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x644>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	613b      	str	r3, [r7, #16]
  return result;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d103      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003a78:	2320      	movs	r3, #32
 8003a7a:	e005      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x630>
 8003a7c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	f003 021f 	and.w	r2, r3, #31
 8003a8e:	4613      	mov	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	3b1e      	subs	r3, #30
 8003a96:	051b      	lsls	r3, r3, #20
 8003a98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a9c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f7ff f91c 	bl	8002ce0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b45      	ldr	r3, [pc, #276]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x76c>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d07c      	beq.n	8003bae <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ab4:	4844      	ldr	r0, [pc, #272]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x770>)
 8003ab6:	f7ff f871 	bl	8002b9c <LL_ADC_GetCommonPathInternalCh>
 8003aba:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003abe:	4843      	ldr	r0, [pc, #268]	@ (8003bcc <HAL_ADC_ConfigChannel+0x774>)
 8003ac0:	f7ff f9d4 	bl	8002e6c <LL_ADC_IsEnabled>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d15e      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a40      	ldr	r2, [pc, #256]	@ (8003bd0 <HAL_ADC_ConfigChannel+0x778>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d127      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x6cc>
 8003ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d121      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a39      	ldr	r2, [pc, #228]	@ (8003bcc <HAL_ADC_ConfigChannel+0x774>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d161      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003aea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003af2:	4619      	mov	r1, r3
 8003af4:	4834      	ldr	r0, [pc, #208]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x770>)
 8003af6:	f7ff f83e 	bl	8002b76 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003afa:	4b36      	ldr	r3, [pc, #216]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x77c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	099b      	lsrs	r3, r3, #6
 8003b00:	4a35      	ldr	r2, [pc, #212]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x780>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	099b      	lsrs	r3, r3, #6
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003b14:	e002      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f9      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b22:	e044      	b.n	8003bae <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2c      	ldr	r2, [pc, #176]	@ (8003bdc <HAL_ADC_ConfigChannel+0x784>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d113      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x6fe>
 8003b2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10d      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a23      	ldr	r2, [pc, #140]	@ (8003bcc <HAL_ADC_ConfigChannel+0x774>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d134      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003b44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	481e      	ldr	r0, [pc, #120]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x770>)
 8003b50:	f7ff f811 	bl	8002b76 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b54:	e02b      	b.n	8003bae <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a21      	ldr	r2, [pc, #132]	@ (8003be0 <HAL_ADC_ConfigChannel+0x788>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d126      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x756>
 8003b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d120      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a16      	ldr	r2, [pc, #88]	@ (8003bcc <HAL_ADC_ConfigChannel+0x774>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d11b      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003b76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4811      	ldr	r0, [pc, #68]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x770>)
 8003b82:	f7fe fff8 	bl	8002b76 <LL_ADC_SetCommonPathInternalCh>
 8003b86:	e012      	b.n	8003bae <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8c:	f043 0220 	orr.w	r2, r3, #32
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b9a:	e008      	b.n	8003bae <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003bb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	37d8      	adds	r7, #216	@ 0xd8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	80080000 	.word	0x80080000
 8003bc8:	50040300 	.word	0x50040300
 8003bcc:	50040000 	.word	0x50040000
 8003bd0:	c7520000 	.word	0xc7520000
 8003bd4:	2000001c 	.word	0x2000001c
 8003bd8:	053e2d63 	.word	0x053e2d63
 8003bdc:	cb840000 	.word	0xcb840000
 8003be0:	80000001 	.word	0x80000001

08003be4 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff f984 	bl	8002f08 <LL_ADC_REG_IsConversionOngoing>
 8003c00:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff f9a5 	bl	8002f56 <LL_ADC_INJ_IsConversionOngoing>
 8003c0c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d103      	bne.n	8003c1c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8098 	beq.w	8003d4c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02a      	beq.n	8003c80 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7e5b      	ldrb	r3, [r3, #25]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d126      	bne.n	8003c80 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	7e1b      	ldrb	r3, [r3, #24]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d122      	bne.n	8003c80 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c3e:	e014      	b.n	8003c6a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	4a45      	ldr	r2, [pc, #276]	@ (8003d58 <ADC_ConversionStop+0x174>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d90d      	bls.n	8003c64 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4c:	f043 0210 	orr.w	r2, r3, #16
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c58:	f043 0201 	orr.w	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e074      	b.n	8003d4e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	3301      	adds	r3, #1
 8003c68:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b40      	cmp	r3, #64	@ 0x40
 8003c76:	d1e3      	bne.n	8003c40 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2240      	movs	r2, #64	@ 0x40
 8003c7e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d014      	beq.n	8003cb0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff f93c 	bl	8002f08 <LL_ADC_REG_IsConversionOngoing>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00c      	beq.n	8003cb0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff f8f9 	bl	8002e92 <LL_ADC_IsDisableOngoing>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff f918 	bl	8002ee0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d014      	beq.n	8003ce0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff f94b 	bl	8002f56 <LL_ADC_INJ_IsConversionOngoing>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00c      	beq.n	8003ce0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff f8e1 	bl	8002e92 <LL_ADC_IsDisableOngoing>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d104      	bne.n	8003ce0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff f927 	bl	8002f2e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d005      	beq.n	8003cf2 <ADC_ConversionStop+0x10e>
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d105      	bne.n	8003cf8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003cec:	230c      	movs	r3, #12
 8003cee:	617b      	str	r3, [r7, #20]
        break;
 8003cf0:	e005      	b.n	8003cfe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	617b      	str	r3, [r7, #20]
        break;
 8003cf6:	e002      	b.n	8003cfe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	617b      	str	r3, [r7, #20]
        break;
 8003cfc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003cfe:	f7fe feeb 	bl	8002ad8 <HAL_GetTick>
 8003d02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d04:	e01b      	b.n	8003d3e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d06:	f7fe fee7 	bl	8002ad8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b05      	cmp	r3, #5
 8003d12:	d914      	bls.n	8003d3e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	f043 0210 	orr.w	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e007      	b.n	8003d4e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1dc      	bne.n	8003d06 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	a33fffff 	.word	0xa33fffff

08003d5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff f87d 	bl	8002e6c <LL_ADC_IsEnabled>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d15e      	bne.n	8003e36 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	4b30      	ldr	r3, [pc, #192]	@ (8003e40 <ADC_Enable+0xe4>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00d      	beq.n	8003da2 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8a:	f043 0210 	orr.w	r2, r3, #16
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	f043 0201 	orr.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e04a      	b.n	8003e38 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff f838 	bl	8002e1c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003dac:	4825      	ldr	r0, [pc, #148]	@ (8003e44 <ADC_Enable+0xe8>)
 8003dae:	f7fe fef5 	bl	8002b9c <LL_ADC_GetCommonPathInternalCh>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00f      	beq.n	8003ddc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dbc:	4b22      	ldr	r3, [pc, #136]	@ (8003e48 <ADC_Enable+0xec>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	099b      	lsrs	r3, r3, #6
 8003dc2:	4a22      	ldr	r2, [pc, #136]	@ (8003e4c <ADC_Enable+0xf0>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	099b      	lsrs	r3, r3, #6
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003dce:	e002      	b.n	8003dd6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f9      	bne.n	8003dd0 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003ddc:	f7fe fe7c 	bl	8002ad8 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003de2:	e021      	b.n	8003e28 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff f83f 	bl	8002e6c <LL_ADC_IsEnabled>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff f80f 	bl	8002e1c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dfe:	f7fe fe6b 	bl	8002ad8 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d90d      	bls.n	8003e28 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e10:	f043 0210 	orr.w	r2, r3, #16
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1c:	f043 0201 	orr.w	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e007      	b.n	8003e38 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d1d6      	bne.n	8003de4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	8000003f 	.word	0x8000003f
 8003e44:	50040300 	.word	0x50040300
 8003e48:	2000001c 	.word	0x2000001c
 8003e4c:	053e2d63 	.word	0x053e2d63

08003e50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff f818 	bl	8002e92 <LL_ADC_IsDisableOngoing>
 8003e62:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe ffff 	bl	8002e6c <LL_ADC_IsEnabled>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d047      	beq.n	8003f04 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d144      	bne.n	8003f04 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030d 	and.w	r3, r3, #13
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d10c      	bne.n	8003ea2 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe ffd9 	bl	8002e44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2203      	movs	r2, #3
 8003e98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e9a:	f7fe fe1d 	bl	8002ad8 <HAL_GetTick>
 8003e9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ea0:	e029      	b.n	8003ef6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea6:	f043 0210 	orr.w	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e023      	b.n	8003f06 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ebe:	f7fe fe0b 	bl	8002ad8 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d914      	bls.n	8003ef6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ede:	f043 0210 	orr.w	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e007      	b.n	8003f06 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1dc      	bne.n	8003ebe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f20:	4b0c      	ldr	r3, [pc, #48]	@ (8003f54 <__NVIC_SetPriorityGrouping+0x44>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f42:	4a04      	ldr	r2, [pc, #16]	@ (8003f54 <__NVIC_SetPriorityGrouping+0x44>)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	60d3      	str	r3, [r2, #12]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f5c:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <__NVIC_GetPriorityGrouping+0x18>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	0a1b      	lsrs	r3, r3, #8
 8003f62:	f003 0307 	and.w	r3, r3, #7
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	db0b      	blt.n	8003f9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	f003 021f 	and.w	r2, r3, #31
 8003f8c:	4907      	ldr	r1, [pc, #28]	@ (8003fac <__NVIC_EnableIRQ+0x38>)
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2001      	movs	r0, #1
 8003f96:	fa00 f202 	lsl.w	r2, r0, r2
 8003f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	e000e100 	.word	0xe000e100

08003fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	6039      	str	r1, [r7, #0]
 8003fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	db0a      	blt.n	8003fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	490c      	ldr	r1, [pc, #48]	@ (8003ffc <__NVIC_SetPriority+0x4c>)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	0112      	lsls	r2, r2, #4
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fd8:	e00a      	b.n	8003ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4908      	ldr	r1, [pc, #32]	@ (8004000 <__NVIC_SetPriority+0x50>)
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	0112      	lsls	r2, r2, #4
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	440b      	add	r3, r1
 8003fee:	761a      	strb	r2, [r3, #24]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000e100 	.word	0xe000e100
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	@ 0x24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f1c3 0307 	rsb	r3, r3, #7
 800401e:	2b04      	cmp	r3, #4
 8004020:	bf28      	it	cs
 8004022:	2304      	movcs	r3, #4
 8004024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3304      	adds	r3, #4
 800402a:	2b06      	cmp	r3, #6
 800402c:	d902      	bls.n	8004034 <NVIC_EncodePriority+0x30>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3b03      	subs	r3, #3
 8004032:	e000      	b.n	8004036 <NVIC_EncodePriority+0x32>
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004038:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43da      	mvns	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	401a      	ands	r2, r3
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800404c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	fa01 f303 	lsl.w	r3, r1, r3
 8004056:	43d9      	mvns	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800405c:	4313      	orrs	r3, r2
         );
}
 800405e:	4618      	mov	r0, r3
 8004060:	3724      	adds	r7, #36	@ 0x24
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3b01      	subs	r3, #1
 8004078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800407c:	d301      	bcc.n	8004082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800407e:	2301      	movs	r3, #1
 8004080:	e00f      	b.n	80040a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004082:	4a0a      	ldr	r2, [pc, #40]	@ (80040ac <SysTick_Config+0x40>)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3b01      	subs	r3, #1
 8004088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800408a:	210f      	movs	r1, #15
 800408c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004090:	f7ff ff8e 	bl	8003fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004094:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <SysTick_Config+0x40>)
 8004096:	2200      	movs	r2, #0
 8004098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800409a:	4b04      	ldr	r3, [pc, #16]	@ (80040ac <SysTick_Config+0x40>)
 800409c:	2207      	movs	r2, #7
 800409e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	e000e010 	.word	0xe000e010

080040b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ff29 	bl	8003f10 <__NVIC_SetPriorityGrouping>
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b086      	sub	sp, #24
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	4603      	mov	r3, r0
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
 80040d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040d4:	f7ff ff40 	bl	8003f58 <__NVIC_GetPriorityGrouping>
 80040d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	6978      	ldr	r0, [r7, #20]
 80040e0:	f7ff ff90 	bl	8004004 <NVIC_EncodePriority>
 80040e4:	4602      	mov	r2, r0
 80040e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff5f 	bl	8003fb0 <__NVIC_SetPriority>
}
 80040f2:	bf00      	nop
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	4603      	mov	r3, r0
 8004102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff ff33 	bl	8003f74 <__NVIC_EnableIRQ>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ffa4 	bl	800406c <SysTick_Config>
 8004124:	4603      	mov	r3, r0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e08e      	b.n	8004260 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	4b47      	ldr	r3, [pc, #284]	@ (8004268 <HAL_DMA_Init+0x138>)
 800414a:	429a      	cmp	r2, r3
 800414c:	d80f      	bhi.n	800416e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	4b45      	ldr	r3, [pc, #276]	@ (800426c <HAL_DMA_Init+0x13c>)
 8004156:	4413      	add	r3, r2
 8004158:	4a45      	ldr	r2, [pc, #276]	@ (8004270 <HAL_DMA_Init+0x140>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	009a      	lsls	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a42      	ldr	r2, [pc, #264]	@ (8004274 <HAL_DMA_Init+0x144>)
 800416a:	641a      	str	r2, [r3, #64]	@ 0x40
 800416c:	e00e      	b.n	800418c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	4b40      	ldr	r3, [pc, #256]	@ (8004278 <HAL_DMA_Init+0x148>)
 8004176:	4413      	add	r3, r2
 8004178:	4a3d      	ldr	r2, [pc, #244]	@ (8004270 <HAL_DMA_Init+0x140>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	009a      	lsls	r2, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a3c      	ldr	r2, [pc, #240]	@ (800427c <HAL_DMA_Init+0x14c>)
 800418a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80041b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f95c 	bl	800449c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041ec:	d102      	bne.n	80041f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041fc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004200:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800420a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d010      	beq.n	8004236 <HAL_DMA_Init+0x106>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b04      	cmp	r3, #4
 800421a:	d80c      	bhi.n	8004236 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f97b 	bl	8004518 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	e008      	b.n	8004248 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40020407 	.word	0x40020407
 800426c:	bffdfff8 	.word	0xbffdfff8
 8004270:	cccccccd 	.word	0xcccccccd
 8004274:	40020000 	.word	0x40020000
 8004278:	bffdfbf8 	.word	0xbffdfbf8
 800427c:	40020400 	.word	0x40020400

08004280 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d005      	beq.n	80042a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2204      	movs	r2, #4
 800429c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
 80042a2:	e047      	b.n	8004334 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 020e 	bic.w	r2, r2, #14
 80042b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d8:	f003 021c 	and.w	r2, r3, #28
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	2101      	movs	r1, #1
 80042e2:	fa01 f202 	lsl.w	r2, r1, r2
 80042e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00c      	beq.n	8004314 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004308:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004312:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	4798      	blx	r3
    }
  }
  return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	f003 031c 	and.w	r3, r3, #28
 800435e:	2204      	movs	r2, #4
 8004360:	409a      	lsls	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d026      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x7a>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d021      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0204 	bic.w	r2, r2, #4
 8004390:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	f003 021c 	and.w	r2, r3, #28
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	2104      	movs	r1, #4
 80043a0:	fa01 f202 	lsl.w	r2, r1, r2
 80043a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d071      	beq.n	8004492 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043b6:	e06c      	b.n	8004492 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043bc:	f003 031c 	and.w	r3, r3, #28
 80043c0:	2202      	movs	r2, #2
 80043c2:	409a      	lsls	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02e      	beq.n	800442a <HAL_DMA_IRQHandler+0xec>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d029      	beq.n	800442a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10b      	bne.n	80043fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 020a 	bic.w	r2, r2, #10
 80043f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004400:	f003 021c 	and.w	r2, r3, #28
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	2102      	movs	r1, #2
 800440a:	fa01 f202 	lsl.w	r2, r1, r2
 800440e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d038      	beq.n	8004492 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004428:	e033      	b.n	8004492 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442e:	f003 031c 	and.w	r3, r3, #28
 8004432:	2208      	movs	r2, #8
 8004434:	409a      	lsls	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d02a      	beq.n	8004494 <HAL_DMA_IRQHandler+0x156>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d025      	beq.n	8004494 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 020e 	bic.w	r2, r2, #14
 8004456:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	f003 021c 	and.w	r2, r3, #28
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f202 	lsl.w	r2, r1, r2
 800446a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004492:	bf00      	nop
 8004494:	bf00      	nop
}
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	4b17      	ldr	r3, [pc, #92]	@ (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d80a      	bhi.n	80044c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b4:	089b      	lsrs	r3, r3, #2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044bc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6493      	str	r3, [r2, #72]	@ 0x48
 80044c4:	e007      	b.n	80044d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	009a      	lsls	r2, r3, #2
 80044ce:	4b0f      	ldr	r3, [pc, #60]	@ (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80044d0:	4413      	add	r3, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	3b08      	subs	r3, #8
 80044de:	4a0c      	ldr	r2, [pc, #48]	@ (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004514 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044ec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	2201      	movs	r2, #1
 80044f6:	409a      	lsls	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	40020407 	.word	0x40020407
 800450c:	4002081c 	.word	0x4002081c
 8004510:	cccccccd 	.word	0xcccccccd
 8004514:	40020880 	.word	0x40020880

08004518 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004528:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	461a      	mov	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a09      	ldr	r2, [pc, #36]	@ (8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800453c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3b01      	subs	r3, #1
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2201      	movs	r2, #1
 8004548:	409a      	lsls	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	1000823f 	.word	0x1000823f
 8004560:	40020940 	.word	0x40020940

08004564 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004572:	e14c      	b.n	800480e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	2101      	movs	r1, #1
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	fa01 f303 	lsl.w	r3, r1, r3
 8004580:	4013      	ands	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 813e 	beq.w	8004808 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d005      	beq.n	80045a4 <HAL_GPIO_Init+0x40>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d130      	bne.n	8004606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	2203      	movs	r2, #3
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045da:	2201      	movs	r2, #1
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 0201 	and.w	r2, r3, #1
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b03      	cmp	r3, #3
 8004610:	d017      	beq.n	8004642 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2203      	movs	r2, #3
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d123      	bne.n	8004696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	08da      	lsrs	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3208      	adds	r2, #8
 8004656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	220f      	movs	r2, #15
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	08da      	lsrs	r2, r3, #3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3208      	adds	r2, #8
 8004690:	6939      	ldr	r1, [r7, #16]
 8004692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	2203      	movs	r2, #3
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4013      	ands	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0203 	and.w	r2, r3, #3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8098 	beq.w	8004808 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80046d8:	4a54      	ldr	r2, [pc, #336]	@ (800482c <HAL_GPIO_Init+0x2c8>)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	089b      	lsrs	r3, r3, #2
 80046de:	3302      	adds	r3, #2
 80046e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	220f      	movs	r2, #15
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4013      	ands	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004702:	d019      	beq.n	8004738 <HAL_GPIO_Init+0x1d4>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a4a      	ldr	r2, [pc, #296]	@ (8004830 <HAL_GPIO_Init+0x2cc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <HAL_GPIO_Init+0x1d0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a49      	ldr	r2, [pc, #292]	@ (8004834 <HAL_GPIO_Init+0x2d0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00d      	beq.n	8004730 <HAL_GPIO_Init+0x1cc>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a48      	ldr	r2, [pc, #288]	@ (8004838 <HAL_GPIO_Init+0x2d4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <HAL_GPIO_Init+0x1c8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a47      	ldr	r2, [pc, #284]	@ (800483c <HAL_GPIO_Init+0x2d8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_GPIO_Init+0x1c4>
 8004724:	2304      	movs	r3, #4
 8004726:	e008      	b.n	800473a <HAL_GPIO_Init+0x1d6>
 8004728:	2307      	movs	r3, #7
 800472a:	e006      	b.n	800473a <HAL_GPIO_Init+0x1d6>
 800472c:	2303      	movs	r3, #3
 800472e:	e004      	b.n	800473a <HAL_GPIO_Init+0x1d6>
 8004730:	2302      	movs	r3, #2
 8004732:	e002      	b.n	800473a <HAL_GPIO_Init+0x1d6>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_GPIO_Init+0x1d6>
 8004738:	2300      	movs	r3, #0
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	f002 0203 	and.w	r2, r2, #3
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	4093      	lsls	r3, r2
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800474a:	4938      	ldr	r1, [pc, #224]	@ (800482c <HAL_GPIO_Init+0x2c8>)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	3302      	adds	r3, #2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004758:	4b39      	ldr	r3, [pc, #228]	@ (8004840 <HAL_GPIO_Init+0x2dc>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	43db      	mvns	r3, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800477c:	4a30      	ldr	r2, [pc, #192]	@ (8004840 <HAL_GPIO_Init+0x2dc>)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004782:	4b2f      	ldr	r3, [pc, #188]	@ (8004840 <HAL_GPIO_Init+0x2dc>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	43db      	mvns	r3, r3
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4013      	ands	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047a6:	4a26      	ldr	r2, [pc, #152]	@ (8004840 <HAL_GPIO_Init+0x2dc>)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047ac:	4b24      	ldr	r3, [pc, #144]	@ (8004840 <HAL_GPIO_Init+0x2dc>)
 80047ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4013      	ands	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004840 <HAL_GPIO_Init+0x2dc>)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80047da:	4b19      	ldr	r3, [pc, #100]	@ (8004840 <HAL_GPIO_Init+0x2dc>)
 80047dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	43db      	mvns	r3, r3
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4013      	ands	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004800:	4a0f      	ldr	r2, [pc, #60]	@ (8004840 <HAL_GPIO_Init+0x2dc>)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	3301      	adds	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	f47f aeab 	bne.w	8004574 <HAL_GPIO_Init+0x10>
  }
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	40010000 	.word	0x40010000
 8004830:	48000400 	.word	0x48000400
 8004834:	48000800 	.word	0x48000800
 8004838:	48000c00 	.word	0x48000c00
 800483c:	48001000 	.word	0x48001000
 8004840:	58000800 	.word	0x58000800

08004844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	807b      	strh	r3, [r7, #2]
 8004850:	4613      	mov	r3, r2
 8004852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004854:	787b      	ldrb	r3, [r7, #1]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800485a:	887a      	ldrh	r2, [r7, #2]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004860:	e002      	b.n	8004868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004862:	887a      	ldrh	r2, [r7, #2]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800487e:	4b08      	ldr	r3, [pc, #32]	@ (80048a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	4013      	ands	r3, r2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d006      	beq.n	8004898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800488a:	4a05      	ldr	r2, [pc, #20]	@ (80048a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc ff78 	bl	8001788 <HAL_GPIO_EXTI_Callback>
  }
}
 8004898:	bf00      	nop
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	58000800 	.word	0x58000800

080048a4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80048aa:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <HAL_HSEM_IRQHandler+0x30>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80048b0:	4b08      	ldr	r3, [pc, #32]	@ (80048d4 <HAL_HSEM_IRQHandler+0x30>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	4906      	ldr	r1, [pc, #24]	@ (80048d4 <HAL_HSEM_IRQHandler+0x30>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80048be:	4a05      	ldr	r2, [pc, #20]	@ (80048d4 <HAL_HSEM_IRQHandler+0x30>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f807 	bl	80048d8 <HAL_HSEM_FreeCallback>
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	58001500 	.word	0x58001500

080048d8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e08d      	b.n	8004a1a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fc fc0a 	bl	800112c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2224      	movs	r2, #36	@ 0x24
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800493c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800494c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d107      	bne.n	8004966 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	e006      	b.n	8004974 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004972:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d108      	bne.n	800498e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800498a:	605a      	str	r2, [r3, #4]
 800498c:	e007      	b.n	800499e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800499c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69d9      	ldr	r1, [r3, #28]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1a      	ldr	r2, [r3, #32]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	460b      	mov	r3, r1
 8004a32:	817b      	strh	r3, [r7, #10]
 8004a34:	4613      	mov	r3, r2
 8004a36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	f040 80fd 	bne.w	8004c40 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_I2C_Master_Transmit+0x30>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0f6      	b.n	8004c42 <HAL_I2C_Master_Transmit+0x21e>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a5c:	f7fe f83c 	bl	8002ad8 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	2319      	movs	r3, #25
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fa0a 	bl	8004e88 <I2C_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e0e1      	b.n	8004c42 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2221      	movs	r2, #33	@ 0x21
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2210      	movs	r2, #16
 8004a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	893a      	ldrh	r2, [r7, #8]
 8004a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2bff      	cmp	r3, #255	@ 0xff
 8004aae:	d906      	bls.n	8004abe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	22ff      	movs	r2, #255	@ 0xff
 8004ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004ab6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e007      	b.n	8004ace <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004ac8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004acc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d024      	beq.n	8004b20 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	781a      	ldrb	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	8979      	ldrh	r1, [r7, #10]
 8004b12:	4b4e      	ldr	r3, [pc, #312]	@ (8004c4c <HAL_I2C_Master_Transmit+0x228>)
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fc05 	bl	8005328 <I2C_TransferConfig>
 8004b1e:	e066      	b.n	8004bee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	8979      	ldrh	r1, [r7, #10]
 8004b28:	4b48      	ldr	r3, [pc, #288]	@ (8004c4c <HAL_I2C_Master_Transmit+0x228>)
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fbfa 	bl	8005328 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004b34:	e05b      	b.n	8004bee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	6a39      	ldr	r1, [r7, #32]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f9fd 	bl	8004f3a <I2C_WaitOnTXISFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e07b      	b.n	8004c42 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	781a      	ldrb	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d034      	beq.n	8004bee <HAL_I2C_Master_Transmit+0x1ca>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d130      	bne.n	8004bee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	2200      	movs	r2, #0
 8004b94:	2180      	movs	r1, #128	@ 0x80
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f976 	bl	8004e88 <I2C_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e04d      	b.n	8004c42 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2bff      	cmp	r3, #255	@ 0xff
 8004bae:	d90e      	bls.n	8004bce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	22ff      	movs	r2, #255	@ 0xff
 8004bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	8979      	ldrh	r1, [r7, #10]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fbae 	bl	8005328 <I2C_TransferConfig>
 8004bcc:	e00f      	b.n	8004bee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	8979      	ldrh	r1, [r7, #10]
 8004be0:	2300      	movs	r3, #0
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fb9d 	bl	8005328 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d19e      	bne.n	8004b36 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	6a39      	ldr	r1, [r7, #32]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f9e3 	bl	8004fc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e01a      	b.n	8004c42 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2220      	movs	r2, #32
 8004c12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <HAL_I2C_Master_Transmit+0x22c>)
 8004c20:	400b      	ands	r3, r1
 8004c22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	80002000 	.word	0x80002000
 8004c50:	fe00e800 	.word	0xfe00e800

08004c54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	460b      	mov	r3, r1
 8004c62:	817b      	strh	r3, [r7, #10]
 8004c64:	4613      	mov	r3, r2
 8004c66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	f040 80db 	bne.w	8004e2c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_I2C_Master_Receive+0x30>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e0d4      	b.n	8004e2e <HAL_I2C_Master_Receive+0x1da>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c8c:	f7fd ff24 	bl	8002ad8 <HAL_GetTick>
 8004c90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	2319      	movs	r3, #25
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f8f2 	bl	8004e88 <I2C_WaitOnFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e0bf      	b.n	8004e2e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2222      	movs	r2, #34	@ 0x22
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2210      	movs	r2, #16
 8004cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	893a      	ldrh	r2, [r7, #8]
 8004cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2bff      	cmp	r3, #255	@ 0xff
 8004cde:	d90e      	bls.n	8004cfe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	22ff      	movs	r2, #255	@ 0xff
 8004ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	8979      	ldrh	r1, [r7, #10]
 8004cee:	4b52      	ldr	r3, [pc, #328]	@ (8004e38 <HAL_I2C_Master_Receive+0x1e4>)
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 fb16 	bl	8005328 <I2C_TransferConfig>
 8004cfc:	e06d      	b.n	8004dda <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	8979      	ldrh	r1, [r7, #10]
 8004d10:	4b49      	ldr	r3, [pc, #292]	@ (8004e38 <HAL_I2C_Master_Receive+0x1e4>)
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fb05 	bl	8005328 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004d1e:	e05c      	b.n	8004dda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	6a39      	ldr	r1, [r7, #32]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f993 	bl	8005050 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e07c      	b.n	8004e2e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d034      	beq.n	8004dda <HAL_I2C_Master_Receive+0x186>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d130      	bne.n	8004dda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2180      	movs	r1, #128	@ 0x80
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f880 	bl	8004e88 <I2C_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e04d      	b.n	8004e2e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2bff      	cmp	r3, #255	@ 0xff
 8004d9a:	d90e      	bls.n	8004dba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	22ff      	movs	r2, #255	@ 0xff
 8004da0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	8979      	ldrh	r1, [r7, #10]
 8004daa:	2300      	movs	r3, #0
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fab8 	bl	8005328 <I2C_TransferConfig>
 8004db8:	e00f      	b.n	8004dda <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	8979      	ldrh	r1, [r7, #10]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 faa7 	bl	8005328 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d19d      	bne.n	8004d20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	6a39      	ldr	r1, [r7, #32]
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f8ed 	bl	8004fc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e01a      	b.n	8004e2e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e3c <HAL_I2C_Master_Receive+0x1e8>)
 8004e0c:	400b      	ands	r3, r1
 8004e0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e000      	b.n	8004e2e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004e2c:	2302      	movs	r3, #2
  }
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	80002400 	.word	0x80002400
 8004e3c:	fe00e800 	.word	0xfe00e800

08004e40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d103      	bne.n	8004e5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d007      	beq.n	8004e7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	619a      	str	r2, [r3, #24]
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e98:	e03b      	b.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	6839      	ldr	r1, [r7, #0]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f962 	bl	8005168 <I2C_IsErrorOccurred>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e041      	b.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eb4:	d02d      	beq.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb6:	f7fd fe0f 	bl	8002ad8 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d302      	bcc.n	8004ecc <I2C_WaitOnFlagUntilTimeout+0x44>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d122      	bne.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d113      	bne.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eee:	f043 0220 	orr.w	r2, r3, #32
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e00f      	b.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d0b4      	beq.n	8004e9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f46:	e033      	b.n	8004fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f90b 	bl	8005168 <I2C_IsErrorOccurred>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e031      	b.n	8004fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f62:	d025      	beq.n	8004fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f64:	f7fd fdb8 	bl	8002ad8 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d302      	bcc.n	8004f7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d11a      	bne.n	8004fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d013      	beq.n	8004fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8c:	f043 0220 	orr.w	r2, r3, #32
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e007      	b.n	8004fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d1c4      	bne.n	8004f48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fd4:	e02f      	b.n	8005036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f8c4 	bl	8005168 <I2C_IsErrorOccurred>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e02d      	b.n	8005046 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7fd fd75 	bl	8002ad8 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d11a      	bne.n	8005036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b20      	cmp	r3, #32
 800500c:	d013      	beq.n	8005036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	f043 0220 	orr.w	r2, r3, #32
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e007      	b.n	8005046 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b20      	cmp	r3, #32
 8005042:	d1c8      	bne.n	8004fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005060:	e071      	b.n	8005146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f87e 	bl	8005168 <I2C_IsErrorOccurred>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b20      	cmp	r3, #32
 8005082:	d13b      	bne.n	80050fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d138      	bne.n	80050fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d105      	bne.n	80050a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d121      	bne.n	80050f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2210      	movs	r2, #16
 80050b8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2204      	movs	r2, #4
 80050be:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2220      	movs	r2, #32
 80050c6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6859      	ldr	r1, [r3, #4]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b24      	ldr	r3, [pc, #144]	@ (8005164 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80050d4:	400b      	ands	r3, r1
 80050d6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	75fb      	strb	r3, [r7, #23]
 80050f4:	e002      	b.n	80050fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80050fc:	f7fd fcec 	bl	8002ad8 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d119      	bne.n	8005146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d116      	bne.n	8005146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b04      	cmp	r3, #4
 8005124:	d00f      	beq.n	8005146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b04      	cmp	r3, #4
 8005152:	d002      	beq.n	800515a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d083      	beq.n	8005062 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	fe00e800 	.word	0xfe00e800

08005168 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	@ 0x28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	2b00      	cmp	r3, #0
 8005192:	d068      	beq.n	8005266 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2210      	movs	r2, #16
 800519a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800519c:	e049      	b.n	8005232 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051a4:	d045      	beq.n	8005232 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051a6:	f7fd fc97 	bl	8002ad8 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <I2C_IsErrorOccurred+0x54>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d13a      	bne.n	8005232 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051de:	d121      	bne.n	8005224 <I2C_IsErrorOccurred+0xbc>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051e6:	d01d      	beq.n	8005224 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80051e8:	7cfb      	ldrb	r3, [r7, #19]
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d01a      	beq.n	8005224 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051fe:	f7fd fc6b 	bl	8002ad8 <HAL_GetTick>
 8005202:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005204:	e00e      	b.n	8005224 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005206:	f7fd fc67 	bl	8002ad8 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b19      	cmp	r3, #25
 8005212:	d907      	bls.n	8005224 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	f043 0320 	orr.w	r3, r3, #32
 800521a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005222:	e006      	b.n	8005232 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b20      	cmp	r3, #32
 8005230:	d1e9      	bne.n	8005206 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b20      	cmp	r3, #32
 800523e:	d003      	beq.n	8005248 <I2C_IsErrorOccurred+0xe0>
 8005240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0aa      	beq.n	800519e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2220      	movs	r2, #32
 8005256:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	f043 0304 	orr.w	r3, r3, #4
 800525e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	f043 0301 	orr.w	r3, r3, #1
 800527e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005288:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00b      	beq.n	80052b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	f043 0308 	orr.w	r3, r3, #8
 80052a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00b      	beq.n	80052d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	f043 0302 	orr.w	r3, r3, #2
 80052c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80052d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01c      	beq.n	8005316 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7ff fdaf 	bl	8004e40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6859      	ldr	r1, [r3, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <I2C_IsErrorOccurred+0x1bc>)
 80052ee:	400b      	ands	r3, r1
 80052f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	431a      	orrs	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800531a:	4618      	mov	r0, r3
 800531c:	3728      	adds	r7, #40	@ 0x28
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	fe00e800 	.word	0xfe00e800

08005328 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	460b      	mov	r3, r1
 8005334:	817b      	strh	r3, [r7, #10]
 8005336:	4613      	mov	r3, r2
 8005338:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800533a:	897b      	ldrh	r3, [r7, #10]
 800533c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005340:	7a7b      	ldrb	r3, [r7, #9]
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005348:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	4313      	orrs	r3, r2
 8005352:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005356:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	0d5b      	lsrs	r3, r3, #21
 8005362:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005366:	4b08      	ldr	r3, [pc, #32]	@ (8005388 <I2C_TransferConfig+0x60>)
 8005368:	430b      	orrs	r3, r1
 800536a:	43db      	mvns	r3, r3
 800536c:	ea02 0103 	and.w	r1, r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	03ff63ff 	.word	0x03ff63ff

0800538c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d138      	bne.n	8005414 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e032      	b.n	8005416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2224      	movs	r2, #36	@ 0x24
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6819      	ldr	r1, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	e000      	b.n	8005416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005414:	2302      	movs	r3, #2
  }
}
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b20      	cmp	r3, #32
 8005436:	d139      	bne.n	80054ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005442:	2302      	movs	r3, #2
 8005444:	e033      	b.n	80054ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2224      	movs	r2, #36	@ 0x24
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005474:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e000      	b.n	80054ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054ac:	2302      	movs	r3, #2
  }
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01e      	beq.n	800550c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80054ce:	4b13      	ldr	r3, [pc, #76]	@ (800551c <HAL_IPCC_Init+0x60>)
 80054d0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d102      	bne.n	80054e4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fb feca 	bl	8001278 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80054e4:	68b8      	ldr	r0, [r7, #8]
 80054e6:	f000 f8f5 	bl	80056d4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8c6 	bl	8005688 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800550a:	e001      	b.n	8005510 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005510:	7bfb      	ldrb	r3, [r7, #15]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	58000c00 	.word	0x58000c00

08005520 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800552c:	4b22      	ldr	r3, [pc, #136]	@ (80055b8 <HAL_IPCC_TX_IRQHandler+0x98>)
 800552e:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	43db      	mvns	r3, r3
 8005536:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800553a:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	43db      	mvns	r3, r3
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4013      	ands	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800554a:	e02c      	b.n	80055a6 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	3310      	adds	r3, #16
 8005554:	2201      	movs	r2, #1
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4013      	ands	r3, r2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01c      	beq.n	80055a0 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	431a      	orrs	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	3306      	adds	r3, #6
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	3306      	adds	r3, #6
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	6939      	ldr	r1, [r7, #16]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	43db      	mvns	r3, r3
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4013      	ands	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	3301      	adds	r3, #1
 80055a4:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1cf      	bne.n	800554c <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	58000c00 	.word	0x58000c00

080055bc <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80055c8:	4b20      	ldr	r3, [pc, #128]	@ (800564c <HAL_IPCC_RX_IRQHandler+0x90>)
 80055ca:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 80055cc:	4b20      	ldr	r3, [pc, #128]	@ (8005650 <HAL_IPCC_RX_IRQHandler+0x94>)
 80055ce:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	43db      	mvns	r3, r3
 80055d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055da:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	4013      	ands	r3, r2
 80055e4:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80055e6:	e029      	b.n	800563c <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	2201      	movs	r2, #1
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01a      	beq.n	8005636 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	431a      	orrs	r2, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	69b9      	ldr	r1, [r7, #24]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	43db      	mvns	r3, r3
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	4013      	ands	r3, r2
 8005634:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	3301      	adds	r3, #1
 800563a:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1d2      	bne.n	80055e8 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	3720      	adds	r7, #32
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	58000c00 	.word	0x58000c00
 8005650:	58000c10 	.word	0x58000c10

08005654 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	4613      	mov	r3, r2
 800567a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	e00f      	b.n	80056b6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	4a0b      	ldr	r2, [pc, #44]	@ (80056cc <IPCC_SetDefaultCallbacks+0x44>)
 80056a0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3306      	adds	r3, #6
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	4a08      	ldr	r2, [pc, #32]	@ (80056d0 <IPCC_SetDefaultCallbacks+0x48>)
 80056ae:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b05      	cmp	r3, #5
 80056ba:	d9ec      	bls.n	8005696 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	08005655 	.word	0x08005655
 80056d0:	0800566f 	.word	0x0800566f

080056d4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80056e8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	223f      	movs	r2, #63	@ 0x3f
 80056ee:	609a      	str	r2, [r3, #8]
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005704:	4b06      	ldr	r3, [pc, #24]	@ (8005720 <LL_EXTI_EnableIT_0_31+0x24>)
 8005706:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800570a:	4905      	ldr	r1, [pc, #20]	@ (8005720 <LL_EXTI_EnableIT_0_31+0x24>)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	58000800 	.word	0x58000800

08005724 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800572c:	4b07      	ldr	r3, [pc, #28]	@ (800574c <LL_EXTI_DisableIT_0_31+0x28>)
 800572e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	43db      	mvns	r3, r3
 8005736:	4905      	ldr	r1, [pc, #20]	@ (800574c <LL_EXTI_DisableIT_0_31+0x28>)
 8005738:	4013      	ands	r3, r2
 800573a:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	58000800 	.word	0x58000800

08005750 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 8005758:	4b07      	ldr	r3, [pc, #28]	@ (8005778 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800575a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	43db      	mvns	r3, r3
 8005762:	4905      	ldr	r1, [pc, #20]	@ (8005778 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8005764:	4013      	ands	r3, r2
 8005766:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	58000800 	.word	0x58000800

0800577c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005784:	4b05      	ldr	r3, [pc, #20]	@ (800579c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4904      	ldr	r1, [pc, #16]	@ (800579c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4313      	orrs	r3, r2
 800578e:	600b      	str	r3, [r1, #0]

}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	58000800 	.word	0x58000800

080057a0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80057a8:	4b06      	ldr	r3, [pc, #24]	@ (80057c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	43db      	mvns	r3, r3
 80057b0:	4904      	ldr	r1, [pc, #16]	@ (80057c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	600b      	str	r3, [r1, #0]

}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	58000800 	.word	0x58000800

080057c8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	4904      	ldr	r1, [pc, #16]	@ (80057e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4313      	orrs	r3, r2
 80057da:	604b      	str	r3, [r1, #4]
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	58000800 	.word	0x58000800

080057ec <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80057f4:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	43db      	mvns	r3, r3
 80057fc:	4904      	ldr	r1, [pc, #16]	@ (8005810 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80057fe:	4013      	ands	r3, r2
 8005800:	604b      	str	r3, [r1, #4]
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	58000800 	.word	0x58000800

08005814 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005818:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a04      	ldr	r2, [pc, #16]	@ (8005830 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800581e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005822:	6013      	str	r3, [r2, #0]
}
 8005824:	bf00      	nop
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	58000400 	.word	0x58000400

08005834 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800583c:	4b1d      	ldr	r3, [pc, #116]	@ (80058b4 <HAL_PWR_ConfigPVD+0x80>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f023 020e 	bic.w	r2, r3, #14
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	491a      	ldr	r1, [pc, #104]	@ (80058b4 <HAL_PWR_ConfigPVD+0x80>)
 800584a:	4313      	orrs	r3, r2
 800584c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 800584e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005852:	f7ff ff67 	bl	8005724 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 8005856:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800585a:	f7ff ff79 	bl	8005750 <LL_C2_EXTI_DisableIT_0_31>

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800585e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005862:	f7ff ffc3 	bl	80057ec <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8005866:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800586a:	f7ff ff99 	bl	80057a0 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800587a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800587e:	f7ff ff3d 	bl	80056fc <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800588e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005892:	f7ff ff73 	bl	800577c <LL_EXTI_EnableRisingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80058a2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80058a6:	f7ff ff8f 	bl	80057c8 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	58000400 	.word	0x58000400

080058b8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80058bc:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <HAL_PWR_EnablePVD+0x1c>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4a04      	ldr	r2, [pc, #16]	@ (80058d4 <HAL_PWR_EnablePVD+0x1c>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	6053      	str	r3, [r2, #4]
}
 80058c8:	bf00      	nop
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	58000400 	.word	0x58000400

080058d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80058dc:	4b04      	ldr	r3, [pc, #16]	@ (80058f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	58000400 	.word	0x58000400

080058f4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80058f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005906:	d101      	bne.n	800590c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <LL_RCC_HSE_Enable>:
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800591c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800592a:	6013      	str	r3, [r2, #0]
}
 800592c:	bf00      	nop
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <LL_RCC_HSE_Disable>:
{
 8005936:	b480      	push	{r7}
 8005938:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800593a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005948:	6013      	str	r3, [r2, #0]
}
 800594a:	bf00      	nop
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <LL_RCC_HSE_IsReady>:
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005962:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005966:	d101      	bne.n	800596c <LL_RCC_HSE_IsReady+0x18>
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <LL_RCC_HSE_IsReady+0x1a>
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <LL_RCC_HSI_Enable>:
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800598a:	6013      	str	r3, [r2, #0]
}
 800598c:	bf00      	nop
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <LL_RCC_HSI_Disable>:
{
 8005996:	b480      	push	{r7}
 8005998:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800599a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059a8:	6013      	str	r3, [r2, #0]
}
 80059aa:	bf00      	nop
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <LL_RCC_HSI_IsReady>:
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80059b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c6:	d101      	bne.n	80059cc <LL_RCC_HSI_IsReady+0x18>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <LL_RCC_HSI_IsReady+0x1a>
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80059e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059f2:	4313      	orrs	r3, r2
 80059f4:	604b      	str	r3, [r1, #4]
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <LL_RCC_HSI48_Enable>:
{
 8005a02:	b480      	push	{r7}
 8005a04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005a1a:	bf00      	nop
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <LL_RCC_HSI48_Disable>:
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a34:	f023 0301 	bic.w	r3, r3, #1
 8005a38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005a3c:	bf00      	nop
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <LL_RCC_HSI48_IsReady>:
{
 8005a46:	b480      	push	{r7}
 8005a48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d101      	bne.n	8005a5e <LL_RCC_HSI48_IsReady+0x18>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <LL_RCC_HSI48_IsReady+0x1a>
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <LL_RCC_LSE_Enable>:
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a82:	bf00      	nop
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <LL_RCC_LSE_Disable>:
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005aa4:	bf00      	nop
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <LL_RCC_LSE_EnableBypass>:
{
 8005aae:	b480      	push	{r7}
 8005ab0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005abe:	f043 0304 	orr.w	r3, r3, #4
 8005ac2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005ac6:	bf00      	nop
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <LL_RCC_LSE_DisableBypass>:
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005adc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ae0:	f023 0304 	bic.w	r3, r3, #4
 8005ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005ae8:	bf00      	nop
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <LL_RCC_LSE_IsReady>:
{
 8005af2:	b480      	push	{r7}
 8005af4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d101      	bne.n	8005b0a <LL_RCC_LSE_IsReady+0x18>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <LL_RCC_LSE_IsReady+0x1a>
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <LL_RCC_LSI1_Enable>:
{
 8005b16:	b480      	push	{r7}
 8005b18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005b2e:	bf00      	nop
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <LL_RCC_LSI1_Disable>:
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b48:	f023 0301 	bic.w	r3, r3, #1
 8005b4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005b50:	bf00      	nop
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <LL_RCC_LSI1_IsReady>:
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d101      	bne.n	8005b72 <LL_RCC_LSI1_IsReady+0x18>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <LL_RCC_LSI1_IsReady+0x1a>
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <LL_RCC_LSI2_Enable>:
{
 8005b7e:	b480      	push	{r7}
 8005b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b8e:	f043 0304 	orr.w	r3, r3, #4
 8005b92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <LL_RCC_LSI2_Disable>:
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bb0:	f023 0304 	bic.w	r3, r3, #4
 8005bb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005bb8:	bf00      	nop
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <LL_RCC_LSI2_IsReady>:
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d101      	bne.n	8005bda <LL_RCC_LSI2_IsReady+0x18>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <LL_RCC_LSI2_IsReady+0x1a>
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <LL_RCC_LSI2_SetTrimming>:
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bf6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <LL_RCC_MSI_Enable>:
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	6013      	str	r3, [r2, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <LL_RCC_MSI_Disable>:
{
 8005c32:	b480      	push	{r7}
 8005c34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c40:	f023 0301 	bic.w	r3, r3, #1
 8005c44:	6013      	str	r3, [r2, #0]
}
 8005c46:	bf00      	nop
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <LL_RCC_MSI_IsReady>:
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d101      	bne.n	8005c66 <LL_RCC_MSI_IsReady+0x16>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <LL_RCC_MSI_IsReady+0x18>
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <LL_RCC_MSI_SetRange>:
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	600b      	str	r3, [r1, #0]
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <LL_RCC_MSI_GetRange>:
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005caa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2bb0      	cmp	r3, #176	@ 0xb0
 8005cb0:	d901      	bls.n	8005cb6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005cb2:	23b0      	movs	r3, #176	@ 0xb0
 8005cb4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005cb6:	687b      	ldr	r3, [r7, #4]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	604b      	str	r3, [r1, #4]
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <LL_RCC_SetSysClkSource>:
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f023 0203 	bic.w	r2, r3, #3
 8005d00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	608b      	str	r3, [r1, #8]
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <LL_RCC_GetSysClkSource>:
{
 8005d16:	b480      	push	{r7}
 8005d18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 030c 	and.w	r3, r3, #12
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <LL_RCC_SetAHBPrescaler>:
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <LL_RCC_SetAHB4Prescaler>:
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d92:	f023 020f 	bic.w	r2, r3, #15
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	091b      	lsrs	r3, r3, #4
 8005d9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <LL_RCC_SetAPB1Prescaler>:
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <LL_RCC_SetAPB2Prescaler>:
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005dea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	608b      	str	r3, [r1, #8]
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <LL_RCC_GetAHBPrescaler>:
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <LL_RCC_GetAHB4Prescaler>:
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e20:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e46:	6013      	str	r3, [r2, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005e52:	b480      	push	{r7}
 8005e54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e64:	6013      	str	r3, [r2, #0]
}
 8005e66:	bf00      	nop
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e82:	d101      	bne.n	8005e88 <LL_RCC_PLL_IsReady+0x18>
 8005e84:	2301      	movs	r3, #1
 8005e86:	e000      	b.n	8005e8a <LL_RCC_PLL_IsReady+0x1a>
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	0a1b      	lsrs	r3, r3, #8
 8005ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0303 	and.w	r3, r3, #3
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f08:	d101      	bne.n	8005f0e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f22:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f2e:	d101      	bne.n	8005f34 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f48:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f54:	d101      	bne.n	8005f5a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005f66:	b480      	push	{r7}
 8005f68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f78:	d101      	bne.n	8005f7e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f9c:	d101      	bne.n	8005fa2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fb0:	b590      	push	{r4, r7, lr}
 8005fb2:	b08d      	sub	sp, #52	@ 0x34
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e363      	b.n	800668a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 808d 	beq.w	80060ea <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fd0:	f7ff fea1 	bl	8005d16 <LL_RCC_GetSysClkSource>
 8005fd4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fd6:	f7ff ff82 	bl	8005ede <LL_RCC_PLL_GetMainSource>
 8005fda:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <HAL_RCC_OscConfig+0x3e>
 8005fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe4:	2b0c      	cmp	r3, #12
 8005fe6:	d147      	bne.n	8006078 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d144      	bne.n	8006078 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e347      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005ffe:	f7ff fe4c 	bl	8005c9a <LL_RCC_MSI_GetRange>
 8006002:	4603      	mov	r3, r0
 8006004:	429c      	cmp	r4, r3
 8006006:	d914      	bls.n	8006032 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fd03 	bl	8006a18 <RCC_SetFlashLatencyFromMSIRange>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e336      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff fe26 	bl	8005c72 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fe4a 	bl	8005cc4 <LL_RCC_MSI_SetCalibTrimming>
 8006030:	e013      	b.n	800605a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff fe1b 	bl	8005c72 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fe3f 	bl	8005cc4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fce4 	bl	8006a18 <RCC_SetFlashLatencyFromMSIRange>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e317      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800605a:	f000 fcc9 	bl	80069f0 <HAL_RCC_GetHCLKFreq>
 800605e:	4603      	mov	r3, r0
 8006060:	4aa4      	ldr	r2, [pc, #656]	@ (80062f4 <HAL_RCC_OscConfig+0x344>)
 8006062:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006064:	4ba4      	ldr	r3, [pc, #656]	@ (80062f8 <HAL_RCC_OscConfig+0x348>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f7fc fce7 	bl	8002a3c <HAL_InitTick>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d039      	beq.n	80060e8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e308      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01e      	beq.n	80060be <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006080:	f7ff fdc8 	bl	8005c14 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006084:	f7fc fd28 	bl	8002ad8 <HAL_GetTick>
 8006088:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800608c:	f7fc fd24 	bl	8002ad8 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e2f5      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800609e:	f7ff fdd7 	bl	8005c50 <LL_RCC_MSI_IsReady>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f1      	beq.n	800608c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fde0 	bl	8005c72 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff fe04 	bl	8005cc4 <LL_RCC_MSI_SetCalibTrimming>
 80060bc:	e015      	b.n	80060ea <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80060be:	f7ff fdb8 	bl	8005c32 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060c2:	f7fc fd09 	bl	8002ad8 <HAL_GetTick>
 80060c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80060c8:	e008      	b.n	80060dc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060ca:	f7fc fd05 	bl	8002ad8 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e2d6      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80060dc:	f7ff fdb8 	bl	8005c50 <LL_RCC_MSI_IsReady>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f1      	bne.n	80060ca <HAL_RCC_OscConfig+0x11a>
 80060e6:	e000      	b.n	80060ea <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80060e8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d047      	beq.n	8006186 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060f6:	f7ff fe0e 	bl	8005d16 <LL_RCC_GetSysClkSource>
 80060fa:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060fc:	f7ff feef 	bl	8005ede <LL_RCC_PLL_GetMainSource>
 8006100:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	2b08      	cmp	r3, #8
 8006106:	d005      	beq.n	8006114 <HAL_RCC_OscConfig+0x164>
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	2b0c      	cmp	r3, #12
 800610c:	d108      	bne.n	8006120 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	2b03      	cmp	r3, #3
 8006112:	d105      	bne.n	8006120 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d134      	bne.n	8006186 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e2b4      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006128:	d102      	bne.n	8006130 <HAL_RCC_OscConfig+0x180>
 800612a:	f7ff fbf5 	bl	8005918 <LL_RCC_HSE_Enable>
 800612e:	e001      	b.n	8006134 <HAL_RCC_OscConfig+0x184>
 8006130:	f7ff fc01 	bl	8005936 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d012      	beq.n	8006162 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613c:	f7fc fccc 	bl	8002ad8 <HAL_GetTick>
 8006140:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006144:	f7fc fcc8 	bl	8002ad8 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b64      	cmp	r3, #100	@ 0x64
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e299      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006156:	f7ff fbfd 	bl	8005954 <LL_RCC_HSE_IsReady>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f1      	beq.n	8006144 <HAL_RCC_OscConfig+0x194>
 8006160:	e011      	b.n	8006186 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006162:	f7fc fcb9 	bl	8002ad8 <HAL_GetTick>
 8006166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800616a:	f7fc fcb5 	bl	8002ad8 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b64      	cmp	r3, #100	@ 0x64
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e286      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800617c:	f7ff fbea 	bl	8005954 <LL_RCC_HSE_IsReady>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f1      	bne.n	800616a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d04c      	beq.n	800622c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006192:	f7ff fdc0 	bl	8005d16 <LL_RCC_GetSysClkSource>
 8006196:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006198:	f7ff fea1 	bl	8005ede <LL_RCC_PLL_GetMainSource>
 800619c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d005      	beq.n	80061b0 <HAL_RCC_OscConfig+0x200>
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	2b0c      	cmp	r3, #12
 80061a8:	d10e      	bne.n	80061c8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d10b      	bne.n	80061c8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e266      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff fc09 	bl	80059d8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80061c6:	e031      	b.n	800622c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d019      	beq.n	8006204 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061d0:	f7ff fbd2 	bl	8005978 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d4:	f7fc fc80 	bl	8002ad8 <HAL_GetTick>
 80061d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061dc:	f7fc fc7c 	bl	8002ad8 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e24d      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80061ee:	f7ff fbe1 	bl	80059b4 <LL_RCC_HSI_IsReady>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f1      	beq.n	80061dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff fbeb 	bl	80059d8 <LL_RCC_HSI_SetCalibTrimming>
 8006202:	e013      	b.n	800622c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006204:	f7ff fbc7 	bl	8005996 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006208:	f7fc fc66 	bl	8002ad8 <HAL_GetTick>
 800620c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006210:	f7fc fc62 	bl	8002ad8 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e233      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006222:	f7ff fbc7 	bl	80059b4 <LL_RCC_HSI_IsReady>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f1      	bne.n	8006210 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80a3 	beq.w	800638c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d076      	beq.n	800633c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b00      	cmp	r3, #0
 8006258:	d046      	beq.n	80062e8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800625a:	f7ff fc7e 	bl	8005b5a <LL_RCC_LSI1_IsReady>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d113      	bne.n	800628c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006264:	f7ff fc57 	bl	8005b16 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006268:	f7fc fc36 	bl	8002ad8 <HAL_GetTick>
 800626c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006270:	f7fc fc32 	bl	8002ad8 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e203      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006282:	f7ff fc6a 	bl	8005b5a <LL_RCC_LSI1_IsReady>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f1      	beq.n	8006270 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800628c:	f7ff fc77 	bl	8005b7e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fc fc22 	bl	8002ad8 <HAL_GetTick>
 8006294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006298:	f7fc fc1e 	bl	8002ad8 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e1ef      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80062aa:	f7ff fc8a 	bl	8005bc2 <LL_RCC_LSI2_IsReady>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0f1      	beq.n	8006298 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fc94 	bl	8005be6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80062be:	f7ff fc3b 	bl	8005b38 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c2:	f7fc fc09 	bl	8002ad8 <HAL_GetTick>
 80062c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80062c8:	e008      	b.n	80062dc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80062ca:	f7fc fc05 	bl	8002ad8 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e1d6      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80062dc:	f7ff fc3d 	bl	8005b5a <LL_RCC_LSI1_IsReady>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f1      	bne.n	80062ca <HAL_RCC_OscConfig+0x31a>
 80062e6:	e051      	b.n	800638c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80062e8:	f7ff fc15 	bl	8005b16 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ec:	f7fc fbf4 	bl	8002ad8 <HAL_GetTick>
 80062f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80062f2:	e00c      	b.n	800630e <HAL_RCC_OscConfig+0x35e>
 80062f4:	2000001c 	.word	0x2000001c
 80062f8:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80062fc:	f7fc fbec 	bl	8002ad8 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e1bd      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800630e:	f7ff fc24 	bl	8005b5a <LL_RCC_LSI1_IsReady>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f1      	beq.n	80062fc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006318:	f7ff fc42 	bl	8005ba0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800631e:	f7fc fbdb 	bl	8002ad8 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b03      	cmp	r3, #3
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e1ac      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006330:	f7ff fc47 	bl	8005bc2 <LL_RCC_LSI2_IsReady>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f1      	bne.n	800631e <HAL_RCC_OscConfig+0x36e>
 800633a:	e027      	b.n	800638c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800633c:	f7ff fc30 	bl	8005ba0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006340:	f7fc fbca 	bl	8002ad8 <HAL_GetTick>
 8006344:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006348:	f7fc fbc6 	bl	8002ad8 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b03      	cmp	r3, #3
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e197      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800635a:	f7ff fc32 	bl	8005bc2 <LL_RCC_LSI2_IsReady>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1f1      	bne.n	8006348 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006364:	f7ff fbe8 	bl	8005b38 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006368:	f7fc fbb6 	bl	8002ad8 <HAL_GetTick>
 800636c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006370:	f7fc fbb2 	bl	8002ad8 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e183      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006382:	f7ff fbea 	bl	8005b5a <LL_RCC_LSI1_IsReady>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1f1      	bne.n	8006370 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d05b      	beq.n	8006450 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006398:	4ba7      	ldr	r3, [pc, #668]	@ (8006638 <HAL_RCC_OscConfig+0x688>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d114      	bne.n	80063ce <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80063a4:	f7ff fa36 	bl	8005814 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063a8:	f7fc fb96 	bl	8002ad8 <HAL_GetTick>
 80063ac:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063b0:	f7fc fb92 	bl	8002ad8 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e163      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063c2:	4b9d      	ldr	r3, [pc, #628]	@ (8006638 <HAL_RCC_OscConfig+0x688>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0f0      	beq.n	80063b0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d102      	bne.n	80063dc <HAL_RCC_OscConfig+0x42c>
 80063d6:	f7ff fb48 	bl	8005a6a <LL_RCC_LSE_Enable>
 80063da:	e00c      	b.n	80063f6 <HAL_RCC_OscConfig+0x446>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b05      	cmp	r3, #5
 80063e2:	d104      	bne.n	80063ee <HAL_RCC_OscConfig+0x43e>
 80063e4:	f7ff fb63 	bl	8005aae <LL_RCC_LSE_EnableBypass>
 80063e8:	f7ff fb3f 	bl	8005a6a <LL_RCC_LSE_Enable>
 80063ec:	e003      	b.n	80063f6 <HAL_RCC_OscConfig+0x446>
 80063ee:	f7ff fb4d 	bl	8005a8c <LL_RCC_LSE_Disable>
 80063f2:	f7ff fb6d 	bl	8005ad0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d014      	beq.n	8006428 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fe:	f7fc fb6b 	bl	8002ad8 <HAL_GetTick>
 8006402:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006404:	e00a      	b.n	800641c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006406:	f7fc fb67 	bl	8002ad8 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006414:	4293      	cmp	r3, r2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e136      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800641c:	f7ff fb69 	bl	8005af2 <LL_RCC_LSE_IsReady>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0ef      	beq.n	8006406 <HAL_RCC_OscConfig+0x456>
 8006426:	e013      	b.n	8006450 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006428:	f7fc fb56 	bl	8002ad8 <HAL_GetTick>
 800642c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800642e:	e00a      	b.n	8006446 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006430:	f7fc fb52 	bl	8002ad8 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800643e:	4293      	cmp	r3, r2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e121      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006446:	f7ff fb54 	bl	8005af2 <LL_RCC_LSE_IsReady>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1ef      	bne.n	8006430 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d02c      	beq.n	80064b6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006460:	2b00      	cmp	r3, #0
 8006462:	d014      	beq.n	800648e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006464:	f7ff facd 	bl	8005a02 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006468:	f7fc fb36 	bl	8002ad8 <HAL_GetTick>
 800646c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006470:	f7fc fb32 	bl	8002ad8 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e103      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006482:	f7ff fae0 	bl	8005a46 <LL_RCC_HSI48_IsReady>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0f1      	beq.n	8006470 <HAL_RCC_OscConfig+0x4c0>
 800648c:	e013      	b.n	80064b6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800648e:	f7ff fac9 	bl	8005a24 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006492:	f7fc fb21 	bl	8002ad8 <HAL_GetTick>
 8006496:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006498:	e008      	b.n	80064ac <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800649a:	f7fc fb1d 	bl	8002ad8 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e0ee      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80064ac:	f7ff facb 	bl	8005a46 <LL_RCC_HSI48_IsReady>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f1      	bne.n	800649a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 80e4 	beq.w	8006688 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064c0:	f7ff fc29 	bl	8005d16 <LL_RCC_GetSysClkSource>
 80064c4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80064c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	f040 80b4 	bne.w	8006640 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 0203 	and.w	r2, r3, #3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d123      	bne.n	800652e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d11c      	bne.n	800652e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	0a1b      	lsrs	r3, r3, #8
 80064f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006500:	429a      	cmp	r2, r3
 8006502:	d114      	bne.n	800652e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800650e:	429a      	cmp	r2, r3
 8006510:	d10d      	bne.n	800652e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800651c:	429a      	cmp	r2, r3
 800651e:	d106      	bne.n	800652e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800652a:	429a      	cmp	r2, r3
 800652c:	d05d      	beq.n	80065ea <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b0c      	cmp	r3, #12
 8006532:	d058      	beq.n	80065e6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e0a1      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006546:	f7ff fc84 	bl	8005e52 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800654a:	f7fc fac5 	bl	8002ad8 <HAL_GetTick>
 800654e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006552:	f7fc fac1 	bl	8002ad8 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e092      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1ef      	bne.n	8006552 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	4b30      	ldr	r3, [pc, #192]	@ (800663c <HAL_RCC_OscConfig+0x68c>)
 800657a:	4013      	ands	r3, r2
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006584:	4311      	orrs	r1, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800658a:	0212      	lsls	r2, r2, #8
 800658c:	4311      	orrs	r1, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006592:	4311      	orrs	r1, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006598:	4311      	orrs	r1, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800659e:	430a      	orrs	r2, r1
 80065a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80065a8:	f7ff fc44 	bl	8005e34 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065bc:	f7fc fa8c 	bl	8002ad8 <HAL_GetTick>
 80065c0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c4:	f7fc fa88 	bl	8002ad8 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e059      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0ef      	beq.n	80065c4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065e4:	e050      	b.n	8006688 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e04f      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d147      	bne.n	8006688 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80065f8:	f7ff fc1c 	bl	8005e34 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800660a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800660c:	f7fc fa64 	bl	8002ad8 <HAL_GetTick>
 8006610:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006614:	f7fc fa60 	bl	8002ad8 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e031      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0ef      	beq.n	8006614 <HAL_RCC_OscConfig+0x664>
 8006634:	e028      	b.n	8006688 <HAL_RCC_OscConfig+0x6d8>
 8006636:	bf00      	nop
 8006638:	58000400 	.word	0x58000400
 800663c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b0c      	cmp	r3, #12
 8006644:	d01e      	beq.n	8006684 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006646:	f7ff fc04 	bl	8005e52 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664a:	f7fc fa45 	bl	8002ad8 <HAL_GetTick>
 800664e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006652:	f7fc fa41 	bl	8002ad8 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e012      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1ef      	bne.n	8006652 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800667c:	4b05      	ldr	r3, [pc, #20]	@ (8006694 <HAL_RCC_OscConfig+0x6e4>)
 800667e:	4013      	ands	r3, r2
 8006680:	60cb      	str	r3, [r1, #12]
 8006682:	e001      	b.n	8006688 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3734      	adds	r7, #52	@ 0x34
 800668e:	46bd      	mov	sp, r7
 8006690:	bd90      	pop	{r4, r7, pc}
 8006692:	bf00      	nop
 8006694:	eefefffc 	.word	0xeefefffc

08006698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e12d      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066ac:	4b98      	ldr	r3, [pc, #608]	@ (8006910 <HAL_RCC_ClockConfig+0x278>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d91b      	bls.n	80066f2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ba:	4b95      	ldr	r3, [pc, #596]	@ (8006910 <HAL_RCC_ClockConfig+0x278>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f023 0207 	bic.w	r2, r3, #7
 80066c2:	4993      	ldr	r1, [pc, #588]	@ (8006910 <HAL_RCC_ClockConfig+0x278>)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ca:	f7fc fa05 	bl	8002ad8 <HAL_GetTick>
 80066ce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80066d2:	f7fc fa01 	bl	8002ad8 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e111      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e4:	4b8a      	ldr	r3, [pc, #552]	@ (8006910 <HAL_RCC_ClockConfig+0x278>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d1ef      	bne.n	80066d2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff fb13 	bl	8005d2e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006708:	f7fc f9e6 	bl	8002ad8 <HAL_GetTick>
 800670c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800670e:	e008      	b.n	8006722 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006710:	f7fc f9e2 	bl	8002ad8 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e0f2      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006722:	f7ff fbe8 	bl	8005ef6 <LL_RCC_IsActiveFlag_HPRE>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f1      	beq.n	8006710 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b00      	cmp	r3, #0
 8006736:	d016      	beq.n	8006766 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fb0a 	bl	8005d56 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006742:	f7fc f9c9 	bl	8002ad8 <HAL_GetTick>
 8006746:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006748:	e008      	b.n	800675c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800674a:	f7fc f9c5 	bl	8002ad8 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e0d5      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800675c:	f7ff fbdd 	bl	8005f1a <LL_RCC_IsActiveFlag_C2HPRE>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f1      	beq.n	800674a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d016      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff fb03 	bl	8005d82 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800677c:	f7fc f9ac 	bl	8002ad8 <HAL_GetTick>
 8006780:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006782:	e008      	b.n	8006796 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006784:	f7fc f9a8 	bl	8002ad8 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e0b8      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006796:	f7ff fbd3 	bl	8005f40 <LL_RCC_IsActiveFlag_SHDHPRE>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0f1      	beq.n	8006784 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d016      	beq.n	80067da <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fafd 	bl	8005db0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067b6:	f7fc f98f 	bl	8002ad8 <HAL_GetTick>
 80067ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067be:	f7fc f98b 	bl	8002ad8 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e09b      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80067d0:	f7ff fbc9 	bl	8005f66 <LL_RCC_IsActiveFlag_PPRE1>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0f1      	beq.n	80067be <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d017      	beq.n	8006816 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff faf3 	bl	8005dd8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067f2:	f7fc f971 	bl	8002ad8 <HAL_GetTick>
 80067f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80067f8:	e008      	b.n	800680c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067fa:	f7fc f96d 	bl	8002ad8 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e07d      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800680c:	f7ff fbbd 	bl	8005f8a <LL_RCC_IsActiveFlag_PPRE2>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f1      	beq.n	80067fa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d043      	beq.n	80068aa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d106      	bne.n	8006838 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800682a:	f7ff f893 	bl	8005954 <LL_RCC_HSE_IsReady>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d11e      	bne.n	8006872 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e067      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d106      	bne.n	800684e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006840:	f7ff fb16 	bl	8005e70 <LL_RCC_PLL_IsReady>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d113      	bne.n	8006872 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e05c      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006856:	f7ff f9fb 	bl	8005c50 <LL_RCC_MSI_IsReady>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d108      	bne.n	8006872 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e051      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006864:	f7ff f8a6 	bl	80059b4 <LL_RCC_HSI_IsReady>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e04a      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff fa39 	bl	8005cee <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800687c:	f7fc f92c 	bl	8002ad8 <HAL_GetTick>
 8006880:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006882:	e00a      	b.n	800689a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006884:	f7fc f928 	bl	8002ad8 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006892:	4293      	cmp	r3, r2
 8006894:	d901      	bls.n	800689a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e036      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800689a:	f7ff fa3c 	bl	8005d16 <LL_RCC_GetSysClkSource>
 800689e:	4602      	mov	r2, r0
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d1ec      	bne.n	8006884 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068aa:	4b19      	ldr	r3, [pc, #100]	@ (8006910 <HAL_RCC_ClockConfig+0x278>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d21b      	bcs.n	80068f0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b8:	4b15      	ldr	r3, [pc, #84]	@ (8006910 <HAL_RCC_ClockConfig+0x278>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f023 0207 	bic.w	r2, r3, #7
 80068c0:	4913      	ldr	r1, [pc, #76]	@ (8006910 <HAL_RCC_ClockConfig+0x278>)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c8:	f7fc f906 	bl	8002ad8 <HAL_GetTick>
 80068cc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80068d0:	f7fc f902 	bl	8002ad8 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e012      	b.n	8006908 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006910 <HAL_RCC_ClockConfig+0x278>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d1ef      	bne.n	80068d0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80068f0:	f000 f87e 	bl	80069f0 <HAL_RCC_GetHCLKFreq>
 80068f4:	4603      	mov	r3, r0
 80068f6:	4a07      	ldr	r2, [pc, #28]	@ (8006914 <HAL_RCC_ClockConfig+0x27c>)
 80068f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80068fa:	f7fc f8f9 	bl	8002af0 <HAL_GetTickPrio>
 80068fe:	4603      	mov	r3, r0
 8006900:	4618      	mov	r0, r3
 8006902:	f7fc f89b 	bl	8002a3c <HAL_InitTick>
 8006906:	4603      	mov	r3, r0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	58004000 	.word	0x58004000
 8006914:	2000001c 	.word	0x2000001c

08006918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006918:	b590      	push	{r4, r7, lr}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800691e:	f7ff f9fa 	bl	8005d16 <LL_RCC_GetSysClkSource>
 8006922:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800692a:	f7ff f9b6 	bl	8005c9a <LL_RCC_MSI_GetRange>
 800692e:	4603      	mov	r3, r0
 8006930:	091b      	lsrs	r3, r3, #4
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	4a2b      	ldr	r2, [pc, #172]	@ (80069e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	e04b      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b04      	cmp	r3, #4
 8006944:	d102      	bne.n	800694c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006946:	4b28      	ldr	r3, [pc, #160]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	e045      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b08      	cmp	r3, #8
 8006950:	d10a      	bne.n	8006968 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006952:	f7fe ffcf 	bl	80058f4 <LL_RCC_HSE_IsEnabledDiv2>
 8006956:	4603      	mov	r3, r0
 8006958:	2b01      	cmp	r3, #1
 800695a:	d102      	bne.n	8006962 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800695c:	4b22      	ldr	r3, [pc, #136]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	e03a      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006962:	4b22      	ldr	r3, [pc, #136]	@ (80069ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e037      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006968:	f7ff fab9 	bl	8005ede <LL_RCC_PLL_GetMainSource>
 800696c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d003      	beq.n	800697c <HAL_RCC_GetSysClockFreq+0x64>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d003      	beq.n	8006982 <HAL_RCC_GetSysClockFreq+0x6a>
 800697a:	e00d      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800697c:	4b1a      	ldr	r3, [pc, #104]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800697e:	60bb      	str	r3, [r7, #8]
        break;
 8006980:	e015      	b.n	80069ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006982:	f7fe ffb7 	bl	80058f4 <LL_RCC_HSE_IsEnabledDiv2>
 8006986:	4603      	mov	r3, r0
 8006988:	2b01      	cmp	r3, #1
 800698a:	d102      	bne.n	8006992 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800698c:	4b16      	ldr	r3, [pc, #88]	@ (80069e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800698e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006990:	e00d      	b.n	80069ae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006992:	4b16      	ldr	r3, [pc, #88]	@ (80069ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8006994:	60bb      	str	r3, [r7, #8]
        break;
 8006996:	e00a      	b.n	80069ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006998:	f7ff f97f 	bl	8005c9a <LL_RCC_MSI_GetRange>
 800699c:	4603      	mov	r3, r0
 800699e:	091b      	lsrs	r3, r3, #4
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	4a0f      	ldr	r2, [pc, #60]	@ (80069e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80069a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069aa:	60bb      	str	r3, [r7, #8]
        break;
 80069ac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80069ae:	f7ff fa71 	bl	8005e94 <LL_RCC_PLL_GetN>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	fb03 f402 	mul.w	r4, r3, r2
 80069ba:	f7ff fa84 	bl	8005ec6 <LL_RCC_PLL_GetDivider>
 80069be:	4603      	mov	r3, r0
 80069c0:	091b      	lsrs	r3, r3, #4
 80069c2:	3301      	adds	r3, #1
 80069c4:	fbb4 f4f3 	udiv	r4, r4, r3
 80069c8:	f7ff fa71 	bl	8005eae <LL_RCC_PLL_GetR>
 80069cc:	4603      	mov	r3, r0
 80069ce:	0f5b      	lsrs	r3, r3, #29
 80069d0:	3301      	adds	r3, #1
 80069d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80069d6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80069d8:	68fb      	ldr	r3, [r7, #12]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd90      	pop	{r4, r7, pc}
 80069e2:	bf00      	nop
 80069e4:	0800a260 	.word	0x0800a260
 80069e8:	00f42400 	.word	0x00f42400
 80069ec:	01e84800 	.word	0x01e84800

080069f0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069f0:	b598      	push	{r3, r4, r7, lr}
 80069f2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80069f4:	f7ff ff90 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 80069f8:	4604      	mov	r4, r0
 80069fa:	f7ff fa01 	bl	8005e00 <LL_RCC_GetAHBPrescaler>
 80069fe:	4603      	mov	r3, r0
 8006a00:	091b      	lsrs	r3, r3, #4
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	4a03      	ldr	r2, [pc, #12]	@ (8006a14 <HAL_RCC_GetHCLKFreq+0x24>)
 8006a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a0c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	bd98      	pop	{r3, r4, r7, pc}
 8006a14:	0800a220 	.word	0x0800a220

08006a18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006a18:	b590      	push	{r4, r7, lr}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2bb0      	cmp	r3, #176	@ 0xb0
 8006a24:	d903      	bls.n	8006a2e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006a26:	4b15      	ldr	r3, [pc, #84]	@ (8006a7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	e007      	b.n	8006a3e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	091b      	lsrs	r3, r3, #4
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	4a11      	ldr	r2, [pc, #68]	@ (8006a7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a3c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006a3e:	f7ff f9eb 	bl	8005e18 <LL_RCC_GetAHB4Prescaler>
 8006a42:	4603      	mov	r3, r0
 8006a44:	091b      	lsrs	r3, r3, #4
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8006a80 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a56:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a84 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a60:	0c9c      	lsrs	r4, r3, #18
 8006a62:	f7fe ff39 	bl	80058d8 <HAL_PWREx_GetVoltageRange>
 8006a66:	4603      	mov	r3, r0
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 f80c 	bl	8006a88 <RCC_SetFlashLatency>
 8006a70:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd90      	pop	{r4, r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	0800a260 	.word	0x0800a260
 8006a80:	0800a220 	.word	0x0800a220
 8006a84:	431bde83 	.word	0x431bde83

08006a88 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006a88:	b590      	push	{r4, r7, lr}
 8006a8a:	b093      	sub	sp, #76	@ 0x4c
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006a92:	4b37      	ldr	r3, [pc, #220]	@ (8006b70 <RCC_SetFlashLatency+0xe8>)
 8006a94:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006a98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006a9e:	4a35      	ldr	r2, [pc, #212]	@ (8006b74 <RCC_SetFlashLatency+0xec>)
 8006aa0:	f107 031c 	add.w	r3, r7, #28
 8006aa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8006aa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006aaa:	4b33      	ldr	r3, [pc, #204]	@ (8006b78 <RCC_SetFlashLatency+0xf0>)
 8006aac:	f107 040c 	add.w	r4, r7, #12
 8006ab0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ab2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac0:	d11a      	bne.n	8006af8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ac6:	e013      	b.n	8006af0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	3348      	adds	r3, #72	@ 0x48
 8006ace:	443b      	add	r3, r7
 8006ad0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d807      	bhi.n	8006aea <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	3348      	adds	r3, #72	@ 0x48
 8006ae0:	443b      	add	r3, r7
 8006ae2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006ae6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006ae8:	e020      	b.n	8006b2c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aec:	3301      	adds	r3, #1
 8006aee:	643b      	str	r3, [r7, #64]	@ 0x40
 8006af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d9e8      	bls.n	8006ac8 <RCC_SetFlashLatency+0x40>
 8006af6:	e019      	b.n	8006b2c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006af8:	2300      	movs	r3, #0
 8006afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006afc:	e013      	b.n	8006b26 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	3348      	adds	r3, #72	@ 0x48
 8006b04:	443b      	add	r3, r7
 8006b06:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d807      	bhi.n	8006b20 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	3348      	adds	r3, #72	@ 0x48
 8006b16:	443b      	add	r3, r7
 8006b18:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006b1c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006b1e:	e005      	b.n	8006b2c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b22:	3301      	adds	r3, #1
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d9e8      	bls.n	8006afe <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006b2c:	4b13      	ldr	r3, [pc, #76]	@ (8006b7c <RCC_SetFlashLatency+0xf4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f023 0207 	bic.w	r2, r3, #7
 8006b34:	4911      	ldr	r1, [pc, #68]	@ (8006b7c <RCC_SetFlashLatency+0xf4>)
 8006b36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b3c:	f7fb ffcc 	bl	8002ad8 <HAL_GetTick>
 8006b40:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006b42:	e008      	b.n	8006b56 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006b44:	f7fb ffc8 	bl	8002ad8 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e007      	b.n	8006b66 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006b56:	4b09      	ldr	r3, [pc, #36]	@ (8006b7c <RCC_SetFlashLatency+0xf4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d1ef      	bne.n	8006b44 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	374c      	adds	r7, #76	@ 0x4c
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd90      	pop	{r4, r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	0800a1f4 	.word	0x0800a1f4
 8006b74:	0800a204 	.word	0x0800a204
 8006b78:	0800a210 	.word	0x0800a210
 8006b7c:	58004000 	.word	0x58004000

08006b80 <LL_RCC_LSE_IsEnabled>:
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <LL_RCC_LSE_IsEnabled+0x18>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <LL_RCC_LSE_IsEnabled+0x1a>
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <LL_RCC_LSE_IsReady>:
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d101      	bne.n	8006bbc <LL_RCC_LSE_IsReady+0x18>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <LL_RCC_LSE_IsReady+0x1a>
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <LL_RCC_SetRFWKPClockSource>:
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006bdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <LL_RCC_SetSMPSClockSource>:
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c02:	f023 0203 	bic.w	r2, r3, #3
 8006c06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <LL_RCC_SetSMPSPrescaler>:
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006c2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <LL_RCC_SetUSARTClockSource>:
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c54:	f023 0203 	bic.w	r2, r3, #3
 8006c58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <LL_RCC_SetLPUARTClockSource>:
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <LL_RCC_SetI2CClockSource>:
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ca8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	091b      	lsrs	r3, r3, #4
 8006cb0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006cb4:	43db      	mvns	r3, r3
 8006cb6:	401a      	ands	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006cc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <LL_RCC_SetLPTIMClockSource>:
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	041b      	lsls	r3, r3, #16
 8006cec:	43db      	mvns	r3, r3
 8006cee:	401a      	ands	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	041b      	lsls	r3, r3, #16
 8006cf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <LL_RCC_SetSAIClockSource>:
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006d1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <LL_RCC_SetRNGClockSource>:
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d46:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006d4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <LL_RCC_SetCLK48ClockSource>:
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <LL_RCC_SetUSBClockSource>:
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff ffe3 	bl	8006d62 <LL_RCC_SetCLK48ClockSource>
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <LL_RCC_SetADCClockSource>:
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006db8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <LL_RCC_SetRTCClockSource>:
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006de4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <LL_RCC_GetRTCClockSource>:
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <LL_RCC_ForceBackupDomainReset>:
{
 8006e16:	b480      	push	{r7}
 8006e18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006e2e:	bf00      	nop
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006e50:	bf00      	nop
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <LL_RCC_PLLSAI1_Enable>:
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e6c:	6013      	str	r3, [r2, #0]
}
 8006e6e:	bf00      	nop
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <LL_RCC_PLLSAI1_Disable>:
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e8a:	6013      	str	r3, [r2, #0]
}
 8006e8c:	bf00      	nop
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <LL_RCC_PLLSAI1_IsReady>:
{
 8006e96:	b480      	push	{r7}
 8006e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ea4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ea8:	d101      	bne.n	8006eae <LL_RCC_PLLSAI1_IsReady+0x18>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b088      	sub	sp, #32
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d034      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eda:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ede:	d021      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006ee0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ee4:	d81b      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ee6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006eea:	d01d      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006eec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ef0:	d815      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00b      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006ef6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006efa:	d110      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f0a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006f0c:	e00d      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3304      	adds	r3, #4
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f947 	bl	80071a6 <RCCEx_PLLSAI1_ConfigNP>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006f1c:	e005      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	77fb      	strb	r3, [r7, #31]
        break;
 8006f22:	e002      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006f24:	bf00      	nop
 8006f26:	e000      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2a:	7ffb      	ldrb	r3, [r7, #31]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d105      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff fee8 	bl	8006d0a <LL_RCC_SetSAIClockSource>
 8006f3a:	e001      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3c:	7ffb      	ldrb	r3, [r7, #31]
 8006f3e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d046      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006f4c:	f7ff ff56 	bl	8006dfc <LL_RCC_GetRTCClockSource>
 8006f50:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d03c      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006f5c:	f7fe fc5a 	bl	8005814 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d105      	bne.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff ff30 	bl	8006dd0 <LL_RCC_SetRTCClockSource>
 8006f70:	e02e      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f7a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006f7c:	f7ff ff4b 	bl	8006e16 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006f80:	f7ff ff5a 	bl	8006e38 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006f92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006f9c:	f7ff fdf0 	bl	8006b80 <LL_RCC_LSE_IsEnabled>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d114      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006fa6:	f7fb fd97 	bl	8002ad8 <HAL_GetTick>
 8006faa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006fac:	e00b      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fae:	f7fb fd93 	bl	8002ad8 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d902      	bls.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	77fb      	strb	r3, [r7, #31]
              break;
 8006fc4:	e004      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006fc6:	f7ff fded 	bl	8006ba4 <LL_RCC_LSE_IsReady>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d1ee      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006fd0:	7ffb      	ldrb	r3, [r7, #31]
 8006fd2:	77bb      	strb	r3, [r7, #30]
 8006fd4:	e001      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd6:	7ffb      	ldrb	r3, [r7, #31]
 8006fd8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d004      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff fe2a 	bl	8006c44 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff fe35 	bl	8006c70 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0310 	and.w	r3, r3, #16
 800700e:	2b00      	cmp	r3, #0
 8007010:	d004      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff fe5d 	bl	8006cd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d004      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff fe52 	bl	8006cd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d004      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff fe2a 	bl	8006c9c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0308 	and.w	r3, r3, #8
 8007050:	2b00      	cmp	r3, #0
 8007052:	d004      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff fe1f 	bl	8006c9c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007066:	2b00      	cmp	r3, #0
 8007068:	d022      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff fe8d 	bl	8006d8e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007078:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800707c:	d107      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800707e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007088:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800708c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007092:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007096:	d10b      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3304      	adds	r3, #4
 800709c:	4618      	mov	r0, r3
 800709e:	f000 f8dd 	bl	800725c <RCCEx_PLLSAI1_ConfigNQ>
 80070a2:	4603      	mov	r3, r0
 80070a4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80070a6:	7ffb      	ldrb	r3, [r7, #31]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80070ac:	7ffb      	ldrb	r3, [r7, #31]
 80070ae:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d02b      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c4:	d008      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070ce:	d003      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d105      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff fe2a 	bl	8006d36 <LL_RCC_SetRNGClockSource>
 80070e2:	e00a      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x240>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	2000      	movs	r0, #0
 80070f0:	f7ff fe21 	bl	8006d36 <LL_RCC_SetRNGClockSource>
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f7ff fe34 	bl	8006d62 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fe:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007102:	d107      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800710e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007112:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800711c:	2b00      	cmp	r3, #0
 800711e:	d022      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fe3d 	bl	8006da4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007132:	d107      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800713e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007142:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007148:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800714c:	d10b      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3304      	adds	r3, #4
 8007152:	4618      	mov	r0, r3
 8007154:	f000 f8dd 	bl	8007312 <RCCEx_PLLSAI1_ConfigNR>
 8007158:	4603      	mov	r3, r0
 800715a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800715c:	7ffb      	ldrb	r3, [r7, #31]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007162:	7ffb      	ldrb	r3, [r7, #31]
 8007164:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007176:	4618      	mov	r0, r3
 8007178:	f7ff fd26 	bl	8006bc8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d009      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff fd45 	bl	8006c1c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff fd2c 	bl	8006bf4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800719c:	7fbb      	ldrb	r3, [r7, #30]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3720      	adds	r7, #32
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80071b2:	f7ff fe61 	bl	8006e78 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071b6:	f7fb fc8f 	bl	8002ad8 <HAL_GetTick>
 80071ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071bc:	e009      	b.n	80071d2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071be:	f7fb fc8b 	bl	8002ad8 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d902      	bls.n	80071d2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	73fb      	strb	r3, [r7, #15]
      break;
 80071d0:	e004      	b.n	80071dc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071d2:	f7ff fe60 	bl	8006e96 <LL_RCC_PLLSAI1_IsReady>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1f0      	bne.n	80071be <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d137      	bne.n	8007252 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80071e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	021b      	lsls	r3, r3, #8
 80071f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071f6:	4313      	orrs	r3, r2
 80071f8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80071fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800720c:	4313      	orrs	r3, r2
 800720e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007210:	f7ff fe23 	bl	8006e5a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007214:	f7fb fc60 	bl	8002ad8 <HAL_GetTick>
 8007218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800721a:	e009      	b.n	8007230 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800721c:	f7fb fc5c 	bl	8002ad8 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d902      	bls.n	8007230 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	73fb      	strb	r3, [r7, #15]
        break;
 800722e:	e004      	b.n	800723a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007230:	f7ff fe31 	bl	8006e96 <LL_RCC_PLLSAI1_IsReady>
 8007234:	4603      	mov	r3, r0
 8007236:	2b01      	cmp	r3, #1
 8007238:	d1f0      	bne.n	800721c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d108      	bne.n	8007252 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800724e:	4313      	orrs	r3, r2
 8007250:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007252:	7bfb      	ldrb	r3, [r7, #15]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007268:	f7ff fe06 	bl	8006e78 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800726c:	f7fb fc34 	bl	8002ad8 <HAL_GetTick>
 8007270:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007272:	e009      	b.n	8007288 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007274:	f7fb fc30 	bl	8002ad8 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d902      	bls.n	8007288 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	73fb      	strb	r3, [r7, #15]
      break;
 8007286:	e004      	b.n	8007292 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007288:	f7ff fe05 	bl	8006e96 <LL_RCC_PLLSAI1_IsReady>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f0      	bne.n	8007274 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d137      	bne.n	8007308 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072ac:	4313      	orrs	r3, r2
 80072ae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80072b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072c2:	4313      	orrs	r3, r2
 80072c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80072c6:	f7ff fdc8 	bl	8006e5a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ca:	f7fb fc05 	bl	8002ad8 <HAL_GetTick>
 80072ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072d0:	e009      	b.n	80072e6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072d2:	f7fb fc01 	bl	8002ad8 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d902      	bls.n	80072e6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	73fb      	strb	r3, [r7, #15]
        break;
 80072e4:	e004      	b.n	80072f0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072e6:	f7ff fdd6 	bl	8006e96 <LL_RCC_PLLSAI1_IsReady>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d1f0      	bne.n	80072d2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d108      	bne.n	8007308 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80072f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007304:	4313      	orrs	r3, r2
 8007306:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800731e:	f7ff fdab 	bl	8006e78 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007322:	f7fb fbd9 	bl	8002ad8 <HAL_GetTick>
 8007326:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007328:	e009      	b.n	800733e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800732a:	f7fb fbd5 	bl	8002ad8 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d902      	bls.n	800733e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	73fb      	strb	r3, [r7, #15]
      break;
 800733c:	e004      	b.n	8007348 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800733e:	f7ff fdaa 	bl	8006e96 <LL_RCC_PLLSAI1_IsReady>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f0      	bne.n	800732a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d137      	bne.n	80073be <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800734e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007362:	4313      	orrs	r3, r2
 8007364:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007378:	4313      	orrs	r3, r2
 800737a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800737c:	f7ff fd6d 	bl	8006e5a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007380:	f7fb fbaa 	bl	8002ad8 <HAL_GetTick>
 8007384:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007386:	e009      	b.n	800739c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007388:	f7fb fba6 	bl	8002ad8 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d902      	bls.n	800739c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	73fb      	strb	r3, [r7, #15]
        break;
 800739a:	e004      	b.n	80073a6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800739c:	f7ff fd7b 	bl	8006e96 <LL_RCC_PLLSAI1_IsReady>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d1f0      	bne.n	8007388 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d108      	bne.n	80073be <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80073ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073ba:	4313      	orrs	r3, r2
 80073bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e07a      	b.n	80074d4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d106      	bne.n	80073f8 <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7fa fad0 	bl	8001998 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b10      	cmp	r3, #16
 800740c:	d058      	beq.n	80074c0 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	22ca      	movs	r2, #202	@ 0xca
 8007414:	625a      	str	r2, [r3, #36]	@ 0x24
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2253      	movs	r2, #83	@ 0x53
 800741c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f882 	bl	8007528 <RTC_EnterInitMode>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d12c      	bne.n	8007488 <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800743c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007440:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6899      	ldr	r1, [r3, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	68d2      	ldr	r2, [r2, #12]
 8007468:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6919      	ldr	r1, [r3, #16]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	041a      	lsls	r2, r3, #16
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f88a 	bl	8007598 <RTC_ExitInitMode>
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d113      	bne.n	80074b6 <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0203 	bic.w	r2, r2, #3
 800749c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	22ff      	movs	r2, #255	@ 0xff
 80074bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80074be:	e001      	b.n	80074c4 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d103      	bne.n	80074d2 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007524 <HAL_RTC_WaitForSynchro+0x48>)
 80074ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074f0:	f7fb faf2 	bl	8002ad8 <HAL_GetTick>
 80074f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80074f6:	e009      	b.n	800750c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074f8:	f7fb faee 	bl	8002ad8 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007506:	d901      	bls.n	800750c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e007      	b.n	800751c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0ee      	beq.n	80074f8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	0001ff5f 	.word	0x0001ff5f

08007528 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d123      	bne.n	800758e <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007554:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007556:	f7fb fabf 	bl	8002ad8 <HAL_GetTick>
 800755a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800755c:	e00d      	b.n	800757a <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800755e:	f7fb fabb 	bl	8002ad8 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800756c:	d905      	bls.n	800757a <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2204      	movs	r2, #4
 8007572:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <RTC_EnterInitMode+0x66>
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d1e7      	bne.n	800755e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075b2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10b      	bne.n	80075da <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff ff8a 	bl	80074dc <HAL_RTC_WaitForSynchro>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2204      	movs	r2, #4
 80075d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80075f0:	4b5f      	ldr	r3, [pc, #380]	@ (8007770 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a5f      	ldr	r2, [pc, #380]	@ (8007774 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80075f6:	fba2 2303 	umull	r2, r3, r2, r3
 80075fa:	0adb      	lsrs	r3, r3, #11
 80075fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007600:	fb02 f303 	mul.w	r3, r2, r3
 8007604:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 8007610:	2302      	movs	r3, #2
 8007612:	e0a7      	b.n	8007764 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	22ca      	movs	r2, #202	@ 0xca
 800762a:	625a      	str	r2, [r3, #36]	@ 0x24
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2253      	movs	r2, #83	@ 0x53
 8007632:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800763e:	2b00      	cmp	r3, #0
 8007640:	d01a      	beq.n	8007678 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	3b01      	subs	r3, #1
 8007646:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10d      	bne.n	800766a <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	22ff      	movs	r2, #255	@ 0xff
 8007654:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2203      	movs	r2, #3
 800765a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e07c      	b.n	8007764 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e4      	bne.n	8007642 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007686:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	b2da      	uxtb	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007698:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800769a:	4b35      	ldr	r3, [pc, #212]	@ (8007770 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a35      	ldr	r2, [pc, #212]	@ (8007774 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80076a0:	fba2 2303 	umull	r2, r3, r2, r3
 80076a4:	0adb      	lsrs	r3, r3, #11
 80076a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
 80076ae:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10d      	bne.n	80076d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	22ff      	movs	r2, #255	@ 0xff
 80076c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2203      	movs	r2, #3
 80076c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e045      	b.n	8007764 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f003 0304 	and.w	r3, r3, #4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0e4      	beq.n	80076b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0207 	bic.w	r2, r2, #7
 80076f4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6899      	ldr	r1, [r3, #8]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	430a      	orrs	r2, r1
 8007704:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800770e:	4b1a      	ldr	r3, [pc, #104]	@ (8007778 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8007710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007714:	4a18      	ldr	r2, [pc, #96]	@ (8007778 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8007716:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800771a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800771e:	4b16      	ldr	r3, [pc, #88]	@ (8007778 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a15      	ldr	r2, [pc, #84]	@ (8007778 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8007724:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007728:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007738:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007748:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	22ff      	movs	r2, #255	@ 0xff
 8007750:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	2000001c 	.word	0x2000001c
 8007774:	10624dd3 	.word	0x10624dd3
 8007778:	58000800 	.word	0x58000800

0800777c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007784:	4b0f      	ldr	r3, [pc, #60]	@ (80077c4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8007786:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800778a:	60da      	str	r2, [r3, #12]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00b      	beq.n	80077b2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80077aa:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f80b 	bl	80077c8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	58000800 	.word	0x58000800

080077c8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e095      	b.n	800791a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d108      	bne.n	8007808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077fe:	d009      	beq.n	8007814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	61da      	str	r2, [r3, #28]
 8007806:	e005      	b.n	8007814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fa f958 	bl	8001ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800784a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007854:	d902      	bls.n	800785c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	e002      	b.n	8007862 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800785c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007860:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800786a:	d007      	beq.n	800787c <HAL_SPI_Init+0xa0>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007874:	d002      	beq.n	800787c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	69db      	ldr	r3, [r3, #28]
 80078b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078be:	ea42 0103 	orr.w	r1, r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	0c1b      	lsrs	r3, r3, #16
 80078d8:	f003 0204 	and.w	r2, r3, #4
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	431a      	orrs	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ea:	f003 0308 	and.w	r3, r3, #8
 80078ee:	431a      	orrs	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80078f8:	ea42 0103 	orr.w	r1, r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b088      	sub	sp, #32
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	603b      	str	r3, [r7, #0]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007932:	f7fb f8d1 	bl	8002ad8 <HAL_GetTick>
 8007936:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007938:	88fb      	ldrh	r3, [r7, #6]
 800793a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b01      	cmp	r3, #1
 8007946:	d001      	beq.n	800794c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007948:	2302      	movs	r3, #2
 800794a:	e15c      	b.n	8007c06 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <HAL_SPI_Transmit+0x36>
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e154      	b.n	8007c06 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_SPI_Transmit+0x48>
 8007966:	2302      	movs	r3, #2
 8007968:	e14d      	b.n	8007c06 <HAL_SPI_Transmit+0x2e4>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2203      	movs	r2, #3
 8007976:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	88fa      	ldrh	r2, [r7, #6]
 800798a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079bc:	d10f      	bne.n	80079de <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e8:	2b40      	cmp	r3, #64	@ 0x40
 80079ea:	d007      	beq.n	80079fc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a04:	d952      	bls.n	8007aac <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <HAL_SPI_Transmit+0xf2>
 8007a0e:	8b7b      	ldrh	r3, [r7, #26]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d145      	bne.n	8007aa0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a18:	881a      	ldrh	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a24:	1c9a      	adds	r2, r3, #2
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	3b01      	subs	r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a38:	e032      	b.n	8007aa0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d112      	bne.n	8007a6e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4c:	881a      	ldrh	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a58:	1c9a      	adds	r2, r3, #2
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a6c:	e018      	b.n	8007aa0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a6e:	f7fb f833 	bl	8002ad8 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d803      	bhi.n	8007a86 <HAL_SPI_Transmit+0x164>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a84:	d102      	bne.n	8007a8c <HAL_SPI_Transmit+0x16a>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e0b2      	b.n	8007c06 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1c7      	bne.n	8007a3a <HAL_SPI_Transmit+0x118>
 8007aaa:	e083      	b.n	8007bb4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <HAL_SPI_Transmit+0x198>
 8007ab4:	8b7b      	ldrh	r3, [r7, #26]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d177      	bne.n	8007baa <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d912      	bls.n	8007aea <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac8:	881a      	ldrh	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad4:	1c9a      	adds	r2, r3, #2
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3b02      	subs	r3, #2
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ae8:	e05f      	b.n	8007baa <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	330c      	adds	r3, #12
 8007af4:	7812      	ldrb	r2, [r2, #0]
 8007af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b10:	e04b      	b.n	8007baa <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d12b      	bne.n	8007b78 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d912      	bls.n	8007b50 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2e:	881a      	ldrh	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3a:	1c9a      	adds	r2, r3, #2
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b02      	subs	r3, #2
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b4e:	e02c      	b.n	8007baa <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	7812      	ldrb	r2, [r2, #0]
 8007b5c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b76:	e018      	b.n	8007baa <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b78:	f7fa ffae 	bl	8002ad8 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d803      	bhi.n	8007b90 <HAL_SPI_Transmit+0x26e>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b8e:	d102      	bne.n	8007b96 <HAL_SPI_Transmit+0x274>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d109      	bne.n	8007baa <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e02d      	b.n	8007c06 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1ae      	bne.n	8007b12 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 fa67 	bl	800808c <SPI_EndRxTxTransaction>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	617b      	str	r3, [r7, #20]
 8007be6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e000      	b.n	8007c06 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007c04:	2300      	movs	r3, #0
  }
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3720      	adds	r7, #32
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	099b      	lsrs	r3, r3, #6
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10f      	bne.n	8007c54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	099b      	lsrs	r3, r3, #6
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d004      	beq.n	8007c54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
    return;
 8007c52:	e0d7      	b.n	8007e04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <HAL_SPI_IRQHandler+0x66>
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	09db      	lsrs	r3, r3, #7
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d004      	beq.n	8007c76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
    return;
 8007c74:	e0c6      	b.n	8007e04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	095b      	lsrs	r3, r3, #5
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10c      	bne.n	8007c9c <HAL_SPI_IRQHandler+0x8c>
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	099b      	lsrs	r3, r3, #6
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	0a1b      	lsrs	r3, r3, #8
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 80b4 	beq.w	8007e04 <HAL_SPI_IRQHandler+0x1f4>
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 80ad 	beq.w	8007e04 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	099b      	lsrs	r3, r3, #6
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d023      	beq.n	8007cfe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d011      	beq.n	8007ce6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cc6:	f043 0204 	orr.w	r2, r3, #4
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cce:	2300      	movs	r3, #0
 8007cd0:	617b      	str	r3, [r7, #20]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	e00b      	b.n	8007cfe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	613b      	str	r3, [r7, #16]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	613b      	str	r3, [r7, #16]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	613b      	str	r3, [r7, #16]
 8007cfa:	693b      	ldr	r3, [r7, #16]
        return;
 8007cfc:	e082      	b.n	8007e04 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d014      	beq.n	8007d34 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d0e:	f043 0201 	orr.w	r2, r3, #1
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	60fb      	str	r3, [r7, #12]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	0a1b      	lsrs	r3, r3, #8
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00c      	beq.n	8007d5a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d44:	f043 0208 	orr.w	r2, r3, #8
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60bb      	str	r3, [r7, #8]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	60bb      	str	r3, [r7, #8]
 8007d58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d04f      	beq.n	8007e02 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	f003 0302 	and.w	r3, r3, #2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d104      	bne.n	8007d8e <HAL_SPI_IRQHandler+0x17e>
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d034      	beq.n	8007df8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0203 	bic.w	r2, r2, #3
 8007d9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d011      	beq.n	8007dca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007daa:	4a18      	ldr	r2, [pc, #96]	@ (8007e0c <HAL_SPI_IRQHandler+0x1fc>)
 8007dac:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fc fa64 	bl	8004280 <HAL_DMA_Abort_IT>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d005      	beq.n	8007dca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d016      	beq.n	8007e00 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8007e0c <HAL_SPI_IRQHandler+0x1fc>)
 8007dd8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fc fa4e 	bl	8004280 <HAL_DMA_Abort_IT>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007df6:	e003      	b.n	8007e00 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f809 	bl	8007e10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007dfe:	e000      	b.n	8007e02 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007e00:	bf00      	nop
    return;
 8007e02:	bf00      	nop
  }
}
 8007e04:	3720      	adds	r7, #32
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	08007e25 	.word	0x08007e25

08007e10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7ff ffe5 	bl	8007e10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e60:	f7fa fe3a 	bl	8002ad8 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e68:	1a9b      	subs	r3, r3, r2
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e70:	f7fa fe32 	bl	8002ad8 <HAL_GetTick>
 8007e74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e76:	4b39      	ldr	r3, [pc, #228]	@ (8007f5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	015b      	lsls	r3, r3, #5
 8007e7c:	0d1b      	lsrs	r3, r3, #20
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	fb02 f303 	mul.w	r3, r2, r3
 8007e84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e86:	e054      	b.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e8e:	d050      	beq.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e90:	f7fa fe22 	bl	8002ad8 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	69fa      	ldr	r2, [r7, #28]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d902      	bls.n	8007ea6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d13d      	bne.n	8007f22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007eb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ebe:	d111      	bne.n	8007ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ec8:	d004      	beq.n	8007ed4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ed2:	d107      	bne.n	8007ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eec:	d10f      	bne.n	8007f0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e017      	b.n	8007f52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	bf0c      	ite	eq
 8007f42:	2301      	moveq	r3, #1
 8007f44:	2300      	movne	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d19b      	bne.n	8007e88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3720      	adds	r7, #32
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	2000001c 	.word	0x2000001c

08007f60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08a      	sub	sp, #40	@ 0x28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f72:	f7fa fdb1 	bl	8002ad8 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7a:	1a9b      	subs	r3, r3, r2
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	4413      	add	r3, r2
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007f82:	f7fa fda9 	bl	8002ad8 <HAL_GetTick>
 8007f86:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	330c      	adds	r3, #12
 8007f8e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f90:	4b3d      	ldr	r3, [pc, #244]	@ (8008088 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	00da      	lsls	r2, r3, #3
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	0d1b      	lsrs	r3, r3, #20
 8007fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa2:	fb02 f303 	mul.w	r3, r2, r3
 8007fa6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007fa8:	e060      	b.n	800806c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007fb0:	d107      	bne.n	8007fc2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d104      	bne.n	8007fc2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fc8:	d050      	beq.n	800806c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fca:	f7fa fd85 	bl	8002ad8 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d902      	bls.n	8007fe0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d13d      	bne.n	800805c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007fee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ff8:	d111      	bne.n	800801e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008002:	d004      	beq.n	800800e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800800c:	d107      	bne.n	800801e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800801c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008026:	d10f      	bne.n	8008048 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008046:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e010      	b.n	800807e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	3b01      	subs	r3, #1
 800806a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689a      	ldr	r2, [r3, #8]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	4013      	ands	r3, r2
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	429a      	cmp	r2, r3
 800807a:	d196      	bne.n	8007faa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3728      	adds	r7, #40	@ 0x28
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	2000001c 	.word	0x2000001c

0800808c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2200      	movs	r2, #0
 80080a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f7ff ff5b 	bl	8007f60 <SPI_WaitFifoStateUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d007      	beq.n	80080c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080b4:	f043 0220 	orr.w	r2, r3, #32
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e027      	b.n	8008110 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2200      	movs	r2, #0
 80080c8:	2180      	movs	r1, #128	@ 0x80
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7ff fec0 	bl	8007e50 <SPI_WaitFlagStateUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d007      	beq.n	80080e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080da:	f043 0220 	orr.w	r2, r3, #32
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e014      	b.n	8008110 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f7ff ff34 	bl	8007f60 <SPI_WaitFifoStateUntilTimeout>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d007      	beq.n	800810e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008102:	f043 0220 	orr.w	r2, r3, #32
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e000      	b.n	8008110 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e049      	b.n	80081be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7f9 ff70 	bl	8002024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3304      	adds	r3, #4
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f000 fa2e 	bl	80085b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d020      	beq.n	800822a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d01b      	beq.n	800822a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f06f 0202 	mvn.w	r2, #2
 80081fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f9b2 	bl	800857a <HAL_TIM_IC_CaptureCallback>
 8008216:	e005      	b.n	8008224 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f9a4 	bl	8008566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f9b5 	bl	800858e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d020      	beq.n	8008276 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f003 0304 	and.w	r3, r3, #4
 800823a:	2b00      	cmp	r3, #0
 800823c:	d01b      	beq.n	8008276 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f06f 0204 	mvn.w	r2, #4
 8008246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f98c 	bl	800857a <HAL_TIM_IC_CaptureCallback>
 8008262:	e005      	b.n	8008270 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f97e 	bl	8008566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f98f 	bl	800858e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	2b00      	cmp	r3, #0
 800827e:	d020      	beq.n	80082c2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01b      	beq.n	80082c2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f06f 0208 	mvn.w	r2, #8
 8008292:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2204      	movs	r2, #4
 8008298:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	f003 0303 	and.w	r3, r3, #3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f966 	bl	800857a <HAL_TIM_IC_CaptureCallback>
 80082ae:	e005      	b.n	80082bc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f958 	bl	8008566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f969 	bl	800858e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f003 0310 	and.w	r3, r3, #16
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d020      	beq.n	800830e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d01b      	beq.n	800830e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f06f 0210 	mvn.w	r2, #16
 80082de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2208      	movs	r2, #8
 80082e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f940 	bl	800857a <HAL_TIM_IC_CaptureCallback>
 80082fa:	e005      	b.n	8008308 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f932 	bl	8008566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f943 	bl	800858e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00c      	beq.n	8008332 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d007      	beq.n	8008332 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f06f 0201 	mvn.w	r2, #1
 800832a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7f9 fa71 	bl	8001814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008338:	2b00      	cmp	r3, #0
 800833a:	d104      	bne.n	8008346 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00c      	beq.n	8008360 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa9c 	bl	8008898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00c      	beq.n	8008384 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800837c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa94 	bl	80088ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00c      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	d007      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f8fd 	bl	80085a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00c      	beq.n	80083cc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f06f 0220 	mvn.w	r2, #32
 80083c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa5c 	bl	8008884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e0b6      	b.n	800855e <HAL_TIM_ConfigClockSource+0x18a>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800840e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800841a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800842c:	d03e      	beq.n	80084ac <HAL_TIM_ConfigClockSource+0xd8>
 800842e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008432:	f200 8087 	bhi.w	8008544 <HAL_TIM_ConfigClockSource+0x170>
 8008436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800843a:	f000 8086 	beq.w	800854a <HAL_TIM_ConfigClockSource+0x176>
 800843e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008442:	d87f      	bhi.n	8008544 <HAL_TIM_ConfigClockSource+0x170>
 8008444:	2b70      	cmp	r3, #112	@ 0x70
 8008446:	d01a      	beq.n	800847e <HAL_TIM_ConfigClockSource+0xaa>
 8008448:	2b70      	cmp	r3, #112	@ 0x70
 800844a:	d87b      	bhi.n	8008544 <HAL_TIM_ConfigClockSource+0x170>
 800844c:	2b60      	cmp	r3, #96	@ 0x60
 800844e:	d050      	beq.n	80084f2 <HAL_TIM_ConfigClockSource+0x11e>
 8008450:	2b60      	cmp	r3, #96	@ 0x60
 8008452:	d877      	bhi.n	8008544 <HAL_TIM_ConfigClockSource+0x170>
 8008454:	2b50      	cmp	r3, #80	@ 0x50
 8008456:	d03c      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0xfe>
 8008458:	2b50      	cmp	r3, #80	@ 0x50
 800845a:	d873      	bhi.n	8008544 <HAL_TIM_ConfigClockSource+0x170>
 800845c:	2b40      	cmp	r3, #64	@ 0x40
 800845e:	d058      	beq.n	8008512 <HAL_TIM_ConfigClockSource+0x13e>
 8008460:	2b40      	cmp	r3, #64	@ 0x40
 8008462:	d86f      	bhi.n	8008544 <HAL_TIM_ConfigClockSource+0x170>
 8008464:	2b30      	cmp	r3, #48	@ 0x30
 8008466:	d064      	beq.n	8008532 <HAL_TIM_ConfigClockSource+0x15e>
 8008468:	2b30      	cmp	r3, #48	@ 0x30
 800846a:	d86b      	bhi.n	8008544 <HAL_TIM_ConfigClockSource+0x170>
 800846c:	2b20      	cmp	r3, #32
 800846e:	d060      	beq.n	8008532 <HAL_TIM_ConfigClockSource+0x15e>
 8008470:	2b20      	cmp	r3, #32
 8008472:	d867      	bhi.n	8008544 <HAL_TIM_ConfigClockSource+0x170>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d05c      	beq.n	8008532 <HAL_TIM_ConfigClockSource+0x15e>
 8008478:	2b10      	cmp	r3, #16
 800847a:	d05a      	beq.n	8008532 <HAL_TIM_ConfigClockSource+0x15e>
 800847c:	e062      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800848e:	f000 f979 	bl	8008784 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	609a      	str	r2, [r3, #8]
      break;
 80084aa:	e04f      	b.n	800854c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084bc:	f000 f962 	bl	8008784 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689a      	ldr	r2, [r3, #8]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084ce:	609a      	str	r2, [r3, #8]
      break;
 80084d0:	e03c      	b.n	800854c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084de:	461a      	mov	r2, r3
 80084e0:	f000 f8d4 	bl	800868c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2150      	movs	r1, #80	@ 0x50
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f92d 	bl	800874a <TIM_ITRx_SetConfig>
      break;
 80084f0:	e02c      	b.n	800854c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084fe:	461a      	mov	r2, r3
 8008500:	f000 f8f3 	bl	80086ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2160      	movs	r1, #96	@ 0x60
 800850a:	4618      	mov	r0, r3
 800850c:	f000 f91d 	bl	800874a <TIM_ITRx_SetConfig>
      break;
 8008510:	e01c      	b.n	800854c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800851e:	461a      	mov	r2, r3
 8008520:	f000 f8b4 	bl	800868c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2140      	movs	r1, #64	@ 0x40
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f90d 	bl	800874a <TIM_ITRx_SetConfig>
      break;
 8008530:	e00c      	b.n	800854c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f000 f904 	bl	800874a <TIM_ITRx_SetConfig>
      break;
 8008542:	e003      	b.n	800854c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	73fb      	strb	r3, [r7, #15]
      break;
 8008548:	e000      	b.n	800854c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800854a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800855c:	7bfb      	ldrb	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
	...

080085b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a2d      	ldr	r2, [pc, #180]	@ (8008680 <TIM_Base_SetConfig+0xc8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d003      	beq.n	80085d8 <TIM_Base_SetConfig+0x20>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d6:	d108      	bne.n	80085ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a24      	ldr	r2, [pc, #144]	@ (8008680 <TIM_Base_SetConfig+0xc8>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00b      	beq.n	800860a <TIM_Base_SetConfig+0x52>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085f8:	d007      	beq.n	800860a <TIM_Base_SetConfig+0x52>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a21      	ldr	r2, [pc, #132]	@ (8008684 <TIM_Base_SetConfig+0xcc>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d003      	beq.n	800860a <TIM_Base_SetConfig+0x52>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a20      	ldr	r2, [pc, #128]	@ (8008688 <TIM_Base_SetConfig+0xd0>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d108      	bne.n	800861c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	4313      	orrs	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a10      	ldr	r2, [pc, #64]	@ (8008680 <TIM_Base_SetConfig+0xc8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d007      	beq.n	8008652 <TIM_Base_SetConfig+0x9a>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a0f      	ldr	r2, [pc, #60]	@ (8008684 <TIM_Base_SetConfig+0xcc>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d003      	beq.n	8008652 <TIM_Base_SetConfig+0x9a>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a0e      	ldr	r2, [pc, #56]	@ (8008688 <TIM_Base_SetConfig+0xd0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d103      	bne.n	800865a <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	691a      	ldr	r2, [r3, #16]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f043 0204 	orr.w	r2, r3, #4
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	601a      	str	r2, [r3, #0]
}
 8008672:	bf00      	nop
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	40012c00 	.word	0x40012c00
 8008684:	40014400 	.word	0x40014400
 8008688:	40014800 	.word	0x40014800

0800868c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	f023 0201 	bic.w	r2, r3, #1
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	4313      	orrs	r3, r2
 80086c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f023 030a 	bic.w	r3, r3, #10
 80086c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	621a      	str	r2, [r3, #32]
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b087      	sub	sp, #28
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	f023 0210 	bic.w	r2, r3, #16
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	031b      	lsls	r3, r3, #12
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008726:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	011b      	lsls	r3, r3, #4
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	4313      	orrs	r3, r2
 8008730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	621a      	str	r2, [r3, #32]
}
 800873e:	bf00      	nop
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800874a:	b480      	push	{r7}
 800874c:	b085      	sub	sp, #20
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	f043 0307 	orr.w	r3, r3, #7
 8008770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	609a      	str	r2, [r3, #8]
}
 8008778:	bf00      	nop
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800879e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	021a      	lsls	r2, r3, #8
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	431a      	orrs	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	609a      	str	r2, [r3, #8]
}
 80087b8:	bf00      	nop
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087d8:	2302      	movs	r3, #2
 80087da:	e04a      	b.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a1f      	ldr	r2, [pc, #124]	@ (8008880 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d108      	bne.n	8008818 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800880c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4313      	orrs	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800881e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a12      	ldr	r2, [pc, #72]	@ (8008880 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d004      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008844:	d10c      	bne.n	8008860 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800884c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	4313      	orrs	r3, r2
 8008856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40012c00 	.word	0x40012c00

08008884 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <sniprintf>:
 80088c0:	b40c      	push	{r2, r3}
 80088c2:	b530      	push	{r4, r5, lr}
 80088c4:	4b18      	ldr	r3, [pc, #96]	@ (8008928 <sniprintf+0x68>)
 80088c6:	1e0c      	subs	r4, r1, #0
 80088c8:	681d      	ldr	r5, [r3, #0]
 80088ca:	b09d      	sub	sp, #116	@ 0x74
 80088cc:	da08      	bge.n	80088e0 <sniprintf+0x20>
 80088ce:	238b      	movs	r3, #139	@ 0x8b
 80088d0:	602b      	str	r3, [r5, #0]
 80088d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088d6:	b01d      	add	sp, #116	@ 0x74
 80088d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088dc:	b002      	add	sp, #8
 80088de:	4770      	bx	lr
 80088e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80088e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80088e8:	f04f 0300 	mov.w	r3, #0
 80088ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 80088ee:	bf14      	ite	ne
 80088f0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80088f4:	4623      	moveq	r3, r4
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	9307      	str	r3, [sp, #28]
 80088fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80088fe:	9002      	str	r0, [sp, #8]
 8008900:	9006      	str	r0, [sp, #24]
 8008902:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008906:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008908:	ab21      	add	r3, sp, #132	@ 0x84
 800890a:	a902      	add	r1, sp, #8
 800890c:	4628      	mov	r0, r5
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	f000 f9ce 	bl	8008cb0 <_svfiprintf_r>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	bfbc      	itt	lt
 8008918:	238b      	movlt	r3, #139	@ 0x8b
 800891a:	602b      	strlt	r3, [r5, #0]
 800891c:	2c00      	cmp	r4, #0
 800891e:	d0da      	beq.n	80088d6 <sniprintf+0x16>
 8008920:	9b02      	ldr	r3, [sp, #8]
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e7d6      	b.n	80088d6 <sniprintf+0x16>
 8008928:	20000034 	.word	0x20000034

0800892c <std>:
 800892c:	2300      	movs	r3, #0
 800892e:	b510      	push	{r4, lr}
 8008930:	4604      	mov	r4, r0
 8008932:	e9c0 3300 	strd	r3, r3, [r0]
 8008936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800893a:	6083      	str	r3, [r0, #8]
 800893c:	8181      	strh	r1, [r0, #12]
 800893e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008940:	81c2      	strh	r2, [r0, #14]
 8008942:	6183      	str	r3, [r0, #24]
 8008944:	4619      	mov	r1, r3
 8008946:	2208      	movs	r2, #8
 8008948:	305c      	adds	r0, #92	@ 0x5c
 800894a:	f000 f921 	bl	8008b90 <memset>
 800894e:	4b0d      	ldr	r3, [pc, #52]	@ (8008984 <std+0x58>)
 8008950:	6263      	str	r3, [r4, #36]	@ 0x24
 8008952:	4b0d      	ldr	r3, [pc, #52]	@ (8008988 <std+0x5c>)
 8008954:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008956:	4b0d      	ldr	r3, [pc, #52]	@ (800898c <std+0x60>)
 8008958:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800895a:	4b0d      	ldr	r3, [pc, #52]	@ (8008990 <std+0x64>)
 800895c:	6323      	str	r3, [r4, #48]	@ 0x30
 800895e:	4b0d      	ldr	r3, [pc, #52]	@ (8008994 <std+0x68>)
 8008960:	6224      	str	r4, [r4, #32]
 8008962:	429c      	cmp	r4, r3
 8008964:	d006      	beq.n	8008974 <std+0x48>
 8008966:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800896a:	4294      	cmp	r4, r2
 800896c:	d002      	beq.n	8008974 <std+0x48>
 800896e:	33d0      	adds	r3, #208	@ 0xd0
 8008970:	429c      	cmp	r4, r3
 8008972:	d105      	bne.n	8008980 <std+0x54>
 8008974:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800897c:	f000 b93a 	b.w	8008bf4 <__retarget_lock_init_recursive>
 8008980:	bd10      	pop	{r4, pc}
 8008982:	bf00      	nop
 8008984:	080096f9 	.word	0x080096f9
 8008988:	0800971b 	.word	0x0800971b
 800898c:	08009753 	.word	0x08009753
 8008990:	08009777 	.word	0x08009777
 8008994:	20000378 	.word	0x20000378

08008998 <stdio_exit_handler>:
 8008998:	4a02      	ldr	r2, [pc, #8]	@ (80089a4 <stdio_exit_handler+0xc>)
 800899a:	4903      	ldr	r1, [pc, #12]	@ (80089a8 <stdio_exit_handler+0x10>)
 800899c:	4803      	ldr	r0, [pc, #12]	@ (80089ac <stdio_exit_handler+0x14>)
 800899e:	f000 b869 	b.w	8008a74 <_fwalk_sglue>
 80089a2:	bf00      	nop
 80089a4:	20000028 	.word	0x20000028
 80089a8:	08009691 	.word	0x08009691
 80089ac:	20000038 	.word	0x20000038

080089b0 <cleanup_stdio>:
 80089b0:	6841      	ldr	r1, [r0, #4]
 80089b2:	4b0c      	ldr	r3, [pc, #48]	@ (80089e4 <cleanup_stdio+0x34>)
 80089b4:	4299      	cmp	r1, r3
 80089b6:	b510      	push	{r4, lr}
 80089b8:	4604      	mov	r4, r0
 80089ba:	d001      	beq.n	80089c0 <cleanup_stdio+0x10>
 80089bc:	f000 fe68 	bl	8009690 <_fflush_r>
 80089c0:	68a1      	ldr	r1, [r4, #8]
 80089c2:	4b09      	ldr	r3, [pc, #36]	@ (80089e8 <cleanup_stdio+0x38>)
 80089c4:	4299      	cmp	r1, r3
 80089c6:	d002      	beq.n	80089ce <cleanup_stdio+0x1e>
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 fe61 	bl	8009690 <_fflush_r>
 80089ce:	68e1      	ldr	r1, [r4, #12]
 80089d0:	4b06      	ldr	r3, [pc, #24]	@ (80089ec <cleanup_stdio+0x3c>)
 80089d2:	4299      	cmp	r1, r3
 80089d4:	d004      	beq.n	80089e0 <cleanup_stdio+0x30>
 80089d6:	4620      	mov	r0, r4
 80089d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089dc:	f000 be58 	b.w	8009690 <_fflush_r>
 80089e0:	bd10      	pop	{r4, pc}
 80089e2:	bf00      	nop
 80089e4:	20000378 	.word	0x20000378
 80089e8:	200003e0 	.word	0x200003e0
 80089ec:	20000448 	.word	0x20000448

080089f0 <global_stdio_init.part.0>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008a20 <global_stdio_init.part.0+0x30>)
 80089f4:	4c0b      	ldr	r4, [pc, #44]	@ (8008a24 <global_stdio_init.part.0+0x34>)
 80089f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008a28 <global_stdio_init.part.0+0x38>)
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	4620      	mov	r0, r4
 80089fc:	2200      	movs	r2, #0
 80089fe:	2104      	movs	r1, #4
 8008a00:	f7ff ff94 	bl	800892c <std>
 8008a04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a08:	2201      	movs	r2, #1
 8008a0a:	2109      	movs	r1, #9
 8008a0c:	f7ff ff8e 	bl	800892c <std>
 8008a10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a14:	2202      	movs	r2, #2
 8008a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a1a:	2112      	movs	r1, #18
 8008a1c:	f7ff bf86 	b.w	800892c <std>
 8008a20:	200004b0 	.word	0x200004b0
 8008a24:	20000378 	.word	0x20000378
 8008a28:	08008999 	.word	0x08008999

08008a2c <__sfp_lock_acquire>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	@ (8008a34 <__sfp_lock_acquire+0x8>)
 8008a2e:	f000 b8e2 	b.w	8008bf6 <__retarget_lock_acquire_recursive>
 8008a32:	bf00      	nop
 8008a34:	200004b5 	.word	0x200004b5

08008a38 <__sfp_lock_release>:
 8008a38:	4801      	ldr	r0, [pc, #4]	@ (8008a40 <__sfp_lock_release+0x8>)
 8008a3a:	f000 b8dd 	b.w	8008bf8 <__retarget_lock_release_recursive>
 8008a3e:	bf00      	nop
 8008a40:	200004b5 	.word	0x200004b5

08008a44 <__sinit>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	4604      	mov	r4, r0
 8008a48:	f7ff fff0 	bl	8008a2c <__sfp_lock_acquire>
 8008a4c:	6a23      	ldr	r3, [r4, #32]
 8008a4e:	b11b      	cbz	r3, 8008a58 <__sinit+0x14>
 8008a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a54:	f7ff bff0 	b.w	8008a38 <__sfp_lock_release>
 8008a58:	4b04      	ldr	r3, [pc, #16]	@ (8008a6c <__sinit+0x28>)
 8008a5a:	6223      	str	r3, [r4, #32]
 8008a5c:	4b04      	ldr	r3, [pc, #16]	@ (8008a70 <__sinit+0x2c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1f5      	bne.n	8008a50 <__sinit+0xc>
 8008a64:	f7ff ffc4 	bl	80089f0 <global_stdio_init.part.0>
 8008a68:	e7f2      	b.n	8008a50 <__sinit+0xc>
 8008a6a:	bf00      	nop
 8008a6c:	080089b1 	.word	0x080089b1
 8008a70:	200004b0 	.word	0x200004b0

08008a74 <_fwalk_sglue>:
 8008a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a78:	4607      	mov	r7, r0
 8008a7a:	4688      	mov	r8, r1
 8008a7c:	4614      	mov	r4, r2
 8008a7e:	2600      	movs	r6, #0
 8008a80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a84:	f1b9 0901 	subs.w	r9, r9, #1
 8008a88:	d505      	bpl.n	8008a96 <_fwalk_sglue+0x22>
 8008a8a:	6824      	ldr	r4, [r4, #0]
 8008a8c:	2c00      	cmp	r4, #0
 8008a8e:	d1f7      	bne.n	8008a80 <_fwalk_sglue+0xc>
 8008a90:	4630      	mov	r0, r6
 8008a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d907      	bls.n	8008aac <_fwalk_sglue+0x38>
 8008a9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	d003      	beq.n	8008aac <_fwalk_sglue+0x38>
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	47c0      	blx	r8
 8008aaa:	4306      	orrs	r6, r0
 8008aac:	3568      	adds	r5, #104	@ 0x68
 8008aae:	e7e9      	b.n	8008a84 <_fwalk_sglue+0x10>

08008ab0 <iprintf>:
 8008ab0:	b40f      	push	{r0, r1, r2, r3}
 8008ab2:	b507      	push	{r0, r1, r2, lr}
 8008ab4:	4906      	ldr	r1, [pc, #24]	@ (8008ad0 <iprintf+0x20>)
 8008ab6:	ab04      	add	r3, sp, #16
 8008ab8:	6808      	ldr	r0, [r1, #0]
 8008aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008abe:	6881      	ldr	r1, [r0, #8]
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	f000 fa1b 	bl	8008efc <_vfiprintf_r>
 8008ac6:	b003      	add	sp, #12
 8008ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008acc:	b004      	add	sp, #16
 8008ace:	4770      	bx	lr
 8008ad0:	20000034 	.word	0x20000034

08008ad4 <_puts_r>:
 8008ad4:	6a03      	ldr	r3, [r0, #32]
 8008ad6:	b570      	push	{r4, r5, r6, lr}
 8008ad8:	6884      	ldr	r4, [r0, #8]
 8008ada:	4605      	mov	r5, r0
 8008adc:	460e      	mov	r6, r1
 8008ade:	b90b      	cbnz	r3, 8008ae4 <_puts_r+0x10>
 8008ae0:	f7ff ffb0 	bl	8008a44 <__sinit>
 8008ae4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ae6:	07db      	lsls	r3, r3, #31
 8008ae8:	d405      	bmi.n	8008af6 <_puts_r+0x22>
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	0598      	lsls	r0, r3, #22
 8008aee:	d402      	bmi.n	8008af6 <_puts_r+0x22>
 8008af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008af2:	f000 f880 	bl	8008bf6 <__retarget_lock_acquire_recursive>
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	0719      	lsls	r1, r3, #28
 8008afa:	d502      	bpl.n	8008b02 <_puts_r+0x2e>
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d135      	bne.n	8008b6e <_puts_r+0x9a>
 8008b02:	4621      	mov	r1, r4
 8008b04:	4628      	mov	r0, r5
 8008b06:	f000 fea7 	bl	8009858 <__swsetup_r>
 8008b0a:	b380      	cbz	r0, 8008b6e <_puts_r+0x9a>
 8008b0c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008b10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b12:	07da      	lsls	r2, r3, #31
 8008b14:	d405      	bmi.n	8008b22 <_puts_r+0x4e>
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	059b      	lsls	r3, r3, #22
 8008b1a:	d402      	bmi.n	8008b22 <_puts_r+0x4e>
 8008b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b1e:	f000 f86b 	bl	8008bf8 <__retarget_lock_release_recursive>
 8008b22:	4628      	mov	r0, r5
 8008b24:	bd70      	pop	{r4, r5, r6, pc}
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	da04      	bge.n	8008b34 <_puts_r+0x60>
 8008b2a:	69a2      	ldr	r2, [r4, #24]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	dc17      	bgt.n	8008b60 <_puts_r+0x8c>
 8008b30:	290a      	cmp	r1, #10
 8008b32:	d015      	beq.n	8008b60 <_puts_r+0x8c>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	6022      	str	r2, [r4, #0]
 8008b3a:	7019      	strb	r1, [r3, #0]
 8008b3c:	68a3      	ldr	r3, [r4, #8]
 8008b3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b42:	3b01      	subs	r3, #1
 8008b44:	60a3      	str	r3, [r4, #8]
 8008b46:	2900      	cmp	r1, #0
 8008b48:	d1ed      	bne.n	8008b26 <_puts_r+0x52>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	da11      	bge.n	8008b72 <_puts_r+0x9e>
 8008b4e:	4622      	mov	r2, r4
 8008b50:	210a      	movs	r1, #10
 8008b52:	4628      	mov	r0, r5
 8008b54:	f000 fe41 	bl	80097da <__swbuf_r>
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d0d7      	beq.n	8008b0c <_puts_r+0x38>
 8008b5c:	250a      	movs	r5, #10
 8008b5e:	e7d7      	b.n	8008b10 <_puts_r+0x3c>
 8008b60:	4622      	mov	r2, r4
 8008b62:	4628      	mov	r0, r5
 8008b64:	f000 fe39 	bl	80097da <__swbuf_r>
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d1e7      	bne.n	8008b3c <_puts_r+0x68>
 8008b6c:	e7ce      	b.n	8008b0c <_puts_r+0x38>
 8008b6e:	3e01      	subs	r6, #1
 8008b70:	e7e4      	b.n	8008b3c <_puts_r+0x68>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	6022      	str	r2, [r4, #0]
 8008b78:	220a      	movs	r2, #10
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	e7ee      	b.n	8008b5c <_puts_r+0x88>
	...

08008b80 <puts>:
 8008b80:	4b02      	ldr	r3, [pc, #8]	@ (8008b8c <puts+0xc>)
 8008b82:	4601      	mov	r1, r0
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	f7ff bfa5 	b.w	8008ad4 <_puts_r>
 8008b8a:	bf00      	nop
 8008b8c:	20000034 	.word	0x20000034

08008b90 <memset>:
 8008b90:	4402      	add	r2, r0
 8008b92:	4603      	mov	r3, r0
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d100      	bne.n	8008b9a <memset+0xa>
 8008b98:	4770      	bx	lr
 8008b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b9e:	e7f9      	b.n	8008b94 <memset+0x4>

08008ba0 <__errno>:
 8008ba0:	4b01      	ldr	r3, [pc, #4]	@ (8008ba8 <__errno+0x8>)
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	20000034 	.word	0x20000034

08008bac <__libc_init_array>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4d0d      	ldr	r5, [pc, #52]	@ (8008be4 <__libc_init_array+0x38>)
 8008bb0:	4c0d      	ldr	r4, [pc, #52]	@ (8008be8 <__libc_init_array+0x3c>)
 8008bb2:	1b64      	subs	r4, r4, r5
 8008bb4:	10a4      	asrs	r4, r4, #2
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	42a6      	cmp	r6, r4
 8008bba:	d109      	bne.n	8008bd0 <__libc_init_array+0x24>
 8008bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8008bec <__libc_init_array+0x40>)
 8008bbe:	4c0c      	ldr	r4, [pc, #48]	@ (8008bf0 <__libc_init_array+0x44>)
 8008bc0:	f000 fff4 	bl	8009bac <_init>
 8008bc4:	1b64      	subs	r4, r4, r5
 8008bc6:	10a4      	asrs	r4, r4, #2
 8008bc8:	2600      	movs	r6, #0
 8008bca:	42a6      	cmp	r6, r4
 8008bcc:	d105      	bne.n	8008bda <__libc_init_array+0x2e>
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd4:	4798      	blx	r3
 8008bd6:	3601      	adds	r6, #1
 8008bd8:	e7ee      	b.n	8008bb8 <__libc_init_array+0xc>
 8008bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bde:	4798      	blx	r3
 8008be0:	3601      	adds	r6, #1
 8008be2:	e7f2      	b.n	8008bca <__libc_init_array+0x1e>
 8008be4:	0800a2dc 	.word	0x0800a2dc
 8008be8:	0800a2dc 	.word	0x0800a2dc
 8008bec:	0800a2dc 	.word	0x0800a2dc
 8008bf0:	0800a2e4 	.word	0x0800a2e4

08008bf4 <__retarget_lock_init_recursive>:
 8008bf4:	4770      	bx	lr

08008bf6 <__retarget_lock_acquire_recursive>:
 8008bf6:	4770      	bx	lr

08008bf8 <__retarget_lock_release_recursive>:
 8008bf8:	4770      	bx	lr

08008bfa <__ssputs_r>:
 8008bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfe:	688e      	ldr	r6, [r1, #8]
 8008c00:	461f      	mov	r7, r3
 8008c02:	42be      	cmp	r6, r7
 8008c04:	680b      	ldr	r3, [r1, #0]
 8008c06:	4682      	mov	sl, r0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	4690      	mov	r8, r2
 8008c0c:	d82d      	bhi.n	8008c6a <__ssputs_r+0x70>
 8008c0e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c12:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c16:	d026      	beq.n	8008c66 <__ssputs_r+0x6c>
 8008c18:	6965      	ldr	r5, [r4, #20]
 8008c1a:	6909      	ldr	r1, [r1, #16]
 8008c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c20:	eba3 0901 	sub.w	r9, r3, r1
 8008c24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c28:	1c7b      	adds	r3, r7, #1
 8008c2a:	444b      	add	r3, r9
 8008c2c:	106d      	asrs	r5, r5, #1
 8008c2e:	429d      	cmp	r5, r3
 8008c30:	bf38      	it	cc
 8008c32:	461d      	movcc	r5, r3
 8008c34:	0553      	lsls	r3, r2, #21
 8008c36:	d527      	bpl.n	8008c88 <__ssputs_r+0x8e>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	f000 fa99 	bl	8009170 <_malloc_r>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	b360      	cbz	r0, 8008c9c <__ssputs_r+0xa2>
 8008c42:	6921      	ldr	r1, [r4, #16]
 8008c44:	464a      	mov	r2, r9
 8008c46:	f000 ff51 	bl	8009aec <memcpy>
 8008c4a:	89a3      	ldrh	r3, [r4, #12]
 8008c4c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	6126      	str	r6, [r4, #16]
 8008c58:	6165      	str	r5, [r4, #20]
 8008c5a:	444e      	add	r6, r9
 8008c5c:	eba5 0509 	sub.w	r5, r5, r9
 8008c60:	6026      	str	r6, [r4, #0]
 8008c62:	60a5      	str	r5, [r4, #8]
 8008c64:	463e      	mov	r6, r7
 8008c66:	42be      	cmp	r6, r7
 8008c68:	d900      	bls.n	8008c6c <__ssputs_r+0x72>
 8008c6a:	463e      	mov	r6, r7
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	4632      	mov	r2, r6
 8008c70:	4641      	mov	r1, r8
 8008c72:	f000 fea9 	bl	80099c8 <memmove>
 8008c76:	68a3      	ldr	r3, [r4, #8]
 8008c78:	1b9b      	subs	r3, r3, r6
 8008c7a:	60a3      	str	r3, [r4, #8]
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	4433      	add	r3, r6
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	2000      	movs	r0, #0
 8008c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c88:	462a      	mov	r2, r5
 8008c8a:	f000 fd78 	bl	800977e <_realloc_r>
 8008c8e:	4606      	mov	r6, r0
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d1e0      	bne.n	8008c56 <__ssputs_r+0x5c>
 8008c94:	6921      	ldr	r1, [r4, #16]
 8008c96:	4650      	mov	r0, sl
 8008c98:	f000 ff36 	bl	8009b08 <_free_r>
 8008c9c:	230c      	movs	r3, #12
 8008c9e:	f8ca 3000 	str.w	r3, [sl]
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ca8:	81a3      	strh	r3, [r4, #12]
 8008caa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cae:	e7e9      	b.n	8008c84 <__ssputs_r+0x8a>

08008cb0 <_svfiprintf_r>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	4698      	mov	r8, r3
 8008cb6:	898b      	ldrh	r3, [r1, #12]
 8008cb8:	061b      	lsls	r3, r3, #24
 8008cba:	b09d      	sub	sp, #116	@ 0x74
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	460d      	mov	r5, r1
 8008cc0:	4614      	mov	r4, r2
 8008cc2:	d510      	bpl.n	8008ce6 <_svfiprintf_r+0x36>
 8008cc4:	690b      	ldr	r3, [r1, #16]
 8008cc6:	b973      	cbnz	r3, 8008ce6 <_svfiprintf_r+0x36>
 8008cc8:	2140      	movs	r1, #64	@ 0x40
 8008cca:	f000 fa51 	bl	8009170 <_malloc_r>
 8008cce:	6028      	str	r0, [r5, #0]
 8008cd0:	6128      	str	r0, [r5, #16]
 8008cd2:	b930      	cbnz	r0, 8008ce2 <_svfiprintf_r+0x32>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cdc:	b01d      	add	sp, #116	@ 0x74
 8008cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce2:	2340      	movs	r3, #64	@ 0x40
 8008ce4:	616b      	str	r3, [r5, #20]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cea:	2320      	movs	r3, #32
 8008cec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cf4:	2330      	movs	r3, #48	@ 0x30
 8008cf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e94 <_svfiprintf_r+0x1e4>
 8008cfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cfe:	f04f 0901 	mov.w	r9, #1
 8008d02:	4623      	mov	r3, r4
 8008d04:	469a      	mov	sl, r3
 8008d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0a:	b10a      	cbz	r2, 8008d10 <_svfiprintf_r+0x60>
 8008d0c:	2a25      	cmp	r2, #37	@ 0x25
 8008d0e:	d1f9      	bne.n	8008d04 <_svfiprintf_r+0x54>
 8008d10:	ebba 0b04 	subs.w	fp, sl, r4
 8008d14:	d00b      	beq.n	8008d2e <_svfiprintf_r+0x7e>
 8008d16:	465b      	mov	r3, fp
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff ff6c 	bl	8008bfa <__ssputs_r>
 8008d22:	3001      	adds	r0, #1
 8008d24:	f000 80a7 	beq.w	8008e76 <_svfiprintf_r+0x1c6>
 8008d28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d2a:	445a      	add	r2, fp
 8008d2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 809f 	beq.w	8008e76 <_svfiprintf_r+0x1c6>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d42:	f10a 0a01 	add.w	sl, sl, #1
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d50:	4654      	mov	r4, sl
 8008d52:	2205      	movs	r2, #5
 8008d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d58:	484e      	ldr	r0, [pc, #312]	@ (8008e94 <_svfiprintf_r+0x1e4>)
 8008d5a:	f7f7 fa11 	bl	8000180 <memchr>
 8008d5e:	9a04      	ldr	r2, [sp, #16]
 8008d60:	b9d8      	cbnz	r0, 8008d9a <_svfiprintf_r+0xea>
 8008d62:	06d0      	lsls	r0, r2, #27
 8008d64:	bf44      	itt	mi
 8008d66:	2320      	movmi	r3, #32
 8008d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d6c:	0711      	lsls	r1, r2, #28
 8008d6e:	bf44      	itt	mi
 8008d70:	232b      	movmi	r3, #43	@ 0x2b
 8008d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d76:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d7c:	d015      	beq.n	8008daa <_svfiprintf_r+0xfa>
 8008d7e:	9a07      	ldr	r2, [sp, #28]
 8008d80:	4654      	mov	r4, sl
 8008d82:	2000      	movs	r0, #0
 8008d84:	f04f 0c0a 	mov.w	ip, #10
 8008d88:	4621      	mov	r1, r4
 8008d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d8e:	3b30      	subs	r3, #48	@ 0x30
 8008d90:	2b09      	cmp	r3, #9
 8008d92:	d94b      	bls.n	8008e2c <_svfiprintf_r+0x17c>
 8008d94:	b1b0      	cbz	r0, 8008dc4 <_svfiprintf_r+0x114>
 8008d96:	9207      	str	r2, [sp, #28]
 8008d98:	e014      	b.n	8008dc4 <_svfiprintf_r+0x114>
 8008d9a:	eba0 0308 	sub.w	r3, r0, r8
 8008d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8008da2:	4313      	orrs	r3, r2
 8008da4:	9304      	str	r3, [sp, #16]
 8008da6:	46a2      	mov	sl, r4
 8008da8:	e7d2      	b.n	8008d50 <_svfiprintf_r+0xa0>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	1d19      	adds	r1, r3, #4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	9103      	str	r1, [sp, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bfbb      	ittet	lt
 8008db6:	425b      	neglt	r3, r3
 8008db8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dbc:	9307      	strge	r3, [sp, #28]
 8008dbe:	9307      	strlt	r3, [sp, #28]
 8008dc0:	bfb8      	it	lt
 8008dc2:	9204      	strlt	r2, [sp, #16]
 8008dc4:	7823      	ldrb	r3, [r4, #0]
 8008dc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dc8:	d10a      	bne.n	8008de0 <_svfiprintf_r+0x130>
 8008dca:	7863      	ldrb	r3, [r4, #1]
 8008dcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dce:	d132      	bne.n	8008e36 <_svfiprintf_r+0x186>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	1d1a      	adds	r2, r3, #4
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	9203      	str	r2, [sp, #12]
 8008dd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ddc:	3402      	adds	r4, #2
 8008dde:	9305      	str	r3, [sp, #20]
 8008de0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ea4 <_svfiprintf_r+0x1f4>
 8008de4:	7821      	ldrb	r1, [r4, #0]
 8008de6:	2203      	movs	r2, #3
 8008de8:	4650      	mov	r0, sl
 8008dea:	f7f7 f9c9 	bl	8000180 <memchr>
 8008dee:	b138      	cbz	r0, 8008e00 <_svfiprintf_r+0x150>
 8008df0:	9b04      	ldr	r3, [sp, #16]
 8008df2:	eba0 000a 	sub.w	r0, r0, sl
 8008df6:	2240      	movs	r2, #64	@ 0x40
 8008df8:	4082      	lsls	r2, r0
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	3401      	adds	r4, #1
 8008dfe:	9304      	str	r3, [sp, #16]
 8008e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e04:	4824      	ldr	r0, [pc, #144]	@ (8008e98 <_svfiprintf_r+0x1e8>)
 8008e06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e0a:	2206      	movs	r2, #6
 8008e0c:	f7f7 f9b8 	bl	8000180 <memchr>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d036      	beq.n	8008e82 <_svfiprintf_r+0x1d2>
 8008e14:	4b21      	ldr	r3, [pc, #132]	@ (8008e9c <_svfiprintf_r+0x1ec>)
 8008e16:	bb1b      	cbnz	r3, 8008e60 <_svfiprintf_r+0x1b0>
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	3307      	adds	r3, #7
 8008e1c:	f023 0307 	bic.w	r3, r3, #7
 8008e20:	3308      	adds	r3, #8
 8008e22:	9303      	str	r3, [sp, #12]
 8008e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e26:	4433      	add	r3, r6
 8008e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e2a:	e76a      	b.n	8008d02 <_svfiprintf_r+0x52>
 8008e2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e30:	460c      	mov	r4, r1
 8008e32:	2001      	movs	r0, #1
 8008e34:	e7a8      	b.n	8008d88 <_svfiprintf_r+0xd8>
 8008e36:	2300      	movs	r3, #0
 8008e38:	3401      	adds	r4, #1
 8008e3a:	9305      	str	r3, [sp, #20]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	f04f 0c0a 	mov.w	ip, #10
 8008e42:	4620      	mov	r0, r4
 8008e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e48:	3a30      	subs	r2, #48	@ 0x30
 8008e4a:	2a09      	cmp	r2, #9
 8008e4c:	d903      	bls.n	8008e56 <_svfiprintf_r+0x1a6>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0c6      	beq.n	8008de0 <_svfiprintf_r+0x130>
 8008e52:	9105      	str	r1, [sp, #20]
 8008e54:	e7c4      	b.n	8008de0 <_svfiprintf_r+0x130>
 8008e56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e7f0      	b.n	8008e42 <_svfiprintf_r+0x192>
 8008e60:	ab03      	add	r3, sp, #12
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	462a      	mov	r2, r5
 8008e66:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea0 <_svfiprintf_r+0x1f0>)
 8008e68:	a904      	add	r1, sp, #16
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	f3af 8000 	nop.w
 8008e70:	1c42      	adds	r2, r0, #1
 8008e72:	4606      	mov	r6, r0
 8008e74:	d1d6      	bne.n	8008e24 <_svfiprintf_r+0x174>
 8008e76:	89ab      	ldrh	r3, [r5, #12]
 8008e78:	065b      	lsls	r3, r3, #25
 8008e7a:	f53f af2d 	bmi.w	8008cd8 <_svfiprintf_r+0x28>
 8008e7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e80:	e72c      	b.n	8008cdc <_svfiprintf_r+0x2c>
 8008e82:	ab03      	add	r3, sp, #12
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	462a      	mov	r2, r5
 8008e88:	4b05      	ldr	r3, [pc, #20]	@ (8008ea0 <_svfiprintf_r+0x1f0>)
 8008e8a:	a904      	add	r1, sp, #16
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	f000 fa5d 	bl	800934c <_printf_i>
 8008e92:	e7ed      	b.n	8008e70 <_svfiprintf_r+0x1c0>
 8008e94:	0800a2a0 	.word	0x0800a2a0
 8008e98:	0800a2aa 	.word	0x0800a2aa
 8008e9c:	00000000 	.word	0x00000000
 8008ea0:	08008bfb 	.word	0x08008bfb
 8008ea4:	0800a2a6 	.word	0x0800a2a6

08008ea8 <__sfputc_r>:
 8008ea8:	6893      	ldr	r3, [r2, #8]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	b410      	push	{r4}
 8008eb0:	6093      	str	r3, [r2, #8]
 8008eb2:	da08      	bge.n	8008ec6 <__sfputc_r+0x1e>
 8008eb4:	6994      	ldr	r4, [r2, #24]
 8008eb6:	42a3      	cmp	r3, r4
 8008eb8:	db01      	blt.n	8008ebe <__sfputc_r+0x16>
 8008eba:	290a      	cmp	r1, #10
 8008ebc:	d103      	bne.n	8008ec6 <__sfputc_r+0x1e>
 8008ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ec2:	f000 bc8a 	b.w	80097da <__swbuf_r>
 8008ec6:	6813      	ldr	r3, [r2, #0]
 8008ec8:	1c58      	adds	r0, r3, #1
 8008eca:	6010      	str	r0, [r2, #0]
 8008ecc:	7019      	strb	r1, [r3, #0]
 8008ece:	4608      	mov	r0, r1
 8008ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <__sfputs_r>:
 8008ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed8:	4606      	mov	r6, r0
 8008eda:	460f      	mov	r7, r1
 8008edc:	4614      	mov	r4, r2
 8008ede:	18d5      	adds	r5, r2, r3
 8008ee0:	42ac      	cmp	r4, r5
 8008ee2:	d101      	bne.n	8008ee8 <__sfputs_r+0x12>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	e007      	b.n	8008ef8 <__sfputs_r+0x22>
 8008ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eec:	463a      	mov	r2, r7
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f7ff ffda 	bl	8008ea8 <__sfputc_r>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	d1f3      	bne.n	8008ee0 <__sfputs_r+0xa>
 8008ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008efc <_vfiprintf_r>:
 8008efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f00:	460d      	mov	r5, r1
 8008f02:	b09d      	sub	sp, #116	@ 0x74
 8008f04:	4614      	mov	r4, r2
 8008f06:	4698      	mov	r8, r3
 8008f08:	4606      	mov	r6, r0
 8008f0a:	b118      	cbz	r0, 8008f14 <_vfiprintf_r+0x18>
 8008f0c:	6a03      	ldr	r3, [r0, #32]
 8008f0e:	b90b      	cbnz	r3, 8008f14 <_vfiprintf_r+0x18>
 8008f10:	f7ff fd98 	bl	8008a44 <__sinit>
 8008f14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f16:	07d9      	lsls	r1, r3, #31
 8008f18:	d405      	bmi.n	8008f26 <_vfiprintf_r+0x2a>
 8008f1a:	89ab      	ldrh	r3, [r5, #12]
 8008f1c:	059a      	lsls	r2, r3, #22
 8008f1e:	d402      	bmi.n	8008f26 <_vfiprintf_r+0x2a>
 8008f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f22:	f7ff fe68 	bl	8008bf6 <__retarget_lock_acquire_recursive>
 8008f26:	89ab      	ldrh	r3, [r5, #12]
 8008f28:	071b      	lsls	r3, r3, #28
 8008f2a:	d501      	bpl.n	8008f30 <_vfiprintf_r+0x34>
 8008f2c:	692b      	ldr	r3, [r5, #16]
 8008f2e:	b99b      	cbnz	r3, 8008f58 <_vfiprintf_r+0x5c>
 8008f30:	4629      	mov	r1, r5
 8008f32:	4630      	mov	r0, r6
 8008f34:	f000 fc90 	bl	8009858 <__swsetup_r>
 8008f38:	b170      	cbz	r0, 8008f58 <_vfiprintf_r+0x5c>
 8008f3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f3c:	07dc      	lsls	r4, r3, #31
 8008f3e:	d504      	bpl.n	8008f4a <_vfiprintf_r+0x4e>
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f44:	b01d      	add	sp, #116	@ 0x74
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	0598      	lsls	r0, r3, #22
 8008f4e:	d4f7      	bmi.n	8008f40 <_vfiprintf_r+0x44>
 8008f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f52:	f7ff fe51 	bl	8008bf8 <__retarget_lock_release_recursive>
 8008f56:	e7f3      	b.n	8008f40 <_vfiprintf_r+0x44>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f5c:	2320      	movs	r3, #32
 8008f5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f66:	2330      	movs	r3, #48	@ 0x30
 8008f68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009118 <_vfiprintf_r+0x21c>
 8008f6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f70:	f04f 0901 	mov.w	r9, #1
 8008f74:	4623      	mov	r3, r4
 8008f76:	469a      	mov	sl, r3
 8008f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f7c:	b10a      	cbz	r2, 8008f82 <_vfiprintf_r+0x86>
 8008f7e:	2a25      	cmp	r2, #37	@ 0x25
 8008f80:	d1f9      	bne.n	8008f76 <_vfiprintf_r+0x7a>
 8008f82:	ebba 0b04 	subs.w	fp, sl, r4
 8008f86:	d00b      	beq.n	8008fa0 <_vfiprintf_r+0xa4>
 8008f88:	465b      	mov	r3, fp
 8008f8a:	4622      	mov	r2, r4
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f7ff ffa1 	bl	8008ed6 <__sfputs_r>
 8008f94:	3001      	adds	r0, #1
 8008f96:	f000 80a7 	beq.w	80090e8 <_vfiprintf_r+0x1ec>
 8008f9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f9c:	445a      	add	r2, fp
 8008f9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 809f 	beq.w	80090e8 <_vfiprintf_r+0x1ec>
 8008faa:	2300      	movs	r3, #0
 8008fac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fb4:	f10a 0a01 	add.w	sl, sl, #1
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	9307      	str	r3, [sp, #28]
 8008fbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fc2:	4654      	mov	r4, sl
 8008fc4:	2205      	movs	r2, #5
 8008fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fca:	4853      	ldr	r0, [pc, #332]	@ (8009118 <_vfiprintf_r+0x21c>)
 8008fcc:	f7f7 f8d8 	bl	8000180 <memchr>
 8008fd0:	9a04      	ldr	r2, [sp, #16]
 8008fd2:	b9d8      	cbnz	r0, 800900c <_vfiprintf_r+0x110>
 8008fd4:	06d1      	lsls	r1, r2, #27
 8008fd6:	bf44      	itt	mi
 8008fd8:	2320      	movmi	r3, #32
 8008fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fde:	0713      	lsls	r3, r2, #28
 8008fe0:	bf44      	itt	mi
 8008fe2:	232b      	movmi	r3, #43	@ 0x2b
 8008fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fee:	d015      	beq.n	800901c <_vfiprintf_r+0x120>
 8008ff0:	9a07      	ldr	r2, [sp, #28]
 8008ff2:	4654      	mov	r4, sl
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	f04f 0c0a 	mov.w	ip, #10
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009000:	3b30      	subs	r3, #48	@ 0x30
 8009002:	2b09      	cmp	r3, #9
 8009004:	d94b      	bls.n	800909e <_vfiprintf_r+0x1a2>
 8009006:	b1b0      	cbz	r0, 8009036 <_vfiprintf_r+0x13a>
 8009008:	9207      	str	r2, [sp, #28]
 800900a:	e014      	b.n	8009036 <_vfiprintf_r+0x13a>
 800900c:	eba0 0308 	sub.w	r3, r0, r8
 8009010:	fa09 f303 	lsl.w	r3, r9, r3
 8009014:	4313      	orrs	r3, r2
 8009016:	9304      	str	r3, [sp, #16]
 8009018:	46a2      	mov	sl, r4
 800901a:	e7d2      	b.n	8008fc2 <_vfiprintf_r+0xc6>
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	1d19      	adds	r1, r3, #4
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	9103      	str	r1, [sp, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	bfbb      	ittet	lt
 8009028:	425b      	neglt	r3, r3
 800902a:	f042 0202 	orrlt.w	r2, r2, #2
 800902e:	9307      	strge	r3, [sp, #28]
 8009030:	9307      	strlt	r3, [sp, #28]
 8009032:	bfb8      	it	lt
 8009034:	9204      	strlt	r2, [sp, #16]
 8009036:	7823      	ldrb	r3, [r4, #0]
 8009038:	2b2e      	cmp	r3, #46	@ 0x2e
 800903a:	d10a      	bne.n	8009052 <_vfiprintf_r+0x156>
 800903c:	7863      	ldrb	r3, [r4, #1]
 800903e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009040:	d132      	bne.n	80090a8 <_vfiprintf_r+0x1ac>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	1d1a      	adds	r2, r3, #4
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	9203      	str	r2, [sp, #12]
 800904a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800904e:	3402      	adds	r4, #2
 8009050:	9305      	str	r3, [sp, #20]
 8009052:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009128 <_vfiprintf_r+0x22c>
 8009056:	7821      	ldrb	r1, [r4, #0]
 8009058:	2203      	movs	r2, #3
 800905a:	4650      	mov	r0, sl
 800905c:	f7f7 f890 	bl	8000180 <memchr>
 8009060:	b138      	cbz	r0, 8009072 <_vfiprintf_r+0x176>
 8009062:	9b04      	ldr	r3, [sp, #16]
 8009064:	eba0 000a 	sub.w	r0, r0, sl
 8009068:	2240      	movs	r2, #64	@ 0x40
 800906a:	4082      	lsls	r2, r0
 800906c:	4313      	orrs	r3, r2
 800906e:	3401      	adds	r4, #1
 8009070:	9304      	str	r3, [sp, #16]
 8009072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009076:	4829      	ldr	r0, [pc, #164]	@ (800911c <_vfiprintf_r+0x220>)
 8009078:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800907c:	2206      	movs	r2, #6
 800907e:	f7f7 f87f 	bl	8000180 <memchr>
 8009082:	2800      	cmp	r0, #0
 8009084:	d03f      	beq.n	8009106 <_vfiprintf_r+0x20a>
 8009086:	4b26      	ldr	r3, [pc, #152]	@ (8009120 <_vfiprintf_r+0x224>)
 8009088:	bb1b      	cbnz	r3, 80090d2 <_vfiprintf_r+0x1d6>
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	3307      	adds	r3, #7
 800908e:	f023 0307 	bic.w	r3, r3, #7
 8009092:	3308      	adds	r3, #8
 8009094:	9303      	str	r3, [sp, #12]
 8009096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009098:	443b      	add	r3, r7
 800909a:	9309      	str	r3, [sp, #36]	@ 0x24
 800909c:	e76a      	b.n	8008f74 <_vfiprintf_r+0x78>
 800909e:	fb0c 3202 	mla	r2, ip, r2, r3
 80090a2:	460c      	mov	r4, r1
 80090a4:	2001      	movs	r0, #1
 80090a6:	e7a8      	b.n	8008ffa <_vfiprintf_r+0xfe>
 80090a8:	2300      	movs	r3, #0
 80090aa:	3401      	adds	r4, #1
 80090ac:	9305      	str	r3, [sp, #20]
 80090ae:	4619      	mov	r1, r3
 80090b0:	f04f 0c0a 	mov.w	ip, #10
 80090b4:	4620      	mov	r0, r4
 80090b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ba:	3a30      	subs	r2, #48	@ 0x30
 80090bc:	2a09      	cmp	r2, #9
 80090be:	d903      	bls.n	80090c8 <_vfiprintf_r+0x1cc>
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d0c6      	beq.n	8009052 <_vfiprintf_r+0x156>
 80090c4:	9105      	str	r1, [sp, #20]
 80090c6:	e7c4      	b.n	8009052 <_vfiprintf_r+0x156>
 80090c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80090cc:	4604      	mov	r4, r0
 80090ce:	2301      	movs	r3, #1
 80090d0:	e7f0      	b.n	80090b4 <_vfiprintf_r+0x1b8>
 80090d2:	ab03      	add	r3, sp, #12
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	462a      	mov	r2, r5
 80090d8:	4b12      	ldr	r3, [pc, #72]	@ (8009124 <_vfiprintf_r+0x228>)
 80090da:	a904      	add	r1, sp, #16
 80090dc:	4630      	mov	r0, r6
 80090de:	f3af 8000 	nop.w
 80090e2:	4607      	mov	r7, r0
 80090e4:	1c78      	adds	r0, r7, #1
 80090e6:	d1d6      	bne.n	8009096 <_vfiprintf_r+0x19a>
 80090e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090ea:	07d9      	lsls	r1, r3, #31
 80090ec:	d405      	bmi.n	80090fa <_vfiprintf_r+0x1fe>
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	059a      	lsls	r2, r3, #22
 80090f2:	d402      	bmi.n	80090fa <_vfiprintf_r+0x1fe>
 80090f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090f6:	f7ff fd7f 	bl	8008bf8 <__retarget_lock_release_recursive>
 80090fa:	89ab      	ldrh	r3, [r5, #12]
 80090fc:	065b      	lsls	r3, r3, #25
 80090fe:	f53f af1f 	bmi.w	8008f40 <_vfiprintf_r+0x44>
 8009102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009104:	e71e      	b.n	8008f44 <_vfiprintf_r+0x48>
 8009106:	ab03      	add	r3, sp, #12
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	462a      	mov	r2, r5
 800910c:	4b05      	ldr	r3, [pc, #20]	@ (8009124 <_vfiprintf_r+0x228>)
 800910e:	a904      	add	r1, sp, #16
 8009110:	4630      	mov	r0, r6
 8009112:	f000 f91b 	bl	800934c <_printf_i>
 8009116:	e7e4      	b.n	80090e2 <_vfiprintf_r+0x1e6>
 8009118:	0800a2a0 	.word	0x0800a2a0
 800911c:	0800a2aa 	.word	0x0800a2aa
 8009120:	00000000 	.word	0x00000000
 8009124:	08008ed7 	.word	0x08008ed7
 8009128:	0800a2a6 	.word	0x0800a2a6

0800912c <sbrk_aligned>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	4e0f      	ldr	r6, [pc, #60]	@ (800916c <sbrk_aligned+0x40>)
 8009130:	460c      	mov	r4, r1
 8009132:	6831      	ldr	r1, [r6, #0]
 8009134:	4605      	mov	r5, r0
 8009136:	b911      	cbnz	r1, 800913e <sbrk_aligned+0x12>
 8009138:	f000 fc94 	bl	8009a64 <_sbrk_r>
 800913c:	6030      	str	r0, [r6, #0]
 800913e:	4621      	mov	r1, r4
 8009140:	4628      	mov	r0, r5
 8009142:	f000 fc8f 	bl	8009a64 <_sbrk_r>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d103      	bne.n	8009152 <sbrk_aligned+0x26>
 800914a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800914e:	4620      	mov	r0, r4
 8009150:	bd70      	pop	{r4, r5, r6, pc}
 8009152:	1cc4      	adds	r4, r0, #3
 8009154:	f024 0403 	bic.w	r4, r4, #3
 8009158:	42a0      	cmp	r0, r4
 800915a:	d0f8      	beq.n	800914e <sbrk_aligned+0x22>
 800915c:	1a21      	subs	r1, r4, r0
 800915e:	4628      	mov	r0, r5
 8009160:	f000 fc80 	bl	8009a64 <_sbrk_r>
 8009164:	3001      	adds	r0, #1
 8009166:	d1f2      	bne.n	800914e <sbrk_aligned+0x22>
 8009168:	e7ef      	b.n	800914a <sbrk_aligned+0x1e>
 800916a:	bf00      	nop
 800916c:	200004b8 	.word	0x200004b8

08009170 <_malloc_r>:
 8009170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009174:	1ccd      	adds	r5, r1, #3
 8009176:	f025 0503 	bic.w	r5, r5, #3
 800917a:	3508      	adds	r5, #8
 800917c:	2d0c      	cmp	r5, #12
 800917e:	bf38      	it	cc
 8009180:	250c      	movcc	r5, #12
 8009182:	2d00      	cmp	r5, #0
 8009184:	4606      	mov	r6, r0
 8009186:	db01      	blt.n	800918c <_malloc_r+0x1c>
 8009188:	42a9      	cmp	r1, r5
 800918a:	d904      	bls.n	8009196 <_malloc_r+0x26>
 800918c:	230c      	movs	r3, #12
 800918e:	6033      	str	r3, [r6, #0]
 8009190:	2000      	movs	r0, #0
 8009192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009196:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800926c <_malloc_r+0xfc>
 800919a:	f000 faa1 	bl	80096e0 <__malloc_lock>
 800919e:	f8d8 3000 	ldr.w	r3, [r8]
 80091a2:	461c      	mov	r4, r3
 80091a4:	bb44      	cbnz	r4, 80091f8 <_malloc_r+0x88>
 80091a6:	4629      	mov	r1, r5
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7ff ffbf 	bl	800912c <sbrk_aligned>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	4604      	mov	r4, r0
 80091b2:	d158      	bne.n	8009266 <_malloc_r+0xf6>
 80091b4:	f8d8 4000 	ldr.w	r4, [r8]
 80091b8:	4627      	mov	r7, r4
 80091ba:	2f00      	cmp	r7, #0
 80091bc:	d143      	bne.n	8009246 <_malloc_r+0xd6>
 80091be:	2c00      	cmp	r4, #0
 80091c0:	d04b      	beq.n	800925a <_malloc_r+0xea>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	4639      	mov	r1, r7
 80091c6:	4630      	mov	r0, r6
 80091c8:	eb04 0903 	add.w	r9, r4, r3
 80091cc:	f000 fc4a 	bl	8009a64 <_sbrk_r>
 80091d0:	4581      	cmp	r9, r0
 80091d2:	d142      	bne.n	800925a <_malloc_r+0xea>
 80091d4:	6821      	ldr	r1, [r4, #0]
 80091d6:	1a6d      	subs	r5, r5, r1
 80091d8:	4629      	mov	r1, r5
 80091da:	4630      	mov	r0, r6
 80091dc:	f7ff ffa6 	bl	800912c <sbrk_aligned>
 80091e0:	3001      	adds	r0, #1
 80091e2:	d03a      	beq.n	800925a <_malloc_r+0xea>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	442b      	add	r3, r5
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	f8d8 3000 	ldr.w	r3, [r8]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	bb62      	cbnz	r2, 800924c <_malloc_r+0xdc>
 80091f2:	f8c8 7000 	str.w	r7, [r8]
 80091f6:	e00f      	b.n	8009218 <_malloc_r+0xa8>
 80091f8:	6822      	ldr	r2, [r4, #0]
 80091fa:	1b52      	subs	r2, r2, r5
 80091fc:	d420      	bmi.n	8009240 <_malloc_r+0xd0>
 80091fe:	2a0b      	cmp	r2, #11
 8009200:	d917      	bls.n	8009232 <_malloc_r+0xc2>
 8009202:	1961      	adds	r1, r4, r5
 8009204:	42a3      	cmp	r3, r4
 8009206:	6025      	str	r5, [r4, #0]
 8009208:	bf18      	it	ne
 800920a:	6059      	strne	r1, [r3, #4]
 800920c:	6863      	ldr	r3, [r4, #4]
 800920e:	bf08      	it	eq
 8009210:	f8c8 1000 	streq.w	r1, [r8]
 8009214:	5162      	str	r2, [r4, r5]
 8009216:	604b      	str	r3, [r1, #4]
 8009218:	4630      	mov	r0, r6
 800921a:	f000 fa67 	bl	80096ec <__malloc_unlock>
 800921e:	f104 000b 	add.w	r0, r4, #11
 8009222:	1d23      	adds	r3, r4, #4
 8009224:	f020 0007 	bic.w	r0, r0, #7
 8009228:	1ac2      	subs	r2, r0, r3
 800922a:	bf1c      	itt	ne
 800922c:	1a1b      	subne	r3, r3, r0
 800922e:	50a3      	strne	r3, [r4, r2]
 8009230:	e7af      	b.n	8009192 <_malloc_r+0x22>
 8009232:	6862      	ldr	r2, [r4, #4]
 8009234:	42a3      	cmp	r3, r4
 8009236:	bf0c      	ite	eq
 8009238:	f8c8 2000 	streq.w	r2, [r8]
 800923c:	605a      	strne	r2, [r3, #4]
 800923e:	e7eb      	b.n	8009218 <_malloc_r+0xa8>
 8009240:	4623      	mov	r3, r4
 8009242:	6864      	ldr	r4, [r4, #4]
 8009244:	e7ae      	b.n	80091a4 <_malloc_r+0x34>
 8009246:	463c      	mov	r4, r7
 8009248:	687f      	ldr	r7, [r7, #4]
 800924a:	e7b6      	b.n	80091ba <_malloc_r+0x4a>
 800924c:	461a      	mov	r2, r3
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	42a3      	cmp	r3, r4
 8009252:	d1fb      	bne.n	800924c <_malloc_r+0xdc>
 8009254:	2300      	movs	r3, #0
 8009256:	6053      	str	r3, [r2, #4]
 8009258:	e7de      	b.n	8009218 <_malloc_r+0xa8>
 800925a:	230c      	movs	r3, #12
 800925c:	6033      	str	r3, [r6, #0]
 800925e:	4630      	mov	r0, r6
 8009260:	f000 fa44 	bl	80096ec <__malloc_unlock>
 8009264:	e794      	b.n	8009190 <_malloc_r+0x20>
 8009266:	6005      	str	r5, [r0, #0]
 8009268:	e7d6      	b.n	8009218 <_malloc_r+0xa8>
 800926a:	bf00      	nop
 800926c:	200004bc 	.word	0x200004bc

08009270 <_printf_common>:
 8009270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009274:	4616      	mov	r6, r2
 8009276:	4698      	mov	r8, r3
 8009278:	688a      	ldr	r2, [r1, #8]
 800927a:	690b      	ldr	r3, [r1, #16]
 800927c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009280:	4293      	cmp	r3, r2
 8009282:	bfb8      	it	lt
 8009284:	4613      	movlt	r3, r2
 8009286:	6033      	str	r3, [r6, #0]
 8009288:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800928c:	4607      	mov	r7, r0
 800928e:	460c      	mov	r4, r1
 8009290:	b10a      	cbz	r2, 8009296 <_printf_common+0x26>
 8009292:	3301      	adds	r3, #1
 8009294:	6033      	str	r3, [r6, #0]
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	0699      	lsls	r1, r3, #26
 800929a:	bf42      	ittt	mi
 800929c:	6833      	ldrmi	r3, [r6, #0]
 800929e:	3302      	addmi	r3, #2
 80092a0:	6033      	strmi	r3, [r6, #0]
 80092a2:	6825      	ldr	r5, [r4, #0]
 80092a4:	f015 0506 	ands.w	r5, r5, #6
 80092a8:	d106      	bne.n	80092b8 <_printf_common+0x48>
 80092aa:	f104 0a19 	add.w	sl, r4, #25
 80092ae:	68e3      	ldr	r3, [r4, #12]
 80092b0:	6832      	ldr	r2, [r6, #0]
 80092b2:	1a9b      	subs	r3, r3, r2
 80092b4:	42ab      	cmp	r3, r5
 80092b6:	dc26      	bgt.n	8009306 <_printf_common+0x96>
 80092b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092bc:	6822      	ldr	r2, [r4, #0]
 80092be:	3b00      	subs	r3, #0
 80092c0:	bf18      	it	ne
 80092c2:	2301      	movne	r3, #1
 80092c4:	0692      	lsls	r2, r2, #26
 80092c6:	d42b      	bmi.n	8009320 <_printf_common+0xb0>
 80092c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092cc:	4641      	mov	r1, r8
 80092ce:	4638      	mov	r0, r7
 80092d0:	47c8      	blx	r9
 80092d2:	3001      	adds	r0, #1
 80092d4:	d01e      	beq.n	8009314 <_printf_common+0xa4>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	6922      	ldr	r2, [r4, #16]
 80092da:	f003 0306 	and.w	r3, r3, #6
 80092de:	2b04      	cmp	r3, #4
 80092e0:	bf02      	ittt	eq
 80092e2:	68e5      	ldreq	r5, [r4, #12]
 80092e4:	6833      	ldreq	r3, [r6, #0]
 80092e6:	1aed      	subeq	r5, r5, r3
 80092e8:	68a3      	ldr	r3, [r4, #8]
 80092ea:	bf0c      	ite	eq
 80092ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092f0:	2500      	movne	r5, #0
 80092f2:	4293      	cmp	r3, r2
 80092f4:	bfc4      	itt	gt
 80092f6:	1a9b      	subgt	r3, r3, r2
 80092f8:	18ed      	addgt	r5, r5, r3
 80092fa:	2600      	movs	r6, #0
 80092fc:	341a      	adds	r4, #26
 80092fe:	42b5      	cmp	r5, r6
 8009300:	d11a      	bne.n	8009338 <_printf_common+0xc8>
 8009302:	2000      	movs	r0, #0
 8009304:	e008      	b.n	8009318 <_printf_common+0xa8>
 8009306:	2301      	movs	r3, #1
 8009308:	4652      	mov	r2, sl
 800930a:	4641      	mov	r1, r8
 800930c:	4638      	mov	r0, r7
 800930e:	47c8      	blx	r9
 8009310:	3001      	adds	r0, #1
 8009312:	d103      	bne.n	800931c <_printf_common+0xac>
 8009314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931c:	3501      	adds	r5, #1
 800931e:	e7c6      	b.n	80092ae <_printf_common+0x3e>
 8009320:	18e1      	adds	r1, r4, r3
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	2030      	movs	r0, #48	@ 0x30
 8009326:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800932a:	4422      	add	r2, r4
 800932c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009334:	3302      	adds	r3, #2
 8009336:	e7c7      	b.n	80092c8 <_printf_common+0x58>
 8009338:	2301      	movs	r3, #1
 800933a:	4622      	mov	r2, r4
 800933c:	4641      	mov	r1, r8
 800933e:	4638      	mov	r0, r7
 8009340:	47c8      	blx	r9
 8009342:	3001      	adds	r0, #1
 8009344:	d0e6      	beq.n	8009314 <_printf_common+0xa4>
 8009346:	3601      	adds	r6, #1
 8009348:	e7d9      	b.n	80092fe <_printf_common+0x8e>
	...

0800934c <_printf_i>:
 800934c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009350:	7e0f      	ldrb	r7, [r1, #24]
 8009352:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009354:	2f78      	cmp	r7, #120	@ 0x78
 8009356:	4691      	mov	r9, r2
 8009358:	4680      	mov	r8, r0
 800935a:	460c      	mov	r4, r1
 800935c:	469a      	mov	sl, r3
 800935e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009362:	d807      	bhi.n	8009374 <_printf_i+0x28>
 8009364:	2f62      	cmp	r7, #98	@ 0x62
 8009366:	d80a      	bhi.n	800937e <_printf_i+0x32>
 8009368:	2f00      	cmp	r7, #0
 800936a:	f000 80d1 	beq.w	8009510 <_printf_i+0x1c4>
 800936e:	2f58      	cmp	r7, #88	@ 0x58
 8009370:	f000 80b8 	beq.w	80094e4 <_printf_i+0x198>
 8009374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009378:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800937c:	e03a      	b.n	80093f4 <_printf_i+0xa8>
 800937e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009382:	2b15      	cmp	r3, #21
 8009384:	d8f6      	bhi.n	8009374 <_printf_i+0x28>
 8009386:	a101      	add	r1, pc, #4	@ (adr r1, 800938c <_printf_i+0x40>)
 8009388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800938c:	080093e5 	.word	0x080093e5
 8009390:	080093f9 	.word	0x080093f9
 8009394:	08009375 	.word	0x08009375
 8009398:	08009375 	.word	0x08009375
 800939c:	08009375 	.word	0x08009375
 80093a0:	08009375 	.word	0x08009375
 80093a4:	080093f9 	.word	0x080093f9
 80093a8:	08009375 	.word	0x08009375
 80093ac:	08009375 	.word	0x08009375
 80093b0:	08009375 	.word	0x08009375
 80093b4:	08009375 	.word	0x08009375
 80093b8:	080094f7 	.word	0x080094f7
 80093bc:	08009423 	.word	0x08009423
 80093c0:	080094b1 	.word	0x080094b1
 80093c4:	08009375 	.word	0x08009375
 80093c8:	08009375 	.word	0x08009375
 80093cc:	08009519 	.word	0x08009519
 80093d0:	08009375 	.word	0x08009375
 80093d4:	08009423 	.word	0x08009423
 80093d8:	08009375 	.word	0x08009375
 80093dc:	08009375 	.word	0x08009375
 80093e0:	080094b9 	.word	0x080094b9
 80093e4:	6833      	ldr	r3, [r6, #0]
 80093e6:	1d1a      	adds	r2, r3, #4
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6032      	str	r2, [r6, #0]
 80093ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093f4:	2301      	movs	r3, #1
 80093f6:	e09c      	b.n	8009532 <_printf_i+0x1e6>
 80093f8:	6833      	ldr	r3, [r6, #0]
 80093fa:	6820      	ldr	r0, [r4, #0]
 80093fc:	1d19      	adds	r1, r3, #4
 80093fe:	6031      	str	r1, [r6, #0]
 8009400:	0606      	lsls	r6, r0, #24
 8009402:	d501      	bpl.n	8009408 <_printf_i+0xbc>
 8009404:	681d      	ldr	r5, [r3, #0]
 8009406:	e003      	b.n	8009410 <_printf_i+0xc4>
 8009408:	0645      	lsls	r5, r0, #25
 800940a:	d5fb      	bpl.n	8009404 <_printf_i+0xb8>
 800940c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009410:	2d00      	cmp	r5, #0
 8009412:	da03      	bge.n	800941c <_printf_i+0xd0>
 8009414:	232d      	movs	r3, #45	@ 0x2d
 8009416:	426d      	negs	r5, r5
 8009418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800941c:	4858      	ldr	r0, [pc, #352]	@ (8009580 <_printf_i+0x234>)
 800941e:	230a      	movs	r3, #10
 8009420:	e011      	b.n	8009446 <_printf_i+0xfa>
 8009422:	6821      	ldr	r1, [r4, #0]
 8009424:	6833      	ldr	r3, [r6, #0]
 8009426:	0608      	lsls	r0, r1, #24
 8009428:	f853 5b04 	ldr.w	r5, [r3], #4
 800942c:	d402      	bmi.n	8009434 <_printf_i+0xe8>
 800942e:	0649      	lsls	r1, r1, #25
 8009430:	bf48      	it	mi
 8009432:	b2ad      	uxthmi	r5, r5
 8009434:	2f6f      	cmp	r7, #111	@ 0x6f
 8009436:	4852      	ldr	r0, [pc, #328]	@ (8009580 <_printf_i+0x234>)
 8009438:	6033      	str	r3, [r6, #0]
 800943a:	bf14      	ite	ne
 800943c:	230a      	movne	r3, #10
 800943e:	2308      	moveq	r3, #8
 8009440:	2100      	movs	r1, #0
 8009442:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009446:	6866      	ldr	r6, [r4, #4]
 8009448:	60a6      	str	r6, [r4, #8]
 800944a:	2e00      	cmp	r6, #0
 800944c:	db05      	blt.n	800945a <_printf_i+0x10e>
 800944e:	6821      	ldr	r1, [r4, #0]
 8009450:	432e      	orrs	r6, r5
 8009452:	f021 0104 	bic.w	r1, r1, #4
 8009456:	6021      	str	r1, [r4, #0]
 8009458:	d04b      	beq.n	80094f2 <_printf_i+0x1a6>
 800945a:	4616      	mov	r6, r2
 800945c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009460:	fb03 5711 	mls	r7, r3, r1, r5
 8009464:	5dc7      	ldrb	r7, [r0, r7]
 8009466:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800946a:	462f      	mov	r7, r5
 800946c:	42bb      	cmp	r3, r7
 800946e:	460d      	mov	r5, r1
 8009470:	d9f4      	bls.n	800945c <_printf_i+0x110>
 8009472:	2b08      	cmp	r3, #8
 8009474:	d10b      	bne.n	800948e <_printf_i+0x142>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	07df      	lsls	r7, r3, #31
 800947a:	d508      	bpl.n	800948e <_printf_i+0x142>
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	6861      	ldr	r1, [r4, #4]
 8009480:	4299      	cmp	r1, r3
 8009482:	bfde      	ittt	le
 8009484:	2330      	movle	r3, #48	@ 0x30
 8009486:	f806 3c01 	strble.w	r3, [r6, #-1]
 800948a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800948e:	1b92      	subs	r2, r2, r6
 8009490:	6122      	str	r2, [r4, #16]
 8009492:	f8cd a000 	str.w	sl, [sp]
 8009496:	464b      	mov	r3, r9
 8009498:	aa03      	add	r2, sp, #12
 800949a:	4621      	mov	r1, r4
 800949c:	4640      	mov	r0, r8
 800949e:	f7ff fee7 	bl	8009270 <_printf_common>
 80094a2:	3001      	adds	r0, #1
 80094a4:	d14a      	bne.n	800953c <_printf_i+0x1f0>
 80094a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094aa:	b004      	add	sp, #16
 80094ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	f043 0320 	orr.w	r3, r3, #32
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	4832      	ldr	r0, [pc, #200]	@ (8009584 <_printf_i+0x238>)
 80094ba:	2778      	movs	r7, #120	@ 0x78
 80094bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	6831      	ldr	r1, [r6, #0]
 80094c4:	061f      	lsls	r7, r3, #24
 80094c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80094ca:	d402      	bmi.n	80094d2 <_printf_i+0x186>
 80094cc:	065f      	lsls	r7, r3, #25
 80094ce:	bf48      	it	mi
 80094d0:	b2ad      	uxthmi	r5, r5
 80094d2:	6031      	str	r1, [r6, #0]
 80094d4:	07d9      	lsls	r1, r3, #31
 80094d6:	bf44      	itt	mi
 80094d8:	f043 0320 	orrmi.w	r3, r3, #32
 80094dc:	6023      	strmi	r3, [r4, #0]
 80094de:	b11d      	cbz	r5, 80094e8 <_printf_i+0x19c>
 80094e0:	2310      	movs	r3, #16
 80094e2:	e7ad      	b.n	8009440 <_printf_i+0xf4>
 80094e4:	4826      	ldr	r0, [pc, #152]	@ (8009580 <_printf_i+0x234>)
 80094e6:	e7e9      	b.n	80094bc <_printf_i+0x170>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	f023 0320 	bic.w	r3, r3, #32
 80094ee:	6023      	str	r3, [r4, #0]
 80094f0:	e7f6      	b.n	80094e0 <_printf_i+0x194>
 80094f2:	4616      	mov	r6, r2
 80094f4:	e7bd      	b.n	8009472 <_printf_i+0x126>
 80094f6:	6833      	ldr	r3, [r6, #0]
 80094f8:	6825      	ldr	r5, [r4, #0]
 80094fa:	6961      	ldr	r1, [r4, #20]
 80094fc:	1d18      	adds	r0, r3, #4
 80094fe:	6030      	str	r0, [r6, #0]
 8009500:	062e      	lsls	r6, r5, #24
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	d501      	bpl.n	800950a <_printf_i+0x1be>
 8009506:	6019      	str	r1, [r3, #0]
 8009508:	e002      	b.n	8009510 <_printf_i+0x1c4>
 800950a:	0668      	lsls	r0, r5, #25
 800950c:	d5fb      	bpl.n	8009506 <_printf_i+0x1ba>
 800950e:	8019      	strh	r1, [r3, #0]
 8009510:	2300      	movs	r3, #0
 8009512:	6123      	str	r3, [r4, #16]
 8009514:	4616      	mov	r6, r2
 8009516:	e7bc      	b.n	8009492 <_printf_i+0x146>
 8009518:	6833      	ldr	r3, [r6, #0]
 800951a:	1d1a      	adds	r2, r3, #4
 800951c:	6032      	str	r2, [r6, #0]
 800951e:	681e      	ldr	r6, [r3, #0]
 8009520:	6862      	ldr	r2, [r4, #4]
 8009522:	2100      	movs	r1, #0
 8009524:	4630      	mov	r0, r6
 8009526:	f7f6 fe2b 	bl	8000180 <memchr>
 800952a:	b108      	cbz	r0, 8009530 <_printf_i+0x1e4>
 800952c:	1b80      	subs	r0, r0, r6
 800952e:	6060      	str	r0, [r4, #4]
 8009530:	6863      	ldr	r3, [r4, #4]
 8009532:	6123      	str	r3, [r4, #16]
 8009534:	2300      	movs	r3, #0
 8009536:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800953a:	e7aa      	b.n	8009492 <_printf_i+0x146>
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	4632      	mov	r2, r6
 8009540:	4649      	mov	r1, r9
 8009542:	4640      	mov	r0, r8
 8009544:	47d0      	blx	sl
 8009546:	3001      	adds	r0, #1
 8009548:	d0ad      	beq.n	80094a6 <_printf_i+0x15a>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	079b      	lsls	r3, r3, #30
 800954e:	d413      	bmi.n	8009578 <_printf_i+0x22c>
 8009550:	68e0      	ldr	r0, [r4, #12]
 8009552:	9b03      	ldr	r3, [sp, #12]
 8009554:	4298      	cmp	r0, r3
 8009556:	bfb8      	it	lt
 8009558:	4618      	movlt	r0, r3
 800955a:	e7a6      	b.n	80094aa <_printf_i+0x15e>
 800955c:	2301      	movs	r3, #1
 800955e:	4632      	mov	r2, r6
 8009560:	4649      	mov	r1, r9
 8009562:	4640      	mov	r0, r8
 8009564:	47d0      	blx	sl
 8009566:	3001      	adds	r0, #1
 8009568:	d09d      	beq.n	80094a6 <_printf_i+0x15a>
 800956a:	3501      	adds	r5, #1
 800956c:	68e3      	ldr	r3, [r4, #12]
 800956e:	9903      	ldr	r1, [sp, #12]
 8009570:	1a5b      	subs	r3, r3, r1
 8009572:	42ab      	cmp	r3, r5
 8009574:	dcf2      	bgt.n	800955c <_printf_i+0x210>
 8009576:	e7eb      	b.n	8009550 <_printf_i+0x204>
 8009578:	2500      	movs	r5, #0
 800957a:	f104 0619 	add.w	r6, r4, #25
 800957e:	e7f5      	b.n	800956c <_printf_i+0x220>
 8009580:	0800a2b1 	.word	0x0800a2b1
 8009584:	0800a2c2 	.word	0x0800a2c2

08009588 <__sflush_r>:
 8009588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800958c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009590:	0716      	lsls	r6, r2, #28
 8009592:	4605      	mov	r5, r0
 8009594:	460c      	mov	r4, r1
 8009596:	d454      	bmi.n	8009642 <__sflush_r+0xba>
 8009598:	684b      	ldr	r3, [r1, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	dc02      	bgt.n	80095a4 <__sflush_r+0x1c>
 800959e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	dd48      	ble.n	8009636 <__sflush_r+0xae>
 80095a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	d045      	beq.n	8009636 <__sflush_r+0xae>
 80095aa:	2300      	movs	r3, #0
 80095ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095b0:	682f      	ldr	r7, [r5, #0]
 80095b2:	6a21      	ldr	r1, [r4, #32]
 80095b4:	602b      	str	r3, [r5, #0]
 80095b6:	d030      	beq.n	800961a <__sflush_r+0x92>
 80095b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	0759      	lsls	r1, r3, #29
 80095be:	d505      	bpl.n	80095cc <__sflush_r+0x44>
 80095c0:	6863      	ldr	r3, [r4, #4]
 80095c2:	1ad2      	subs	r2, r2, r3
 80095c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095c6:	b10b      	cbz	r3, 80095cc <__sflush_r+0x44>
 80095c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095ca:	1ad2      	subs	r2, r2, r3
 80095cc:	2300      	movs	r3, #0
 80095ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095d0:	6a21      	ldr	r1, [r4, #32]
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b0      	blx	r6
 80095d6:	1c43      	adds	r3, r0, #1
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	d106      	bne.n	80095ea <__sflush_r+0x62>
 80095dc:	6829      	ldr	r1, [r5, #0]
 80095de:	291d      	cmp	r1, #29
 80095e0:	d82b      	bhi.n	800963a <__sflush_r+0xb2>
 80095e2:	4a2a      	ldr	r2, [pc, #168]	@ (800968c <__sflush_r+0x104>)
 80095e4:	40ca      	lsrs	r2, r1
 80095e6:	07d6      	lsls	r6, r2, #31
 80095e8:	d527      	bpl.n	800963a <__sflush_r+0xb2>
 80095ea:	2200      	movs	r2, #0
 80095ec:	6062      	str	r2, [r4, #4]
 80095ee:	04d9      	lsls	r1, r3, #19
 80095f0:	6922      	ldr	r2, [r4, #16]
 80095f2:	6022      	str	r2, [r4, #0]
 80095f4:	d504      	bpl.n	8009600 <__sflush_r+0x78>
 80095f6:	1c42      	adds	r2, r0, #1
 80095f8:	d101      	bne.n	80095fe <__sflush_r+0x76>
 80095fa:	682b      	ldr	r3, [r5, #0]
 80095fc:	b903      	cbnz	r3, 8009600 <__sflush_r+0x78>
 80095fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8009600:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009602:	602f      	str	r7, [r5, #0]
 8009604:	b1b9      	cbz	r1, 8009636 <__sflush_r+0xae>
 8009606:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800960a:	4299      	cmp	r1, r3
 800960c:	d002      	beq.n	8009614 <__sflush_r+0x8c>
 800960e:	4628      	mov	r0, r5
 8009610:	f000 fa7a 	bl	8009b08 <_free_r>
 8009614:	2300      	movs	r3, #0
 8009616:	6363      	str	r3, [r4, #52]	@ 0x34
 8009618:	e00d      	b.n	8009636 <__sflush_r+0xae>
 800961a:	2301      	movs	r3, #1
 800961c:	4628      	mov	r0, r5
 800961e:	47b0      	blx	r6
 8009620:	4602      	mov	r2, r0
 8009622:	1c50      	adds	r0, r2, #1
 8009624:	d1c9      	bne.n	80095ba <__sflush_r+0x32>
 8009626:	682b      	ldr	r3, [r5, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0c6      	beq.n	80095ba <__sflush_r+0x32>
 800962c:	2b1d      	cmp	r3, #29
 800962e:	d001      	beq.n	8009634 <__sflush_r+0xac>
 8009630:	2b16      	cmp	r3, #22
 8009632:	d11e      	bne.n	8009672 <__sflush_r+0xea>
 8009634:	602f      	str	r7, [r5, #0]
 8009636:	2000      	movs	r0, #0
 8009638:	e022      	b.n	8009680 <__sflush_r+0xf8>
 800963a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800963e:	b21b      	sxth	r3, r3
 8009640:	e01b      	b.n	800967a <__sflush_r+0xf2>
 8009642:	690f      	ldr	r7, [r1, #16]
 8009644:	2f00      	cmp	r7, #0
 8009646:	d0f6      	beq.n	8009636 <__sflush_r+0xae>
 8009648:	0793      	lsls	r3, r2, #30
 800964a:	680e      	ldr	r6, [r1, #0]
 800964c:	bf08      	it	eq
 800964e:	694b      	ldreq	r3, [r1, #20]
 8009650:	600f      	str	r7, [r1, #0]
 8009652:	bf18      	it	ne
 8009654:	2300      	movne	r3, #0
 8009656:	eba6 0807 	sub.w	r8, r6, r7
 800965a:	608b      	str	r3, [r1, #8]
 800965c:	f1b8 0f00 	cmp.w	r8, #0
 8009660:	dde9      	ble.n	8009636 <__sflush_r+0xae>
 8009662:	6a21      	ldr	r1, [r4, #32]
 8009664:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009666:	4643      	mov	r3, r8
 8009668:	463a      	mov	r2, r7
 800966a:	4628      	mov	r0, r5
 800966c:	47b0      	blx	r6
 800966e:	2800      	cmp	r0, #0
 8009670:	dc08      	bgt.n	8009684 <__sflush_r+0xfc>
 8009672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009684:	4407      	add	r7, r0
 8009686:	eba8 0800 	sub.w	r8, r8, r0
 800968a:	e7e7      	b.n	800965c <__sflush_r+0xd4>
 800968c:	20400001 	.word	0x20400001

08009690 <_fflush_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	690b      	ldr	r3, [r1, #16]
 8009694:	4605      	mov	r5, r0
 8009696:	460c      	mov	r4, r1
 8009698:	b913      	cbnz	r3, 80096a0 <_fflush_r+0x10>
 800969a:	2500      	movs	r5, #0
 800969c:	4628      	mov	r0, r5
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	b118      	cbz	r0, 80096aa <_fflush_r+0x1a>
 80096a2:	6a03      	ldr	r3, [r0, #32]
 80096a4:	b90b      	cbnz	r3, 80096aa <_fflush_r+0x1a>
 80096a6:	f7ff f9cd 	bl	8008a44 <__sinit>
 80096aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0f3      	beq.n	800969a <_fflush_r+0xa>
 80096b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096b4:	07d0      	lsls	r0, r2, #31
 80096b6:	d404      	bmi.n	80096c2 <_fflush_r+0x32>
 80096b8:	0599      	lsls	r1, r3, #22
 80096ba:	d402      	bmi.n	80096c2 <_fflush_r+0x32>
 80096bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096be:	f7ff fa9a 	bl	8008bf6 <__retarget_lock_acquire_recursive>
 80096c2:	4628      	mov	r0, r5
 80096c4:	4621      	mov	r1, r4
 80096c6:	f7ff ff5f 	bl	8009588 <__sflush_r>
 80096ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096cc:	07da      	lsls	r2, r3, #31
 80096ce:	4605      	mov	r5, r0
 80096d0:	d4e4      	bmi.n	800969c <_fflush_r+0xc>
 80096d2:	89a3      	ldrh	r3, [r4, #12]
 80096d4:	059b      	lsls	r3, r3, #22
 80096d6:	d4e1      	bmi.n	800969c <_fflush_r+0xc>
 80096d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096da:	f7ff fa8d 	bl	8008bf8 <__retarget_lock_release_recursive>
 80096de:	e7dd      	b.n	800969c <_fflush_r+0xc>

080096e0 <__malloc_lock>:
 80096e0:	4801      	ldr	r0, [pc, #4]	@ (80096e8 <__malloc_lock+0x8>)
 80096e2:	f7ff ba88 	b.w	8008bf6 <__retarget_lock_acquire_recursive>
 80096e6:	bf00      	nop
 80096e8:	200004b4 	.word	0x200004b4

080096ec <__malloc_unlock>:
 80096ec:	4801      	ldr	r0, [pc, #4]	@ (80096f4 <__malloc_unlock+0x8>)
 80096ee:	f7ff ba83 	b.w	8008bf8 <__retarget_lock_release_recursive>
 80096f2:	bf00      	nop
 80096f4:	200004b4 	.word	0x200004b4

080096f8 <__sread>:
 80096f8:	b510      	push	{r4, lr}
 80096fa:	460c      	mov	r4, r1
 80096fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009700:	f000 f99e 	bl	8009a40 <_read_r>
 8009704:	2800      	cmp	r0, #0
 8009706:	bfab      	itete	ge
 8009708:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800970a:	89a3      	ldrhlt	r3, [r4, #12]
 800970c:	181b      	addge	r3, r3, r0
 800970e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009712:	bfac      	ite	ge
 8009714:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009716:	81a3      	strhlt	r3, [r4, #12]
 8009718:	bd10      	pop	{r4, pc}

0800971a <__swrite>:
 800971a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971e:	461f      	mov	r7, r3
 8009720:	898b      	ldrh	r3, [r1, #12]
 8009722:	05db      	lsls	r3, r3, #23
 8009724:	4605      	mov	r5, r0
 8009726:	460c      	mov	r4, r1
 8009728:	4616      	mov	r6, r2
 800972a:	d505      	bpl.n	8009738 <__swrite+0x1e>
 800972c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009730:	2302      	movs	r3, #2
 8009732:	2200      	movs	r2, #0
 8009734:	f000 f972 	bl	8009a1c <_lseek_r>
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800973e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	4632      	mov	r2, r6
 8009746:	463b      	mov	r3, r7
 8009748:	4628      	mov	r0, r5
 800974a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800974e:	f000 b999 	b.w	8009a84 <_write_r>

08009752 <__sseek>:
 8009752:	b510      	push	{r4, lr}
 8009754:	460c      	mov	r4, r1
 8009756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975a:	f000 f95f 	bl	8009a1c <_lseek_r>
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	bf15      	itete	ne
 8009764:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009766:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800976a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800976e:	81a3      	strheq	r3, [r4, #12]
 8009770:	bf18      	it	ne
 8009772:	81a3      	strhne	r3, [r4, #12]
 8009774:	bd10      	pop	{r4, pc}

08009776 <__sclose>:
 8009776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977a:	f000 b995 	b.w	8009aa8 <_close_r>

0800977e <_realloc_r>:
 800977e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009782:	4607      	mov	r7, r0
 8009784:	4614      	mov	r4, r2
 8009786:	460d      	mov	r5, r1
 8009788:	b921      	cbnz	r1, 8009794 <_realloc_r+0x16>
 800978a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800978e:	4611      	mov	r1, r2
 8009790:	f7ff bcee 	b.w	8009170 <_malloc_r>
 8009794:	b92a      	cbnz	r2, 80097a2 <_realloc_r+0x24>
 8009796:	f000 f9b7 	bl	8009b08 <_free_r>
 800979a:	4625      	mov	r5, r4
 800979c:	4628      	mov	r0, r5
 800979e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a2:	f000 f9fb 	bl	8009b9c <_malloc_usable_size_r>
 80097a6:	4284      	cmp	r4, r0
 80097a8:	4606      	mov	r6, r0
 80097aa:	d802      	bhi.n	80097b2 <_realloc_r+0x34>
 80097ac:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097b0:	d8f4      	bhi.n	800979c <_realloc_r+0x1e>
 80097b2:	4621      	mov	r1, r4
 80097b4:	4638      	mov	r0, r7
 80097b6:	f7ff fcdb 	bl	8009170 <_malloc_r>
 80097ba:	4680      	mov	r8, r0
 80097bc:	b908      	cbnz	r0, 80097c2 <_realloc_r+0x44>
 80097be:	4645      	mov	r5, r8
 80097c0:	e7ec      	b.n	800979c <_realloc_r+0x1e>
 80097c2:	42b4      	cmp	r4, r6
 80097c4:	4622      	mov	r2, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	bf28      	it	cs
 80097ca:	4632      	movcs	r2, r6
 80097cc:	f000 f98e 	bl	8009aec <memcpy>
 80097d0:	4629      	mov	r1, r5
 80097d2:	4638      	mov	r0, r7
 80097d4:	f000 f998 	bl	8009b08 <_free_r>
 80097d8:	e7f1      	b.n	80097be <_realloc_r+0x40>

080097da <__swbuf_r>:
 80097da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097dc:	460e      	mov	r6, r1
 80097de:	4614      	mov	r4, r2
 80097e0:	4605      	mov	r5, r0
 80097e2:	b118      	cbz	r0, 80097ec <__swbuf_r+0x12>
 80097e4:	6a03      	ldr	r3, [r0, #32]
 80097e6:	b90b      	cbnz	r3, 80097ec <__swbuf_r+0x12>
 80097e8:	f7ff f92c 	bl	8008a44 <__sinit>
 80097ec:	69a3      	ldr	r3, [r4, #24]
 80097ee:	60a3      	str	r3, [r4, #8]
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	071a      	lsls	r2, r3, #28
 80097f4:	d501      	bpl.n	80097fa <__swbuf_r+0x20>
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	b943      	cbnz	r3, 800980c <__swbuf_r+0x32>
 80097fa:	4621      	mov	r1, r4
 80097fc:	4628      	mov	r0, r5
 80097fe:	f000 f82b 	bl	8009858 <__swsetup_r>
 8009802:	b118      	cbz	r0, 800980c <__swbuf_r+0x32>
 8009804:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009808:	4638      	mov	r0, r7
 800980a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	6922      	ldr	r2, [r4, #16]
 8009810:	1a98      	subs	r0, r3, r2
 8009812:	6963      	ldr	r3, [r4, #20]
 8009814:	b2f6      	uxtb	r6, r6
 8009816:	4283      	cmp	r3, r0
 8009818:	4637      	mov	r7, r6
 800981a:	dc05      	bgt.n	8009828 <__swbuf_r+0x4e>
 800981c:	4621      	mov	r1, r4
 800981e:	4628      	mov	r0, r5
 8009820:	f7ff ff36 	bl	8009690 <_fflush_r>
 8009824:	2800      	cmp	r0, #0
 8009826:	d1ed      	bne.n	8009804 <__swbuf_r+0x2a>
 8009828:	68a3      	ldr	r3, [r4, #8]
 800982a:	3b01      	subs	r3, #1
 800982c:	60a3      	str	r3, [r4, #8]
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	6022      	str	r2, [r4, #0]
 8009834:	701e      	strb	r6, [r3, #0]
 8009836:	6962      	ldr	r2, [r4, #20]
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	429a      	cmp	r2, r3
 800983c:	d004      	beq.n	8009848 <__swbuf_r+0x6e>
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	07db      	lsls	r3, r3, #31
 8009842:	d5e1      	bpl.n	8009808 <__swbuf_r+0x2e>
 8009844:	2e0a      	cmp	r6, #10
 8009846:	d1df      	bne.n	8009808 <__swbuf_r+0x2e>
 8009848:	4621      	mov	r1, r4
 800984a:	4628      	mov	r0, r5
 800984c:	f7ff ff20 	bl	8009690 <_fflush_r>
 8009850:	2800      	cmp	r0, #0
 8009852:	d0d9      	beq.n	8009808 <__swbuf_r+0x2e>
 8009854:	e7d6      	b.n	8009804 <__swbuf_r+0x2a>
	...

08009858 <__swsetup_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4b29      	ldr	r3, [pc, #164]	@ (8009900 <__swsetup_r+0xa8>)
 800985c:	4605      	mov	r5, r0
 800985e:	6818      	ldr	r0, [r3, #0]
 8009860:	460c      	mov	r4, r1
 8009862:	b118      	cbz	r0, 800986c <__swsetup_r+0x14>
 8009864:	6a03      	ldr	r3, [r0, #32]
 8009866:	b90b      	cbnz	r3, 800986c <__swsetup_r+0x14>
 8009868:	f7ff f8ec 	bl	8008a44 <__sinit>
 800986c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009870:	0719      	lsls	r1, r3, #28
 8009872:	d422      	bmi.n	80098ba <__swsetup_r+0x62>
 8009874:	06da      	lsls	r2, r3, #27
 8009876:	d407      	bmi.n	8009888 <__swsetup_r+0x30>
 8009878:	2209      	movs	r2, #9
 800987a:	602a      	str	r2, [r5, #0]
 800987c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009886:	e033      	b.n	80098f0 <__swsetup_r+0x98>
 8009888:	0758      	lsls	r0, r3, #29
 800988a:	d512      	bpl.n	80098b2 <__swsetup_r+0x5a>
 800988c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800988e:	b141      	cbz	r1, 80098a2 <__swsetup_r+0x4a>
 8009890:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009894:	4299      	cmp	r1, r3
 8009896:	d002      	beq.n	800989e <__swsetup_r+0x46>
 8009898:	4628      	mov	r0, r5
 800989a:	f000 f935 	bl	8009b08 <_free_r>
 800989e:	2300      	movs	r3, #0
 80098a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	2300      	movs	r3, #0
 80098ac:	6063      	str	r3, [r4, #4]
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f043 0308 	orr.w	r3, r3, #8
 80098b8:	81a3      	strh	r3, [r4, #12]
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	b94b      	cbnz	r3, 80098d2 <__swsetup_r+0x7a>
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098c8:	d003      	beq.n	80098d2 <__swsetup_r+0x7a>
 80098ca:	4621      	mov	r1, r4
 80098cc:	4628      	mov	r0, r5
 80098ce:	f000 f83f 	bl	8009950 <__smakebuf_r>
 80098d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d6:	f013 0201 	ands.w	r2, r3, #1
 80098da:	d00a      	beq.n	80098f2 <__swsetup_r+0x9a>
 80098dc:	2200      	movs	r2, #0
 80098de:	60a2      	str	r2, [r4, #8]
 80098e0:	6962      	ldr	r2, [r4, #20]
 80098e2:	4252      	negs	r2, r2
 80098e4:	61a2      	str	r2, [r4, #24]
 80098e6:	6922      	ldr	r2, [r4, #16]
 80098e8:	b942      	cbnz	r2, 80098fc <__swsetup_r+0xa4>
 80098ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098ee:	d1c5      	bne.n	800987c <__swsetup_r+0x24>
 80098f0:	bd38      	pop	{r3, r4, r5, pc}
 80098f2:	0799      	lsls	r1, r3, #30
 80098f4:	bf58      	it	pl
 80098f6:	6962      	ldrpl	r2, [r4, #20]
 80098f8:	60a2      	str	r2, [r4, #8]
 80098fa:	e7f4      	b.n	80098e6 <__swsetup_r+0x8e>
 80098fc:	2000      	movs	r0, #0
 80098fe:	e7f7      	b.n	80098f0 <__swsetup_r+0x98>
 8009900:	20000034 	.word	0x20000034

08009904 <__swhatbuf_r>:
 8009904:	b570      	push	{r4, r5, r6, lr}
 8009906:	460c      	mov	r4, r1
 8009908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990c:	2900      	cmp	r1, #0
 800990e:	b096      	sub	sp, #88	@ 0x58
 8009910:	4615      	mov	r5, r2
 8009912:	461e      	mov	r6, r3
 8009914:	da0d      	bge.n	8009932 <__swhatbuf_r+0x2e>
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800991c:	f04f 0100 	mov.w	r1, #0
 8009920:	bf14      	ite	ne
 8009922:	2340      	movne	r3, #64	@ 0x40
 8009924:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009928:	2000      	movs	r0, #0
 800992a:	6031      	str	r1, [r6, #0]
 800992c:	602b      	str	r3, [r5, #0]
 800992e:	b016      	add	sp, #88	@ 0x58
 8009930:	bd70      	pop	{r4, r5, r6, pc}
 8009932:	466a      	mov	r2, sp
 8009934:	f000 f8c8 	bl	8009ac8 <_fstat_r>
 8009938:	2800      	cmp	r0, #0
 800993a:	dbec      	blt.n	8009916 <__swhatbuf_r+0x12>
 800993c:	9901      	ldr	r1, [sp, #4]
 800993e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009942:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009946:	4259      	negs	r1, r3
 8009948:	4159      	adcs	r1, r3
 800994a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800994e:	e7eb      	b.n	8009928 <__swhatbuf_r+0x24>

08009950 <__smakebuf_r>:
 8009950:	898b      	ldrh	r3, [r1, #12]
 8009952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009954:	079d      	lsls	r5, r3, #30
 8009956:	4606      	mov	r6, r0
 8009958:	460c      	mov	r4, r1
 800995a:	d507      	bpl.n	800996c <__smakebuf_r+0x1c>
 800995c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	2301      	movs	r3, #1
 8009966:	6163      	str	r3, [r4, #20]
 8009968:	b003      	add	sp, #12
 800996a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800996c:	ab01      	add	r3, sp, #4
 800996e:	466a      	mov	r2, sp
 8009970:	f7ff ffc8 	bl	8009904 <__swhatbuf_r>
 8009974:	9f00      	ldr	r7, [sp, #0]
 8009976:	4605      	mov	r5, r0
 8009978:	4639      	mov	r1, r7
 800997a:	4630      	mov	r0, r6
 800997c:	f7ff fbf8 	bl	8009170 <_malloc_r>
 8009980:	b948      	cbnz	r0, 8009996 <__smakebuf_r+0x46>
 8009982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009986:	059a      	lsls	r2, r3, #22
 8009988:	d4ee      	bmi.n	8009968 <__smakebuf_r+0x18>
 800998a:	f023 0303 	bic.w	r3, r3, #3
 800998e:	f043 0302 	orr.w	r3, r3, #2
 8009992:	81a3      	strh	r3, [r4, #12]
 8009994:	e7e2      	b.n	800995c <__smakebuf_r+0xc>
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	6020      	str	r0, [r4, #0]
 800999a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800999e:	81a3      	strh	r3, [r4, #12]
 80099a0:	9b01      	ldr	r3, [sp, #4]
 80099a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099a6:	b15b      	cbz	r3, 80099c0 <__smakebuf_r+0x70>
 80099a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ac:	4630      	mov	r0, r6
 80099ae:	f000 f825 	bl	80099fc <_isatty_r>
 80099b2:	b128      	cbz	r0, 80099c0 <__smakebuf_r+0x70>
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	f023 0303 	bic.w	r3, r3, #3
 80099ba:	f043 0301 	orr.w	r3, r3, #1
 80099be:	81a3      	strh	r3, [r4, #12]
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	431d      	orrs	r5, r3
 80099c4:	81a5      	strh	r5, [r4, #12]
 80099c6:	e7cf      	b.n	8009968 <__smakebuf_r+0x18>

080099c8 <memmove>:
 80099c8:	4288      	cmp	r0, r1
 80099ca:	b510      	push	{r4, lr}
 80099cc:	eb01 0402 	add.w	r4, r1, r2
 80099d0:	d902      	bls.n	80099d8 <memmove+0x10>
 80099d2:	4284      	cmp	r4, r0
 80099d4:	4623      	mov	r3, r4
 80099d6:	d807      	bhi.n	80099e8 <memmove+0x20>
 80099d8:	1e43      	subs	r3, r0, #1
 80099da:	42a1      	cmp	r1, r4
 80099dc:	d008      	beq.n	80099f0 <memmove+0x28>
 80099de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099e6:	e7f8      	b.n	80099da <memmove+0x12>
 80099e8:	4402      	add	r2, r0
 80099ea:	4601      	mov	r1, r0
 80099ec:	428a      	cmp	r2, r1
 80099ee:	d100      	bne.n	80099f2 <memmove+0x2a>
 80099f0:	bd10      	pop	{r4, pc}
 80099f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099fa:	e7f7      	b.n	80099ec <memmove+0x24>

080099fc <_isatty_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4d06      	ldr	r5, [pc, #24]	@ (8009a18 <_isatty_r+0x1c>)
 8009a00:	2300      	movs	r3, #0
 8009a02:	4604      	mov	r4, r0
 8009a04:	4608      	mov	r0, r1
 8009a06:	602b      	str	r3, [r5, #0]
 8009a08:	f7f8 fa03 	bl	8001e12 <_isatty>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_isatty_r+0x1a>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_isatty_r+0x1a>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	200004c0 	.word	0x200004c0

08009a1c <_lseek_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4d07      	ldr	r5, [pc, #28]	@ (8009a3c <_lseek_r+0x20>)
 8009a20:	4604      	mov	r4, r0
 8009a22:	4608      	mov	r0, r1
 8009a24:	4611      	mov	r1, r2
 8009a26:	2200      	movs	r2, #0
 8009a28:	602a      	str	r2, [r5, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f7f8 f9fc 	bl	8001e28 <_lseek>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_lseek_r+0x1e>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_lseek_r+0x1e>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	200004c0 	.word	0x200004c0

08009a40 <_read_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4d07      	ldr	r5, [pc, #28]	@ (8009a60 <_read_r+0x20>)
 8009a44:	4604      	mov	r4, r0
 8009a46:	4608      	mov	r0, r1
 8009a48:	4611      	mov	r1, r2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	602a      	str	r2, [r5, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f7f8 f98a 	bl	8001d68 <_read>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_read_r+0x1e>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_read_r+0x1e>
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	200004c0 	.word	0x200004c0

08009a64 <_sbrk_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4d06      	ldr	r5, [pc, #24]	@ (8009a80 <_sbrk_r+0x1c>)
 8009a68:	2300      	movs	r3, #0
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	602b      	str	r3, [r5, #0]
 8009a70:	f7f8 f9e8 	bl	8001e44 <_sbrk>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d102      	bne.n	8009a7e <_sbrk_r+0x1a>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	b103      	cbz	r3, 8009a7e <_sbrk_r+0x1a>
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	200004c0 	.word	0x200004c0

08009a84 <_write_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d07      	ldr	r5, [pc, #28]	@ (8009aa4 <_write_r+0x20>)
 8009a88:	4604      	mov	r4, r0
 8009a8a:	4608      	mov	r0, r1
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	2200      	movs	r2, #0
 8009a90:	602a      	str	r2, [r5, #0]
 8009a92:	461a      	mov	r2, r3
 8009a94:	f7f8 f985 	bl	8001da2 <_write>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d102      	bne.n	8009aa2 <_write_r+0x1e>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	b103      	cbz	r3, 8009aa2 <_write_r+0x1e>
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	200004c0 	.word	0x200004c0

08009aa8 <_close_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d06      	ldr	r5, [pc, #24]	@ (8009ac4 <_close_r+0x1c>)
 8009aac:	2300      	movs	r3, #0
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	602b      	str	r3, [r5, #0]
 8009ab4:	f7f8 f991 	bl	8001dda <_close>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <_close_r+0x1a>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	b103      	cbz	r3, 8009ac2 <_close_r+0x1a>
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	200004c0 	.word	0x200004c0

08009ac8 <_fstat_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d07      	ldr	r5, [pc, #28]	@ (8009ae8 <_fstat_r+0x20>)
 8009acc:	2300      	movs	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	f7f8 f98c 	bl	8001df2 <_fstat>
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	d102      	bne.n	8009ae4 <_fstat_r+0x1c>
 8009ade:	682b      	ldr	r3, [r5, #0]
 8009ae0:	b103      	cbz	r3, 8009ae4 <_fstat_r+0x1c>
 8009ae2:	6023      	str	r3, [r4, #0]
 8009ae4:	bd38      	pop	{r3, r4, r5, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200004c0 	.word	0x200004c0

08009aec <memcpy>:
 8009aec:	440a      	add	r2, r1
 8009aee:	4291      	cmp	r1, r2
 8009af0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009af4:	d100      	bne.n	8009af8 <memcpy+0xc>
 8009af6:	4770      	bx	lr
 8009af8:	b510      	push	{r4, lr}
 8009afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b02:	4291      	cmp	r1, r2
 8009b04:	d1f9      	bne.n	8009afa <memcpy+0xe>
 8009b06:	bd10      	pop	{r4, pc}

08009b08 <_free_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	d041      	beq.n	8009b94 <_free_r+0x8c>
 8009b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b14:	1f0c      	subs	r4, r1, #4
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfb8      	it	lt
 8009b1a:	18e4      	addlt	r4, r4, r3
 8009b1c:	f7ff fde0 	bl	80096e0 <__malloc_lock>
 8009b20:	4a1d      	ldr	r2, [pc, #116]	@ (8009b98 <_free_r+0x90>)
 8009b22:	6813      	ldr	r3, [r2, #0]
 8009b24:	b933      	cbnz	r3, 8009b34 <_free_r+0x2c>
 8009b26:	6063      	str	r3, [r4, #4]
 8009b28:	6014      	str	r4, [r2, #0]
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b30:	f7ff bddc 	b.w	80096ec <__malloc_unlock>
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	d908      	bls.n	8009b4a <_free_r+0x42>
 8009b38:	6820      	ldr	r0, [r4, #0]
 8009b3a:	1821      	adds	r1, r4, r0
 8009b3c:	428b      	cmp	r3, r1
 8009b3e:	bf01      	itttt	eq
 8009b40:	6819      	ldreq	r1, [r3, #0]
 8009b42:	685b      	ldreq	r3, [r3, #4]
 8009b44:	1809      	addeq	r1, r1, r0
 8009b46:	6021      	streq	r1, [r4, #0]
 8009b48:	e7ed      	b.n	8009b26 <_free_r+0x1e>
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	b10b      	cbz	r3, 8009b54 <_free_r+0x4c>
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	d9fa      	bls.n	8009b4a <_free_r+0x42>
 8009b54:	6811      	ldr	r1, [r2, #0]
 8009b56:	1850      	adds	r0, r2, r1
 8009b58:	42a0      	cmp	r0, r4
 8009b5a:	d10b      	bne.n	8009b74 <_free_r+0x6c>
 8009b5c:	6820      	ldr	r0, [r4, #0]
 8009b5e:	4401      	add	r1, r0
 8009b60:	1850      	adds	r0, r2, r1
 8009b62:	4283      	cmp	r3, r0
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	d1e0      	bne.n	8009b2a <_free_r+0x22>
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	6053      	str	r3, [r2, #4]
 8009b6e:	4408      	add	r0, r1
 8009b70:	6010      	str	r0, [r2, #0]
 8009b72:	e7da      	b.n	8009b2a <_free_r+0x22>
 8009b74:	d902      	bls.n	8009b7c <_free_r+0x74>
 8009b76:	230c      	movs	r3, #12
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	e7d6      	b.n	8009b2a <_free_r+0x22>
 8009b7c:	6820      	ldr	r0, [r4, #0]
 8009b7e:	1821      	adds	r1, r4, r0
 8009b80:	428b      	cmp	r3, r1
 8009b82:	bf04      	itt	eq
 8009b84:	6819      	ldreq	r1, [r3, #0]
 8009b86:	685b      	ldreq	r3, [r3, #4]
 8009b88:	6063      	str	r3, [r4, #4]
 8009b8a:	bf04      	itt	eq
 8009b8c:	1809      	addeq	r1, r1, r0
 8009b8e:	6021      	streq	r1, [r4, #0]
 8009b90:	6054      	str	r4, [r2, #4]
 8009b92:	e7ca      	b.n	8009b2a <_free_r+0x22>
 8009b94:	bd38      	pop	{r3, r4, r5, pc}
 8009b96:	bf00      	nop
 8009b98:	200004bc 	.word	0x200004bc

08009b9c <_malloc_usable_size_r>:
 8009b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba0:	1f18      	subs	r0, r3, #4
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	bfbc      	itt	lt
 8009ba6:	580b      	ldrlt	r3, [r1, r0]
 8009ba8:	18c0      	addlt	r0, r0, r3
 8009baa:	4770      	bx	lr

08009bac <_init>:
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	bf00      	nop
 8009bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb2:	bc08      	pop	{r3}
 8009bb4:	469e      	mov	lr, r3
 8009bb6:	4770      	bx	lr

08009bb8 <_fini>:
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	bf00      	nop
 8009bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bbe:	bc08      	pop	{r3}
 8009bc0:	469e      	mov	lr, r3
 8009bc2:	4770      	bx	lr
