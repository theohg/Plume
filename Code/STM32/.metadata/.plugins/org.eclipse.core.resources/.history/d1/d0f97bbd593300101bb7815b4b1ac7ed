/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "i2c.h"
#include "ipcc.h"
#include "memorymap.h"
#include "rtc.h"
#include "spi.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdbool.h>                // For boolean type
#include <stdio.h>                  // For printf
#include "WS2812_SPI.h"             // For WS2812 LED control
#include "drv8214.h"                // For DRV8214 driver control
#include "drv8214_platform_i2c.h"   // For I2C functions
#include "TCA9548.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
// ADC settings
#define VREF_MCU                    3.3f     // ADC Reference Voltage (e.g., 3.3V)
#define ADC_RESOLUTION              4095.0f  // For 12-bit ADC (2^12 - 1)
#define R502_VALUE                  3000.0f  // 3k Ohm
#define R503_VALUE                  10000.0f // 10k Ohm
#define BATTERY_SENSE_DIVIDER_RATIO ((R502_VALUE + R503_VALUE) / R503_VALUE)

// Driver and motor configuration
#define NUM_DRIVERS 1 // Number of DRV8214 drivers in the system
#define IPROPI_RESISTOR 680 // Value in Ohms of the resistor connected to IPROPI pin
#define NUM_RIPPLES 6 // Number of current ripples per output shaft revolution (= nb of ripples per motor revolution x reduction ratio)
#define MOTOR_INTERNAL_RESISTANCE 20 // Internal resistance of the motor in Ohms
#define MOTOR_REDUCTION_RATIO 26 // Reduction ratio of the motor
#define MAX_MOTOR_RPM 1154 // Maximum speed of the motor in RPM 1154
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
// Battery ADC
extern TIM_HandleTypeDef htim2;
extern ADC_HandleTypeDef hadc1;
volatile uint8_t g_measure_battery_flag = 0;
float g_battery_voltage = 0.0f;

// Button press detection
volatile bool wakeup_event = false;
volatile uint8_t button_ID = 0;

// Module configuration
uint16_t full_range_ripples = 29100;
float full_range_mm = 4.0;
float half_range_ripples = full_range_ripples / 2;
float nb_ripples_per_mm = full_range_ripples / full_range_mm;

// MUX
i2c_mux_t i2c_multiplexer; // Declare the multiplexer control structure
uint8_t i2c_channel_to_use = 1; // Example channel

// Global variables
//static uint16_t speed = MAX_MOTOR_RPM * 0.7;
//static uint16_t speed_low = MAX_MOTOR_RPM*0.5;
//static float voltage = 2.0;
//static float current = 0.2;
//static int speed_step = 5; // speed_step ranges from 1 (lowest) to 5 (full speed)
//static float nb_of_steps = 5;
//static uint8_t faults = 0;
//static uint32_t color = 0;
uint16_t ripple_target = 27000;    // Number of ripples to move when in ripple mode
//static const bool stops_after_ripples = true;   // If true, the motor will stop when ripple_target is reached
//static const bool stops_at_stall = true;        // If true, the motor will stop when a stall is detected
uint8_t i2c_channel = 1;           // I2C channel to select
bool back_and_forth = 0;           // If true, the motor will move back and forth
bool use_ripple_mode = 0;          // Set to true to use ripple-based motion
bool stopped = true;
bool direction_changed = false;
const unsigned long led_300 = 300; // LED ON in milliseconds for short pules
unsigned long redStartTime = 0;
bool isRedActive = false;
uint32_t savedColor = 0;  // To store the previous LED color
bool stalled = false;
bool channel_mode = false;
bool speed_mode = false;
bool direction = false;
float target_position = 0.0;
float module_position = 0.0;
bool last_direction;
bool is_moving = false;
uint16_t last_ripple_count = 0;
uint16_t current_ripple_count = 0;

// Create an array of DRV8214 objects
DRV8214 drivers[NUM_DRIVERS] = {
  DRV8214(DRV8214_I2C_ADDR_00, 0, IPROPI_RESISTOR, NUM_RIPPLES, MOTOR_INTERNAL_RESISTANCE, MOTOR_REDUCTION_RATIO, MAX_MOTOR_RPM)
};

// Create an array of configuration structs
DRV8214_Config driver_configs[NUM_DRIVERS];

// Create a TCA9548 object
//TCA9548 multiplexer = TCA9548(0x70);
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* IPCC initialisation */
  MX_IPCC_Init();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_I2C1_Init();
  MX_I2C3_Init();
  MX_RTC_Init();
  MX_TIM2_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
  //HAL_GPIO_WritePin(MUX_RESET_GPIO_Port, MUX_RESET_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET); 

  // Start the timer in interrupt mode
  // Example: if you want to measure every 5 seconds, and your timer is TIM2
  // Configure TIM2 in CubeMX for a 5-second period (e.g., Prescaler & Period values)
  // and enable its update interrupt.
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) { Error_Handler();}

  // Pass the HAL I2C handle to your I2C platform layer
  drv8214_i2c_set_handle(&hi2c1); // &hi2c1 is defined in Core/Src/i2c.c and declared in Core/Inc/i2c.h

  printf("\nInitializing PCA9546A multiplexer...\n");
  // Initialize the I2C multiplexer structure
  i2c_multiplexer.hi2c = &hi2c1; // Assign the I2C peripheral handle
  i2c_multiplexer.rst_port = MUX_RESET_GPIO_Port;  // From main.h
  i2c_multiplexer.rst_pin = MUX_RESET_Pin;         // From main.h
  i2c_multiplexer.addr_offset = 0;

  printf("Selecting I2C multiplexer channel %d...", i2c_channel_to_use);
  if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
      printf(" Channel %d selected successfully!\n", i2c_channel_to_use);
  } else {
      printf("Failed to select channel %d on I2C multiplexer.\n", i2c_channel_to_use);
      // Handle error: cannot communicate with devices on this channel
  }

  printf("Initializing DRV8214 drivers...\n");
	for (int i = 0; i < NUM_DRIVERS; i++) {  // Initialize each driver
    driver_configs[i] = DRV8214_Config();
    if (i == 0) { driver_configs[i].verbose = true; } // Set verbose only for the first driver
    //drivers[i].setDebugStream(console); // Let the driverâ€™s library know which stream to use for debug
    drivers[i].init(driver_configs[i]);
    drivers[i].resetFaultFlags();
  }
  printf("\nDRV8214 drivers initialized successfully!\n");

  // Blink the LED to indicate startup finished
  WS2812_SetColor(255, 0, 0, 100);
  HAL_Delay(330);
  WS2812_SetColor(0, 255, 0, 100);
  HAL_Delay(330);
  WS2812_SetColor(0, 0, 255, 100);
  HAL_Delay(330);
  WS2812_SetColor(0, 0, 0, 100); // Turn off the LED

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    

    if (wakeup_event) {
      // Process the wakeup event (button press)
      printf("Button press detected! ID: %d\r\n", button_ID);
      wakeup_event = false; // Reset flag AFTER processing it
      // display LED color based on button press
      switch (button_ID) {
        case 1:
          WS2812_SetColor(255, 0, 0, 100); // Red
          break;
        case 2:
          WS2812_SetColor(0, 255, 0, 100); // Green
          break;
        case 3:
          WS2812_SetColor(0, 0, 255, 100); // Blue
          break;
        case 4:
          WS2812_SetColor(255, 255, 0, 100); // Yellow
          break;
        default:
          WS2812_SetColor(0, 0, 0, 100); // Off
          break;
      }
      HAL_Delay(500);
    }

    if (g_measure_battery_flag)
    {
        g_measure_battery_flag = 0; // Reset the flag

        // 1. Enable BAT_SENSE circuitry
        HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_SET);

        // 2. Wait for voltage to settle (C504 charging)
        // Tau = R_eff * C = 2.31kOhm * 100nF = 0.231 ms. 5*Tau ~ 1.15 ms.
        // Let's use a slightly larger delay for safety margin.
        HAL_Delay(10); 

        // 3. Start ADC conversion
        if (HAL_ADC_Start(&hadc1) != HAL_OK)
        {
            printf("ADC Start Error\r\n");
            // Optionally turn off BAT_SENSE_EN here if error occurs early
            HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
            // Handle error
        }
        else
        {
            // 4. Poll for ADC conversion complete (timeout e.g., 100ms)
            if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
            {
                // 5. Read ADC value
                uint32_t adc_raw_value = HAL_ADC_GetValue(&hadc1);

                // 6. Calculate voltage
                // V_sense = (ADC_raw / ADC_max_resolution) * V_ref
                float v_sense = ((float)adc_raw_value / ADC_RESOLUTION) * VREF_MCU;
                // VBAT = V_sense * (R502 + R503) / R503
                g_battery_voltage = v_sense * BATTERY_SENSE_DIVIDER_RATIO;

                // For debugging:
                // Convert battery voltage to millivolts (integer)
                uint32_t battery_millivolts = (uint32_t)(g_battery_voltage * 1000.0f);

                // Simple printf for debugging
                printf("ADC Raw: %lu, VBAT_mV: %lu\r\n",
                       adc_raw_value,
                       battery_millivolts);
            }
            else
            {
                printf("ADC Poll Timeout\r\n");
                // Handle timeout
            }
            // Stop ADC (important if not in continuous mode, good practice anyway)
            HAL_ADC_Stop(&hadc1);
        }

        // 7. Disable BAT_SENSE circuitry to save power
        HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);

        // Now g_battery_voltage holds the latest reading.
        // You can use it for low battery checks, display, etc.
    }


//	  // Prepare to enter Stop 2 mode
//	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // Ensure LED is OFF before sleep
//
//	  printf("Entering Stop 2 Mode...\r\n");
//	  HAL_Delay(10); // Allow printf to complete if UART is used
//
//	  /* Clear any pending EXTI Line flag for your button.
//		 This is CRITICAL to prevent immediate wakeup if the interrupt fired
//		 just before trying to sleep or if it wasn't cleared properly. */
//	  // Replace BUTTON_EXTI_Pin with your actual button GPIO_PIN_X
//	  __HAL_GPIO_EXTI_CLEAR_IT(BUTTON1_Pin);
//	  // If you have multiple EXTI sources, clear them specifically or be very careful.
//
//	  /* At this point, also ensure no other unintended wakeup sources are active
//		 or have pending flags (e.g., RTC Alarm, LPUART RXNE if enabled for wakeup) */
//
//	  /* Suspend Tick increment to prevent wakeup by Systick interrupt. */
//	  HAL_SuspendTick();
//
//	  /* Enter Stop 2 Mode - MCU will stop here until an EXTI or other enabled wakeup event */
//	  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
//
//	  /* --- WAKE UP from STOP 2 --- */
//	  // Execution resumes here after wakeup
//
//	  /* Resume Tick interrupt */
//	  HAL_ResumeTick();
//
//	  /* Reconfigure the System Clock after waking from STOP_MODE */
//	  /* This is important because STOP mode might switch to a low-power oscillator (MSI or HSI).
//		 SystemClock_Config() usually restores your PLL and main clock settings. */
//	  SystemClock_Config();
//
//	  // If we woke up, it was either due to the button (wakeup_event will be true by ISR)
//	  // or some other configured wakeup source.
//	  // The original `wakeup_event = true;` here was the main bug for the loop.
//	  // Now, the `if (wakeup_event)` at the top of the loop handles it.
//
//	  if (!wakeup_event) {
//		  // This means we woke up from something OTHER than the button press.
//		  // This could be another EXTI, RTC, etc., or a spurious wakeup if flags weren't cleared.
//		  printf("Woke up from Stop 2 Mode (Not by button)...\r\n");
//		  // You might want a small delay or specific handling here if this case is unexpected
//		  // and happens frequently.
//	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 30;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}

/* USER CODE BEGIN 4 */
/**
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == BUTTON1_Pin) // Replace YOUR_BUTTON_PIN with the actual pin, e.g., GPIO_PIN_13
  {
	  wakeup_event = true; // Set flag for next loop iteration
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
	  button_ID = 1;
  } else if (GPIO_Pin == BUTTON2_Pin) {
	  wakeup_event = true; // Set flag for next loop iteration
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
	  button_ID = 2;
  }
  else if (GPIO_Pin == BUTTON3_Pin) {
	  wakeup_event = true; // Set flag for next loop iteration
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
	  button_ID = 3;
  }
  else if (GPIO_Pin == BUTTON4_Pin) {
	  wakeup_event = true; // Set flag for next loop iteration
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
	  button_ID = 4;
  }
  // You can add else if blocks for other EXTI pins if needed
  // else if (GPIO_Pin == OTHER_EXTI_PIN) { ... }
}

int _write(int file, char *ptr, int len)
{
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
  {
	  ITM_SendChar(*ptr++);
  }
  return len;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  // Check which Systick timer is generating the interrupt
  if (htim->Instance == TIM1) { // Or whatever your HAL_IncTick uses
    HAL_IncTick();
  }
  // Check if it's our battery measurement timer (e.g., TIM2)
  else if (htim->Instance == htim2.Instance) // Check against the specific timer instance
  {
    g_measure_battery_flag = 1;
  }
  // Add other timer callbacks if you have them
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
