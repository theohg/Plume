
PlumeSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015534  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000359c  08015678  08015678  00016678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018c14  08018c14  00019c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08018c1c  08018c1c  00019c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018c24  08018c24  00019c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000258  20000008  08018c28  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005cc  20000260  08018e80  0001a260  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000082c  08018e80  0001a82c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001a260  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003999c  00000000  00000000  0001a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000646d  00000000  00000000  00053c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003138  00000000  00000000  0005a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002636  00000000  00000000  0005d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ce67  00000000  00000000  0005f80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003461a  00000000  00000000  0008c675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010f22c  00000000  00000000  000c0c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cfebb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e640  00000000  00000000  001cff00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000083  00000000  00000000  001de540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000260 	.word	0x20000260
 800015c:	00000000 	.word	0x00000000
 8000160:	0801565c 	.word	0x0801565c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000264 	.word	0x20000264
 800017c:	0801565c 	.word	0x0801565c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bac:	f000 b988 	b.w	8000ec0 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	468e      	mov	lr, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	4688      	mov	r8, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d962      	bls.n	8000ca4 <__udivmoddi4+0xdc>
 8000bde:	fab2 f682 	clz	r6, r2
 8000be2:	b14e      	cbz	r6, 8000bf8 <__udivmoddi4+0x30>
 8000be4:	f1c6 0320 	rsb	r3, r6, #32
 8000be8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bec:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf0:	40b7      	lsls	r7, r6
 8000bf2:	ea43 0808 	orr.w	r8, r3, r8
 8000bf6:	40b4      	lsls	r4, r6
 8000bf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c04:	0c23      	lsrs	r3, r4, #16
 8000c06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c1c:	f080 80ea 	bcs.w	8000df4 <__udivmoddi4+0x22c>
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f240 80e7 	bls.w	8000df4 <__udivmoddi4+0x22c>
 8000c26:	3902      	subs	r1, #2
 8000c28:	443b      	add	r3, r7
 8000c2a:	1a9a      	subs	r2, r3, r2
 8000c2c:	b2a3      	uxth	r3, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3e:	459c      	cmp	ip, r3
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0x8e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c48:	f080 80d6 	bcs.w	8000df8 <__udivmoddi4+0x230>
 8000c4c:	459c      	cmp	ip, r3
 8000c4e:	f240 80d3 	bls.w	8000df8 <__udivmoddi4+0x230>
 8000c52:	443b      	add	r3, r7
 8000c54:	3802      	subs	r0, #2
 8000c56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5a:	eba3 030c 	sub.w	r3, r3, ip
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11d      	cbz	r5, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40f3      	lsrs	r3, r6
 8000c64:	2200      	movs	r2, #0
 8000c66:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d905      	bls.n	8000c7e <__udivmoddi4+0xb6>
 8000c72:	b10d      	cbz	r5, 8000c78 <__udivmoddi4+0xb0>
 8000c74:	e9c5 0100 	strd	r0, r1, [r5]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	e7f5      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000c7e:	fab3 f183 	clz	r1, r3
 8000c82:	2900      	cmp	r1, #0
 8000c84:	d146      	bne.n	8000d14 <__udivmoddi4+0x14c>
 8000c86:	4573      	cmp	r3, lr
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xc8>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 8105 	bhi.w	8000e9a <__udivmoddi4+0x2d2>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4690      	mov	r8, r2
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e5      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000c9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000ca2:	e7e2      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	f000 8090 	beq.w	8000dca <__udivmoddi4+0x202>
 8000caa:	fab2 f682 	clz	r6, r2
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	f040 80a4 	bne.w	8000dfc <__udivmoddi4+0x234>
 8000cb4:	1a8a      	subs	r2, r1, r2
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	b280      	uxth	r0, r0
 8000cbe:	b2bc      	uxth	r4, r7
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cce:	fb04 f20c 	mul.w	r2, r4, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x11e>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x11c>
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	f200 80e0 	bhi.w	8000ea4 <__udivmoddi4+0x2dc>
 8000ce4:	46c4      	mov	ip, r8
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cf0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cf4:	fb02 f404 	mul.w	r4, r2, r4
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x144>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x142>
 8000d04:	429c      	cmp	r4, r3
 8000d06:	f200 80ca 	bhi.w	8000e9e <__udivmoddi4+0x2d6>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d14:	f1c1 0620 	rsb	r6, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	fa0e f401 	lsl.w	r4, lr, r1
 8000d24:	fa20 f306 	lsr.w	r3, r0, r6
 8000d28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fa00 f801 	lsl.w	r8, r0, r1
 8000d36:	fa1f fc87 	uxth.w	ip, r7
 8000d3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x1a0>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d5a:	f080 809c 	bcs.w	8000e96 <__udivmoddi4+0x2ce>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f240 8099 	bls.w	8000e96 <__udivmoddi4+0x2ce>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	fa1f fe83 	uxth.w	lr, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d80:	45a4      	cmp	ip, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1ce>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d8a:	f080 8082 	bcs.w	8000e92 <__udivmoddi4+0x2ca>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d97f      	bls.n	8000e92 <__udivmoddi4+0x2ca>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	443c      	add	r4, r7
 8000d96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000da2:	4564      	cmp	r4, ip
 8000da4:	4673      	mov	r3, lr
 8000da6:	46e1      	mov	r9, ip
 8000da8:	d362      	bcc.n	8000e70 <__udivmoddi4+0x2a8>
 8000daa:	d05f      	beq.n	8000e6c <__udivmoddi4+0x2a4>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x1fe>
 8000dae:	ebb8 0203 	subs.w	r2, r8, r3
 8000db2:	eb64 0409 	sbc.w	r4, r4, r9
 8000db6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dba:	fa22 f301 	lsr.w	r3, r2, r1
 8000dbe:	431e      	orrs	r6, r3
 8000dc0:	40cc      	lsrs	r4, r1
 8000dc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e74f      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000dca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dce:	0c01      	lsrs	r1, r0, #16
 8000dd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dd4:	b280      	uxth	r0, r0
 8000dd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4638      	mov	r0, r7
 8000dde:	463c      	mov	r4, r7
 8000de0:	46b8      	mov	r8, r7
 8000de2:	46be      	mov	lr, r7
 8000de4:	2620      	movs	r6, #32
 8000de6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dea:	eba2 0208 	sub.w	r2, r2, r8
 8000dee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000df2:	e766      	b.n	8000cc2 <__udivmoddi4+0xfa>
 8000df4:	4601      	mov	r1, r0
 8000df6:	e718      	b.n	8000c2a <__udivmoddi4+0x62>
 8000df8:	4610      	mov	r0, r2
 8000dfa:	e72c      	b.n	8000c56 <__udivmoddi4+0x8e>
 8000dfc:	f1c6 0220 	rsb	r2, r6, #32
 8000e00:	fa2e f302 	lsr.w	r3, lr, r2
 8000e04:	40b7      	lsls	r7, r6
 8000e06:	40b1      	lsls	r1, r6
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	430a      	orrs	r2, r1
 8000e12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e16:	b2bc      	uxth	r4, r7
 8000e18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb08 f904 	mul.w	r9, r8, r4
 8000e26:	40b0      	lsls	r0, r6
 8000e28:	4589      	cmp	r9, r1
 8000e2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e2e:	b280      	uxth	r0, r0
 8000e30:	d93e      	bls.n	8000eb0 <__udivmoddi4+0x2e8>
 8000e32:	1879      	adds	r1, r7, r1
 8000e34:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e38:	d201      	bcs.n	8000e3e <__udivmoddi4+0x276>
 8000e3a:	4589      	cmp	r9, r1
 8000e3c:	d81f      	bhi.n	8000e7e <__udivmoddi4+0x2b6>
 8000e3e:	eba1 0109 	sub.w	r1, r1, r9
 8000e42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e46:	fb09 f804 	mul.w	r8, r9, r4
 8000e4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e4e:	b292      	uxth	r2, r2
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d229      	bcs.n	8000eac <__udivmoddi4+0x2e4>
 8000e58:	18ba      	adds	r2, r7, r2
 8000e5a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e5e:	d2c4      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e60:	4542      	cmp	r2, r8
 8000e62:	d2c2      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e64:	f1a9 0102 	sub.w	r1, r9, #2
 8000e68:	443a      	add	r2, r7
 8000e6a:	e7be      	b.n	8000dea <__udivmoddi4+0x222>
 8000e6c:	45f0      	cmp	r8, lr
 8000e6e:	d29d      	bcs.n	8000dac <__udivmoddi4+0x1e4>
 8000e70:	ebbe 0302 	subs.w	r3, lr, r2
 8000e74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e78:	3801      	subs	r0, #1
 8000e7a:	46e1      	mov	r9, ip
 8000e7c:	e796      	b.n	8000dac <__udivmoddi4+0x1e4>
 8000e7e:	eba7 0909 	sub.w	r9, r7, r9
 8000e82:	4449      	add	r1, r9
 8000e84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8c:	fb09 f804 	mul.w	r8, r9, r4
 8000e90:	e7db      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e92:	4673      	mov	r3, lr
 8000e94:	e77f      	b.n	8000d96 <__udivmoddi4+0x1ce>
 8000e96:	4650      	mov	r0, sl
 8000e98:	e766      	b.n	8000d68 <__udivmoddi4+0x1a0>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e6fd      	b.n	8000c9a <__udivmoddi4+0xd2>
 8000e9e:	443b      	add	r3, r7
 8000ea0:	3a02      	subs	r2, #2
 8000ea2:	e733      	b.n	8000d0c <__udivmoddi4+0x144>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	443b      	add	r3, r7
 8000eaa:	e71c      	b.n	8000ce6 <__udivmoddi4+0x11e>
 8000eac:	4649      	mov	r1, r9
 8000eae:	e79c      	b.n	8000dea <__udivmoddi4+0x222>
 8000eb0:	eba1 0109 	sub.w	r1, r1, r9
 8000eb4:	46c4      	mov	ip, r8
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fb09 f804 	mul.w	r8, r9, r4
 8000ebe:	e7c4      	b.n	8000e4a <__udivmoddi4+0x282>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <_ZL20ws2812_send_spi_datahhh>:

// Static variable to track if 5V power for the LED is currently on
static uint8_t s_is_led_power_on = 0;

// Internal helper function to send the SPI data for one LED
static void ws2812_send_spi_data(uint8_t r_scaled, uint8_t g_scaled, uint8_t b_scaled) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	71bb      	strb	r3, [r7, #6]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	717b      	strb	r3, [r7, #5]
    uint32_t color_data = ((uint32_t)g_scaled << 16) | ((uint32_t)r_scaled << 8) | (uint32_t)b_scaled;
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	797b      	ldrb	r3, [r7, #5]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	623b      	str	r3, [r7, #32]
    uint8_t spi_tx_buffer[24]; // Buffer to hold the 24 * 3-bit encoded values

    // This encoding is for the Controllerstech method with ~2.4MHz SPI clock
    for (int i = 0; i < 24; i++) { // Iterate 24 times for 24 WS2812B data bits
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eea:	e019      	b.n	8000f20 <_ZL20ws2812_send_spi_datahhh+0x5c>
        if ((color_data >> (23 - i)) & 0x01) { // Check MSB first
 8000eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eee:	f1c3 0317 	rsb	r3, r3, #23
 8000ef2:	6a3a      	ldr	r2, [r7, #32]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <_ZL20ws2812_send_spi_datahhh+0x4a>
            spi_tx_buffer[i] = 0b00000110; // WS2812B '1' (last 3 bits are 110)
 8000f00:	f107 0208 	add.w	r2, r7, #8
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	4413      	add	r3, r2
 8000f08:	2206      	movs	r2, #6
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	e005      	b.n	8000f1a <_ZL20ws2812_send_spi_datahhh+0x56>
        } else {
            spi_tx_buffer[i] = 0b00000100; // WS2812B '0' (last 3 bits are 100)
 8000f0e:	f107 0208 	add.w	r2, r7, #8
 8000f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f14:	4413      	add	r3, r2
 8000f16:	2204      	movs	r2, #4
 8000f18:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 24; i++) { // Iterate 24 times for 24 WS2812B data bits
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	2b17      	cmp	r3, #23
 8000f24:	dde2      	ble.n	8000eec <_ZL20ws2812_send_spi_datahhh+0x28>
        }
    }

    // Blocking SPI transmit
    HAL_SPI_Transmit(&hspi2, spi_tx_buffer, 24, 100); // 100ms timeout
 8000f26:	f107 0108 	add.w	r1, r7, #8
 8000f2a:	2364      	movs	r3, #100	@ 0x64
 8000f2c:	2218      	movs	r2, #24
 8000f2e:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <_ZL20ws2812_send_spi_datahhh+0x78>)
 8000f30:	f00f f9af 	bl	8010292 <HAL_SPI_Transmit>
}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	@ 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200004e0 	.word	0x200004e0

08000f40 <_Z15WS2812_SetColorhhhh>:
 * @param r Red component (0-255)
 * @param g Green component (0-255)
 * @param b Blue component (0-255)
 * @param brightness_val Brightness (0-100). If 0, LED will be turned off and power disabled.
 */
void WS2812_SetColor(uint8_t r, uint8_t g, uint8_t b, uint8_t brightness_val) {
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4604      	mov	r4, r0
 8000f48:	4608      	mov	r0, r1
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4623      	mov	r3, r4
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	4603      	mov	r3, r0
 8000f54:	71bb      	strb	r3, [r7, #6]
 8000f56:	460b      	mov	r3, r1
 8000f58:	717b      	strb	r3, [r7, #5]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	713b      	strb	r3, [r7, #4]
    uint8_t r_scaled, g_scaled, b_scaled;

    if (brightness_val == 0 || (r == 0 && g == 0 && b == 0)) {
 8000f5e:	793b      	ldrb	r3, [r7, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d008      	beq.n	8000f76 <_Z15WS2812_SetColorhhhh+0x36>
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d11a      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d117      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d114      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
        // Turn LED completely OFF and disable 5V power
        if (s_is_led_power_on) {
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d049      	beq.n	8001012 <_Z15WS2812_SetColorhhhh+0xd2>
            // Send all zeros to ensure LED is off before cutting power,
            // though just cutting power after last command would also work.
            // This is more explicit.
            ws2812_send_spi_data(0, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ff9e 	bl	8000ec4 <_ZL20ws2812_send_spi_datahhh>
            HAL_Delay(1); // Ensure data is latched/reset (MOSI idle low > 50us)
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f009 fca9 	bl	800a8e0 <HAL_Delay>
            HAL_GPIO_WritePin(LED_5V_EN_GPIO_Port, LED_5V_EN_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2104      	movs	r1, #4
 8000f92:	4823      	ldr	r0, [pc, #140]	@ (8001020 <_Z15WS2812_SetColorhhhh+0xe0>)
 8000f94:	f00b fc78 	bl	800c888 <HAL_GPIO_WritePin>
            s_is_led_power_on = 0;
 8000f98:	4b20      	ldr	r3, [pc, #128]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
        }
        return; // Nothing more to do if brightness is 0 or color is black
 8000f9e:	e038      	b.n	8001012 <_Z15WS2812_SetColorhhhh+0xd2>
    }

    // Ensure 5V power is ON if it wasn't already
    if (!s_is_led_power_on) {
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10a      	bne.n	8000fbe <_Z15WS2812_SetColorhhhh+0x7e>
        HAL_GPIO_WritePin(LED_5V_EN_GPIO_Port, LED_5V_EN_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2104      	movs	r1, #4
 8000fac:	481c      	ldr	r0, [pc, #112]	@ (8001020 <_Z15WS2812_SetColorhhhh+0xe0>)
 8000fae:	f00b fc6b 	bl	800c888 <HAL_GPIO_WritePin>
        HAL_Delay(1); // Allow power to stabilize (adjust if too long/short)
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f009 fc94 	bl	800a8e0 <HAL_Delay>
        s_is_led_power_on = 1;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
    }

    // Clamp brightness
    if (brightness_val > 100) {
 8000fbe:	793b      	ldrb	r3, [r7, #4]
 8000fc0:	2b64      	cmp	r3, #100	@ 0x64
 8000fc2:	d901      	bls.n	8000fc8 <_Z15WS2812_SetColorhhhh+0x88>
        brightness_val = 100;
 8000fc4:	2364      	movs	r3, #100	@ 0x64
 8000fc6:	713b      	strb	r3, [r7, #4]
    }

    // Scale colors by brightness
    // (uint32_t) cast is important to avoid overflow during multiplication before division
    r_scaled = (uint8_t)(((uint32_t)r * brightness_val) / 100);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	793a      	ldrb	r2, [r7, #4]
 8000fcc:	fb02 f303 	mul.w	r3, r2, r3
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	73fb      	strb	r3, [r7, #15]
    g_scaled = (uint8_t)(((uint32_t)g * brightness_val) / 100);
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	793a      	ldrb	r2, [r7, #4]
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe8:	095b      	lsrs	r3, r3, #5
 8000fea:	73bb      	strb	r3, [r7, #14]
    b_scaled = (uint8_t)(((uint32_t)b * brightness_val) / 100);
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	793a      	ldrb	r2, [r7, #4]
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	737b      	strb	r3, [r7, #13]

    ws2812_send_spi_data(r_scaled, g_scaled, b_scaled);
 8000ffe:	7b7a      	ldrb	r2, [r7, #13]
 8001000:	7bb9      	ldrb	r1, [r7, #14]
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <_ZL20ws2812_send_spi_datahhh>
    // After sending data, a low signal on DIN for >50µs is needed to latch the data
    // and reset the internal shift registers for the next data.
    // HAL_SPI_Transmit is blocking. After it finishes, the SPI MOSI line will
    // typically return to its idle state (which should be low for CPOL=Low).
    // A HAL_Delay(1) is much longer than 50µs and will ensure this latch/reset.
    HAL_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f009 fc68 	bl	800a8e0 <HAL_Delay>
 8001010:	e000      	b.n	8001014 <_Z15WS2812_SetColorhhhh+0xd4>
        return; // Nothing more to do if brightness is 0 or color is black
 8001012:	bf00      	nop
    // Power (PC2) remains ON until explicitly turned off by calling with brightness 0 or black.
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	2000027c 	.word	0x2000027c
 8001020:	48000800 	.word	0x48000800
 8001024:	51eb851f 	.word	0x51eb851f

08001028 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001044:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8001062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001066:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	43db      	mvns	r3, r3
 800106c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001070:	4013      	ands	r3, r2
 8001072:	64cb      	str	r3, [r1, #76]	@ 0x4c
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001096:	4b29      	ldr	r3, [pc, #164]	@ (800113c <MX_ADC1_Init+0xbc>)
 8001098:	4a29      	ldr	r2, [pc, #164]	@ (8001140 <MX_ADC1_Init+0xc0>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <MX_ADC1_Init+0xbc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a2:	4b26      	ldr	r3, [pc, #152]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ae:	4b23      	ldr	r3, [pc, #140]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010b6:	2204      	movs	r2, #4
 80010b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010f8:	f009 fe10 	bl	800ad1c <HAL_ADC_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001102:	f001 ffb9 	bl	8003078 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_ADC1_Init+0xc4>)
 8001108:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110a:	2306      	movs	r3, #6
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800110e:	2304      	movs	r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001112:	237f      	movs	r3, #127	@ 0x7f
 8001114:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001116:	2304      	movs	r3, #4
 8001118:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_ADC1_Init+0xbc>)
 8001124:	f00a f8ac 	bl	800b280 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800112e:	f001 ffa3 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000280 	.word	0x20000280
 8001140:	50040000 	.word	0x50040000
 8001144:	19200040 	.word	0x19200040

08001148 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b09c      	sub	sp, #112	@ 0x70
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2250      	movs	r2, #80	@ 0x50
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f012 f931 	bl	80133d0 <memset>
  if(adcHandle->Instance==ADC1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <HAL_ADC_MspInit+0x9c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d131      	bne.n	80011dc <HAL_ADC_MspInit+0x94>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800117c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800117e:	2318      	movs	r3, #24
 8001180:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001182:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001186:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001188:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800118c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800118e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001192:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8001194:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001198:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800119a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800119e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00e fb40 	bl	800f82a <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 80011b0:	f001 ff62 	bl	8003078 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011b8:	f7ff ff36 	bl	8001028 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff ff33 	bl	8001028 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BAT_SENSE_Pin;
 80011c2:	2302      	movs	r3, #2
 80011c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c6:	2303      	movs	r3, #3
 80011c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(BAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d8:	f00b f8f0 	bl	800c3bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011dc:	bf00      	nop
 80011de:	3770      	adds	r7, #112	@ 0x70
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	50040000 	.word	0x50040000

080011e8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <HAL_ADC_MspDeInit+0x2c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d108      	bne.n	800120c <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80011fa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011fe:	f7ff ff2c 	bl	800105a <LL_AHB2_GRP1_DisableClock>

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    HAL_GPIO_DeInit(BAT_SENSE_GPIO_Port, BAT_SENSE_Pin);
 8001202:	2102      	movs	r1, #2
 8001204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001208:	f00b fa48 	bl	800c69c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	50040000 	.word	0x50040000

08001218 <LL_AHB1_GRP1_EnableClock>:
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001224:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4313      	orrs	r3, r2
 800122e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001234:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123c:	68fb      	ldr	r3, [r7, #12]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800124e:	2004      	movs	r0, #4
 8001250:	f7ff ffe2 	bl	8001218 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff ffdf 	bl	8001218 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	200b      	movs	r0, #11
 8001260:	f00a fdef 	bl	800be42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001264:	200b      	movs	r0, #11
 8001266:	f00a fe06 	bl	800be76 <HAL_NVIC_EnableIRQ>

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}

0800126e <LL_AHB2_GRP1_EnableClock>:
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800127a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800127c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4313      	orrs	r3, r2
 8001284:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800128a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4013      	ands	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff ffda 	bl	800126e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	2004      	movs	r0, #4
 80012bc:	f7ff ffd7 	bl	800126e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	2002      	movs	r0, #2
 80012c2:	f7ff ffd4 	bl	800126e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	2080      	movs	r0, #128	@ 0x80
 80012c8:	f7ff ffd1 	bl	800126e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012cc:	2008      	movs	r0, #8
 80012ce:	f7ff ffce 	bl	800126e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff ffcb 	bl	800126e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN2_Pin|EN1_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	210c      	movs	r1, #12
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e0:	f00b fad2 	bl	800c888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_5V_EN_Pin|nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2184      	movs	r1, #132	@ 0x84
 80012e8:	4888      	ldr	r0, [pc, #544]	@ (800150c <MX_GPIO_Init+0x26c>)
 80012ea:	f00b facd 	bl	800c888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_RESET_GPIO_Port, MUX_RESET_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f8:	f00b fac6 	bl	800c888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2102      	movs	r1, #2
 8001300:	4883      	ldr	r0, [pc, #524]	@ (8001510 <MX_GPIO_Init+0x270>)
 8001302:	f00b fac1 	bl	800c888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2102      	movs	r1, #2
 800130a:	4882      	ldr	r0, [pc, #520]	@ (8001514 <MX_GPIO_Init+0x274>)
 800130c:	f00b fabc 	bl	800c888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN2_Pin MUX_RESET_Pin EN1_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|MUX_RESET_Pin|EN1_Pin;
 8001310:	f248 030c 	movw	r3, #32780	@ 0x800c
 8001314:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132a:	f00b f847 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 800132e:	2301      	movs	r3, #1
 8001330:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001332:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001336:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001338:	2302      	movs	r3, #2
 800133a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001344:	f00b f83a 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_5V_EN_Pin */
  GPIO_InitStruct.Pin = LED_5V_EN_Pin;
 8001348:	2304      	movs	r3, #4
 800134a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2302      	movs	r3, #2
 8001356:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_5V_EN_GPIO_Port, &GPIO_InitStruct);
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	4619      	mov	r1, r3
 800135c:	486b      	ldr	r0, [pc, #428]	@ (800150c <MX_GPIO_Init+0x26c>)
 800135e:	f00b f82d 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON5_Pin */
  GPIO_InitStruct.Pin = BUTTON5_Pin;
 8001362:	2308      	movs	r3, #8
 8001364:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001366:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800136a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON5_GPIO_Port, &GPIO_InitStruct);
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4866      	ldr	r0, [pc, #408]	@ (8001510 <MX_GPIO_Init+0x270>)
 8001376:	f00b f821 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800137a:	23b0      	movs	r3, #176	@ 0xb0
 800137c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800137e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001384:	2301      	movs	r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4862      	ldr	r0, [pc, #392]	@ (8001518 <MX_GPIO_Init+0x278>)
 800138e:	f00b f815 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 8001392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001396:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001398:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800139c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4859      	ldr	r0, [pc, #356]	@ (800150c <MX_GPIO_Init+0x26c>)
 80013a8:	f00b f808 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT13_Pin nFAULT17_Pin nFAULT3_Pin nFAULT4_Pin
                           nFAULT14_Pin nFAULT1_Pin */
  GPIO_InitStruct.Pin = nFAULT13_Pin|nFAULT17_Pin|nFAULT3_Pin|nFAULT4_Pin
 80013ac:	f246 430b 	movw	r3, #25611	@ 0x640b
 80013b0:	607b      	str	r3, [r7, #4]
                          |nFAULT14_Pin|nFAULT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4857      	ldr	r0, [pc, #348]	@ (800151c <MX_GPIO_Init+0x27c>)
 80013c0:	f00a fffc 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT15_Pin nFAULT8_Pin */
  GPIO_InitStruct.Pin = nFAULT15_Pin|nFAULT8_Pin;
 80013c4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80013c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4850      	ldr	r0, [pc, #320]	@ (8001518 <MX_GPIO_Init+0x278>)
 80013d8:	f00a fff0 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT9_Pin nFAULT7_Pin nFAULT6_Pin */
  GPIO_InitStruct.Pin = nFAULT9_Pin|nFAULT7_Pin|nFAULT6_Pin;
 80013dc:	2315      	movs	r3, #21
 80013de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4849      	ldr	r0, [pc, #292]	@ (8001514 <MX_GPIO_Init+0x274>)
 80013ee:	f00a ffe5 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pin : nFAULT12_Pin */
  GPIO_InitStruct.Pin = nFAULT12_Pin;
 80013f2:	2310      	movs	r3, #16
 80013f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(nFAULT12_GPIO_Port, &GPIO_InitStruct);
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4842      	ldr	r0, [pc, #264]	@ (800150c <MX_GPIO_Init+0x26c>)
 8001404:	f00a ffda 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT11_Pin nFAULT16_Pin nFAULT0_Pin nFAULT10_Pin */
  GPIO_InitStruct.Pin = nFAULT11_Pin|nFAULT16_Pin|nFAULT0_Pin|nFAULT10_Pin;
 8001408:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800140c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001412:	2301      	movs	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141e:	f00a ffcd 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pin : nFAULT2_Pin */
  GPIO_InitStruct.Pin = nFAULT2_Pin;
 8001422:	2301      	movs	r3, #1
 8001424:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142a:	2301      	movs	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(nFAULT2_GPIO_Port, &GPIO_InitStruct);
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4837      	ldr	r0, [pc, #220]	@ (8001510 <MX_GPIO_Init+0x270>)
 8001434:	f00a ffc2 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_SENSE_EN_Pin */
  GPIO_InitStruct.Pin = BAT_SENSE_EN_Pin;
 8001438:	2302      	movs	r3, #2
 800143a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BAT_SENSE_EN_GPIO_Port, &GPIO_InitStruct);
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4830      	ldr	r0, [pc, #192]	@ (8001510 <MX_GPIO_Init+0x270>)
 800144e:	f00a ffb5 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_FRONT_Pin */
  GPIO_InitStruct.Pin = nSLEEP_FRONT_Pin;
 8001452:	2302      	movs	r3, #2
 8001454:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(nSLEEP_FRONT_GPIO_Port, &GPIO_InitStruct);
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4619      	mov	r1, r3
 8001466:	482b      	ldr	r0, [pc, #172]	@ (8001514 <MX_GPIO_Init+0x274>)
 8001468:	f00a ffa8 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin SWITCH2_Pin CHARGE_STATUS_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|SWITCH2_Pin|CHARGE_STATUS_Pin;
 800146c:	f249 0310 	movw	r3, #36880	@ 0x9010
 8001470:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4827      	ldr	r0, [pc, #156]	@ (800151c <MX_GPIO_Init+0x27c>)
 8001480:	f00a ff9c 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_REAR_Pin */
  GPIO_InitStruct.Pin = nSLEEP_REAR_Pin;
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(nSLEEP_REAR_GPIO_Port, &GPIO_InitStruct);
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4619      	mov	r1, r3
 8001498:	481c      	ldr	r0, [pc, #112]	@ (800150c <MX_GPIO_Init+0x26c>)
 800149a:	f00a ff8f 	bl	800c3bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH1_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin;
 800149e:	2308      	movs	r3, #8
 80014a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4819      	ldr	r0, [pc, #100]	@ (8001514 <MX_GPIO_Init+0x274>)
 80014b0:	f00a ff84 	bl	800c3bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2006      	movs	r0, #6
 80014ba:	f00a fcc2 	bl	800be42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014be:	2006      	movs	r0, #6
 80014c0:	f00a fcd9 	bl	800be76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2009      	movs	r0, #9
 80014ca:	f00a fcba 	bl	800be42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014ce:	2009      	movs	r0, #9
 80014d0:	f00a fcd1 	bl	800be76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	200a      	movs	r0, #10
 80014da:	f00a fcb2 	bl	800be42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014de:	200a      	movs	r0, #10
 80014e0:	f00a fcc9 	bl	800be76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2017      	movs	r0, #23
 80014ea:	f00a fcaa 	bl	800be42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014ee:	2017      	movs	r0, #23
 80014f0:	f00a fcc1 	bl	800be76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	2028      	movs	r0, #40	@ 0x28
 80014fa:	f00a fca2 	bl	800be42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014fe:	2028      	movs	r0, #40	@ 0x28
 8001500:	f00a fcb9 	bl	800be76 <HAL_NVIC_EnableIRQ>

}
 8001504:	bf00      	nop
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	48000800 	.word	0x48000800
 8001510:	48001c00 	.word	0x48001c00
 8001514:	48001000 	.word	0x48001000
 8001518:	48000400 	.word	0x48000400
 800151c:	48000c00 	.word	0x48000c00

08001520 <LL_AHB2_GRP1_EnableClock>:
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800152e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4313      	orrs	r3, r2
 8001536:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001544:	68fb      	ldr	r3, [r7, #12]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001552:	b480      	push	{r7}
 8001554:	b085      	sub	sp, #20
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001560:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4313      	orrs	r3, r2
 8001568:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800156e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4013      	ands	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001590:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	43db      	mvns	r3, r3
 8001596:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800159a:	4013      	ands	r3, r2
 800159c:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001624 <MX_I2C1_Init+0x78>)
 80015b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0070133F;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <MX_I2C1_Init+0x7c>)
 80015ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015ce:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e6:	480e      	ldr	r0, [pc, #56]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015e8:	f00b f9a2 	bl	800c930 <HAL_I2C_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015f2:	f001 fd41 	bl	8003078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015f6:	2100      	movs	r1, #0
 80015f8:	4809      	ldr	r0, [pc, #36]	@ (8001620 <MX_I2C1_Init+0x74>)
 80015fa:	f00c fad9 	bl	800dbb0 <HAL_I2CEx_ConfigAnalogFilter>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001604:	f001 fd38 	bl	8003078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001608:	2100      	movs	r1, #0
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_I2C1_Init+0x74>)
 800160c:	f00c fb1b 	bl	800dc46 <HAL_I2CEx_ConfigDigitalFilter>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001616:	f001 fd2f 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200002e4 	.word	0x200002e4
 8001624:	40005400 	.word	0x40005400
 8001628:	0070133f 	.word	0x0070133f

0800162c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <MX_I2C3_Init+0x74>)
 8001632:	4a1c      	ldr	r2, [pc, #112]	@ (80016a4 <MX_I2C3_Init+0x78>)
 8001634:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0070133F;
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <MX_I2C3_Init+0x74>)
 8001638:	4a1b      	ldr	r2, [pc, #108]	@ (80016a8 <MX_I2C3_Init+0x7c>)
 800163a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <MX_I2C3_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001642:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <MX_I2C3_Init+0x74>)
 8001644:	2201      	movs	r2, #1
 8001646:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <MX_I2C3_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_I2C3_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_I2C3_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_I2C3_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_I2C3_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001666:	480e      	ldr	r0, [pc, #56]	@ (80016a0 <MX_I2C3_Init+0x74>)
 8001668:	f00b f962 	bl	800c930 <HAL_I2C_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001672:	f001 fd01 	bl	8003078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001676:	2100      	movs	r1, #0
 8001678:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <MX_I2C3_Init+0x74>)
 800167a:	f00c fa99 	bl	800dbb0 <HAL_I2CEx_ConfigAnalogFilter>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001684:	f001 fcf8 	bl	8003078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001688:	2100      	movs	r1, #0
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_I2C3_Init+0x74>)
 800168c:	f00c fadb 	bl	800dc46 <HAL_I2CEx_ConfigDigitalFilter>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001696:	f001 fcef 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000338 	.word	0x20000338
 80016a4:	40005c00 	.word	0x40005c00
 80016a8:	0070133f 	.word	0x0070133f

080016ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b09c      	sub	sp, #112	@ 0x70
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2250      	movs	r2, #80	@ 0x50
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f011 fe7f 	bl	80133d0 <memset>
  if(i2cHandle->Instance==I2C1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a2d      	ldr	r2, [pc, #180]	@ (800178c <HAL_I2C_MspInit+0xe0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d127      	bne.n	800172c <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016dc:	2304      	movs	r3, #4
 80016de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016e0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80016e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	4618      	mov	r0, r3
 80016ec:	f00e f89d 	bl	800f82a <HAL_RCCEx_PeriphCLKConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80016f6:	f001 fcbf 	bl	8003078 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	2002      	movs	r0, #2
 80016fc:	f7ff ff10 	bl	8001520 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001700:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001704:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001706:	2312      	movs	r3, #18
 8001708:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001712:	2304      	movs	r3, #4
 8001714:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800171a:	4619      	mov	r1, r3
 800171c:	481c      	ldr	r0, [pc, #112]	@ (8001790 <HAL_I2C_MspInit+0xe4>)
 800171e:	f00a fe4d 	bl	800c3bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001722:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001726:	f7ff ff14 	bl	8001552 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800172a:	e02a      	b.n	8001782 <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C3)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a18      	ldr	r2, [pc, #96]	@ (8001794 <HAL_I2C_MspInit+0xe8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d125      	bne.n	8001782 <HAL_I2C_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001736:	2308      	movs	r3, #8
 8001738:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800173a:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800173e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4618      	mov	r0, r3
 8001746:	f00e f870 	bl	800f82a <HAL_RCCEx_PeriphCLKConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8001750:	f001 fc92 	bl	8003078 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	2004      	movs	r0, #4
 8001756:	f7ff fee3 	bl	8001520 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800175a:	2303      	movs	r3, #3
 800175c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175e:	2312      	movs	r3, #18
 8001760:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800176a:	2304      	movs	r3, #4
 800176c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001772:	4619      	mov	r1, r3
 8001774:	4808      	ldr	r0, [pc, #32]	@ (8001798 <HAL_I2C_MspInit+0xec>)
 8001776:	f00a fe21 	bl	800c3bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800177a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800177e:	f7ff fee8 	bl	8001552 <LL_APB1_GRP1_EnableClock>
}
 8001782:	bf00      	nop
 8001784:	3770      	adds	r7, #112	@ 0x70
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40005400 	.word	0x40005400
 8001790:	48000400 	.word	0x48000400
 8001794:	40005c00 	.word	0x40005c00
 8001798:	48000800 	.word	0x48000800

0800179c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a13      	ldr	r2, [pc, #76]	@ (80017f8 <HAL_I2C_MspDeInit+0x5c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10e      	bne.n	80017cc <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80017ae:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80017b2:	f7ff fee7 	bl	8001584 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80017b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017ba:	4810      	ldr	r0, [pc, #64]	@ (80017fc <HAL_I2C_MspDeInit+0x60>)
 80017bc:	f00a ff6e 	bl	800c69c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80017c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017c4:	480d      	ldr	r0, [pc, #52]	@ (80017fc <HAL_I2C_MspDeInit+0x60>)
 80017c6:	f00a ff69 	bl	800c69c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80017ca:	e010      	b.n	80017ee <HAL_I2C_MspDeInit+0x52>
  else if(i2cHandle->Instance==I2C3)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001800 <HAL_I2C_MspDeInit+0x64>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10b      	bne.n	80017ee <HAL_I2C_MspDeInit+0x52>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80017d6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80017da:	f7ff fed3 	bl	8001584 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 80017de:	2102      	movs	r1, #2
 80017e0:	4808      	ldr	r0, [pc, #32]	@ (8001804 <HAL_I2C_MspDeInit+0x68>)
 80017e2:	f00a ff5b 	bl	800c69c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 80017e6:	2101      	movs	r1, #1
 80017e8:	4806      	ldr	r0, [pc, #24]	@ (8001804 <HAL_I2C_MspDeInit+0x68>)
 80017ea:	f00a ff57 	bl	800c69c <HAL_GPIO_DeInit>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40005400 	.word	0x40005400
 80017fc:	48000400 	.word	0x48000400
 8001800:	40005c00 	.word	0x40005c00
 8001804:	48000800 	.word	0x48000800

08001808 <LL_AHB3_GRP1_EnableClock>:
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001814:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001816:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4313      	orrs	r3, r2
 800181e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001824:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800182c:	68fb      	ldr	r3, [r7, #12]
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <MX_IPCC_Init+0x20>)
 8001842:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <MX_IPCC_Init+0x24>)
 8001844:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_IPCC_Init+0x20>)
 8001848:	f00c fa4a 	bl	800dce0 <HAL_IPCC_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001852:	f001 fc11 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000038c 	.word	0x2000038c
 8001860:	58000c00 	.word	0x58000c00

08001864 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0d      	ldr	r2, [pc, #52]	@ (80018a8 <HAL_IPCC_MspInit+0x44>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d113      	bne.n	800189e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800187a:	f7ff ffc5 	bl	8001808 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	202c      	movs	r0, #44	@ 0x2c
 8001884:	f00a fadd 	bl	800be42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001888:	202c      	movs	r0, #44	@ 0x2c
 800188a:	f00a faf4 	bl	800be76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	202d      	movs	r0, #45	@ 0x2d
 8001894:	f00a fad5 	bl	800be42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001898:	202d      	movs	r0, #45	@ 0x2d
 800189a:	f00a faec 	bl	800be76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	58000c00 	.word	0x58000c00

080018ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80018b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80018c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80018c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80018cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <ITM_SendChar+0x2c>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <ITM_SendChar+0x2e>
 80018d8:	2300      	movs	r3, #0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d010      	beq.n	8001900 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80018de:	e000      	b.n	80018e2 <ITM_SendChar+0x36>
    {
      __NOP();
 80018e0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80018e2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf0c      	ite	eq
 80018ec:	2301      	moveq	r3, #1
 80018ee:	2300      	movne	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f4      	bne.n	80018e0 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80018f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_ZN14DRV8214_ConfigC1Ev>:

enum ControlMode { PWM, PH_EN };
enum RegulationMode { CURRENT_FIXED, CURRENT_CYCLES, SPEED, VOLTAGE };
// when using I2C control, the speed/voltage cannot be controlled if using the CURRENT_FIXED or CURRENT_CYCLES regulation mode

struct DRV8214_Config {
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	705a      	strb	r2, [r3, #1]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2202      	movs	r2, #2
 8001926:	709a      	strb	r2, [r3, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	70da      	strb	r2, [r3, #3]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	721a      	strb	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	725a      	strb	r2, [r3, #9]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	729a      	strb	r2, [r3, #10]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	72da      	strb	r2, [r3, #11]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2203      	movs	r2, #3
 8001952:	731a      	strb	r2, [r3, #12]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2280      	movs	r2, #128	@ 0x80
 8001970:	771a      	strb	r2, [r3, #28]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	775a      	strb	r2, [r3, #29]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800197e:	83da      	strh	r2, [r3, #30]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2020 	strb.w	r2, [r3, #32]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	845a      	strh	r2, [r3, #34]	@ 0x22
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	221e      	movs	r2, #30
 8001992:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2203      	movs	r2, #3
 800199a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_ZN7DRV8214C1Ehhthhht>:
        // Private functions
        void drvPrint(const char* message);

    public:
        // Constructor
        DRV8214(uint8_t addr, uint8_t id, uint16_t sense_resistor, uint8_t ripples, uint8_t rm, uint8_t reduction_ratio, uint16_t rpm) : address(addr), driver_ID(id), Ripropri(sense_resistor), ripples_per_revolution(ripples), motor_internal_resistance(rm), motor_reduction_ratio(reduction_ratio), motor_max_rpm(rpm) {}
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	4608      	mov	r0, r1
 80019cc:	4611      	mov	r1, r2
 80019ce:	461a      	mov	r2, r3
 80019d0:	4603      	mov	r3, r0
 80019d2:	70fb      	strb	r3, [r7, #3]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70bb      	strb	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	803b      	strh	r3, [r7, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	78ba      	ldrb	r2, [r7, #2]
 80019e6:	705a      	strb	r2, [r3, #1]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	883a      	ldrh	r2, [r7, #0]
 80019ec:	805a      	strh	r2, [r3, #2]
 80019ee:	7c3b      	ldrb	r3, [r7, #16]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	809a      	strh	r2, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7d3a      	ldrb	r2, [r7, #20]
 80019fa:	719a      	strb	r2, [r3, #6]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7e3a      	ldrb	r2, [r7, #24]
 8001a00:	71da      	strb	r2, [r3, #7]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	8bba      	ldrh	r2, [r7, #28]
 8001a06:	811a      	strh	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	330c      	adds	r3, #12
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff7e 	bl	800190e <_ZN14DRV8214_ConfigC1Ev>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_Z17CheckWakeupSourcev>:
void Wakeup_Reinit_Peripherals(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CheckWakeupSource(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8001a20:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <_Z17CheckWakeupSourcev+0x6c>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf14      	ite	ne
 8001a2e:	2301      	movne	r3, #1
 8001a30:	2300      	moveq	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d022      	beq.n	8001a7e <_Z17CheckWakeupSourcev+0x62>
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); // Clear Standby flag
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <_Z17CheckWakeupSourcev+0x6c>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      // Check individual wakeup flags
      if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF1) != RESET) { // PA0 - IMU
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <_Z17CheckWakeupSourcev+0x6c>)
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf14      	ite	ne
 8001a4c:	2301      	movne	r3, #1
 8001a4e:	2300      	moveq	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00c      	beq.n	8001a70 <_Z17CheckWakeupSourcev+0x54>
          __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <_Z17CheckWakeupSourcev+0x6c>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	619a      	str	r2, [r3, #24]
          printf("Woke up from Standby via IMU (WKUP1/PA0).\r\n");
 8001a5c:	480b      	ldr	r0, [pc, #44]	@ (8001a8c <_Z17CheckWakeupSourcev+0x70>)
 8001a5e:	f011 fcaf 	bl	80133c0 <puts>
          g_wakeup_source = WAKEUP_SOURCE_IMU;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <_Z17CheckWakeupSourcev+0x74>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
          HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f00c fb67 	bl	800e13c <HAL_PWR_DisableWakeUpPin>
          g_wakeup_source = WAKEUP_SOURCE_UNKNOWN; // Or RTC, etc.
      }
  } else {
      printf("Normal power-on or reset (not from Standby).\r\n");
  }
}
 8001a6e:	e009      	b.n	8001a84 <_Z17CheckWakeupSourcev+0x68>
          printf("Woke up from Standby (source other than IMU on PA0 or unknown).\r\n");
 8001a70:	4808      	ldr	r0, [pc, #32]	@ (8001a94 <_Z17CheckWakeupSourcev+0x78>)
 8001a72:	f011 fca5 	bl	80133c0 <puts>
          g_wakeup_source = WAKEUP_SOURCE_UNKNOWN; // Or RTC, etc.
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <_Z17CheckWakeupSourcev+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
}
 8001a7c:	e002      	b.n	8001a84 <_Z17CheckWakeupSourcev+0x68>
      printf("Normal power-on or reset (not from Standby).\r\n");
 8001a7e:	4806      	ldr	r0, [pc, #24]	@ (8001a98 <_Z17CheckWakeupSourcev+0x7c>)
 8001a80:	f011 fc9e 	bl	80133c0 <puts>
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	58000400 	.word	0x58000400
 8001a8c:	08015678 	.word	0x08015678
 8001a90:	2000044a 	.word	0x2000044a
 8001a94:	080156a4 	.word	0x080156a4
 8001a98:	080156e8 	.word	0x080156e8

08001a9c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev>:

void Configure_BMI270_LowPower_AnyMotion(struct bmi2_dev *dev) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b0a4      	sub	sp, #144	@ 0x90
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t sens_list[1];
  struct bmi2_sens_config sens_cfg;
  struct bmi2_int_pin_config int_pin_cfg;

  printf("Configuring BMI270 for Low Power Any Motion...\r\n");
 8001aa4:	489a      	ldr	r0, [pc, #616]	@ (8001d10 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x274>)
 8001aa6:	f011 fc8b 	bl	80133c0 <puts>

  // 1. Disable all sensors first (good practice before reconfiguring)
  uint8_t all_sensors_off[] = { BMI2_ACCEL, BMI2_GYRO, BMI2_AUX }; // Add BMI2_TEMP if ever used
 8001aaa:	4a9a      	ldr	r2, [pc, #616]	@ (8001d14 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x278>)
 8001aac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	8019      	strh	r1, [r3, #0]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	0c12      	lsrs	r2, r2, #16
 8001aba:	701a      	strb	r2, [r3, #0]
  rslt = bmi270_sensor_disable(all_sensors_off, sizeof(all_sensors_off)/sizeof(all_sensors_off[0]), dev);
 8001abc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 f9cb 	bl	8005e60 <bmi270_sensor_disable>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001ad0:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x4c>
      printf("BMI270 Disable All Sensors failed. Error: %d\r\n", rslt);
 8001ad8:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001adc:	4619      	mov	r1, r3
 8001ade:	488e      	ldr	r0, [pc, #568]	@ (8001d18 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x27c>)
 8001ae0:	f011 fbfe 	bl	80132e0 <iprintf>
      Error_Handler();
 8001ae4:	f001 fac8 	bl	8003078 <Error_Handler>
  }
   printf("All sensors disabled.\r\n");
 8001ae8:	488c      	ldr	r0, [pc, #560]	@ (8001d1c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x280>)
 8001aea:	f011 fc69 	bl	80133c0 <puts>

  // 2. Enable Accelerometer only
  sens_list[0] = BMI2_ACCEL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  rslt = bmi270_sensor_enable(sens_list, 1, dev);
 8001af4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	2101      	movs	r1, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 f979 	bl	8005df4 <bmi270_sensor_enable>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001b08:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x84>
      printf("BMI270 Accel Enable failed. Error: %d\r\n", rslt);
 8001b10:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b14:	4619      	mov	r1, r3
 8001b16:	4882      	ldr	r0, [pc, #520]	@ (8001d20 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x284>)
 8001b18:	f011 fbe2 	bl	80132e0 <iprintf>
      Error_Handler();
 8001b1c:	f001 faac 	bl	8003078 <Error_Handler>
  }
  printf("Accelerometer enabled.\r\n");
 8001b20:	4880      	ldr	r0, [pc, #512]	@ (8001d24 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x288>)
 8001b22:	f011 fc4d 	bl	80133c0 <puts>
  //    ACC_CONF (0x40):
  //      [7] acc_filter_perf: 0 for low power
  //      [6:4] acc_bwp: 001b (OSR2_AVG2 for low power based on datasheet filter table for acc_filter_perf=0)
  //      [3:0] acc_odr: 0111b (50Hz - minimum for features if acc_filter_perf=0, page 41)
  //      Result: 0_001_0111 = 0x17
  sens_cfg.type = BMI2_ACCEL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  rslt = bmi2_get_sensor_config(&sens_cfg, 1, dev); // Get current to modify
 8001b2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	2101      	movs	r1, #1
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 fca7 	bl	8004488 <bmi2_get_sensor_config>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001b40:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0xbc>
      printf("BMI270 Get Accel Config failed. Error: %d\r\n", rslt);
 8001b48:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4876      	ldr	r0, [pc, #472]	@ (8001d28 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x28c>)
 8001b50:	f011 fbc6 	bl	80132e0 <iprintf>
      Error_Handler();
 8001b54:	f001 fa90 	bl	8003078 <Error_Handler>
  }
  sens_cfg.cfg.acc.odr = BMI2_ACC_ODR_50HZ;        // 50Hz, as features might need this ODR minimum
 8001b58:	2307      	movs	r3, #7
 8001b5a:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  sens_cfg.cfg.acc.bwp = BMI2_ACC_OSR2_AVG2;       // Low power bandwidth (osr2_avg2)
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  sens_cfg.cfg.acc.filter_perf = BMI2_POWER_OPT_MODE; // Low power filter performance (acc_filter_perf = 0)
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
  // sens_cfg.cfg.acc.range = BMI2_ACC_RANGE_2G; // Already set or keep default
  rslt = bmi2_set_sensor_config(&sens_cfg, 1, dev);
 8001b6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	2101      	movs	r1, #1
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 fbd2 	bl	800431c <bmi2_set_sensor_config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001b7e:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0xfa>
      printf("BMI270 Accel Low Power Config failed. Error: %d\r\n", rslt);
 8001b86:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4867      	ldr	r0, [pc, #412]	@ (8001d2c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x290>)
 8001b8e:	f011 fba7 	bl	80132e0 <iprintf>
      Error_Handler();
 8001b92:	f001 fa71 	bl	8003078 <Error_Handler>
  }
  printf("Accelerometer configured for low power (ODR: 50Hz, BWP: OSR2_AVG2, Filter: Power Optimized).\r\n");
 8001b96:	4866      	ldr	r0, [pc, #408]	@ (8001d30 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x294>)
 8001b98:	f011 fc12 	bl	80133c0 <puts>

  // 4. Enable Advanced Power Saving (after sensor config)
  //    PWR_CONF (0x7C): bit 1 adv_power_save = 1
  rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f002 fa2f 	bl	8004002 <bmi2_set_adv_power_save>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001baa:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x126>
      printf("BMI270 Enable Advanced Power Save failed. Error: %d\r\n", rslt);
 8001bb2:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	485e      	ldr	r0, [pc, #376]	@ (8001d34 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x298>)
 8001bba:	f011 fb91 	bl	80132e0 <iprintf>
      Error_Handler();
 8001bbe:	f001 fa5b 	bl	8003078 <Error_Handler>
  }
  printf("Advanced Power Saving enabled.\r\n");
 8001bc2:	485d      	ldr	r0, [pc, #372]	@ (8001d38 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x29c>)
 8001bc4:	f011 fbfc 	bl	80133c0 <puts>

  // 5. Configure Any-Motion feature
  //    ANYMO_1 (Page 1, 0x0C-0x0D in FEATURES): duration, select_x/y/z
  //    ANYMO_2 (Page 1, 0x0E-0x0F in FEATURES): threshold, enable
  struct bmi2_sens_config anymotion_cfg;
  anymotion_cfg.type = BMI2_ANY_MOTION;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	733b      	strb	r3, [r7, #12]
  rslt = bmi270_get_sensor_config(&anymotion_cfg, 1, dev); // Get defaults
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 fa07 	bl	8005fe8 <bmi270_get_sensor_config>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
   if (rslt != BMI2_OK) {
 8001be0:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x158>
      printf("BMI270 Get AnyMotion Config failed. Error: %d\r\n", rslt);
 8001be8:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001bec:	4619      	mov	r1, r3
 8001bee:	4853      	ldr	r0, [pc, #332]	@ (8001d3c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2a0>)
 8001bf0:	f011 fb76 	bl	80132e0 <iprintf>
      // Don't Error_Handler() here, could be feature not active yet. We will set it.
  }

  anymotion_cfg.cfg.any_motion.duration = 2;    // 2 samples * 20ms/sample (at 50Hz) = 40ms
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	823b      	strh	r3, [r7, #16]
  anymotion_cfg.cfg.any_motion.threshold = 20;  // Threshold: 20 * 0.061mg/LSB (for 2g range) ~ 1.22mg.
 8001bf8:	2314      	movs	r3, #20
 8001bfa:	827b      	strh	r3, [r7, #18]
                                                // For 2g range, sensitivity is 16384 LSB/g.
                                                // Threshold (g) = threshold_lsb / 16384.
                                                // Threshold (mg) = (threshold_lsb * 1000) / 16384.
                                                // A value of 20 means 20 * 1000 / 16384 ~= 1.22 mg. This is very sensitive.
                                                // Datasheet page 43 typical threshold is 0xAA for anymotion (83mg). Let's try that.
  anymotion_cfg.cfg.any_motion.threshold = 0xAA; // Let's use a moderate value like 32 decimal for testing (~2mg)
 8001bfc:	23aa      	movs	r3, #170	@ 0xaa
 8001bfe:	827b      	strh	r3, [r7, #18]
  anymotion_cfg.cfg.any_motion.select_x = BMI2_ENABLE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	82bb      	strh	r3, [r7, #20]
  anymotion_cfg.cfg.any_motion.select_y = BMI2_ENABLE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	82fb      	strh	r3, [r7, #22]
  anymotion_cfg.cfg.any_motion.select_z = BMI2_ENABLE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	833b      	strh	r3, [r7, #24]
  // The .enable field within any_motion struct is for axis selection, not the feature itself.
  // Feature is enabled by bmi270_sensor_enable for BMI2_ANY_MOTION type.

  rslt = bmi270_set_sensor_config(&anymotion_cfg, 1, dev);
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	2101      	movs	r1, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 f959 	bl	8005ecc <bmi270_set_sensor_config>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001c20:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x19c>
      printf("BMI270 Set AnyMotion Config failed. Error: %d\r\n", rslt);
 8001c28:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4844      	ldr	r0, [pc, #272]	@ (8001d40 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2a4>)
 8001c30:	f011 fb56 	bl	80132e0 <iprintf>
      Error_Handler();
 8001c34:	f001 fa20 	bl	8003078 <Error_Handler>
  }
  printf("Any Motion configured (Duration: %d, Threshold: 0x%X).\r\n",
         anymotion_cfg.cfg.any_motion.duration, anymotion_cfg.cfg.any_motion.threshold);
 8001c38:	8a3b      	ldrh	r3, [r7, #16]
  printf("Any Motion configured (Duration: %d, Threshold: 0x%X).\r\n",
 8001c3a:	4619      	mov	r1, r3
         anymotion_cfg.cfg.any_motion.duration, anymotion_cfg.cfg.any_motion.threshold);
 8001c3c:	8a7b      	ldrh	r3, [r7, #18]
  printf("Any Motion configured (Duration: %d, Threshold: 0x%X).\r\n",
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4840      	ldr	r0, [pc, #256]	@ (8001d44 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2a8>)
 8001c42:	f011 fb4d 	bl	80132e0 <iprintf>


  // 6. Enable Any-Motion feature
  sens_list[0] = BMI2_ANY_MOTION;
 8001c46:	2304      	movs	r3, #4
 8001c48:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  rslt = bmi270_sensor_enable(sens_list, 1, dev);
 8001c4c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	2101      	movs	r1, #1
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 f8cd 	bl	8005df4 <bmi270_sensor_enable>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001c60:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x1dc>
      printf("BMI270 AnyMotion Sensor Enable failed. Error: %d\r\n", rslt);
 8001c68:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4836      	ldr	r0, [pc, #216]	@ (8001d48 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2ac>)
 8001c70:	f011 fb36 	bl	80132e0 <iprintf>
      Error_Handler();
 8001c74:	f001 fa00 	bl	8003078 <Error_Handler>
  }
  printf("Any Motion feature enabled.\r\n");
 8001c78:	4834      	ldr	r0, [pc, #208]	@ (8001d4c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2b0>)
 8001c7a:	f011 fba1 	bl	80133c0 <puts>

  // 7. Configure BMI270 Interrupt Pin (e.g., INT1)
  //    INT1_IO_CTRL (0x53), INT_LATCH (0x55)
  int_pin_cfg.pin_type = BMI2_INT1; // Or BMI2_INT2, ensure physical connection matches
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  int_pin_cfg.int_latch = BMI2_INT_NON_LATCH; // Non-latched for edge trigger
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  int_pin_cfg.pin_cfg[0].lvl = BMI2_INT_ACTIVE_HIGH; // Active high for STM32 rising edge EXTI
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  int_pin_cfg.pin_cfg[0].od = BMI2_INT_PUSH_PULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  int_pin_cfg.pin_cfg[0].output_en = BMI2_INT_OUTPUT_ENABLE;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  int_pin_cfg.pin_cfg[0].input_en = BMI2_INT_INPUT_DISABLE; // INT1 as output
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
  // If using BMI2_INT2, configure pin_cfg[1]
  rslt = bmi2_set_int_pin_config(&int_pin_cfg, dev);
 8001ca2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 fa4b 	bl	8004144 <bmi2_set_int_pin_config>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001cb4:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x230>
      printf("BMI270 Set INT Pin Config failed. Error: %d\r\n", rslt);
 8001cbc:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4823      	ldr	r0, [pc, #140]	@ (8001d50 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2b4>)
 8001cc4:	f011 fb0c 	bl	80132e0 <iprintf>
      Error_Handler();
 8001cc8:	f001 f9d6 	bl	8003078 <Error_Handler>
  }
  printf("BMI270 INT1 configured as Active High, Push-Pull output.\r\n");
 8001ccc:	4821      	ldr	r0, [pc, #132]	@ (8001d54 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2b8>)
 8001cce:	f011 fb77 	bl	80133c0 <puts>

  // 8. Map Any-Motion interrupt to the configured INT pin
  rslt = bmi2_map_feat_int(BMI2_ANY_MOTION, BMI2_INT1, dev); // Map to INT1
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	2004      	movs	r0, #4
 8001cd8:	f002 fd3d 	bl	8004756 <bmi2_map_feat_int>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) {
 8001ce2:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x25e>
      printf("BMI270 Map AnyMotion to INT1 failed. Error: %d\r\n", rslt);
 8001cea:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4819      	ldr	r0, [pc, #100]	@ (8001d58 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2bc>)
 8001cf2:	f011 faf5 	bl	80132e0 <iprintf>
      Error_Handler();
 8001cf6:	f001 f9bf 	bl	8003078 <Error_Handler>
  }
  printf("Any Motion interrupt mapped to INT1.\r\n");
 8001cfa:	4818      	ldr	r0, [pc, #96]	@ (8001d5c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2c0>)
 8001cfc:	f011 fb60 	bl	80133c0 <puts>
  printf("BMI270 Low Power Any Motion Setup Complete.\r\n");
 8001d00:	4817      	ldr	r0, [pc, #92]	@ (8001d60 <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x2c4>)
 8001d02:	f011 fb5d 	bl	80133c0 <puts>
}
 8001d06:	bf00      	nop
 8001d08:	3790      	adds	r7, #144	@ 0x90
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	08015718 	.word	0x08015718
 8001d14:	08015ad0 	.word	0x08015ad0
 8001d18:	08015748 	.word	0x08015748
 8001d1c:	08015778 	.word	0x08015778
 8001d20:	08015790 	.word	0x08015790
 8001d24:	080157b8 	.word	0x080157b8
 8001d28:	080157d0 	.word	0x080157d0
 8001d2c:	080157fc 	.word	0x080157fc
 8001d30:	08015830 	.word	0x08015830
 8001d34:	08015890 	.word	0x08015890
 8001d38:	080158c8 	.word	0x080158c8
 8001d3c:	080158e8 	.word	0x080158e8
 8001d40:	08015918 	.word	0x08015918
 8001d44:	08015948 	.word	0x08015948
 8001d48:	08015984 	.word	0x08015984
 8001d4c:	080159b8 	.word	0x080159b8
 8001d50:	080159d8 	.word	0x080159d8
 8001d54:	08015a08 	.word	0x08015a08
 8001d58:	08015a44 	.word	0x08015a44
 8001d5c:	08015a78 	.word	0x08015a78
 8001d60:	08015aa0 	.word	0x08015aa0

08001d64 <_Z14EnterStop2Modev>:

void EnterStop2Mode(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  printf("Preparing to enter Stop2 Mode...\r\n");
 8001d68:	481a      	ldr	r0, [pc, #104]	@ (8001dd4 <_Z14EnterStop2Modev+0x70>)
 8001d6a:	f011 fb29 	bl	80133c0 <puts>
  WS2812_SetColor(0,0,0,0); // Turn off LED
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff f8e3 	bl	8000f40 <_Z15WS2812_SetColorhhhh>

  HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	4816      	ldr	r0, [pc, #88]	@ (8001dd8 <_Z14EnterStop2Modev+0x74>)
 8001d80:	f00a fd82 	bl	800c888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2180      	movs	r1, #128	@ 0x80
 8001d88:	4814      	ldr	r0, [pc, #80]	@ (8001ddc <_Z14EnterStop2Modev+0x78>)
 8001d8a:	f00a fd7d 	bl	800c888 <HAL_GPIO_WritePin>
  printf("nSLEEP pins set LOW.\r\n");
 8001d8e:	4814      	ldr	r0, [pc, #80]	@ (8001de0 <_Z14EnterStop2Modev+0x7c>)
 8001d90:	f011 fb16 	bl	80133c0 <puts>
  HAL_Delay(100); // UART flush
 8001d94:	2064      	movs	r0, #100	@ 0x64
 8001d96:	f008 fda3 	bl	800a8e0 <HAL_Delay>

  // Stop peripherals and timers to prevent them from waking the MCU
  HAL_TIM_Base_Stop_IT(&htim2);
 8001d9a:	4812      	ldr	r0, [pc, #72]	@ (8001de4 <_Z14EnterStop2Modev+0x80>)
 8001d9c:	f00e ff76 	bl	8010c8c <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim16);
 8001da0:	4811      	ldr	r0, [pc, #68]	@ (8001de8 <_Z14EnterStop2Modev+0x84>)
 8001da2:	f00e ff73 	bl	8010c8c <HAL_TIM_Base_Stop_IT>
  HAL_ADC_Stop(&hadc1); // Ensure ADC is stopped
 8001da6:	4811      	ldr	r0, [pc, #68]	@ (8001dec <_Z14EnterStop2Modev+0x88>)
 8001da8:	f009 fa36 	bl	800b218 <HAL_ADC_Stop>

  // Clear all wakeup flags to prevent immediate re-wakeup
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001dac:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <_Z14EnterStop2Modev+0x8c>)
 8001dae:	221f      	movs	r2, #31
 8001db0:	619a      	str	r2, [r3, #24]
  __HAL_GPIO_EXTI_CLEAR_FLAG(IMU_INT1_Pin | BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin | BUTTON4_Pin | BUTTON5_Pin);
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <_Z14EnterStop2Modev+0x90>)
 8001db4:	f240 42b9 	movw	r2, #1209	@ 0x4b9
 8001db8:	60da      	str	r2, [r3, #12]
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1 | PWR_FLAG_WUF2 | PWR_FLAG_WUF3 | PWR_FLAG_WUF4 | PWR_FLAG_WUF5);
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <_Z14EnterStop2Modev+0x8c>)
 8001dbc:	2280      	movs	r2, #128	@ 0x80
 8001dbe:	619a      	str	r2, [r3, #24]

  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_HIGH);
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f00c f99b 	bl	800e0fc <HAL_PWR_EnableWakeUpPin>

  // Enter Stop2 mode
  HAL_SuspendTick(); // Suspend SysTick to prevent wakeup from it
 8001dc6:	f008 fdaf 	bl	800a928 <HAL_SuspendTick>
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f00c f9da 	bl	800e184 <HAL_PWREx_EnterSTOP2Mode>
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	08015ad4 	.word	0x08015ad4
 8001dd8:	48001000 	.word	0x48001000
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	08015af8 	.word	0x08015af8
 8001de4:	200005a8 	.word	0x200005a8
 8001de8:	200005f4 	.word	0x200005f4
 8001dec:	20000280 	.word	0x20000280
 8001df0:	58000400 	.word	0x58000400
 8001df4:	58000800 	.word	0x58000800

08001df8 <_Z20ResetInactivityTimerv>:
  // 5. Enter Standby mode
  HAL_PWR_EnterSTANDBYMode();
  // MCU should reset on wakeup from here
}

void ResetInactivityTimer(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  // printf("Inactivity timer reset.\r\n");
  inactivity_timer_elapsed_flag = false;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <_Z20ResetInactivityTimerv+0x1c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
  __HAL_TIM_SET_COUNTER(&htim16, 0); // Reset counter for TIM6
 8001e02:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <_Z20ResetInactivityTimerv+0x20>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start_IT(&htim16);    // Restart TIM6
 8001e0a:	4803      	ldr	r0, [pc, #12]	@ (8001e18 <_Z20ResetInactivityTimerv+0x20>)
 8001e0c:	f00e fef0 	bl	8010bf0 <HAL_TIM_Base_Start_IT>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000448 	.word	0x20000448
 8001e18:	200005f4 	.word	0x200005f4

08001e1c <_Z25Wakeup_Reinit_Peripheralsv>:

void Wakeup_Reinit_Peripherals(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
    printf("Re-initializing peripherals after wakeup...\r\n");
 8001e20:	4828      	ldr	r0, [pc, #160]	@ (8001ec4 <_Z25Wakeup_Reinit_Peripheralsv+0xa8>)
 8001e22:	f011 facd 	bl	80133c0 <puts>

    // De-initialize all used peripherals to reset their HAL state handles.
    HAL_TIM_Base_DeInit(&htim2);
 8001e26:	4828      	ldr	r0, [pc, #160]	@ (8001ec8 <_Z25Wakeup_Reinit_Peripheralsv+0xac>)
 8001e28:	f00e fe85 	bl	8010b36 <HAL_TIM_Base_DeInit>
    HAL_TIM_Base_DeInit(&htim16);
 8001e2c:	4827      	ldr	r0, [pc, #156]	@ (8001ecc <_Z25Wakeup_Reinit_Peripheralsv+0xb0>)
 8001e2e:	f00e fe82 	bl	8010b36 <HAL_TIM_Base_DeInit>
    HAL_ADC_DeInit(&hadc1);
 8001e32:	4827      	ldr	r0, [pc, #156]	@ (8001ed0 <_Z25Wakeup_Reinit_Peripheralsv+0xb4>)
 8001e34:	f009 f8be 	bl	800afb4 <HAL_ADC_DeInit>
    HAL_I2C_DeInit(&hi2c1);
 8001e38:	4826      	ldr	r0, [pc, #152]	@ (8001ed4 <_Z25Wakeup_Reinit_Peripheralsv+0xb8>)
 8001e3a:	f00a fe14 	bl	800ca66 <HAL_I2C_DeInit>
    HAL_I2C_DeInit(&hi2c3);
 8001e3e:	4826      	ldr	r0, [pc, #152]	@ (8001ed8 <_Z25Wakeup_Reinit_Peripheralsv+0xbc>)
 8001e40:	f00a fe11 	bl	800ca66 <HAL_I2C_DeInit>
//    HAL_SPI_DeInit(&spi2);
    HAL_UART_DeInit(&huart1);
 8001e44:	4825      	ldr	r0, [pc, #148]	@ (8001edc <_Z25Wakeup_Reinit_Peripheralsv+0xc0>)
 8001e46:	f00f fb3d 	bl	80114c4 <HAL_UART_DeInit>

    // Re-initialize all peripherals as if from a cold boot.

    MX_GPIO_Init(); // Good practice to re-init GPIOs too
 8001e4a:	f7ff fa29 	bl	80012a0 <MX_GPIO_Init>
    MX_DMA_Init();
 8001e4e:	f7ff f9fc 	bl	800124a <MX_DMA_Init>
    MX_ADC1_Init();
 8001e52:	f7ff f915 	bl	8001080 <MX_ADC1_Init>
    MX_I2C1_Init();
 8001e56:	f7ff fba9 	bl	80015ac <MX_I2C1_Init>
    MX_I2C3_Init();
 8001e5a:	f7ff fbe7 	bl	800162c <MX_I2C3_Init>
    MX_SPI2_Init();
 8001e5e:	f001 fa39 	bl	80032d4 <MX_SPI2_Init>
    MX_TIM2_Init();
 8001e62:	f001 fd2d 	bl	80038c0 <MX_TIM2_Init>
    MX_TIM16_Init();
 8001e66:	f001 fd79 	bl	800395c <MX_TIM16_Init>
    MX_USART1_UART_Init();
 8001e6a:	f001 fe33 	bl	8003ad4 <MX_USART1_UART_Init>

    // Restart any timers that should be running
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) { Error_Handler(); }
 8001e6e:	4816      	ldr	r0, [pc, #88]	@ (8001ec8 <_Z25Wakeup_Reinit_Peripheralsv+0xac>)
 8001e70:	f00e febe 	bl	8010bf0 <HAL_TIM_Base_Start_IT>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bf14      	ite	ne
 8001e7a:	2301      	movne	r3, #1
 8001e7c:	2300      	moveq	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <_Z25Wakeup_Reinit_Peripheralsv+0x6c>
 8001e84:	f001 f8f8 	bl	8003078 <Error_Handler>

    // Re-select the I2C MUX channel since the I2C peripheral was reset.
    if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) != 0) {
 8001e88:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <_Z25Wakeup_Reinit_Peripheralsv+0xc4>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4815      	ldr	r0, [pc, #84]	@ (8001ee4 <_Z25Wakeup_Reinit_Peripheralsv+0xc8>)
 8001e90:	f010 fc60 	bl	8012754 <_Z14i2c_mux_selectP7i2c_muxi>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <_Z25Wakeup_Reinit_Peripheralsv+0x96>
        printf("Failed to re-select MUX channel %d after wakeup.\n", i2c_channel_to_use);
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <_Z25Wakeup_Reinit_Peripheralsv+0xc4>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	480f      	ldr	r0, [pc, #60]	@ (8001ee8 <_Z25Wakeup_Reinit_Peripheralsv+0xcc>)
 8001eac:	f011 fa18 	bl	80132e0 <iprintf>
    } else {
        printf("I2C MUX channel %d re-selected successfully.\n", i2c_channel_to_use);
    }
}
 8001eb0:	e005      	b.n	8001ebe <_Z25Wakeup_Reinit_Peripheralsv+0xa2>
        printf("I2C MUX channel %d re-selected successfully.\n", i2c_channel_to_use);
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <_Z25Wakeup_Reinit_Peripheralsv+0xc4>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480c      	ldr	r0, [pc, #48]	@ (8001eec <_Z25Wakeup_Reinit_Peripheralsv+0xd0>)
 8001eba:	f011 fa11 	bl	80132e0 <iprintf>
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	08015b34 	.word	0x08015b34
 8001ec8:	200005a8 	.word	0x200005a8
 8001ecc:	200005f4 	.word	0x200005f4
 8001ed0:	20000280 	.word	0x20000280
 8001ed4:	200002e4 	.word	0x200002e4
 8001ed8:	20000338 	.word	0x20000338
 8001edc:	20000640 	.word	0x20000640
 8001ee0:	20000010 	.word	0x20000010
 8001ee4:	200003d4 	.word	0x200003d4
 8001ee8:	08015b64 	.word	0x08015b64
 8001eec:	08015b98 	.word	0x08015b98

08001ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef2:	b0a7      	sub	sp, #156	@ 0x9c
 8001ef4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef6:	f008 fc6d 	bl	800a7d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  CheckWakeupSource();
 8001efa:	f7ff fd8f 	bl	8001a1c <_Z17CheckWakeupSourcev>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efe:	f000 fc0b 	bl	8002718 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f02:	f000 fc7f 	bl	8002804 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001f06:	f7ff fc99 	bl	800183c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f0a:	f7ff f9c9 	bl	80012a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f0e:	f7ff f99c 	bl	800124a <MX_DMA_Init>
  MX_ADC1_Init();
 8001f12:	f7ff f8b5 	bl	8001080 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f16:	f7ff fb49 	bl	80015ac <MX_I2C1_Init>
  MX_I2C3_Init();
 8001f1a:	f7ff fb87 	bl	800162c <MX_I2C3_Init>
  MX_RTC_Init();
 8001f1e:	f001 f93f 	bl	80031a0 <MX_RTC_Init>
  MX_TIM2_Init();
 8001f22:	f001 fccd 	bl	80038c0 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001f26:	f001 f9d5 	bl	80032d4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001f2a:	f001 fdd3 	bl	8003ad4 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8001f2e:	f001 fd15 	bl	800395c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  printf(" System Initialized. Wakeup source: %d (0=Unk, 1=IMU)\r\n", g_wakeup_source);
 8001f32:	4ba3      	ldr	r3, [pc, #652]	@ (80021c0 <main+0x2d0>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	4619      	mov	r1, r3
 8001f38:	48a2      	ldr	r0, [pc, #648]	@ (80021c4 <main+0x2d4>)
 8001f3a:	f011 f9d1 	bl	80132e0 <iprintf>
  // Default GPIO states
  // HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
  // HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2102      	movs	r1, #2
 8001f42:	48a1      	ldr	r0, [pc, #644]	@ (80021c8 <main+0x2d8>)
 8001f44:	f00a fca0 	bl	800c888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_RESET_GPIO_Port, MUX_RESET_Pin, GPIO_PIN_SET);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f52:	f00a fc99 	bl	800c888 <HAL_GPIO_WritePin>

  // Start the timer in interrupt mode
  // Example: if you want to measure every 5 seconds, and your timer is TIM2
  // Configure TIM2 in CubeMX for a 5-second period (e.g., Prescaler & Period values)
  // and enable its update interrupt.
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) { Error_Handler();}
 8001f56:	489d      	ldr	r0, [pc, #628]	@ (80021cc <main+0x2dc>)
 8001f58:	f00e fe4a 	bl	8010bf0 <HAL_TIM_Base_Start_IT>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf14      	ite	ne
 8001f62:	2301      	movne	r3, #1
 8001f64:	2300      	moveq	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <main+0x80>
 8001f6c:	f001 f884 	bl	8003078 <Error_Handler>

  printf("Initializing PCA9546A multiplexer... ");
 8001f70:	4897      	ldr	r0, [pc, #604]	@ (80021d0 <main+0x2e0>)
 8001f72:	f011 f9b5 	bl	80132e0 <iprintf>
  // Initialize the I2C multiplexer structure
  i2c_multiplexer.hi2c = &hi2c1; // Assign the I2C peripheral handle
 8001f76:	4b97      	ldr	r3, [pc, #604]	@ (80021d4 <main+0x2e4>)
 8001f78:	4a97      	ldr	r2, [pc, #604]	@ (80021d8 <main+0x2e8>)
 8001f7a:	601a      	str	r2, [r3, #0]
  i2c_multiplexer.rst_port = MUX_RESET_GPIO_Port;  // From main.h
 8001f7c:	4b95      	ldr	r3, [pc, #596]	@ (80021d4 <main+0x2e4>)
 8001f7e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f82:	605a      	str	r2, [r3, #4]
  i2c_multiplexer.rst_pin = MUX_RESET_Pin;         // From main.h
 8001f84:	4b93      	ldr	r3, [pc, #588]	@ (80021d4 <main+0x2e4>)
 8001f86:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f8a:	811a      	strh	r2, [r3, #8]
  i2c_multiplexer.addr_offset = 0;
 8001f8c:	4b91      	ldr	r3, [pc, #580]	@ (80021d4 <main+0x2e4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	729a      	strb	r2, [r3, #10]

  // select the desired chanel based on the switch 1 position
  if (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_SET) {
 8001f92:	2108      	movs	r1, #8
 8001f94:	4891      	ldr	r0, [pc, #580]	@ (80021dc <main+0x2ec>)
 8001f96:	f00a fc5f 	bl	800c858 <HAL_GPIO_ReadPin>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00d      	beq.n	8001fc6 <main+0xd6>
    i2c_channel_to_use = 0; // Channel 1
 8001faa:	4b8d      	ldr	r3, [pc, #564]	@ (80021e0 <main+0x2f0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_SET);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4889      	ldr	r0, [pc, #548]	@ (80021dc <main+0x2ec>)
 8001fb6:	f00a fc67 	bl	800c888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2180      	movs	r1, #128	@ 0x80
 8001fbe:	4889      	ldr	r0, [pc, #548]	@ (80021e4 <main+0x2f4>)
 8001fc0:	f00a fc62 	bl	800c888 <HAL_GPIO_WritePin>
 8001fc4:	e00c      	b.n	8001fe0 <main+0xf0>
  } else {
    i2c_channel_to_use = 1; // Channel 0
 8001fc6:	4b86      	ldr	r3, [pc, #536]	@ (80021e0 <main+0x2f0>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2102      	movs	r1, #2
 8001fd0:	4882      	ldr	r0, [pc, #520]	@ (80021dc <main+0x2ec>)
 8001fd2:	f00a fc59 	bl	800c888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2180      	movs	r1, #128	@ 0x80
 8001fda:	4882      	ldr	r0, [pc, #520]	@ (80021e4 <main+0x2f4>)
 8001fdc:	f00a fc54 	bl	800c888 <HAL_GPIO_WritePin>
  }
  if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
 8001fe0:	4b7f      	ldr	r3, [pc, #508]	@ (80021e0 <main+0x2f0>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	487b      	ldr	r0, [pc, #492]	@ (80021d4 <main+0x2e4>)
 8001fe8:	f010 fbb4 	bl	8012754 <_Z14i2c_mux_selectP7i2c_muxi>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2301      	moveq	r3, #1
 8001ff4:	2300      	movne	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <main+0x11a>
      printf("PCA9546A Initialized Successfully! Channel %d selected.\n", i2c_channel_to_use);
 8001ffc:	4b78      	ldr	r3, [pc, #480]	@ (80021e0 <main+0x2f0>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	4879      	ldr	r0, [pc, #484]	@ (80021e8 <main+0x2f8>)
 8002004:	f011 f96c 	bl	80132e0 <iprintf>
 8002008:	e005      	b.n	8002016 <main+0x126>
  } else {
      printf("Failed to select channel %d on I2C multiplexer.\n", i2c_channel_to_use);
 800200a:	4b75      	ldr	r3, [pc, #468]	@ (80021e0 <main+0x2f0>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	4619      	mov	r1, r3
 8002010:	4876      	ldr	r0, [pc, #472]	@ (80021ec <main+0x2fc>)
 8002012:	f011 f965 	bl	80132e0 <iprintf>
  }

  // I2C1 scanning
  I2C_Scan(&hi2c1);
 8002016:	4870      	ldr	r0, [pc, #448]	@ (80021d8 <main+0x2e8>)
 8002018:	f000 fcce 	bl	80029b8 <_Z8I2C_ScanP19__I2C_HandleTypeDef>
  // I2C3 scanning
  I2C_Scan(&hi2c3);
 800201c:	4874      	ldr	r0, [pc, #464]	@ (80021f0 <main+0x300>)
 800201e:	f000 fccb 	bl	80029b8 <_Z8I2C_ScanP19__I2C_HandleTypeDef>

  printf("Initializing DRV8214 drivers...\n");
 8002022:	4874      	ldr	r0, [pc, #464]	@ (80021f4 <main+0x304>)
 8002024:	f011 f9cc 	bl	80133c0 <puts>
  // Pass the HAL I2C handle to the I2C platform layer
  drv8214_i2c_set_handle(&hi2c1); // &hi2c1 is defined in Core/Src/i2c.c and declared in Core/Inc/i2c.h
 8002028:	486b      	ldr	r0, [pc, #428]	@ (80021d8 <main+0x2e8>)
 800202a:	f008 faf5 	bl	800a618 <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef>
  for (int i = 0; i < NUM_DRIVERS; i++) {  // Initialize each driver
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002034:	e061      	b.n	80020fa <main+0x20a>
    driver_configs[i] = DRV8214_Config();
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	222c      	movs	r2, #44	@ 0x2c
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f011 f9c7 	bl	80133d0 <memset>
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fc62 	bl	800190e <_ZN14DRV8214_ConfigC1Ev>
 800204a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800204e:	222c      	movs	r2, #44	@ 0x2c
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	4a68      	ldr	r2, [pc, #416]	@ (80021f8 <main+0x308>)
 8002056:	4413      	add	r3, r2
 8002058:	1d3c      	adds	r4, r7, #4
 800205a:	469c      	mov	ip, r3
 800205c:	f104 0e20 	add.w	lr, r4, #32
 8002060:	4665      	mov	r5, ip
 8002062:	4626      	mov	r6, r4
 8002064:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002066:	6028      	str	r0, [r5, #0]
 8002068:	6069      	str	r1, [r5, #4]
 800206a:	60aa      	str	r2, [r5, #8]
 800206c:	60eb      	str	r3, [r5, #12]
 800206e:	3410      	adds	r4, #16
 8002070:	f10c 0c10 	add.w	ip, ip, #16
 8002074:	4574      	cmp	r4, lr
 8002076:	d1f3      	bne.n	8002060 <main+0x170>
 8002078:	4662      	mov	r2, ip
 800207a:	4623      	mov	r3, r4
 800207c:	cb03      	ldmia	r3!, {r0, r1}
 800207e:	6010      	str	r0, [r2, #0]
 8002080:	6051      	str	r1, [r2, #4]
 8002082:	8819      	ldrh	r1, [r3, #0]
 8002084:	789b      	ldrb	r3, [r3, #2]
 8002086:	8111      	strh	r1, [r2, #8]
 8002088:	7293      	strb	r3, [r2, #10]
    if (drivers[i].init(driver_configs[i]) == DRV8214_OK) {
 800208a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4a59      	ldr	r2, [pc, #356]	@ (80021fc <main+0x30c>)
 8002098:	441a      	add	r2, r3
 800209a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800209e:	212c      	movs	r1, #44	@ 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4954      	ldr	r1, [pc, #336]	@ (80021f8 <main+0x308>)
 80020a6:	440b      	add	r3, r1
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f006 fcc6 	bl	8008a3c <_ZN7DRV82144initERK14DRV8214_Config>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d010      	beq.n	80020e2 <main+0x1f2>
      drivers[i].resetFaultFlags();
 80020c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4a4b      	ldr	r2, [pc, #300]	@ (80021fc <main+0x30c>)
 80020ce:	4413      	add	r3, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f007 f89f 	bl	8009214 <_ZN7DRV821415resetFaultFlagsEv>
      printf("DRV8214 driver %d initialized successfully!\n", i);
 80020d6:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80020da:	4849      	ldr	r0, [pc, #292]	@ (8002200 <main+0x310>)
 80020dc:	f011 f900 	bl	80132e0 <iprintf>
 80020e0:	e006      	b.n	80020f0 <main+0x200>
    } else {
      printf("Failed to initialize DRV8214 driver %d.\n", i);
 80020e2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80020e6:	4847      	ldr	r0, [pc, #284]	@ (8002204 <main+0x314>)
 80020e8:	f011 f8fa 	bl	80132e0 <iprintf>
      Error_Handler();
 80020ec:	f000 ffc4 	bl	8003078 <Error_Handler>
  for (int i = 0; i < NUM_DRIVERS; i++) {  // Initialize each driver
 80020f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020f4:	3301      	adds	r3, #1
 80020f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80020fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020fe:	2b01      	cmp	r3, #1
 8002100:	dd99      	ble.n	8002036 <main+0x146>
    }
  }

  printf("Initializing BMI270 IMU... ");
 8002102:	4841      	ldr	r0, [pc, #260]	@ (8002208 <main+0x318>)
 8002104:	f011 f8ec 	bl	80132e0 <iprintf>
  bmi2_set_i2c_handle(&hi2c3);
 8002108:	4839      	ldr	r0, [pc, #228]	@ (80021f0 <main+0x300>)
 800210a:	f006 fbed 	bl	80088e8 <bmi2_set_i2c_handle>
  // Configure the bmi2_dev structure
  bmi270_sensor.intf_ptr = &hi2c3; // Pass a pointer to the I2C HAL handle
 800210e:	4b3f      	ldr	r3, [pc, #252]	@ (800220c <main+0x31c>)
 8002110:	4a37      	ldr	r2, [pc, #220]	@ (80021f0 <main+0x300>)
 8002112:	605a      	str	r2, [r3, #4]
  bmi270_sensor.intf = BMI2_I2C_INTF;
 8002114:	4b3d      	ldr	r3, [pc, #244]	@ (800220c <main+0x31c>)
 8002116:	2201      	movs	r2, #1
 8002118:	725a      	strb	r2, [r3, #9]
  bmi270_sensor.read = bmi2_i2c_read;
 800211a:	4b3c      	ldr	r3, [pc, #240]	@ (800220c <main+0x31c>)
 800211c:	4a3c      	ldr	r2, [pc, #240]	@ (8002210 <main+0x320>)
 800211e:	639a      	str	r2, [r3, #56]	@ 0x38
  bmi270_sensor.write = bmi2_i2c_write;
 8002120:	4b3a      	ldr	r3, [pc, #232]	@ (800220c <main+0x31c>)
 8002122:	4a3c      	ldr	r2, [pc, #240]	@ (8002214 <main+0x324>)
 8002124:	63da      	str	r2, [r3, #60]	@ 0x3c
  bmi270_sensor.delay_us = bmi2_delay_us;
 8002126:	4b39      	ldr	r3, [pc, #228]	@ (800220c <main+0x31c>)
 8002128:	4a3b      	ldr	r2, [pc, #236]	@ (8002218 <main+0x328>)
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40
  bmi270_sensor.read_write_len = 32;    // Max burst read/write length (check BMI270 datasheet, 32 or 64 for features is common)
 800212c:	4b37      	ldr	r3, [pc, #220]	@ (800220c <main+0x31c>)
 800212e:	2220      	movs	r2, #32
 8002130:	81da      	strh	r2, [r3, #14]
                                        // For config file loading, this might need to be larger if the API doesn't chunk it.
                                        // The bmi270_config_file is 8KB, the API chunks this. 32 should be fine for most operations.
  bmi270_sensor.config_file_ptr = NULL; // bmi270_init will assign the internal one
 8002132:	4b36      	ldr	r3, [pc, #216]	@ (800220c <main+0x31c>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  int8_t rslt_bmi = bmi270_init(&bmi270_sensor);
 8002138:	4834      	ldr	r0, [pc, #208]	@ (800220c <main+0x31c>)
 800213a:	f003 fdfd 	bl	8005d38 <bmi270_init>
 800213e:	4603      	mov	r3, r0
 8002140:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  if (rslt_bmi == BMI2_OK) {
 8002144:	f997 308b 	ldrsb.w	r3, [r7, #139]	@ 0x8b
 8002148:	2b00      	cmp	r3, #0
 800214a:	d106      	bne.n	800215a <main+0x26a>
      printf("BMI270 initialized successfully! Chip ID: 0x%X\r\n", bmi270_sensor.chip_id);
 800214c:	4b2f      	ldr	r3, [pc, #188]	@ (800220c <main+0x31c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	4832      	ldr	r0, [pc, #200]	@ (800221c <main+0x32c>)
 8002154:	f011 f8c4 	bl	80132e0 <iprintf>
 8002158:	e007      	b.n	800216a <main+0x27a>
  } else {
      printf("BMI270 initialization failed. Error code: %d\r\n", rslt_bmi);
 800215a:	f997 308b 	ldrsb.w	r3, [r7, #139]	@ 0x8b
 800215e:	4619      	mov	r1, r3
 8002160:	482f      	ldr	r0, [pc, #188]	@ (8002220 <main+0x330>)
 8002162:	f011 f8bd 	bl	80132e0 <iprintf>
      Error_Handler();
 8002166:	f000 ff87 	bl	8003078 <Error_Handler>
  }

  // --- BMI270 LOW POWER AND ANY MOTION SETUP ---
  if (rslt_bmi == BMI2_OK) {
 800216a:	f997 308b 	ldrsb.w	r3, [r7, #139]	@ 0x8b
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <main+0x288>
    Configure_BMI270_LowPower_AnyMotion(&bmi270_sensor);
 8002172:	4826      	ldr	r0, [pc, #152]	@ (800220c <main+0x31c>)
 8002174:	f7ff fc92 	bl	8001a9c <_Z35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev>
  }
  // --- END BMI270 SETUP ---

  if (g_wakeup_source == WAKEUP_SOURCE_UNKNOWN) { // Only blink on cold boot
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <main+0x2d0>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d151      	bne.n	8002224 <main+0x334>
      WS2812_SetColor(255, 0, 0, 100); HAL_Delay(330);
 8002180:	2364      	movs	r3, #100	@ 0x64
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	20ff      	movs	r0, #255	@ 0xff
 8002188:	f7fe feda 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
 800218c:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002190:	f008 fba6 	bl	800a8e0 <HAL_Delay>
      WS2812_SetColor(0, 255, 0, 100); HAL_Delay(330);
 8002194:	2364      	movs	r3, #100	@ 0x64
 8002196:	2200      	movs	r2, #0
 8002198:	21ff      	movs	r1, #255	@ 0xff
 800219a:	2000      	movs	r0, #0
 800219c:	f7fe fed0 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
 80021a0:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 80021a4:	f008 fb9c 	bl	800a8e0 <HAL_Delay>
      WS2812_SetColor(0, 0, 255, 100); HAL_Delay(330);
 80021a8:	2364      	movs	r3, #100	@ 0x64
 80021aa:	22ff      	movs	r2, #255	@ 0xff
 80021ac:	2100      	movs	r1, #0
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7fe fec6 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
 80021b4:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 80021b8:	f008 fb92 	bl	800a8e0 <HAL_Delay>
 80021bc:	e040      	b.n	8002240 <main+0x350>
 80021be:	bf00      	nop
 80021c0:	2000044a 	.word	0x2000044a
 80021c4:	08015bc8 	.word	0x08015bc8
 80021c8:	48001c00 	.word	0x48001c00
 80021cc:	200005a8 	.word	0x200005a8
 80021d0:	08015c00 	.word	0x08015c00
 80021d4:	200003d4 	.word	0x200003d4
 80021d8:	200002e4 	.word	0x200002e4
 80021dc:	48001000 	.word	0x48001000
 80021e0:	20000010 	.word	0x20000010
 80021e4:	48000800 	.word	0x48000800
 80021e8:	08015c28 	.word	0x08015c28
 80021ec:	08015c64 	.word	0x08015c64
 80021f0:	20000338 	.word	0x20000338
 80021f4:	08015c98 	.word	0x08015c98
 80021f8:	20000024 	.word	0x20000024
 80021fc:	2000044c 	.word	0x2000044c
 8002200:	08015cb8 	.word	0x08015cb8
 8002204:	08015ce8 	.word	0x08015ce8
 8002208:	08015d14 	.word	0x08015d14
 800220c:	200003e0 	.word	0x200003e0
 8002210:	08008909 	.word	0x08008909
 8002214:	08008961 	.word	0x08008961
 8002218:	080089b9 	.word	0x080089b9
 800221c:	08015d30 	.word	0x08015d30
 8002220:	08015d64 	.word	0x08015d64
  } else if (g_wakeup_source == WAKEUP_SOURCE_IMU) {
 8002224:	4b96      	ldr	r3, [pc, #600]	@ (8002480 <main+0x590>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d109      	bne.n	8002240 <main+0x350>
      WS2812_SetColor(255, 255, 255, 100); // White for IMU wakeup
 800222c:	2364      	movs	r3, #100	@ 0x64
 800222e:	22ff      	movs	r2, #255	@ 0xff
 8002230:	21ff      	movs	r1, #255	@ 0xff
 8002232:	20ff      	movs	r0, #255	@ 0xff
 8002234:	f7fe fe84 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
      HAL_Delay(1000);
 8002238:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800223c:	f008 fb50 	bl	800a8e0 <HAL_Delay>
  }
  WS2812_SetColor(0, 0, 0, 0);
 8002240:	2300      	movs	r3, #0
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	2000      	movs	r0, #0
 8002248:	f7fe fe7a 	bl	8000f40 <_Z15WS2812_SetColorhhhh>

  ResetInactivityTimer(); // Start the 30-second inactivity timer
 800224c:	f7ff fdd4 	bl	8001df8 <_Z20ResetInactivityTimerv>
  printf("Main loop started. Inactivity timer running for %lu ms.\r\n", INACTIVITY_TIMEOUT_MS);
 8002250:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002254:	488b      	ldr	r0, [pc, #556]	@ (8002484 <main+0x594>)
 8002256:	f011 f843 	bl	80132e0 <iprintf>
  //       printf("BMI270 Gyro configured.\r\n");
  //   }
  // }

  // Blink the LED to indicate startup finished
  WS2812_SetColor(255, 0, 0, 100);
 800225a:	2364      	movs	r3, #100	@ 0x64
 800225c:	2200      	movs	r2, #0
 800225e:	2100      	movs	r1, #0
 8002260:	20ff      	movs	r0, #255	@ 0xff
 8002262:	f7fe fe6d 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 8002266:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 800226a:	f008 fb39 	bl	800a8e0 <HAL_Delay>
  WS2812_SetColor(0, 255, 0, 100);
 800226e:	2364      	movs	r3, #100	@ 0x64
 8002270:	2200      	movs	r2, #0
 8002272:	21ff      	movs	r1, #255	@ 0xff
 8002274:	2000      	movs	r0, #0
 8002276:	f7fe fe63 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 800227a:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 800227e:	f008 fb2f 	bl	800a8e0 <HAL_Delay>
  WS2812_SetColor(0, 0, 255, 100);
 8002282:	2364      	movs	r3, #100	@ 0x64
 8002284:	22ff      	movs	r2, #255	@ 0xff
 8002286:	2100      	movs	r1, #0
 8002288:	2000      	movs	r0, #0
 800228a:	f7fe fe59 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  HAL_Delay(330);
 800228e:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002292:	f008 fb25 	bl	800a8e0 <HAL_Delay>
  WS2812_SetColor(0, 0, 0, 100); // Turn off the LED
 8002296:	2364      	movs	r3, #100	@ 0x64
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	2000      	movs	r0, #0
 800229e:	f7fe fe4f 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  /* USER CODE BEGIN WHILE */

  while (1)
  { 
    // Check for inactivity timer timeout
	  if (inactivity_timer_elapsed_flag) {
 80022a2:	4b79      	ldr	r3, [pc, #484]	@ (8002488 <main+0x598>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d02a      	beq.n	8002302 <main+0x412>
      inactivity_timer_elapsed_flag = false; // Clear flag
 80022ac:	4b76      	ldr	r3, [pc, #472]	@ (8002488 <main+0x598>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]

      // --- Prepare and Enter Stop 2 Mode ---
      EnterStop2Mode();
 80022b2:	f7ff fd57 	bl	8001d64 <_Z14EnterStop2Modev>

      // 1. Resume the HAL Tick. Essential for HAL_Delay and timeouts.
      HAL_ResumeTick();
 80022b6:	f008 fb47 	bl	800a948 <HAL_ResumeTick>

      // 2. Restore the high-speed system clock (PLL).
      SystemClock_Config();
 80022ba:	f000 fa2d 	bl	8002718 <_Z18SystemClock_Configv>

      // Optional: You can use the flag from the ISR to confirm the source
		if (woke_up_from_stop_mode) {
 80022be:	4b73      	ldr	r3, [pc, #460]	@ (800248c <main+0x59c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d015      	beq.n	80022f4 <main+0x404>
		  woke_up_from_stop_mode = false; // Clear the flag for the next cycle
 80022c8:	4b70      	ldr	r3, [pc, #448]	@ (800248c <main+0x59c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
		  printf("Wakeup source: IMU interrupt.\r\n");
 80022ce:	4870      	ldr	r0, [pc, #448]	@ (8002490 <main+0x5a0>)
 80022d0:	f011 f876 	bl	80133c0 <puts>
		  WS2812_SetColor(255, 100, 0, 100); // Orange to indicate IMU wakeup
 80022d4:	2364      	movs	r3, #100	@ 0x64
 80022d6:	2200      	movs	r2, #0
 80022d8:	2164      	movs	r1, #100	@ 0x64
 80022da:	20ff      	movs	r0, #255	@ 0xff
 80022dc:	f7fe fe30 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
		  HAL_Delay(500);
 80022e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80022e4:	f008 fafc 	bl	800a8e0 <HAL_Delay>
		  WS2812_SetColor(0, 0, 0, 0);
 80022e8:	2300      	movs	r3, #0
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7fe fe26 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
		}

      // 3. Re-initialize peripherals that were affected by the clock change or Stop mode.
      Wakeup_Reinit_Peripherals();
 80022f4:	f7ff fd92 	bl	8001e1c <_Z25Wakeup_Reinit_Peripheralsv>

      // 4. Now that the system is fully functional again, handle the logic.
      printf("Woke up from Stop 2. System is active.\r\n");
 80022f8:	4866      	ldr	r0, [pc, #408]	@ (8002494 <main+0x5a4>)
 80022fa:	f011 f861 	bl	80133c0 <puts>

      // 5. Restart the inactivity timer for the next cycle.
      ResetInactivityTimer();
 80022fe:	f7ff fd7b 	bl	8001df8 <_Z20ResetInactivityTimerv>
    }

    if (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_SET && i2c_channel_to_use == 0) {
 8002302:	2108      	movs	r1, #8
 8002304:	4864      	ldr	r0, [pc, #400]	@ (8002498 <main+0x5a8>)
 8002306:	f00a faa7 	bl	800c858 <HAL_GPIO_ReadPin>
 800230a:	4603      	mov	r3, r0
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <main+0x42c>
 8002310:	4b62      	ldr	r3, [pc, #392]	@ (800249c <main+0x5ac>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <main+0x42c>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <main+0x42e>
 800231c:	2300      	movs	r3, #0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d07a      	beq.n	8002418 <main+0x528>
      i2c_channel_to_use = 1;
 8002322:	4b5e      	ldr	r3, [pc, #376]	@ (800249c <main+0x5ac>)
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 8002328:	2200      	movs	r2, #0
 800232a:	2102      	movs	r1, #2
 800232c:	485a      	ldr	r0, [pc, #360]	@ (8002498 <main+0x5a8>)
 800232e:	f00a faab 	bl	800c888 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_SET);
 8002332:	2201      	movs	r2, #1
 8002334:	2180      	movs	r1, #128	@ 0x80
 8002336:	485a      	ldr	r0, [pc, #360]	@ (80024a0 <main+0x5b0>)
 8002338:	f00a faa6 	bl	800c888 <HAL_GPIO_WritePin>
      if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
 800233c:	4b57      	ldr	r3, [pc, #348]	@ (800249c <main+0x5ac>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	4858      	ldr	r0, [pc, #352]	@ (80024a4 <main+0x5b4>)
 8002344:	f010 fa06 	bl	8012754 <_Z14i2c_mux_selectP7i2c_muxi>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf0c      	ite	eq
 800234e:	2301      	moveq	r3, #1
 8002350:	2300      	movne	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <main+0x476>
        printf("Channel %d selected successfully!\n", i2c_channel_to_use);
 8002358:	4b50      	ldr	r3, [pc, #320]	@ (800249c <main+0x5ac>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	4852      	ldr	r0, [pc, #328]	@ (80024a8 <main+0x5b8>)
 8002360:	f010 ffbe 	bl	80132e0 <iprintf>
 8002364:	e005      	b.n	8002372 <main+0x482>
      } else {
          printf("Failed to select channel %d on I2C multiplexer.\n", i2c_channel_to_use);
 8002366:	4b4d      	ldr	r3, [pc, #308]	@ (800249c <main+0x5ac>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4619      	mov	r1, r3
 800236c:	484f      	ldr	r0, [pc, #316]	@ (80024ac <main+0x5bc>)
 800236e:	f010 ffb7 	bl	80132e0 <iprintf>
      }
      HAL_Delay(10);
 8002372:	200a      	movs	r0, #10
 8002374:	f008 fab4 	bl	800a8e0 <HAL_Delay>
      driver_configs[i2c_channel_to_use] = DRV8214_Config();
 8002378:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800237c:	222c      	movs	r2, #44	@ 0x2c
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f011 f825 	bl	80133d0 <memset>
 8002386:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fabf 	bl	800190e <_ZN14DRV8214_ConfigC1Ev>
 8002390:	4b42      	ldr	r3, [pc, #264]	@ (800249c <main+0x5ac>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	232c      	movs	r3, #44	@ 0x2c
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	4a44      	ldr	r2, [pc, #272]	@ (80024b0 <main+0x5c0>)
 800239e:	4413      	add	r3, r2
 80023a0:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80023a4:	469c      	mov	ip, r3
 80023a6:	f104 0e20 	add.w	lr, r4, #32
 80023aa:	4665      	mov	r5, ip
 80023ac:	4626      	mov	r6, r4
 80023ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80023b0:	6028      	str	r0, [r5, #0]
 80023b2:	6069      	str	r1, [r5, #4]
 80023b4:	60aa      	str	r2, [r5, #8]
 80023b6:	60eb      	str	r3, [r5, #12]
 80023b8:	3410      	adds	r4, #16
 80023ba:	f10c 0c10 	add.w	ip, ip, #16
 80023be:	4574      	cmp	r4, lr
 80023c0:	d1f3      	bne.n	80023aa <main+0x4ba>
 80023c2:	4662      	mov	r2, ip
 80023c4:	4623      	mov	r3, r4
 80023c6:	cb03      	ldmia	r3!, {r0, r1}
 80023c8:	6010      	str	r0, [r2, #0]
 80023ca:	6051      	str	r1, [r2, #4]
 80023cc:	8819      	ldrh	r1, [r3, #0]
 80023ce:	789b      	ldrb	r3, [r3, #2]
 80023d0:	8111      	strh	r1, [r2, #8]
 80023d2:	7293      	strb	r3, [r2, #10]
      	 drivers[i2c_channel_to_use].init(driver_configs[i2c_channel_to_use]);
 80023d4:	4b31      	ldr	r3, [pc, #196]	@ (800249c <main+0x5ac>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4a34      	ldr	r2, [pc, #208]	@ (80024b4 <main+0x5c4>)
 80023e4:	441a      	add	r2, r3
 80023e6:	4b2d      	ldr	r3, [pc, #180]	@ (800249c <main+0x5ac>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	4619      	mov	r1, r3
 80023ec:	232c      	movs	r3, #44	@ 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	492f      	ldr	r1, [pc, #188]	@ (80024b0 <main+0x5c0>)
 80023f4:	440b      	add	r3, r1
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f006 fb1f 	bl	8008a3c <_ZN7DRV82144initERK14DRV8214_Config>
      	 drivers[i2c_channel_to_use].resetFaultFlags();
 80023fe:	4b27      	ldr	r3, [pc, #156]	@ (800249c <main+0x5ac>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4a29      	ldr	r2, [pc, #164]	@ (80024b4 <main+0x5c4>)
 800240e:	4413      	add	r3, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f006 feff 	bl	8009214 <_ZN7DRV821415resetFaultFlagsEv>
 8002416:	e0a7      	b.n	8002568 <main+0x678>
    } else if (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_RESET && i2c_channel_to_use == 1) {
 8002418:	2108      	movs	r1, #8
 800241a:	481f      	ldr	r0, [pc, #124]	@ (8002498 <main+0x5a8>)
 800241c:	f00a fa1c 	bl	800c858 <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <main+0x542>
 8002426:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <main+0x5ac>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <main+0x542>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <main+0x544>
 8002432:	2300      	movs	r3, #0
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8097 	beq.w	8002568 <main+0x678>
        i2c_channel_to_use = 0;
 800243a:	4b18      	ldr	r3, [pc, #96]	@ (800249c <main+0x5ac>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_SET);
 8002440:	2201      	movs	r2, #1
 8002442:	2102      	movs	r1, #2
 8002444:	4814      	ldr	r0, [pc, #80]	@ (8002498 <main+0x5a8>)
 8002446:	f00a fa1f 	bl	800c888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	2180      	movs	r1, #128	@ 0x80
 800244e:	4814      	ldr	r0, [pc, #80]	@ (80024a0 <main+0x5b0>)
 8002450:	f00a fa1a 	bl	800c888 <HAL_GPIO_WritePin>
        if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
 8002454:	4b11      	ldr	r3, [pc, #68]	@ (800249c <main+0x5ac>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	4812      	ldr	r0, [pc, #72]	@ (80024a4 <main+0x5b4>)
 800245c:	f010 f97a 	bl	8012754 <_Z14i2c_mux_selectP7i2c_muxi>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d023      	beq.n	80024b8 <main+0x5c8>
          printf("Channel %d selected successfully!\n", i2c_channel_to_use);
 8002470:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <main+0x5ac>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	480c      	ldr	r0, [pc, #48]	@ (80024a8 <main+0x5b8>)
 8002478:	f010 ff32 	bl	80132e0 <iprintf>
 800247c:	e022      	b.n	80024c4 <main+0x5d4>
 800247e:	bf00      	nop
 8002480:	2000044a 	.word	0x2000044a
 8002484:	08015d94 	.word	0x08015d94
 8002488:	20000448 	.word	0x20000448
 800248c:	20000449 	.word	0x20000449
 8002490:	08015dd0 	.word	0x08015dd0
 8002494:	08015df0 	.word	0x08015df0
 8002498:	48001000 	.word	0x48001000
 800249c:	20000010 	.word	0x20000010
 80024a0:	48000800 	.word	0x48000800
 80024a4:	200003d4 	.word	0x200003d4
 80024a8:	08015e18 	.word	0x08015e18
 80024ac:	08015c64 	.word	0x08015c64
 80024b0:	20000024 	.word	0x20000024
 80024b4:	2000044c 	.word	0x2000044c
        } else {
            printf("Failed to select channel %d on I2C multiplexer.\n", i2c_channel_to_use);
 80024b8:	4b88      	ldr	r3, [pc, #544]	@ (80026dc <main+0x7ec>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	4888      	ldr	r0, [pc, #544]	@ (80026e0 <main+0x7f0>)
 80024c0:	f010 ff0e 	bl	80132e0 <iprintf>
        }
        HAL_Delay(10);
 80024c4:	200a      	movs	r0, #10
 80024c6:	f008 fa0b 	bl	800a8e0 <HAL_Delay>
        driver_configs[i2c_channel_to_use] = DRV8214_Config();
 80024ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024ce:	222c      	movs	r2, #44	@ 0x2c
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f010 ff7c 	bl	80133d0 <memset>
 80024d8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fa16 	bl	800190e <_ZN14DRV8214_ConfigC1Ev>
 80024e2:	4b7e      	ldr	r3, [pc, #504]	@ (80026dc <main+0x7ec>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	232c      	movs	r3, #44	@ 0x2c
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	4a7d      	ldr	r2, [pc, #500]	@ (80026e4 <main+0x7f4>)
 80024f0:	4413      	add	r3, r2
 80024f2:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80024f6:	469c      	mov	ip, r3
 80024f8:	f104 0e20 	add.w	lr, r4, #32
 80024fc:	4665      	mov	r5, ip
 80024fe:	4626      	mov	r6, r4
 8002500:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002502:	6028      	str	r0, [r5, #0]
 8002504:	6069      	str	r1, [r5, #4]
 8002506:	60aa      	str	r2, [r5, #8]
 8002508:	60eb      	str	r3, [r5, #12]
 800250a:	3410      	adds	r4, #16
 800250c:	f10c 0c10 	add.w	ip, ip, #16
 8002510:	4574      	cmp	r4, lr
 8002512:	d1f3      	bne.n	80024fc <main+0x60c>
 8002514:	4662      	mov	r2, ip
 8002516:	4623      	mov	r3, r4
 8002518:	cb03      	ldmia	r3!, {r0, r1}
 800251a:	6010      	str	r0, [r2, #0]
 800251c:	6051      	str	r1, [r2, #4]
 800251e:	8819      	ldrh	r1, [r3, #0]
 8002520:	789b      	ldrb	r3, [r3, #2]
 8002522:	8111      	strh	r1, [r2, #8]
 8002524:	7293      	strb	r3, [r2, #10]
      drivers[i2c_channel_to_use].init(driver_configs[i2c_channel_to_use]);
 8002526:	4b6d      	ldr	r3, [pc, #436]	@ (80026dc <main+0x7ec>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4a6c      	ldr	r2, [pc, #432]	@ (80026e8 <main+0x7f8>)
 8002536:	441a      	add	r2, r3
 8002538:	4b68      	ldr	r3, [pc, #416]	@ (80026dc <main+0x7ec>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	232c      	movs	r3, #44	@ 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4967      	ldr	r1, [pc, #412]	@ (80026e4 <main+0x7f4>)
 8002546:	440b      	add	r3, r1
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f006 fa76 	bl	8008a3c <_ZN7DRV82144initERK14DRV8214_Config>
      drivers[i2c_channel_to_use].resetFaultFlags();
 8002550:	4b62      	ldr	r3, [pc, #392]	@ (80026dc <main+0x7ec>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4a62      	ldr	r2, [pc, #392]	@ (80026e8 <main+0x7f8>)
 8002560:	4413      	add	r3, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f006 fe56 	bl	8009214 <_ZN7DRV821415resetFaultFlagsEv>
    }

    if (wakeup_event) {
 8002568:	4b60      	ldr	r3, [pc, #384]	@ (80026ec <main+0x7fc>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	f43f ae97 	beq.w	80022a2 <main+0x3b2>
      // Process the wakeup event (button press)
      printf("Button press detected! ID: %d\r\n", button_ID);
 8002574:	4b5e      	ldr	r3, [pc, #376]	@ (80026f0 <main+0x800>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4619      	mov	r1, r3
 800257c:	485d      	ldr	r0, [pc, #372]	@ (80026f4 <main+0x804>)
 800257e:	f010 feaf 	bl	80132e0 <iprintf>
      wakeup_event = false; // Reset flag AFTER processing it
 8002582:	4b5a      	ldr	r3, [pc, #360]	@ (80026ec <main+0x7fc>)
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
      // display LED color based on button press
      switch (button_ID) {
 8002588:	4b59      	ldr	r3, [pc, #356]	@ (80026f0 <main+0x800>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	2b04      	cmp	r3, #4
 8002592:	f200 8090 	bhi.w	80026b6 <main+0x7c6>
 8002596:	a201      	add	r2, pc, #4	@ (adr r2, 800259c <main+0x6ac>)
 8002598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259c:	080025b1 	.word	0x080025b1
 80025a0:	080025f7 	.word	0x080025f7
 80025a4:	08002625 	.word	0x08002625
 80025a8:	08002677 	.word	0x08002677
 80025ac:	0800268f 	.word	0x0800268f
        case 1:
          WS2812_SetColor(255, 0, 0, 100); // Red
 80025b0:	2364      	movs	r3, #100	@ 0x64
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	20ff      	movs	r0, #255	@ 0xff
 80025b8:	f7fe fcc2 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          // Move the motor forward
          drivers[i2c_channel_to_use].turnXRipples(ripple_target, stops_after_ripples, true, speed, voltage, current);
 80025bc:	4b47      	ldr	r3, [pc, #284]	@ (80026dc <main+0x7ec>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4a47      	ldr	r2, [pc, #284]	@ (80026e8 <main+0x7f8>)
 80025cc:	1898      	adds	r0, r3, r2
 80025ce:	4b4a      	ldr	r3, [pc, #296]	@ (80026f8 <main+0x808>)
 80025d0:	8819      	ldrh	r1, [r3, #0]
 80025d2:	4b4a      	ldr	r3, [pc, #296]	@ (80026fc <main+0x80c>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002700 <main+0x810>)
 80025d8:	edd2 7a00 	vldr	s15, [r2]
 80025dc:	4a49      	ldr	r2, [pc, #292]	@ (8002704 <main+0x814>)
 80025de:	ed92 7a00 	vldr	s14, [r2]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	eef0 0a47 	vmov.f32	s1, s14
 80025e8:	eeb0 0a67 	vmov.f32	s0, s15
 80025ec:	2301      	movs	r3, #1
 80025ee:	2201      	movs	r2, #1
 80025f0:	f007 fd3c 	bl	800a06c <_ZN7DRV821412turnXRipplesEtbbtff>
          //drivers[i2c_channel_to_use].turnForward(speed_low, voltage, current);
          break;
 80025f4:	e066      	b.n	80026c4 <main+0x7d4>
        case 2:
          WS2812_SetColor(0, 255, 0, 100); // Green
 80025f6:	2364      	movs	r3, #100	@ 0x64
 80025f8:	2200      	movs	r2, #0
 80025fa:	21ff      	movs	r1, #255	@ 0xff
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7fe fc9f 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          // Move the motor backward

          drivers[1].turnReverse(speed_low, voltage, current);
 8002602:	4b41      	ldr	r3, [pc, #260]	@ (8002708 <main+0x818>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	4a3e      	ldr	r2, [pc, #248]	@ (8002700 <main+0x810>)
 8002608:	edd2 7a00 	vldr	s15, [r2]
 800260c:	4a3d      	ldr	r2, [pc, #244]	@ (8002704 <main+0x814>)
 800260e:	ed92 7a00 	vldr	s14, [r2]
 8002612:	eef0 0a47 	vmov.f32	s1, s14
 8002616:	eeb0 0a67 	vmov.f32	s0, s15
 800261a:	4619      	mov	r1, r3
 800261c:	483b      	ldr	r0, [pc, #236]	@ (800270c <main+0x81c>)
 800261e:	f007 fc81 	bl	8009f24 <_ZN7DRV821411turnReverseEtff>

          break;
 8002622:	e04f      	b.n	80026c4 <main+0x7d4>
        case 3:
          WS2812_SetColor(0, 0, 255, 100); // Blue
 8002624:	2364      	movs	r3, #100	@ 0x64
 8002626:	22ff      	movs	r2, #255	@ 0xff
 8002628:	2100      	movs	r1, #0
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe fc88 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          printf("Clearing fault flags...\r\n");
 8002630:	4837      	ldr	r0, [pc, #220]	@ (8002710 <main+0x820>)
 8002632:	f010 fec5 	bl	80133c0 <puts>
          drivers[i2c_channel_to_use].resetRippleCounter();
 8002636:	4b29      	ldr	r3, [pc, #164]	@ (80026dc <main+0x7ec>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4a28      	ldr	r2, [pc, #160]	@ (80026e8 <main+0x7f8>)
 8002646:	4413      	add	r3, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f006 fdd4 	bl	80091f6 <_ZN7DRV821418resetRippleCounterEv>
          drivers[i2c_channel_to_use].resetFaultFlags();
 800264e:	4b23      	ldr	r3, [pc, #140]	@ (80026dc <main+0x7ec>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4a22      	ldr	r2, [pc, #136]	@ (80026e8 <main+0x7f8>)
 800265e:	4413      	add	r3, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f006 fdd7 	bl	8009214 <_ZN7DRV821415resetFaultFlagsEv>
          I2C_Scan(&hi2c1);
 8002666:	482b      	ldr	r0, [pc, #172]	@ (8002714 <main+0x824>)
 8002668:	f000 f9a6 	bl	80029b8 <_Z8I2C_ScanP19__I2C_HandleTypeDef>
          HAL_Delay(1000); // Pause to see results
 800266c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002670:	f008 f936 	bl	800a8e0 <HAL_Delay>
          break;
 8002674:	e026      	b.n	80026c4 <main+0x7d4>
        case 4:
          WS2812_SetColor(255, 255, 0, 100); // Yellow
 8002676:	2364      	movs	r3, #100	@ 0x64
 8002678:	2200      	movs	r2, #0
 800267a:	21ff      	movs	r1, #255	@ 0xff
 800267c:	20ff      	movs	r0, #255	@ 0xff
 800267e:	f7fe fc5f 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          printRegisters(i2c_channel_to_use);
 8002682:	4b16      	ldr	r3, [pc, #88]	@ (80026dc <main+0x7ec>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fa42 	bl	8002b10 <_Z14printRegistersh>
          break;
 800268c:	e01a      	b.n	80026c4 <main+0x7d4>
        case 5:
          WS2812_SetColor(255, 0, 255, 100); // Magenta
 800268e:	2364      	movs	r3, #100	@ 0x64
 8002690:	22ff      	movs	r2, #255	@ 0xff
 8002692:	2100      	movs	r1, #0
 8002694:	20ff      	movs	r0, #255	@ 0xff
 8002696:	f7fe fc53 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          // Stop the motor
          drivers[i2c_channel_to_use].brakeMotor();
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <main+0x7ec>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4a0f      	ldr	r2, [pc, #60]	@ (80026e8 <main+0x7f8>)
 80026aa:	4413      	add	r3, r2
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f007 fc9c 	bl	8009fec <_ZN7DRV821410brakeMotorEb>
          break;
 80026b4:	e006      	b.n	80026c4 <main+0x7d4>
        default:
          WS2812_SetColor(0, 0, 0, 0); // Off
 80026b6:	2300      	movs	r3, #0
 80026b8:	2200      	movs	r2, #0
 80026ba:	2100      	movs	r1, #0
 80026bc:	2000      	movs	r0, #0
 80026be:	f7fe fc3f 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
          break;
 80026c2:	bf00      	nop
      }
      HAL_Delay(1000);
 80026c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026c8:	f008 f90a 	bl	800a8e0 <HAL_Delay>
      WS2812_SetColor(0, 0, 0, 0); // Turn off the LED
 80026cc:	2300      	movs	r3, #0
 80026ce:	2200      	movs	r2, #0
 80026d0:	2100      	movs	r1, #0
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe fc34 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
	  if (inactivity_timer_elapsed_flag) {
 80026d8:	e5e3      	b.n	80022a2 <main+0x3b2>
 80026da:	bf00      	nop
 80026dc:	20000010 	.word	0x20000010
 80026e0:	08015c64 	.word	0x08015c64
 80026e4:	20000024 	.word	0x20000024
 80026e8:	2000044c 	.word	0x2000044c
 80026ec:	200003c9 	.word	0x200003c9
 80026f0:	200003ca 	.word	0x200003ca
 80026f4:	08015e3c 	.word	0x08015e3c
 80026f8:	20000020 	.word	0x20000020
 80026fc:	20000012 	.word	0x20000012
 8002700:	20000018 	.word	0x20000018
 8002704:	2000001c 	.word	0x2000001c
 8002708:	20000014 	.word	0x20000014
 800270c:	20000484 	.word	0x20000484
 8002710:	08015e5c 	.word	0x08015e5c
 8002714:	200002e4 	.word	0x200002e4

08002718 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b09a      	sub	sp, #104	@ 0x68
 800271c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800271e:	f107 0320 	add.w	r3, r7, #32
 8002722:	2248      	movs	r2, #72	@ 0x48
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f010 fe52 	bl	80133d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	60da      	str	r2, [r3, #12]
 8002738:	611a      	str	r2, [r3, #16]
 800273a:	615a      	str	r2, [r3, #20]
 800273c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800273e:	4b30      	ldr	r3, [pc, #192]	@ (8002800 <_Z18SystemClock_Configv+0xe8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002746:	4a2e      	ldr	r2, [pc, #184]	@ (8002800 <_Z18SystemClock_Configv+0xe8>)
 8002748:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b2c      	ldr	r3, [pc, #176]	@ (8002800 <_Z18SystemClock_Configv+0xe8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800275a:	232b      	movs	r3, #43	@ 0x2b
 800275c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800275e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002764:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800276a:	2301      	movs	r3, #1
 800276c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800276e:	2340      	movs	r3, #64	@ 0x40
 8002770:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002772:	2300      	movs	r3, #0
 8002774:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002776:	2360      	movs	r3, #96	@ 0x60
 8002778:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800277a:	2305      	movs	r3, #5
 800277c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800277e:	2302      	movs	r3, #2
 8002780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002782:	2301      	movs	r3, #1
 8002784:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002786:	2300      	movs	r3, #0
 8002788:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 30;
 800278a:	231e      	movs	r3, #30
 800278c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800278e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002792:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8002794:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002798:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800279a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800279e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027a0:	f107 0320 	add.w	r3, r7, #32
 80027a4:	4618      	mov	r0, r3
 80027a6:	f00c f88f 	bl	800e8c8 <HAL_RCC_OscConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80027ba:	f000 fc5d 	bl	8003078 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80027be:	236f      	movs	r3, #111	@ 0x6f
 80027c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027c2:	2303      	movs	r3, #3
 80027c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	2102      	movs	r1, #2
 80027de:	4618      	mov	r0, r3
 80027e0:	f00c fbe6 	bl	800efb0 <HAL_RCC_ClockConfig>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bf14      	ite	ne
 80027ea:	2301      	movne	r3, #1
 80027ec:	2300      	moveq	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <_Z18SystemClock_Configv+0xe0>
  {
    Error_Handler();
 80027f4:	f000 fc40 	bl	8003078 <Error_Handler>
  }
}
 80027f8:	bf00      	nop
 80027fa:	3768      	adds	r7, #104	@ 0x68
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	58000400 	.word	0x58000400

08002804 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b094      	sub	sp, #80	@ 0x50
 8002808:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800280a:	463b      	mov	r3, r7
 800280c:	2250      	movs	r2, #80	@ 0x50
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f010 fddd 	bl	80133d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8002816:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800281a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800281c:	2300      	movs	r3, #0
 800281e:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002820:	2310      	movs	r3, #16
 8002822:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002824:	463b      	mov	r3, r7
 8002826:	4618      	mov	r0, r3
 8002828:	f00c ffff 	bl	800f82a <HAL_RCCEx_PeriphCLKConfig>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	bf14      	ite	ne
 8002832:	2301      	movne	r3, #1
 8002834:	2300      	moveq	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <_Z24PeriphCommonClock_Configv+0x3c>
  {
    Error_Handler();
 800283c:	f000 fc1c 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002840:	bf00      	nop
 8002842:	3750      	adds	r7, #80	@ 0x50
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IMU_INT1_Pin)
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d106      	bne.n	8002866 <HAL_GPIO_EXTI_Callback+0x1e>
  { 
	  woke_up_from_stop_mode = true;
 8002858:	4b2a      	ldr	r3, [pc, #168]	@ (8002904 <HAL_GPIO_EXTI_Callback+0xbc>)
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800285e:	4a2a      	ldr	r2, [pc, #168]	@ (8002908 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	60d3      	str	r3, [r2, #12]
    wakeup_event = true; // Set flag for next loop iteration
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    button_ID = 5;
    ResetInactivityTimer();
  }
}
 8002864:	e04a      	b.n	80028fc <HAL_GPIO_EXTI_Callback+0xb4>
	else if (GPIO_Pin == BUTTON1_Pin) // Replace YOUR_BUTTON_PIN with the actual pin, e.g., GPIO_PIN_13
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b80      	cmp	r3, #128	@ 0x80
 800286a:	d10b      	bne.n	8002884 <HAL_GPIO_EXTI_Callback+0x3c>
	  wakeup_event = true; // Set flag for next loop iteration
 800286c:	4b27      	ldr	r3, [pc, #156]	@ (800290c <HAL_GPIO_EXTI_Callback+0xc4>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002872:	4a25      	ldr	r2, [pc, #148]	@ (8002908 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	60d3      	str	r3, [r2, #12]
	  button_ID = 1;
 8002878:	4b25      	ldr	r3, [pc, #148]	@ (8002910 <HAL_GPIO_EXTI_Callback+0xc8>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
    ResetInactivityTimer();
 800287e:	f7ff fabb 	bl	8001df8 <_Z20ResetInactivityTimerv>
}
 8002882:	e03b      	b.n	80028fc <HAL_GPIO_EXTI_Callback+0xb4>
  } else if (GPIO_Pin == BUTTON2_Pin) {
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	2b20      	cmp	r3, #32
 8002888:	d10b      	bne.n	80028a2 <HAL_GPIO_EXTI_Callback+0x5a>
	  wakeup_event = true; // Set flag for next loop iteration
 800288a:	4b20      	ldr	r3, [pc, #128]	@ (800290c <HAL_GPIO_EXTI_Callback+0xc4>)
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002890:	4a1d      	ldr	r2, [pc, #116]	@ (8002908 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	60d3      	str	r3, [r2, #12]
	  button_ID = 2;
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002898:	2202      	movs	r2, #2
 800289a:	701a      	strb	r2, [r3, #0]
    ResetInactivityTimer();
 800289c:	f7ff faac 	bl	8001df8 <_Z20ResetInactivityTimerv>
}
 80028a0:	e02c      	b.n	80028fc <HAL_GPIO_EXTI_Callback+0xb4>
  else if (GPIO_Pin == BUTTON3_Pin) {
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	d10b      	bne.n	80028c0 <HAL_GPIO_EXTI_Callback+0x78>
	  wakeup_event = true; // Set flag for next loop iteration
 80028a8:	4b18      	ldr	r3, [pc, #96]	@ (800290c <HAL_GPIO_EXTI_Callback+0xc4>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ae:	4a16      	ldr	r2, [pc, #88]	@ (8002908 <HAL_GPIO_EXTI_Callback+0xc0>)
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	60d3      	str	r3, [r2, #12]
	  button_ID = 3;
 80028b4:	4b16      	ldr	r3, [pc, #88]	@ (8002910 <HAL_GPIO_EXTI_Callback+0xc8>)
 80028b6:	2203      	movs	r2, #3
 80028b8:	701a      	strb	r2, [r3, #0]
    ResetInactivityTimer();
 80028ba:	f7ff fa9d 	bl	8001df8 <_Z20ResetInactivityTimerv>
}
 80028be:	e01d      	b.n	80028fc <HAL_GPIO_EXTI_Callback+0xb4>
  else if (GPIO_Pin == BUTTON4_Pin) {
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c6:	d10b      	bne.n	80028e0 <HAL_GPIO_EXTI_Callback+0x98>
	  wakeup_event = true; // Set flag for next loop iteration
 80028c8:	4b10      	ldr	r3, [pc, #64]	@ (800290c <HAL_GPIO_EXTI_Callback+0xc4>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002908 <HAL_GPIO_EXTI_Callback+0xc0>)
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	60d3      	str	r3, [r2, #12]
	  button_ID = 4;
 80028d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <HAL_GPIO_EXTI_Callback+0xc8>)
 80028d6:	2204      	movs	r2, #4
 80028d8:	701a      	strb	r2, [r3, #0]
    ResetInactivityTimer();
 80028da:	f7ff fa8d 	bl	8001df8 <_Z20ResetInactivityTimerv>
}
 80028de:	e00d      	b.n	80028fc <HAL_GPIO_EXTI_Callback+0xb4>
  else if (GPIO_Pin == BUTTON5_Pin) {
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d10a      	bne.n	80028fc <HAL_GPIO_EXTI_Callback+0xb4>
    wakeup_event = true; // Set flag for next loop iteration
 80028e6:	4b09      	ldr	r3, [pc, #36]	@ (800290c <HAL_GPIO_EXTI_Callback+0xc4>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ec:	4a06      	ldr	r2, [pc, #24]	@ (8002908 <HAL_GPIO_EXTI_Callback+0xc0>)
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	60d3      	str	r3, [r2, #12]
    button_ID = 5;
 80028f2:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <HAL_GPIO_EXTI_Callback+0xc8>)
 80028f4:	2205      	movs	r2, #5
 80028f6:	701a      	strb	r2, [r3, #0]
    ResetInactivityTimer();
 80028f8:	f7ff fa7e 	bl	8001df8 <_Z20ResetInactivityTimerv>
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000449 	.word	0x20000449
 8002908:	58000800 	.word	0x58000800
 800290c:	200003c9 	.word	0x200003c9
 8002910:	200003ca 	.word	0x200003ca

08002914 <_write>:
#ifdef __cplusplus
  extern "C" {
  #endif
#ifdef USE_SWD
  int _write(int file, char *ptr, int len)
  {
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	e009      	b.n	800293a <_write+0x26>
    {
      ITM_SendChar(*ptr++);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	60ba      	str	r2, [r7, #8]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe ffbc 	bl	80018ac <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3301      	adds	r3, #1
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	dbf1      	blt.n	8002926 <_write+0x12>
    }
    return len;
 8002942:	687b      	ldr	r3, [r7, #4]
  }
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_TIM_PeriodElapsedCallback>:
#ifdef __cplusplus
  }
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  // Check which Systick timer is generating the interrupt
  if (htim->Instance == TIM1) { // Or whatever your HAL_IncTick uses
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a10      	ldr	r2, [pc, #64]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d102      	bne.n	8002964 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800295e:	f007 ff93 	bl	800a888 <HAL_IncTick>
    inactivity_timer_elapsed_flag = true;
    HAL_TIM_Base_Stop_IT(&htim16); // Stop timer, will be restarted on activity
    printf("Inactivity timer elapsed.\r\n");
  }
  // Add other timer callbacks if you have them
}
 8002962:	e017      	b.n	8002994 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == htim2.Instance) // Check against the specific timer instance
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d103      	bne.n	8002978 <HAL_TIM_PeriodElapsedCallback+0x2c>
    g_measure_battery_flag = 1;
 8002970:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
}
 8002976:	e00d      	b.n	8002994 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM16) // Inactivity Timer (e.g. TIM16)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0a      	ldr	r2, [pc, #40]	@ (80029a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d108      	bne.n	8002994 <HAL_TIM_PeriodElapsedCallback+0x48>
    inactivity_timer_elapsed_flag = true;
 8002982:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(&htim16); // Stop timer, will be restarted on activity
 8002988:	4809      	ldr	r0, [pc, #36]	@ (80029b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800298a:	f00e f97f 	bl	8010c8c <HAL_TIM_Base_Stop_IT>
    printf("Inactivity timer elapsed.\r\n");
 800298e:	4809      	ldr	r0, [pc, #36]	@ (80029b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002990:	f010 fd16 	bl	80133c0 <puts>
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	200005a8 	.word	0x200005a8
 80029a4:	200003c8 	.word	0x200003c8
 80029a8:	40014400 	.word	0x40014400
 80029ac:	20000448 	.word	0x20000448
 80029b0:	200005f4 	.word	0x200005f4
 80029b4:	08015e78 	.word	0x08015e78

080029b8 <_Z8I2C_ScanP19__I2C_HandleTypeDef>:

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a28      	ldr	r2, [pc, #160]	@ (8002a68 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d106      	bne.n	80029d8 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x20>
    printf("Scanning I2C Bus 1 (MUX Channel %d)...\r\n", i2c_channel_to_use);
 80029ca:	4b28      	ldr	r3, [pc, #160]	@ (8002a6c <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb4>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4619      	mov	r1, r3
 80029d0:	4827      	ldr	r0, [pc, #156]	@ (8002a70 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb8>)
 80029d2:	f010 fc85 	bl	80132e0 <iprintf>
 80029d6:	e00b      	b.n	80029f0 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x38>
  } else if (hi2c->Instance == I2C3) {
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a25      	ldr	r2, [pc, #148]	@ (8002a74 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xbc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d103      	bne.n	80029ea <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x32>
    printf("Scanning I2C Bus 3...\r\n");
 80029e2:	4825      	ldr	r0, [pc, #148]	@ (8002a78 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xc0>)
 80029e4:	f010 fcec 	bl	80133c0 <puts>
 80029e8:	e002      	b.n	80029f0 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x38>
  } else {
    printf("Scanning Unknown I2C Bus...\r\n");
 80029ea:	4824      	ldr	r0, [pc, #144]	@ (8002a7c <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xc4>)
 80029ec:	f010 fce8 	bl	80133c0 <puts>
  }

  HAL_StatusTypeDef res;
  uint8_t i = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
  for (i = 1; i < 128; i++) {
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e015      	b.n	8002a26 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x6e>
    res = HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i << 1), 2, 10); // 2 trials, 10ms timeout
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	b299      	uxth	r1, r3
 8002a02:	230a      	movs	r3, #10
 8002a04:	2202      	movs	r2, #2
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f00a fc98 	bl	800d33c <HAL_I2C_IsDeviceReady>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	73bb      	strb	r3, [r7, #14]
    if (res == HAL_OK) {
 8002a10:	7bbb      	ldrb	r3, [r7, #14]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d104      	bne.n	8002a20 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x68>
      printf("I2C Device Found at Address: 0x%02X\r\n", i);
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4819      	ldr	r0, [pc, #100]	@ (8002a80 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xc8>)
 8002a1c:	f010 fc60 	bl	80132e0 <iprintf>
  for (i = 1; i < 128; i++) {
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	3301      	adds	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	dae5      	bge.n	80029fa <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x42>
    }
  }
  if (hi2c->Instance == I2C1) {
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a0d      	ldr	r2, [pc, #52]	@ (8002a68 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d106      	bne.n	8002a46 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0x8e>
    printf("I2C Bus 1 (MUX Channel %d) Scan Complete.\r\n", i2c_channel_to_use);
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xb4>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4811      	ldr	r0, [pc, #68]	@ (8002a84 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xcc>)
 8002a40:	f010 fc4e 	bl	80132e0 <iprintf>
  } else if (hi2c->Instance == I2C3) {
    printf("I2C Bus 3 Scan Complete.\r\n");
  } else {
    printf("Unknown I2C Bus Scan Complete.\r\n");
  }
}
 8002a44:	e00b      	b.n	8002a5e <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xa6>
  } else if (hi2c->Instance == I2C3) {
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xbc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d103      	bne.n	8002a58 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xa0>
    printf("I2C Bus 3 Scan Complete.\r\n");
 8002a50:	480d      	ldr	r0, [pc, #52]	@ (8002a88 <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xd0>)
 8002a52:	f010 fcb5 	bl	80133c0 <puts>
}
 8002a56:	e002      	b.n	8002a5e <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xa6>
    printf("Unknown I2C Bus Scan Complete.\r\n");
 8002a58:	480c      	ldr	r0, [pc, #48]	@ (8002a8c <_Z8I2C_ScanP19__I2C_HandleTypeDef+0xd4>)
 8002a5a:	f010 fcb1 	bl	80133c0 <puts>
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40005400 	.word	0x40005400
 8002a6c:	20000010 	.word	0x20000010
 8002a70:	08015e94 	.word	0x08015e94
 8002a74:	40005c00 	.word	0x40005c00
 8002a78:	08015ec0 	.word	0x08015ec0
 8002a7c:	08015ed8 	.word	0x08015ed8
 8002a80:	08015ef8 	.word	0x08015ef8
 8002a84:	08015f20 	.word	0x08015f20
 8002a88:	08015f4c 	.word	0x08015f4c
 8002a8c:	08015f68 	.word	0x08015f68

08002a90 <_Z17printByteAsBinaryh>:

void printByteAsBinary(uint8_t value) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  for (int i = 7; i >= 0; i--) {
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	e00c      	b.n	8002aba <_Z17printByteAsBinaryh+0x2a>
    printf("%d", (value >> i) & 1); // Print 0 or 1
 8002aa0:	79fa      	ldrb	r2, [r7, #7]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	fa42 f303 	asr.w	r3, r2, r3
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	4619      	mov	r1, r3
 8002aae:	4807      	ldr	r0, [pc, #28]	@ (8002acc <_Z17printByteAsBinaryh+0x3c>)
 8002ab0:	f010 fc16 	bl	80132e0 <iprintf>
  for (int i = 7; i >= 0; i--) {
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	daef      	bge.n	8002aa0 <_Z17printByteAsBinaryh+0x10>
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	08015f88 	.word	0x08015f88

08002ad0 <_Z19print2BytesAsBinaryt>:

void print2BytesAsBinary(uint16_t value) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
  for (int i = 15; i >= 0; i--) {
 8002ada:	230f      	movs	r3, #15
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e00c      	b.n	8002afa <_Z19print2BytesAsBinaryt+0x2a>
    printf("%d", (value >> i) & 1); // Print 0 or 1
 8002ae0:	88fa      	ldrh	r2, [r7, #6]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	fa42 f303 	asr.w	r3, r2, r3
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	4619      	mov	r1, r3
 8002aee:	4807      	ldr	r0, [pc, #28]	@ (8002b0c <_Z19print2BytesAsBinaryt+0x3c>)
 8002af0:	f010 fbf6 	bl	80132e0 <iprintf>
  for (int i = 15; i >= 0; i--) {
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	daef      	bge.n	8002ae0 <_Z19print2BytesAsBinaryt+0x10>
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	08015f88 	.word	0x08015f88

08002b10 <_Z14printRegistersh>:


void printRegisters(uint8_t driver_id) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b090      	sub	sp, #64	@ 0x40
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]

  // variable to avoid float printing
  char buffer[50];
  printf("Speed of motor: ");
 8002b1a:	48d1      	ldr	r0, [pc, #836]	@ (8002e60 <_Z14printRegistersh+0x350>)
 8002b1c:	f010 fbe0 	bl	80132e0 <iprintf>
  printf("%d", drivers[driver_id].getMotorSpeedRPM());
 8002b20:	79fa      	ldrb	r2, [r7, #7]
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4ace      	ldr	r2, [pc, #824]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f006 f826 	bl	8008b80 <_ZN7DRV821416getMotorSpeedRPMEv>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4619      	mov	r1, r3
 8002b38:	48cb      	ldr	r0, [pc, #812]	@ (8002e68 <_Z14printRegistersh+0x358>)
 8002b3a:	f010 fbd1 	bl	80132e0 <iprintf>
  printf(" RPM or ");
 8002b3e:	48cb      	ldr	r0, [pc, #812]	@ (8002e6c <_Z14printRegistersh+0x35c>)
 8002b40:	f010 fbce 	bl	80132e0 <iprintf>
  printf("%.2f", drivers[driver_id].getMotorSpeedRAD());
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4ac5      	ldr	r2, [pc, #788]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002b50:	4413      	add	r3, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f006 f850 	bl	8008bf8 <_ZN7DRV821416getMotorSpeedRADEv>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	48c4      	ldr	r0, [pc, #784]	@ (8002e70 <_Z14printRegistersh+0x360>)
 8002b5e:	f010 fbbf 	bl	80132e0 <iprintf>
  printf(" rad/s | ");
 8002b62:	48c4      	ldr	r0, [pc, #784]	@ (8002e74 <_Z14printRegistersh+0x364>)
 8002b64:	f010 fbbc 	bl	80132e0 <iprintf>

  printf("Voltage: ");
 8002b68:	48c3      	ldr	r0, [pc, #780]	@ (8002e78 <_Z14printRegistersh+0x368>)
 8002b6a:	f010 fbb9 	bl	80132e0 <iprintf>
  printf("%.2f", drivers[driver_id].getMotorVoltage());
 8002b6e:	79fa      	ldrb	r2, [r7, #7]
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4aba      	ldr	r2, [pc, #744]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f006 f8a5 	bl	8008ccc <_ZN7DRV821415getMotorVoltageEv>
 8002b82:	ee10 3a10 	vmov	r3, s0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fcb6 	bl	80004f8 <__aeabi_f2d>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	48b7      	ldr	r0, [pc, #732]	@ (8002e70 <_Z14printRegistersh+0x360>)
 8002b92:	f010 fba5 	bl	80132e0 <iprintf>
  printf(" V | ");
 8002b96:	48b9      	ldr	r0, [pc, #740]	@ (8002e7c <_Z14printRegistersh+0x36c>)
 8002b98:	f010 fba2 	bl	80132e0 <iprintf>

  printf("Current: ");
 8002b9c:	48b8      	ldr	r0, [pc, #736]	@ (8002e80 <_Z14printRegistersh+0x370>)
 8002b9e:	f010 fb9f 	bl	80132e0 <iprintf>
  printf("%.2f", drivers[driver_id].getMotorCurrent());
 8002ba2:	79fa      	ldrb	r2, [r7, #7]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4aad      	ldr	r2, [pc, #692]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002bae:	4413      	add	r3, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f006 f90d 	bl	8008dd0 <_ZN7DRV821415getMotorCurrentEv>
 8002bb6:	ee10 3a10 	vmov	r3, s0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fc9c 	bl	80004f8 <__aeabi_f2d>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	48aa      	ldr	r0, [pc, #680]	@ (8002e70 <_Z14printRegistersh+0x360>)
 8002bc6:	f010 fb8b 	bl	80132e0 <iprintf>
  printf(" A | ");
 8002bca:	48ae      	ldr	r0, [pc, #696]	@ (8002e84 <_Z14printRegistersh+0x374>)
 8002bcc:	f010 fb88 	bl	80132e0 <iprintf>

  printf("Speed of shaft: ");
 8002bd0:	48ad      	ldr	r0, [pc, #692]	@ (8002e88 <_Z14printRegistersh+0x378>)
 8002bd2:	f010 fb85 	bl	80132e0 <iprintf>
  printf("%d", drivers[driver_id].getMotorSpeedShaftRPM());
 8002bd6:	79fa      	ldrb	r2, [r7, #7]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4aa0      	ldr	r2, [pc, #640]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002be2:	4413      	add	r3, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f006 f821 	bl	8008c2c <_ZN7DRV821421getMotorSpeedShaftRPMEv>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4619      	mov	r1, r3
 8002bee:	489e      	ldr	r0, [pc, #632]	@ (8002e68 <_Z14printRegistersh+0x358>)
 8002bf0:	f010 fb76 	bl	80132e0 <iprintf>
  printf(" RPM or ");
 8002bf4:	489d      	ldr	r0, [pc, #628]	@ (8002e6c <_Z14printRegistersh+0x35c>)
 8002bf6:	f010 fb73 	bl	80132e0 <iprintf>
  printf("%.2f", drivers[driver_id].getMotorSpeedShaftRAD());
 8002bfa:	79fa      	ldrb	r2, [r7, #7]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4a97      	ldr	r2, [pc, #604]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002c06:	4413      	add	r3, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f006 f820 	bl	8008c4e <_ZN7DRV821421getMotorSpeedShaftRADEv>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4619      	mov	r1, r3
 8002c12:	4897      	ldr	r0, [pc, #604]	@ (8002e70 <_Z14printRegistersh+0x360>)
 8002c14:	f010 fb64 	bl	80132e0 <iprintf>
  printf(" rad/s | ");
 8002c18:	4896      	ldr	r0, [pc, #600]	@ (8002e74 <_Z14printRegistersh+0x364>)
 8002c1a:	f010 fb61 	bl	80132e0 <iprintf>

  printf("Duty Cycle: ");
 8002c1e:	489b      	ldr	r0, [pc, #620]	@ (8002e8c <_Z14printRegistersh+0x37c>)
 8002c20:	f010 fb5e 	bl	80132e0 <iprintf>
  printf("%hhu", drivers[driver_id].getDutyCycle()); // %hhu for uint8_t
 8002c24:	79fa      	ldrb	r2, [r7, #7]
 8002c26:	4613      	mov	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4a8d      	ldr	r2, [pc, #564]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002c30:	4413      	add	r3, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f006 f900 	bl	8008e38 <_ZN7DRV821412getDutyCycleEv>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4894      	ldr	r0, [pc, #592]	@ (8002e90 <_Z14printRegistersh+0x380>)
 8002c3e:	f010 fb4f 	bl	80132e0 <iprintf>
  printf("%% | ");
 8002c42:	4894      	ldr	r0, [pc, #592]	@ (8002e94 <_Z14printRegistersh+0x384>)
 8002c44:	f010 fb4c 	bl	80132e0 <iprintf>

  printf("Tinrush: ");
 8002c48:	4893      	ldr	r0, [pc, #588]	@ (8002e98 <_Z14printRegistersh+0x388>)
 8002c4a:	f010 fb49 	bl	80132e0 <iprintf>
  printf("%hu", drivers[driver_id].getInrushDuration()); // %hu for uint16_t
 8002c4e:	79fa      	ldrb	r2, [r7, #7]
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4a82      	ldr	r2, [pc, #520]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f006 f91a 	bl	8008e96 <_ZN7DRV821417getInrushDurationEv>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4619      	mov	r1, r3
 8002c66:	488d      	ldr	r0, [pc, #564]	@ (8002e9c <_Z14printRegistersh+0x38c>)
 8002c68:	f010 fb3a 	bl	80132e0 <iprintf>
  printf(" ms | "); // Added space and separator for consistency
 8002c6c:	488c      	ldr	r0, [pc, #560]	@ (8002ea0 <_Z14printRegistersh+0x390>)
 8002c6e:	f010 fb37 	bl	80132e0 <iprintf>

  printf("RC_STATUS1 (SPEED): 0b");
 8002c72:	488c      	ldr	r0, [pc, #560]	@ (8002ea4 <_Z14printRegistersh+0x394>)
 8002c74:	f010 fb34 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getMotorSpeedRegister());
 8002c78:	79fa      	ldrb	r2, [r7, #7]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4a78      	ldr	r2, [pc, #480]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002c84:	4413      	add	r3, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f005 fff3 	bl	8008c72 <_ZN7DRV821421getMotorSpeedRegisterEv>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fefe 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002c94:	4884      	ldr	r0, [pc, #528]	@ (8002ea8 <_Z14printRegistersh+0x398>)
 8002c96:	f010 fb23 	bl	80132e0 <iprintf>

  printf("REG_STATUS1 (VOLTAGE): 0b");
 8002c9a:	4884      	ldr	r0, [pc, #528]	@ (8002eac <_Z14printRegistersh+0x39c>)
 8002c9c:	f010 fb20 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getMotorVoltageRegister());
 8002ca0:	79fa      	ldrb	r2, [r7, #7]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4a6e      	ldr	r2, [pc, #440]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002cac:	4413      	add	r3, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f006 f87e 	bl	8008db0 <_ZN7DRV821423getMotorVoltageRegisterEv>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff feea 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002cbc:	487a      	ldr	r0, [pc, #488]	@ (8002ea8 <_Z14printRegistersh+0x398>)
 8002cbe:	f010 fb0f 	bl	80132e0 <iprintf>

  printf("REG_STATUS2 (CURRENT): 0b");
 8002cc2:	487b      	ldr	r0, [pc, #492]	@ (8002eb0 <_Z14printRegistersh+0x3a0>)
 8002cc4:	f010 fb0c 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getMotorCurrentRegister());
 8002cc8:	79fa      	ldrb	r2, [r7, #7]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4a64      	ldr	r2, [pc, #400]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002cd4:	4413      	add	r3, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f006 f89e 	bl	8008e18 <_ZN7DRV821423getMotorCurrentRegisterEv>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fed6 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002ce4:	4870      	ldr	r0, [pc, #448]	@ (8002ea8 <_Z14printRegistersh+0x398>)
 8002ce6:	f010 fafb 	bl	80132e0 <iprintf>

  printf("Ripple counter: ");
 8002cea:	4872      	ldr	r0, [pc, #456]	@ (8002eb4 <_Z14printRegistersh+0x3a4>)
 8002cec:	f010 faf8 	bl	80132e0 <iprintf>
  printf("%hu", drivers[driver_id].getRippleCount()); // %hu for uint16_t
 8002cf0:	79fa      	ldrb	r2, [r7, #7]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4a5a      	ldr	r2, [pc, #360]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f005 ffc6 	bl	8008c90 <_ZN7DRV821414getRippleCountEv>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4619      	mov	r1, r3
 8002d08:	4864      	ldr	r0, [pc, #400]	@ (8002e9c <_Z14printRegistersh+0x38c>)
 8002d0a:	f010 fae9 	bl	80132e0 <iprintf>
  printf(" | 0b");
 8002d0e:	486a      	ldr	r0, [pc, #424]	@ (8002eb8 <_Z14printRegistersh+0x3a8>)
 8002d10:	f010 fae6 	bl	80132e0 <iprintf>
  print2BytesAsBinary(drivers[driver_id].getRippleCount());
 8002d14:	79fa      	ldrb	r2, [r7, #7]
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4a51      	ldr	r2, [pc, #324]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002d20:	4413      	add	r3, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f005 ffb4 	bl	8008c90 <_ZN7DRV821414getRippleCountEv>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fed0 	bl	8002ad0 <_Z19print2BytesAsBinaryt>
  printf(" | ");
 8002d30:	485d      	ldr	r0, [pc, #372]	@ (8002ea8 <_Z14printRegistersh+0x398>)
 8002d32:	f010 fad5 	bl	80132e0 <iprintf>

  drivers[driver_id].printFaultStatus(); // Assuming this function prints its own content + newline if needed
 8002d36:	79fa      	ldrb	r2, [r7, #7]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4a48      	ldr	r2, [pc, #288]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002d42:	4413      	add	r3, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f007 fbbb 	bl	800a4c0 <_ZN7DRV821416printFaultStatusEv>

  printf("CONFIG0: 0b");
 8002d4a:	485c      	ldr	r0, [pc, #368]	@ (8002ebc <_Z14printRegistersh+0x3ac>)
 8002d4c:	f010 fac8 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getCONFIG0());
 8002d50:	79fa      	ldrb	r2, [r7, #7]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4a42      	ldr	r2, [pc, #264]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f006 f88a 	bl	8008e78 <_ZN7DRV821410getCONFIG0Ev>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fe92 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002d6c:	484e      	ldr	r0, [pc, #312]	@ (8002ea8 <_Z14printRegistersh+0x398>)
 8002d6e:	f010 fab7 	bl	80132e0 <iprintf>

  printf("CONFIG3: 0b");
 8002d72:	4853      	ldr	r0, [pc, #332]	@ (8002ec0 <_Z14printRegistersh+0x3b0>)
 8002d74:	f010 fab4 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getCONFIG3());
 8002d78:	79fa      	ldrb	r2, [r7, #7]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4a38      	ldr	r2, [pc, #224]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002d84:	4413      	add	r3, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f006 f8a2 	bl	8008ed0 <_ZN7DRV821410getCONFIG3Ev>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fe7e 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002d94:	4844      	ldr	r0, [pc, #272]	@ (8002ea8 <_Z14printRegistersh+0x398>)
 8002d96:	f010 faa3 	bl	80132e0 <iprintf>

  printf("CONFIG4: 0b");
 8002d9a:	484a      	ldr	r0, [pc, #296]	@ (8002ec4 <_Z14printRegistersh+0x3b4>)
 8002d9c:	f010 faa0 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getCONFIG4());
 8002da0:	79fa      	ldrb	r2, [r7, #7]
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4a2e      	ldr	r2, [pc, #184]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002dac:	4413      	add	r3, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f006 f89d 	bl	8008eee <_ZN7DRV821410getCONFIG4Ev>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fe6a 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002dbc:	483a      	ldr	r0, [pc, #232]	@ (8002ea8 <_Z14printRegistersh+0x398>)
 8002dbe:	f010 fa8f 	bl	80132e0 <iprintf>

  printf("REG_CTRL0: 0b");
 8002dc2:	4841      	ldr	r0, [pc, #260]	@ (8002ec8 <_Z14printRegistersh+0x3b8>)
 8002dc4:	f010 fa8c 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getREG_CTRL0());
 8002dc8:	79fa      	ldrb	r2, [r7, #7]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4a24      	ldr	r2, [pc, #144]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002dd4:	4413      	add	r3, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f006 f898 	bl	8008f0c <_ZN7DRV821412getREG_CTRL0Ev>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fe56 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002de4:	4830      	ldr	r0, [pc, #192]	@ (8002ea8 <_Z14printRegistersh+0x398>)
 8002de6:	f010 fa7b 	bl	80132e0 <iprintf>

  printf("REG_CTRL1 (TARGET SPEED): 0b");
 8002dea:	4838      	ldr	r0, [pc, #224]	@ (8002ecc <_Z14printRegistersh+0x3bc>)
 8002dec:	f010 fa78 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getREG_CTRL1());
 8002df0:	79fa      	ldrb	r2, [r7, #7]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002dfc:	4413      	add	r3, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f006 f893 	bl	8008f2a <_ZN7DRV821412getREG_CTRL1Ev>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fe42 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002e0c:	4826      	ldr	r0, [pc, #152]	@ (8002ea8 <_Z14printRegistersh+0x398>)
 8002e0e:	f010 fa67 	bl	80132e0 <iprintf>

  printf("REG_CTRL2 (DUTY): 0b");
 8002e12:	482f      	ldr	r0, [pc, #188]	@ (8002ed0 <_Z14printRegistersh+0x3c0>)
 8002e14:	f010 fa64 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getREG_CTRL2());
 8002e18:	79fa      	ldrb	r2, [r7, #7]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4a10      	ldr	r2, [pc, #64]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002e24:	4413      	add	r3, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f006 f88e 	bl	8008f48 <_ZN7DRV821412getREG_CTRL2Ev>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fe2e 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002e34:	481c      	ldr	r0, [pc, #112]	@ (8002ea8 <_Z14printRegistersh+0x398>)
 8002e36:	f010 fa53 	bl	80132e0 <iprintf>

  printf("RC_CTRL0: 0b");
 8002e3a:	4826      	ldr	r0, [pc, #152]	@ (8002ed4 <_Z14printRegistersh+0x3c4>)
 8002e3c:	f010 fa50 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL0());
 8002e40:	79fa      	ldrb	r2, [r7, #7]
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4a06      	ldr	r2, [pc, #24]	@ (8002e64 <_Z14printRegistersh+0x354>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f006 f889 	bl	8008f66 <_ZN7DRV821411getRC_CTRL0Ev>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fe1a 	bl	8002a90 <_Z17printByteAsBinaryh>
 8002e5c:	e03c      	b.n	8002ed8 <_Z14printRegistersh+0x3c8>
 8002e5e:	bf00      	nop
 8002e60:	08015f8c 	.word	0x08015f8c
 8002e64:	2000044c 	.word	0x2000044c
 8002e68:	08015f88 	.word	0x08015f88
 8002e6c:	08015fa0 	.word	0x08015fa0
 8002e70:	08015fac 	.word	0x08015fac
 8002e74:	08015fb4 	.word	0x08015fb4
 8002e78:	08015fc0 	.word	0x08015fc0
 8002e7c:	08015fcc 	.word	0x08015fcc
 8002e80:	08015fd4 	.word	0x08015fd4
 8002e84:	08015fe0 	.word	0x08015fe0
 8002e88:	08015fe8 	.word	0x08015fe8
 8002e8c:	08015ffc 	.word	0x08015ffc
 8002e90:	0801600c 	.word	0x0801600c
 8002e94:	08016014 	.word	0x08016014
 8002e98:	0801601c 	.word	0x0801601c
 8002e9c:	08016028 	.word	0x08016028
 8002ea0:	0801602c 	.word	0x0801602c
 8002ea4:	08016034 	.word	0x08016034
 8002ea8:	0801604c 	.word	0x0801604c
 8002eac:	08016050 	.word	0x08016050
 8002eb0:	0801606c 	.word	0x0801606c
 8002eb4:	08016088 	.word	0x08016088
 8002eb8:	0801609c 	.word	0x0801609c
 8002ebc:	080160a4 	.word	0x080160a4
 8002ec0:	080160b0 	.word	0x080160b0
 8002ec4:	080160bc 	.word	0x080160bc
 8002ec8:	080160c8 	.word	0x080160c8
 8002ecc:	080160d8 	.word	0x080160d8
 8002ed0:	080160f8 	.word	0x080160f8
 8002ed4:	08016110 	.word	0x08016110
  printf(" | ");
 8002ed8:	485a      	ldr	r0, [pc, #360]	@ (8003044 <_Z14printRegistersh+0x534>)
 8002eda:	f010 fa01 	bl	80132e0 <iprintf>

  printf("KMC: ");
 8002ede:	485a      	ldr	r0, [pc, #360]	@ (8003048 <_Z14printRegistersh+0x538>)
 8002ee0:	f010 f9fe 	bl	80132e0 <iprintf>
  printf("%hhu", drivers[driver_id].getKMC()); // %hhu for uint8_t
 8002ee4:	79fa      	ldrb	r2, [r7, #7]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4a57      	ldr	r2, [pc, #348]	@ (800304c <_Z14printRegistersh+0x53c>)
 8002ef0:	4413      	add	r3, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f006 f8e9 	bl	80090ca <_ZN7DRV82146getKMCEv>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4619      	mov	r1, r3
 8002efc:	4854      	ldr	r0, [pc, #336]	@ (8003050 <_Z14printRegistersh+0x540>)
 8002efe:	f010 f9ef 	bl	80132e0 <iprintf>
  printf(" | Ripple Threshold Scaled: ");
 8002f02:	4854      	ldr	r0, [pc, #336]	@ (8003054 <_Z14printRegistersh+0x544>)
 8002f04:	f010 f9ec 	bl	80132e0 <iprintf>
  printf("%hu", drivers[driver_id].getRippleThresholdScaled()); // %hu for uint16_t
 8002f08:	79fa      	ldrb	r2, [r7, #7]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4a4e      	ldr	r2, [pc, #312]	@ (800304c <_Z14printRegistersh+0x53c>)
 8002f14:	4413      	add	r3, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f006 f877 	bl	800900a <_ZN7DRV821424getRippleThresholdScaledEv>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4619      	mov	r1, r3
 8002f20:	484d      	ldr	r0, [pc, #308]	@ (8003058 <_Z14printRegistersh+0x548>)
 8002f22:	f010 f9dd 	bl	80132e0 <iprintf>
  printf(" | Ripples Threshold: ");
 8002f26:	484d      	ldr	r0, [pc, #308]	@ (800305c <_Z14printRegistersh+0x54c>)
 8002f28:	f010 f9da 	bl	80132e0 <iprintf>
  printf("%hu", drivers[driver_id].getRippleThreshold()); // %hu for uint16_t
 8002f2c:	79fa      	ldrb	r2, [r7, #7]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4a45      	ldr	r2, [pc, #276]	@ (800304c <_Z14printRegistersh+0x53c>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f006 f840 	bl	8008fc0 <_ZN7DRV821418getRippleThresholdEv>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4619      	mov	r1, r3
 8002f44:	4844      	ldr	r0, [pc, #272]	@ (8003058 <_Z14printRegistersh+0x548>)
 8002f46:	f010 f9cb 	bl	80132e0 <iprintf>
  printf(" or 0b");
 8002f4a:	4845      	ldr	r0, [pc, #276]	@ (8003060 <_Z14printRegistersh+0x550>)
 8002f4c:	f010 f9c8 	bl	80132e0 <iprintf>
  print2BytesAsBinary(drivers[driver_id].getRippleThreshold());
 8002f50:	79fa      	ldrb	r2, [r7, #7]
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4a3c      	ldr	r2, [pc, #240]	@ (800304c <_Z14printRegistersh+0x53c>)
 8002f5c:	4413      	add	r3, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f006 f82e 	bl	8008fc0 <_ZN7DRV821418getRippleThresholdEv>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fdb2 	bl	8002ad0 <_Z19print2BytesAsBinaryt>
  printf(" | ");
 8002f6c:	4835      	ldr	r0, [pc, #212]	@ (8003044 <_Z14printRegistersh+0x534>)
 8002f6e:	f010 f9b7 	bl	80132e0 <iprintf>

  printf("RC_CTRL1: 0b");
 8002f72:	483c      	ldr	r0, [pc, #240]	@ (8003064 <_Z14printRegistersh+0x554>)
 8002f74:	f010 f9b4 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL1());
 8002f78:	79fa      	ldrb	r2, [r7, #7]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4a32      	ldr	r2, [pc, #200]	@ (800304c <_Z14printRegistersh+0x53c>)
 8002f84:	4413      	add	r3, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f005 fffc 	bl	8008f84 <_ZN7DRV821411getRC_CTRL1Ev>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fd7e 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002f94:	482b      	ldr	r0, [pc, #172]	@ (8003044 <_Z14printRegistersh+0x534>)
 8002f96:	f010 f9a3 	bl	80132e0 <iprintf>

  printf("RC_CTRL2: 0b");
 8002f9a:	4833      	ldr	r0, [pc, #204]	@ (8003068 <_Z14printRegistersh+0x558>)
 8002f9c:	f010 f9a0 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL2());
 8002fa0:	79fa      	ldrb	r2, [r7, #7]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4a28      	ldr	r2, [pc, #160]	@ (800304c <_Z14printRegistersh+0x53c>)
 8002fac:	4413      	add	r3, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f005 fff7 	bl	8008fa2 <_ZN7DRV821411getRC_CTRL2Ev>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fd6a 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002fbc:	4821      	ldr	r0, [pc, #132]	@ (8003044 <_Z14printRegistersh+0x534>)
 8002fbe:	f010 f98f 	bl	80132e0 <iprintf>

  printf("RC_CTRL6: 0b");
 8002fc2:	482a      	ldr	r0, [pc, #168]	@ (800306c <_Z14printRegistersh+0x55c>)
 8002fc4:	f010 f98c 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL6());
 8002fc8:	79fa      	ldrb	r2, [r7, #7]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800304c <_Z14printRegistersh+0x53c>)
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f006 f886 	bl	80090e8 <_ZN7DRV821411getRC_CTRL6Ev>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fd56 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 8002fe4:	4817      	ldr	r0, [pc, #92]	@ (8003044 <_Z14printRegistersh+0x534>)
 8002fe6:	f010 f97b 	bl	80132e0 <iprintf>

  printf("RC_CTRL7: 0b");
 8002fea:	4821      	ldr	r0, [pc, #132]	@ (8003070 <_Z14printRegistersh+0x560>)
 8002fec:	f010 f978 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL7());
 8002ff0:	79fa      	ldrb	r2, [r7, #7]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4a14      	ldr	r2, [pc, #80]	@ (800304c <_Z14printRegistersh+0x53c>)
 8002ffc:	4413      	add	r3, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f006 f881 	bl	8009106 <_ZN7DRV821411getRC_CTRL7Ev>
 8003004:	4603      	mov	r3, r0
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fd42 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf(" | ");
 800300c:	480d      	ldr	r0, [pc, #52]	@ (8003044 <_Z14printRegistersh+0x534>)
 800300e:	f010 f967 	bl	80132e0 <iprintf>

  printf("RC_CTRL8: 0b");
 8003012:	4818      	ldr	r0, [pc, #96]	@ (8003074 <_Z14printRegistersh+0x564>)
 8003014:	f010 f964 	bl	80132e0 <iprintf>
  printByteAsBinary(drivers[driver_id].getRC_CTRL8());
 8003018:	79fa      	ldrb	r2, [r7, #7]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4a0a      	ldr	r2, [pc, #40]	@ (800304c <_Z14printRegistersh+0x53c>)
 8003024:	4413      	add	r3, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f006 f87c 	bl	8009124 <_ZN7DRV821411getRC_CTRL8Ev>
 800302c:	4603      	mov	r3, r0
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fd2e 	bl	8002a90 <_Z17printByteAsBinaryh>
  printf("\n"); // Final newline for the whole block
 8003034:	200a      	movs	r0, #10
 8003036:	f010 f965 	bl	8013304 <putchar>
}
 800303a:	bf00      	nop
 800303c:	3740      	adds	r7, #64	@ 0x40
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	0801604c 	.word	0x0801604c
 8003048:	08016120 	.word	0x08016120
 800304c:	2000044c 	.word	0x2000044c
 8003050:	0801600c 	.word	0x0801600c
 8003054:	08016128 	.word	0x08016128
 8003058:	08016028 	.word	0x08016028
 800305c:	08016148 	.word	0x08016148
 8003060:	08016160 	.word	0x08016160
 8003064:	08016168 	.word	0x08016168
 8003068:	08016178 	.word	0x08016178
 800306c:	08016188 	.word	0x08016188
 8003070:	08016198 	.word	0x08016198
 8003074:	080161a8 	.word	0x080161a8

08003078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800307c:	b672      	cpsid	i
}
 800307e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    // red LED ON
    WS2812_SetColor(255, 0, 0, 100); // Red
 8003080:	2364      	movs	r3, #100	@ 0x64
 8003082:	2200      	movs	r2, #0
 8003084:	2100      	movs	r1, #0
 8003086:	20ff      	movs	r0, #255	@ 0xff
 8003088:	f7fd ff5a 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
    HAL_Delay(200); // Wait for 1 second
 800308c:	20c8      	movs	r0, #200	@ 0xc8
 800308e:	f007 fc27 	bl	800a8e0 <HAL_Delay>
    WS2812_SetColor(0, 0, 0, 0); // Turn off the LED
 8003092:	2300      	movs	r3, #0
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	2000      	movs	r0, #0
 800309a:	f7fd ff51 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
    HAL_Delay(200); // Wait for 1 second
 800309e:	20c8      	movs	r0, #200	@ 0xc8
 80030a0:	f007 fc1e 	bl	800a8e0 <HAL_Delay>
    WS2812_SetColor(255, 0, 0, 100); // Red
 80030a4:	bf00      	nop
 80030a6:	e7eb      	b.n	8003080 <Error_Handler+0x8>

080030a8 <_Z41__static_initialization_and_destruction_0v>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af04      	add	r7, sp, #16
float half_range_ripples = full_range_ripples / 2;
 80030ae:	4b1f      	ldr	r3, [pc, #124]	@ (800312c <_Z41__static_initialization_and_destruction_0v+0x84>)
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030be:	4b1c      	ldr	r3, [pc, #112]	@ (8003130 <_Z41__static_initialization_and_destruction_0v+0x88>)
 80030c0:	edc3 7a00 	vstr	s15, [r3]
float nb_ripples_per_mm = full_range_ripples / full_range_mm;
 80030c4:	4b19      	ldr	r3, [pc, #100]	@ (800312c <_Z41__static_initialization_and_destruction_0v+0x84>)
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	ee07 3a90 	vmov	s15, r3
 80030cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030d0:	4b18      	ldr	r3, [pc, #96]	@ (8003134 <_Z41__static_initialization_and_destruction_0v+0x8c>)
 80030d2:	ed93 7a00 	vldr	s14, [r3]
 80030d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030da:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <_Z41__static_initialization_and_destruction_0v+0x90>)
 80030dc:	edc3 7a00 	vstr	s15, [r3]
};
 80030e0:	4c16      	ldr	r4, [pc, #88]	@ (800313c <_Z41__static_initialization_and_destruction_0v+0x94>)
 80030e2:	f240 4382 	movw	r3, #1154	@ 0x482
 80030e6:	9303      	str	r3, [sp, #12]
 80030e8:	231a      	movs	r3, #26
 80030ea:	9302      	str	r3, [sp, #8]
 80030ec:	2314      	movs	r3, #20
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	2306      	movs	r3, #6
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 80030f8:	2208      	movs	r2, #8
 80030fa:	2138      	movs	r1, #56	@ 0x38
 80030fc:	4620      	mov	r0, r4
 80030fe:	f7fe fc60 	bl	80019c2 <_ZN7DRV8214C1Ehhthhht>
 8003102:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8003106:	f240 4382 	movw	r3, #1154	@ 0x482
 800310a:	9303      	str	r3, [sp, #12]
 800310c:	231a      	movs	r3, #26
 800310e:	9302      	str	r3, [sp, #8]
 8003110:	2314      	movs	r3, #20
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	2306      	movs	r3, #6
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800311c:	2211      	movs	r2, #17
 800311e:	2138      	movs	r1, #56	@ 0x38
 8003120:	f7fe fc4f 	bl	80019c2 <_ZN7DRV8214C1Ehhthhht>
}
 8003124:	bf00      	nop
 8003126:	3704      	adds	r7, #4
 8003128:	46bd      	mov	sp, r7
 800312a:	bd90      	pop	{r4, r7, pc}
 800312c:	20000008 	.word	0x20000008
 8003130:	200003cc 	.word	0x200003cc
 8003134:	2000000c 	.word	0x2000000c
 8003138:	200003d0 	.word	0x200003d0
 800313c:	2000044c 	.word	0x2000044c

08003140 <_GLOBAL__sub_I_g_measure_battery_flag>:
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
 8003144:	f7ff ffb0 	bl	80030a8 <_Z41__static_initialization_and_destruction_0v>
 8003148:	bd80      	pop	{r7, pc}

0800314a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800314e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003156:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800315a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800315e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_APB1_GRP1_EnableClock>:
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003178:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800317a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4313      	orrs	r3, r2
 8003182:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003188:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4013      	ands	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003190:	68fb      	ldr	r3, [r7, #12]
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80031a4:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <MX_RTC_Init+0x5c>)
 80031a6:	4a16      	ldr	r2, [pc, #88]	@ (8003200 <MX_RTC_Init+0x60>)
 80031a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031aa:	4b14      	ldr	r3, [pc, #80]	@ (80031fc <MX_RTC_Init+0x5c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80031b0:	4b12      	ldr	r3, [pc, #72]	@ (80031fc <MX_RTC_Init+0x5c>)
 80031b2:	227f      	movs	r2, #127	@ 0x7f
 80031b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80031b6:	4b11      	ldr	r3, [pc, #68]	@ (80031fc <MX_RTC_Init+0x5c>)
 80031b8:	22ff      	movs	r2, #255	@ 0xff
 80031ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80031bc:	4b0f      	ldr	r3, [pc, #60]	@ (80031fc <MX_RTC_Init+0x5c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031c2:	4b0e      	ldr	r3, [pc, #56]	@ (80031fc <MX_RTC_Init+0x5c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80031c8:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <MX_RTC_Init+0x5c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80031ce:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <MX_RTC_Init+0x5c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80031d4:	4809      	ldr	r0, [pc, #36]	@ (80031fc <MX_RTC_Init+0x5c>)
 80031d6:	f00c fdaf 	bl	800fd38 <HAL_RTC_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80031e0:	f7ff ff4a 	bl	8003078 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80031e4:	2200      	movs	r2, #0
 80031e6:	2100      	movs	r1, #0
 80031e8:	4804      	ldr	r0, [pc, #16]	@ (80031fc <MX_RTC_Init+0x5c>)
 80031ea:	f00c feb3 	bl	800ff54 <HAL_RTCEx_SetWakeUpTimer_IT>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80031f4:	f7ff ff40 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	200004bc 	.word	0x200004bc
 8003200:	40002800 	.word	0x40002800

08003204 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b096      	sub	sp, #88	@ 0x58
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	2250      	movs	r2, #80	@ 0x50
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f010 f8db 	bl	80133d0 <memset>
  if(rtcHandle->Instance==RTC)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a13      	ldr	r2, [pc, #76]	@ (800326c <HAL_RTC_MspInit+0x68>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d11f      	bne.n	8003264 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8003224:	f00a ff08 	bl	800e038 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003228:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800322c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800322e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003232:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003234:	f107 0308 	add.w	r3, r7, #8
 8003238:	4618      	mov	r0, r3
 800323a:	f00c faf6 	bl	800f82a <HAL_RCCEx_PeriphCLKConfig>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8003244:	f7ff ff18 	bl	8003078 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003248:	f7ff ff7f 	bl	800314a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800324c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003250:	f7ff ff8c 	bl	800316c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	2100      	movs	r1, #0
 8003258:	2003      	movs	r0, #3
 800325a:	f008 fdf2 	bl	800be42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800325e:	2003      	movs	r0, #3
 8003260:	f008 fe09 	bl	800be76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003264:	bf00      	nop
 8003266:	3758      	adds	r7, #88	@ 0x58
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40002800 	.word	0x40002800

08003270 <LL_AHB2_GRP1_EnableClock>:
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800327c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800327e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4313      	orrs	r3, r2
 8003286:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4013      	ands	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003294:	68fb      	ldr	r3, [r7, #12]
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LL_APB1_GRP1_EnableClock>:
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80032ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4013      	ands	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032c6:	68fb      	ldr	r3, [r7, #12]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <MX_SPI2_Init+0x74>)
 80032da:	4a1c      	ldr	r2, [pc, #112]	@ (800334c <MX_SPI2_Init+0x78>)
 80032dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032de:	4b1a      	ldr	r3, [pc, #104]	@ (8003348 <MX_SPI2_Init+0x74>)
 80032e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032e6:	4b18      	ldr	r3, [pc, #96]	@ (8003348 <MX_SPI2_Init+0x74>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032ec:	4b16      	ldr	r3, [pc, #88]	@ (8003348 <MX_SPI2_Init+0x74>)
 80032ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032f4:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <MX_SPI2_Init+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032fa:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <MX_SPI2_Init+0x74>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003300:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <MX_SPI2_Init+0x74>)
 8003302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003306:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003308:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <MX_SPI2_Init+0x74>)
 800330a:	2218      	movs	r2, #24
 800330c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800330e:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <MX_SPI2_Init+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003314:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <MX_SPI2_Init+0x74>)
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800331a:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <MX_SPI2_Init+0x74>)
 800331c:	2200      	movs	r2, #0
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003320:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <MX_SPI2_Init+0x74>)
 8003322:	2207      	movs	r2, #7
 8003324:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003326:	4b08      	ldr	r3, [pc, #32]	@ (8003348 <MX_SPI2_Init+0x74>)
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <MX_SPI2_Init+0x74>)
 800332e:	2208      	movs	r2, #8
 8003330:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003332:	4805      	ldr	r0, [pc, #20]	@ (8003348 <MX_SPI2_Init+0x74>)
 8003334:	f00c ff0a 	bl	801014c <HAL_SPI_Init>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800333e:	f7ff fe9b 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200004e0 	.word	0x200004e0
 800334c:	40003800 	.word	0x40003800

08003350 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a31      	ldr	r2, [pc, #196]	@ (8003434 <HAL_SPI_MspInit+0xe4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d15b      	bne.n	800342a <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003372:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003376:	f7ff ff94 	bl	80032a2 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800337a:	2004      	movs	r0, #4
 800337c:	f7ff ff78 	bl	8003270 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003380:	2002      	movs	r0, #2
 8003382:	f7ff ff75 	bl	8003270 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003386:	2308      	movs	r3, #8
 8003388:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338a:	2302      	movs	r3, #2
 800338c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003392:	2303      	movs	r3, #3
 8003394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003396:	2305      	movs	r3, #5
 8003398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	4619      	mov	r1, r3
 80033a0:	4825      	ldr	r0, [pc, #148]	@ (8003438 <HAL_SPI_MspInit+0xe8>)
 80033a2:	f009 f80b 	bl	800c3bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033b8:	2305      	movs	r3, #5
 80033ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033bc:	f107 030c 	add.w	r3, r7, #12
 80033c0:	4619      	mov	r1, r3
 80033c2:	481e      	ldr	r0, [pc, #120]	@ (800343c <HAL_SPI_MspInit+0xec>)
 80033c4:	f008 fffa 	bl	800c3bc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 80033c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 80033ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003444 <HAL_SPI_MspInit+0xf4>)
 80033cc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80033ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 80033d0:	2209      	movs	r2, #9
 80033d2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 80033d6:	2210      	movs	r2, #16
 80033d8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033da:	4b19      	ldr	r3, [pc, #100]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 80033dc:	2200      	movs	r2, #0
 80033de:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033e0:	4b17      	ldr	r3, [pc, #92]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 80033e2:	2280      	movs	r2, #128	@ 0x80
 80033e4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033e6:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ec:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80033f2:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033f8:	4b11      	ldr	r3, [pc, #68]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80033fe:	4810      	ldr	r0, [pc, #64]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 8003400:	f008 fd62 	bl	800bec8 <HAL_DMA_Init>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 800340a:	f7ff fe35 	bl	8003078 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a0b      	ldr	r2, [pc, #44]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 8003412:	655a      	str	r2, [r3, #84]	@ 0x54
 8003414:	4a0a      	ldr	r2, [pc, #40]	@ (8003440 <HAL_SPI_MspInit+0xf0>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800341a:	2200      	movs	r2, #0
 800341c:	2100      	movs	r1, #0
 800341e:	2023      	movs	r0, #35	@ 0x23
 8003420:	f008 fd0f 	bl	800be42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003424:	2023      	movs	r0, #35	@ 0x23
 8003426:	f008 fd26 	bl	800be76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800342a:	bf00      	nop
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40003800 	.word	0x40003800
 8003438:	48000800 	.word	0x48000800
 800343c:	48000400 	.word	0x48000400
 8003440:	20000544 	.word	0x20000544
 8003444:	40020008 	.word	0x40020008

08003448 <LL_AHB3_GRP1_EnableClock>:
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003454:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003456:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4313      	orrs	r3, r2
 800345e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003464:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4013      	ands	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800346c:	68fb      	ldr	r3, [r7, #12]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003480:	463b      	mov	r3, r7
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	605a      	str	r2, [r3, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003488:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800348c:	f7ff ffdc 	bl	8003448 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003490:	2200      	movs	r2, #0
 8003492:	2100      	movs	r1, #0
 8003494:	202e      	movs	r0, #46	@ 0x2e
 8003496:	f008 fcd4 	bl	800be42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800349a:	202e      	movs	r0, #46	@ 0x2e
 800349c:	f008 fceb 	bl	800be76 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80034a8:	463b      	mov	r3, r7
 80034aa:	4618      	mov	r0, r3
 80034ac:	f00a fdd4 	bl	800e058 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80034b0:	f00a fe14 	bl	800e0dc <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <NMI_Handler+0x4>

080034c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c8:	bf00      	nop
 80034ca:	e7fd      	b.n	80034c8 <HardFault_Handler+0x4>

080034cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d0:	bf00      	nop
 80034d2:	e7fd      	b.n	80034d0 <MemManage_Handler+0x4>

080034d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034d8:	bf00      	nop
 80034da:	e7fd      	b.n	80034d8 <BusFault_Handler+0x4>

080034dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <UsageFault_Handler+0x4>

080034e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003512:	f007 f9b9 	bl	800a888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003520:	4802      	ldr	r0, [pc, #8]	@ (800352c <RTC_WKUP_IRQHandler+0x10>)
 8003522:	f00c fde3 	bl	80100ec <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200004bc 	.word	0x200004bc

08003530 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8003534:	2001      	movs	r0, #1
 8003536:	f009 f9bf 	bl	800c8b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}

0800353e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON5_Pin);
 8003542:	2008      	movs	r0, #8
 8003544:	f009 f9b8 	bl	800c8b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003548:	bf00      	nop
 800354a:	bd80      	pop	{r7, pc}

0800354c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8003550:	2010      	movs	r0, #16
 8003552:	f009 f9b1 	bl	800c8b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003560:	4802      	ldr	r0, [pc, #8]	@ (800356c <DMA1_Channel1_IRQHandler+0x10>)
 8003562:	f008 fe17 	bl	800c194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000544 	.word	0x20000544

08003570 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8003574:	2020      	movs	r0, #32
 8003576:	f009 f99f 	bl	800c8b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800357a:	2080      	movs	r0, #128	@ 0x80
 800357c:	f009 f99c 	bl	800c8b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}

08003584 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003588:	4802      	ldr	r0, [pc, #8]	@ (8003594 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800358a:	f00d fbaf 	bl	8010cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200005f4 	.word	0x200005f4

08003598 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800359c:	4802      	ldr	r0, [pc, #8]	@ (80035a8 <TIM2_IRQHandler+0x10>)
 800359e:	f00d fba5 	bl	8010cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200005a8 	.word	0x200005a8

080035ac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80035b0:	4802      	ldr	r0, [pc, #8]	@ (80035bc <SPI2_IRQHandler+0x10>)
 80035b2:	f00c ffe5 	bl	8010580 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200004e0 	.word	0x200004e0

080035c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035c4:	4802      	ldr	r0, [pc, #8]	@ (80035d0 <USART1_IRQHandler+0x10>)
 80035c6:	f00d ffbd 	bl	8011544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000640 	.word	0x20000640

080035d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 80035d8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80035dc:	f009 f96c 	bl	800c8b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80035e8:	4802      	ldr	r0, [pc, #8]	@ (80035f4 <IPCC_C1_RX_IRQHandler+0x10>)
 80035ea:	f00a fbf9 	bl	800dde0 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	2000038c 	.word	0x2000038c

080035f8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80035fc:	4802      	ldr	r0, [pc, #8]	@ (8003608 <IPCC_C1_TX_IRQHandler+0x10>)
 80035fe:	f00a fba1 	bl	800dd44 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	2000038c 	.word	0x2000038c

0800360c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003610:	f009 f96a 	bl	800c8e8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003614:	bf00      	nop
 8003616:	bd80      	pop	{r7, pc}

08003618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return 1;
 800361c:	2301      	movs	r3, #1
}
 800361e:	4618      	mov	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <_kill>:

int _kill(int pid, int sig)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003632:	f00f fed5 	bl	80133e0 <__errno>
 8003636:	4603      	mov	r3, r0
 8003638:	2216      	movs	r2, #22
 800363a:	601a      	str	r2, [r3, #0]
  return -1;
 800363c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <_exit>:

void _exit (int status)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003650:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ffe7 	bl	8003628 <_kill>
  while (1) {}    /* Make sure we hang here */
 800365a:	bf00      	nop
 800365c:	e7fd      	b.n	800365a <_exit+0x12>

0800365e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e00a      	b.n	8003686 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003670:	f3af 8000 	nop.w
 8003674:	4601      	mov	r1, r0
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	60ba      	str	r2, [r7, #8]
 800367c:	b2ca      	uxtb	r2, r1
 800367e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	3301      	adds	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	429a      	cmp	r2, r3
 800368c:	dbf0      	blt.n	8003670 <_read+0x12>
  }

  return len;
 800368e:	687b      	ldr	r3, [r7, #4]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036c0:	605a      	str	r2, [r3, #4]
  return 0;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <_isatty>:

int _isatty(int file)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036d8:	2301      	movs	r3, #1
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003708:	4a14      	ldr	r2, [pc, #80]	@ (800375c <_sbrk+0x5c>)
 800370a:	4b15      	ldr	r3, [pc, #84]	@ (8003760 <_sbrk+0x60>)
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003714:	4b13      	ldr	r3, [pc, #76]	@ (8003764 <_sbrk+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800371c:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <_sbrk+0x64>)
 800371e:	4a12      	ldr	r2, [pc, #72]	@ (8003768 <_sbrk+0x68>)
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003722:	4b10      	ldr	r3, [pc, #64]	@ (8003764 <_sbrk+0x64>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	429a      	cmp	r2, r3
 800372e:	d207      	bcs.n	8003740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003730:	f00f fe56 	bl	80133e0 <__errno>
 8003734:	4603      	mov	r3, r0
 8003736:	220c      	movs	r2, #12
 8003738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800373e:	e009      	b.n	8003754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003740:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <_sbrk+0x64>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003746:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <_sbrk+0x64>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	4a05      	ldr	r2, [pc, #20]	@ (8003764 <_sbrk+0x64>)
 8003750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20030000 	.word	0x20030000
 8003760:	00000400 	.word	0x00000400
 8003764:	200005a4 	.word	0x200005a4
 8003768:	20000830 	.word	0x20000830

0800376c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003770:	4b24      	ldr	r3, [pc, #144]	@ (8003804 <SystemInit+0x98>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	4a23      	ldr	r2, [pc, #140]	@ (8003804 <SystemInit+0x98>)
 8003778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800377c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003794:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003798:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037a4:	4b18      	ldr	r3, [pc, #96]	@ (8003808 <SystemInit+0x9c>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037b6:	f023 0305 	bic.w	r3, r3, #5
 80037ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80037be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80037d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d6:	4a0d      	ldr	r2, [pc, #52]	@ (800380c <SystemInit+0xa0>)
 80037d8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037de:	4a0b      	ldr	r2, [pc, #44]	@ (800380c <SystemInit+0xa0>)
 80037e0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f6:	2200      	movs	r2, #0
 80037f8:	619a      	str	r2, [r3, #24]
}
 80037fa:	bf00      	nop
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00
 8003808:	faf6fefb 	.word	0xfaf6fefb
 800380c:	22041000 	.word	0x22041000

08003810 <LL_APB1_GRP1_EnableClock>:
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800381c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800381e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4313      	orrs	r3, r2
 8003826:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800382c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003834:	68fb      	ldr	r3, [r7, #12]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_APB1_GRP1_DisableClock>:
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	43db      	mvns	r3, r3
 8003854:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003858:	4013      	ands	r3, r2
 800385a:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003874:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003876:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4313      	orrs	r3, r2
 800387e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003884:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4013      	ands	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800388c:	68fb      	ldr	r3, [r7, #12]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038b0:	4013      	ands	r3, r2
 80038b2:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038c6:	f107 0310 	add.w	r3, r7, #16
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038de:	4b1e      	ldr	r3, [pc, #120]	@ (8003958 <MX_TIM2_Init+0x98>)
 80038e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 80038e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003958 <MX_TIM2_Init+0x98>)
 80038e8:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80038ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003958 <MX_TIM2_Init+0x98>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 80038f4:	4b18      	ldr	r3, [pc, #96]	@ (8003958 <MX_TIM2_Init+0x98>)
 80038f6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80038fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038fc:	4b16      	ldr	r3, [pc, #88]	@ (8003958 <MX_TIM2_Init+0x98>)
 80038fe:	2200      	movs	r2, #0
 8003900:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003902:	4b15      	ldr	r3, [pc, #84]	@ (8003958 <MX_TIM2_Init+0x98>)
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003908:	4813      	ldr	r0, [pc, #76]	@ (8003958 <MX_TIM2_Init+0x98>)
 800390a:	f00d f8bd 	bl	8010a88 <HAL_TIM_Base_Init>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003914:	f7ff fbb0 	bl	8003078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800391c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800391e:	f107 0310 	add.w	r3, r7, #16
 8003922:	4619      	mov	r1, r3
 8003924:	480c      	ldr	r0, [pc, #48]	@ (8003958 <MX_TIM2_Init+0x98>)
 8003926:	f00d fae8 	bl	8010efa <HAL_TIM_ConfigClockSource>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003930:	f7ff fba2 	bl	8003078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003934:	2300      	movs	r3, #0
 8003936:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800393c:	1d3b      	adds	r3, r7, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4805      	ldr	r0, [pc, #20]	@ (8003958 <MX_TIM2_Init+0x98>)
 8003942:	f00d fcd1 	bl	80112e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800394c:	f7ff fb94 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003950:	bf00      	nop
 8003952:	3720      	adds	r7, #32
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	200005a8 	.word	0x200005a8

0800395c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003960:	4b10      	ldr	r3, [pc, #64]	@ (80039a4 <MX_TIM16_Init+0x48>)
 8003962:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <MX_TIM16_Init+0x4c>)
 8003964:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 8003966:	4b0f      	ldr	r3, [pc, #60]	@ (80039a4 <MX_TIM16_Init+0x48>)
 8003968:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800396c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396e:	4b0d      	ldr	r3, [pc, #52]	@ (80039a4 <MX_TIM16_Init+0x48>)
 8003970:	2200      	movs	r2, #0
 8003972:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <MX_TIM16_Init+0x48>)
 8003976:	f242 7210 	movw	r2, #10000	@ 0x2710
 800397a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800397c:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <MX_TIM16_Init+0x48>)
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003982:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <MX_TIM16_Init+0x48>)
 8003984:	2200      	movs	r2, #0
 8003986:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003988:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <MX_TIM16_Init+0x48>)
 800398a:	2200      	movs	r2, #0
 800398c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800398e:	4805      	ldr	r0, [pc, #20]	@ (80039a4 <MX_TIM16_Init+0x48>)
 8003990:	f00d f87a 	bl	8010a88 <HAL_TIM_Base_Init>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800399a:	f7ff fb6d 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200005f4 	.word	0x200005f4
 80039a8:	40014400 	.word	0x40014400

080039ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039bc:	d10b      	bne.n	80039d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039be:	2001      	movs	r0, #1
 80039c0:	f7ff ff26 	bl	8003810 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039c4:	2200      	movs	r2, #0
 80039c6:	2100      	movs	r1, #0
 80039c8:	201c      	movs	r0, #28
 80039ca:	f008 fa3a 	bl	800be42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039ce:	201c      	movs	r0, #28
 80039d0:	f008 fa51 	bl	800be76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80039d4:	e010      	b.n	80039f8 <HAL_TIM_Base_MspInit+0x4c>
  else if(tim_baseHandle->Instance==TIM16)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a09      	ldr	r2, [pc, #36]	@ (8003a00 <HAL_TIM_Base_MspInit+0x54>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d10b      	bne.n	80039f8 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80039e0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80039e4:	f7ff ff40 	bl	8003868 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80039e8:	2200      	movs	r2, #0
 80039ea:	2100      	movs	r1, #0
 80039ec:	2019      	movs	r0, #25
 80039ee:	f008 fa28 	bl	800be42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80039f2:	2019      	movs	r0, #25
 80039f4:	f008 fa3f 	bl	800be76 <HAL_NVIC_EnableIRQ>
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40014400 	.word	0x40014400

08003a04 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a14:	d106      	bne.n	8003a24 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003a16:	2001      	movs	r0, #1
 8003a18:	f7ff ff13 	bl	8003842 <LL_APB1_GRP1_DisableClock>

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003a1c:	201c      	movs	r0, #28
 8003a1e:	f008 fa38 	bl	800be92 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspDeInit 1 */

  /* USER CODE END TIM16_MspDeInit 1 */
  }
}
 8003a22:	e00b      	b.n	8003a3c <HAL_TIM_Base_MspDeInit+0x38>
  else if(tim_baseHandle->Instance==TIM16)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a06      	ldr	r2, [pc, #24]	@ (8003a44 <HAL_TIM_Base_MspDeInit+0x40>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d106      	bne.n	8003a3c <HAL_TIM_Base_MspDeInit+0x38>
    __HAL_RCC_TIM16_CLK_DISABLE();
 8003a2e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003a32:	f7ff ff32 	bl	800389a <LL_APB2_GRP1_DisableClock>
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 8003a36:	2019      	movs	r0, #25
 8003a38:	f008 fa2b 	bl	800be92 <HAL_NVIC_DisableIRQ>
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40014400 	.word	0x40014400

08003a48 <LL_AHB2_GRP1_EnableClock>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_APB2_GRP1_EnableClock>:
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a86:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_APB2_GRP1_DisableClock>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ab8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ad8:	4b22      	ldr	r3, [pc, #136]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003ada:	4a23      	ldr	r2, [pc, #140]	@ (8003b68 <MX_USART1_UART_Init+0x94>)
 8003adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003ade:	4b21      	ldr	r3, [pc, #132]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003ae0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003aec:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003af2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003af8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003afa:	220c      	movs	r2, #12
 8003afc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afe:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b04:	4b17      	ldr	r3, [pc, #92]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b0a:	4b16      	ldr	r3, [pc, #88]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b10:	4b14      	ldr	r3, [pc, #80]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b16:	4b13      	ldr	r3, [pc, #76]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b1c:	4811      	ldr	r0, [pc, #68]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003b1e:	f00d fc81 	bl	8011424 <HAL_UART_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003b28:	f7ff faa6 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	480d      	ldr	r0, [pc, #52]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003b30:	f00e fd45 	bl	80125be <HAL_UARTEx_SetTxFifoThreshold>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003b3a:	f7ff fa9d 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4808      	ldr	r0, [pc, #32]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003b42:	f00e fd7a 	bl	801263a <HAL_UARTEx_SetRxFifoThreshold>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003b4c:	f7ff fa94 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b50:	4804      	ldr	r0, [pc, #16]	@ (8003b64 <MX_USART1_UART_Init+0x90>)
 8003b52:	f00e fcfb 	bl	801254c <HAL_UARTEx_DisableFifoMode>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003b5c:	f7ff fa8c 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000640 	.word	0x20000640
 8003b68:	40013800 	.word	0x40013800

08003b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b09c      	sub	sp, #112	@ 0x70
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b84:	f107 030c 	add.w	r3, r7, #12
 8003b88:	2250      	movs	r2, #80	@ 0x50
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f00f fc1f 	bl	80133d0 <memset>
  if(uartHandle->Instance==USART1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1b      	ldr	r2, [pc, #108]	@ (8003c04 <HAL_UART_MspInit+0x98>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d12e      	bne.n	8003bfa <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ba4:	f107 030c 	add.w	r3, r7, #12
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f00b fe3e 	bl	800f82a <HAL_RCCEx_PeriphCLKConfig>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003bb4:	f7ff fa60 	bl	8003078 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bb8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003bbc:	f7ff ff5d 	bl	8003a7a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7ff ff41 	bl	8003a48 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003bc6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003bca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bd8:	2307      	movs	r3, #7
 8003bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bdc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003be0:	4619      	mov	r1, r3
 8003be2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003be6:	f008 fbe9 	bl	800c3bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bea:	2200      	movs	r2, #0
 8003bec:	2100      	movs	r1, #0
 8003bee:	2024      	movs	r0, #36	@ 0x24
 8003bf0:	f008 f927 	bl	800be42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bf4:	2024      	movs	r0, #36	@ 0x24
 8003bf6:	f008 f93e 	bl	800be76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	3770      	adds	r7, #112	@ 0x70
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40013800 	.word	0x40013800

08003c08 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a09      	ldr	r2, [pc, #36]	@ (8003c3c <HAL_UART_MspDeInit+0x34>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10c      	bne.n	8003c34 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003c1a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003c1e:	f7ff ff45 	bl	8003aac <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10|GPIO_PIN_9);
 8003c22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003c26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c2a:	f008 fd37 	bl	800c69c <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003c2e:	2024      	movs	r0, #36	@ 0x24
 8003c30:	f008 f92f 	bl	800be92 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40013800 	.word	0x40013800

08003c40 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003c40:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c42:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c44:	3304      	adds	r3, #4

08003c46 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c46:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c48:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003c4a:	d3f9      	bcc.n	8003c40 <CopyDataInit>
  bx lr
 8003c4c:	4770      	bx	lr

08003c4e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003c4e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003c50:	3004      	adds	r0, #4

08003c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003c52:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003c54:	d3fb      	bcc.n	8003c4e <FillZerobss>
  bx lr
 8003c56:	4770      	bx	lr

08003c58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c58:	480c      	ldr	r0, [pc, #48]	@ (8003c8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c5c:	f7ff fd86 	bl	800376c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003c60:	480b      	ldr	r0, [pc, #44]	@ (8003c90 <LoopForever+0x6>)
 8003c62:	490c      	ldr	r1, [pc, #48]	@ (8003c94 <LoopForever+0xa>)
 8003c64:	4a0c      	ldr	r2, [pc, #48]	@ (8003c98 <LoopForever+0xe>)
 8003c66:	2300      	movs	r3, #0
 8003c68:	f7ff ffed 	bl	8003c46 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003c6c:	480b      	ldr	r0, [pc, #44]	@ (8003c9c <LoopForever+0x12>)
 8003c6e:	490c      	ldr	r1, [pc, #48]	@ (8003ca0 <LoopForever+0x16>)
 8003c70:	4a0c      	ldr	r2, [pc, #48]	@ (8003ca4 <LoopForever+0x1a>)
 8003c72:	2300      	movs	r3, #0
 8003c74:	f7ff ffe7 	bl	8003c46 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003c78:	480b      	ldr	r0, [pc, #44]	@ (8003ca8 <LoopForever+0x1e>)
 8003c7a:	490c      	ldr	r1, [pc, #48]	@ (8003cac <LoopForever+0x22>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f7ff ffe8 	bl	8003c52 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003c82:	f00f fbb3 	bl	80133ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003c86:	f7fe f933 	bl	8001ef0 <main>

08003c8a <LoopForever>:

LoopForever:
  b LoopForever
 8003c8a:	e7fe      	b.n	8003c8a <LoopForever>
  ldr   r0, =_estack
 8003c8c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003c90:	20000008 	.word	0x20000008
 8003c94:	20000260 	.word	0x20000260
 8003c98:	08018c28 	.word	0x08018c28
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003c9c:	20030000 	.word	0x20030000
 8003ca0:	20030000 	.word	0x20030000
 8003ca4:	08018e80 	.word	0x08018e80
  INIT_BSS _sbss, _ebss
 8003ca8:	20000260 	.word	0x20000260
 8003cac:	2000082c 	.word	0x2000082c

08003cb0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cb0:	e7fe      	b.n	8003cb0 <ADC1_IRQHandler>
	...

08003cb4 <bmi2_sec_init>:
 * @brief This API is the entry point for bmi2 sensor. It selects between
 * I2C/SPI interface, based on user selection. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi2_sec_init(struct bmi2_dev *dev)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73bb      	strb	r3, [r7, #14]

    /* Structure to define the default values for axes re-mapping */
    struct bmi2_axes_remap axes_remap = {
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d70 <bmi2_sec_init+0xbc>)
 8003cc2:	f107 0308 	add.w	r3, r7, #8
 8003cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cca:	6018      	str	r0, [r3, #0]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	8019      	strh	r1, [r3, #0]
        .x_axis = BMI2_MAP_X_AXIS, .x_axis_sign = BMI2_POS_SIGN, .y_axis = BMI2_MAP_Y_AXIS,
        .y_axis_sign = BMI2_POS_SIGN, .z_axis = BMI2_MAP_Z_AXIS, .z_axis_sign = BMI2_POS_SIGN
    };

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f001 fec5 	bl	8005a60 <null_ptr_check>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI2_OK)
 8003cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d140      	bne.n	8003d64 <bmi2_sec_init+0xb0>
    {
        /* Set APS flag as after reset, the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from I2C interface */
        if (dev->intf == BMI2_SPI_INTF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7a5b      	ldrb	r3, [r3, #9]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d108      	bne.n	8003d04 <bmi2_sec_init+0x50>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003cf2:	f107 010e 	add.w	r1, r7, #14
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f000 f83a 	bl	8003d74 <bmi2_get_regs>
 8003d00:	4603      	mov	r3, r0
 8003d02:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8003d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d12b      	bne.n	8003d64 <bmi2_sec_init+0xb0>
        {
            /* Read chip-id of the BMI2 sensor */
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003d0c:	f107 010e 	add.w	r1, r7, #14
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	2000      	movs	r0, #0
 8003d16:	f000 f82d 	bl	8003d74 <bmi2_get_regs>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI2_OK)
 8003d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11e      	bne.n	8003d64 <bmi2_sec_init+0xb0>
            {
                /* Validate chip-id */
                if (chip_id == dev->chip_id)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	7bbb      	ldrb	r3, [r7, #14]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d114      	bne.n	8003d5a <bmi2_sec_init+0xa6>
                {
                    /* Assign resolution to the structure */
                    dev->resolution = 16;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2210      	movs	r2, #16
 8003d34:	731a      	strb	r2, [r3, #12]

                    /* Set manual enable flag */
                    dev->aux_man_en = 1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	76da      	strb	r2, [r3, #27]

                    /* Set the default values for axis
                     *  re-mapping in the device structure
                     */
                    dev->remap = axes_remap;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3328      	adds	r3, #40	@ 0x28
 8003d40:	f107 0208 	add.w	r2, r7, #8
 8003d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d48:	6018      	str	r0, [r3, #0]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	8019      	strh	r1, [r3, #0]

                    /* Perform soft-reset to bring all register values to their
                     * default values
                     */
                    rslt = bmi2_soft_reset(dev);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f906 	bl	8003f60 <bmi2_soft_reset>
 8003d54:	4603      	mov	r3, r0
 8003d56:	73fb      	strb	r3, [r7, #15]
 8003d58:	e004      	b.n	8003d64 <bmi2_sec_init+0xb0>
                else
                {
                    /* Storing the chip-id value read from
                     * the register to identify the sensor
                     */
                    dev->chip_id = chip_id;
 8003d5a:	7bba      	ldrb	r2, [r7, #14]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	701a      	strb	r2, [r3, #0]
                    rslt = BMI2_E_DEV_NOT_FOUND;
 8003d60:	23fd      	movs	r3, #253	@ 0xfd
 8003d62:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	080161b8 	.word	0x080161b8

08003d74 <bmi2_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x26, 0x5E.
 */
int8_t bmi2_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b0a7      	sub	sp, #156	@ 0x9c
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	4613      	mov	r3, r2
 8003d84:	81bb      	strh	r3, [r7, #12]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define loop */
    uint16_t index = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI2_MAX_LEN];

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f001 fe67 	bl	8005a60 <null_ptr_check>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if ((rslt == BMI2_OK) && (data != NULL))
 8003d98:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d153      	bne.n	8003e48 <bmi2_get_regs+0xd4>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d050      	beq.n	8003e48 <bmi2_get_regs+0xd4>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	7a5b      	ldrb	r3, [r3, #9]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <bmi2_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI2_SPI_RD_MASK);
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003db4:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, (len + dev->dummy_byte), dev->intf_ptr);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8003dba:	89bb      	ldrh	r3, [r7, #12]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	7ad2      	ldrb	r2, [r2, #11]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f107 0114 	add.w	r1, r7, #20
 8003dcc:	7bf8      	ldrb	r0, [r7, #15]
 8003dce:	47a0      	blx	r4
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	729a      	strb	r2, [r3, #10]

        if (dev->aps_status == BMI2_ENABLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d108      	bne.n	8003df4 <bmi2_get_regs+0x80>
        {
            dev->delay_us(450, dev->intf_ptr);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6852      	ldr	r2, [r2, #4]
 8003dea:	4611      	mov	r1, r2
 8003dec:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8003df0:	4798      	blx	r3
 8003df2:	e006      	b.n	8003e02 <bmi2_get_regs+0x8e>
        }
        else
        {
            dev->delay_us(2, dev->intf_ptr);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6852      	ldr	r2, [r2, #4]
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	2002      	movs	r0, #2
 8003e00:	4798      	blx	r3
        }

        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d119      	bne.n	8003e40 <bmi2_get_regs+0xcc>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8003e0c:	e012      	b.n	8003e34 <bmi2_get_regs+0xc0>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8003e0e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	7ad2      	ldrb	r2, [r2, #11]
 8003e16:	441a      	add	r2, r3
 8003e18:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	440b      	add	r3, r1
 8003e20:	3298      	adds	r2, #152	@ 0x98
 8003e22:	443a      	add	r2, r7
 8003e24:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8003e28:	701a      	strb	r2, [r3, #0]
                index++;
 8003e2a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003e2e:	3301      	adds	r3, #1
 8003e30:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 8003e34:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8003e38:	89bb      	ldrh	r3, [r7, #12]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d3e7      	bcc.n	8003e0e <bmi2_get_regs+0x9a>
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8003e3e:	e006      	b.n	8003e4e <bmi2_get_regs+0xda>
            }
        }
        else
        {
            rslt = BMI2_E_COM_FAIL;
 8003e40:	23fe      	movs	r3, #254	@ 0xfe
 8003e42:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8003e46:	e002      	b.n	8003e4e <bmi2_get_regs+0xda>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003e48:	23ff      	movs	r3, #255	@ 0xff
 8003e4a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 8003e4e:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	379c      	adds	r7, #156	@ 0x9c
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd90      	pop	{r4, r7, pc}

08003e5a <bmi2_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi2 sensor.
 */
int8_t bmi2_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 8003e5a:	b590      	push	{r4, r7, lr}
 8003e5c:	b087      	sub	sp, #28
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    uint16_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f001 fdf7 	bl	8005a60 <null_ptr_check>
 8003e72:	4603      	mov	r3, r0
 8003e74:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (data != NULL))
 8003e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d168      	bne.n	8003f50 <bmi2_set_regs+0xf6>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d065      	beq.n	8003f50 <bmi2_set_regs+0xf6>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7a5b      	ldrb	r3, [r3, #9]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d103      	bne.n	8003e94 <bmi2_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI2_SPI_WR_MASK);
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e92:	73fb      	strb	r3, [r7, #15]
        }

        /* Writing Byte by byte and delay for Low power mode of the sensor is 450 us */
        if (dev->aps_status == BMI2_ENABLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d129      	bne.n	8003ef2 <bmi2_set_regs+0x98>
        {
            for (loop = 0; loop < len; loop++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	82bb      	strh	r3, [r7, #20]
 8003ea2:	e021      	b.n	8003ee8 <bmi2_set_regs+0x8e>
            {
                dev->intf_rslt = dev->write((uint8_t)((uint16_t)reg_addr + loop), &data[loop], 1, dev->intf_ptr);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8003ea8:	8abb      	ldrh	r3, [r7, #20]
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	4413      	add	r3, r2
 8003eb0:	b2d8      	uxtb	r0, r3
 8003eb2:	8abb      	ldrh	r3, [r7, #20]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	18d1      	adds	r1, r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	47a0      	blx	r4
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	729a      	strb	r2, [r3, #10]
                dev->delay_us(BMI2_POWER_SAVE_MODE_DELAY_IN_US, dev->intf_ptr);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6852      	ldr	r2, [r2, #4]
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8003ed6:	4798      	blx	r3
                if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d11b      	bne.n	8003f1a <bmi2_set_regs+0xc0>
            for (loop = 0; loop < len; loop++)
 8003ee2:	8abb      	ldrh	r3, [r7, #20]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	82bb      	strh	r3, [r7, #20]
 8003ee8:	8aba      	ldrh	r2, [r7, #20]
 8003eea:	89bb      	ldrh	r3, [r7, #12]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d3d9      	bcc.n	8003ea4 <bmi2_set_regs+0x4a>
 8003ef0:	e014      	b.n	8003f1c <bmi2_set_regs+0xc2>
            }
        }
        /* Burst write and delay for Normal mode of the sensor is 2 us */
        else
        {
            dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8003ef6:	89ba      	ldrh	r2, [r7, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	7bf8      	ldrb	r0, [r7, #15]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	47a0      	blx	r4
 8003f02:	4603      	mov	r3, r0
 8003f04:	461a      	mov	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	729a      	strb	r2, [r3, #10]
            dev->delay_us(BMI2_NORMAL_MODE_DELAY_IN_US, dev->intf_ptr);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6852      	ldr	r2, [r2, #4]
 8003f12:	4611      	mov	r1, r2
 8003f14:	2002      	movs	r0, #2
 8003f16:	4798      	blx	r3
 8003f18:	e000      	b.n	8003f1c <bmi2_set_regs+0xc2>
                    break;
 8003f1a:	bf00      	nop
        }

        /* Updating the advance power saver flag */
        if (reg_addr == BMI2_PWR_CONF_ADDR)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b7c      	cmp	r3, #124	@ 0x7c
 8003f20:	d10e      	bne.n	8003f40 <bmi2_set_regs+0xe6>
        {
            if (*data & BMI2_ADV_POW_EN_MASK)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d004      	beq.n	8003f38 <bmi2_set_regs+0xde>
            {
                dev->aps_status = BMI2_ENABLE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8003f36:	e003      	b.n	8003f40 <bmi2_set_regs+0xe6>
            }
            else
            {
                dev->aps_status = BMI2_DISABLE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }

        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <bmi2_set_regs+0xfa>
        {
            rslt = BMI2_E_COM_FAIL;
 8003f4a:	23fe      	movs	r3, #254	@ 0xfe
 8003f4c:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8003f4e:	e001      	b.n	8003f54 <bmi2_set_regs+0xfa>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003f50:	23ff      	movs	r3, #255	@ 0xff
 8003f52:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003f54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd90      	pop	{r4, r7, pc}

08003f60 <bmi2_soft_reset>:
/*!
 * @brief This API resets bmi2 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi2_soft_reset(struct bmi2_dev *dev)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define soft reset value */
    uint8_t data = BMI2_SOFT_RESET_CMD;
 8003f68:	23b6      	movs	r3, #182	@ 0xb6
 8003f6a:	73bb      	strb	r3, [r7, #14]

    /* Variable to read the dummy byte */
    uint8_t dummy_read = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	737b      	strb	r3, [r7, #13]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f001 fd75 	bl	8005a60 <null_ptr_check>
 8003f76:	4603      	mov	r3, r0
 8003f78:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8003f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d139      	bne.n	8003ff6 <bmi2_soft_reset+0x96>
    {
        /* Reset bmi2 device */
        rslt = bmi2_set_regs(BMI2_CMD_REG_ADDR, &data, 1, dev);
 8003f82:	f107 010e 	add.w	r1, r7, #14
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	207e      	movs	r0, #126	@ 0x7e
 8003f8c:	f7ff ff65 	bl	8003e5a <bmi2_set_regs>
 8003f90:	4603      	mov	r3, r0
 8003f92:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(2000, dev->intf_ptr);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6852      	ldr	r2, [r2, #4]
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003fa2:	4798      	blx	r3

        /* Set APS flag as after soft reset the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from
         * I2C after a soft-reset
         */
        if ((rslt == BMI2_OK) && (dev->intf == BMI2_SPI_INTF))
 8003fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10c      	bne.n	8003fce <bmi2_soft_reset+0x6e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	7a5b      	ldrb	r3, [r3, #9]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <bmi2_soft_reset+0x6e>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &dummy_read, 1, dev);
 8003fbc:	f107 010d 	add.w	r1, r7, #13
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f7ff fed5 	bl	8003d74 <bmi2_get_regs>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8003fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <bmi2_soft_reset+0x80>
        {
            /* Write the configuration file */
            rslt = bmi2_write_config_file(dev);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f85f 	bl	800409a <bmi2_write_config_file>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the sensor status flag in the device structure */
        if (rslt == BMI2_OK)
 8003fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <bmi2_soft_reset+0x96>
        {
            dev->sens_en_stat = 0;
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        }
    }

    return rslt;
 8003ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <bmi2_set_adv_power_save>:

/*!
 * @brief This API enables/disables the advance power save mode in the sensor.
 */
int8_t bmi2_set_adv_power_save(uint8_t enable, struct bmi2_dev *dev)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	4603      	mov	r3, r0
 800400a:	6039      	str	r1, [r7, #0]
 800400c:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004012:	6838      	ldr	r0, [r7, #0]
 8004014:	f001 fd24 	bl	8005a60 <null_ptr_check>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800401c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d134      	bne.n	800408e <bmi2_set_adv_power_save+0x8c>
    {
        rslt = bmi2_get_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 8004024:	f107 010e 	add.w	r1, r7, #14
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	207c      	movs	r0, #124	@ 0x7c
 800402e:	f7ff fea1 	bl	8003d74 <bmi2_get_regs>
 8004032:	4603      	mov	r3, r0
 8004034:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8004036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d127      	bne.n	800408e <bmi2_set_adv_power_save+0x8c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ADV_POW_EN, enable);
 800403e:	7bbb      	ldrb	r3, [r7, #14]
 8004040:	b25b      	sxtb	r3, r3
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	b25a      	sxtb	r2, r3
 8004048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	b25b      	sxtb	r3, r3
 8004052:	4313      	orrs	r3, r2
 8004054:	b25b      	sxtb	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	73bb      	strb	r3, [r7, #14]
            rslt = bmi2_set_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 800405a:	f107 010e 	add.w	r1, r7, #14
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2201      	movs	r2, #1
 8004062:	207c      	movs	r0, #124	@ 0x7c
 8004064:	f7ff fef9 	bl	8003e5a <bmi2_set_regs>
 8004068:	4603      	mov	r3, r0
 800406a:	73fb      	strb	r3, [r7, #15]

            if (rslt != BMI2_OK)
 800406c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <bmi2_set_adv_power_save+0x76>
            {
                /* Return error if enable/disable APS fails */
                rslt = BMI2_E_SET_APS_FAIL;
 8004074:	23f3      	movs	r3, #243	@ 0xf3
 8004076:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BMI2_OK)
 8004078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <bmi2_set_adv_power_save+0x8c>
            {
                dev->aps_status = BMI2_GET_BIT_POS0(reg_data, BMI2_ADV_POW_EN);
 8004080:	7bbb      	ldrb	r3, [r7, #14]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	b2da      	uxtb	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }
    }

    return rslt;
 800408e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <bmi2_write_config_file>:

/*!
 * @brief This API loads the configuration file into the bmi2 sensor.
 */
int8_t bmi2_write_config_file(struct bmi2_dev *dev)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to know the load status */
    uint8_t load_status = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f001 fcda 	bl	8005a60 <null_ptr_check>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (dev->config_size != 0))
 80040b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d13b      	bne.n	8004130 <bmi2_write_config_file+0x96>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d036      	beq.n	8004130 <bmi2_write_config_file+0x96>
    {
        /* Bytes written are multiples of 2 */
        if ((dev->read_write_len % 2) != 0)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	89db      	ldrh	r3, [r3, #14]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <bmi2_write_config_file+0x42>
        {
            dev->read_write_len = dev->read_write_len - 1;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	89db      	ldrh	r3, [r3, #14]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	81da      	strh	r2, [r3, #14]
        }

        if (dev->read_write_len < 2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	89db      	ldrh	r3, [r3, #14]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d802      	bhi.n	80040ea <bmi2_write_config_file+0x50>
        {
            dev->read_write_len = 2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	81da      	strh	r2, [r3, #14]
        }

        /* Write the configuration file */
        rslt = write_config_file(dev);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fcb4 	bl	8004a58 <write_config_file>
 80040f0:	4603      	mov	r3, r0
 80040f2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80040f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d11c      	bne.n	8004136 <bmi2_write_config_file+0x9c>
        {
            /* Check the configuration load status */
            rslt = bmi2_get_internal_status(&load_status, dev);
 80040fc:	f107 030e 	add.w	r3, r7, #14
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fbb7 	bl	8004876 <bmi2_get_internal_status>
 8004108:	4603      	mov	r3, r0
 800410a:	73fb      	strb	r3, [r7, #15]

            load_status &= BMI2_CONFIG_LOAD_STATUS_MASK;
 800410c:	7bbb      	ldrb	r3, [r7, #14]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	b2db      	uxtb	r3, r3
 8004114:	73bb      	strb	r3, [r7, #14]

            dev->load_status = load_status;
 8004116:	7bba      	ldrb	r2, [r7, #14]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	741a      	strb	r2, [r3, #16]

            /* Return error if loading not successful */
            if ((rslt == BMI2_OK) && (load_status != BMI2_CONFIG_LOAD_SUCCESS))
 800411c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d108      	bne.n	8004136 <bmi2_write_config_file+0x9c>
 8004124:	7bbb      	ldrb	r3, [r7, #14]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d005      	beq.n	8004136 <bmi2_write_config_file+0x9c>
            {
                rslt = BMI2_E_CONFIG_LOAD;
 800412a:	23f7      	movs	r3, #247	@ 0xf7
 800412c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800412e:	e002      	b.n	8004136 <bmi2_write_config_file+0x9c>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004130:	23ff      	movs	r3, #255	@ 0xff
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	e000      	b.n	8004138 <bmi2_write_config_file+0x9e>
        if (rslt == BMI2_OK)
 8004136:	bf00      	nop
    }

    return rslt;
 8004138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <bmi2_set_int_pin_config>:
 *        1) The input output configuration of the selected interrupt pin:
 *           INT1 or INT2.
 *        2) The interrupt mode: permanently latched or non-latched.
 */
int8_t bmi2_set_int_pin_config(const struct bmi2_int_pin_config *int_cfg, struct bmi2_dev *dev)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define data array */
    uint8_t data_array[3] = { 0 };
 800414e:	f107 0308 	add.w	r3, r7, #8
 8004152:	2100      	movs	r1, #0
 8004154:	460a      	mov	r2, r1
 8004156:	801a      	strh	r2, [r3, #0]
 8004158:	460a      	mov	r2, r1
 800415a:	709a      	strb	r2, [r3, #2]

    /* Variable to store register data */
    uint8_t reg_data = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	73bb      	strb	r3, [r7, #14]

    /* Variable to define type of interrupt pin  */
    uint8_t int_pin = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	737b      	strb	r3, [r7, #13]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004164:	6838      	ldr	r0, [r7, #0]
 8004166:	f001 fc7b 	bl	8005a60 <null_ptr_check>
 800416a:	4603      	mov	r3, r0
 800416c:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (int_cfg != NULL))
 800416e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 80ca 	bne.w	800430c <bmi2_set_int_pin_config+0x1c8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80c6 	beq.w	800430c <bmi2_set_int_pin_config+0x1c8>
    {
        /* Copy the pin type to a local variable */
        int_pin = int_cfg->pin_type;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	737b      	strb	r3, [r7, #13]
        if ((int_pin > BMI2_INT_NONE) && (int_pin < BMI2_INT_PIN_MAX))
 8004186:	7b7b      	ldrb	r3, [r7, #13]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80bb 	beq.w	8004304 <bmi2_set_int_pin_config+0x1c0>
 800418e:	7b7b      	ldrb	r3, [r7, #13]
 8004190:	2b03      	cmp	r3, #3
 8004192:	f200 80b7 	bhi.w	8004304 <bmi2_set_int_pin_config+0x1c0>
        {
            /* Get the previous configuration data */
            rslt = bmi2_get_regs(BMI2_INT1_IO_CTRL_ADDR, data_array, 3, dev);
 8004196:	f107 0108 	add.w	r1, r7, #8
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2203      	movs	r2, #3
 800419e:	2053      	movs	r0, #83	@ 0x53
 80041a0:	f7ff fde8 	bl	8003d74 <bmi2_get_regs>
 80041a4:	4603      	mov	r3, r0
 80041a6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 80041a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f040 80ac 	bne.w	800430a <bmi2_set_int_pin_config+0x1c6>
            {
                /* Set interrupt pin 1 configuration */
                if ((int_pin == BMI2_INT1) || (int_pin == BMI2_INT_BOTH))
 80041b2:	7b7b      	ldrb	r3, [r7, #13]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d002      	beq.n	80041be <bmi2_set_int_pin_config+0x7a>
 80041b8:	7b7b      	ldrb	r3, [r7, #13]
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d141      	bne.n	8004242 <bmi2_set_int_pin_config+0xfe>
                {
                    /* Configure active low or high */
                    reg_data = BMI2_SET_BITS(data_array[0], BMI2_INT_LEVEL, int_cfg->pin_cfg[0].lvl);
 80041be:	7a3b      	ldrb	r3, [r7, #8]
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	f023 0302 	bic.w	r3, r3, #2
 80041c6:	b25a      	sxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	789b      	ldrb	r3, [r3, #2]
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	4313      	orrs	r3, r2
 80041da:	b25b      	sxtb	r3, r3
 80041dc:	73bb      	strb	r3, [r7, #14]

                    /* Configure push-pull or open drain */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OPEN_DRAIN, int_cfg->pin_cfg[0].od);
 80041de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041e2:	f023 0304 	bic.w	r3, r3, #4
 80041e6:	b25a      	sxtb	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	78db      	ldrb	r3, [r3, #3]
 80041ec:	b25b      	sxtb	r3, r3
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	4313      	orrs	r3, r2
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	73bb      	strb	r3, [r7, #14]

                    /* Configure output enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OUTPUT_EN, int_cfg->pin_cfg[0].output_en);
 80041fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004202:	f023 0308 	bic.w	r3, r3, #8
 8004206:	b25a      	sxtb	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	791b      	ldrb	r3, [r3, #4]
 800420c:	b25b      	sxtb	r3, r3
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	b25b      	sxtb	r3, r3
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	b25b      	sxtb	r3, r3
 8004218:	4313      	orrs	r3, r2
 800421a:	b25b      	sxtb	r3, r3
 800421c:	73bb      	strb	r3, [r7, #14]

                    /* Configure input enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_INPUT_EN, int_cfg->pin_cfg[0].input_en);
 800421e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004222:	f023 0310 	bic.w	r3, r3, #16
 8004226:	b25a      	sxtb	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	795b      	ldrb	r3, [r3, #5]
 800422c:	b25b      	sxtb	r3, r3
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	b25b      	sxtb	r3, r3
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	b25b      	sxtb	r3, r3
 8004238:	4313      	orrs	r3, r2
 800423a:	b25b      	sxtb	r3, r3
 800423c:	73bb      	strb	r3, [r7, #14]

                    /* Copy the data to be written in the respective array */
                    data_array[0] = reg_data;
 800423e:	7bbb      	ldrb	r3, [r7, #14]
 8004240:	723b      	strb	r3, [r7, #8]
                }

                /* Set interrupt pin 2 configuration */
                if ((int_pin == BMI2_INT2) || (int_pin == BMI2_INT_BOTH))
 8004242:	7b7b      	ldrb	r3, [r7, #13]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d002      	beq.n	800424e <bmi2_set_int_pin_config+0x10a>
 8004248:	7b7b      	ldrb	r3, [r7, #13]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d141      	bne.n	80042d2 <bmi2_set_int_pin_config+0x18e>
                {
                    /* Configure active low or high */
                    reg_data = BMI2_SET_BITS(data_array[1], BMI2_INT_LEVEL, int_cfg->pin_cfg[1].lvl);
 800424e:	7a7b      	ldrb	r3, [r7, #9]
 8004250:	b25b      	sxtb	r3, r3
 8004252:	f023 0302 	bic.w	r3, r3, #2
 8004256:	b25a      	sxtb	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	799b      	ldrb	r3, [r3, #6]
 800425c:	b25b      	sxtb	r3, r3
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	b25b      	sxtb	r3, r3
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	b25b      	sxtb	r3, r3
 8004268:	4313      	orrs	r3, r2
 800426a:	b25b      	sxtb	r3, r3
 800426c:	73bb      	strb	r3, [r7, #14]

                    /* Configure push-pull or open drain */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OPEN_DRAIN, int_cfg->pin_cfg[1].od);
 800426e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004272:	f023 0304 	bic.w	r3, r3, #4
 8004276:	b25a      	sxtb	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	79db      	ldrb	r3, [r3, #7]
 800427c:	b25b      	sxtb	r3, r3
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	b25b      	sxtb	r3, r3
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	b25b      	sxtb	r3, r3
 8004288:	4313      	orrs	r3, r2
 800428a:	b25b      	sxtb	r3, r3
 800428c:	73bb      	strb	r3, [r7, #14]

                    /* Configure output enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OUTPUT_EN, int_cfg->pin_cfg[1].output_en);
 800428e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004292:	f023 0308 	bic.w	r3, r3, #8
 8004296:	b25a      	sxtb	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	7a1b      	ldrb	r3, [r3, #8]
 800429c:	b25b      	sxtb	r3, r3
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	4313      	orrs	r3, r2
 80042aa:	b25b      	sxtb	r3, r3
 80042ac:	73bb      	strb	r3, [r7, #14]

                    /* Configure input enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_INPUT_EN, int_cfg->pin_cfg[1].input_en);
 80042ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042b2:	f023 0310 	bic.w	r3, r3, #16
 80042b6:	b25a      	sxtb	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7a5b      	ldrb	r3, [r3, #9]
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	b25b      	sxtb	r3, r3
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	b25b      	sxtb	r3, r3
 80042c8:	4313      	orrs	r3, r2
 80042ca:	b25b      	sxtb	r3, r3
 80042cc:	73bb      	strb	r3, [r7, #14]

                    /* Copy the data to be written in the respective array */
                    data_array[1] = reg_data;
 80042ce:	7bbb      	ldrb	r3, [r7, #14]
 80042d0:	727b      	strb	r3, [r7, #9]
                }

                /* Configure the interrupt mode */
                data_array[2] = BMI2_SET_BIT_POS0(data_array[2], BMI2_INT_LATCH, int_cfg->int_latch);
 80042d2:	7abb      	ldrb	r3, [r7, #10]
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	b25a      	sxtb	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	785b      	ldrb	r3, [r3, #1]
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	b25b      	sxtb	r3, r3
 80042e8:	4313      	orrs	r3, r2
 80042ea:	b25b      	sxtb	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	72bb      	strb	r3, [r7, #10]

                /* Set the configurations simultaneously as
                 * INT1_IO_CTRL, INT2_IO_CTRL, and INT_LATCH lie
                 * in consecutive addresses
                 */
                rslt = bmi2_set_regs(BMI2_INT1_IO_CTRL_ADDR, data_array, 3, dev);
 80042f0:	f107 0108 	add.w	r1, r7, #8
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2203      	movs	r2, #3
 80042f8:	2053      	movs	r0, #83	@ 0x53
 80042fa:	f7ff fdae 	bl	8003e5a <bmi2_set_regs>
 80042fe:	4603      	mov	r3, r0
 8004300:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8004302:	e002      	b.n	800430a <bmi2_set_int_pin_config+0x1c6>
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_INT_PIN;
 8004304:	23f4      	movs	r3, #244	@ 0xf4
 8004306:	73fb      	strb	r3, [r7, #15]
        if ((int_pin > BMI2_INT_NONE) && (int_pin < BMI2_INT_PIN_MAX))
 8004308:	e002      	b.n	8004310 <bmi2_set_int_pin_config+0x1cc>
 800430a:	e001      	b.n	8004310 <bmi2_set_int_pin_config+0x1cc>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800430c:	23ff      	movs	r3, #255	@ 0xff
 800430e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004310:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <bmi2_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi2_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	460b      	mov	r3, r1
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f001 fb96 	bl	8005a60 <null_ptr_check>
 8004334:	4603      	mov	r3, r0
 8004336:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8004338:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800433c:	2b00      	cmp	r3, #0
 800433e:	f040 8099 	bne.w	8004474 <bmi2_set_sensor_config+0x158>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8095 	beq.w	8004474 <bmi2_set_sensor_config+0x158>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004350:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 8004352:	2300      	movs	r3, #0
 8004354:	75bb      	strb	r3, [r7, #22]
 8004356:	e079      	b.n	800444c <bmi2_set_sensor_config+0x130>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if (aps_stat == BMI2_ENABLE)
 8004358:	7d7b      	ldrb	r3, [r7, #21]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <bmi2_set_sensor_config+0x4e>
            {
                /* Disable advance power save if
                 * enabled
                 */
                rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	2000      	movs	r0, #0
 8004362:	f7ff fe4e 	bl	8004002 <bmi2_set_adv_power_save>
 8004366:	4603      	mov	r3, r0
 8004368:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BMI2_OK)
 800436a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d165      	bne.n	800443e <bmi2_set_sensor_config+0x122>
            {
                switch (sens_cfg[loop].type)
 8004372:	7dba      	ldrb	r2, [r7, #22]
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	461a      	mov	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b09      	cmp	r3, #9
 8004386:	d857      	bhi.n	8004438 <bmi2_set_sensor_config+0x11c>
 8004388:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <bmi2_set_sensor_config+0x74>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043d9 	.word	0x080043d9
 8004398:	080043f9 	.word	0x080043f9
 800439c:	08004439 	.word	0x08004439
 80043a0:	08004439 	.word	0x08004439
 80043a4:	08004439 	.word	0x08004439
 80043a8:	08004439 	.word	0x08004439
 80043ac:	08004439 	.word	0x08004439
 80043b0:	08004439 	.word	0x08004439
 80043b4:	08004419 	.word	0x08004419
                {
                    /* Set accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 80043b8:	7dba      	ldrb	r2, [r7, #22]
 80043ba:	4613      	mov	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	461a      	mov	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	3304      	adds	r3, #4
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 fa4a 	bl	8005866 <set_accel_config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	75fb      	strb	r3, [r7, #23]
                        break;
 80043d6:	e032      	b.n	800443e <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80043d8:	7dba      	ldrb	r2, [r7, #22]
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	461a      	mov	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	3304      	adds	r3, #4
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 fab1 	bl	8005954 <set_gyro_config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	75fb      	strb	r3, [r7, #23]
                        break;
 80043f6:	e022      	b.n	800443e <bmi2_set_sensor_config+0x122>

                    /* Set auxiliary configuration */
                    case BMI2_AUX:
                        rslt = set_aux_config(&sens_cfg[loop].cfg.aux, dev);
 80043f8:	7dba      	ldrb	r2, [r7, #22]
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	461a      	mov	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	3304      	adds	r3, #4
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fd1d 	bl	8004e4c <set_aux_config>
 8004412:	4603      	mov	r3, r0
 8004414:	75fb      	strb	r3, [r7, #23]
                        break;
 8004416:	e012      	b.n	800443e <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = set_gyro_user_gain_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 8004418:	7dba      	ldrb	r2, [r7, #22]
 800441a:	4613      	mov	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	3304      	adds	r3, #4
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fd3c 	bl	8004eaa <set_gyro_user_gain_config>
 8004432:	4603      	mov	r3, r0
 8004434:	75fb      	strb	r3, [r7, #23]
                        break;
 8004436:	e002      	b.n	800443e <bmi2_set_sensor_config+0x122>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 8004438:	23f8      	movs	r3, #248	@ 0xf8
 800443a:	75fb      	strb	r3, [r7, #23]
                        break;
 800443c:	bf00      	nop
                }
            }

            /* Return error if any of the set configurations fail */
            if (rslt != BMI2_OK)
 800443e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <bmi2_set_sensor_config+0x13a>
        for (loop = 0; loop < n_sens; loop++)
 8004446:	7dbb      	ldrb	r3, [r7, #22]
 8004448:	3301      	adds	r3, #1
 800444a:	75bb      	strb	r3, [r7, #22]
 800444c:	7dba      	ldrb	r2, [r7, #22]
 800444e:	7afb      	ldrb	r3, [r7, #11]
 8004450:	429a      	cmp	r2, r3
 8004452:	d381      	bcc.n	8004358 <bmi2_set_sensor_config+0x3c>
 8004454:	e000      	b.n	8004458 <bmi2_set_sensor_config+0x13c>
            {
                break;
 8004456:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8004458:	7d7b      	ldrb	r3, [r7, #21]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d10d      	bne.n	800447a <bmi2_set_sensor_config+0x15e>
 800445e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <bmi2_set_sensor_config+0x15e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	2001      	movs	r0, #1
 800446a:	f7ff fdca 	bl	8004002 <bmi2_set_adv_power_save>
 800446e:	4603      	mov	r3, r0
 8004470:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8004472:	e002      	b.n	800447a <bmi2_set_sensor_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004474:	23ff      	movs	r3, #255	@ 0xff
 8004476:	75fb      	strb	r3, [r7, #23]
 8004478:	e000      	b.n	800447c <bmi2_set_sensor_config+0x160>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800447a:	bf00      	nop
    }

    return rslt;
 800447c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <bmi2_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi2_get_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	460b      	mov	r3, r1
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f001 fae0 	bl	8005a60 <null_ptr_check>
 80044a0:	4603      	mov	r3, r0
 80044a2:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 80044a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f040 80b0 	bne.w	800460e <bmi2_get_sensor_config+0x186>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80ac 	beq.w	800460e <bmi2_get_sensor_config+0x186>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80044bc:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 80044be:	2300      	movs	r3, #0
 80044c0:	75bb      	strb	r3, [r7, #22]
 80044c2:	e08f      	b.n	80045e4 <bmi2_get_sensor_config+0x15c>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if ((sens_cfg[loop].type >= BMI2_MAIN_SENS_MAX_NUM) || (sens_cfg[loop].type == BMI2_AUX))
 80044c4:	7dba      	ldrb	r2, [r7, #22]
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d80a      	bhi.n	80044f0 <bmi2_get_sensor_config+0x68>
 80044da:	7dba      	ldrb	r2, [r7, #22]
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	461a      	mov	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d108      	bne.n	8004502 <bmi2_get_sensor_config+0x7a>
            {

                if (aps_stat == BMI2_ENABLE)
 80044f0:	7d7b      	ldrb	r3, [r7, #21]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d105      	bne.n	8004502 <bmi2_get_sensor_config+0x7a>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	2000      	movs	r0, #0
 80044fa:	f7ff fd82 	bl	8004002 <bmi2_set_adv_power_save>
 80044fe:	4603      	mov	r3, r0
 8004500:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 8004502:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d165      	bne.n	80045d6 <bmi2_get_sensor_config+0x14e>
            {
                switch (sens_cfg[loop].type)
 800450a:	7dba      	ldrb	r2, [r7, #22]
 800450c:	4613      	mov	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	461a      	mov	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b09      	cmp	r3, #9
 800451e:	d857      	bhi.n	80045d0 <bmi2_get_sensor_config+0x148>
 8004520:	a201      	add	r2, pc, #4	@ (adr r2, 8004528 <bmi2_get_sensor_config+0xa0>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	08004551 	.word	0x08004551
 800452c:	08004571 	.word	0x08004571
 8004530:	08004591 	.word	0x08004591
 8004534:	080045d1 	.word	0x080045d1
 8004538:	080045d1 	.word	0x080045d1
 800453c:	080045d1 	.word	0x080045d1
 8004540:	080045d1 	.word	0x080045d1
 8004544:	080045d1 	.word	0x080045d1
 8004548:	080045d1 	.word	0x080045d1
 800454c:	080045b1 	.word	0x080045b1
                {
                    /* Get accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8004550:	7dba      	ldrb	r2, [r7, #22]
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	3304      	adds	r3, #4
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fecd 	bl	8005304 <get_accel_config>
 800456a:	4603      	mov	r3, r0
 800456c:	75fb      	strb	r3, [r7, #23]
                        break;
 800456e:	e032      	b.n	80045d6 <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8004570:	7dba      	ldrb	r2, [r7, #22]
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	461a      	mov	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	3304      	adds	r3, #4
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 feff 	bl	8005388 <get_gyro_config>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]
                        break;
 800458e:	e022      	b.n	80045d6 <bmi2_get_sensor_config+0x14e>

                    /* Get auxiliary configuration */
                    case BMI2_AUX:
                        rslt = get_aux_config(&sens_cfg[loop].cfg.aux, dev);
 8004590:	7dba      	ldrb	r2, [r7, #22]
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	461a      	mov	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	3304      	adds	r3, #4
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 ff41 	bl	800542c <get_aux_config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	75fb      	strb	r3, [r7, #23]
                        break;
 80045ae:	e012      	b.n	80045d6 <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = get_gyro_gain_update_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 80045b0:	7dba      	ldrb	r2, [r7, #22]
 80045b2:	4613      	mov	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	461a      	mov	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	3304      	adds	r3, #4
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 ff67 	bl	8005498 <get_gyro_gain_update_config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	75fb      	strb	r3, [r7, #23]
                        break;
 80045ce:	e002      	b.n	80045d6 <bmi2_get_sensor_config+0x14e>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 80045d0:	23f8      	movs	r3, #248	@ 0xf8
 80045d2:	75fb      	strb	r3, [r7, #23]
                        break;
 80045d4:	bf00      	nop
                }
            }

            /* Return error if any of the get configurations fail */
            if (rslt != BMI2_OK)
 80045d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d108      	bne.n	80045f0 <bmi2_get_sensor_config+0x168>
        for (loop = 0; loop < n_sens; loop++)
 80045de:	7dbb      	ldrb	r3, [r7, #22]
 80045e0:	3301      	adds	r3, #1
 80045e2:	75bb      	strb	r3, [r7, #22]
 80045e4:	7dba      	ldrb	r2, [r7, #22]
 80045e6:	7afb      	ldrb	r3, [r7, #11]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	f4ff af6b 	bcc.w	80044c4 <bmi2_get_sensor_config+0x3c>
 80045ee:	e000      	b.n	80045f2 <bmi2_get_sensor_config+0x16a>
            {
                break;
 80045f0:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80045f2:	7d7b      	ldrb	r3, [r7, #21]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10d      	bne.n	8004614 <bmi2_get_sensor_config+0x18c>
 80045f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <bmi2_get_sensor_config+0x18c>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	2001      	movs	r0, #1
 8004604:	f7ff fcfd 	bl	8004002 <bmi2_set_adv_power_save>
 8004608:	4603      	mov	r3, r0
 800460a:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800460c:	e002      	b.n	8004614 <bmi2_get_sensor_config+0x18c>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800460e:	23ff      	movs	r3, #255	@ 0xff
 8004610:	75fb      	strb	r3, [r7, #23]
 8004612:	e000      	b.n	8004616 <bmi2_get_sensor_config+0x18e>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8004614:	bf00      	nop
    }

    return rslt;
 8004616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop

08004624 <bmi2_get_feature_data>:

/*!
 * @brief This API gets the feature data gyroscope user-gain update and gyroscope cross sensitivity.
 */
int8_t bmi2_get_feature_data(struct bmi2_feat_sensor_data *feat_sensor_data, uint8_t n_sens, struct bmi2_dev *dev)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	460b      	mov	r3, r1
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f001 fa12 	bl	8005a60 <null_ptr_check>
 800463c:	4603      	mov	r3, r0
 800463e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 8004640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d15c      	bne.n	8004702 <bmi2_get_feature_data+0xde>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d059      	beq.n	8004702 <bmi2_get_feature_data+0xde>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004654:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 8004656:	2300      	movs	r3, #0
 8004658:	75bb      	strb	r3, [r7, #22]
 800465a:	e04b      	b.n	80046f4 <bmi2_get_feature_data+0xd0>
        {
            /* Disable Advance power save if enabled for feature
             * configurations
             */
            if (feat_sensor_data[loop].type >= BMI2_MAIN_SENS_MAX_NUM)
 800465c:	7dbb      	ldrb	r3, [r7, #22]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d908      	bls.n	800467c <bmi2_get_feature_data+0x58>
            {
                if (aps_stat == BMI2_ENABLE)
 800466a:	7d7b      	ldrb	r3, [r7, #21]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d105      	bne.n	800467c <bmi2_get_feature_data+0x58>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	2000      	movs	r0, #0
 8004674:	f7ff fcc5 	bl	8004002 <bmi2_set_adv_power_save>
 8004678:	4603      	mov	r3, r0
 800467a:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 800467c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d127      	bne.n	80046d4 <bmi2_get_feature_data+0xb0>
            {
                switch (feat_sensor_data[loop].type)
 8004684:	7dbb      	ldrb	r3, [r7, #22]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b09      	cmp	r3, #9
 8004690:	d00d      	beq.n	80046ae <bmi2_get_feature_data+0x8a>
 8004692:	2b29      	cmp	r3, #41	@ 0x29
 8004694:	d117      	bne.n	80046c6 <bmi2_get_feature_data+0xa2>
                {
                    case BMI2_GYRO_CROSS_SENSE:

                        /* Get Gyroscope cross sense value of z axis */
                        rslt = get_gyro_cross_sense(&feat_sensor_data[loop].sens_data.correction_factor_zx, dev);
 8004696:	7dbb      	ldrb	r3, [r7, #22]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	3304      	adds	r3, #4
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fac2 	bl	8005c2c <get_gyro_cross_sense>
 80046a8:	4603      	mov	r3, r0
 80046aa:	75fb      	strb	r3, [r7, #23]
                        break;
 80046ac:	e00e      	b.n	80046cc <bmi2_get_feature_data+0xa8>

                    case BMI2_GYRO_GAIN_UPDATE:

                        /* Get saturation status of gyroscope user gain update  */
                        rslt =
                            get_gyro_gain_update_status(&feat_sensor_data[loop].sens_data.gyro_user_gain_status, dev);
 80046ae:	7dbb      	ldrb	r3, [r7, #22]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	3304      	adds	r3, #4
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 fa1b 	bl	8005af6 <get_gyro_gain_update_status>
 80046c0:	4603      	mov	r3, r0
 80046c2:	75fb      	strb	r3, [r7, #23]
                        break;
 80046c4:	e002      	b.n	80046cc <bmi2_get_feature_data+0xa8>
                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 80046c6:	23f8      	movs	r3, #248	@ 0xf8
 80046c8:	75fb      	strb	r3, [r7, #23]
                        break;
 80046ca:	bf00      	nop
                }

                /* Return error if any of the get sensor data fails */
                if (rslt != BMI2_OK)
 80046cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d114      	bne.n	80046fe <bmi2_get_feature_data+0xda>
            }

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80046d4:	7d7b      	ldrb	r3, [r7, #21]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d109      	bne.n	80046ee <bmi2_get_feature_data+0xca>
 80046da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d105      	bne.n	80046ee <bmi2_get_feature_data+0xca>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	2001      	movs	r0, #1
 80046e6:	f7ff fc8c 	bl	8004002 <bmi2_set_adv_power_save>
 80046ea:	4603      	mov	r3, r0
 80046ec:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 80046ee:	7dbb      	ldrb	r3, [r7, #22]
 80046f0:	3301      	adds	r3, #1
 80046f2:	75bb      	strb	r3, [r7, #22]
 80046f4:	7dba      	ldrb	r2, [r7, #22]
 80046f6:	7afb      	ldrb	r3, [r7, #11]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d3af      	bcc.n	800465c <bmi2_get_feature_data+0x38>
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 80046fc:	e003      	b.n	8004706 <bmi2_get_feature_data+0xe2>
                    break;
 80046fe:	bf00      	nop
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 8004700:	e001      	b.n	8004706 <bmi2_get_feature_data+0xe2>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004702:	23ff      	movs	r3, #255	@ 0xff
 8004704:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004706:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <bmi2_get_status>:
/*!
 * @brief This API gets the data ready status of accelerometer, gyroscope,
 * auxiliary, command decoder and busy status of auxiliary.
 */
int8_t bmi2_get_status(uint8_t *status, struct bmi2_dev *dev)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800471c:	6838      	ldr	r0, [r7, #0]
 800471e:	f001 f99f 	bl	8005a60 <null_ptr_check>
 8004722:	4603      	mov	r3, r0
 8004724:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (status != NULL))
 8004726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10b      	bne.n	8004746 <bmi2_get_status+0x34>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <bmi2_get_status+0x34>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, status, 1, dev);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2201      	movs	r2, #1
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	2003      	movs	r0, #3
 800473c:	f7ff fb1a 	bl	8003d74 <bmi2_get_regs>
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	e001      	b.n	800474a <bmi2_get_status+0x38>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004746:	23ff      	movs	r3, #255	@ 0xff
 8004748:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800474a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <bmi2_map_feat_int>:

/*!
 * @brief This API maps/unmaps feature interrupts to that of interrupt pins.
 */
int8_t bmi2_map_feat_int(uint8_t type, enum bmi2_hw_int_pin hw_int_pin, struct bmi2_dev *dev)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	4603      	mov	r3, r0
 800475e:	603a      	str	r2, [r7, #0]
 8004760:	71fb      	strb	r3, [r7, #7]
 8004762:	460b      	mov	r3, r1
 8004764:	71bb      	strb	r3, [r7, #6]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define the value of feature interrupts */
    uint8_t feat_int = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	73bb      	strb	r3, [r7, #14]

    /* Array to store the interrupt mask bits */
    uint8_t data_array[2] = { 0 };
 800476a:	2300      	movs	r3, #0
 800476c:	81bb      	strh	r3, [r7, #12]

    /* Structure to define map the interrupts */
    struct bmi2_map_int map_int = { 0 };
 800476e:	2300      	movs	r3, #0
 8004770:	813b      	strh	r3, [r7, #8]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004772:	6838      	ldr	r0, [r7, #0]
 8004774:	f001 f974 	bl	8005a60 <null_ptr_check>
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800477c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d13a      	bne.n	80047fa <bmi2_map_feat_int+0xa4>
    {
        /* Read interrupt map1 and map2 and register */
        rslt = bmi2_get_regs(BMI2_INT1_MAP_FEAT_ADDR, data_array, 2, dev);
 8004784:	f107 010c 	add.w	r1, r7, #12
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2202      	movs	r2, #2
 800478c:	2056      	movs	r0, #86	@ 0x56
 800478e:	f7ff faf1 	bl	8003d74 <bmi2_get_regs>
 8004792:	4603      	mov	r3, r0
 8004794:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI2_OK)
 8004796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d12f      	bne.n	80047fe <bmi2_map_feat_int+0xa8>
        {
            /* Get the value of the feature interrupt to be mapped */
            extract_feat_int_map(&map_int, type, dev);
 800479e:	79f9      	ldrb	r1, [r7, #7]
 80047a0:	f107 0308 	add.w	r3, r7, #8
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 f979 	bl	8005a9e <extract_feat_int_map>

            feat_int = map_int.sens_map_int;
 80047ac:	7a7b      	ldrb	r3, [r7, #9]
 80047ae:	73bb      	strb	r3, [r7, #14]

            /* Map the interrupts */
            rslt = map_feat_int(data_array, hw_int_pin, feat_int);
 80047b0:	7bba      	ldrb	r2, [r7, #14]
 80047b2:	79b9      	ldrb	r1, [r7, #6]
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 ff97 	bl	80056ec <map_feat_int>
 80047be:	4603      	mov	r3, r0
 80047c0:	73fb      	strb	r3, [r7, #15]

            /* Map the interrupts to INT1 and INT2 map register */
            if (rslt == BMI2_OK)
 80047c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d119      	bne.n	80047fe <bmi2_map_feat_int+0xa8>
            {
                rslt = bmi2_set_regs(BMI2_INT1_MAP_FEAT_ADDR, &data_array[0], 1, dev);
 80047ca:	f107 010c 	add.w	r1, r7, #12
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2201      	movs	r2, #1
 80047d2:	2056      	movs	r0, #86	@ 0x56
 80047d4:	f7ff fb41 	bl	8003e5a <bmi2_set_regs>
 80047d8:	4603      	mov	r3, r0
 80047da:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI2_OK)
 80047dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10c      	bne.n	80047fe <bmi2_map_feat_int+0xa8>
                {
                    rslt = bmi2_set_regs(BMI2_INT2_MAP_FEAT_ADDR, &data_array[1], 1, dev);
 80047e4:	f107 030c 	add.w	r3, r7, #12
 80047e8:	1c59      	adds	r1, r3, #1
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2201      	movs	r2, #1
 80047ee:	2057      	movs	r0, #87	@ 0x57
 80047f0:	f7ff fb33 	bl	8003e5a <bmi2_set_regs>
 80047f4:	4603      	mov	r3, r0
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e001      	b.n	80047fe <bmi2_map_feat_int+0xa8>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80047fa:	23ff      	movs	r3, #255	@ 0xff
 80047fc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80047fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <bmi2_get_gyro_cross_sense>:
/*!
 * @brief This API updates the cross sensitivity coefficient between gyroscope's
 * X and Z axes.
 */
int8_t bmi2_get_gyro_cross_sense(struct bmi2_dev *dev)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b088      	sub	sp, #32
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	77fb      	strb	r3, [r7, #31]
    struct bmi2_feat_sensor_data data;

    /* Check if the feature is supported by this variant */
    if (dev->variant_feature & BMI2_GYRO_CROSS_SENS_ENABLE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d020      	beq.n	8004866 <bmi2_get_gyro_cross_sense+0x5c>
    {
        rslt = null_ptr_check(dev);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f001 f91b 	bl	8005a60 <null_ptr_check>
 800482a:	4603      	mov	r3, r0
 800482c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800482e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d114      	bne.n	8004860 <bmi2_get_gyro_cross_sense+0x56>
        {
            /* Select the feature whose data is to be acquired */
            data.type = BMI2_GYRO_CROSS_SENSE;
 8004836:	2329      	movs	r3, #41	@ 0x29
 8004838:	733b      	strb	r3, [r7, #12]

            /* Get the respective data */
            rslt = bmi2_get_feature_data(&data, 1, dev);
 800483a:	f107 030c 	add.w	r3, r7, #12
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	2101      	movs	r1, #1
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff feee 	bl	8004624 <bmi2_get_feature_data>
 8004848:	4603      	mov	r3, r0
 800484a:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 800484c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <bmi2_get_gyro_cross_sense+0x60>
            {
                /* Update the gyroscope cross sense value of z axis
                 * in the device structure
                 */
                dev->gyr_cross_sens_zx = data.sens_data.correction_factor_zx;
 8004854:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 800485e:	e004      	b.n	800486a <bmi2_get_gyro_cross_sense+0x60>
            }
        }
        else
        {
            rslt = BMI2_E_NULL_PTR;
 8004860:	23ff      	movs	r3, #255	@ 0xff
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e001      	b.n	800486a <bmi2_get_gyro_cross_sense+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8004866:	23f8      	movs	r3, #248	@ 0xf8
 8004868:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800486a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <bmi2_get_internal_status>:

/*!
 * @brief This API gets Error bits and message indicating internal status.
 */
int8_t bmi2_get_internal_status(uint8_t *int_stat, struct bmi2_dev *dev)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004880:	6838      	ldr	r0, [r7, #0]
 8004882:	f001 f8ed 	bl	8005a60 <null_ptr_check>
 8004886:	4603      	mov	r3, r0
 8004888:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (int_stat != NULL))
 800488a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d113      	bne.n	80048ba <bmi2_get_internal_status+0x44>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d010      	beq.n	80048ba <bmi2_get_internal_status+0x44>
    {
        /* Wait till ASIC is initialized */
        dev->delay_us(BMI2_INTERNAL_STATUS_READ_DELAY_MS, dev->intf_ptr);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	6852      	ldr	r2, [r2, #4]
 80048a0:	4611      	mov	r1, r2
 80048a2:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80048a6:	4798      	blx	r3

        /* Get the error bits and message */
        rslt = bmi2_get_regs(BMI2_INTERNAL_STATUS_ADDR, int_stat, 1, dev);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2201      	movs	r2, #1
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	2021      	movs	r0, #33	@ 0x21
 80048b0:	f7ff fa60 	bl	8003d74 <bmi2_get_regs>
 80048b4:	4603      	mov	r3, r0
 80048b6:	73fb      	strb	r3, [r7, #15]
 80048b8:	e001      	b.n	80048be <bmi2_get_internal_status+0x48>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80048ba:	23ff      	movs	r3, #255	@ 0xff
 80048bc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80048be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <bmi2_get_feat_config>:
/*!
 * @brief This API is used to get the feature configuration from the
 * selected page.
 */
int8_t bmi2_get_feat_config(uint8_t sw_page, uint8_t *feat_config, struct bmi2_dev *dev)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	4603      	mov	r3, r0
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	73fb      	strb	r3, [r7, #15]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define bytes remaining to read */
    uint8_t bytes_remain = BMI2_FEAT_SIZE_IN_BYTES;
 80048d8:	2310      	movs	r3, #16
 80048da:	75bb      	strb	r3, [r7, #22]

    /* Variable to define the read-write length */
    uint8_t read_write_len = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	757b      	strb	r3, [r7, #21]

    /* Variable to define the feature configuration address */
    uint8_t addr = BMI2_FEATURES_REG_ADDR;
 80048e0:	2330      	movs	r3, #48	@ 0x30
 80048e2:	753b      	strb	r3, [r7, #20]

    /* Variable to define index */
    uint8_t index = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	74fb      	strb	r3, [r7, #19]

    if ((feat_config == NULL) || (dev == NULL))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <bmi2_get_feat_config+0x2a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <bmi2_get_feat_config+0x30>
    {
        rslt = BMI2_E_NULL_PTR;
 80048f4:	23ff      	movs	r3, #255	@ 0xff
 80048f6:	75fb      	strb	r3, [r7, #23]
 80048f8:	e073      	b.n	80049e2 <bmi2_get_feat_config+0x118>
    }
    else
    {
        /* Check whether the page is valid */
        if (sw_page < dev->page_max)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7e1a      	ldrb	r2, [r3, #24]
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	429a      	cmp	r2, r3
 8004902:	d96c      	bls.n	80049de <bmi2_get_feat_config+0x114>
        {
            /* Switch page */
            rslt = bmi2_set_regs(BMI2_FEAT_PAGE_ADDR, &sw_page, 1, dev);
 8004904:	f107 010f 	add.w	r1, r7, #15
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	202f      	movs	r0, #47	@ 0x2f
 800490e:	f7ff faa4 	bl	8003e5a <bmi2_set_regs>
 8004912:	4603      	mov	r3, r0
 8004914:	75fb      	strb	r3, [r7, #23]

            /* If user length is less than feature length */
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8004916:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d152      	bne.n	80049c4 <bmi2_get_feat_config+0xfa>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	89db      	ldrh	r3, [r3, #14]
 8004922:	2b0f      	cmp	r3, #15
 8004924:	d84e      	bhi.n	80049c4 <bmi2_get_feat_config+0xfa>
            {
                /* Read-write should be even */
                if ((dev->read_write_len % 2) != 0)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	89db      	ldrh	r3, [r3, #14]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d041      	beq.n	80049b8 <bmi2_get_feat_config+0xee>
                {
                    dev->read_write_len--;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	89db      	ldrh	r3, [r3, #14]
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	81da      	strh	r2, [r3, #14]
                }

                while (bytes_remain > 0)
 8004940:	e03a      	b.n	80049b8 <bmi2_get_feat_config+0xee>
                {
                    if (bytes_remain >= dev->read_write_len)
 8004942:	7dbb      	ldrb	r3, [r7, #22]
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	89db      	ldrh	r3, [r3, #14]
 800494a:	429a      	cmp	r2, r3
 800494c:	d31d      	bcc.n	800498a <bmi2_get_feat_config+0xc0>
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, &feat_config[index], dev->read_write_len, dev);
 800494e:	7cfb      	ldrb	r3, [r7, #19]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	18d1      	adds	r1, r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	89da      	ldrh	r2, [r3, #14]
 8004958:	7d38      	ldrb	r0, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f7ff fa0a 	bl	8003d74 <bmi2_get_regs>
 8004960:	4603      	mov	r3, r0
 8004962:	75fb      	strb	r3, [r7, #23]

                        /* Update index */
                        index += (uint8_t) dev->read_write_len;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	89db      	ldrh	r3, [r3, #14]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	7cfb      	ldrb	r3, [r7, #19]
 800496c:	4413      	add	r3, r2
 800496e:	74fb      	strb	r3, [r7, #19]

                        /* Update address */
                        addr += (uint8_t) dev->read_write_len;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	89db      	ldrh	r3, [r3, #14]
 8004974:	b2da      	uxtb	r2, r3
 8004976:	7d3b      	ldrb	r3, [r7, #20]
 8004978:	4413      	add	r3, r2
 800497a:	753b      	strb	r3, [r7, #20]

                        /* Update read-write length */
                        read_write_len += (uint8_t) dev->read_write_len;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	89db      	ldrh	r3, [r3, #14]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	7d7b      	ldrb	r3, [r7, #21]
 8004984:	4413      	add	r3, r2
 8004986:	757b      	strb	r3, [r7, #21]
 8004988:	e00e      	b.n	80049a8 <bmi2_get_feat_config+0xde>
                    }
                    else
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, (uint8_t *) (feat_config + index), (uint16_t) bytes_remain, dev);
 800498a:	7cfb      	ldrb	r3, [r7, #19]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	18d1      	adds	r1, r2, r3
 8004990:	7dbb      	ldrb	r3, [r7, #22]
 8004992:	b29a      	uxth	r2, r3
 8004994:	7d38      	ldrb	r0, [r7, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f7ff f9ec 	bl	8003d74 <bmi2_get_regs>
 800499c:	4603      	mov	r3, r0
 800499e:	75fb      	strb	r3, [r7, #23]

                        /* Update read-write length */
                        read_write_len += bytes_remain;
 80049a0:	7d7a      	ldrb	r2, [r7, #21]
 80049a2:	7dbb      	ldrb	r3, [r7, #22]
 80049a4:	4413      	add	r3, r2
 80049a6:	757b      	strb	r3, [r7, #21]
                    }

                    /* Remaining bytes */
                    bytes_remain = BMI2_FEAT_SIZE_IN_BYTES - read_write_len;
 80049a8:	7d7b      	ldrb	r3, [r7, #21]
 80049aa:	f1c3 0310 	rsb	r3, r3, #16
 80049ae:	75bb      	strb	r3, [r7, #22]

                    if (rslt != BMI2_OK)
 80049b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d103      	bne.n	80049c0 <bmi2_get_feat_config+0xf6>
                while (bytes_remain > 0)
 80049b8:	7dbb      	ldrb	r3, [r7, #22]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1c1      	bne.n	8004942 <bmi2_get_feat_config+0x78>
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 80049be:	e010      	b.n	80049e2 <bmi2_get_feat_config+0x118>
                    {
                        break;
 80049c0:	bf00      	nop
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 80049c2:	e00e      	b.n	80049e2 <bmi2_get_feat_config+0x118>
                    }
                }
            }
            else if (rslt == BMI2_OK)
 80049c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <bmi2_get_feat_config+0x118>
            {
                /* Get configuration from the page */
                rslt = bmi2_get_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2210      	movs	r2, #16
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	2030      	movs	r0, #48	@ 0x30
 80049d4:	f7ff f9ce 	bl	8003d74 <bmi2_get_regs>
 80049d8:	4603      	mov	r3, r0
 80049da:	75fb      	strb	r3, [r7, #23]
 80049dc:	e001      	b.n	80049e2 <bmi2_get_feat_config+0x118>
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_PAGE;
 80049de:	23f6      	movs	r3, #246	@ 0xf6
 80049e0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80049e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <bmi2_extract_input_feat_config>:
 * @brief This API is used to extract the input feature configuration
 * details from the look-up table.
 */
uint8_t bmi2_extract_input_feat_config(struct bmi2_feature_config *feat_config, uint8_t type,
                                       const struct bmi2_dev *dev)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b087      	sub	sp, #28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	460b      	mov	r3, r1
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	75bb      	strb	r3, [r7, #22]

    /* Search for the input feature from the input configuration array */
    while (loop < dev->input_sens)
 8004a04:	e01c      	b.n	8004a40 <bmi2_extract_input_feat_config+0x52>
    {
        if (dev->feat_config[loop].type == type)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a19      	ldr	r1, [r3, #32]
 8004a0a:	7dfa      	ldrb	r2, [r7, #23]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	4413      	add	r3, r2
 8004a12:	440b      	add	r3, r1
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	7afa      	ldrb	r2, [r7, #11]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d10e      	bne.n	8004a3a <bmi2_extract_input_feat_config+0x4c>
        {
            *feat_config = dev->feat_config[loop];
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a19      	ldr	r1, [r3, #32]
 8004a20:	7dfa      	ldrb	r2, [r7, #23]
 8004a22:	4613      	mov	r3, r2
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	4413      	add	r3, r2
 8004a28:	18ca      	adds	r2, r1, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8811      	ldrh	r1, [r2, #0]
 8004a2e:	7892      	ldrb	r2, [r2, #2]
 8004a30:	8019      	strh	r1, [r3, #0]
 8004a32:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	75bb      	strb	r3, [r7, #22]
            break;
 8004a38:	e007      	b.n	8004a4a <bmi2_extract_input_feat_config+0x5c>
        }

        loop++;
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->input_sens)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	7e5b      	ldrb	r3, [r3, #25]
 8004a44:	7dfa      	ldrb	r2, [r7, #23]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d3dd      	bcc.n	8004a06 <bmi2_extract_input_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 8004a4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <write_config_file>:

/*!
 * @brief This internal API writes the configuration file.
 */
static int8_t write_config_file(struct bmi2_dev *dev)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to update the configuration file index */
    uint16_t index = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	82bb      	strh	r3, [r7, #20]

    /* config file size */
    uint16_t config_size = dev->config_size;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8004a6a:	827b      	strh	r3, [r7, #18]

    /* Variable to get the remainder */
    uint8_t remain = (uint8_t)(config_size % dev->read_write_len);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	89da      	ldrh	r2, [r3, #14]
 8004a70:	8a7b      	ldrh	r3, [r7, #18]
 8004a72:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a76:	fb01 f202 	mul.w	r2, r1, r2
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	747b      	strb	r3, [r7, #17]

    /* Variable to get the balance bytes */
    uint16_t bal_byte = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	81fb      	strh	r3, [r7, #14]

    /* Variable to define temporary read/write length */
    uint16_t read_write_len = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	81bb      	strh	r3, [r7, #12]

    /* Disable advanced power save mode */
    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f7ff fab9 	bl	8004002 <bmi2_set_adv_power_save>
 8004a90:	4603      	mov	r3, r0
 8004a92:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8004a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f040 8088 	bne.w	8004bae <write_config_file+0x156>
    {
        /* Disable loading of the configuration */
        rslt = set_config_load(BMI2_DISABLE, dev);
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f000 f88a 	bl	8004bba <set_config_load>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 8004aaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d17d      	bne.n	8004bae <write_config_file+0x156>
        {
            if (!remain)
 8004ab2:	7c7b      	ldrb	r3, [r7, #17]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d11c      	bne.n	8004af2 <write_config_file+0x9a>
            {
                /* Write the configuration file */
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	82bb      	strh	r3, [r7, #20]
 8004abc:	e010      	b.n	8004ae0 <write_config_file+0x88>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	8abb      	ldrh	r3, [r7, #20]
 8004ac4:	18d0      	adds	r0, r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	89da      	ldrh	r2, [r3, #14]
 8004aca:	8ab9      	ldrh	r1, [r7, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f000 f8a6 	bl	8004c1e <upload_file>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	89da      	ldrh	r2, [r3, #14]
 8004ada:	8abb      	ldrh	r3, [r7, #20]
 8004adc:	4413      	add	r3, r2
 8004ade:	82bb      	strh	r3, [r7, #20]
 8004ae0:	8aba      	ldrh	r2, [r7, #20]
 8004ae2:	8a7b      	ldrh	r3, [r7, #18]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d24e      	bcs.n	8004b86 <write_config_file+0x12e>
 8004ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0e6      	beq.n	8004abe <write_config_file+0x66>
 8004af0:	e049      	b.n	8004b86 <write_config_file+0x12e>
                }
            }
            else
            {
                /* Get the balance bytes */
                bal_byte = (uint16_t) config_size - (uint16_t) remain;
 8004af2:	7c7b      	ldrb	r3, [r7, #17]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	8a7a      	ldrh	r2, [r7, #18]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	81fb      	strh	r3, [r7, #14]

                /* Write the configuration file for the balancem bytes */
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8004afc:	2300      	movs	r3, #0
 8004afe:	82bb      	strh	r3, [r7, #20]
 8004b00:	e010      	b.n	8004b24 <write_config_file+0xcc>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695a      	ldr	r2, [r3, #20]
 8004b06:	8abb      	ldrh	r3, [r7, #20]
 8004b08:	18d0      	adds	r0, r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	89da      	ldrh	r2, [r3, #14]
 8004b0e:	8ab9      	ldrh	r1, [r7, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f000 f884 	bl	8004c1e <upload_file>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	89da      	ldrh	r2, [r3, #14]
 8004b1e:	8abb      	ldrh	r3, [r7, #20]
 8004b20:	4413      	add	r3, r2
 8004b22:	82bb      	strh	r3, [r7, #20]
 8004b24:	8aba      	ldrh	r2, [r7, #20]
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d203      	bcs.n	8004b34 <write_config_file+0xdc>
 8004b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0e6      	beq.n	8004b02 <write_config_file+0xaa>
                }

                if (rslt == BMI2_OK)
 8004b34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d124      	bne.n	8004b86 <write_config_file+0x12e>
                {
                    /* Update length in a temporary variable */
                    read_write_len = dev->read_write_len;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	89db      	ldrh	r3, [r3, #14]
 8004b40:	81bb      	strh	r3, [r7, #12]

                    /* Write the remaining bytes in 2 bytes length */
                    dev->read_write_len = 2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	81da      	strh	r2, [r3, #14]

                    /* Write the configuration file for the remaining bytes */
                    for (index = bal_byte;
 8004b48:	89fb      	ldrh	r3, [r7, #14]
 8004b4a:	82bb      	strh	r3, [r7, #20]
 8004b4c:	e010      	b.n	8004b70 <write_config_file+0x118>
                         (index < config_size) && (rslt == BMI2_OK);
                         index += dev->read_write_len)
                    {
                        rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695a      	ldr	r2, [r3, #20]
 8004b52:	8abb      	ldrh	r3, [r7, #20]
 8004b54:	18d0      	adds	r0, r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	89da      	ldrh	r2, [r3, #14]
 8004b5a:	8ab9      	ldrh	r1, [r7, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f000 f85e 	bl	8004c1e <upload_file>
 8004b62:	4603      	mov	r3, r0
 8004b64:	75fb      	strb	r3, [r7, #23]
                         index += dev->read_write_len)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	89da      	ldrh	r2, [r3, #14]
 8004b6a:	8abb      	ldrh	r3, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	82bb      	strh	r3, [r7, #20]
                         (index < config_size) && (rslt == BMI2_OK);
 8004b70:	8aba      	ldrh	r2, [r7, #20]
 8004b72:	8a7b      	ldrh	r3, [r7, #18]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d203      	bcs.n	8004b80 <write_config_file+0x128>
 8004b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0e6      	beq.n	8004b4e <write_config_file+0xf6>
                    }

                    /* Restore the user set length back from the temporary variable */
                    dev->read_write_len = read_write_len;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	89ba      	ldrh	r2, [r7, #12]
 8004b84:	81da      	strh	r2, [r3, #14]
                }
            }

            if (rslt == BMI2_OK)
 8004b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10f      	bne.n	8004bae <write_config_file+0x156>
            {
                /* Enable loading of the configuration */
                rslt = set_config_load(BMI2_ENABLE, dev);
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	2001      	movs	r0, #1
 8004b92:	f000 f812 	bl	8004bba <set_config_load>
 8004b96:	4603      	mov	r3, r0
 8004b98:	75fb      	strb	r3, [r7, #23]

                if (rslt == BMI2_OK)
 8004b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d105      	bne.n	8004bae <write_config_file+0x156>
                {
                    /* Enable advanced power save mode */
                    rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f7ff fa2c 	bl	8004002 <bmi2_set_adv_power_save>
 8004baa:	4603      	mov	r3, r0
 8004bac:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8004bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <set_config_load>:
/*!
 * @brief This internal API enables/disables the loading of the configuration
 * file.
 */
static int8_t set_config_load(uint8_t enable, struct bmi2_dev *dev)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	6039      	str	r1, [r7, #0]
 8004bc4:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8004bca:	f107 010e 	add.w	r1, r7, #14
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	2059      	movs	r0, #89	@ 0x59
 8004bd4:	f7ff f8ce 	bl	8003d74 <bmi2_get_regs>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d116      	bne.n	8004c12 <set_config_load+0x58>
    {
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_CONF_LOAD_EN, enable);
 8004be4:	7bbb      	ldrb	r3, [r7, #14]
 8004be6:	b25b      	sxtb	r3, r3
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	b25a      	sxtb	r2, r3
 8004bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	b25b      	sxtb	r3, r3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	73bb      	strb	r3, [r7, #14]
        rslt = bmi2_set_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8004c00:	f107 010e 	add.w	r1, r7, #14
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2201      	movs	r2, #1
 8004c08:	2059      	movs	r0, #89	@ 0x59
 8004c0a:	f7ff f926 	bl	8003e5a <bmi2_set_regs>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <upload_file>:

/*!
 * @brief This internal API loads the configuration file.
 */
static int8_t upload_file(const uint8_t *config_data, uint16_t index, uint16_t write_len, struct bmi2_dev *dev)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	817b      	strh	r3, [r7, #10]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	813b      	strh	r3, [r7, #8]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store address */
    uint8_t addr_array[2] = { 0 };
 8004c30:	2300      	movs	r3, #0
 8004c32:	82bb      	strh	r3, [r7, #20]

    if (config_data != NULL)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d024      	beq.n	8004c84 <upload_file+0x66>
    {
        /* Store 0 to 3 bits of address in first byte */
        addr_array[0] = (uint8_t)((index / 2) & 0x0F);
 8004c3a:	897b      	ldrh	r3, [r7, #10]
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	753b      	strb	r3, [r7, #20]

        /* Store 4 to 11 bits of address in the second byte */
        addr_array[1] = (uint8_t)((index / 2) >> 4);
 8004c4a:	897b      	ldrh	r3, [r7, #10]
 8004c4c:	085b      	lsrs	r3, r3, #1
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	757b      	strb	r3, [r7, #21]

        /* Write the 2 bytes of address in consecutive locations */
        rslt = bmi2_set_regs(BMI2_INIT_ADDR_0, addr_array, 2, dev);
 8004c58:	f107 0114 	add.w	r1, r7, #20
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	205b      	movs	r0, #91	@ 0x5b
 8004c62:	f7ff f8fa 	bl	8003e5a <bmi2_set_regs>
 8004c66:	4603      	mov	r3, r0
 8004c68:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 8004c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <upload_file+0x6a>
        {
            /* Burst write configuration file data corresponding to user set length */
            rslt = bmi2_set_regs(BMI2_INIT_DATA_ADDR, (uint8_t *)config_data, write_len, dev);
 8004c72:	893a      	ldrh	r2, [r7, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	205e      	movs	r0, #94	@ 0x5e
 8004c7a:	f7ff f8ee 	bl	8003e5a <bmi2_set_regs>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	75fb      	strb	r3, [r7, #23]
 8004c82:	e001      	b.n	8004c88 <upload_file+0x6a>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004c84:	23ff      	movs	r3, #255	@ 0xff
 8004c86:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <validate_bw_perf_mode>:
/*!
 * @brief This internal API validates bandwidth and performance mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_perf_mode(uint8_t *bandwidth, uint8_t *perf_mode, struct bmi2_dev *dev)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(perf_mode, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	68b8      	ldr	r0, [r7, #8]
 8004ca8:	f000 fda6 	bl	80057f8 <check_boundary_val>
 8004cac:	4603      	mov	r3, r0
 8004cae:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8004cb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d114      	bne.n	8004ce2 <validate_bw_perf_mode+0x4e>
    {
        /* Validate and auto-correct bandwidth parameter */
        if (*perf_mode == BMI2_PERF_OPT_MODE)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d108      	bne.n	8004cd2 <validate_bw_perf_mode+0x3e>
        {
            /* Validate for continuous filter mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_CIC_AVG8, dev);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fd96 	bl	80057f8 <check_boundary_val>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	75fb      	strb	r3, [r7, #23]
 8004cd0:	e007      	b.n	8004ce2 <validate_bw_perf_mode+0x4e>
        }
        else
        {
            /* Validate for CIC averaging mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_RES_AVG128, dev);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2207      	movs	r2, #7
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fd8d 	bl	80057f8 <check_boundary_val>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <validate_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_odr_range(uint8_t *odr, uint8_t *range, struct bmi2_dev *dev)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b086      	sub	sp, #24
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto correct ODR */
    rslt = check_boundary_val(odr, BMI2_ACC_ODR_0_78HZ, BMI2_ACC_ODR_1600HZ, dev);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	220c      	movs	r2, #12
 8004cfe:	2101      	movs	r1, #1
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fd79 	bl	80057f8 <check_boundary_val>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8004d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d107      	bne.n	8004d22 <validate_odr_range+0x34>
    {
        /* Validate and auto correct Range */
        rslt = check_boundary_val(range, BMI2_ACC_RANGE_2G, BMI2_ACC_RANGE_16G, dev);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2203      	movs	r2, #3
 8004d16:	2100      	movs	r1, #0
 8004d18:	68b8      	ldr	r0, [r7, #8]
 8004d1a:	f000 fd6d 	bl	80057f8 <check_boundary_val>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004d22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <validate_gyro_config>:
/*!
 * @brief This internal API validates bandwidth, performance mode, low power/
 * high performance mode, ODR, and range set by the user.
 */
static int8_t validate_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(&config->filter_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	1c98      	adds	r0, r3, #2
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	2100      	movs	r1, #0
 8004d42:	f000 fd59 	bl	80057f8 <check_boundary_val>
 8004d46:	4603      	mov	r3, r0
 8004d48:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d13b      	bne.n	8004dca <validate_gyro_config+0x9c>
    {
        /* Validate and auto-correct bandwidth parameter */
        rslt = check_boundary_val(&config->bwp, BMI2_GYR_OSR4_MODE, BMI2_GYR_CIC_MODE, dev);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	1c58      	adds	r0, r3, #1
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2203      	movs	r2, #3
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	f000 fd4c 	bl	80057f8 <check_boundary_val>
 8004d60:	4603      	mov	r3, r0
 8004d62:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8004d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d12e      	bne.n	8004dca <validate_gyro_config+0x9c>
        {
            /* Validate and auto-correct low power/high-performance parameter */
            rslt = check_boundary_val(&config->noise_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	1d58      	adds	r0, r3, #5
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2201      	movs	r2, #1
 8004d74:	2100      	movs	r1, #0
 8004d76:	f000 fd3f 	bl	80057f8 <check_boundary_val>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8004d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d121      	bne.n	8004dca <validate_gyro_config+0x9c>
            {
                /* Validate and auto-correct ODR parameter */
                rslt = check_boundary_val(&config->odr, BMI2_GYR_ODR_25HZ, BMI2_GYR_ODR_3200HZ, dev);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	220d      	movs	r2, #13
 8004d8c:	2106      	movs	r1, #6
 8004d8e:	f000 fd33 	bl	80057f8 <check_boundary_val>
 8004d92:	4603      	mov	r3, r0
 8004d94:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI2_OK)
 8004d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d115      	bne.n	8004dca <validate_gyro_config+0x9c>
                {
                    /* Validate and auto-correct OIS range */
                    rslt = check_boundary_val(&config->ois_range, BMI2_GYR_OIS_250, BMI2_GYR_OIS_2000, dev);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	1cd8      	adds	r0, r3, #3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2201      	movs	r2, #1
 8004da6:	2100      	movs	r1, #0
 8004da8:	f000 fd26 	bl	80057f8 <check_boundary_val>
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI2_OK)
 8004db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d108      	bne.n	8004dca <validate_gyro_config+0x9c>
                    {
                        /* Validate and auto-correct range parameter */
                        rslt = check_boundary_val(&config->range, BMI2_GYR_RANGE_2000, BMI2_GYR_RANGE_125, dev);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1d18      	adds	r0, r3, #4
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	f000 fd19 	bl	80057f8 <check_boundary_val>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <cfg_error_status>:
/*!
 * @brief This internal API shows the error status when illegal sensor
 * configuration is set.
 */
static int8_t cfg_error_status(struct bmi2_dev *dev)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get error status of the set sensor configuration */
    rslt = bmi2_get_regs(BMI2_EVENT_ADDR, &reg_data, 1, dev);
 8004de0:	f107 010e 	add.w	r1, r7, #14
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	201b      	movs	r0, #27
 8004dea:	f7fe ffc3 	bl	8003d74 <bmi2_get_regs>
 8004dee:	4603      	mov	r3, r0
 8004df0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d121      	bne.n	8004e3e <cfg_error_status+0x66>
    {
        reg_data = BMI2_GET_BITS(reg_data, BMI2_EVENT_FLAG);
 8004dfa:	7bbb      	ldrb	r3, [r7, #14]
 8004dfc:	109b      	asrs	r3, r3, #2
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	73bb      	strb	r3, [r7, #14]
        switch (reg_data)
 8004e08:	7bbb      	ldrb	r3, [r7, #14]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d816      	bhi.n	8004e3c <cfg_error_status+0x64>
 8004e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e14 <cfg_error_status+0x3c>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e25 	.word	0x08004e25
 8004e18:	08004e2b 	.word	0x08004e2b
 8004e1c:	08004e31 	.word	0x08004e31
 8004e20:	08004e37 	.word	0x08004e37
        {
            case BMI2_NO_ERROR:
                rslt = BMI2_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	73fb      	strb	r3, [r7, #15]
                break;
 8004e28:	e009      	b.n	8004e3e <cfg_error_status+0x66>
            case BMI2_ACC_ERROR:
                rslt = BMI2_E_ACC_INVALID_CFG;
 8004e2a:	23fb      	movs	r3, #251	@ 0xfb
 8004e2c:	73fb      	strb	r3, [r7, #15]
                break;
 8004e2e:	e006      	b.n	8004e3e <cfg_error_status+0x66>
            case BMI2_GYR_ERROR:
                rslt = BMI2_E_GYRO_INVALID_CFG;
 8004e30:	23fa      	movs	r3, #250	@ 0xfa
 8004e32:	73fb      	strb	r3, [r7, #15]
                break;
 8004e34:	e003      	b.n	8004e3e <cfg_error_status+0x66>
            case BMI2_ACC_GYR_ERROR:
                rslt = BMI2_E_ACC_GYR_INVALID_CFG;
 8004e36:	23f9      	movs	r3, #249	@ 0xf9
 8004e38:	73fb      	strb	r3, [r7, #15]
                break;
 8004e3a:	e000      	b.n	8004e3e <cfg_error_status+0x66>
            default:
                break;
 8004e3c:	bf00      	nop
        }
    }

    return rslt;
 8004e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop

08004e4c <set_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3)It maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate auxiliary configurations */
    rslt = validate_aux_config(config, dev);
 8004e56:	6839      	ldr	r1, [r7, #0]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fa3f 	bl	80052dc <validate_aux_config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d119      	bne.n	8004e9e <set_aux_config+0x52>
    {
        /* Enable/Disable auxiliary interface */
        rslt = set_aux_interface(config, dev);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f8f7 	bl	8005060 <set_aux_interface>
 8004e72:	4603      	mov	r3, r0
 8004e74:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8004e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10f      	bne.n	8004e9e <set_aux_config+0x52>
        {
            /* Set the auxiliary interface configurations */
            rslt = config_aux_interface(config, dev);
 8004e7e:	6839      	ldr	r1, [r7, #0]
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f91f 	bl	80050c4 <config_aux_interface>
 8004e86:	4603      	mov	r3, r0
 8004e88:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8004e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d105      	bne.n	8004e9e <set_aux_config+0x52>
            {
                /* Set read out offset and ODR */
                rslt = config_aux(config, dev);
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f9db 	bl	8005250 <config_aux>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <set_gyro_user_gain_config>:
/*!
 * @brief This internal API sets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t set_gyro_user_gain_config(const struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b08a      	sub	sp, #40	@ 0x28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8004eb4:	f107 030c 	add.w	r3, r7, #12
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 8004ece:	2300      	movs	r3, #0
 8004ed0:	723b      	strb	r3, [r7, #8]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	727b      	strb	r3, [r7, #9]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8004eda:	f107 030c 	add.w	r3, r7, #12
 8004ede:	623b      	str	r3, [r7, #32]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 8004ee0:	f107 0308 	add.w	r3, r7, #8
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	2109      	movs	r1, #9
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fd80 	bl	80049ee <bmi2_extract_input_feat_config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8004ef2:	7ffb      	ldrb	r3, [r7, #31]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80aa 	beq.w	800504e <set_gyro_user_gain_config+0x1a4>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 8004efa:	7a7b      	ldrb	r3, [r7, #9]
 8004efc:	f107 010c 	add.w	r1, r7, #12
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fce1 	bl	80048ca <bmi2_get_feat_config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8004f0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f040 809e 	bne.w	8005054 <set_gyro_user_gain_config+0x1aa>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 8004f18:	7abb      	ldrb	r3, [r7, #10]
 8004f1a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8004f1e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_x */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_X, config->ratio_x);
 8004f28:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	6a3a      	ldr	r2, [r7, #32]
 8004f30:	4413      	add	r3, r2
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b21b      	sxth	r3, r3
 8004f36:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f3a:	f023 0307 	bic.w	r3, r3, #7
 8004f3e:	b21a      	sxth	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b21b      	sxth	r3, r3
 8004f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f4a:	b21b      	sxth	r3, r3
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	b219      	sxth	r1, r3
 8004f50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	6a3a      	ldr	r2, [r7, #32]
 8004f58:	4413      	add	r3, r2
 8004f5a:	b28a      	uxth	r2, r1
 8004f5c:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_y */
            idx++;
 8004f5e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f62:	3301      	adds	r3, #1
 8004f64:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_y */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Y, config->ratio_y);
 8004f68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	6a3a      	ldr	r2, [r7, #32]
 8004f70:	4413      	add	r3, r2
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b21b      	sxth	r3, r3
 8004f76:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f7a:	f023 0307 	bic.w	r3, r3, #7
 8004f7e:	b21a      	sxth	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	885b      	ldrh	r3, [r3, #2]
 8004f84:	b21b      	sxth	r3, r3
 8004f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f8a:	b21b      	sxth	r3, r3
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	b219      	sxth	r1, r3
 8004f90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	4413      	add	r3, r2
 8004f9a:	b28a      	uxth	r2, r1
 8004f9c:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_z */
            idx++;
 8004f9e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_z */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Z, config->ratio_z);
 8004fa8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	6a3a      	ldr	r2, [r7, #32]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b21b      	sxth	r3, r3
 8004fb6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	b21a      	sxth	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	889b      	ldrh	r3, [r3, #4]
 8004fc4:	b21b      	sxth	r3, r3
 8004fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fca:	b21b      	sxth	r3, r3
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	b219      	sxth	r1, r3
 8004fd0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	6a3a      	ldr	r2, [r7, #32]
 8004fd8:	4413      	add	r3, r2
 8004fda:	b28a      	uxth	r2, r1
 8004fdc:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8004fde:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - user_gain_config.start_addr;
 8004fe8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	7abb      	ldrb	r3, [r7, #10]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004ffe:	e015      	b.n	800502c <set_gyro_user_gain_config+0x182>
            {
                feat_config[user_gain_config.start_addr +
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8005000:	7abb      	ldrb	r3, [r7, #10]
 8005002:	461a      	mov	r2, r3
 8005004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005008:	4413      	add	r3, r2
 800500a:	6a3a      	ldr	r2, [r7, #32]
 800500c:	441a      	add	r2, r3
                feat_config[user_gain_config.start_addr +
 800500e:	7abb      	ldrb	r3, [r7, #10]
 8005010:	4619      	mov	r1, r3
 8005012:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005016:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8005018:	7812      	ldrb	r2, [r2, #0]
 800501a:	3328      	adds	r3, #40	@ 0x28
 800501c:	443b      	add	r3, r7
 800501e:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8005022:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005026:	3301      	adds	r3, #1
 8005028:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800502c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005030:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005034:	429a      	cmp	r2, r3
 8005036:	d3e3      	bcc.n	8005000 <set_gyro_user_gain_config+0x156>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8005038:	f107 010c 	add.w	r1, r7, #12
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2210      	movs	r2, #16
 8005040:	2030      	movs	r0, #48	@ 0x30
 8005042:	f7fe ff0a 	bl	8003e5a <bmi2_set_regs>
 8005046:	4603      	mov	r3, r0
 8005048:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800504c:	e002      	b.n	8005054 <set_gyro_user_gain_config+0x1aa>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800504e:	23f8      	movs	r3, #248	@ 0xf8
 8005050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8005054:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005058:	4618      	mov	r0, r3
 800505a:	3728      	adds	r7, #40	@ 0x28
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <set_aux_interface>:

/*!
 * @brief This internal API enables/disables auxiliary interface.
 */
static int8_t set_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 800506a:	f107 010e 	add.w	r1, r7, #14
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2201      	movs	r2, #1
 8005072:	206b      	movs	r0, #107	@ 0x6b
 8005074:	f7fe fe7e 	bl	8003d74 <bmi2_get_regs>
 8005078:	4603      	mov	r3, r0
 800507a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800507c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d119      	bne.n	80050b8 <set_aux_interface+0x58>
    {
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_IF_EN, config->aux_en);
 8005084:	7bbb      	ldrb	r3, [r7, #14]
 8005086:	b25b      	sxtb	r3, r3
 8005088:	f023 0320 	bic.w	r3, r3, #32
 800508c:	b25a      	sxtb	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b25b      	sxtb	r3, r3
 8005094:	015b      	lsls	r3, r3, #5
 8005096:	b25b      	sxtb	r3, r3
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	b25b      	sxtb	r3, r3
 800509e:	4313      	orrs	r3, r2
 80050a0:	b25b      	sxtb	r3, r3
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	73bb      	strb	r3, [r7, #14]

        /* Enable/Disable auxiliary interface */
        rslt = bmi2_set_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 80050a6:	f107 010e 	add.w	r1, r7, #14
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2201      	movs	r2, #1
 80050ae:	206b      	movs	r0, #107	@ 0x6b
 80050b0:	f7fe fed3 	bl	8003e5a <bmi2_set_regs>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80050b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <config_aux_interface>:
 *
 * @note Auxiliary sensor should not be busy when configuring aux_i2c_addr,
 * man_rd_burst_len, aux_rd_burst_len and aux_rd_addr.
 */
static int8_t config_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 80050ce:	2300      	movs	r3, #0
 80050d0:	81bb      	strh	r3, [r7, #12]

    /* Variable to store status */
    uint8_t status = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	72fb      	strb	r3, [r7, #11]

    /* Variable to define count */
    uint8_t count = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 80050da:	f107 010c 	add.w	r1, r7, #12
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2202      	movs	r2, #2
 80050e2:	204b      	movs	r0, #75	@ 0x4b
 80050e4:	f7fe fe46 	bl	8003d74 <bmi2_get_regs>
 80050e8:	4603      	mov	r3, r0
 80050ea:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80050ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f040 80a7 	bne.w	8005244 <config_aux_interface+0x180>
    {
        /* Set I2C address for AUX sensor */
        reg_data[0] = BMI2_SET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR, config->i2c_device_addr);
 80050f6:	7b3b      	ldrb	r3, [r7, #12]
 80050f8:	b25b      	sxtb	r3, r3
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	b25a      	sxtb	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	79db      	ldrb	r3, [r3, #7]
 8005104:	b25b      	sxtb	r3, r3
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	b25b      	sxtb	r3, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	b25b      	sxtb	r3, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	733b      	strb	r3, [r7, #12]

        /* Set the AUX IF to either manual or auto mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN, config->manual_en);
 8005112:	7b7b      	ldrb	r3, [r7, #13]
 8005114:	b25b      	sxtb	r3, r3
 8005116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800511a:	b25a      	sxtb	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	b25b      	sxtb	r3, r3
 8005122:	01db      	lsls	r3, r3, #7
 8005124:	b25b      	sxtb	r3, r3
 8005126:	4313      	orrs	r3, r2
 8005128:	b25b      	sxtb	r3, r3
 800512a:	b2db      	uxtb	r3, r3
 800512c:	737b      	strb	r3, [r7, #13]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN, config->fcu_write_en);
 800512e:	7b7b      	ldrb	r3, [r7, #13]
 8005130:	b25b      	sxtb	r3, r3
 8005132:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005136:	b25a      	sxtb	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	789b      	ldrb	r3, [r3, #2]
 800513c:	b25b      	sxtb	r3, r3
 800513e:	019b      	lsls	r3, r3, #6
 8005140:	b25b      	sxtb	r3, r3
 8005142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005146:	b25b      	sxtb	r3, r3
 8005148:	4313      	orrs	r3, r2
 800514a:	b25b      	sxtb	r3, r3
 800514c:	b2db      	uxtb	r3, r3
 800514e:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for manual mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST, config->man_rd_burst);
 8005150:	7b7b      	ldrb	r3, [r7, #13]
 8005152:	b25b      	sxtb	r3, r3
 8005154:	f023 030c 	bic.w	r3, r3, #12
 8005158:	b25a      	sxtb	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	78db      	ldrb	r3, [r3, #3]
 800515e:	b25b      	sxtb	r3, r3
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	b25b      	sxtb	r3, r3
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	b25b      	sxtb	r3, r3
 800516a:	4313      	orrs	r3, r2
 800516c:	b25b      	sxtb	r3, r3
 800516e:	b2db      	uxtb	r3, r3
 8005170:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for data mode */
        reg_data[1] = BMI2_SET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST, config->aux_rd_burst);
 8005172:	7b7b      	ldrb	r3, [r7, #13]
 8005174:	b25b      	sxtb	r3, r3
 8005176:	f023 0303 	bic.w	r3, r3, #3
 800517a:	b25a      	sxtb	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	791b      	ldrb	r3, [r3, #4]
 8005180:	b25b      	sxtb	r3, r3
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	b25b      	sxtb	r3, r3
 8005188:	4313      	orrs	r3, r2
 800518a:	b25b      	sxtb	r3, r3
 800518c:	b2db      	uxtb	r3, r3
 800518e:	737b      	strb	r3, [r7, #13]
        for (;;)
        {
            /* Check if auxiliary sensor is busy */
            rslt = bmi2_get_status(&status, dev);
 8005190:	f107 030b 	add.w	r3, r7, #11
 8005194:	6839      	ldr	r1, [r7, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff fabb 	bl	8004712 <bmi2_get_status>
 800519c:	4603      	mov	r3, r0
 800519e:	73fb      	strb	r3, [r7, #15]
            if ((rslt == BMI2_OK) && (!(status & BMI2_AUX_BUSY)))
 80051a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d13b      	bne.n	8005220 <config_aux_interface+0x15c>
 80051a8:	7afb      	ldrb	r3, [r7, #11]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d136      	bne.n	8005220 <config_aux_interface+0x15c>
            {
                /* Set the configurations if AUX is not busy */
                rslt = bmi2_set_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 80051b2:	f107 010c 	add.w	r1, r7, #12
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2202      	movs	r2, #2
 80051ba:	204b      	movs	r0, #75	@ 0x4b
 80051bc:	f7fe fe4d 	bl	8003e5a <bmi2_set_regs>
 80051c0:	4603      	mov	r3, r0
 80051c2:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(1000, dev->intf_ptr);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	6852      	ldr	r2, [r2, #4]
 80051cc:	4611      	mov	r1, r2
 80051ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80051d2:	4798      	blx	r3
                if (rslt == BMI2_OK)
 80051d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d132      	bne.n	8005242 <config_aux_interface+0x17e>
                {
                    /* If data mode */
                    if (!config->manual_en)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d115      	bne.n	8005210 <config_aux_interface+0x14c>
                    {
                        /* Disable manual enable flag in device structure */
                        dev->aux_man_en = 0;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2200      	movs	r2, #0
 80051e8:	76da      	strb	r2, [r3, #27]

                        /* Set the read address of the AUX sensor */
                        rslt = bmi2_set_regs(BMI2_AUX_RD_ADDR, (uint8_t *) &config->read_addr, 1, dev);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f103 0108 	add.w	r1, r3, #8
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2201      	movs	r2, #1
 80051f4:	204d      	movs	r0, #77	@ 0x4d
 80051f6:	f7fe fe30 	bl	8003e5a <bmi2_set_regs>
 80051fa:	4603      	mov	r3, r0
 80051fc:	73fb      	strb	r3, [r7, #15]
                        dev->delay_us(1000, dev->intf_ptr);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	6852      	ldr	r2, [r2, #4]
 8005206:	4611      	mov	r1, r2
 8005208:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800520c:	4798      	blx	r3
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
                    }
                }

                /* Break after setting the register */
                break;
 800520e:	e018      	b.n	8005242 <config_aux_interface+0x17e>
                        dev->aux_man_en = 1;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2201      	movs	r2, #1
 8005214:	76da      	strb	r2, [r3, #27]
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	78da      	ldrb	r2, [r3, #3]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	771a      	strb	r2, [r3, #28]
                break;
 800521e:	e010      	b.n	8005242 <config_aux_interface+0x17e>
            }

            /* Increment count after every 10 seconds */
            dev->delay_us(10000, dev->intf_ptr);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	6852      	ldr	r2, [r2, #4]
 8005228:	4611      	mov	r1, r2
 800522a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800522e:	4798      	blx	r3
            count++;
 8005230:	7bbb      	ldrb	r3, [r7, #14]
 8005232:	3301      	adds	r3, #1
 8005234:	73bb      	strb	r3, [r7, #14]

            /* Break after 2 seconds if AUX still busy - since slowest ODR is 0.78Hz*/
            if (count > 20)
 8005236:	7bbb      	ldrb	r3, [r7, #14]
 8005238:	2b14      	cmp	r3, #20
 800523a:	d9a9      	bls.n	8005190 <config_aux_interface+0xcc>
            {
                rslt = BMI2_E_AUX_BUSY;
 800523c:	23f1      	movs	r3, #241	@ 0xf1
 800523e:	73fb      	strb	r3, [r7, #15]
                break;
 8005240:	e000      	b.n	8005244 <config_aux_interface+0x180>
                break;
 8005242:	bf00      	nop
            }
        }
    }

    return rslt;
 8005244:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <config_aux>:
/*!
 * @brief This internal API triggers read out offset and sets ODR of the
 * auxiliary sensor.
 */
static int8_t config_aux(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 800525a:	f107 010e 	add.w	r1, r7, #14
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2201      	movs	r2, #1
 8005262:	2044      	movs	r0, #68	@ 0x44
 8005264:	f7fe fd86 	bl	8003d74 <bmi2_get_regs>
 8005268:	4603      	mov	r3, r0
 800526a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800526c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d12d      	bne.n	80052d0 <config_aux+0x80>
    {
        /* Trigger read out offset */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT, config->offset);
 8005274:	7bbb      	ldrb	r3, [r7, #14]
 8005276:	b25b      	sxtb	r3, r3
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	b25a      	sxtb	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	799b      	ldrb	r3, [r3, #6]
 8005282:	b25b      	sxtb	r3, r3
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	b25b      	sxtb	r3, r3
 8005288:	4313      	orrs	r3, r2
 800528a:	b25b      	sxtb	r3, r3
 800528c:	b2db      	uxtb	r3, r3
 800528e:	73bb      	strb	r3, [r7, #14]

        /* Set ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN, config->odr);
 8005290:	7bbb      	ldrb	r3, [r7, #14]
 8005292:	b25b      	sxtb	r3, r3
 8005294:	f023 030f 	bic.w	r3, r3, #15
 8005298:	b25a      	sxtb	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	795b      	ldrb	r3, [r3, #5]
 800529e:	b25b      	sxtb	r3, r3
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	b25b      	sxtb	r3, r3
 80052a6:	4313      	orrs	r3, r2
 80052a8:	b25b      	sxtb	r3, r3
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	73bb      	strb	r3, [r7, #14]

        /* Set auxiliary configuration register */
        rslt = bmi2_set_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 80052ae:	f107 010e 	add.w	r1, r7, #14
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2201      	movs	r2, #1
 80052b6:	2044      	movs	r0, #68	@ 0x44
 80052b8:	f7fe fdcf 	bl	8003e5a <bmi2_set_regs>
 80052bc:	4603      	mov	r3, r0
 80052be:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(1000, dev->intf_ptr);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	6852      	ldr	r2, [r2, #4]
 80052c8:	4611      	mov	r1, r2
 80052ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052ce:	4798      	blx	r3
    }

    return rslt;
 80052d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <validate_aux_config>:

/*!
 * @brief This internal API validates auxiliary configuration set by the user.
 */
static int8_t validate_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate ODR for auxiliary sensor */
    rslt = check_boundary_val(&config->odr, BMI2_AUX_ODR_0_78HZ, BMI2_AUX_ODR_800HZ, dev);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	1d58      	adds	r0, r3, #5
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	220b      	movs	r2, #11
 80052ee:	2101      	movs	r1, #1
 80052f0:	f000 fa82 	bl	80057f8 <check_boundary_val>
 80052f4:	4603      	mov	r3, r0
 80052f6:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80052f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t get_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 800530e:	2300      	movs	r3, #0
 8005310:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005312:	6838      	ldr	r0, [r7, #0]
 8005314:	f000 fba4 	bl	8005a60 <null_ptr_check>
 8005318:	4603      	mov	r3, r0
 800531a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 800531c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d129      	bne.n	8005378 <get_accel_config+0x74>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d026      	beq.n	8005378 <get_accel_config+0x74>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 800532a:	f107 010c 	add.w	r1, r7, #12
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2202      	movs	r2, #2
 8005332:	2040      	movs	r0, #64	@ 0x40
 8005334:	f7fe fd1e 	bl	8003d74 <bmi2_get_regs>
 8005338:	4603      	mov	r3, r0
 800533a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800533c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d11b      	bne.n	800537c <get_accel_config+0x78>
        {
            /* Get accelerometer performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE);
 8005344:	7b3b      	ldrb	r3, [r7, #12]
 8005346:	09db      	lsrs	r3, r3, #7
 8005348:	b2da      	uxtb	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	709a      	strb	r2, [r3, #2]

            /* Get accelerometer bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_ACC_BW_PARAM);
 800534e:	7b3b      	ldrb	r3, [r7, #12]
 8005350:	111b      	asrs	r3, r3, #4
 8005352:	b2db      	uxtb	r3, r3
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	b2da      	uxtb	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	705a      	strb	r2, [r3, #1]

            /* Get accelerometer ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_ACC_ODR);
 800535e:	7b3b      	ldrb	r3, [r7, #12]
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	b2da      	uxtb	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_ACC_RANGE);
 800536a:	7b7b      	ldrb	r3, [r7, #13]
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	b2da      	uxtb	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	70da      	strb	r2, [r3, #3]
        if (rslt == BMI2_OK)
 8005376:	e001      	b.n	800537c <get_accel_config+0x78>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005378:	23ff      	movs	r3, #255	@ 0xff
 800537a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800537c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range.
 */
static int8_t get_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8005392:	2300      	movs	r3, #0
 8005394:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005396:	6838      	ldr	r0, [r7, #0]
 8005398:	f000 fb62 	bl	8005a60 <null_ptr_check>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 80053a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d139      	bne.n	800541c <get_gyro_config+0x94>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d036      	beq.n	800541c <get_gyro_config+0x94>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 80053ae:	f107 010c 	add.w	r1, r7, #12
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2202      	movs	r2, #2
 80053b6:	2042      	movs	r0, #66	@ 0x42
 80053b8:	f7fe fcdc 	bl	8003d74 <bmi2_get_regs>
 80053bc:	4603      	mov	r3, r0
 80053be:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80053c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d12b      	bne.n	8005420 <get_gyro_config+0x98>
        {
            /* Get gyroscope performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE);
 80053c8:	7b3b      	ldrb	r3, [r7, #12]
 80053ca:	09db      	lsrs	r3, r3, #7
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	709a      	strb	r2, [r3, #2]

            /* Get gyroscope noise performance mode */
            config->noise_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_NOISE_PERF_MODE);
 80053d2:	7b3b      	ldrb	r3, [r7, #12]
 80053d4:	119b      	asrs	r3, r3, #6
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	715a      	strb	r2, [r3, #5]

            /* Get gyroscope bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_GYR_BW_PARAM);
 80053e2:	7b3b      	ldrb	r3, [r7, #12]
 80053e4:	111b      	asrs	r3, r3, #4
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	705a      	strb	r2, [r3, #1]

            /* Get gyroscope ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_GYR_ODR);
 80053f2:	7b3b      	ldrb	r3, [r7, #12]
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	701a      	strb	r2, [r3, #0]

            /* Get gyroscope OIS range */
            config->ois_range = BMI2_GET_BITS(data_array[1], BMI2_GYR_OIS_RANGE);
 80053fe:	7b7b      	ldrb	r3, [r7, #13]
 8005400:	10db      	asrs	r3, r3, #3
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	b2da      	uxtb	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	70da      	strb	r2, [r3, #3]

            /* Get gyroscope range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_GYR_RANGE);
 800540e:	7b7b      	ldrb	r3, [r7, #13]
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	b2da      	uxtb	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	711a      	strb	r2, [r3, #4]
        if (rslt == BMI2_OK)
 800541a:	e001      	b.n	8005420 <get_gyro_config+0x98>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800541c:	23ff      	movs	r3, #255	@ 0xff
 800541e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005420:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <get_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3) Gets ODR and offset.
 */
static int8_t get_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005436:	6838      	ldr	r0, [r7, #0]
 8005438:	f000 fb12 	bl	8005a60 <null_ptr_check>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 8005440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11d      	bne.n	8005484 <get_aux_config+0x58>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01a      	beq.n	8005484 <get_aux_config+0x58>
    {
        /* Get enable status of auxiliary interface */
        rslt = get_aux_interface(config, dev);
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8c0 	bl	80055d6 <get_aux_interface>
 8005456:	4603      	mov	r3, r0
 8005458:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800545a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d113      	bne.n	800548a <get_aux_config+0x5e>
        {
            /* Get the auxiliary interface configurations */
            rslt = get_aux_interface_config(config, dev);
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f8d6 	bl	8005616 <get_aux_interface_config>
 800546a:	4603      	mov	r3, r0
 800546c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 800546e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d109      	bne.n	800548a <get_aux_config+0x5e>
            {
                /* Get read out offset and ODR */
                rslt = get_aux_cfg(config, dev);
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f914 	bl	80056a6 <get_aux_cfg>
 800547e:	4603      	mov	r3, r0
 8005480:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8005482:	e002      	b.n	800548a <get_aux_config+0x5e>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005484:	23ff      	movs	r3, #255	@ 0xff
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	e000      	b.n	800548c <get_aux_config+0x60>
        if (rslt == BMI2_OK)
 800548a:	bf00      	nop
    }

    return rslt;
 800548c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <get_gyro_gain_update_config>:
/*!
 * @brief This internal API gets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t get_gyro_gain_update_config(struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	@ 0x28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80054a2:	f107 030c 	add.w	r3, r7, #12
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	609a      	str	r2, [r3, #8]
 80054ae:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 80054c2:	2300      	movs	r3, #0
 80054c4:	723b      	strb	r3, [r7, #8]
 80054c6:	2300      	movs	r3, #0
 80054c8:	727b      	strb	r3, [r7, #9]
 80054ca:	2300      	movs	r3, #0
 80054cc:	72bb      	strb	r3, [r7, #10]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	2109      	movs	r1, #9
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff fa89 	bl	80049ee <bmi2_extract_input_feat_config>
 80054dc:	4603      	mov	r3, r0
 80054de:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80054e0:	7ffb      	ldrb	r3, [r7, #31]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d06e      	beq.n	80055c4 <get_gyro_gain_update_config+0x12c>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 80054e6:	7a7b      	ldrb	r3, [r7, #9]
 80054e8:	f107 010c 	add.w	r1, r7, #12
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff f9eb 	bl	80048ca <bmi2_get_feat_config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80054fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d163      	bne.n	80055ca <get_gyro_gain_update_config+0x132>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 8005502:	7abb      	ldrb	r3, [r7, #10]
 8005504:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate ratio_x */
            lsb = (uint16_t) feat_config[idx++];
 8005508:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8005512:	3328      	adds	r3, #40	@ 0x28
 8005514:	443b      	add	r3, r7
 8005516:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800551a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 800551c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8005526:	3328      	adds	r3, #40	@ 0x28
 8005528:	443b      	add	r3, r7
 800552a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8005532:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005534:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005536:	4313      	orrs	r3, r2
 8005538:	843b      	strh	r3, [r7, #32]

            /* Get ratio_x */
            config->ratio_x = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_X_MASK;
 800553a:	8c3b      	ldrh	r3, [r7, #32]
 800553c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	801a      	strh	r2, [r3, #0]

            /* Get word to calculate ratio_y */
            lsb = (uint16_t) feat_config[idx++];
 8005546:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8005550:	3328      	adds	r3, #40	@ 0x28
 8005552:	443b      	add	r3, r7
 8005554:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005558:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 800555a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8005564:	3328      	adds	r3, #40	@ 0x28
 8005566:	443b      	add	r3, r7
 8005568:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8005570:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005572:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005574:	4313      	orrs	r3, r2
 8005576:	843b      	strh	r3, [r7, #32]

            /* Get ratio_y */
            config->ratio_y = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Y_MASK;
 8005578:	8c3b      	ldrh	r3, [r7, #32]
 800557a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800557e:	b29a      	uxth	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	805a      	strh	r2, [r3, #2]

            /* Get word to calculate ratio_z */
            lsb = (uint16_t) feat_config[idx++];
 8005584:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800558e:	3328      	adds	r3, #40	@ 0x28
 8005590:	443b      	add	r3, r7
 8005592:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005596:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8005598:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80055a2:	3328      	adds	r3, #40	@ 0x28
 80055a4:	443b      	add	r3, r7
 80055a6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 80055ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80055b2:	4313      	orrs	r3, r2
 80055b4:	843b      	strh	r3, [r7, #32]

            /* Get ratio_z */
            config->ratio_z = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Z_MASK;
 80055b6:	8c3b      	ldrh	r3, [r7, #32]
 80055b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055bc:	b29a      	uxth	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	809a      	strh	r2, [r3, #4]
 80055c2:	e002      	b.n	80055ca <get_gyro_gain_update_config+0x132>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80055c4:	23f8      	movs	r3, #248	@ 0xf8
 80055c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80055ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3728      	adds	r7, #40	@ 0x28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <get_aux_interface>:

/*!
 * @brief This internal API gets the enable status of auxiliary interface.
 */
static int8_t get_aux_interface(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get the enable status of auxiliary interface */
    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 80055e0:	f107 010e 	add.w	r1, r7, #14
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	206b      	movs	r0, #107	@ 0x6b
 80055ea:	f7fe fbc3 	bl	8003d74 <bmi2_get_regs>
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80055f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d107      	bne.n	800560a <get_aux_interface+0x34>
    {
        config->aux_en = BMI2_GET_BITS(reg_data, BMI2_AUX_IF_EN);
 80055fa:	7bbb      	ldrb	r3, [r7, #14]
 80055fc:	115b      	asrs	r3, r3, #5
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	b2da      	uxtb	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800560a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <get_aux_interface_config>:
/*!
 * @brief This internal API gets auxiliary configurations like manual/auto mode
 * FCU write command enable and read burst length for both data and manual mode.
 */
static int8_t get_aux_interface_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8005620:	2300      	movs	r3, #0
 8005622:	81bb      	strh	r3, [r7, #12]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 8005624:	f107 010c 	add.w	r1, r7, #12
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2202      	movs	r2, #2
 800562c:	204b      	movs	r0, #75	@ 0x4b
 800562e:	f7fe fba1 	bl	8003d74 <bmi2_get_regs>
 8005632:	4603      	mov	r3, r0
 8005634:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8005636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d12d      	bne.n	800569a <get_aux_interface_config+0x84>
    {
        /* Get I2C address for auxiliary sensor */
        config->i2c_device_addr = BMI2_GET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR);
 800563e:	7b3b      	ldrb	r3, [r7, #12]
 8005640:	085b      	lsrs	r3, r3, #1
 8005642:	b2da      	uxtb	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	71da      	strb	r2, [r3, #7]

        /* Get the AUX IF to either manual or auto mode */
        config->manual_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN);
 8005648:	7b7b      	ldrb	r3, [r7, #13]
 800564a:	09db      	lsrs	r3, r3, #7
 800564c:	b2da      	uxtb	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	705a      	strb	r2, [r3, #1]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        config->fcu_write_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN);
 8005652:	7b7b      	ldrb	r3, [r7, #13]
 8005654:	119b      	asrs	r3, r3, #6
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	b2da      	uxtb	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	709a      	strb	r2, [r3, #2]

        /* Get the burst read length for manual mode */
        config->man_rd_burst = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST);
 8005662:	7b7b      	ldrb	r3, [r7, #13]
 8005664:	109b      	asrs	r3, r3, #2
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	b2da      	uxtb	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	70da      	strb	r2, [r3, #3]

        /* Get the burst read length for data mode */
        config->aux_rd_burst = BMI2_GET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST);
 8005672:	7b7b      	ldrb	r3, [r7, #13]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	b2da      	uxtb	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	711a      	strb	r2, [r3, #4]

        /* If data mode, get the read address of the auxiliary sensor from where data is to be read */
        if (!config->manual_en)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <get_aux_interface_config+0x84>
        {
            rslt = bmi2_get_regs(BMI2_AUX_RD_ADDR, &config->read_addr, 1, dev);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f103 0108 	add.w	r1, r3, #8
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2201      	movs	r2, #1
 8005690:	204d      	movs	r0, #77	@ 0x4d
 8005692:	f7fe fb6f 	bl	8003d74 <bmi2_get_regs>
 8005696:	4603      	mov	r3, r0
 8005698:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800569a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <get_aux_cfg>:
/*!
 * @brief This internal API gets read out offset and ODR of the auxiliary
 * sensor.
 */
static int8_t get_aux_cfg(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 80056b0:	f107 010e 	add.w	r1, r7, #14
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	2044      	movs	r0, #68	@ 0x44
 80056ba:	f7fe fb5b 	bl	8003d74 <bmi2_get_regs>
 80056be:	4603      	mov	r3, r0
 80056c0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80056c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <get_aux_cfg+0x3a>
    {
        /* Get read out offset */
        config->offset = BMI2_GET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT);
 80056ca:	7bbb      	ldrb	r3, [r7, #14]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	719a      	strb	r2, [r3, #6]

        /* Get ODR */
        config->odr = BMI2_GET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN);
 80056d4:	7bbb      	ldrb	r3, [r7, #14]
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	715a      	strb	r2, [r3, #5]
    }

    return rslt;
 80056e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <map_feat_int>:
/*!
 * @brief This internal API maps/un-maps feature interrupts to that of interrupt
 * pins.
 */
static int8_t map_feat_int(uint8_t *reg_data_array, enum bmi2_hw_int_pin int_pin, uint8_t int_mask)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
 80056f8:	4613      	mov	r3, r2
 80056fa:	70bb      	strb	r3, [r7, #2]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	73fb      	strb	r3, [r7, #15]

    /* Check for NULL error */
    if (reg_data_array != NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d06b      	beq.n	80057de <map_feat_int+0xf2>
    {
        /* Check validity on interrupt pin selection */
        if (int_pin < BMI2_INT_PIN_MAX)
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	2b03      	cmp	r3, #3
 800570a:	d865      	bhi.n	80057d8 <map_feat_int+0xec>
        {
            switch (int_pin)
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d868      	bhi.n	80057e4 <map_feat_int+0xf8>
 8005712:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <map_feat_int+0x2c>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	08005729 	.word	0x08005729
 800571c:	0800575f 	.word	0x0800575f
 8005720:	0800578b 	.word	0x0800578b
 8005724:	080057b7 	.word	0x080057b7
            {
                case BMI2_INT_NONE:

                    /* Un-Map the corresponding feature interrupt to interrupt pin 1 and 2 */
                    reg_data_array[0] &= ~(int_mask);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b25a      	sxtb	r2, r3
 800572e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005732:	43db      	mvns	r3, r3
 8005734:	b25b      	sxtb	r3, r3
 8005736:	4013      	ands	r3, r2
 8005738:	b25b      	sxtb	r3, r3
 800573a:	b2da      	uxtb	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	701a      	strb	r2, [r3, #0]
                    reg_data_array[1] &= ~(int_mask);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3301      	adds	r3, #1
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	b25a      	sxtb	r2, r3
 8005748:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800574c:	43db      	mvns	r3, r3
 800574e:	b25b      	sxtb	r3, r3
 8005750:	4013      	ands	r3, r2
 8005752:	b25a      	sxtb	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3301      	adds	r3, #1
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	701a      	strb	r2, [r3, #0]
                    break;
 800575c:	e043      	b.n	80057e6 <map_feat_int+0xfa>
                case BMI2_INT1:

                    /* Map the corresponding feature interrupt to interrupt pin 1 */
                    reg_data_array[0] |= int_mask;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	781a      	ldrb	r2, [r3, #0]
 8005762:	78bb      	ldrb	r3, [r7, #2]
 8005764:	4313      	orrs	r3, r2
 8005766:	b2da      	uxtb	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	701a      	strb	r2, [r3, #0]

                    /* Un-map the corresponding feature interrupt to interrupt pin 2 */
                    reg_data_array[1] &= ~(int_mask);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3301      	adds	r3, #1
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	b25a      	sxtb	r2, r3
 8005774:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005778:	43db      	mvns	r3, r3
 800577a:	b25b      	sxtb	r3, r3
 800577c:	4013      	ands	r3, r2
 800577e:	b25a      	sxtb	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3301      	adds	r3, #1
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]
                    break;
 8005788:	e02d      	b.n	80057e6 <map_feat_int+0xfa>
                case BMI2_INT2:

                    /* Map the corresponding feature interrupt to interrupt pin 2 */
                    reg_data_array[1] |= int_mask;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3301      	adds	r3, #1
 800578e:	7819      	ldrb	r1, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3301      	adds	r3, #1
 8005794:	78ba      	ldrb	r2, [r7, #2]
 8005796:	430a      	orrs	r2, r1
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]

                    /* Un-map the corresponding feature interrupt to interrupt pin 1 */
                    reg_data_array[0] &= ~(int_mask);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	b25a      	sxtb	r2, r3
 80057a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057a6:	43db      	mvns	r3, r3
 80057a8:	b25b      	sxtb	r3, r3
 80057aa:	4013      	ands	r3, r2
 80057ac:	b25b      	sxtb	r3, r3
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	701a      	strb	r2, [r3, #0]
                    break;
 80057b4:	e017      	b.n	80057e6 <map_feat_int+0xfa>
                case BMI2_INT_BOTH:

                    /* Map the corresponding feature interrupt to interrupt pin 1 and 2 */
                    reg_data_array[0] |= int_mask;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	78bb      	ldrb	r3, [r7, #2]
 80057bc:	4313      	orrs	r3, r2
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	701a      	strb	r2, [r3, #0]
                    reg_data_array[1] |= int_mask;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3301      	adds	r3, #1
 80057c8:	7819      	ldrb	r1, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3301      	adds	r3, #1
 80057ce:	78ba      	ldrb	r2, [r7, #2]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]
                    break;
 80057d6:	e006      	b.n	80057e6 <map_feat_int+0xfa>
            }
        }
        else
        {
            /* Return error if invalid pin selection */
            rslt = BMI2_E_INVALID_INT_PIN;
 80057d8:	23f4      	movs	r3, #244	@ 0xf4
 80057da:	73fb      	strb	r3, [r7, #15]
 80057dc:	e003      	b.n	80057e6 <map_feat_int+0xfa>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80057de:	23ff      	movs	r3, #255	@ 0xff
 80057e0:	73fb      	strb	r3, [r7, #15]
 80057e2:	e000      	b.n	80057e6 <map_feat_int+0xfa>
                    break;
 80057e4:	bf00      	nop
    }

    return rslt;
 80057e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop

080057f8 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi2_dev *dev)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	607b      	str	r3, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	72fb      	strb	r3, [r7, #11]
 8005806:	4613      	mov	r3, r2
 8005808:	72bb      	strb	r3, [r7, #10]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	75fb      	strb	r3, [r7, #23]

    if (val != NULL)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01e      	beq.n	8005852 <check_boundary_val+0x5a>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	7afa      	ldrb	r2, [r7, #11]
 800581a:	429a      	cmp	r2, r3
 800581c:	d909      	bls.n	8005832 <check_boundary_val+0x3a>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	7afa      	ldrb	r2, [r7, #11]
 8005822:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MIN_VALUE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	7a1b      	ldrb	r3, [r3, #8]
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	b2da      	uxtb	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	7aba      	ldrb	r2, [r7, #10]
 8005838:	429a      	cmp	r2, r3
 800583a:	d20c      	bcs.n	8005856 <check_boundary_val+0x5e>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	7aba      	ldrb	r2, [r7, #10]
 8005840:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MAX_VALUE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	7a1b      	ldrb	r3, [r3, #8]
 8005846:	f043 0302 	orr.w	r3, r3, #2
 800584a:	b2da      	uxtb	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	721a      	strb	r2, [r3, #8]
 8005850:	e001      	b.n	8005856 <check_boundary_val+0x5e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005852:	23ff      	movs	r3, #255	@ 0xff
 8005854:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800585a:	4618      	mov	r0, r3
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t set_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
    uint8_t reg_data;

    /* Array to store the default value of accelerometer configuration
     * reserved registers
     */
    uint8_t data_array[2] = { 0 };
 8005870:	2300      	movs	r3, #0
 8005872:	81bb      	strh	r3, [r7, #12]

    /* Validate bandwidth and performance mode */
    rslt = validate_bw_perf_mode(&config->bwp, &config->filter_perf, dev);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	1c58      	adds	r0, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3302      	adds	r3, #2
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	4619      	mov	r1, r3
 8005880:	f7ff fa08 	bl	8004c94 <validate_bw_perf_mode>
 8005884:	4603      	mov	r3, r0
 8005886:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8005888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d15b      	bne.n	8005948 <set_accel_config+0xe2>
    {
        /* Validate ODR and range */
        rslt = validate_odr_range(&config->odr, &config->range, dev);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3303      	adds	r3, #3
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	4619      	mov	r1, r3
 800589a:	f7ff fa28 	bl	8004cee <validate_odr_range>
 800589e:	4603      	mov	r3, r0
 80058a0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80058a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d14e      	bne.n	8005948 <set_accel_config+0xe2>
        {
            /* Set accelerometer performance mode */
            reg_data = BMI2_SET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE, config->filter_perf);
 80058aa:	7b3b      	ldrb	r3, [r7, #12]
 80058ac:	b25b      	sxtb	r3, r3
 80058ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058b2:	b25a      	sxtb	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	789b      	ldrb	r3, [r3, #2]
 80058b8:	b25b      	sxtb	r3, r3
 80058ba:	01db      	lsls	r3, r3, #7
 80058bc:	b25b      	sxtb	r3, r3
 80058be:	4313      	orrs	r3, r2
 80058c0:	b25b      	sxtb	r3, r3
 80058c2:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer bandwidth */
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_BW_PARAM, config->bwp);
 80058c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058cc:	b25a      	sxtb	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	b25b      	sxtb	r3, r3
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	b25b      	sxtb	r3, r3
 80058d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058dc:	b25b      	sxtb	r3, r3
 80058de:	4313      	orrs	r3, r2
 80058e0:	b25b      	sxtb	r3, r3
 80058e2:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer ODR */
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ACC_ODR, config->odr);
 80058e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058e8:	f023 030f 	bic.w	r3, r3, #15
 80058ec:	b25a      	sxtb	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	b25b      	sxtb	r3, r3
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	b25b      	sxtb	r3, r3
 80058fa:	4313      	orrs	r3, r2
 80058fc:	b25b      	sxtb	r3, r3
 80058fe:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[0] = reg_data;
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	733b      	strb	r3, [r7, #12]

            /* Set accelerometer range */
            reg_data = BMI2_SET_BIT_POS0(data_array[1], BMI2_ACC_RANGE, config->range);
 8005904:	7b7b      	ldrb	r3, [r7, #13]
 8005906:	b25b      	sxtb	r3, r3
 8005908:	f023 0303 	bic.w	r3, r3, #3
 800590c:	b25a      	sxtb	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	78db      	ldrb	r3, [r3, #3]
 8005912:	b25b      	sxtb	r3, r3
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	b25b      	sxtb	r3, r3
 800591a:	4313      	orrs	r3, r2
 800591c:	b25b      	sxtb	r3, r3
 800591e:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[1] = reg_data;
 8005920:	7bbb      	ldrb	r3, [r7, #14]
 8005922:	737b      	strb	r3, [r7, #13]

            /* Write accelerometer configuration to ACC_CONFand
             * ACC_RANGE registers simultaneously as they lie in consecutive places
             */
            rslt = bmi2_set_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 8005924:	f107 010c 	add.w	r1, r7, #12
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2202      	movs	r2, #2
 800592c:	2040      	movs	r0, #64	@ 0x40
 800592e:	f7fe fa94 	bl	8003e5a <bmi2_set_regs>
 8005932:	4603      	mov	r3, r0
 8005934:	73fb      	strb	r3, [r7, #15]

            /* Get error status to check for invalid configurations */
            if (rslt == BMI2_OK)
 8005936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <set_accel_config+0xe2>
            {
                rslt = cfg_error_status(dev);
 800593e:	6838      	ldr	r0, [r7, #0]
 8005940:	f7ff fa4a 	bl	8004dd8 <cfg_error_status>
 8005944:	4603      	mov	r3, r0
 8005946:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8005948:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <set_gyro_config>:
 * @brief This internal API sets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range. It also
 * maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Array to store the default value of gyroscope configuration reserved registers  */
    uint8_t data_array[2] = { 0 };
 800595e:	2300      	movs	r3, #0
 8005960:	81bb      	strh	r3, [r7, #12]

    /* Validate gyroscope configurations */
    rslt = validate_gyro_config(config, dev);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff f9e2 	bl	8004d2e <validate_gyro_config>
 800596a:	4603      	mov	r3, r0
 800596c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800596e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d16e      	bne.n	8005a54 <set_gyro_config+0x100>
    {
        /* Set gyroscope performance mode */
        reg_data = BMI2_SET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE, config->filter_perf);
 8005976:	7b3b      	ldrb	r3, [r7, #12]
 8005978:	b25b      	sxtb	r3, r3
 800597a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800597e:	b25a      	sxtb	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	789b      	ldrb	r3, [r3, #2]
 8005984:	b25b      	sxtb	r3, r3
 8005986:	01db      	lsls	r3, r3, #7
 8005988:	b25b      	sxtb	r3, r3
 800598a:	4313      	orrs	r3, r2
 800598c:	b25b      	sxtb	r3, r3
 800598e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope noise performance mode */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_NOISE_PERF_MODE, config->noise_perf);
 8005990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005998:	b25a      	sxtb	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	795b      	ldrb	r3, [r3, #5]
 800599e:	b25b      	sxtb	r3, r3
 80059a0:	019b      	lsls	r3, r3, #6
 80059a2:	b25b      	sxtb	r3, r3
 80059a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a8:	b25b      	sxtb	r3, r3
 80059aa:	4313      	orrs	r3, r2
 80059ac:	b25b      	sxtb	r3, r3
 80059ae:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope bandwidth */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_BW_PARAM, config->bwp);
 80059b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059b4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80059b8:	b25a      	sxtb	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	b25b      	sxtb	r3, r3
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	b25b      	sxtb	r3, r3
 80059c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059c8:	b25b      	sxtb	r3, r3
 80059ca:	4313      	orrs	r3, r2
 80059cc:	b25b      	sxtb	r3, r3
 80059ce:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_ODR, config->odr);
 80059d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059d4:	f023 030f 	bic.w	r3, r3, #15
 80059d8:	b25a      	sxtb	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b25b      	sxtb	r3, r3
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	b25b      	sxtb	r3, r3
 80059e6:	4313      	orrs	r3, r2
 80059e8:	b25b      	sxtb	r3, r3
 80059ea:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[0] = reg_data;
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	733b      	strb	r3, [r7, #12]

        /* Set gyroscope OIS range */
        reg_data = BMI2_SET_BITS(data_array[1], BMI2_GYR_OIS_RANGE, config->ois_range);
 80059f0:	7b7b      	ldrb	r3, [r7, #13]
 80059f2:	b25b      	sxtb	r3, r3
 80059f4:	f023 0308 	bic.w	r3, r3, #8
 80059f8:	b25a      	sxtb	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	78db      	ldrb	r3, [r3, #3]
 80059fe:	b25b      	sxtb	r3, r3
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	b25b      	sxtb	r3, r3
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	b25b      	sxtb	r3, r3
 8005a0e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope range */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_RANGE, config->range);
 8005a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a14:	f023 0307 	bic.w	r3, r3, #7
 8005a18:	b25a      	sxtb	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	791b      	ldrb	r3, [r3, #4]
 8005a1e:	b25b      	sxtb	r3, r3
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	b25b      	sxtb	r3, r3
 8005a26:	4313      	orrs	r3, r2
 8005a28:	b25b      	sxtb	r3, r3
 8005a2a:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[1] = reg_data;
 8005a2c:	7bbb      	ldrb	r3, [r7, #14]
 8005a2e:	737b      	strb	r3, [r7, #13]

        /* Write accelerometer configuration to GYR_CONF and GYR_RANGE
         * registers simultaneously as they lie in consecutive places
         */
        rslt = bmi2_set_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 8005a30:	f107 010c 	add.w	r1, r7, #12
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2202      	movs	r2, #2
 8005a38:	2042      	movs	r0, #66	@ 0x42
 8005a3a:	f7fe fa0e 	bl	8003e5a <bmi2_set_regs>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	73fb      	strb	r3, [r7, #15]

        /* Get error status to check for invalid configurations */
        if (rslt == BMI2_OK)
 8005a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d104      	bne.n	8005a54 <set_gyro_config+0x100>
        {
            rslt = cfg_error_status(dev);
 8005a4a:	6838      	ldr	r0, [r7, #0]
 8005a4c:	f7ff f9c4 	bl	8004dd8 <cfg_error_status>
 8005a50:	4603      	mov	r3, r0
 8005a52:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI2_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <null_ptr_check+0x2a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <null_ptr_check+0x2a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <null_ptr_check+0x2a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 8005a8a:	23ff      	movs	r3, #255	@ 0xff
 8005a8c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <extract_feat_int_map>:

/*!
 *@brief This internal API is used to map the interrupts to the sensor.
 */
static void extract_feat_int_map(struct bmi2_map_int *map_int, uint8_t type, const struct bmi2_dev *dev)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b087      	sub	sp, #28
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	75fb      	strb	r3, [r7, #23]

    /* Search for the interrupts from the input configuration array */
    while (loop < dev->sens_int_map)
 8005ab0:	e014      	b.n	8005adc <extract_feat_int_map+0x3e>
    {
        if (dev->map_int[loop].type == type)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	7afa      	ldrb	r2, [r7, #11]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d108      	bne.n	8005ad6 <extract_feat_int_map+0x38>
        {
            *map_int = dev->map_int[loop];
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	4413      	add	r3, r2
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	8013      	strh	r3, [r2, #0]
            break;
 8005ad4:	e009      	b.n	8005aea <extract_feat_int_map+0x4c>
        }

        loop++;
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->sens_int_map)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005ae2:	7dfa      	ldrb	r2, [r7, #23]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d3e4      	bcc.n	8005ab2 <extract_feat_int_map+0x14>
    }
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <get_gyro_gain_update_status>:
/*!
 * @brief This internal API gets the saturation status for the gyroscope user
 * gain update.
 */
static int8_t get_gyro_gain_update_status(struct bmi2_gyr_user_gain_status *user_gain_stat, struct bmi2_dev *dev)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b088      	sub	sp, #32
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005b00:	f107 030c 	add.w	r3, r7, #12
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	60da      	str	r2, [r3, #12]

    /* Variables to define index */
    uint8_t idx = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature output for gyroscope user gain status */
    struct bmi2_feature_config user_gain_cfg = { 0, 0, 0 };
 8005b12:	2300      	movs	r3, #0
 8005b14:	723b      	strb	r3, [r7, #8]
 8005b16:	2300      	movs	r3, #0
 8005b18:	727b      	strb	r3, [r7, #9]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	72bb      	strb	r3, [r7, #10]

    /* Search for gyroscope user gain status output feature and extract its
     * configuration details
     */
    feat_found = extract_output_feat_config(&user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 8005b1e:	f107 0308 	add.w	r3, r7, #8
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	2109      	movs	r1, #9
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f84b 	bl	8005bc2 <extract_output_feat_config>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8005b30:	7f7b      	ldrb	r3, [r7, #29]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d03d      	beq.n	8005bb2 <get_gyro_gain_update_status+0xbc>
    {
        /* Get the feature output configuration for gyroscope user gain  status */
        rslt = bmi2_get_feat_config(user_gain_cfg.page, feat_config, dev);
 8005b36:	7a7b      	ldrb	r3, [r7, #9]
 8005b38:	f107 010c 	add.w	r1, r7, #12
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe fec3 	bl	80048ca <bmi2_get_feat_config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005b48:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d132      	bne.n	8005bb6 <get_gyro_gain_update_status+0xc0>
        {
            /* Define the offset in bytes for gyroscope user gain status */
            idx = user_gain_cfg.start_addr;
 8005b50:	7abb      	ldrb	r3, [r7, #10]
 8005b52:	77bb      	strb	r3, [r7, #30]

            /* Get the saturation status for x-axis */
            user_gain_stat->sat_x = BMI2_GET_BIT_POS0(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_X);
 8005b54:	7fbb      	ldrb	r3, [r7, #30]
 8005b56:	3320      	adds	r3, #32
 8005b58:	443b      	add	r3, r7
 8005b5a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	701a      	strb	r2, [r3, #0]

            /* Get the saturation status for y-axis */
            user_gain_stat->sat_y = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Y);
 8005b68:	7fbb      	ldrb	r3, [r7, #30]
 8005b6a:	3320      	adds	r3, #32
 8005b6c:	443b      	add	r3, r7
 8005b6e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005b72:	105b      	asrs	r3, r3, #1
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	705a      	strb	r2, [r3, #1]

            /* Get the saturation status for z-axis */
            user_gain_stat->sat_z = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Z);
 8005b80:	7fbb      	ldrb	r3, [r7, #30]
 8005b82:	3320      	adds	r3, #32
 8005b84:	443b      	add	r3, r7
 8005b86:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005b8a:	109b      	asrs	r3, r3, #2
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	709a      	strb	r2, [r3, #2]

            /* Get g trigger status */
            user_gain_stat->g_trigger_status = BMI2_GET_BITS(feat_config[idx], BMI2_G_TRIGGER_STAT);
 8005b98:	7fbb      	ldrb	r3, [r7, #30]
 8005b9a:	3320      	adds	r3, #32
 8005b9c:	443b      	add	r3, r7
 8005b9e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005ba2:	10db      	asrs	r3, r3, #3
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	70da      	strb	r2, [r3, #3]
 8005bb0:	e001      	b.n	8005bb6 <get_gyro_gain_update_status+0xc0>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8005bb2:	23f8      	movs	r3, #248	@ 0xf8
 8005bb4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005bb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <extract_output_feat_config>:
 * details from the look-up table.
 */
static uint8_t extract_output_feat_config(struct bmi2_feature_config *feat_output,
                                          uint8_t type,
                                          const struct bmi2_dev *dev)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b087      	sub	sp, #28
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	75bb      	strb	r3, [r7, #22]

    /* Search for the output feature from the output configuration array */
    while (loop < dev->out_sens)
 8005bd8:	e01c      	b.n	8005c14 <extract_output_feat_config+0x52>
    {
        if (dev->feat_output[loop].type == type)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005bde:	7dfa      	ldrb	r2, [r7, #23]
 8005be0:	4613      	mov	r3, r2
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	4413      	add	r3, r2
 8005be6:	440b      	add	r3, r1
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	7afa      	ldrb	r2, [r7, #11]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d10e      	bne.n	8005c0e <extract_output_feat_config+0x4c>
        {
            *feat_output = dev->feat_output[loop];
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005bf4:	7dfa      	ldrb	r2, [r7, #23]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	4413      	add	r3, r2
 8005bfc:	18ca      	adds	r2, r1, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8811      	ldrh	r1, [r2, #0]
 8005c02:	7892      	ldrb	r2, [r2, #2]
 8005c04:	8019      	strh	r1, [r3, #0]
 8005c06:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	75bb      	strb	r3, [r7, #22]
            break;
 8005c0c:	e007      	b.n	8005c1e <extract_output_feat_config+0x5c>
        }

        loop++;
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	3301      	adds	r3, #1
 8005c12:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->out_sens)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	7e9b      	ldrb	r3, [r3, #26]
 8005c18:	7dfa      	ldrb	r2, [r7, #23]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d3dd      	bcc.n	8005bda <extract_output_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 8005c1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <get_gyro_cross_sense>:
/*!
 * @brief This internal API gets the cross sensitivity coefficient between
 * gyroscope's X and Z axes.
 */
static int8_t get_gyro_cross_sense(int16_t *cross_sense, struct bmi2_dev *dev)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8005c36:	f107 030c 	add.w	r3, r7, #12
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	605a      	str	r2, [r3, #4]
 8005c40:	609a      	str	r2, [r3, #8]
 8005c42:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t idx = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	77bb      	strb	r3, [r7, #30]
    uint8_t feat_found;

    uint8_t corr_fact_zx;

    /* Initialize feature output for gyroscope cross sensitivity */
    struct bmi2_feature_config cross_sense_out_config = { 0, 0, 0 };
 8005c48:	2300      	movs	r3, #0
 8005c4a:	723b      	strb	r3, [r7, #8]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	727b      	strb	r3, [r7, #9]
 8005c50:	2300      	movs	r3, #0
 8005c52:	72bb      	strb	r3, [r7, #10]

    if (dev->variant_feature & BMI2_MAXIMUM_FIFO_VARIANT)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01d      	beq.n	8005c9e <get_gyro_cross_sense+0x72>
    {
        /* For maximum_fifo variant fetch the correction factor from GPIO0 */
        rslt = bmi2_get_regs(BMI2_GYR_CAS_GPIO0_ADDR, &corr_fact_zx, 1, dev);
 8005c62:	f107 010b 	add.w	r1, r7, #11
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	201e      	movs	r0, #30
 8005c6c:	f7fe f882 	bl	8003d74 <bmi2_get_regs>
 8005c70:	4603      	mov	r3, r0
 8005c72:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005c74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d157      	bne.n	8005d2c <get_gyro_cross_sense+0x100>
        {
            /* Get the gyroscope cross sensitivity coefficient */
            if (corr_fact_zx & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8005c7c:	7afb      	ldrb	r3, [r7, #11]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d006      	beq.n	8005c94 <get_gyro_cross_sense+0x68>
            {
                *cross_sense = (int16_t)(((int16_t)corr_fact_zx) - 128);
 8005c86:	7afb      	ldrb	r3, [r7, #11]
 8005c88:	3b80      	subs	r3, #128	@ 0x80
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	b21a      	sxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	e04b      	b.n	8005d2c <get_gyro_cross_sense+0x100>
            }
            else
            {
                *cross_sense = (int16_t)(corr_fact_zx);
 8005c94:	7afb      	ldrb	r3, [r7, #11]
 8005c96:	b21a      	sxth	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	e046      	b.n	8005d2c <get_gyro_cross_sense+0x100>
        }
    }
    else
    {
        /* Search for gyroscope cross sensitivity feature and extract its configuration details */
        feat_found = extract_output_feat_config(&cross_sense_out_config, BMI2_GYRO_CROSS_SENSE, dev);
 8005c9e:	f107 0308 	add.w	r3, r7, #8
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	2129      	movs	r1, #41	@ 0x29
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff ff8b 	bl	8005bc2 <extract_output_feat_config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	777b      	strb	r3, [r7, #29]
        if (feat_found)
 8005cb0:	7f7b      	ldrb	r3, [r7, #29]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d038      	beq.n	8005d28 <get_gyro_cross_sense+0xfc>
        {
            /* Get the feature output configuration for gyroscope cross sensitivity
             * feature */
            rslt = bmi2_get_feat_config(cross_sense_out_config.page, feat_config, dev);
 8005cb6:	7a7b      	ldrb	r3, [r7, #9]
 8005cb8:	f107 010c 	add.w	r1, r7, #12
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe fe03 	bl	80048ca <bmi2_get_feat_config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8005cc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d12d      	bne.n	8005d2c <get_gyro_cross_sense+0x100>
            {
                /* Define the offset in bytes for gyroscope cross sensitivity output */
                idx = cross_sense_out_config.start_addr;
 8005cd0:	7abb      	ldrb	r3, [r7, #10]
 8005cd2:	77bb      	strb	r3, [r7, #30]

                /* discard the MSB as GYR_CAS is of only 7 bit */
                feat_config[idx] = feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_MASK;
 8005cd4:	7fbb      	ldrb	r3, [r7, #30]
 8005cd6:	3320      	adds	r3, #32
 8005cd8:	443b      	add	r3, r7
 8005cda:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8005cde:	7fbb      	ldrb	r3, [r7, #30]
 8005ce0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	3320      	adds	r3, #32
 8005ce8:	443b      	add	r3, r7
 8005cea:	f803 2c14 	strb.w	r2, [r3, #-20]

                /* Get the gyroscope cross sensitivity coefficient */
                if (feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8005cee:	7fbb      	ldrb	r3, [r7, #30]
 8005cf0:	3320      	adds	r3, #32
 8005cf2:	443b      	add	r3, r7
 8005cf4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <get_gyro_cross_sense+0xea>
                {
                    *cross_sense = (int16_t)(((int16_t)feat_config[idx]) - 128);
 8005d00:	7fbb      	ldrb	r3, [r7, #30]
 8005d02:	3320      	adds	r3, #32
 8005d04:	443b      	add	r3, r7
 8005d06:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005d0a:	3b80      	subs	r3, #128	@ 0x80
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	b21a      	sxth	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	e00a      	b.n	8005d2c <get_gyro_cross_sense+0x100>
                }
                else
                {
                    *cross_sense = (int16_t)(feat_config[idx]);
 8005d16:	7fbb      	ldrb	r3, [r7, #30]
 8005d18:	3320      	adds	r3, #32
 8005d1a:	443b      	add	r3, r7
 8005d1c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005d20:	b21a      	sxth	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	e001      	b.n	8005d2c <get_gyro_cross_sense+0x100>
                }
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_SENSOR;
 8005d28:	23f8      	movs	r3, #248	@ 0xf8
 8005d2a:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8005d2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3720      	adds	r7, #32
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <bmi270_init>:
 *  3) Writes the configuration file.
 *  4) Updates the feature offset parameters in the device structure.
 *  5) Updates the maximum number of pages, in the device structure.
 */
int8_t bmi270_init(struct bmi2_dev *dev)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f9f7 	bl	8006134 <null_ptr_check>
 8005d46:	4603      	mov	r3, r0
 8005d48:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8005d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d141      	bne.n	8005dd6 <bmi270_init+0x9e>
    {
        /* Assign chip id of BMI270 */
        dev->chip_id = BMI270_CHIP_ID;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2224      	movs	r2, #36	@ 0x24
 8005d56:	701a      	strb	r2, [r3, #0]

        /* get the size of config array */
        dev->config_size = sizeof(bmi270_config_file);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005d5e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

        /* Enable the variant specific features if any */
        dev->variant_feature = BMI2_GYRO_CROSS_SENS_ENABLE | BMI2_CRT_RTOSK_ENABLE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2203      	movs	r2, #3
 8005d66:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI2_SPI_INTF)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	7a5b      	ldrb	r3, [r3, #9]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d103      	bne.n	8005d7a <bmi270_init+0x42>
        {
            dev->dummy_byte = 1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	72da      	strb	r2, [r3, #11]
 8005d78:	e002      	b.n	8005d80 <bmi270_init+0x48>
        }
        else
        {
            dev->dummy_byte = 0;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	72da      	strb	r2, [r3, #11]
        }

        /* If configuration file pointer is not assigned any address */
        if (!dev->config_file_ptr)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <bmi270_init+0x56>
        {
            /* Give the address of the configuration file array to
             * the device pointer
             */
            dev->config_file_ptr = bmi270_config_file;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a16      	ldr	r2, [pc, #88]	@ (8005de4 <bmi270_init+0xac>)
 8005d8c:	615a      	str	r2, [r3, #20]
        }

        /* Initialize BMI2 sensor */
        rslt = bmi2_sec_init(dev);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fd ff90 	bl	8003cb4 <bmi2_sec_init>
 8005d94:	4603      	mov	r3, r0
 8005d96:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8005d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d11a      	bne.n	8005dd6 <bmi270_init+0x9e>
        {
            /* Assign the offsets of the feature input
             * configuration to the device structure
             */
            dev->feat_config = bmi270_feat_in;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a11      	ldr	r2, [pc, #68]	@ (8005de8 <bmi270_init+0xb0>)
 8005da4:	621a      	str	r2, [r3, #32]

            /* Assign the offsets of the feature output to
             * the device structure
             */
            dev->feat_output = bmi270_feat_out;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a10      	ldr	r2, [pc, #64]	@ (8005dec <bmi270_init+0xb4>)
 8005daa:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Assign the maximum number of pages to the
             * device structure
             */
            dev->page_max = BMI270_MAX_PAGE_NUM;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2208      	movs	r2, #8
 8005db0:	761a      	strb	r2, [r3, #24]

            /* Assign maximum number of input sensors/
             * features to device structure
             */
            dev->input_sens = BMI270_MAX_FEAT_IN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2211      	movs	r2, #17
 8005db6:	765a      	strb	r2, [r3, #25]

            /* Assign maximum number of output sensors/
             * features to device structure
             */
            dev->out_sens = BMI270_MAX_FEAT_OUT;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2207      	movs	r2, #7
 8005dbc:	769a      	strb	r2, [r3, #26]

            /* Assign the offsets of the feature interrupt
             * to the device structure
             */
            dev->map_int = bmi270_map_int;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8005df0 <bmi270_init+0xb8>)
 8005dc2:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Assign maximum number of feature interrupts
             * to device structure
             */
            dev->sens_int_map = BMI270_MAX_INT_MAP;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            /* Get the gyroscope cross axis sensitivity */
            rslt = bmi2_get_gyro_cross_sense(dev);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fe fd1c 	bl	800480a <bmi2_get_gyro_cross_sense>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	08016828 	.word	0x08016828
 8005de8:	08018828 	.word	0x08018828
 8005dec:	0801885c 	.word	0x0801885c
 8005df0:	20000080 	.word	0x20000080

08005df4 <bmi270_sensor_enable>:

/*!
 * @brief This API selects the sensors/features to be enabled.
 */
int8_t bmi270_sensor_enable(const uint8_t *sens_list, uint8_t n_sens, struct bmi2_dev *dev)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to select sensor */
    uint64_t sensor_sel = 0;
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f990 	bl	8006134 <null_ptr_check>
 8005e14:	4603      	mov	r3, r0
 8005e16:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMI2_OK) && (sens_list != NULL))
 8005e18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d117      	bne.n	8005e50 <bmi270_sensor_enable+0x5c>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d014      	beq.n	8005e50 <bmi270_sensor_enable+0x5c>
    {
        /* Get the selected sensors */
        rslt = select_sensor(sens_list, n_sens, &sensor_sel);
 8005e26:	f107 0210 	add.w	r2, r7, #16
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f9a0 	bl	8006174 <select_sensor>
 8005e34:	4603      	mov	r3, r0
 8005e36:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005e38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d109      	bne.n	8005e54 <bmi270_sensor_enable+0x60>
        {
            /* Enable the selected sensors */
            rslt = sensor_enable(sensor_sel, dev);
 8005e40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	f000 fabd 	bl	80063c4 <sensor_enable>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005e4e:	e001      	b.n	8005e54 <bmi270_sensor_enable+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005e50:	23ff      	movs	r3, #255	@ 0xff
 8005e52:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005e54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3720      	adds	r7, #32
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <bmi270_sensor_disable>:

/*!
 * @brief This API selects the sensors/features to be disabled.
 */
int8_t bmi270_sensor_disable(const uint8_t *sens_list, uint8_t n_sens, struct bmi2_dev *dev)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to select sensor */
    uint64_t sensor_sel = 0;
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f95a 	bl	8006134 <null_ptr_check>
 8005e80:	4603      	mov	r3, r0
 8005e82:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMI2_OK) && (sens_list != NULL))
 8005e84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d117      	bne.n	8005ebc <bmi270_sensor_disable+0x5c>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d014      	beq.n	8005ebc <bmi270_sensor_disable+0x5c>
    {
        /* Get the selected sensors */
        rslt = select_sensor(sens_list, n_sens, &sensor_sel);
 8005e92:	f107 0210 	add.w	r2, r7, #16
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	4619      	mov	r1, r3
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f96a 	bl	8006174 <select_sensor>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005ea4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <bmi270_sensor_disable+0x60>
        {
            /* Disable the selected sensors */
            rslt = sensor_disable(sensor_sel, dev);
 8005eac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	f000 face 	bl	8006452 <sensor_disable>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005eba:	e001      	b.n	8005ec0 <bmi270_sensor_disable+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005ebc:	23ff      	movs	r3, #255	@ 0xff
 8005ebe:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005ec0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <bmi270_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi270_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f928 	bl	8006134 <null_ptr_check>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8005ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d171      	bne.n	8005fd4 <bmi270_set_sensor_config+0x108>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d06e      	beq.n	8005fd4 <bmi270_set_sensor_config+0x108>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005efc:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 8005efe:	2300      	movs	r3, #0
 8005f00:	75bb      	strb	r3, [r7, #22]
 8005f02:	e053      	b.n	8005fac <bmi270_set_sensor_config+0xe0>
        {
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8005f04:	7dba      	ldrb	r2, [r7, #22]
 8005f06:	4613      	mov	r3, r2
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d020      	beq.n	8005f5c <bmi270_set_sensor_config+0x90>
 8005f1a:	7dba      	ldrb	r2, [r7, #22]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	461a      	mov	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d015      	beq.n	8005f5c <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8005f30:	7dba      	ldrb	r2, [r7, #22]
 8005f32:	4613      	mov	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	781b      	ldrb	r3, [r3, #0]
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d00a      	beq.n	8005f5c <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8005f46:	7dba      	ldrb	r2, [r7, #22]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	1a9b      	subs	r3, r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	461a      	mov	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	d10f      	bne.n	8005f7c <bmi270_set_sensor_config+0xb0>
            {
                rslt = bmi2_set_sensor_config(&sens_cfg[loop], 1, dev);
 8005f5c:	7dba      	ldrb	r2, [r7, #22]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	1a9b      	subs	r3, r3, r2
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	461a      	mov	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	2101      	movs	r1, #1
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fe f9d3 	bl	800431c <bmi2_set_sensor_config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	75fb      	strb	r3, [r7, #23]
 8005f7a:	e014      	b.n	8005fa6 <bmi270_set_sensor_config+0xda>
            else
            {
                /* Disable Advance power save if enabled for auxiliary
                 * and feature configurations
                 */
                if (aps_stat == BMI2_ENABLE)
 8005f7c:	7d7b      	ldrb	r3, [r7, #21]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d105      	bne.n	8005f8e <bmi270_set_sensor_config+0xc2>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	2000      	movs	r0, #0
 8005f86:	f7fe f83c 	bl	8004002 <bmi2_set_adv_power_save>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	75fb      	strb	r3, [r7, #23]
                }

                if (rslt == BMI2_OK)
 8005f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10f      	bne.n	8005fb6 <bmi270_set_sensor_config+0xea>
                {
                    rslt = set_feat_config(sens_cfg, loop, dev);
 8005f96:	7dbb      	ldrb	r3, [r7, #22]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f002 f89f 	bl	80080e0 <set_feat_config>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 8005fa6:	7dbb      	ldrb	r3, [r7, #22]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	75bb      	strb	r3, [r7, #22]
 8005fac:	7dba      	ldrb	r2, [r7, #22]
 8005fae:	7afb      	ldrb	r3, [r7, #11]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d3a7      	bcc.n	8005f04 <bmi270_set_sensor_config+0x38>
 8005fb4:	e000      	b.n	8005fb8 <bmi270_set_sensor_config+0xec>
                }
                /* Return error if any of the set configurations fail */
                else
                {
                    break;
 8005fb6:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8005fb8:	7d7b      	ldrb	r3, [r7, #21]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d10d      	bne.n	8005fda <bmi270_set_sensor_config+0x10e>
 8005fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d109      	bne.n	8005fda <bmi270_set_sensor_config+0x10e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	2001      	movs	r0, #1
 8005fca:	f7fe f81a 	bl	8004002 <bmi2_set_adv_power_save>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8005fd2:	e002      	b.n	8005fda <bmi270_set_sensor_config+0x10e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005fd4:	23ff      	movs	r3, #255	@ 0xff
 8005fd6:	75fb      	strb	r3, [r7, #23]
 8005fd8:	e000      	b.n	8005fdc <bmi270_set_sensor_config+0x110>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8005fda:	bf00      	nop
    }

    return rslt;
 8005fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <bmi270_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi270_get_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f89a 	bl	8006134 <null_ptr_check>
 8006000:	4603      	mov	r3, r0
 8006002:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8006004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 8089 	bne.w	8006120 <bmi270_get_sensor_config+0x138>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8085 	beq.w	8006120 <bmi270_get_sensor_config+0x138>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800601c:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 800601e:	2300      	movs	r3, #0
 8006020:	75bb      	strb	r3, [r7, #22]
 8006022:	e069      	b.n	80060f8 <bmi270_get_sensor_config+0x110>
        {
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8006024:	7dba      	ldrb	r2, [r7, #22]
 8006026:	4613      	mov	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	461a      	mov	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d020      	beq.n	800607c <bmi270_get_sensor_config+0x94>
 800603a:	7dba      	ldrb	r2, [r7, #22]
 800603c:	4613      	mov	r3, r2
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	461a      	mov	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d015      	beq.n	800607c <bmi270_get_sensor_config+0x94>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8006050:	7dba      	ldrb	r2, [r7, #22]
 8006052:	4613      	mov	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	461a      	mov	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	781b      	ldrb	r3, [r3, #0]
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8006062:	2b02      	cmp	r3, #2
 8006064:	d00a      	beq.n	800607c <bmi270_get_sensor_config+0x94>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8006066:	7dba      	ldrb	r2, [r7, #22]
 8006068:	4613      	mov	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	461a      	mov	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4413      	add	r3, r2
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b09      	cmp	r3, #9
 800607a:	d10f      	bne.n	800609c <bmi270_get_sensor_config+0xb4>
            {
                rslt = bmi2_get_sensor_config(&sens_cfg[loop], 1, dev);
 800607c:	7dba      	ldrb	r2, [r7, #22]
 800607e:	4613      	mov	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	461a      	mov	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	2101      	movs	r1, #1
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe f9f9 	bl	8004488 <bmi2_get_sensor_config>
 8006096:	4603      	mov	r3, r0
 8006098:	75fb      	strb	r3, [r7, #23]
 800609a:	e02a      	b.n	80060f2 <bmi270_get_sensor_config+0x10a>
            else
            {
                /* Disable Advance power save if enabled for auxiliary
                 * and feature configurations
                 */
                if ((sens_cfg[loop].type >= BMI2_MAIN_SENS_MAX_NUM) || (sens_cfg[loop].type == BMI2_AUX))
 800609c:	7dba      	ldrb	r2, [r7, #22]
 800609e:	4613      	mov	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	461a      	mov	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d80a      	bhi.n	80060c8 <bmi270_get_sensor_config+0xe0>
 80060b2:	7dba      	ldrb	r2, [r7, #22]
 80060b4:	4613      	mov	r3, r2
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	461a      	mov	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d108      	bne.n	80060da <bmi270_get_sensor_config+0xf2>
                {

                    if (aps_stat == BMI2_ENABLE)
 80060c8:	7d7b      	ldrb	r3, [r7, #21]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d105      	bne.n	80060da <bmi270_get_sensor_config+0xf2>
                    {
                        /* Disable advance power save if
                         * enabled
                         */
                        rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	2000      	movs	r0, #0
 80060d2:	f7fd ff96 	bl	8004002 <bmi2_set_adv_power_save>
 80060d6:	4603      	mov	r3, r0
 80060d8:	75fb      	strb	r3, [r7, #23]
                    }
                }

                if (rslt == BMI2_OK)
 80060da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10f      	bne.n	8006102 <bmi270_get_sensor_config+0x11a>
                {
                    rslt = get_feat_config(sens_cfg, loop, dev);
 80060e2:	7dbb      	ldrb	r3, [r7, #22]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	4619      	mov	r1, r3
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f002 f8c1 	bl	8008270 <get_feat_config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 80060f2:	7dbb      	ldrb	r3, [r7, #22]
 80060f4:	3301      	adds	r3, #1
 80060f6:	75bb      	strb	r3, [r7, #22]
 80060f8:	7dba      	ldrb	r2, [r7, #22]
 80060fa:	7afb      	ldrb	r3, [r7, #11]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d391      	bcc.n	8006024 <bmi270_get_sensor_config+0x3c>
 8006100:	e000      	b.n	8006104 <bmi270_get_sensor_config+0x11c>
                }
                /* Return error if any of the get configurations fail */
                else
                {
                    break;
 8006102:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8006104:	7d7b      	ldrb	r3, [r7, #21]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d10d      	bne.n	8006126 <bmi270_get_sensor_config+0x13e>
 800610a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <bmi270_get_sensor_config+0x13e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	2001      	movs	r0, #1
 8006116:	f7fd ff74 	bl	8004002 <bmi2_set_adv_power_save>
 800611a:	4603      	mov	r3, r0
 800611c:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800611e:	e002      	b.n	8006126 <bmi270_get_sensor_config+0x13e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8006120:	23ff      	movs	r3, #255	@ 0xff
 8006122:	75fb      	strb	r3, [r7, #23]
 8006124:	e000      	b.n	8006128 <bmi270_get_sensor_config+0x140>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8006126:	bf00      	nop
    }

    return rslt;
 8006128:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <null_ptr_check+0x2a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <null_ptr_check+0x2a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <null_ptr_check+0x2a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 800615e:	23ff      	movs	r3, #255	@ 0xff
 8006160:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006162:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
	...

08006174 <select_sensor>:
/*!
 * @brief This internal API selects the sensor/features to be enabled or
 * disabled.
 */
static int8_t select_sensor(const uint8_t *sens_list, uint8_t n_sens, uint64_t *sensor_sel)
{
 8006174:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006178:	b09d      	sub	sp, #116	@ 0x74
 800617a:	af00      	add	r7, sp, #0
 800617c:	6678      	str	r0, [r7, #100]	@ 0x64
 800617e:	460b      	mov	r3, r1
 8006180:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006182:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    /* Variable to define loop */
    uint8_t count;

    for (count = 0; count < n_sens; count++)
 800618c:	2300      	movs	r3, #0
 800618e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8006192:	e107      	b.n	80063a4 <select_sensor+0x230>
    {
        switch (sens_list[count])
 8006194:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8006198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800619a:	4413      	add	r3, r2
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b22      	cmp	r3, #34	@ 0x22
 80061a0:	f200 80f7 	bhi.w	8006392 <select_sensor+0x21e>
 80061a4:	a201      	add	r2, pc, #4	@ (adr r2, 80061ac <select_sensor+0x38>)
 80061a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061aa:	bf00      	nop
 80061ac:	08006239 	.word	0x08006239
 80061b0:	0800624d 	.word	0x0800624d
 80061b4:	08006261 	.word	0x08006261
 80061b8:	0800628f 	.word	0x0800628f
 80061bc:	080062a9 	.word	0x080062a9
 80061c0:	080062c3 	.word	0x080062c3
 80061c4:	080062dd 	.word	0x080062dd
 80061c8:	080062f7 	.word	0x080062f7
 80061cc:	08006311 	.word	0x08006311
 80061d0:	0800632b 	.word	0x0800632b
 80061d4:	08006393 	.word	0x08006393
 80061d8:	08006393 	.word	0x08006393
 80061dc:	08006393 	.word	0x08006393
 80061e0:	08006393 	.word	0x08006393
 80061e4:	08006393 	.word	0x08006393
 80061e8:	08006393 	.word	0x08006393
 80061ec:	08006393 	.word	0x08006393
 80061f0:	08006393 	.word	0x08006393
 80061f4:	08006393 	.word	0x08006393
 80061f8:	0800635f 	.word	0x0800635f
 80061fc:	08006379 	.word	0x08006379
 8006200:	08006393 	.word	0x08006393
 8006204:	08006393 	.word	0x08006393
 8006208:	08006393 	.word	0x08006393
 800620c:	08006393 	.word	0x08006393
 8006210:	08006393 	.word	0x08006393
 8006214:	08006393 	.word	0x08006393
 8006218:	08006393 	.word	0x08006393
 800621c:	08006393 	.word	0x08006393
 8006220:	08006393 	.word	0x08006393
 8006224:	08006393 	.word	0x08006393
 8006228:	08006393 	.word	0x08006393
 800622c:	08006275 	.word	0x08006275
 8006230:	08006393 	.word	0x08006393
 8006234:	08006345 	.word	0x08006345
        {
            case BMI2_ACCEL:
                *sensor_sel |= BMI2_ACCEL_SENS_SEL;
 8006238:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f042 0401 	orr.w	r4, r2, #1
 8006242:	461d      	mov	r5, r3
 8006244:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006246:	e9c3 4500 	strd	r4, r5, [r3]
                break;
 800624a:	e0a6      	b.n	800639a <select_sensor+0x226>
            case BMI2_GYRO:
                *sensor_sel |= BMI2_GYRO_SENS_SEL;
 800624c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	f042 0802 	orr.w	r8, r2, #2
 8006256:	4699      	mov	r9, r3
 8006258:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800625a:	e9c3 8900 	strd	r8, r9, [r3]
                break;
 800625e:	e09c      	b.n	800639a <select_sensor+0x226>
            case BMI2_AUX:
                *sensor_sel |= BMI2_AUX_SENS_SEL;
 8006260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	f042 0a04 	orr.w	sl, r2, #4
 800626a:	469b      	mov	fp, r3
 800626c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800626e:	e9c3 ab00 	strd	sl, fp, [r3]
                break;
 8006272:	e092      	b.n	800639a <select_sensor+0x226>
            case BMI2_TEMP:
                *sensor_sel |= BMI2_TEMP_SENS_SEL;
 8006274:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	653a      	str	r2, [r7, #80]	@ 0x50
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	657b      	str	r3, [r7, #84]	@ 0x54
 8006282:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006284:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006288:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 800628c:	e085      	b.n	800639a <select_sensor+0x226>
            case BMI2_SIG_MOTION:
                *sensor_sel |= BMI2_SIG_MOTION_SEL;
 800628e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f042 0108 	orr.w	r1, r2, #8
 8006298:	64b9      	str	r1, [r7, #72]	@ 0x48
 800629a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800629c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800629e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80062a2:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 80062a6:	e078      	b.n	800639a <select_sensor+0x226>
            case BMI2_ANY_MOTION:
                *sensor_sel |= BMI2_ANY_MOT_SEL;
 80062a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f042 0110 	orr.w	r1, r2, #16
 80062b2:	6439      	str	r1, [r7, #64]	@ 0x40
 80062b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80062bc:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 80062c0:	e06b      	b.n	800639a <select_sensor+0x226>
            case BMI2_NO_MOTION:
                *sensor_sel |= BMI2_NO_MOT_SEL;
 80062c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f042 0120 	orr.w	r1, r2, #32
 80062cc:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80062d6:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 80062da:	e05e      	b.n	800639a <select_sensor+0x226>
            case BMI2_STEP_DETECTOR:
                *sensor_sel |= BMI2_STEP_DETECT_SEL;
 80062dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f042 0140 	orr.w	r1, r2, #64	@ 0x40
 80062e6:	6339      	str	r1, [r7, #48]	@ 0x30
 80062e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062ec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80062f0:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 80062f4:	e051      	b.n	800639a <select_sensor+0x226>
            case BMI2_STEP_COUNTER:
                *sensor_sel |= BMI2_STEP_COUNT_SEL;
 80062f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f042 0180 	orr.w	r1, r2, #128	@ 0x80
 8006300:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006306:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800630a:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 800630e:	e044      	b.n	800639a <select_sensor+0x226>
            case BMI2_STEP_ACTIVITY:
                *sensor_sel |= BMI2_STEP_ACT_SEL;
 8006310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f442 7180 	orr.w	r1, r2, #256	@ 0x100
 800631a:	6239      	str	r1, [r7, #32]
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
 800631e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006320:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006324:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8006328:	e037      	b.n	800639a <select_sensor+0x226>
            case BMI2_GYRO_GAIN_UPDATE:
                *sensor_sel |= BMI2_GYRO_GAIN_UPDATE_SEL;
 800632a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f442 7100 	orr.w	r1, r2, #512	@ 0x200
 8006334:	61b9      	str	r1, [r7, #24]
 8006336:	61fb      	str	r3, [r7, #28]
 8006338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800633a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800633e:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8006342:	e02a      	b.n	800639a <select_sensor+0x226>
            case BMI2_GYRO_SELF_OFF:
                *sensor_sel |= BMI2_GYRO_SELF_OFF_SEL;
 8006344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	613a      	str	r2, [r7, #16]
 800634c:	f043 0304 	orr.w	r3, r3, #4
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006354:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006358:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 800635c:	e01d      	b.n	800639a <select_sensor+0x226>
            case BMI2_WRIST_GESTURE:
                *sensor_sel |= BMI2_WRIST_GEST_SEL;
 800635e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f442 2100 	orr.w	r1, r2, #524288	@ 0x80000
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800636e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006372:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8006376:	e010      	b.n	800639a <select_sensor+0x226>
            case BMI2_WRIST_WEAR_WAKE_UP:
                *sensor_sel |= BMI2_WRIST_WEAR_WAKE_UP_SEL;
 8006378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f442 1180 	orr.w	r1, r2, #1048576	@ 0x100000
 8006382:	6039      	str	r1, [r7, #0]
 8006384:	607b      	str	r3, [r7, #4]
 8006386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006388:	e9d7 1200 	ldrd	r1, r2, [r7]
 800638c:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8006390:	e003      	b.n	800639a <select_sensor+0x226>
            default:
                rslt = BMI2_E_INVALID_SENSOR;
 8006392:	23f8      	movs	r3, #248	@ 0xf8
 8006394:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                break;
 8006398:	bf00      	nop
    for (count = 0; count < n_sens; count++)
 800639a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800639e:	3301      	adds	r3, #1
 80063a0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80063a4:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80063a8:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80063ac:	429a      	cmp	r2, r3
 80063ae:	f4ff aef1 	bcc.w	8006194 <select_sensor+0x20>
        }
    }

    return rslt;
 80063b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3774      	adds	r7, #116	@ 0x74
 80063ba:	46bd      	mov	sp, r7
 80063bc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop

080063c4 <sensor_enable>:

/*!
 * @brief This internal API enables the selected sensor/features.
 */
static int8_t sensor_enable(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 80063c4:	b5b0      	push	{r4, r5, r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	75bb      	strb	r3, [r7, #22]

    rslt = enable_main_sensors(sensor_sel, dev);
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063da:	f002 f811 	bl	8008400 <enable_main_sensors>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI2_OK) && (sensor_sel & ~(BMI2_MAIN_SENSORS)))
 80063e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d12d      	bne.n	8006446 <sensor_enable+0x82>
 80063ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063ee:	f022 0407 	bic.w	r4, r2, #7
 80063f2:	f023 0501 	bic.w	r5, r3, #1
 80063f6:	ea54 0305 	orrs.w	r3, r4, r5
 80063fa:	d024      	beq.n	8006446 <sensor_enable+0x82>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006402:	75bb      	strb	r3, [r7, #22]
        if (aps_stat == BMI2_ENABLE)
 8006404:	7dbb      	ldrb	r3, [r7, #22]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d105      	bne.n	8006416 <sensor_enable+0x52>
        {
            /* Disable advance power save if enabled */
            rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	2000      	movs	r0, #0
 800640e:	f7fd fdf8 	bl	8004002 <bmi2_set_adv_power_save>
 8006412:	4603      	mov	r3, r0
 8006414:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI2_OK)
 8006416:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d113      	bne.n	8006446 <sensor_enable+0x82>
        {
            rslt = enable_sensor_features(sensor_sel, dev);
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006424:	f002 f861 	bl	80084ea <enable_sensor_features>
 8006428:	4603      	mov	r3, r0
 800642a:	75fb      	strb	r3, [r7, #23]

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800642c:	7dbb      	ldrb	r3, [r7, #22]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d109      	bne.n	8006446 <sensor_enable+0x82>
 8006432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d105      	bne.n	8006446 <sensor_enable+0x82>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	2001      	movs	r0, #1
 800643e:	f7fd fde0 	bl	8004002 <bmi2_set_adv_power_save>
 8006442:	4603      	mov	r3, r0
 8006444:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8006446:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bdb0      	pop	{r4, r5, r7, pc}

08006452 <sensor_disable>:

/*!
 * @brief This internal API disables the selected sensors/features.
 */
static int8_t sensor_disable(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8006452:	b5b0      	push	{r4, r5, r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	75bb      	strb	r3, [r7, #22]

    rslt = disable_main_sensors(sensor_sel, dev);
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006468:	f002 f904 	bl	8008674 <disable_main_sensors>
 800646c:	4603      	mov	r3, r0
 800646e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI2_OK) && (sensor_sel & ~(BMI2_MAIN_SENSORS)))
 8006470:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d12d      	bne.n	80064d4 <sensor_disable+0x82>
 8006478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800647c:	f022 0407 	bic.w	r4, r2, #7
 8006480:	f023 0501 	bic.w	r5, r3, #1
 8006484:	ea54 0305 	orrs.w	r3, r4, r5
 8006488:	d024      	beq.n	80064d4 <sensor_disable+0x82>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006490:	75bb      	strb	r3, [r7, #22]
        if (aps_stat == BMI2_ENABLE)
 8006492:	7dbb      	ldrb	r3, [r7, #22]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d105      	bne.n	80064a4 <sensor_disable+0x52>
        {
            /* Disable advance power save if enabled */
            rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	2000      	movs	r0, #0
 800649c:	f7fd fdb1 	bl	8004002 <bmi2_set_adv_power_save>
 80064a0:	4603      	mov	r3, r0
 80064a2:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI2_OK)
 80064a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d113      	bne.n	80064d4 <sensor_disable+0x82>
        {
            rslt = disable_sensor_features(sensor_sel, dev);
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064b2:	f002 f954 	bl	800875e <disable_sensor_features>
 80064b6:	4603      	mov	r3, r0
 80064b8:	75fb      	strb	r3, [r7, #23]

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80064ba:	7dbb      	ldrb	r3, [r7, #22]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d109      	bne.n	80064d4 <sensor_disable+0x82>
 80064c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d105      	bne.n	80064d4 <sensor_disable+0x82>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	2001      	movs	r0, #1
 80064cc:	f7fd fd99 	bl	8004002 <bmi2_set_adv_power_save>
 80064d0:	4603      	mov	r3, r0
 80064d2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 80064d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bdb0      	pop	{r4, r5, r7, pc}

080064e0 <set_any_motion>:

/*!
 * @brief This internal API is used to enable/disable any motion feature.
 */
static int8_t set_any_motion(uint8_t enable, struct bmi2_dev *dev)
{
 80064e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80064e4:	b088      	sub	sp, #32
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	4603      	mov	r3, r0
 80064ea:	6039      	str	r1, [r7, #0]
 80064ec:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80064ee:	f107 030c 	add.w	r3, r7, #12
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	605a      	str	r2, [r3, #4]
 80064f8:	609a      	str	r2, [r3, #8]
 80064fa:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any-motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 8006500:	2300      	movs	r3, #0
 8006502:	723b      	strb	r3, [r7, #8]
 8006504:	2300      	movs	r3, #0
 8006506:	727b      	strb	r3, [r7, #9]
 8006508:	2300      	movs	r3, #0
 800650a:	72bb      	strb	r3, [r7, #10]

    /* Search for any-motion feature and extract its configurations details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 800650c:	f107 0308 	add.w	r3, r7, #8
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	2104      	movs	r1, #4
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe fa6a 	bl	80049ee <bmi2_extract_input_feat_config>
 800651a:	4603      	mov	r3, r0
 800651c:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 800651e:	7f7b      	ldrb	r3, [r7, #29]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d048      	beq.n	80065b6 <set_any_motion+0xd6>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 8006524:	7a7b      	ldrb	r3, [r7, #9]
 8006526:	f107 010c 	add.w	r1, r7, #12
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f7fe f9cc 	bl	80048ca <bmi2_get_feat_config>
 8006532:	4603      	mov	r3, r0
 8006534:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006536:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d13d      	bne.n	80065ba <set_any_motion+0xda>
        {
            /* Define the offset for enable/disable of any-motion axes */
            idx = any_mot_config.start_addr + BMI2_ANY_MOT_FEAT_EN_OFFSET;
 800653e:	7abb      	ldrb	r3, [r7, #10]
 8006540:	3303      	adds	r3, #3
 8006542:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_ANY_NO_MOT_EN, enable);
 8006544:	7fbb      	ldrb	r3, [r7, #30]
 8006546:	3320      	adds	r3, #32
 8006548:	443b      	add	r3, r7
 800654a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800654e:	b25b      	sxtb	r3, r3
 8006550:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006554:	b25a      	sxtb	r2, r3
 8006556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800655a:	01db      	lsls	r3, r3, #7
 800655c:	b25b      	sxtb	r3, r3
 800655e:	4313      	orrs	r3, r2
 8006560:	b25a      	sxtb	r2, r3
 8006562:	7fbb      	ldrb	r3, [r7, #30]
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	3320      	adds	r3, #32
 8006568:	443b      	add	r3, r7
 800656a:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800656e:	f107 010c 	add.w	r1, r7, #12
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2210      	movs	r2, #16
 8006576:	2030      	movs	r0, #48	@ 0x30
 8006578:	f7fd fc6f 	bl	8003e5a <bmi2_set_regs>
 800657c:	4603      	mov	r3, r0
 800657e:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006580:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10c      	bne.n	80065a2 <set_any_motion+0xc2>
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d109      	bne.n	80065a2 <set_any_motion+0xc2>
            {
                dev->sens_en_stat |= BMI2_ANY_MOT_SEL;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006594:	f042 0810 	orr.w	r8, r2, #16
 8006598:	4699      	mov	r9, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 80065a0:	e00b      	b.n	80065ba <set_any_motion+0xda>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_ANY_MOT_SEL;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80065a8:	f022 0410 	bic.w	r4, r2, #16
 80065ac:	461d      	mov	r5, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 80065b4:	e001      	b.n	80065ba <set_any_motion+0xda>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80065b6:	23f8      	movs	r3, #248	@ 0xf8
 80065b8:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80065ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080065c8 <set_no_motion>:

/*!
 * @brief This internal API is used to enable/disable no-motion feature.
 */
static int8_t set_no_motion(uint8_t enable, struct bmi2_dev *dev)
{
 80065c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80065cc:	b088      	sub	sp, #32
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	4603      	mov	r3, r0
 80065d2:	6039      	str	r1, [r7, #0]
 80065d4:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80065d6:	f107 030c 	add.w	r3, r7, #12
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	605a      	str	r2, [r3, #4]
 80065e0:	609a      	str	r2, [r3, #8]
 80065e2:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 80065e8:	2300      	movs	r3, #0
 80065ea:	723b      	strb	r3, [r7, #8]
 80065ec:	2300      	movs	r3, #0
 80065ee:	727b      	strb	r3, [r7, #9]
 80065f0:	2300      	movs	r3, #0
 80065f2:	72bb      	strb	r3, [r7, #10]

    /* Search for no-motion feature and extract its configurations details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 80065f4:	f107 0308 	add.w	r3, r7, #8
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	2105      	movs	r1, #5
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe f9f6 	bl	80049ee <bmi2_extract_input_feat_config>
 8006602:	4603      	mov	r3, r0
 8006604:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006606:	7f7b      	ldrb	r3, [r7, #29]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d048      	beq.n	800669e <set_no_motion+0xd6>
    {
        /* Get the configuration from the page where any/no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 800660c:	7a7b      	ldrb	r3, [r7, #9]
 800660e:	f107 010c 	add.w	r1, r7, #12
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe f958 	bl	80048ca <bmi2_get_feat_config>
 800661a:	4603      	mov	r3, r0
 800661c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800661e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d13d      	bne.n	80066a2 <set_no_motion+0xda>
        {
            /* Define the offset for enable/disable of no-motion axes */
            idx = no_mot_config.start_addr + BMI2_NO_MOT_FEAT_EN_OFFSET;
 8006626:	7abb      	ldrb	r3, [r7, #10]
 8006628:	3303      	adds	r3, #3
 800662a:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_ANY_NO_MOT_EN, enable);
 800662c:	7fbb      	ldrb	r3, [r7, #30]
 800662e:	3320      	adds	r3, #32
 8006630:	443b      	add	r3, r7
 8006632:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006636:	b25b      	sxtb	r3, r3
 8006638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800663c:	b25a      	sxtb	r2, r3
 800663e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006642:	01db      	lsls	r3, r3, #7
 8006644:	b25b      	sxtb	r3, r3
 8006646:	4313      	orrs	r3, r2
 8006648:	b25a      	sxtb	r2, r3
 800664a:	7fbb      	ldrb	r3, [r7, #30]
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	3320      	adds	r3, #32
 8006650:	443b      	add	r3, r7
 8006652:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006656:	f107 010c 	add.w	r1, r7, #12
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2210      	movs	r2, #16
 800665e:	2030      	movs	r0, #48	@ 0x30
 8006660:	f7fd fbfb 	bl	8003e5a <bmi2_set_regs>
 8006664:	4603      	mov	r3, r0
 8006666:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006668:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10c      	bne.n	800668a <set_no_motion+0xc2>
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d109      	bne.n	800668a <set_no_motion+0xc2>
            {
                dev->sens_en_stat |= BMI2_NO_MOT_SEL;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800667c:	f042 0820 	orr.w	r8, r2, #32
 8006680:	4699      	mov	r9, r3
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006688:	e00b      	b.n	80066a2 <set_no_motion+0xda>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_NO_MOT_SEL;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006690:	f022 0420 	bic.w	r4, r2, #32
 8006694:	461d      	mov	r5, r3
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 800669c:	e001      	b.n	80066a2 <set_no_motion+0xda>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800669e:	23f8      	movs	r3, #248	@ 0xf8
 80066a0:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80066a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3720      	adds	r7, #32
 80066aa:	46bd      	mov	sp, r7
 80066ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080066b0 <set_step_detector>:

/*!
 * @brief This internal API is used to enable/disable step detector feature.
 */
static int8_t set_step_detector(uint8_t enable, struct bmi2_dev *dev)
{
 80066b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80066b4:	b088      	sub	sp, #32
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	4603      	mov	r3, r0
 80066ba:	6039      	str	r1, [r7, #0]
 80066bc:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80066be:	f107 030c 	add.w	r3, r7, #12
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	605a      	str	r2, [r3, #4]
 80066c8:	609a      	str	r2, [r3, #8]
 80066ca:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step detector */
    struct bmi2_feature_config step_det_config = { 0, 0, 0 };
 80066d0:	2300      	movs	r3, #0
 80066d2:	723b      	strb	r3, [r7, #8]
 80066d4:	2300      	movs	r3, #0
 80066d6:	727b      	strb	r3, [r7, #9]
 80066d8:	2300      	movs	r3, #0
 80066da:	72bb      	strb	r3, [r7, #10]

    /* Search for step detector feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_det_config, BMI2_STEP_DETECTOR, dev);
 80066dc:	f107 0308 	add.w	r3, r7, #8
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	2106      	movs	r1, #6
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fe f982 	bl	80049ee <bmi2_extract_input_feat_config>
 80066ea:	4603      	mov	r3, r0
 80066ec:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 80066ee:	7f7b      	ldrb	r3, [r7, #29]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d04b      	beq.n	800678c <set_step_detector+0xdc>
    {
        /* Get the configuration from the page where step detector feature resides */
        rslt = bmi2_get_feat_config(step_det_config.page, feat_config, dev);
 80066f4:	7a7b      	ldrb	r3, [r7, #9]
 80066f6:	f107 010c 	add.w	r1, r7, #12
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe f8e4 	bl	80048ca <bmi2_get_feat_config>
 8006702:	4603      	mov	r3, r0
 8006704:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006706:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d140      	bne.n	8006790 <set_step_detector+0xe0>
        {
            /* Define the offset for enable/disable of step detector */
            idx = step_det_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 800670e:	7abb      	ldrb	r3, [r7, #10]
 8006710:	3301      	adds	r3, #1
 8006712:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_DET_FEAT_EN, enable);
 8006714:	7fbb      	ldrb	r3, [r7, #30]
 8006716:	3320      	adds	r3, #32
 8006718:	443b      	add	r3, r7
 800671a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800671e:	b25b      	sxtb	r3, r3
 8006720:	f023 0308 	bic.w	r3, r3, #8
 8006724:	b25a      	sxtb	r2, r3
 8006726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	b25b      	sxtb	r3, r3
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	b25b      	sxtb	r3, r3
 8006734:	4313      	orrs	r3, r2
 8006736:	b25a      	sxtb	r2, r3
 8006738:	7fbb      	ldrb	r3, [r7, #30]
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	3320      	adds	r3, #32
 800673e:	443b      	add	r3, r7
 8006740:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006744:	f107 010c 	add.w	r1, r7, #12
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2210      	movs	r2, #16
 800674c:	2030      	movs	r0, #48	@ 0x30
 800674e:	f7fd fb84 	bl	8003e5a <bmi2_set_regs>
 8006752:	4603      	mov	r3, r0
 8006754:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006756:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10c      	bne.n	8006778 <set_step_detector+0xc8>
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d109      	bne.n	8006778 <set_step_detector+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_DETECT_SEL;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800676a:	f042 0840 	orr.w	r8, r2, #64	@ 0x40
 800676e:	4699      	mov	r9, r3
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006776:	e00b      	b.n	8006790 <set_step_detector+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_DETECT_SEL;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800677e:	f022 0440 	bic.w	r4, r2, #64	@ 0x40
 8006782:	461d      	mov	r5, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 800678a:	e001      	b.n	8006790 <set_step_detector+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800678c:	23f8      	movs	r3, #248	@ 0xf8
 800678e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006790:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800679e <set_step_counter>:

/*!
 * @brief This internal API is used to enable/disable step counter feature.
 */
static int8_t set_step_counter(uint8_t enable, struct bmi2_dev *dev)
{
 800679e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4603      	mov	r3, r0
 80067a8:	6039      	str	r1, [r7, #0]
 80067aa:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80067ac:	f107 030c 	add.w	r3, r7, #12
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 80067be:	2300      	movs	r3, #0
 80067c0:	723b      	strb	r3, [r7, #8]
 80067c2:	2300      	movs	r3, #0
 80067c4:	727b      	strb	r3, [r7, #9]
 80067c6:	2300      	movs	r3, #0
 80067c8:	72bb      	strb	r3, [r7, #10]

    /* Search for step counter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 80067ca:	f107 0308 	add.w	r3, r7, #8
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	2107      	movs	r1, #7
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe f90b 	bl	80049ee <bmi2_extract_input_feat_config>
 80067d8:	4603      	mov	r3, r0
 80067da:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 80067dc:	7f7b      	ldrb	r3, [r7, #29]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d04b      	beq.n	800687a <set_step_counter+0xdc>
    {
        /* Get the configuration from the page where step-counter feature resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 80067e2:	7a7b      	ldrb	r3, [r7, #9]
 80067e4:	f107 010c 	add.w	r1, r7, #12
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe f86d 	bl	80048ca <bmi2_get_feat_config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80067f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d140      	bne.n	800687e <set_step_counter+0xe0>
        {
            /* Define the offset for enable/disable of step counter */
            idx = step_count_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 80067fc:	7abb      	ldrb	r3, [r7, #10]
 80067fe:	3301      	adds	r3, #1
 8006800:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_COUNT_FEAT_EN, enable);
 8006802:	7fbb      	ldrb	r3, [r7, #30]
 8006804:	3320      	adds	r3, #32
 8006806:	443b      	add	r3, r7
 8006808:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800680c:	b25b      	sxtb	r3, r3
 800680e:	f023 0310 	bic.w	r3, r3, #16
 8006812:	b25a      	sxtb	r2, r3
 8006814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	b25b      	sxtb	r3, r3
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	b25b      	sxtb	r3, r3
 8006822:	4313      	orrs	r3, r2
 8006824:	b25a      	sxtb	r2, r3
 8006826:	7fbb      	ldrb	r3, [r7, #30]
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	3320      	adds	r3, #32
 800682c:	443b      	add	r3, r7
 800682e:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006832:	f107 010c 	add.w	r1, r7, #12
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2210      	movs	r2, #16
 800683a:	2030      	movs	r0, #48	@ 0x30
 800683c:	f7fd fb0d 	bl	8003e5a <bmi2_set_regs>
 8006840:	4603      	mov	r3, r0
 8006842:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006844:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10c      	bne.n	8006866 <set_step_counter+0xc8>
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d109      	bne.n	8006866 <set_step_counter+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_COUNT_SEL;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006858:	f042 0880 	orr.w	r8, r2, #128	@ 0x80
 800685c:	4699      	mov	r9, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006864:	e00b      	b.n	800687e <set_step_counter+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_COUNT_SEL;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800686c:	f022 0480 	bic.w	r4, r2, #128	@ 0x80
 8006870:	461d      	mov	r5, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006878:	e001      	b.n	800687e <set_step_counter+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800687a:	23f8      	movs	r3, #248	@ 0xf8
 800687c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800687e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800688c <set_sig_motion>:

/*!
 * @brief This internal API is used to enable/disable sig-motion feature.
 */
static int8_t set_sig_motion(uint8_t enable, struct bmi2_dev *dev)
{
 800688c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006890:	b088      	sub	sp, #32
 8006892:	af00      	add	r7, sp, #0
 8006894:	4603      	mov	r3, r0
 8006896:	6039      	str	r1, [r7, #0]
 8006898:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800689a:	f107 030c 	add.w	r3, r7, #12
 800689e:	2200      	movs	r2, #0
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	605a      	str	r2, [r3, #4]
 80068a4:	609a      	str	r2, [r3, #8]
 80068a6:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 80068ac:	2300      	movs	r3, #0
 80068ae:	723b      	strb	r3, [r7, #8]
 80068b0:	2300      	movs	r3, #0
 80068b2:	727b      	strb	r3, [r7, #9]
 80068b4:	2300      	movs	r3, #0
 80068b6:	72bb      	strb	r3, [r7, #10]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 80068b8:	f107 0308 	add.w	r3, r7, #8
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	2103      	movs	r1, #3
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fe f894 	bl	80049ee <bmi2_extract_input_feat_config>
 80068c6:	4603      	mov	r3, r0
 80068c8:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 80068ca:	7f7b      	ldrb	r3, [r7, #29]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d049      	beq.n	8006964 <set_sig_motion+0xd8>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 80068d0:	7a7b      	ldrb	r3, [r7, #9]
 80068d2:	f107 010c 	add.w	r1, r7, #12
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fd fff6 	bl	80048ca <bmi2_get_feat_config>
 80068de:	4603      	mov	r3, r0
 80068e0:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80068e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d13e      	bne.n	8006968 <set_sig_motion+0xdc>
        {
            /* Define the offset for enable/disable of sig-motion */
            idx = sig_mot_config.start_addr + BMI2_SIG_MOT_FEAT_EN_OFFSET;
 80068ea:	7abb      	ldrb	r3, [r7, #10]
 80068ec:	330a      	adds	r3, #10
 80068ee:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BIT_POS0(feat_config[idx], BMI2_SIG_MOT_FEAT_EN, enable);
 80068f0:	7fbb      	ldrb	r3, [r7, #30]
 80068f2:	3320      	adds	r3, #32
 80068f4:	443b      	add	r3, r7
 80068f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80068fa:	b25b      	sxtb	r3, r3
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	b25a      	sxtb	r2, r3
 8006902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	b25b      	sxtb	r3, r3
 800690c:	4313      	orrs	r3, r2
 800690e:	b25a      	sxtb	r2, r3
 8006910:	7fbb      	ldrb	r3, [r7, #30]
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	3320      	adds	r3, #32
 8006916:	443b      	add	r3, r7
 8006918:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800691c:	f107 010c 	add.w	r1, r7, #12
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2210      	movs	r2, #16
 8006924:	2030      	movs	r0, #48	@ 0x30
 8006926:	f7fd fa98 	bl	8003e5a <bmi2_set_regs>
 800692a:	4603      	mov	r3, r0
 800692c:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 800692e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10c      	bne.n	8006950 <set_sig_motion+0xc4>
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d109      	bne.n	8006950 <set_sig_motion+0xc4>
            {
                dev->sens_en_stat |= BMI2_SIG_MOTION_SEL;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006942:	f042 0808 	orr.w	r8, r2, #8
 8006946:	4699      	mov	r9, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 800694e:	e00b      	b.n	8006968 <set_sig_motion+0xdc>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_SIG_MOTION_SEL;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006956:	f022 0408 	bic.w	r4, r2, #8
 800695a:	461d      	mov	r5, r3
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006962:	e001      	b.n	8006968 <set_sig_motion+0xdc>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006964:	23f8      	movs	r3, #248	@ 0xf8
 8006966:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006968:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006976 <set_step_activity>:

/*!
 * @brief This internal API is used to enable/disable step activity detection.
 */
static int8_t set_step_activity(uint8_t enable, struct bmi2_dev *dev)
{
 8006976:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	6039      	str	r1, [r7, #0]
 8006982:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006984:	f107 030c 	add.w	r3, r7, #12
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	605a      	str	r2, [r3, #4]
 800698e:	609a      	str	r2, [r3, #8]
 8006990:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step activity */
    struct bmi2_feature_config step_act_config = { 0, 0, 0 };
 8006996:	2300      	movs	r3, #0
 8006998:	723b      	strb	r3, [r7, #8]
 800699a:	2300      	movs	r3, #0
 800699c:	727b      	strb	r3, [r7, #9]
 800699e:	2300      	movs	r3, #0
 80069a0:	72bb      	strb	r3, [r7, #10]

    /* Search for step activity feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_act_config, BMI2_STEP_ACTIVITY, dev);
 80069a2:	f107 0308 	add.w	r3, r7, #8
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	2108      	movs	r1, #8
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe f81f 	bl	80049ee <bmi2_extract_input_feat_config>
 80069b0:	4603      	mov	r3, r0
 80069b2:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 80069b4:	7f7b      	ldrb	r3, [r7, #29]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d04b      	beq.n	8006a52 <set_step_activity+0xdc>
    {
        /* Get the configuration from the page where step-activity
         * feature resides
         */
        rslt = bmi2_get_feat_config(step_act_config.page, feat_config, dev);
 80069ba:	7a7b      	ldrb	r3, [r7, #9]
 80069bc:	f107 010c 	add.w	r1, r7, #12
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fd ff81 	bl	80048ca <bmi2_get_feat_config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80069cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d140      	bne.n	8006a56 <set_step_activity+0xe0>
        {
            /* Define the offset for enable/disable of step activity */
            idx = step_act_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 80069d4:	7abb      	ldrb	r3, [r7, #10]
 80069d6:	3301      	adds	r3, #1
 80069d8:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_ACT_FEAT_EN, enable);
 80069da:	7fbb      	ldrb	r3, [r7, #30]
 80069dc:	3320      	adds	r3, #32
 80069de:	443b      	add	r3, r7
 80069e0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80069e4:	b25b      	sxtb	r3, r3
 80069e6:	f023 0320 	bic.w	r3, r3, #32
 80069ea:	b25a      	sxtb	r2, r3
 80069ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f0:	015b      	lsls	r3, r3, #5
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	b25b      	sxtb	r3, r3
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b25a      	sxtb	r2, r3
 80069fe:	7fbb      	ldrb	r3, [r7, #30]
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	3320      	adds	r3, #32
 8006a04:	443b      	add	r3, r7
 8006a06:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006a0a:	f107 010c 	add.w	r1, r7, #12
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2210      	movs	r2, #16
 8006a12:	2030      	movs	r0, #48	@ 0x30
 8006a14:	f7fd fa21 	bl	8003e5a <bmi2_set_regs>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006a1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10c      	bne.n	8006a3e <set_step_activity+0xc8>
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d109      	bne.n	8006a3e <set_step_activity+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_ACT_SEL;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006a30:	f442 7880 	orr.w	r8, r2, #256	@ 0x100
 8006a34:	4699      	mov	r9, r3
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006a3c:	e00b      	b.n	8006a56 <set_step_activity+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_ACT_SEL;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006a44:	f422 7480 	bic.w	r4, r2, #256	@ 0x100
 8006a48:	461d      	mov	r5, r3
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006a50:	e001      	b.n	8006a56 <set_step_activity+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006a52:	23f8      	movs	r3, #248	@ 0xf8
 8006a54:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006a56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3720      	adds	r7, #32
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006a64 <set_gyro_self_offset_corr>:
/*!
 * @brief This internal API gives an option to enable self-offset correction
 * feature of gyroscope, either internally or by the host.
 */
static int8_t set_gyro_self_offset_corr(uint8_t enable, struct bmi2_dev *dev)
{
 8006a64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a68:	b088      	sub	sp, #32
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	6039      	str	r1, [r7, #0]
 8006a70:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006a72:	f107 030c 	add.w	r3, r7, #12
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	605a      	str	r2, [r3, #4]
 8006a7c:	609a      	str	r2, [r3, #8]
 8006a7e:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for self-offset correction */
    struct bmi2_feature_config self_off_corr_cfg = { 0, 0, 0 };
 8006a84:	2300      	movs	r3, #0
 8006a86:	723b      	strb	r3, [r7, #8]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	727b      	strb	r3, [r7, #9]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	72bb      	strb	r3, [r7, #10]

    /* Search for self-offset correction and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&self_off_corr_cfg, BMI2_GYRO_SELF_OFF, dev);
 8006a90:	f107 0308 	add.w	r3, r7, #8
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	2122      	movs	r1, #34	@ 0x22
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fd ffa8 	bl	80049ee <bmi2_extract_input_feat_config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006aa2:	7f7b      	ldrb	r3, [r7, #29]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d04a      	beq.n	8006b3e <set_gyro_self_offset_corr+0xda>
    {
        /* Get the configuration from the page where self-offset
         * correction feature resides
         */
        rslt = bmi2_get_feat_config(self_off_corr_cfg.page, feat_config, dev);
 8006aa8:	7a7b      	ldrb	r3, [r7, #9]
 8006aaa:	f107 010c 	add.w	r1, r7, #12
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fd ff0a 	bl	80048ca <bmi2_get_feat_config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006aba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d13f      	bne.n	8006b42 <set_gyro_self_offset_corr+0xde>
        {
            /* Define the offset for enable/disable of self-offset correction */
            idx = self_off_corr_cfg.start_addr;
 8006ac2:	7abb      	ldrb	r3, [r7, #10]
 8006ac4:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_GYR_SELF_OFF_CORR_FEAT_EN, enable);
 8006ac6:	7fbb      	ldrb	r3, [r7, #30]
 8006ac8:	3320      	adds	r3, #32
 8006aca:	443b      	add	r3, r7
 8006acc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006ad0:	b25b      	sxtb	r3, r3
 8006ad2:	f023 0302 	bic.w	r3, r3, #2
 8006ad6:	b25a      	sxtb	r2, r3
 8006ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	b25b      	sxtb	r3, r3
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	b25b      	sxtb	r3, r3
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	b25a      	sxtb	r2, r3
 8006aea:	7fbb      	ldrb	r3, [r7, #30]
 8006aec:	b2d2      	uxtb	r2, r2
 8006aee:	3320      	adds	r3, #32
 8006af0:	443b      	add	r3, r7
 8006af2:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006af6:	f107 010c 	add.w	r1, r7, #12
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2210      	movs	r2, #16
 8006afe:	2030      	movs	r0, #48	@ 0x30
 8006b00:	f7fd f9ab 	bl	8003e5a <bmi2_set_regs>
 8006b04:	4603      	mov	r3, r0
 8006b06:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006b08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10c      	bne.n	8006b2a <set_gyro_self_offset_corr+0xc6>
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d109      	bne.n	8006b2a <set_gyro_self_offset_corr+0xc6>
            {
                dev->sens_en_stat |= BMI2_GYRO_SELF_OFF_SEL;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006b1c:	4690      	mov	r8, r2
 8006b1e:	f043 0904 	orr.w	r9, r3, #4
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006b28:	e00b      	b.n	8006b42 <set_gyro_self_offset_corr+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_GYRO_SELF_OFF_SEL;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006b30:	4614      	mov	r4, r2
 8006b32:	f023 0504 	bic.w	r5, r3, #4
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006b3c:	e001      	b.n	8006b42 <set_gyro_self_offset_corr+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006b3e:	23f8      	movs	r3, #248	@ 0xf8
 8006b40:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3720      	adds	r7, #32
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006b50 <set_wrist_gesture>:

/*!
 * @brief This internal API enables the wrist gesture feature.
 */
static int8_t set_wrist_gesture(uint8_t enable, struct bmi2_dev *dev)
{
 8006b50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b54:	b088      	sub	sp, #32
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	4603      	mov	r3, r0
 8006b5a:	6039      	str	r1, [r7, #0]
 8006b5c:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006b5e:	f107 030c 	add.w	r3, r7, #12
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	605a      	str	r2, [r3, #4]
 8006b68:	609a      	str	r2, [r3, #8]
 8006b6a:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_cfg = { 0, 0, 0 };
 8006b70:	2300      	movs	r3, #0
 8006b72:	723b      	strb	r3, [r7, #8]
 8006b74:	2300      	movs	r3, #0
 8006b76:	727b      	strb	r3, [r7, #9]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	72bb      	strb	r3, [r7, #10]

    /* Search for wrist gesture and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_cfg, BMI2_WRIST_GESTURE, dev);
 8006b7c:	f107 0308 	add.w	r3, r7, #8
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	2113      	movs	r1, #19
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fd ff32 	bl	80049ee <bmi2_extract_input_feat_config>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006b8e:	7f7b      	ldrb	r3, [r7, #29]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d04a      	beq.n	8006c2a <set_wrist_gesture+0xda>
    {
        /* Get the configuration from the page where wrist gesture feature resides */
        rslt = bmi2_get_feat_config(wrist_gest_cfg.page, feat_config, dev);
 8006b94:	7a7b      	ldrb	r3, [r7, #9]
 8006b96:	f107 010c 	add.w	r1, r7, #12
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fd fe94 	bl	80048ca <bmi2_get_feat_config>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006ba6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d13f      	bne.n	8006c2e <set_wrist_gesture+0xde>
        {
            /* Define the offset for enable/disable of wrist gesture */
            idx = wrist_gest_cfg.start_addr;
 8006bae:	7abb      	ldrb	r3, [r7, #10]
 8006bb0:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_WRIST_GEST_FEAT_EN, enable);
 8006bb2:	7fbb      	ldrb	r3, [r7, #30]
 8006bb4:	3320      	adds	r3, #32
 8006bb6:	443b      	add	r3, r7
 8006bb8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006bbc:	b25b      	sxtb	r3, r3
 8006bbe:	f023 0320 	bic.w	r3, r3, #32
 8006bc2:	b25a      	sxtb	r2, r3
 8006bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc8:	015b      	lsls	r3, r3, #5
 8006bca:	b25b      	sxtb	r3, r3
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	b25b      	sxtb	r3, r3
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	b25a      	sxtb	r2, r3
 8006bd6:	7fbb      	ldrb	r3, [r7, #30]
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	3320      	adds	r3, #32
 8006bdc:	443b      	add	r3, r7
 8006bde:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006be2:	f107 010c 	add.w	r1, r7, #12
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2210      	movs	r2, #16
 8006bea:	2030      	movs	r0, #48	@ 0x30
 8006bec:	f7fd f935 	bl	8003e5a <bmi2_set_regs>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006bf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10c      	bne.n	8006c16 <set_wrist_gesture+0xc6>
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d109      	bne.n	8006c16 <set_wrist_gesture+0xc6>
            {
                dev->sens_en_stat |= BMI2_WRIST_GEST_SEL;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006c08:	f442 2800 	orr.w	r8, r2, #524288	@ 0x80000
 8006c0c:	4699      	mov	r9, r3
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006c14:	e00b      	b.n	8006c2e <set_wrist_gesture+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_WRIST_GEST_SEL;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006c1c:	f422 2400 	bic.w	r4, r2, #524288	@ 0x80000
 8006c20:	461d      	mov	r5, r3
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006c28:	e001      	b.n	8006c2e <set_wrist_gesture+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006c2a:	23f8      	movs	r3, #248	@ 0xf8
 8006c2c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006c2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3720      	adds	r7, #32
 8006c36:	46bd      	mov	sp, r7
 8006c38:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006c3c <set_wrist_wear_wake_up>:

/*!
 * @brief This internal API enables the wrist wear wake up feature.
 */
static int8_t set_wrist_wear_wake_up(uint8_t enable, struct bmi2_dev *dev)
{
 8006c3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006c40:	b088      	sub	sp, #32
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	4603      	mov	r3, r0
 8006c46:	6039      	str	r1, [r7, #0]
 8006c48:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006c4a:	f107 030c 	add.w	r3, r7, #12
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	605a      	str	r2, [r3, #4]
 8006c54:	609a      	str	r2, [r3, #8]
 8006c56:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake up */
    struct bmi2_feature_config wrist_wake_up_cfg = { 0, 0, 0 };
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	723b      	strb	r3, [r7, #8]
 8006c60:	2300      	movs	r3, #0
 8006c62:	727b      	strb	r3, [r7, #9]
 8006c64:	2300      	movs	r3, #0
 8006c66:	72bb      	strb	r3, [r7, #10]

    /* Search for wrist wear wake up and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_cfg, BMI2_WRIST_WEAR_WAKE_UP, dev);
 8006c68:	f107 0308 	add.w	r3, r7, #8
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	2114      	movs	r1, #20
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fd febc 	bl	80049ee <bmi2_extract_input_feat_config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006c7a:	7f7b      	ldrb	r3, [r7, #29]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d04a      	beq.n	8006d16 <set_wrist_wear_wake_up+0xda>
    {
        /* Get the configuration from the page where wrist wear wake up
         * feature resides
         */
        rslt = bmi2_get_feat_config(wrist_wake_up_cfg.page, feat_config, dev);
 8006c80:	7a7b      	ldrb	r3, [r7, #9]
 8006c82:	f107 010c 	add.w	r1, r7, #12
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fd fe1e 	bl	80048ca <bmi2_get_feat_config>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006c92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d13f      	bne.n	8006d1a <set_wrist_wear_wake_up+0xde>
        {
            /* Define the offset for enable/disable of wrist wear wake up */
            idx = wrist_wake_up_cfg.start_addr;
 8006c9a:	7abb      	ldrb	r3, [r7, #10]
 8006c9c:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_WRIST_WEAR_WAKE_UP_FEAT_EN, enable);
 8006c9e:	7fbb      	ldrb	r3, [r7, #30]
 8006ca0:	3320      	adds	r3, #32
 8006ca2:	443b      	add	r3, r7
 8006ca4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006ca8:	b25b      	sxtb	r3, r3
 8006caa:	f023 0310 	bic.w	r3, r3, #16
 8006cae:	b25a      	sxtb	r2, r3
 8006cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	b25b      	sxtb	r3, r3
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	b25b      	sxtb	r3, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	b25a      	sxtb	r2, r3
 8006cc2:	7fbb      	ldrb	r3, [r7, #30]
 8006cc4:	b2d2      	uxtb	r2, r2
 8006cc6:	3320      	adds	r3, #32
 8006cc8:	443b      	add	r3, r7
 8006cca:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006cce:	f107 010c 	add.w	r1, r7, #12
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2210      	movs	r2, #16
 8006cd6:	2030      	movs	r0, #48	@ 0x30
 8006cd8:	f7fd f8bf 	bl	8003e5a <bmi2_set_regs>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006ce0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10c      	bne.n	8006d02 <set_wrist_wear_wake_up+0xc6>
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d109      	bne.n	8006d02 <set_wrist_wear_wake_up+0xc6>
            {
                dev->sens_en_stat |= BMI2_WRIST_WEAR_WAKE_UP_SEL;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006cf4:	f442 1880 	orr.w	r8, r2, #1048576	@ 0x100000
 8006cf8:	4699      	mov	r9, r3
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006d00:	e00b      	b.n	8006d1a <set_wrist_wear_wake_up+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_WRIST_WEAR_WAKE_UP_SEL;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006d08:	f422 1480 	bic.w	r4, r2, #1048576	@ 0x100000
 8006d0c:	461d      	mov	r5, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006d14:	e001      	b.n	8006d1a <set_wrist_wear_wake_up+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006d16:	23f8      	movs	r3, #248	@ 0xf8
 8006d18:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006d1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006d28 <set_gyro_user_gain>:
/*!
 * @brief This internal API is used to enable/disable gyroscope user gain
 * feature.
 */
static int8_t set_gyro_user_gain(uint8_t enable, struct bmi2_dev *dev)
{
 8006d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006d2c:	b088      	sub	sp, #32
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	4603      	mov	r3, r0
 8006d32:	6039      	str	r1, [r7, #0]
 8006d34:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	605a      	str	r2, [r3, #4]
 8006d40:	609a      	str	r2, [r3, #8]
 8006d42:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for gyroscope user gain */
    struct bmi2_feature_config gyr_user_gain_cfg = { 0, 0, 0 };
 8006d48:	2300      	movs	r3, #0
 8006d4a:	723b      	strb	r3, [r7, #8]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	727b      	strb	r3, [r7, #9]
 8006d50:	2300      	movs	r3, #0
 8006d52:	72bb      	strb	r3, [r7, #10]

    /* Search for user gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&gyr_user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 8006d54:	f107 0308 	add.w	r3, r7, #8
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	2109      	movs	r1, #9
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fd fe46 	bl	80049ee <bmi2_extract_input_feat_config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006d66:	7f7b      	ldrb	r3, [r7, #29]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d04b      	beq.n	8006e04 <set_gyro_user_gain+0xdc>
    {
        /* Get the configuration from the page where user gain feature resides */
        rslt = bmi2_get_feat_config(gyr_user_gain_cfg.page, feat_config, dev);
 8006d6c:	7a7b      	ldrb	r3, [r7, #9]
 8006d6e:	f107 010c 	add.w	r1, r7, #12
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7fd fda8 	bl	80048ca <bmi2_get_feat_config>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006d7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d140      	bne.n	8006e08 <set_gyro_user_gain+0xe0>
        {
            /* Define the offset for enable/disable of user gain */
            idx = gyr_user_gain_cfg.start_addr + BMI2_GYR_USER_GAIN_FEAT_EN_OFFSET;
 8006d86:	7abb      	ldrb	r3, [r7, #10]
 8006d88:	3305      	adds	r3, #5
 8006d8a:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_FEAT_EN, enable);
 8006d8c:	7fbb      	ldrb	r3, [r7, #30]
 8006d8e:	3320      	adds	r3, #32
 8006d90:	443b      	add	r3, r7
 8006d92:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006d96:	b25b      	sxtb	r3, r3
 8006d98:	f023 0308 	bic.w	r3, r3, #8
 8006d9c:	b25a      	sxtb	r2, r3
 8006d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	b25b      	sxtb	r3, r3
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	b25b      	sxtb	r3, r3
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b25a      	sxtb	r2, r3
 8006db0:	7fbb      	ldrb	r3, [r7, #30]
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	3320      	adds	r3, #32
 8006db6:	443b      	add	r3, r7
 8006db8:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006dbc:	f107 010c 	add.w	r1, r7, #12
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2210      	movs	r2, #16
 8006dc4:	2030      	movs	r0, #48	@ 0x30
 8006dc6:	f7fd f848 	bl	8003e5a <bmi2_set_regs>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006dce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10c      	bne.n	8006df0 <set_gyro_user_gain+0xc8>
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d109      	bne.n	8006df0 <set_gyro_user_gain+0xc8>
            {
                dev->sens_en_stat |= BMI2_GYRO_GAIN_UPDATE_SEL;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006de2:	f442 7800 	orr.w	r8, r2, #512	@ 0x200
 8006de6:	4699      	mov	r9, r3
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006dee:	e00b      	b.n	8006e08 <set_gyro_user_gain+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_GYRO_GAIN_UPDATE_SEL;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006df6:	f422 7400 	bic.w	r4, r2, #512	@ 0x200
 8006dfa:	461d      	mov	r5, r3
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006e02:	e001      	b.n	8006e08 <set_gyro_user_gain+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006e04:	23f8      	movs	r3, #248	@ 0xf8
 8006e06:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006e08:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3720      	adds	r7, #32
 8006e10:	46bd      	mov	sp, r7
 8006e12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006e16 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_any_motion_config(const struct bmi2_any_motion_config *config, struct bmi2_dev *dev)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b08a      	sub	sp, #40	@ 0x28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006e20:	f107 030c 	add.w	r3, r7, #12
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	605a      	str	r2, [r3, #4]
 8006e2a:	609a      	str	r2, [r3, #8]
 8006e2c:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	723b      	strb	r3, [r7, #8]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	727b      	strb	r3, [r7, #9]
 8006e42:	2300      	movs	r3, #0
 8006e44:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8006e46:	f107 030c 	add.w	r3, r7, #12
 8006e4a:	623b      	str	r3, [r7, #32]

    /* Search for any-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 8006e4c:	f107 0308 	add.w	r3, r7, #8
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	2104      	movs	r1, #4
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fd fdca 	bl	80049ee <bmi2_extract_input_feat_config>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8006e5e:	7ffb      	ldrb	r3, [r7, #31]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 80d8 	beq.w	8007016 <set_any_motion_config+0x200>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 8006e66:	7a7b      	ldrb	r3, [r7, #9]
 8006e68:	f107 010c 	add.w	r1, r7, #12
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fd fd2b 	bl	80048ca <bmi2_get_feat_config>
 8006e74:	4603      	mov	r3, r0
 8006e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8006e7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f040 80cc 	bne.w	800701c <set_any_motion_config+0x206>
        {
            /* Define the offset in bytes for any-motion select */
            idx = any_mot_config.start_addr;
 8006e84:	7abb      	ldrb	r3, [r7, #10]
 8006e86:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8006e8a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 8006e94:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	6a3a      	ldr	r2, [r7, #32]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b21b      	sxth	r3, r3
 8006ea2:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006ea6:	f023 031f 	bic.w	r3, r3, #31
 8006eaa:	b21a      	sxth	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b21b      	sxth	r3, r3
 8006eb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eb6:	b21b      	sxth	r3, r3
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	b219      	sxth	r1, r3
 8006ebc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	6a3a      	ldr	r2, [r7, #32]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	b28a      	uxth	r2, r1
 8006ec8:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 8006eca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b21b      	sxth	r3, r3
 8006ed8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006edc:	b21a      	sxth	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	889b      	ldrh	r3, [r3, #4]
 8006ee2:	b21b      	sxth	r3, r3
 8006ee4:	035b      	lsls	r3, r3, #13
 8006ee6:	b21b      	sxth	r3, r3
 8006ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006eec:	b21b      	sxth	r3, r3
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	b219      	sxth	r1, r3
 8006ef2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	6a3a      	ldr	r2, [r7, #32]
 8006efa:	4413      	add	r3, r2
 8006efc:	b28a      	uxth	r2, r1
 8006efe:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 8006f00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	6a3a      	ldr	r2, [r7, #32]
 8006f08:	4413      	add	r3, r2
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	b21b      	sxth	r3, r3
 8006f0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f12:	b21a      	sxth	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	88db      	ldrh	r3, [r3, #6]
 8006f18:	b21b      	sxth	r3, r3
 8006f1a:	039b      	lsls	r3, r3, #14
 8006f1c:	b21b      	sxth	r3, r3
 8006f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f22:	b21b      	sxth	r3, r3
 8006f24:	4313      	orrs	r3, r2
 8006f26:	b219      	sxth	r1, r3
 8006f28:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	6a3a      	ldr	r2, [r7, #32]
 8006f30:	4413      	add	r3, r2
 8006f32:	b28a      	uxth	r2, r1
 8006f34:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 8006f36:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	6a3a      	ldr	r2, [r7, #32]
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b21b      	sxth	r3, r3
 8006f44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006f48:	b21a      	sxth	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	891b      	ldrh	r3, [r3, #8]
 8006f4e:	b21b      	sxth	r3, r3
 8006f50:	03db      	lsls	r3, r3, #15
 8006f52:	b21b      	sxth	r3, r3
 8006f54:	4313      	orrs	r3, r2
 8006f56:	b219      	sxth	r1, r3
 8006f58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	6a3a      	ldr	r2, [r7, #32]
 8006f60:	4413      	add	r3, r2
 8006f62:	b28a      	uxth	r2, r1
 8006f64:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 8006f66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 8006f70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	6a3a      	ldr	r2, [r7, #32]
 8006f78:	4413      	add	r3, r2
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b21b      	sxth	r3, r3
 8006f7e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006f82:	f023 0307 	bic.w	r3, r3, #7
 8006f86:	b21a      	sxth	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	885b      	ldrh	r3, [r3, #2]
 8006f8c:	b21b      	sxth	r3, r3
 8006f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f92:	b21b      	sxth	r3, r3
 8006f94:	4313      	orrs	r3, r2
 8006f96:	b219      	sxth	r1, r3
 8006f98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	6a3a      	ldr	r2, [r7, #32]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	b28a      	uxth	r2, r1
 8006fa4:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8006fa6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006faa:	3301      	adds	r3, #1
 8006fac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - any_mot_config.start_addr;
 8006fb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	7abb      	ldrb	r3, [r7, #10]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006fc6:	e015      	b.n	8006ff4 <set_any_motion_config+0x1de>
            {
                feat_config[any_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 8006fc8:	7abb      	ldrb	r3, [r7, #10]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fd0:	4413      	add	r3, r2
 8006fd2:	6a3a      	ldr	r2, [r7, #32]
 8006fd4:	441a      	add	r2, r3
                feat_config[any_mot_config.start_addr +
 8006fd6:	7abb      	ldrb	r3, [r7, #10]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fde:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 8006fe0:	7812      	ldrb	r2, [r2, #0]
 8006fe2:	3328      	adds	r3, #40	@ 0x28
 8006fe4:	443b      	add	r3, r7
 8006fe6:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8006fea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fee:	3301      	adds	r3, #1
 8006ff0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006ff4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006ff8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d3e3      	bcc.n	8006fc8 <set_any_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8007000:	f107 010c 	add.w	r1, r7, #12
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2210      	movs	r2, #16
 8007008:	2030      	movs	r0, #48	@ 0x30
 800700a:	f7fc ff26 	bl	8003e5a <bmi2_set_regs>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007014:	e002      	b.n	800701c <set_any_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007016:	23f8      	movs	r3, #248	@ 0xf8
 8007018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800701c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007020:	4618      	mov	r0, r3
 8007022:	3728      	adds	r7, #40	@ 0x28
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_no_motion_config(const struct bmi2_no_motion_config *config, struct bmi2_dev *dev)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	@ 0x28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007032:	f107 030c 	add.w	r3, r7, #12
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	605a      	str	r2, [r3, #4]
 800703c:	609a      	str	r2, [r3, #8]
 800703e:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 800704c:	2300      	movs	r3, #0
 800704e:	723b      	strb	r3, [r7, #8]
 8007050:	2300      	movs	r3, #0
 8007052:	727b      	strb	r3, [r7, #9]
 8007054:	2300      	movs	r3, #0
 8007056:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8007058:	f107 030c 	add.w	r3, r7, #12
 800705c:	623b      	str	r3, [r7, #32]

    /* Search for no-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 800705e:	f107 0308 	add.w	r3, r7, #8
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	2105      	movs	r1, #5
 8007066:	4618      	mov	r0, r3
 8007068:	f7fd fcc1 	bl	80049ee <bmi2_extract_input_feat_config>
 800706c:	4603      	mov	r3, r0
 800706e:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007070:	7ffb      	ldrb	r3, [r7, #31]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 80d8 	beq.w	8007228 <set_no_motion_config+0x200>
    {
        /* Get the configuration from the page where no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 8007078:	7a7b      	ldrb	r3, [r7, #9]
 800707a:	f107 010c 	add.w	r1, r7, #12
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	4618      	mov	r0, r3
 8007082:	f7fd fc22 	bl	80048ca <bmi2_get_feat_config>
 8007086:	4603      	mov	r3, r0
 8007088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800708c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007090:	2b00      	cmp	r3, #0
 8007092:	f040 80cc 	bne.w	800722e <set_no_motion_config+0x206>
        {
            /* Define the offset in bytes for no-motion select */
            idx = no_mot_config.start_addr;
 8007096:	7abb      	ldrb	r3, [r7, #10]
 8007098:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 800709c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 80070a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	6a3a      	ldr	r2, [r7, #32]
 80070ae:	4413      	add	r3, r2
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	b21b      	sxth	r3, r3
 80070b4:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80070b8:	f023 031f 	bic.w	r3, r3, #31
 80070bc:	b21a      	sxth	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b21b      	sxth	r3, r3
 80070c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c8:	b21b      	sxth	r3, r3
 80070ca:	4313      	orrs	r3, r2
 80070cc:	b219      	sxth	r1, r3
 80070ce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	6a3a      	ldr	r2, [r7, #32]
 80070d6:	4413      	add	r3, r2
 80070d8:	b28a      	uxth	r2, r1
 80070da:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 80070dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	6a3a      	ldr	r2, [r7, #32]
 80070e4:	4413      	add	r3, r2
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	b21b      	sxth	r3, r3
 80070ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070ee:	b21a      	sxth	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	889b      	ldrh	r3, [r3, #4]
 80070f4:	b21b      	sxth	r3, r3
 80070f6:	035b      	lsls	r3, r3, #13
 80070f8:	b21b      	sxth	r3, r3
 80070fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070fe:	b21b      	sxth	r3, r3
 8007100:	4313      	orrs	r3, r2
 8007102:	b219      	sxth	r1, r3
 8007104:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	6a3a      	ldr	r2, [r7, #32]
 800710c:	4413      	add	r3, r2
 800710e:	b28a      	uxth	r2, r1
 8007110:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 8007112:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	6a3a      	ldr	r2, [r7, #32]
 800711a:	4413      	add	r3, r2
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b21b      	sxth	r3, r3
 8007120:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007124:	b21a      	sxth	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	88db      	ldrh	r3, [r3, #6]
 800712a:	b21b      	sxth	r3, r3
 800712c:	039b      	lsls	r3, r3, #14
 800712e:	b21b      	sxth	r3, r3
 8007130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007134:	b21b      	sxth	r3, r3
 8007136:	4313      	orrs	r3, r2
 8007138:	b219      	sxth	r1, r3
 800713a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	6a3a      	ldr	r2, [r7, #32]
 8007142:	4413      	add	r3, r2
 8007144:	b28a      	uxth	r2, r1
 8007146:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 8007148:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	6a3a      	ldr	r2, [r7, #32]
 8007150:	4413      	add	r3, r2
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	b21b      	sxth	r3, r3
 8007156:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800715a:	b21a      	sxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	891b      	ldrh	r3, [r3, #8]
 8007160:	b21b      	sxth	r3, r3
 8007162:	03db      	lsls	r3, r3, #15
 8007164:	b21b      	sxth	r3, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	b219      	sxth	r1, r3
 800716a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	6a3a      	ldr	r2, [r7, #32]
 8007172:	4413      	add	r3, r2
 8007174:	b28a      	uxth	r2, r1
 8007176:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 8007178:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800717c:	3301      	adds	r3, #1
 800717e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 8007182:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	6a3a      	ldr	r2, [r7, #32]
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b21b      	sxth	r3, r3
 8007190:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007194:	f023 0307 	bic.w	r3, r3, #7
 8007198:	b21a      	sxth	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	885b      	ldrh	r3, [r3, #2]
 800719e:	b21b      	sxth	r3, r3
 80071a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071a4:	b21b      	sxth	r3, r3
 80071a6:	4313      	orrs	r3, r2
 80071a8:	b219      	sxth	r1, r3
 80071aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	6a3a      	ldr	r2, [r7, #32]
 80071b2:	4413      	add	r3, r2
 80071b4:	b28a      	uxth	r2, r1
 80071b6:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80071b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071bc:	3301      	adds	r3, #1
 80071be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - no_mot_config.start_addr;
 80071c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	7abb      	ldrb	r3, [r7, #10]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80071d8:	e015      	b.n	8007206 <set_no_motion_config+0x1de>
            {
                feat_config[no_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 80071da:	7abb      	ldrb	r3, [r7, #10]
 80071dc:	461a      	mov	r2, r3
 80071de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071e2:	4413      	add	r3, r2
 80071e4:	6a3a      	ldr	r2, [r7, #32]
 80071e6:	441a      	add	r2, r3
                feat_config[no_mot_config.start_addr +
 80071e8:	7abb      	ldrb	r3, [r7, #10]
 80071ea:	4619      	mov	r1, r3
 80071ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071f0:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	3328      	adds	r3, #40	@ 0x28
 80071f6:	443b      	add	r3, r7
 80071f8:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 80071fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007200:	3301      	adds	r3, #1
 8007202:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007206:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800720a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800720e:	429a      	cmp	r2, r3
 8007210:	d3e3      	bcc.n	80071da <set_no_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8007212:	f107 010c 	add.w	r1, r7, #12
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2210      	movs	r2, #16
 800721a:	2030      	movs	r0, #48	@ 0x30
 800721c:	f7fc fe1d 	bl	8003e5a <bmi2_set_regs>
 8007220:	4603      	mov	r3, r0
 8007222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007226:	e002      	b.n	800722e <set_no_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007228:	23f8      	movs	r3, #248	@ 0xf8
 800722a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800722e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007232:	4618      	mov	r0, r3
 8007234:	3728      	adds	r7, #40	@ 0x28
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block-size,
 * output-configuration and other parameters.
 */
static int8_t set_sig_motion_config(const struct bmi2_sig_motion_config *config, struct bmi2_dev *dev)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b08a      	sub	sp, #40	@ 0x28
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007244:	f107 030c 	add.w	r3, r7, #12
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	609a      	str	r2, [r3, #8]
 8007250:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 800725e:	2300      	movs	r3, #0
 8007260:	723b      	strb	r3, [r7, #8]
 8007262:	2300      	movs	r3, #0
 8007264:	727b      	strb	r3, [r7, #9]
 8007266:	2300      	movs	r3, #0
 8007268:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 800726a:	f107 030c 	add.w	r3, r7, #12
 800726e:	623b      	str	r3, [r7, #32]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 8007270:	f107 0308 	add.w	r3, r7, #8
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	2103      	movs	r1, #3
 8007278:	4618      	mov	r0, r3
 800727a:	f7fd fbb8 	bl	80049ee <bmi2_extract_input_feat_config>
 800727e:	4603      	mov	r3, r0
 8007280:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007282:	7ffb      	ldrb	r3, [r7, #31]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d055      	beq.n	8007334 <set_sig_motion_config+0xfa>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 8007288:	7a7b      	ldrb	r3, [r7, #9]
 800728a:	f107 010c 	add.w	r1, r7, #12
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f7fd fb1a 	bl	80048ca <bmi2_get_feat_config>
 8007296:	4603      	mov	r3, r0
 8007298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800729c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d14a      	bne.n	800733a <set_sig_motion_config+0x100>
        {
            /* Define the offset in bytes for sig-motion select */
            idx = sig_mot_config.start_addr;
 80072a4:	7abb      	ldrb	r3, [r7, #10]
 80072a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80072aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set parameter 1 */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_SIG_MOT_PARAM_1, config->block_size);
 80072b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	6a3a      	ldr	r2, [r7, #32]
 80072bc:	4413      	add	r3, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	8812      	ldrh	r2, [r2, #0]
 80072c2:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80072c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072c8:	3301      	adds	r3, #1
 80072ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - sig_mot_config.start_addr;
 80072ce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	7abb      	ldrb	r3, [r7, #10]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 80072de:	2300      	movs	r3, #0
 80072e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80072e4:	e015      	b.n	8007312 <set_sig_motion_config+0xd8>
            {
                feat_config[sig_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 80072e6:	7abb      	ldrb	r3, [r7, #10]
 80072e8:	461a      	mov	r2, r3
 80072ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072ee:	4413      	add	r3, r2
 80072f0:	6a3a      	ldr	r2, [r7, #32]
 80072f2:	441a      	add	r2, r3
                feat_config[sig_mot_config.start_addr +
 80072f4:	7abb      	ldrb	r3, [r7, #10]
 80072f6:	4619      	mov	r1, r3
 80072f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072fc:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 80072fe:	7812      	ldrb	r2, [r2, #0]
 8007300:	3328      	adds	r3, #40	@ 0x28
 8007302:	443b      	add	r3, r7
 8007304:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8007308:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800730c:	3301      	adds	r3, #1
 800730e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007312:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007316:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800731a:	429a      	cmp	r2, r3
 800731c:	d3e3      	bcc.n	80072e6 <set_sig_motion_config+0xac>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800731e:	f107 010c 	add.w	r1, r7, #12
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2210      	movs	r2, #16
 8007326:	2030      	movs	r0, #48	@ 0x30
 8007328:	f7fc fd97 	bl	8003e5a <bmi2_set_regs>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007332:	e002      	b.n	800733a <set_sig_motion_config+0x100>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007334:	23f8      	movs	r3, #248	@ 0xf8
 8007336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800733a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800733e:	4618      	mov	r0, r3
 8007340:	3728      	adds	r7, #40	@ 0x28
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <set_step_count_params_config>:

/*!
 * @brief This internal API sets step counter parameter configurations.
 */
static int8_t set_step_count_params_config(const uint16_t *step_count_params, struct bmi2_dev *dev)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b08c      	sub	sp, #48	@ 0x30
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007356:	f107 030c 	add.w	r3, r7, #12
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	605a      	str	r2, [r3, #4]
 8007360:	609a      	str	r2, [r3, #8]
 8007362:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t index = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter parameters */
    struct bmi2_feature_config step_params_config = { 0, 0, 0 };
 800736a:	2300      	movs	r3, #0
 800736c:	723b      	strb	r3, [r7, #8]
 800736e:	2300      	movs	r3, #0
 8007370:	727b      	strb	r3, [r7, #9]
 8007372:	2300      	movs	r3, #0
 8007374:	72bb      	strb	r3, [r7, #10]

    /* Variable to define start address of the parameters */
    uint8_t start_addr;

    /* Variable to define number of bytes */
    uint8_t n_bytes = (BMI2_STEP_CNT_N_PARAMS * 2);
 8007376:	2332      	movs	r3, #50	@ 0x32
 8007378:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    /* Variable to store number of pages */
    uint8_t n_pages = (n_bytes / 16);
 800737c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007380:	091b      	lsrs	r3, r3, #4
 8007382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Variable to define the remaining bytes to be read */
    uint8_t remain_len;

    /* Variable to define the maximum words(16 bytes or 8 words) to be read in a page */
    uint8_t max_len = 8;
 8007386:	2308      	movs	r3, #8
 8007388:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    /* Variable index bytes in a page */
    uint8_t page_byte_idx;

    /* Variable to index the parameters */
    uint8_t param_idx = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8007392:	f107 030c 	add.w	r3, r7, #12
 8007396:	623b      	str	r3, [r7, #32]

    /* Search for step counter parameter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_params_config, BMI2_STEP_COUNTER_PARAMS, dev);
 8007398:	f107 0308 	add.w	r3, r7, #8
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	211d      	movs	r1, #29
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fd fb24 	bl	80049ee <bmi2_extract_input_feat_config>
 80073a6:	4603      	mov	r3, r0
 80073a8:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80073aa:	7ffb      	ldrb	r3, [r7, #31]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8099 	beq.w	80074e4 <set_step_count_params_config+0x19e>
    {
        /* Get the start page for the step counter parameters */
        start_page = step_params_config.page;
 80073b2:	7a7b      	ldrb	r3, [r7, #9]
 80073b4:	77bb      	strb	r3, [r7, #30]

        /* Get the end page for the step counter parameters */
        end_page = start_page + n_pages;
 80073b6:	7fba      	ldrb	r2, [r7, #30]
 80073b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073bc:	4413      	add	r3, r2
 80073be:	777b      	strb	r3, [r7, #29]

        /* Get the start address for the step counter parameters */
        start_addr = step_params_config.start_addr;
 80073c0:	7abb      	ldrb	r3, [r7, #10]
 80073c2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Get the remaining length of bytes to be read */
        remain_len = (uint8_t)((n_bytes - (n_pages * 16)) + start_addr);
 80073c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073da:	4413      	add	r3, r2
 80073dc:	773b      	strb	r3, [r7, #28]
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 80073de:	7fbb      	ldrb	r3, [r7, #30]
 80073e0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80073e4:	e078      	b.n	80074d8 <set_step_count_params_config+0x192>
        {
            /* Get the configuration from the respective page */
            rslt = bmi2_get_feat_config(page_idx, feat_config, dev);
 80073e6:	f107 010c 	add.w	r1, r7, #12
 80073ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fd fa6a 	bl	80048ca <bmi2_get_feat_config>
 80073f6:	4603      	mov	r3, r0
 80073f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMI2_OK)
 80073fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007400:	2b00      	cmp	r3, #0
 8007402:	d164      	bne.n	80074ce <set_step_count_params_config+0x188>
            {
                /* Start from address 0x00 when switched to next page */
                if (page_idx > start_page)
 8007404:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007408:	7fbb      	ldrb	r3, [r7, #30]
 800740a:	429a      	cmp	r2, r3
 800740c:	d902      	bls.n	8007414 <set_step_count_params_config+0xce>
                {
                    start_addr = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                /* Remaining number of words to be read in the page  */
                if (page_idx == end_page)
 8007414:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007418:	7f7b      	ldrb	r3, [r7, #29]
 800741a:	429a      	cmp	r2, r3
 800741c:	d103      	bne.n	8007426 <set_step_count_params_config+0xe0>
                {
                    max_len = (remain_len / 2);
 800741e:	7f3b      	ldrb	r3, [r7, #28]
 8007420:	085b      	lsrs	r3, r3, #1
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* Get offset in words since all the features are set in words length */
                page_byte_idx = start_addr / 2;
 8007426:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                for (; page_byte_idx < max_len;)
 8007430:	e015      	b.n	800745e <set_step_count_params_config+0x118>
                {
                    /* Set parameters 1 to 25 */
                    *(data_p + page_byte_idx) = BMI2_SET_BIT_POS0(*(data_p + page_byte_idx),
 8007432:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	441a      	add	r2, r3
 800743c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	6a39      	ldr	r1, [r7, #32]
 8007444:	440b      	add	r3, r1
 8007446:	8812      	ldrh	r2, [r2, #0]
 8007448:	801a      	strh	r2, [r3, #0]
                                                                  BMI2_STEP_COUNT_PARAMS,
                                                                  step_count_params[param_idx]);

                    /* Increment offset by 1 word to set to the next parameter */
                    page_byte_idx++;
 800744a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800744e:	3301      	adds	r3, #1
 8007450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                    /* Increment to next parameter */
                    param_idx++;
 8007454:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007458:	3301      	adds	r3, #1
 800745a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                for (; page_byte_idx < max_len;)
 800745e:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8007462:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007466:	429a      	cmp	r2, r3
 8007468:	d3e3      	bcc.n	8007432 <set_step_count_params_config+0xec>
                }

                /* Get total length in bytes to copy from local pointer to the array */
                page_byte_idx = (uint8_t)(page_byte_idx * 2) - step_params_config.start_addr;
 800746a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	b2da      	uxtb	r2, r3
 8007472:	7abb      	ldrb	r3, [r7, #10]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                /* Copy the bytes to be set back to the array */
                for (index = 0; index < page_byte_idx; index++)
 800747a:	2300      	movs	r3, #0
 800747c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007480:	e015      	b.n	80074ae <set_step_count_params_config+0x168>
                {
                    feat_config[step_params_config.start_addr +
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 8007482:	7abb      	ldrb	r3, [r7, #10]
 8007484:	461a      	mov	r2, r3
 8007486:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800748a:	4413      	add	r3, r2
 800748c:	6a3a      	ldr	r2, [r7, #32]
 800748e:	441a      	add	r2, r3
                    feat_config[step_params_config.start_addr +
 8007490:	7abb      	ldrb	r3, [r7, #10]
 8007492:	4619      	mov	r1, r3
 8007494:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007498:	440b      	add	r3, r1
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 800749a:	7812      	ldrb	r2, [r2, #0]
 800749c:	3330      	adds	r3, #48	@ 0x30
 800749e:	443b      	add	r3, r7
 80074a0:	f803 2c24 	strb.w	r2, [r3, #-36]
                for (index = 0; index < page_byte_idx; index++)
 80074a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80074a8:	3301      	adds	r3, #1
 80074aa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80074ae:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80074b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d3e3      	bcc.n	8007482 <set_step_count_params_config+0x13c>
                }

                /* Set the configuration back to the page */
                rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80074ba:	f107 010c 	add.w	r1, r7, #12
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2210      	movs	r2, #16
 80074c2:	2030      	movs	r0, #48	@ 0x30
 80074c4:	f7fc fcc9 	bl	8003e5a <bmi2_set_regs>
 80074c8:	4603      	mov	r3, r0
 80074ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 80074ce:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80074d2:	3301      	adds	r3, #1
 80074d4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80074d8:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80074dc:	7f7b      	ldrb	r3, [r7, #29]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d981      	bls.n	80073e6 <set_step_count_params_config+0xa0>
 80074e2:	e002      	b.n	80074ea <set_step_count_params_config+0x1a4>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80074e4:	23f8      	movs	r3, #248	@ 0xf8
 80074e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 80074ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3730      	adds	r7, #48	@ 0x30
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <set_step_config>:

/* @brief This internal API sets step counter configurations like water-mark
 * level, reset-counter and output-configuration step detector and activity.
 */
static int8_t set_step_config(const struct bmi2_step_config *config, struct bmi2_dev *dev)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b08a      	sub	sp, #40	@ 0x28
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007500:	f107 030c 	add.w	r3, r7, #12
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	609a      	str	r2, [r3, #8]
 800750c:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter 4 */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 800751a:	2300      	movs	r3, #0
 800751c:	723b      	strb	r3, [r7, #8]
 800751e:	2300      	movs	r3, #0
 8007520:	727b      	strb	r3, [r7, #9]
 8007522:	2300      	movs	r3, #0
 8007524:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8007526:	f107 030c 	add.w	r3, r7, #12
 800752a:	623b      	str	r3, [r7, #32]

    /* Search for step counter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 800752c:	f107 0308 	add.w	r3, r7, #8
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	2107      	movs	r1, #7
 8007534:	4618      	mov	r0, r3
 8007536:	f7fd fa5a 	bl	80049ee <bmi2_extract_input_feat_config>
 800753a:	4603      	mov	r3, r0
 800753c:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 800753e:	7ffb      	ldrb	r3, [r7, #31]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 8084 	beq.w	800764e <set_step_config+0x158>
    {
        /* Get the configuration from the page where step counter resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 8007546:	7a7b      	ldrb	r3, [r7, #9]
 8007548:	f107 010c 	add.w	r1, r7, #12
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f7fd f9bb 	bl	80048ca <bmi2_get_feat_config>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800755a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800755e:	2b00      	cmp	r3, #0
 8007560:	d178      	bne.n	8007654 <set_step_config+0x15e>
        {
            /* Define the offset in bytes */
            idx = step_count_config.start_addr;
 8007562:	7abb      	ldrb	r3, [r7, #10]
 8007564:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8007568:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set water-mark level */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_STEP_COUNT_WM_LEVEL, config->watermark_level);
 8007572:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	6a3a      	ldr	r2, [r7, #32]
 800757a:	4413      	add	r3, r2
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	b21b      	sxth	r3, r3
 8007580:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007584:	f023 0303 	bic.w	r3, r3, #3
 8007588:	b21a      	sxth	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	b21b      	sxth	r3, r3
 8007590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007594:	b21b      	sxth	r3, r3
 8007596:	4313      	orrs	r3, r2
 8007598:	b219      	sxth	r1, r3
 800759a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	6a3a      	ldr	r2, [r7, #32]
 80075a2:	4413      	add	r3, r2
 80075a4:	b28a      	uxth	r2, r1
 80075a6:	801a      	strh	r2, [r3, #0]

            /* Set reset-counter */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_STEP_COUNT_RST_CNT, config->reset_counter);
 80075a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	6a3a      	ldr	r2, [r7, #32]
 80075b0:	4413      	add	r3, r2
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b21b      	sxth	r3, r3
 80075b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075ba:	b21a      	sxth	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	885b      	ldrh	r3, [r3, #2]
 80075c0:	b21b      	sxth	r3, r3
 80075c2:	029b      	lsls	r3, r3, #10
 80075c4:	b21b      	sxth	r3, r3
 80075c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075ca:	b21b      	sxth	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b219      	sxth	r1, r3
 80075d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	6a3a      	ldr	r2, [r7, #32]
 80075d8:	4413      	add	r3, r2
 80075da:	b28a      	uxth	r2, r1
 80075dc:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word  to set output
             * configuration of step detector and step activity
             */
            idx++;
 80075de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075e2:	3301      	adds	r3, #1
 80075e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - step_count_config.start_addr;
 80075e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	7abb      	ldrb	r3, [r7, #10]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 80075f8:	2300      	movs	r3, #0
 80075fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80075fe:	e015      	b.n	800762c <set_step_config+0x136>
            {
                feat_config[step_count_config.start_addr +
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 8007600:	7abb      	ldrb	r3, [r7, #10]
 8007602:	461a      	mov	r2, r3
 8007604:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007608:	4413      	add	r3, r2
 800760a:	6a3a      	ldr	r2, [r7, #32]
 800760c:	441a      	add	r2, r3
                feat_config[step_count_config.start_addr +
 800760e:	7abb      	ldrb	r3, [r7, #10]
 8007610:	4619      	mov	r1, r3
 8007612:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007616:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 8007618:	7812      	ldrb	r2, [r2, #0]
 800761a:	3328      	adds	r3, #40	@ 0x28
 800761c:	443b      	add	r3, r7
 800761e:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8007622:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007626:	3301      	adds	r3, #1
 8007628:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800762c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007630:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007634:	429a      	cmp	r2, r3
 8007636:	d3e3      	bcc.n	8007600 <set_step_config+0x10a>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8007638:	f107 010c 	add.w	r1, r7, #12
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2210      	movs	r2, #16
 8007640:	2030      	movs	r0, #48	@ 0x30
 8007642:	f7fc fc0a 	bl	8003e5a <bmi2_set_regs>
 8007646:	4603      	mov	r3, r0
 8007648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800764c:	e002      	b.n	8007654 <set_step_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800764e:	23f8      	movs	r3, #248	@ 0xf8
 8007650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007654:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007658:	4618      	mov	r0, r3
 800765a:	3728      	adds	r7, #40	@ 0x28
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <set_wrist_gest_config>:
/*!
 * @brief This internal API sets wrist gesture configurations like wearable-arm,
 * and output-configuration.
 */
static int8_t set_wrist_gest_config(const struct bmi2_wrist_gest_config *config, struct bmi2_dev *dev)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08a      	sub	sp, #40	@ 0x28
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800766a:	f107 030c 	add.w	r3, r7, #12
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	605a      	str	r2, [r3, #4]
 8007674:	609a      	str	r2, [r3, #8]
 8007676:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_config = { 0, 0, 0 };
 8007684:	2300      	movs	r3, #0
 8007686:	723b      	strb	r3, [r7, #8]
 8007688:	2300      	movs	r3, #0
 800768a:	727b      	strb	r3, [r7, #9]
 800768c:	2300      	movs	r3, #0
 800768e:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8007690:	f107 030c 	add.w	r3, r7, #12
 8007694:	623b      	str	r3, [r7, #32]

    /* Search for wrist gesture feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_config, BMI2_WRIST_GESTURE, dev);
 8007696:	f107 0308 	add.w	r3, r7, #8
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	2113      	movs	r1, #19
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fd f9a5 	bl	80049ee <bmi2_extract_input_feat_config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80076a8:	7ffb      	ldrb	r3, [r7, #31]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 8091 	beq.w	80077d2 <set_wrist_gest_config+0x172>
    {
        /* Get the configuration from the page where wrist gesture feature resides */
        rslt = bmi2_get_feat_config(wrist_gest_config.page, feat_config, dev);
 80076b0:	7a7b      	ldrb	r3, [r7, #9]
 80076b2:	f107 010c 	add.w	r1, r7, #12
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fd f906 	bl	80048ca <bmi2_get_feat_config>
 80076be:	4603      	mov	r3, r0
 80076c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80076c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f040 8085 	bne.w	80077d8 <set_wrist_gest_config+0x178>
        {
            /* Define the offset in bytes for gesture select */
            idx = wrist_gest_config.start_addr;
 80076ce:	7abb      	ldrb	r3, [r7, #10]
 80076d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80076d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076d8:	085b      	lsrs	r3, r3, #1
 80076da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set wearable arm */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_WRIST_GEST_WEAR_ARM, config->wearable_arm);
 80076de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	6a3a      	ldr	r2, [r7, #32]
 80076e6:	4413      	add	r3, r2
 80076e8:	881b      	ldrh	r3, [r3, #0]
 80076ea:	b21b      	sxth	r3, r3
 80076ec:	f023 0310 	bic.w	r3, r3, #16
 80076f0:	b21a      	sxth	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b21b      	sxth	r3, r3
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	b21b      	sxth	r3, r3
 80076fc:	f003 0310 	and.w	r3, r3, #16
 8007700:	b21b      	sxth	r3, r3
 8007702:	4313      	orrs	r3, r2
 8007704:	b219      	sxth	r1, r3
 8007706:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	6a3a      	ldr	r2, [r7, #32]
 800770e:	4413      	add	r3, r2
 8007710:	b28a      	uxth	r2, r1
 8007712:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set minimum tilt angle (min_flick_peak) */
            idx++;
 8007714:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007718:	3301      	adds	r3, #1
 800771a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_peak;
 800771e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	6a3a      	ldr	r2, [r7, #32]
 8007726:	4413      	add	r3, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	8852      	ldrh	r2, [r2, #2]
 800772c:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_flick_samples */
            idx++;
 800772e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007732:	3301      	adds	r3, #1
 8007734:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_samples;
 8007738:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	6a3a      	ldr	r2, [r7, #32]
 8007740:	4413      	add	r3, r2
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	8892      	ldrh	r2, [r2, #4]
 8007746:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max time within gesture moment has to be completed */
            idx++;
 8007748:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800774c:	3301      	adds	r3, #1
 800774e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_duration;
 8007752:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	6a3a      	ldr	r2, [r7, #32]
 800775a:	4413      	add	r3, r2
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	88d2      	ldrh	r2, [r2, #6]
 8007760:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8007762:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007766:	3301      	adds	r3, #1
 8007768:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_gest_config.start_addr;
 800776c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	b2da      	uxtb	r2, r3
 8007774:	7abb      	ldrb	r3, [r7, #10]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 800777c:	2300      	movs	r3, #0
 800777e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007782:	e015      	b.n	80077b0 <set_wrist_gest_config+0x150>
            {
                feat_config[wrist_gest_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 8007784:	7abb      	ldrb	r3, [r7, #10]
 8007786:	461a      	mov	r2, r3
 8007788:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800778c:	4413      	add	r3, r2
 800778e:	6a3a      	ldr	r2, [r7, #32]
 8007790:	441a      	add	r2, r3
                feat_config[wrist_gest_config.start_addr +
 8007792:	7abb      	ldrb	r3, [r7, #10]
 8007794:	4619      	mov	r1, r3
 8007796:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800779a:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 800779c:	7812      	ldrb	r2, [r2, #0]
 800779e:	3328      	adds	r3, #40	@ 0x28
 80077a0:	443b      	add	r3, r7
 80077a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 80077a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077aa:	3301      	adds	r3, #1
 80077ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80077b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80077b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d3e3      	bcc.n	8007784 <set_wrist_gest_config+0x124>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80077bc:	f107 010c 	add.w	r1, r7, #12
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2210      	movs	r2, #16
 80077c4:	2030      	movs	r0, #48	@ 0x30
 80077c6:	f7fc fb48 	bl	8003e5a <bmi2_set_regs>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077d0:	e002      	b.n	80077d8 <set_wrist_gest_config+0x178>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80077d2:	23f8      	movs	r3, #248	@ 0xf8
 80077d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80077d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3728      	adds	r7, #40	@ 0x28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <set_wrist_wear_wake_up_config>:
/*!
 * @brief This internal API sets wrist wear wake-up configurations like
 * output-configuration.
 */
static int8_t set_wrist_wear_wake_up_config(const struct bmi2_wrist_wear_wake_up_config *config, struct bmi2_dev *dev)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	@ 0x28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80077ee:	f107 030c 	add.w	r3, r7, #12
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	605a      	str	r2, [r3, #4]
 80077f8:	609a      	str	r2, [r3, #8]
 80077fa:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake-up */
    struct bmi2_feature_config wrist_wake_up_config = { 0, 0, 0 };
 8007808:	2300      	movs	r3, #0
 800780a:	723b      	strb	r3, [r7, #8]
 800780c:	2300      	movs	r3, #0
 800780e:	727b      	strb	r3, [r7, #9]
 8007810:	2300      	movs	r3, #0
 8007812:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8007814:	f107 030c 	add.w	r3, r7, #12
 8007818:	623b      	str	r3, [r7, #32]

    /* Search for wrist wear wake-up feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_config, BMI2_WRIST_WEAR_WAKE_UP, dev);
 800781a:	f107 0308 	add.w	r3, r7, #8
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	2114      	movs	r1, #20
 8007822:	4618      	mov	r0, r3
 8007824:	f7fd f8e3 	bl	80049ee <bmi2_extract_input_feat_config>
 8007828:	4603      	mov	r3, r0
 800782a:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 800782c:	7ffb      	ldrb	r3, [r7, #31]
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 809d 	beq.w	800796e <set_wrist_wear_wake_up_config+0x18a>
    {
        /* Get the configuration from the page where wrist wear wake-up feature resides */
        rslt = bmi2_get_feat_config(wrist_wake_up_config.page, feat_config, dev);
 8007834:	7a7b      	ldrb	r3, [r7, #9]
 8007836:	f107 010c 	add.w	r1, r7, #12
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f7fd f844 	bl	80048ca <bmi2_get_feat_config>
 8007842:	4603      	mov	r3, r0
 8007844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007848:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 8091 	bne.w	8007974 <set_wrist_wear_wake_up_config+0x190>
        {
            /* Define the offset in bytes for wrist wear wake-up select */
            idx = wrist_wake_up_config.start_addr;
 8007852:	7abb      	ldrb	r3, [r7, #10]
 8007854:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8007858:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800785c:	085b      	lsrs	r3, r3, #1
 800785e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Increment offset by 1 more word to set min_angle_focus */
            idx++;
 8007862:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007866:	3301      	adds	r3, #1
 8007868:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            *(data_p + idx) = config->min_angle_focus;
 800786c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	6a3a      	ldr	r2, [r7, #32]
 8007874:	4413      	add	r3, r2
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	8812      	ldrh	r2, [r2, #0]
 800787a:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_angle_nonfocus */
            idx++;
 800787c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007880:	3301      	adds	r3, #1
 8007882:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_angle_nonfocus;
 8007886:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	4413      	add	r3, r2
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	8852      	ldrh	r2, [r2, #2]
 8007894:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_lr */
            idx++;
 8007896:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800789a:	3301      	adds	r3, #1
 800789c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_lr;
 80078a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	6a3a      	ldr	r2, [r7, #32]
 80078a8:	4413      	add	r3, r2
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	8892      	ldrh	r2, [r2, #4]
 80078ae:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_ll */
            idx++;
 80078b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078b4:	3301      	adds	r3, #1
 80078b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_ll;
 80078ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	6a3a      	ldr	r2, [r7, #32]
 80078c2:	4413      	add	r3, r2
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	88d2      	ldrh	r2, [r2, #6]
 80078c8:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pd */
            idx++;
 80078ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078ce:	3301      	adds	r3, #1
 80078d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pd;
 80078d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	6a3a      	ldr	r2, [r7, #32]
 80078dc:	4413      	add	r3, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	8912      	ldrh	r2, [r2, #8]
 80078e2:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pu */
            idx++;
 80078e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078e8:	3301      	adds	r3, #1
 80078ea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pu;
 80078ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	6a3a      	ldr	r2, [r7, #32]
 80078f6:	4413      	add	r3, r2
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	8952      	ldrh	r2, [r2, #10]
 80078fc:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80078fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007902:	3301      	adds	r3, #1
 8007904:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_wake_up_config.start_addr;
 8007908:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	b2da      	uxtb	r2, r3
 8007910:	7abb      	ldrb	r3, [r7, #10]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8007918:	2300      	movs	r3, #0
 800791a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800791e:	e015      	b.n	800794c <set_wrist_wear_wake_up_config+0x168>
            {
                feat_config[wrist_wake_up_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8007920:	7abb      	ldrb	r3, [r7, #10]
 8007922:	461a      	mov	r2, r3
 8007924:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007928:	4413      	add	r3, r2
 800792a:	6a3a      	ldr	r2, [r7, #32]
 800792c:	441a      	add	r2, r3
                feat_config[wrist_wake_up_config.start_addr +
 800792e:	7abb      	ldrb	r3, [r7, #10]
 8007930:	4619      	mov	r1, r3
 8007932:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007936:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8007938:	7812      	ldrb	r2, [r2, #0]
 800793a:	3328      	adds	r3, #40	@ 0x28
 800793c:	443b      	add	r3, r7
 800793e:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8007942:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007946:	3301      	adds	r3, #1
 8007948:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800794c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007950:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007954:	429a      	cmp	r2, r3
 8007956:	d3e3      	bcc.n	8007920 <set_wrist_wear_wake_up_config+0x13c>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8007958:	f107 010c 	add.w	r1, r7, #12
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2210      	movs	r2, #16
 8007960:	2030      	movs	r0, #48	@ 0x30
 8007962:	f7fc fa7a 	bl	8003e5a <bmi2_set_regs>
 8007966:	4603      	mov	r3, r0
 8007968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800796c:	e002      	b.n	8007974 <set_wrist_wear_wake_up_config+0x190>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800796e:	23f8      	movs	r3, #248	@ 0xf8
 8007970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007974:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007978:	4618      	mov	r0, r3
 800797a:	3728      	adds	r7, #40	@ 0x28
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <get_any_motion_config>:
/*!
 * @brief This internal API gets any-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t get_any_motion_config(struct bmi2_any_motion_config *config, struct bmi2_dev *dev)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	@ 0x28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800798a:	f107 030c 	add.w	r3, r7, #12
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	605a      	str	r2, [r3, #4]
 8007994:	609a      	str	r2, [r3, #8]
 8007996:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any-motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 800799e:	2300      	movs	r3, #0
 80079a0:	723b      	strb	r3, [r7, #8]
 80079a2:	2300      	movs	r3, #0
 80079a4:	727b      	strb	r3, [r7, #9]
 80079a6:	2300      	movs	r3, #0
 80079a8:	72bb      	strb	r3, [r7, #10]

    /* Search for any-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 80079aa:	f107 0308 	add.w	r3, r7, #8
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	2104      	movs	r1, #4
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fd f81b 	bl	80049ee <bmi2_extract_input_feat_config>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (feat_found)
 80079be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d064      	beq.n	8007a90 <get_any_motion_config+0x110>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 80079c6:	7a7b      	ldrb	r3, [r7, #9]
 80079c8:	f107 010c 	add.w	r1, r7, #12
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fc ff7b 	bl	80048ca <bmi2_get_feat_config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80079da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d159      	bne.n	8007a96 <get_any_motion_config+0x116>
        {
            /* Define the offset for feature enable for any-motion */
            idx = any_mot_config.start_addr;
 80079e2:	7abb      	ldrb	r3, [r7, #10]
 80079e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate duration, x, y and z select */
            lsb = (uint16_t) feat_config[idx++];
 80079e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80079f2:	3328      	adds	r3, #40	@ 0x28
 80079f4:	443b      	add	r3, r7
 80079f6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80079fa:	847b      	strh	r3, [r7, #34]	@ 0x22
            msb = ((uint16_t) feat_config[idx++] << 8);
 80079fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007a06:	3328      	adds	r3, #40	@ 0x28
 8007a08:	443b      	add	r3, r7
 8007a0a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	843b      	strh	r3, [r7, #32]
            lsb_msb = lsb | msb;
 8007a12:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007a14:	8c3b      	ldrh	r3, [r7, #32]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	83fb      	strh	r3, [r7, #30]

            /* Get duration */
            config->duration = lsb_msb & BMI2_ANY_NO_MOT_DUR_MASK;
 8007a1a:	8bfb      	ldrh	r3, [r7, #30]
 8007a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	801a      	strh	r2, [r3, #0]

            /* Get x-select */
            config->select_x = (lsb_msb & BMI2_ANY_NO_MOT_X_SEL_MASK) >> BMI2_ANY_NO_MOT_X_SEL_POS;
 8007a26:	8bfb      	ldrh	r3, [r7, #30]
 8007a28:	135b      	asrs	r3, r3, #13
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	809a      	strh	r2, [r3, #4]

            /* Get y-select */
            config->select_y = (lsb_msb & BMI2_ANY_NO_MOT_Y_SEL_MASK) >> BMI2_ANY_NO_MOT_Y_SEL_POS;
 8007a36:	8bfb      	ldrh	r3, [r7, #30]
 8007a38:	139b      	asrs	r3, r3, #14
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	80da      	strh	r2, [r3, #6]

            /* Get z-select */
            config->select_z = (lsb_msb & BMI2_ANY_NO_MOT_Z_SEL_MASK) >> BMI2_ANY_NO_MOT_Z_SEL_POS;
 8007a46:	8bfb      	ldrh	r3, [r7, #30]
 8007a48:	0bdb      	lsrs	r3, r3, #15
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	811a      	strh	r2, [r3, #8]

            /* Get word to calculate threshold, output configuration from the same word */
            lsb = (uint16_t) feat_config[idx++];
 8007a50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007a5a:	3328      	adds	r3, #40	@ 0x28
 8007a5c:	443b      	add	r3, r7
 8007a5e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007a62:	847b      	strh	r3, [r7, #34]	@ 0x22
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007a64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007a6e:	3328      	adds	r3, #40	@ 0x28
 8007a70:	443b      	add	r3, r7
 8007a72:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	843b      	strh	r3, [r7, #32]
            lsb_msb = lsb | msb;
 8007a7a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007a7c:	8c3b      	ldrh	r3, [r7, #32]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	83fb      	strh	r3, [r7, #30]

            /* Get threshold */
            config->threshold = lsb_msb & BMI2_ANY_NO_MOT_THRES_MASK;
 8007a82:	8bfb      	ldrh	r3, [r7, #30]
 8007a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	805a      	strh	r2, [r3, #2]
 8007a8e:	e002      	b.n	8007a96 <get_any_motion_config+0x116>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007a90:	23f8      	movs	r3, #248	@ 0xf8
 8007a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007a96:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3728      	adds	r7, #40	@ 0x28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <get_no_motion_config>:
/*!
 * @brief This internal API gets no-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t get_no_motion_config(struct bmi2_no_motion_config *config, struct bmi2_dev *dev)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b08a      	sub	sp, #40	@ 0x28
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007aac:	f107 030c 	add.w	r3, r7, #12
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	605a      	str	r2, [r3, #4]
 8007ab6:	609a      	str	r2, [r3, #8]
 8007ab8:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 8007acc:	2300      	movs	r3, #0
 8007ace:	723b      	strb	r3, [r7, #8]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	727b      	strb	r3, [r7, #9]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	72bb      	strb	r3, [r7, #10]

    /* Search for no-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 8007ad8:	f107 0308 	add.w	r3, r7, #8
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	2105      	movs	r1, #5
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fc ff84 	bl	80049ee <bmi2_extract_input_feat_config>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007aea:	7ffb      	ldrb	r3, [r7, #31]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d064      	beq.n	8007bba <get_no_motion_config+0x118>
    {
        /* Get the configuration from the page where no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 8007af0:	7a7b      	ldrb	r3, [r7, #9]
 8007af2:	f107 010c 	add.w	r1, r7, #12
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fc fee6 	bl	80048ca <bmi2_get_feat_config>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007b04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d159      	bne.n	8007bc0 <get_no_motion_config+0x11e>
        {
            /* Define the offset for feature enable for no-motion */
            idx = no_mot_config.start_addr;
 8007b0c:	7abb      	ldrb	r3, [r7, #10]
 8007b0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate duration, x, y and z select */
            lsb = (uint16_t) feat_config[idx++];
 8007b12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007b1c:	3328      	adds	r3, #40	@ 0x28
 8007b1e:	443b      	add	r3, r7
 8007b20:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007b24:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007b26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007b30:	3328      	adds	r3, #40	@ 0x28
 8007b32:	443b      	add	r3, r7
 8007b34:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007b38:	021b      	lsls	r3, r3, #8
 8007b3a:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8007b3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007b3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b40:	4313      	orrs	r3, r2
 8007b42:	843b      	strh	r3, [r7, #32]

            /* Get duration */
            config->duration = lsb_msb & BMI2_ANY_NO_MOT_DUR_MASK;
 8007b44:	8c3b      	ldrh	r3, [r7, #32]
 8007b46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	801a      	strh	r2, [r3, #0]

            /* Get x-select */
            config->select_x = (lsb_msb & BMI2_ANY_NO_MOT_X_SEL_MASK) >> BMI2_ANY_NO_MOT_X_SEL_POS;
 8007b50:	8c3b      	ldrh	r3, [r7, #32]
 8007b52:	135b      	asrs	r3, r3, #13
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	809a      	strh	r2, [r3, #4]

            /* Get y-select */
            config->select_y = (lsb_msb & BMI2_ANY_NO_MOT_Y_SEL_MASK) >> BMI2_ANY_NO_MOT_Y_SEL_POS;
 8007b60:	8c3b      	ldrh	r3, [r7, #32]
 8007b62:	139b      	asrs	r3, r3, #14
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	80da      	strh	r2, [r3, #6]

            /* Get z-select */
            config->select_z = (lsb_msb & BMI2_ANY_NO_MOT_Z_SEL_MASK) >> BMI2_ANY_NO_MOT_Z_SEL_POS;
 8007b70:	8c3b      	ldrh	r3, [r7, #32]
 8007b72:	0bdb      	lsrs	r3, r3, #15
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	811a      	strh	r2, [r3, #8]

            /* Get word to calculate threshold, output configuration from the same word */
            lsb = (uint16_t) feat_config[idx++];
 8007b7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007b84:	3328      	adds	r3, #40	@ 0x28
 8007b86:	443b      	add	r3, r7
 8007b88:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007b8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007b8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007b98:	3328      	adds	r3, #40	@ 0x28
 8007b9a:	443b      	add	r3, r7
 8007b9c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8007ba4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007ba6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	843b      	strh	r3, [r7, #32]

            /* Get threshold */
            config->threshold = lsb_msb & BMI2_ANY_NO_MOT_THRES_MASK;
 8007bac:	8c3b      	ldrh	r3, [r7, #32]
 8007bae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	805a      	strh	r2, [r3, #2]
 8007bb8:	e002      	b.n	8007bc0 <get_no_motion_config+0x11e>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007bba:	23f8      	movs	r3, #248	@ 0xf8
 8007bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007bc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3728      	adds	r7, #40	@ 0x28
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <get_sig_motion_config>:
/*!
 * @brief This internal API gets sig-motion configurations like block-size,
 * output-configuration and other parameters.
 */
static int8_t get_sig_motion_config(struct bmi2_sig_motion_config *config, struct bmi2_dev *dev)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	@ 0x28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007bd6:	f107 030c 	add.w	r3, r7, #12
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	605a      	str	r2, [r3, #4]
 8007be0:	609a      	str	r2, [r3, #8]
 8007be2:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	723b      	strb	r3, [r7, #8]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	727b      	strb	r3, [r7, #9]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	72bb      	strb	r3, [r7, #10]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 8007c02:	f107 0308 	add.w	r3, r7, #8
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	2103      	movs	r1, #3
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fc feef 	bl	80049ee <bmi2_extract_input_feat_config>
 8007c10:	4603      	mov	r3, r0
 8007c12:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007c14:	7ffb      	ldrb	r3, [r7, #31]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d02d      	beq.n	8007c76 <get_sig_motion_config+0xaa>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 8007c1a:	7a7b      	ldrb	r3, [r7, #9]
 8007c1c:	f107 010c 	add.w	r1, r7, #12
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fc fe51 	bl	80048ca <bmi2_get_feat_config>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007c2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d122      	bne.n	8007c7c <get_sig_motion_config+0xb0>
        {
            /* Define the offset for feature enable for sig-motion */
            idx = sig_mot_config.start_addr;
 8007c36:	7abb      	ldrb	r3, [r7, #10]
 8007c38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate parameter 1 */
            lsb = (uint16_t) feat_config[idx++];
 8007c3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007c46:	3328      	adds	r3, #40	@ 0x28
 8007c48:	443b      	add	r3, r7
 8007c4a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007c4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007c50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007c5a:	3328      	adds	r3, #40	@ 0x28
 8007c5c:	443b      	add	r3, r7
 8007c5e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8007c66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007c68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	843b      	strh	r3, [r7, #32]

            /* Get parameter 1  */
            config->block_size = lsb_msb & BMI2_SIG_MOT_PARAM_1_MASK;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	8c3a      	ldrh	r2, [r7, #32]
 8007c72:	801a      	strh	r2, [r3, #0]
 8007c74:	e002      	b.n	8007c7c <get_sig_motion_config+0xb0>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007c76:	23f8      	movs	r3, #248	@ 0xf8
 8007c78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007c7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3728      	adds	r7, #40	@ 0x28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <get_step_count_params_config>:

/*!
 * @brief This internal API gets step counter parameter configurations.
 */
static int8_t get_step_count_params_config(uint16_t *step_count_params, struct bmi2_dev *dev)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08c      	sub	sp, #48	@ 0x30
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007c98:	f107 030c 	add.w	r3, r7, #12
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	609a      	str	r2, [r3, #8]
 8007ca4:	60da      	str	r2, [r3, #12]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Initialize feature configuration for step counter 1 */
    struct bmi2_feature_config step_params_config = { 0, 0, 0 };
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	723b      	strb	r3, [r7, #8]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	727b      	strb	r3, [r7, #9]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	72bb      	strb	r3, [r7, #10]

    /* Variable to define start address of the parameters */
    uint8_t start_addr;

    /* Variable to define number of bytes */
    uint8_t n_bytes = (BMI2_STEP_CNT_N_PARAMS * 2);
 8007cbe:	2332      	movs	r3, #50	@ 0x32
 8007cc0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    /* Variable to store number of pages */
    uint8_t n_pages = (n_bytes / 16);
 8007cc4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007cc8:	091b      	lsrs	r3, r3, #4
 8007cca:	f887 3020 	strb.w	r3, [r7, #32]

    /* Variable to define the remaining bytes to be read */
    uint8_t remain_len;

    /* Variable to define the maximum words to be read in a page */
    uint8_t max_len = BMI2_FEAT_SIZE_IN_BYTES;
 8007cce:	2310      	movs	r3, #16
 8007cd0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Variable index bytes in a page */
    uint8_t page_byte_idx;

    /* Variable to index the parameters */
    uint8_t param_idx = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Search for step counter parameter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_params_config, BMI2_STEP_COUNTER_PARAMS, dev);
 8007cda:	f107 0308 	add.w	r3, r7, #8
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	211d      	movs	r1, #29
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fc fe83 	bl	80049ee <bmi2_extract_input_feat_config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007cec:	7ffb      	ldrb	r3, [r7, #31]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d079      	beq.n	8007de6 <get_step_count_params_config+0x15e>
    {
        /* Get the start page for the step counter parameters */
        start_page = step_params_config.page;
 8007cf2:	7a7b      	ldrb	r3, [r7, #9]
 8007cf4:	77bb      	strb	r3, [r7, #30]

        /* Get the end page for the step counter parameters */
        end_page = start_page + n_pages;
 8007cf6:	7fba      	ldrb	r2, [r7, #30]
 8007cf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	777b      	strb	r3, [r7, #29]

        /* Get the start address for the step counter parameters */
        start_addr = step_params_config.start_addr;
 8007d00:	7abb      	ldrb	r3, [r7, #10]
 8007d02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        /* Get the remaining length of bytes to be read */
        remain_len = (uint8_t)((n_bytes - (n_pages * 16)) + start_addr);
 8007d06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007d1a:	4413      	add	r3, r2
 8007d1c:	773b      	strb	r3, [r7, #28]
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 8007d1e:	7fbb      	ldrb	r3, [r7, #30]
 8007d20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d24:	e059      	b.n	8007dda <get_step_count_params_config+0x152>
        {
            /* Get the configuration from the respective page */
            rslt = bmi2_get_feat_config(page_idx, feat_config, dev);
 8007d26:	f107 010c 	add.w	r1, r7, #12
 8007d2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fc fdca 	bl	80048ca <bmi2_get_feat_config>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMI2_OK)
 8007d3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d145      	bne.n	8007dd0 <get_step_count_params_config+0x148>
            {
                /* Start from address 0x00 when switched to next page */
                if (page_idx > start_page)
 8007d44:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8007d48:	7fbb      	ldrb	r3, [r7, #30]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d902      	bls.n	8007d54 <get_step_count_params_config+0xcc>
                {
                    start_addr = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                }

                /* Remaining number of bytes to be read in the page  */
                if (page_idx == end_page)
 8007d54:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8007d58:	7f7b      	ldrb	r3, [r7, #29]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d102      	bne.n	8007d64 <get_step_count_params_config+0xdc>
                {
                    max_len = remain_len;
 8007d5e:	7f3b      	ldrb	r3, [r7, #28]
 8007d60:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                }

                /* Get the offset */
                page_byte_idx = start_addr;
 8007d64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007d68:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                while (page_byte_idx < max_len)
 8007d6c:	e02a      	b.n	8007dc4 <get_step_count_params_config+0x13c>
                {
                    /* Get word to calculate the parameter*/
                    lsb = (uint16_t) feat_config[page_byte_idx++];
 8007d6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
 8007d78:	3330      	adds	r3, #48	@ 0x30
 8007d7a:	443b      	add	r3, r7
 8007d7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007d80:	84bb      	strh	r3, [r7, #36]	@ 0x24
                    if (page_byte_idx < max_len)
 8007d82:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007d86:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d20a      	bcs.n	8007da4 <get_step_count_params_config+0x11c>
                    {
                        msb = ((uint16_t) feat_config[page_byte_idx++] << 8);
 8007d8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
 8007d98:	3330      	adds	r3, #48	@ 0x30
 8007d9a:	443b      	add	r3, r7
 8007d9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007da0:	021b      	lsls	r3, r3, #8
 8007da2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    }

                    lsb_msb = lsb | msb;
 8007da4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007da6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007da8:	4313      	orrs	r3, r2
 8007daa:	847b      	strh	r3, [r7, #34]	@ 0x22

                    /* Get parameters 1 to 25 */
                    step_count_params[param_idx] = lsb_msb & BMI2_STEP_COUNT_PARAMS_MASK;
 8007dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	4413      	add	r3, r2
 8007db6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007db8:	801a      	strh	r2, [r3, #0]

                    /* Increment to next parameter */
                    param_idx++;
 8007dba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                while (page_byte_idx < max_len)
 8007dc4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007dc8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d3ce      	bcc.n	8007d6e <get_step_count_params_config+0xe6>
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 8007dd0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dda:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8007dde:	7f7b      	ldrb	r3, [r7, #29]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d9a0      	bls.n	8007d26 <get_step_count_params_config+0x9e>
 8007de4:	e002      	b.n	8007dec <get_step_count_params_config+0x164>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007de6:	23f8      	movs	r3, #248	@ 0xf8
 8007de8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8007dec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3730      	adds	r7, #48	@ 0x30
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <get_step_config>:

/*!
 * @brief This internal API gets step counter/detector/activity configurations.
 */
static int8_t get_step_config(struct bmi2_step_config *config, struct bmi2_dev *dev)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08a      	sub	sp, #40	@ 0x28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007e02:	f107 030c 	add.w	r3, r7, #12
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	605a      	str	r2, [r3, #4]
 8007e0c:	609a      	str	r2, [r3, #8]
 8007e0e:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 8007e22:	2300      	movs	r3, #0
 8007e24:	723b      	strb	r3, [r7, #8]
 8007e26:	2300      	movs	r3, #0
 8007e28:	727b      	strb	r3, [r7, #9]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	72bb      	strb	r3, [r7, #10]

    /* Search for step counter 4 feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 8007e2e:	f107 0308 	add.w	r3, r7, #8
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	2107      	movs	r1, #7
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fc fdd9 	bl	80049ee <bmi2_extract_input_feat_config>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007e40:	7ffb      	ldrb	r3, [r7, #31]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d038      	beq.n	8007eb8 <get_step_config+0xc0>
    {
        /* Get the configuration from the page where step counter 4 parameter resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 8007e46:	7a7b      	ldrb	r3, [r7, #9]
 8007e48:	f107 010c 	add.w	r1, r7, #12
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fc fd3b 	bl	80048ca <bmi2_get_feat_config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007e5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d12d      	bne.n	8007ebe <get_step_config+0xc6>
        {
            /* Define the offset for feature enable for step counter/detector/activity */
            idx = step_count_config.start_addr;
 8007e62:	7abb      	ldrb	r3, [r7, #10]
 8007e64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate water-mark level and reset counter */
            lsb = (uint16_t) feat_config[idx++];
 8007e68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007e72:	3328      	adds	r3, #40	@ 0x28
 8007e74:	443b      	add	r3, r7
 8007e76:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007e7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007e86:	3328      	adds	r3, #40	@ 0x28
 8007e88:	443b      	add	r3, r7
 8007e8a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007e8e:	021b      	lsls	r3, r3, #8
 8007e90:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8007e92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007e94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e96:	4313      	orrs	r3, r2
 8007e98:	843b      	strh	r3, [r7, #32]

            /* Get water-mark level */
            config->watermark_level = lsb_msb & BMI2_STEP_COUNT_WM_LEVEL_MASK;
 8007e9a:	8c3b      	ldrh	r3, [r7, #32]
 8007e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	801a      	strh	r2, [r3, #0]

            /* Get reset counter */
            config->reset_counter = (lsb_msb & BMI2_STEP_COUNT_RST_CNT_MASK) >> BMI2_STEP_COUNT_RST_CNT_POS;
 8007ea6:	8c3b      	ldrh	r3, [r7, #32]
 8007ea8:	129b      	asrs	r3, r3, #10
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	805a      	strh	r2, [r3, #2]
 8007eb6:	e002      	b.n	8007ebe <get_step_config+0xc6>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007eb8:	23f8      	movs	r3, #248	@ 0xf8
 8007eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007ebe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3728      	adds	r7, #40	@ 0x28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <get_wrist_gest_config>:
/*!
 * @brief This internal API gets wrist gesture configurations like wearable-arm,
 * and output-configuration.
 */
static int8_t get_wrist_gest_config(struct bmi2_wrist_gest_config *config, struct bmi2_dev *dev)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b08a      	sub	sp, #40	@ 0x28
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007ed4:	f107 030c 	add.w	r3, r7, #12
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	605a      	str	r2, [r3, #4]
 8007ede:	609a      	str	r2, [r3, #8]
 8007ee0:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_config = { 0, 0, 0 };
 8007ee8:	2300      	movs	r3, #0
 8007eea:	723b      	strb	r3, [r7, #8]
 8007eec:	2300      	movs	r3, #0
 8007eee:	727b      	strb	r3, [r7, #9]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8007ef4:	f107 030c 	add.w	r3, r7, #12
 8007ef8:	623b      	str	r3, [r7, #32]

    /* Search for wrist gesture feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_config, BMI2_WRIST_GESTURE, dev);
 8007efa:	f107 0308 	add.w	r3, r7, #8
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	2113      	movs	r1, #19
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fc fd73 	bl	80049ee <bmi2_extract_input_feat_config>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007f0c:	7ffb      	ldrb	r3, [r7, #31]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d04a      	beq.n	8007fa8 <get_wrist_gest_config+0xde>
    {
        /* Get the configuration from the page where wrist gesture feature  resides */
        rslt = bmi2_get_feat_config(wrist_gest_config.page, feat_config, dev);
 8007f12:	7a7b      	ldrb	r3, [r7, #9]
 8007f14:	f107 010c 	add.w	r1, r7, #12
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fc fcd5 	bl	80048ca <bmi2_get_feat_config>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007f26:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d13f      	bne.n	8007fae <get_wrist_gest_config+0xe4>
        {
            /* Define the offset in bytes for wrist gesture select */
            idx = wrist_gest_config.start_addr;
 8007f2e:	7abb      	ldrb	r3, [r7, #10]
 8007f30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8007f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f38:	085b      	lsrs	r3, r3, #1
 8007f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get wearable arm */
            config->wearable_arm = (*(data_p + idx) & BMI2_WRIST_GEST_WEAR_ARM_MASK) >> BMI2_WRIST_GEST_WEAR_ARM_POS;
 8007f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	6a3a      	ldr	r2, [r7, #32]
 8007f46:	4413      	add	r3, r2
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	111b      	asrs	r3, r3, #4
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	801a      	strh	r2, [r3, #0]

            /* Increment the offset by 1 word to get min_flick_peak */
            idx++;
 8007f58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->min_flick_peak = *(data_p + idx);
 8007f62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	6a3a      	ldr	r2, [r7, #32]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	881a      	ldrh	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	805a      	strh	r2, [r3, #2]

            /* Increment the offset by 1 word to get min_flick_samples */
            idx++;
 8007f72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f76:	3301      	adds	r3, #1
 8007f78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->min_flick_samples = *(data_p + idx);
 8007f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f80:	005b      	lsls	r3, r3, #1
 8007f82:	6a3a      	ldr	r2, [r7, #32]
 8007f84:	4413      	add	r3, r2
 8007f86:	881a      	ldrh	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	809a      	strh	r2, [r3, #4]

            /* Increment the offset by 1 word to get max_duration */
            idx++;
 8007f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f90:	3301      	adds	r3, #1
 8007f92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_duration = *(data_p + idx);
 8007f96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	6a3a      	ldr	r2, [r7, #32]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	881a      	ldrh	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	80da      	strh	r2, [r3, #6]
 8007fa6:	e002      	b.n	8007fae <get_wrist_gest_config+0xe4>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007fa8:	23f8      	movs	r3, #248	@ 0xf8
 8007faa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007fae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3728      	adds	r7, #40	@ 0x28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <get_wrist_wear_wake_up_config>:
/*!
 * @brief This internal API gets wrist wear wake-up configurations like
 * output-configuration.
 */
static int8_t get_wrist_wear_wake_up_config(struct bmi2_wrist_wear_wake_up_config *config, struct bmi2_dev *dev)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b08a      	sub	sp, #40	@ 0x28
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007fc4:	f107 030c 	add.w	r3, r7, #12
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	605a      	str	r2, [r3, #4]
 8007fce:	609a      	str	r2, [r3, #8]
 8007fd0:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake-up */
    struct bmi2_feature_config wrist_wake_up_config = { 0, 0, 0 };
 8007fd8:	2300      	movs	r3, #0
 8007fda:	723b      	strb	r3, [r7, #8]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	727b      	strb	r3, [r7, #9]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8007fe4:	f107 030c 	add.w	r3, r7, #12
 8007fe8:	623b      	str	r3, [r7, #32]

    /* Search for wrist wear wake-up feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_config, BMI2_WRIST_WEAR_WAKE_UP, dev);
 8007fea:	f107 0308 	add.w	r3, r7, #8
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	2114      	movs	r1, #20
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fc fcfb 	bl	80049ee <bmi2_extract_input_feat_config>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007ffc:	7ffb      	ldrb	r3, [r7, #31]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d064      	beq.n	80080cc <get_wrist_wear_wake_up_config+0x112>
    {
        /* Get the configuration from the page where wrist wear wake-up feature  resides */
        rslt = bmi2_get_feat_config(wrist_wake_up_config.page, feat_config, dev);
 8008002:	7a7b      	ldrb	r3, [r7, #9]
 8008004:	f107 010c 	add.w	r1, r7, #12
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	4618      	mov	r0, r3
 800800c:	f7fc fc5d 	bl	80048ca <bmi2_get_feat_config>
 8008010:	4603      	mov	r3, r0
 8008012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8008016:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800801a:	2b00      	cmp	r3, #0
 800801c:	d159      	bne.n	80080d2 <get_wrist_wear_wake_up_config+0x118>
        {
            /* Define the offset in bytes for wrist wear wake-up select */
            idx = wrist_wake_up_config.start_addr;
 800801e:	7abb      	ldrb	r3, [r7, #10]
 8008020:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8008024:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008028:	085b      	lsrs	r3, r3, #1
 800802a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Increment the offset value by 1 word to get min_angle_focus */
            idx++;
 800802e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008032:	3301      	adds	r3, #1
 8008034:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            config->min_angle_focus = *(data_p + idx);
 8008038:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	6a3a      	ldr	r2, [r7, #32]
 8008040:	4413      	add	r3, r2
 8008042:	881a      	ldrh	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	801a      	strh	r2, [r3, #0]

            /* Increment the offset value by 1 word to get min_angle_nonfocus */
            idx++;
 8008048:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800804c:	3301      	adds	r3, #1
 800804e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->min_angle_nonfocus = *(data_p + idx);
 8008052:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	6a3a      	ldr	r2, [r7, #32]
 800805a:	4413      	add	r3, r2
 800805c:	881a      	ldrh	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	805a      	strh	r2, [r3, #2]

            /* Increment the offset value by 1 word to get max_tilt_lr */
            idx++;
 8008062:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008066:	3301      	adds	r3, #1
 8008068:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_lr = *(data_p + idx);
 800806c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	6a3a      	ldr	r2, [r7, #32]
 8008074:	4413      	add	r3, r2
 8008076:	881a      	ldrh	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	809a      	strh	r2, [r3, #4]

            /* Increment the offset value by 1 word to get max_tilt_ll */
            idx++;
 800807c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008080:	3301      	adds	r3, #1
 8008082:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_ll = *(data_p + idx);
 8008086:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	6a3a      	ldr	r2, [r7, #32]
 800808e:	4413      	add	r3, r2
 8008090:	881a      	ldrh	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	80da      	strh	r2, [r3, #6]

            /* Increment the offset value by 1 word to get max_tilt_pd */
            idx++;
 8008096:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800809a:	3301      	adds	r3, #1
 800809c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_pd = *(data_p + idx);
 80080a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	6a3a      	ldr	r2, [r7, #32]
 80080a8:	4413      	add	r3, r2
 80080aa:	881a      	ldrh	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	811a      	strh	r2, [r3, #8]

            /* Increment the offset value by 1 word to get max_tilt_pu */
            idx++;
 80080b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080b4:	3301      	adds	r3, #1
 80080b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_pu = *(data_p + idx);
 80080ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	6a3a      	ldr	r2, [r7, #32]
 80080c2:	4413      	add	r3, r2
 80080c4:	881a      	ldrh	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	815a      	strh	r2, [r3, #10]
 80080ca:	e002      	b.n	80080d2 <get_wrist_wear_wake_up_config+0x118>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80080cc:	23f8      	movs	r3, #248	@ 0xf8
 80080ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80080d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3728      	adds	r7, #40	@ 0x28
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <set_feat_config>:

/*!
 * @brief This internal API sets feature configuration to the sensor.
 */
static int8_t set_feat_config(const struct bmi2_sens_config *sens_cfg, uint8_t loop, struct bmi2_dev *dev)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	460b      	mov	r3, r1
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    switch (sens_cfg[loop].type)
 80080ee:	7afa      	ldrb	r2, [r7, #11]
 80080f0:	4613      	mov	r3, r2
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	1a9b      	subs	r3, r3, r2
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	461a      	mov	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	4413      	add	r3, r2
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	3b03      	subs	r3, #3
 8008102:	2b1a      	cmp	r3, #26
 8008104:	f200 80aa 	bhi.w	800825c <set_feat_config+0x17c>
 8008108:	a201      	add	r2, pc, #4	@ (adr r2, 8008110 <set_feat_config+0x30>)
 800810a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810e:	bf00      	nop
 8008110:	080081bd 	.word	0x080081bd
 8008114:	0800817d 	.word	0x0800817d
 8008118:	0800819d 	.word	0x0800819d
 800811c:	080081fd 	.word	0x080081fd
 8008120:	080081fd 	.word	0x080081fd
 8008124:	080081fd 	.word	0x080081fd
 8008128:	0800825d 	.word	0x0800825d
 800812c:	0800825d 	.word	0x0800825d
 8008130:	0800825d 	.word	0x0800825d
 8008134:	0800825d 	.word	0x0800825d
 8008138:	0800825d 	.word	0x0800825d
 800813c:	0800825d 	.word	0x0800825d
 8008140:	0800825d 	.word	0x0800825d
 8008144:	0800825d 	.word	0x0800825d
 8008148:	0800825d 	.word	0x0800825d
 800814c:	0800825d 	.word	0x0800825d
 8008150:	0800821d 	.word	0x0800821d
 8008154:	0800823d 	.word	0x0800823d
 8008158:	0800825d 	.word	0x0800825d
 800815c:	0800825d 	.word	0x0800825d
 8008160:	0800825d 	.word	0x0800825d
 8008164:	0800825d 	.word	0x0800825d
 8008168:	0800825d 	.word	0x0800825d
 800816c:	0800825d 	.word	0x0800825d
 8008170:	0800825d 	.word	0x0800825d
 8008174:	0800825d 	.word	0x0800825d
 8008178:	080081dd 	.word	0x080081dd
    {
        /* Set any motion configuration */
        case BMI2_ANY_MOTION:
            rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 800817c:	7afa      	ldrb	r2, [r7, #11]
 800817e:	4613      	mov	r3, r2
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	461a      	mov	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4413      	add	r3, r2
 800818c:	3304      	adds	r3, #4
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	4618      	mov	r0, r3
 8008192:	f7fe fe40 	bl	8006e16 <set_any_motion_config>
 8008196:	4603      	mov	r3, r0
 8008198:	75fb      	strb	r3, [r7, #23]
            break;
 800819a:	e062      	b.n	8008262 <set_feat_config+0x182>

        /* Set no motion configuration */
        case BMI2_NO_MOTION:
            rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 800819c:	7afa      	ldrb	r2, [r7, #11]
 800819e:	4613      	mov	r3, r2
 80081a0:	00db      	lsls	r3, r3, #3
 80081a2:	1a9b      	subs	r3, r3, r2
 80081a4:	00db      	lsls	r3, r3, #3
 80081a6:	461a      	mov	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	3304      	adds	r3, #4
 80081ae:	6879      	ldr	r1, [r7, #4]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe ff39 	bl	8007028 <set_no_motion_config>
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]
            break;
 80081ba:	e052      	b.n	8008262 <set_feat_config+0x182>

        /* Set sig-motion configuration */
        case BMI2_SIG_MOTION:
            rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 80081bc:	7afa      	ldrb	r2, [r7, #11]
 80081be:	4613      	mov	r3, r2
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	461a      	mov	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	3304      	adds	r3, #4
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7ff f832 	bl	800723a <set_sig_motion_config>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]
            break;
 80081da:	e042      	b.n	8008262 <set_feat_config+0x182>

        /* Set the step counter parameters */
        case BMI2_STEP_COUNTER_PARAMS:
            rslt = set_step_count_params_config(sens_cfg[loop].cfg.step_counter_params, dev);
 80081dc:	7afa      	ldrb	r2, [r7, #11]
 80081de:	4613      	mov	r3, r2
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	461a      	mov	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	3304      	adds	r3, #4
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff f8a8 	bl	8007346 <set_step_count_params_config>
 80081f6:	4603      	mov	r3, r0
 80081f8:	75fb      	strb	r3, [r7, #23]
            break;
 80081fa:	e032      	b.n	8008262 <set_feat_config+0x182>

        /* Set step counter/detector/activity configuration */
        case BMI2_STEP_DETECTOR:
        case BMI2_STEP_COUNTER:
        case BMI2_STEP_ACTIVITY:
            rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 80081fc:	7afa      	ldrb	r2, [r7, #11]
 80081fe:	4613      	mov	r3, r2
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	461a      	mov	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	3304      	adds	r3, #4
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff f970 	bl	80074f6 <set_step_config>
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]
            break;
 800821a:	e022      	b.n	8008262 <set_feat_config+0x182>

        /* Set the wrist gesture configuration */
        case BMI2_WRIST_GESTURE:
            rslt = set_wrist_gest_config(&sens_cfg[loop].cfg.wrist_gest, dev);
 800821c:	7afa      	ldrb	r2, [r7, #11]
 800821e:	4613      	mov	r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	1a9b      	subs	r3, r3, r2
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	461a      	mov	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	3304      	adds	r3, #4
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff fa15 	bl	8007660 <set_wrist_gest_config>
 8008236:	4603      	mov	r3, r0
 8008238:	75fb      	strb	r3, [r7, #23]
            break;
 800823a:	e012      	b.n	8008262 <set_feat_config+0x182>

        /* Set the wrist wear wake-up configuration */
        case BMI2_WRIST_WEAR_WAKE_UP:
            rslt = set_wrist_wear_wake_up_config(&sens_cfg[loop].cfg.wrist_wear_wake_up, dev);
 800823c:	7afa      	ldrb	r2, [r7, #11]
 800823e:	4613      	mov	r3, r2
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	461a      	mov	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4413      	add	r3, r2
 800824c:	3304      	adds	r3, #4
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fac7 	bl	80077e4 <set_wrist_wear_wake_up_config>
 8008256:	4603      	mov	r3, r0
 8008258:	75fb      	strb	r3, [r7, #23]
            break;
 800825a:	e002      	b.n	8008262 <set_feat_config+0x182>

        default:
            rslt = BMI2_E_INVALID_SENSOR;
 800825c:	23f8      	movs	r3, #248	@ 0xf8
 800825e:	75fb      	strb	r3, [r7, #23]
            break;
 8008260:	bf00      	nop
    }

    return rslt;
 8008262:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop

08008270 <get_feat_config>:

/*!
 * @brief This internal API gets feature configuration from the sensor.
 */
static int8_t get_feat_config(struct bmi2_sens_config *sens_cfg, uint8_t loop, struct bmi2_dev *dev)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	460b      	mov	r3, r1
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    switch (sens_cfg[loop].type)
 800827e:	7afa      	ldrb	r2, [r7, #11]
 8008280:	4613      	mov	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	461a      	mov	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	3b03      	subs	r3, #3
 8008292:	2b1a      	cmp	r3, #26
 8008294:	f200 80aa 	bhi.w	80083ec <get_feat_config+0x17c>
 8008298:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <get_feat_config+0x30>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	0800830d 	.word	0x0800830d
 80082a4:	0800832d 	.word	0x0800832d
 80082a8:	0800834d 	.word	0x0800834d
 80082ac:	0800838d 	.word	0x0800838d
 80082b0:	0800838d 	.word	0x0800838d
 80082b4:	0800838d 	.word	0x0800838d
 80082b8:	080083ed 	.word	0x080083ed
 80082bc:	080083ed 	.word	0x080083ed
 80082c0:	080083ed 	.word	0x080083ed
 80082c4:	080083ed 	.word	0x080083ed
 80082c8:	080083ed 	.word	0x080083ed
 80082cc:	080083ed 	.word	0x080083ed
 80082d0:	080083ed 	.word	0x080083ed
 80082d4:	080083ed 	.word	0x080083ed
 80082d8:	080083ed 	.word	0x080083ed
 80082dc:	080083ed 	.word	0x080083ed
 80082e0:	080083ad 	.word	0x080083ad
 80082e4:	080083cd 	.word	0x080083cd
 80082e8:	080083ed 	.word	0x080083ed
 80082ec:	080083ed 	.word	0x080083ed
 80082f0:	080083ed 	.word	0x080083ed
 80082f4:	080083ed 	.word	0x080083ed
 80082f8:	080083ed 	.word	0x080083ed
 80082fc:	080083ed 	.word	0x080083ed
 8008300:	080083ed 	.word	0x080083ed
 8008304:	080083ed 	.word	0x080083ed
 8008308:	0800836d 	.word	0x0800836d
    {
        /* Get sig-motion configuration */
        case BMI2_SIG_MOTION:
            rslt = get_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 800830c:	7afa      	ldrb	r2, [r7, #11]
 800830e:	4613      	mov	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	00db      	lsls	r3, r3, #3
 8008316:	461a      	mov	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	3304      	adds	r3, #4
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	4618      	mov	r0, r3
 8008322:	f7ff fc53 	bl	8007bcc <get_sig_motion_config>
 8008326:	4603      	mov	r3, r0
 8008328:	75fb      	strb	r3, [r7, #23]
            break;
 800832a:	e062      	b.n	80083f2 <get_feat_config+0x182>

        /* Get any motion configuration */
        case BMI2_ANY_MOTION:
            rslt = get_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 800832c:	7afa      	ldrb	r2, [r7, #11]
 800832e:	4613      	mov	r3, r2
 8008330:	00db      	lsls	r3, r3, #3
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	461a      	mov	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4413      	add	r3, r2
 800833c:	3304      	adds	r3, #4
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff fb1d 	bl	8007980 <get_any_motion_config>
 8008346:	4603      	mov	r3, r0
 8008348:	75fb      	strb	r3, [r7, #23]
            break;
 800834a:	e052      	b.n	80083f2 <get_feat_config+0x182>

        /* Get no motion configuration */
        case BMI2_NO_MOTION:
            rslt = get_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 800834c:	7afa      	ldrb	r2, [r7, #11]
 800834e:	4613      	mov	r3, r2
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	461a      	mov	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	3304      	adds	r3, #4
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	4618      	mov	r0, r3
 8008362:	f7ff fb9e 	bl	8007aa2 <get_no_motion_config>
 8008366:	4603      	mov	r3, r0
 8008368:	75fb      	strb	r3, [r7, #23]
            break;
 800836a:	e042      	b.n	80083f2 <get_feat_config+0x182>

        /* Set the step counter parameters */
        case BMI2_STEP_COUNTER_PARAMS:
            rslt = get_step_count_params_config(sens_cfg[loop].cfg.step_counter_params, dev);
 800836c:	7afa      	ldrb	r2, [r7, #11]
 800836e:	4613      	mov	r3, r2
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	461a      	mov	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4413      	add	r3, r2
 800837c:	3304      	adds	r3, #4
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff fc81 	bl	8007c88 <get_step_count_params_config>
 8008386:	4603      	mov	r3, r0
 8008388:	75fb      	strb	r3, [r7, #23]
            break;
 800838a:	e032      	b.n	80083f2 <get_feat_config+0x182>

        /* Get step counter/detector/activity configuration */
        case BMI2_STEP_DETECTOR:
        case BMI2_STEP_COUNTER:
        case BMI2_STEP_ACTIVITY:
            rslt = get_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 800838c:	7afa      	ldrb	r2, [r7, #11]
 800838e:	4613      	mov	r3, r2
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	1a9b      	subs	r3, r3, r2
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	461a      	mov	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4413      	add	r3, r2
 800839c:	3304      	adds	r3, #4
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff fd29 	bl	8007df8 <get_step_config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]
            break;
 80083aa:	e022      	b.n	80083f2 <get_feat_config+0x182>

        /* Get the wrist gesture configuration */
        case BMI2_WRIST_GESTURE:
            rslt = get_wrist_gest_config(&sens_cfg[loop].cfg.wrist_gest, dev);
 80083ac:	7afa      	ldrb	r2, [r7, #11]
 80083ae:	4613      	mov	r3, r2
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	1a9b      	subs	r3, r3, r2
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	461a      	mov	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	3304      	adds	r3, #4
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff fd82 	bl	8007eca <get_wrist_gest_config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]
            break;
 80083ca:	e012      	b.n	80083f2 <get_feat_config+0x182>

        /* Get the wrist wear wake-up configuration */
        case BMI2_WRIST_WEAR_WAKE_UP:
            rslt = get_wrist_wear_wake_up_config(&sens_cfg[loop].cfg.wrist_wear_wake_up, dev);
 80083cc:	7afa      	ldrb	r2, [r7, #11]
 80083ce:	4613      	mov	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	461a      	mov	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	3304      	adds	r3, #4
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff fdea 	bl	8007fba <get_wrist_wear_wake_up_config>
 80083e6:	4603      	mov	r3, r0
 80083e8:	75fb      	strb	r3, [r7, #23]
            break;
 80083ea:	e002      	b.n	80083f2 <get_feat_config+0x182>

        default:
            rslt = BMI2_E_INVALID_SENSOR;
 80083ec:	23f8      	movs	r3, #248	@ 0xf8
 80083ee:	75fb      	strb	r3, [r7, #23]
            break;
 80083f0:	bf00      	nop
    }

    return rslt;
 80083f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop

08008400 <enable_main_sensors>:

/*!
 * @brief This internal API is used to enable main sensors like accel, gyro, aux and temperature.
 */
static int8_t enable_main_sensors(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8008400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008404:	b08a      	sub	sp, #40	@ 0x28
 8008406:	af00      	add	r7, sp, #0
 8008408:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800840c:	617a      	str	r2, [r7, #20]
    int8_t rslt;

    /* Variable to store register values */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 800840e:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2201      	movs	r2, #1
 8008416:	207d      	movs	r0, #125	@ 0x7d
 8008418:	f7fb fcac 	bl	8003d74 <bmi2_get_regs>
 800841c:	4603      	mov	r3, r0
 800841e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMI2_OK)
 8008422:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008426:	2b00      	cmp	r3, #0
 8008428:	d158      	bne.n	80084dc <enable_main_sensors+0xdc>
    {
        /* Enable accelerometer */
        if (sensor_sel & BMI2_ACCEL_SENS_SEL)
 800842a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800842e:	f002 0301 	and.w	r3, r2, #1
 8008432:	60bb      	str	r3, [r7, #8]
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800843c:	460b      	mov	r3, r1
 800843e:	4313      	orrs	r3, r2
 8008440:	d006      	beq.n	8008450 <enable_main_sensors+0x50>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_EN, BMI2_ENABLE);
 8008442:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008446:	f043 0304 	orr.w	r3, r3, #4
 800844a:	b2db      	uxtb	r3, r3
 800844c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable gyroscope */
        if (sensor_sel & BMI2_GYRO_SENS_SEL)
 8008450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008454:	f002 0302 	and.w	r3, r2, #2
 8008458:	603b      	str	r3, [r7, #0]
 800845a:	2300      	movs	r3, #0
 800845c:	607b      	str	r3, [r7, #4]
 800845e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008462:	460b      	mov	r3, r1
 8008464:	4313      	orrs	r3, r2
 8008466:	d006      	beq.n	8008476 <enable_main_sensors+0x76>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_EN, BMI2_ENABLE);
 8008468:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800846c:	f043 0302 	orr.w	r3, r3, #2
 8008470:	b2db      	uxtb	r3, r3
 8008472:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable auxiliary sensor */
        if (sensor_sel & BMI2_AUX_SENS_SEL)
 8008476:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800847a:	f002 0a04 	and.w	sl, r2, #4
 800847e:	f04f 0b00 	mov.w	fp, #0
 8008482:	ea5a 030b 	orrs.w	r3, sl, fp
 8008486:	d006      	beq.n	8008496 <enable_main_sensors+0x96>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_EN, BMI2_ENABLE);
 8008488:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800848c:	f043 0301 	orr.w	r3, r3, #1
 8008490:	b2db      	uxtb	r3, r3
 8008492:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable temperature sensor */
        if (sensor_sel & BMI2_TEMP_SENS_SEL)
 8008496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800849a:	f04f 0800 	mov.w	r8, #0
 800849e:	f003 0901 	and.w	r9, r3, #1
 80084a2:	ea58 0309 	orrs.w	r3, r8, r9
 80084a6:	d006      	beq.n	80084b6 <enable_main_sensors+0xb6>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_TEMP_EN, BMI2_ENABLE);
 80084a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084ac:	f043 0308 	orr.w	r3, r3, #8
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable the sensors that are set in the power control register */
        if (sensor_sel & BMI2_MAIN_SENSORS)
 80084b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084ba:	f002 0407 	and.w	r4, r2, #7
 80084be:	f003 0501 	and.w	r5, r3, #1
 80084c2:	ea54 0305 	orrs.w	r3, r4, r5
 80084c6:	d009      	beq.n	80084dc <enable_main_sensors+0xdc>
        {
            rslt = bmi2_set_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 80084c8:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2201      	movs	r2, #1
 80084d0:	207d      	movs	r0, #125	@ 0x7d
 80084d2:	f7fb fcc2 	bl	8003e5a <bmi2_set_regs>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 80084dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3728      	adds	r7, #40	@ 0x28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080084ea <enable_sensor_features>:

/*!
 * @brief This internal API is used to enable sensor features.
 */
static int8_t enable_sensor_features(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 80084ea:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084ee:	b094      	sub	sp, #80	@ 0x50
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 80084f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    /* Enable sig-motion feature */
    if (sensor_sel & BMI2_SIG_MOTION_SEL)
 80084fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008502:	f002 0408 	and.w	r4, r2, #8
 8008506:	2500      	movs	r5, #0
 8008508:	ea54 0305 	orrs.w	r3, r4, r5
 800850c:	d006      	beq.n	800851c <enable_sensor_features+0x32>
    {
        rslt = set_sig_motion(BMI2_ENABLE, dev);
 800850e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008510:	2001      	movs	r0, #1
 8008512:	f7fe f9bb 	bl	800688c <set_sig_motion>
 8008516:	4603      	mov	r3, r0
 8008518:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable any motion feature */
    if (sensor_sel & BMI2_ANY_MOT_SEL)
 800851c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008520:	f002 0810 	and.w	r8, r2, #16
 8008524:	f04f 0900 	mov.w	r9, #0
 8008528:	ea58 0309 	orrs.w	r3, r8, r9
 800852c:	d006      	beq.n	800853c <enable_sensor_features+0x52>
    {
        rslt = set_any_motion(BMI2_ENABLE, dev);
 800852e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008530:	2001      	movs	r0, #1
 8008532:	f7fd ffd5 	bl	80064e0 <set_any_motion>
 8008536:	4603      	mov	r3, r0
 8008538:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable no motion feature */
    if (sensor_sel & BMI2_NO_MOT_SEL)
 800853c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008540:	f002 0a20 	and.w	sl, r2, #32
 8008544:	f04f 0b00 	mov.w	fp, #0
 8008548:	ea5a 030b 	orrs.w	r3, sl, fp
 800854c:	d006      	beq.n	800855c <enable_sensor_features+0x72>
    {
        rslt = set_no_motion(BMI2_ENABLE, dev);
 800854e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008550:	2001      	movs	r0, #1
 8008552:	f7fe f839 	bl	80065c8 <set_no_motion>
 8008556:	4603      	mov	r3, r0
 8008558:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step detector feature */
    if (sensor_sel & BMI2_STEP_DETECT_SEL)
 800855c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008560:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008564:	633b      	str	r3, [r7, #48]	@ 0x30
 8008566:	2300      	movs	r3, #0
 8008568:	637b      	str	r3, [r7, #52]	@ 0x34
 800856a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800856e:	460b      	mov	r3, r1
 8008570:	4313      	orrs	r3, r2
 8008572:	d006      	beq.n	8008582 <enable_sensor_features+0x98>
    {
        rslt = set_step_detector(BMI2_ENABLE, dev);
 8008574:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008576:	2001      	movs	r0, #1
 8008578:	f7fe f89a 	bl	80066b0 <set_step_detector>
 800857c:	4603      	mov	r3, r0
 800857e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step counter feature */
    if (sensor_sel & BMI2_STEP_COUNT_SEL)
 8008582:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008586:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800858a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800858c:	2300      	movs	r3, #0
 800858e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008590:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008594:	460b      	mov	r3, r1
 8008596:	4313      	orrs	r3, r2
 8008598:	d006      	beq.n	80085a8 <enable_sensor_features+0xbe>
    {
        rslt = set_step_counter(BMI2_ENABLE, dev);
 800859a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800859c:	2001      	movs	r0, #1
 800859e:	f7fe f8fe 	bl	800679e <set_step_counter>
 80085a2:	4603      	mov	r3, r0
 80085a4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step activity feature */
    if (sensor_sel & BMI2_STEP_ACT_SEL)
 80085a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80085ac:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80085b0:	623b      	str	r3, [r7, #32]
 80085b2:	2300      	movs	r3, #0
 80085b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085ba:	460b      	mov	r3, r1
 80085bc:	4313      	orrs	r3, r2
 80085be:	d006      	beq.n	80085ce <enable_sensor_features+0xe4>
    {
        rslt = set_step_activity(BMI2_ENABLE, dev);
 80085c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085c2:	2001      	movs	r0, #1
 80085c4:	f7fe f9d7 	bl	8006976 <set_step_activity>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable gyroscope user gain */
    if (sensor_sel & BMI2_GYRO_GAIN_UPDATE_SEL)
 80085ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80085d2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80085d6:	61bb      	str	r3, [r7, #24]
 80085d8:	2300      	movs	r3, #0
 80085da:	61fb      	str	r3, [r7, #28]
 80085dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80085e0:	460b      	mov	r3, r1
 80085e2:	4313      	orrs	r3, r2
 80085e4:	d006      	beq.n	80085f4 <enable_sensor_features+0x10a>
    {
        rslt = set_gyro_user_gain(BMI2_ENABLE, dev);
 80085e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085e8:	2001      	movs	r0, #1
 80085ea:	f7fe fb9d 	bl	8006d28 <set_gyro_user_gain>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable gyroscope self-offset correction feature */
    if (sensor_sel & BMI2_GYRO_SELF_OFF_SEL)
 80085f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80085f8:	2100      	movs	r1, #0
 80085fa:	6139      	str	r1, [r7, #16]
 80085fc:	f003 0304 	and.w	r3, r3, #4
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008606:	460b      	mov	r3, r1
 8008608:	4313      	orrs	r3, r2
 800860a:	d006      	beq.n	800861a <enable_sensor_features+0x130>
    {
        rslt = set_gyro_self_offset_corr(BMI2_ENABLE, dev);
 800860c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800860e:	2001      	movs	r0, #1
 8008610:	f7fe fa28 	bl	8006a64 <set_gyro_self_offset_corr>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable wrist gesture feature for wearable variant */
    if (sensor_sel & BMI2_WRIST_GEST_SEL)
 800861a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800861e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008622:	60bb      	str	r3, [r7, #8]
 8008624:	2300      	movs	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]
 8008628:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800862c:	460b      	mov	r3, r1
 800862e:	4313      	orrs	r3, r2
 8008630:	d006      	beq.n	8008640 <enable_sensor_features+0x156>
    {
        rslt = set_wrist_gesture(BMI2_ENABLE, dev);
 8008632:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008634:	2001      	movs	r0, #1
 8008636:	f7fe fa8b 	bl	8006b50 <set_wrist_gesture>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable wrist wear wake-up feature */
    if (sensor_sel & BMI2_WRIST_WEAR_WAKE_UP_SEL)
 8008640:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008644:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	2300      	movs	r3, #0
 800864c:	607b      	str	r3, [r7, #4]
 800864e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008652:	460b      	mov	r3, r1
 8008654:	4313      	orrs	r3, r2
 8008656:	d006      	beq.n	8008666 <enable_sensor_features+0x17c>
    {
        rslt = set_wrist_wear_wake_up(BMI2_ENABLE, dev);
 8008658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800865a:	2001      	movs	r0, #1
 800865c:	f7fe faee 	bl	8006c3c <set_wrist_wear_wake_up>
 8008660:	4603      	mov	r3, r0
 8008662:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    return rslt;
 8008666:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800866a:	4618      	mov	r0, r3
 800866c:	3750      	adds	r7, #80	@ 0x50
 800866e:	46bd      	mov	sp, r7
 8008670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008674 <disable_main_sensors>:

/*!
 * @brief This internal API is used to disable main sensors like accel, gyro, aux and temperature.
 */
static int8_t disable_main_sensors(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8008674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008678:	b08a      	sub	sp, #40	@ 0x28
 800867a:	af00      	add	r7, sp, #0
 800867c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8008680:	617a      	str	r2, [r7, #20]
    int8_t rslt;

    /* Variable to store register values */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8008682:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2201      	movs	r2, #1
 800868a:	207d      	movs	r0, #125	@ 0x7d
 800868c:	f7fb fb72 	bl	8003d74 <bmi2_get_regs>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMI2_OK)
 8008696:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800869a:	2b00      	cmp	r3, #0
 800869c:	d158      	bne.n	8008750 <disable_main_sensors+0xdc>
    {
        /* Disable accelerometer */
        if (sensor_sel & BMI2_ACCEL_SENS_SEL)
 800869e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086a2:	f002 0301 	and.w	r3, r2, #1
 80086a6:	60bb      	str	r3, [r7, #8]
 80086a8:	2300      	movs	r3, #0
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086b0:	460b      	mov	r3, r1
 80086b2:	4313      	orrs	r3, r2
 80086b4:	d006      	beq.n	80086c4 <disable_main_sensors+0x50>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_ACC_EN);
 80086b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086ba:	f023 0304 	bic.w	r3, r3, #4
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable gyroscope */
        if (sensor_sel & BMI2_GYRO_SENS_SEL)
 80086c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086c8:	f002 0302 	and.w	r3, r2, #2
 80086cc:	603b      	str	r3, [r7, #0]
 80086ce:	2300      	movs	r3, #0
 80086d0:	607b      	str	r3, [r7, #4]
 80086d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80086d6:	460b      	mov	r3, r1
 80086d8:	4313      	orrs	r3, r2
 80086da:	d006      	beq.n	80086ea <disable_main_sensors+0x76>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_GYR_EN);
 80086dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086e0:	f023 0302 	bic.w	r3, r3, #2
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable auxiliary sensor */
        if (sensor_sel & BMI2_AUX_SENS_SEL)
 80086ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086ee:	f002 0a04 	and.w	sl, r2, #4
 80086f2:	f04f 0b00 	mov.w	fp, #0
 80086f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80086fa:	d006      	beq.n	800870a <disable_main_sensors+0x96>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_AUX_EN);
 80086fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008700:	f023 0301 	bic.w	r3, r3, #1
 8008704:	b2db      	uxtb	r3, r3
 8008706:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable temperature sensor */
        if (sensor_sel & BMI2_TEMP_SENS_SEL)
 800870a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800870e:	f04f 0800 	mov.w	r8, #0
 8008712:	f003 0901 	and.w	r9, r3, #1
 8008716:	ea58 0309 	orrs.w	r3, r8, r9
 800871a:	d006      	beq.n	800872a <disable_main_sensors+0xb6>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_TEMP_EN);
 800871c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008720:	f023 0308 	bic.w	r3, r3, #8
 8008724:	b2db      	uxtb	r3, r3
 8008726:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable the sensors that are set in the power control register */
        if (sensor_sel & BMI2_MAIN_SENSORS)
 800872a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800872e:	f002 0407 	and.w	r4, r2, #7
 8008732:	f003 0501 	and.w	r5, r3, #1
 8008736:	ea54 0305 	orrs.w	r3, r4, r5
 800873a:	d009      	beq.n	8008750 <disable_main_sensors+0xdc>
        {
            rslt = bmi2_set_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 800873c:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2201      	movs	r2, #1
 8008744:	207d      	movs	r0, #125	@ 0x7d
 8008746:	f7fb fb88 	bl	8003e5a <bmi2_set_regs>
 800874a:	4603      	mov	r3, r0
 800874c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 8008750:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8008754:	4618      	mov	r0, r3
 8008756:	3728      	adds	r7, #40	@ 0x28
 8008758:	46bd      	mov	sp, r7
 800875a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800875e <disable_sensor_features>:

/*!
 * @brief This internal API is used to disable sensor features.
 */
static int8_t disable_sensor_features(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 800875e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008762:	b094      	sub	sp, #80	@ 0x50
 8008764:	af00      	add	r7, sp, #0
 8008766:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 800876a:	63fa      	str	r2, [r7, #60]	@ 0x3c
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    /* Disable sig-motion feature */
    if (sensor_sel & BMI2_SIG_MOTION_SEL)
 8008772:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008776:	f002 0408 	and.w	r4, r2, #8
 800877a:	2500      	movs	r5, #0
 800877c:	ea54 0305 	orrs.w	r3, r4, r5
 8008780:	d006      	beq.n	8008790 <disable_sensor_features+0x32>
    {
        rslt = set_sig_motion(BMI2_DISABLE, dev);
 8008782:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008784:	2000      	movs	r0, #0
 8008786:	f7fe f881 	bl	800688c <set_sig_motion>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable any-motion feature */
    if (sensor_sel & BMI2_ANY_MOT_SEL)
 8008790:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008794:	f002 0810 	and.w	r8, r2, #16
 8008798:	f04f 0900 	mov.w	r9, #0
 800879c:	ea58 0309 	orrs.w	r3, r8, r9
 80087a0:	d006      	beq.n	80087b0 <disable_sensor_features+0x52>
    {
        rslt = set_any_motion(BMI2_DISABLE, dev);
 80087a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087a4:	2000      	movs	r0, #0
 80087a6:	f7fd fe9b 	bl	80064e0 <set_any_motion>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable no-motion feature */
    if (sensor_sel & BMI2_NO_MOT_SEL)
 80087b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80087b4:	f002 0a20 	and.w	sl, r2, #32
 80087b8:	f04f 0b00 	mov.w	fp, #0
 80087bc:	ea5a 030b 	orrs.w	r3, sl, fp
 80087c0:	d006      	beq.n	80087d0 <disable_sensor_features+0x72>
    {
        rslt = set_no_motion(BMI2_DISABLE, dev);
 80087c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087c4:	2000      	movs	r0, #0
 80087c6:	f7fd feff 	bl	80065c8 <set_no_motion>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable step detector feature */
    if (sensor_sel & BMI2_STEP_DETECT_SEL)
 80087d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80087d4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80087d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80087da:	2300      	movs	r3, #0
 80087dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80087de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80087e2:	460b      	mov	r3, r1
 80087e4:	4313      	orrs	r3, r2
 80087e6:	d006      	beq.n	80087f6 <disable_sensor_features+0x98>
    {
        rslt = set_step_detector(BMI2_DISABLE, dev);
 80087e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087ea:	2000      	movs	r0, #0
 80087ec:	f7fd ff60 	bl	80066b0 <set_step_detector>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable step counter feature */
    if (sensor_sel & BMI2_STEP_COUNT_SEL)
 80087f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80087fa:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80087fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008800:	2300      	movs	r3, #0
 8008802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008804:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008808:	460b      	mov	r3, r1
 800880a:	4313      	orrs	r3, r2
 800880c:	d006      	beq.n	800881c <disable_sensor_features+0xbe>
    {
        rslt = set_step_counter(BMI2_DISABLE, dev);
 800880e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008810:	2000      	movs	r0, #0
 8008812:	f7fd ffc4 	bl	800679e <set_step_counter>
 8008816:	4603      	mov	r3, r0
 8008818:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable step activity feature */
    if (sensor_sel & BMI2_STEP_ACT_SEL)
 800881c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008820:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8008824:	623b      	str	r3, [r7, #32]
 8008826:	2300      	movs	r3, #0
 8008828:	627b      	str	r3, [r7, #36]	@ 0x24
 800882a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800882e:	460b      	mov	r3, r1
 8008830:	4313      	orrs	r3, r2
 8008832:	d006      	beq.n	8008842 <disable_sensor_features+0xe4>
    {
        rslt = set_step_activity(BMI2_DISABLE, dev);
 8008834:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008836:	2000      	movs	r0, #0
 8008838:	f7fe f89d 	bl	8006976 <set_step_activity>
 800883c:	4603      	mov	r3, r0
 800883e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable gyroscope user gain */
    if (sensor_sel & BMI2_GYRO_GAIN_UPDATE_SEL)
 8008842:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008846:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800884a:	61bb      	str	r3, [r7, #24]
 800884c:	2300      	movs	r3, #0
 800884e:	61fb      	str	r3, [r7, #28]
 8008850:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008854:	460b      	mov	r3, r1
 8008856:	4313      	orrs	r3, r2
 8008858:	d006      	beq.n	8008868 <disable_sensor_features+0x10a>
    {
        rslt = set_gyro_user_gain(BMI2_DISABLE, dev);
 800885a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800885c:	2000      	movs	r0, #0
 800885e:	f7fe fa63 	bl	8006d28 <set_gyro_user_gain>
 8008862:	4603      	mov	r3, r0
 8008864:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable gyroscope self-offset correction feature */
    if (sensor_sel & BMI2_GYRO_SELF_OFF_SEL)
 8008868:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800886c:	2100      	movs	r1, #0
 800886e:	6139      	str	r1, [r7, #16]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	617b      	str	r3, [r7, #20]
 8008876:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800887a:	460b      	mov	r3, r1
 800887c:	4313      	orrs	r3, r2
 800887e:	d006      	beq.n	800888e <disable_sensor_features+0x130>
    {
        rslt = set_gyro_self_offset_corr(BMI2_DISABLE, dev);
 8008880:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008882:	2000      	movs	r0, #0
 8008884:	f7fe f8ee 	bl	8006a64 <set_gyro_self_offset_corr>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable wrist gesture feature for wearable variant*/
    if (sensor_sel & BMI2_WRIST_GEST_SEL)
 800888e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008892:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008896:	60bb      	str	r3, [r7, #8]
 8008898:	2300      	movs	r3, #0
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80088a0:	460b      	mov	r3, r1
 80088a2:	4313      	orrs	r3, r2
 80088a4:	d006      	beq.n	80088b4 <disable_sensor_features+0x156>
    {
        rslt = set_wrist_gesture(BMI2_DISABLE, dev);
 80088a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088a8:	2000      	movs	r0, #0
 80088aa:	f7fe f951 	bl	8006b50 <set_wrist_gesture>
 80088ae:	4603      	mov	r3, r0
 80088b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable wrist wear wake-up feature */
    if (sensor_sel & BMI2_WRIST_WEAR_WAKE_UP_SEL)
 80088b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80088b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80088bc:	603b      	str	r3, [r7, #0]
 80088be:	2300      	movs	r3, #0
 80088c0:	607b      	str	r3, [r7, #4]
 80088c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80088c6:	460b      	mov	r3, r1
 80088c8:	4313      	orrs	r3, r2
 80088ca:	d006      	beq.n	80088da <disable_sensor_features+0x17c>
    {
        rslt = set_wrist_wear_wake_up(BMI2_DISABLE, dev);
 80088cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088ce:	2000      	movs	r0, #0
 80088d0:	f7fe f9b4 	bl	8006c3c <set_wrist_wear_wake_up>
 80088d4:	4603      	mov	r3, r0
 80088d6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    return rslt;
 80088da:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3750      	adds	r7, #80	@ 0x50
 80088e2:	46bd      	mov	sp, r7
 80088e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080088e8 <bmi2_set_i2c_handle>:
#include "i2c.h" // Assuming your I2C_HandleTypeDef hi2c3 is declared here or in main.h

// Static pointer to the I2C handle for BMI270
static I2C_HandleTypeDef* bmi2_i2c_hal_handle = NULL;

void bmi2_set_i2c_handle(I2C_HandleTypeDef* hi2c_bmi) {
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
    bmi2_i2c_hal_handle = hi2c_bmi;
 80088f0:	4a04      	ldr	r2, [pc, #16]	@ (8008904 <bmi2_set_i2c_handle+0x1c>)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6013      	str	r3, [r2, #0]
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	200006d4 	.word	0x200006d4

08008908 <bmi2_i2c_read>:

BMI2_INTF_RETURN_TYPE bmi2_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af04      	add	r7, sp, #16
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	607a      	str	r2, [r7, #4]
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]
    (void)intf_ptr; // intf_ptr is the I2C handle passed via bmi2_dev structure, we use the static one

    if (bmi2_i2c_hal_handle == NULL) {
 8008918:	4b10      	ldr	r3, [pc, #64]	@ (800895c <bmi2_i2c_read+0x54>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <bmi2_i2c_read+0x1e>
        return BMI2_E_NULL_PTR; // Or a specific error for uninitialized handle
 8008920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008924:	e016      	b.n	8008954 <bmi2_i2c_read+0x4c>
    }

    // STM32 HAL I2C read function typically requires the device address to be shifted left by 1
    // The HAL_I2C_Mem_Read function is suitable here.
    if (HAL_I2C_Mem_Read(bmi2_i2c_hal_handle, (uint16_t)(BMI270_I2C_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) == HAL_OK) {
 8008926:	4b0d      	ldr	r3, [pc, #52]	@ (800895c <bmi2_i2c_read+0x54>)
 8008928:	6818      	ldr	r0, [r3, #0]
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	b29b      	uxth	r3, r3
 8008932:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008936:	9102      	str	r1, [sp, #8]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	2301      	movs	r3, #1
 8008940:	21d0      	movs	r1, #208	@ 0xd0
 8008942:	f004 fbe1 	bl	800d108 <HAL_I2C_Mem_Read>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <bmi2_i2c_read+0x48>
        return BMI2_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	e001      	b.n	8008954 <bmi2_i2c_read+0x4c>
    } else {
        return BMI2_E_COM_FAIL;
 8008950:	f06f 0301 	mvn.w	r3, #1
    }
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	200006d4 	.word	0x200006d4

08008960 <bmi2_i2c_write>:

BMI2_INTF_RETURN_TYPE bmi2_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af04      	add	r7, sp, #16
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	607a      	str	r2, [r7, #4]
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]
    (void)intf_ptr; // intf_ptr is the I2C handle passed via bmi2_dev structure, we use the static one

    if (bmi2_i2c_hal_handle == NULL) {
 8008970:	4b10      	ldr	r3, [pc, #64]	@ (80089b4 <bmi2_i2c_write+0x54>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <bmi2_i2c_write+0x1e>
        return BMI2_E_NULL_PTR; // Or a specific error for uninitialized handle
 8008978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800897c:	e016      	b.n	80089ac <bmi2_i2c_write+0x4c>
    }
    
    // STM32 HAL I2C write function
    // The HAL_I2C_Mem_Write function is suitable here.
    if (HAL_I2C_Mem_Write(bmi2_i2c_hal_handle, (uint16_t)(BMI270_I2C_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)reg_data, len, HAL_MAX_DELAY) == HAL_OK) {
 800897e:	4b0d      	ldr	r3, [pc, #52]	@ (80089b4 <bmi2_i2c_write+0x54>)
 8008980:	6818      	ldr	r0, [r3, #0]
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	b29a      	uxth	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	b29b      	uxth	r3, r3
 800898a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800898e:	9102      	str	r1, [sp, #8]
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	2301      	movs	r3, #1
 8008998:	21d0      	movs	r1, #208	@ 0xd0
 800899a:	f004 faa1 	bl	800cee0 <HAL_I2C_Mem_Write>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <bmi2_i2c_write+0x48>
        return BMI2_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	e001      	b.n	80089ac <bmi2_i2c_write+0x4c>
    } else {
        return BMI2_E_COM_FAIL;
 80089a8:	f06f 0301 	mvn.w	r3, #1
    }
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	200006d4 	.word	0x200006d4

080089b8 <bmi2_delay_us>:

void bmi2_delay_us(uint32_t period_us, void *intf_ptr) {
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
    (void)intf_ptr; // Not used in this simple implementation
    
    // HAL_Delay is in milliseconds. For microsecond delay, a more precise timer is needed.
    // For initial testing, if period_us is large enough:
    if (period_us >= 1000) {
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089c8:	d308      	bcc.n	80089dc <bmi2_delay_us+0x24>
        HAL_Delay(period_us / 1000);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a18      	ldr	r2, [pc, #96]	@ (8008a30 <bmi2_delay_us+0x78>)
 80089ce:	fba2 2303 	umull	r2, r3, r2, r3
 80089d2:	099b      	lsrs	r3, r3, #6
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 ff83 	bl	800a8e0 <HAL_Delay>
             for (i = 0; i < 10; ++i) { // minimal delay
                __NOP();
             }
        }
    }
 80089da:	e024      	b.n	8008a26 <bmi2_delay_us+0x6e>
        uint32_t delay_cycles = period_us * (SystemCoreClock / 1000000U / 5U); // Approximate factor
 80089dc:	4b15      	ldr	r3, [pc, #84]	@ (8008a34 <bmi2_delay_us+0x7c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a15      	ldr	r2, [pc, #84]	@ (8008a38 <bmi2_delay_us+0x80>)
 80089e2:	fba2 2303 	umull	r2, r3, r2, r3
 80089e6:	0d5a      	lsrs	r2, r3, #21
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	fb02 f303 	mul.w	r3, r2, r3
 80089ee:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < delay_cycles; ++i) {
 80089f0:	2300      	movs	r3, #0
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	e003      	b.n	80089fe <bmi2_delay_us+0x46>
            __NOP();
 80089f6:	bf00      	nop
        for (i = 0; i < delay_cycles; ++i) {
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3301      	adds	r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d3f7      	bcc.n	80089f6 <bmi2_delay_us+0x3e>
        if (period_us > 0 && delay_cycles == 0) { // ensure at least minimal delay for very small period_us
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00c      	beq.n	8008a26 <bmi2_delay_us+0x6e>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <bmi2_delay_us+0x6e>
             for (i = 0; i < 10; ++i) { // minimal delay
 8008a12:	2300      	movs	r3, #0
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e003      	b.n	8008a20 <bmi2_delay_us+0x68>
                __NOP();
 8008a18:	bf00      	nop
             for (i = 0; i < 10; ++i) { // minimal delay
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b09      	cmp	r3, #9
 8008a24:	d9f8      	bls.n	8008a18 <bmi2_delay_us+0x60>
 8008a26:	bf00      	nop
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	10624dd3 	.word	0x10624dd3
 8008a34:	2000007c 	.word	0x2000007c
 8008a38:	6b5fca6b 	.word	0x6b5fca6b

08008a3c <_ZN7DRV82144initERK14DRV8214_Config>:
 */

#include "drv8214.h"

// Initialize the motor driver with default settings
uint8_t DRV8214::init(const DRV8214_Config& cfg) {
 8008a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]

    // Store the configuration settings
    config = cfg;
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	f102 000c 	add.w	r0, r2, #12
 8008a4e:	f103 0420 	add.w	r4, r3, #32
 8008a52:	4602      	mov	r2, r0
 8008a54:	4619      	mov	r1, r3
 8008a56:	f8d1 c000 	ldr.w	ip, [r1]
 8008a5a:	684e      	ldr	r6, [r1, #4]
 8008a5c:	688d      	ldr	r5, [r1, #8]
 8008a5e:	68c9      	ldr	r1, [r1, #12]
 8008a60:	f8c2 c000 	str.w	ip, [r2]
 8008a64:	6056      	str	r6, [r2, #4]
 8008a66:	6095      	str	r5, [r2, #8]
 8008a68:	60d1      	str	r1, [r2, #12]
 8008a6a:	3310      	adds	r3, #16
 8008a6c:	3010      	adds	r0, #16
 8008a6e:	42a3      	cmp	r3, r4
 8008a70:	d1ef      	bne.n	8008a52 <_ZN7DRV82144initERK14DRV8214_Config+0x16>
 8008a72:	4602      	mov	r2, r0
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	6859      	ldr	r1, [r3, #4]
 8008a78:	6010      	str	r0, [r2, #0]
 8008a7a:	6051      	str	r1, [r2, #4]
 8008a7c:	8919      	ldrh	r1, [r3, #8]
 8008a7e:	7a9b      	ldrb	r3, [r3, #10]
 8008a80:	8111      	strh	r1, [r2, #8]
 8008a82:	7293      	strb	r3, [r2, #10]

    disableHbridge(); // Disable H-bridge to be able to configure the driver
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fb6b 	bl	8009160 <_ZN7DRV821414disableHbridgeEv>
    setControlMode(config.control_mode, config.I2CControlled); // Default to PWM control with I2C enabled
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	7b59      	ldrb	r1, [r3, #13]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	7b1b      	ldrb	r3, [r3, #12]
 8008a92:	461a      	mov	r2, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f001 f986 	bl	8009da6 <_ZN7DRV821414setControlModeE11ControlModeb>
    setRegulationMode(config.regulation_mode); // Default to SPEED regulation
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7b9b      	ldrb	r3, [r3, #14]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f001 f9a3 	bl	8009dec <_ZN7DRV821417setRegulationModeE14RegulationMode>
    setVoltageRange(config.voltage_range);  // Default to 0 V - 3.92 V range
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	7bdb      	ldrb	r3, [r3, #15]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fb7a 	bl	80091a6 <_ZN7DRV821415setVoltageRangeEb>
    setOvervoltageProtection(config.ovp_enabled); // Default to overvoltage protection enabled
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7d5b      	ldrb	r3, [r3, #21]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fb88 	bl	80091ce <_ZN7DRV821424setOvervoltageProtectionEb>
    setCurrentRegMode(config.current_reg_mode); // Default to no current regulation
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	7e1b      	ldrb	r3, [r3, #24]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fbd7 	bl	8009278 <_ZN7DRV821417setCurrentRegModeEh>
    setStallDetection(config.stall_enabled); // Default to stall detection enabled
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	7d1b      	ldrb	r3, [r3, #20]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fb54 	bl	800917e <_ZN7DRV821417setStallDetectionEb>
    setStallBehavior(config.stall_behavior); // Default to outputs disabled on stall
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	7d9b      	ldrb	r3, [r3, #22]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fc09 	bl	80092f4 <_ZN7DRV821416setStallBehaviorEb>
    enableStallInterrupt(); // Default to enable stall interrupt
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fc73 	bl	80093ce <_ZN7DRV821420enableStallInterruptEv>
    enableCountThresholdInterrupt(); // Default to enable count threshold interrupt
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fc7f 	bl	80093ec <_ZN7DRV821429enableCountThresholdInterruptEv>
    setBridgeBehaviorThresholdReached(config.bridge_behavior_thr_reached); // Default to H-bridge stays enabled when RC_CNT exceeds threshold
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	7ddb      	ldrb	r3, [r3, #23]
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fc88 	bl	800940a <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>
    setInternalVoltageReference(0); // Default to internal voltage reference of 500mV
 8008afa:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8008b7c <_ZN7DRV82144initERK14DRV8214_Config+0x140>
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fc0c 	bl	800931c <_ZN7DRV821427setInternalVoltageReferenceEf>
    setSoftStartStop(config.soft_start_stop_enabled); // Default to soft start/stop disbaled
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fc90 	bl	8009432 <_ZN7DRV821416setSoftStartStopEb>
    setInrushDuration(config.inrush_duration); // Default to 500 ms
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fb90 	bl	800923e <_ZN7DRV821417setInrushDurationEt>
    setResistanceRelatedParameters(); // configure the INV_R and INV_R_SCALE values
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f001 f8b2 	bl	8009c88 <_ZN7DRV821430setResistanceRelatedParametersEv>
    enableRippleCount(); // Default to enable ripple counting
 8008b24:	2101      	movs	r1, #1
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 ff66 	bl	80099f8 <_ZN7DRV821417enableRippleCountEb>
    resetRippleCounter(); // Default to reset ripple counter
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fb62 	bl	80091f6 <_ZN7DRV821418resetRippleCounterEv>
    setKMC(config.kmc); // Default to KMC = 30
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f922 	bl	8009d84 <_ZN7DRV82146setKMCEh>
    setKMCScale(config.kmc_scale); // Default to KMC scale factor = 24 x 2^13
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f001 f863 	bl	8009c14 <_ZN7DRV821411setKMCScaleEh>
    brakeMotor(true); // Default to brake motor
 8008b4e:	2101      	movs	r1, #1
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 fa4b 	bl	8009fec <_ZN7DRV821410brakeMotorEb>
    enableErrorCorrection(false); // Default to disable error correction
 8008b56:	2100      	movs	r1, #0
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 ff5e 	bl	8009a1a <_ZN7DRV821421enableErrorCorrectionEb>
    if (config.verbose) {printMotorConfig(true);}
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <_ZN7DRV82144initERK14DRV8214_Config+0x134>
 8008b68:	2101      	movs	r1, #1
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f001 fabc 	bl	800a0e8 <_ZN7DRV821416printMotorConfigEb>

    return DRV8214_OK; // Return success code
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	00000000 	.word	0x00000000

08008b80 <_ZN7DRV821416getMotorSpeedRPMEv>:

uint8_t DRV8214::getFaultStatus() {
    return drv8214_i2c_read_register(address, DRV8214_FAULT);
}

uint32_t DRV8214::getMotorSpeedRPM() {
 8008b80:	b5b0      	push	{r4, r5, r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
    return ((drv8214_i2c_read_register(address, DRV8214_RC_STATUS1) * config.w_scale * 60) / (2 * M_PI * ripples_per_revolution));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f001 fd78 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008b94:	4603      	mov	r3, r0
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b9e:	fb03 f202 	mul.w	r2, r3, r2
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	1a9b      	subs	r3, r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7f7 fc92 	bl	80004d4 <__aeabi_i2d>
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	889b      	ldrh	r3, [r3, #4]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7f7 fc8b 	bl	80004d4 <__aeabi_i2d>
 8008bbe:	a30c      	add	r3, pc, #48	@ (adr r3, 8008bf0 <_ZN7DRV821416getMotorSpeedRPMEv+0x70>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fcf0 	bl	80005a8 <__aeabi_dmul>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4629      	mov	r1, r5
 8008bd0:	f7f7 fe14 	bl	80007fc <__aeabi_ddiv>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4619      	mov	r1, r3
 8008bdc:	f7f7 ffbc 	bl	8000b58 <__aeabi_d2uiz>
 8008be0:	4603      	mov	r3, r0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bdb0      	pop	{r4, r5, r7, pc}
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w
 8008bf0:	54442d18 	.word	0x54442d18
 8008bf4:	401921fb 	.word	0x401921fb

08008bf8 <_ZN7DRV821416getMotorSpeedRADEv>:

uint16_t DRV8214::getMotorSpeedRAD() {
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
    return ((drv8214_i2c_read_register(address, DRV8214_RC_STATUS1) * config.w_scale) / ripples_per_revolution);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2101      	movs	r1, #1
 8008c06:	4618      	mov	r0, r3
 8008c08:	f001 fd3c 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	8892      	ldrh	r2, [r2, #4]
 8008c1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c22:	b29b      	uxth	r3, r3
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <_ZN7DRV821421getMotorSpeedShaftRPMEv>:

uint16_t DRV8214::getMotorSpeedShaftRPM() {
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
    return (getMotorSpeedRPM() / motor_reduction_ratio);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff ffa3 	bl	8008b80 <_ZN7DRV821416getMotorSpeedRPMEv>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	79db      	ldrb	r3, [r3, #7]
 8008c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c44:	b29b      	uxth	r3, r3
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <_ZN7DRV821421getMotorSpeedShaftRADEv>:

uint16_t DRV8214::getMotorSpeedShaftRAD() {
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
    return (getMotorSpeedRAD() / motor_reduction_ratio);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff ffce 	bl	8008bf8 <_ZN7DRV821416getMotorSpeedRADEv>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	461a      	mov	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	79db      	ldrb	r3, [r3, #7]
 8008c64:	fb92 f3f3 	sdiv	r3, r2, r3
 8008c68:	b29b      	uxth	r3, r3
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <_ZN7DRV821421getMotorSpeedRegisterEv>:

uint8_t DRV8214::getMotorSpeedRegister() {
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_STATUS1);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	2101      	movs	r1, #1
 8008c80:	4618      	mov	r0, r3
 8008c82:	f001 fcff 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008c86:	4603      	mov	r3, r0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <_ZN7DRV821414getRippleCountEv>:

uint16_t DRV8214::getRippleCount() {
 8008c90:	b590      	push	{r4, r7, lr}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
    return (drv8214_i2c_read_register(address, DRV8214_RC_STATUS3) << 8) | drv8214_i2c_read_register(address, DRV8214_RC_STATUS2);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2103      	movs	r1, #3
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f001 fcf0 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	b21b      	sxth	r3, r3
 8008ca8:	021b      	lsls	r3, r3, #8
 8008caa:	b21c      	sxth	r4, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2102      	movs	r1, #2
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f001 fce6 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	b21b      	sxth	r3, r3
 8008cbc:	4323      	orrs	r3, r4
 8008cbe:	b21b      	sxth	r3, r3
 8008cc0:	b29b      	uxth	r3, r3
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd90      	pop	{r4, r7, pc}
	...

08008ccc <_ZN7DRV821415getMotorVoltageEv>:

float DRV8214::getMotorVoltage() {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
    if (config.voltage_range) {
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	7bdb      	ldrb	r3, [r3, #15]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d016      	beq.n	8008d0a <_ZN7DRV821415getMotorVoltageEv+0x3e>
        float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 255.0f) * 3.92f;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2104      	movs	r1, #4
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f001 fcce 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008cf2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8008d9c <_ZN7DRV821415getMotorVoltageEv+0xd0>
 8008cf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cfa:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8008da0 <_ZN7DRV821415getMotorVoltageEv+0xd4>
 8008cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d02:	edc7 7a03 	vstr	s15, [r7, #12]
        return voltage;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	e040      	b.n	8008d8c <_ZN7DRV821415getMotorVoltageEv+0xc0>
    } else {
        if (config.ovp_enabled) {
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	7d5b      	ldrb	r3, [r3, #21]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d026      	beq.n	8008d60 <_ZN7DRV821415getMotorVoltageEv+0x94>
            // If OVP is enabled, the maximum voltage is 11 V
            if (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) > 0xB0) {
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2104      	movs	r1, #4
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 fcb3 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2bb0      	cmp	r3, #176	@ 0xb0
 8008d22:	bf8c      	ite	hi
 8008d24:	2301      	movhi	r3, #1
 8008d26:	2300      	movls	r3, #0
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <_ZN7DRV821415getMotorVoltageEv+0x66>
                return 11.0f;
 8008d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8008da4 <_ZN7DRV821415getMotorVoltageEv+0xd8>)
 8008d30:	e02c      	b.n	8008d8c <_ZN7DRV821415getMotorVoltageEv+0xc0>
            } else {     // 00h corresponds to 0 V and B0h corresponds to 11 V.
                float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 176.0f) * 11.0f;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2104      	movs	r1, #4
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f001 fca3 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	ee07 3a90 	vmov	s15, r3
 8008d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d48:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8008da8 <_ZN7DRV821415getMotorVoltageEv+0xdc>
 8008d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d50:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8008d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d58:	edc7 7a04 	vstr	s15, [r7, #16]
                return voltage;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	e015      	b.n	8008d8c <_ZN7DRV821415getMotorVoltageEv+0xc0>
            }
        } else {
            float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 255.0f) * 15.7f;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2104      	movs	r1, #4
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 fc8c 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d76:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8008d9c <_ZN7DRV821415getMotorVoltageEv+0xd0>
 8008d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d7e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8008dac <_ZN7DRV821415getMotorVoltageEv+0xe0>
 8008d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d86:	edc7 7a05 	vstr	s15, [r7, #20]
            return voltage;
 8008d8a:	697b      	ldr	r3, [r7, #20]
        }
    }
}
 8008d8c:	ee07 3a90 	vmov	s15, r3
 8008d90:	eeb0 0a67 	vmov.f32	s0, s15
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	437f0000 	.word	0x437f0000
 8008da0:	407ae148 	.word	0x407ae148
 8008da4:	41300000 	.word	0x41300000
 8008da8:	43300000 	.word	0x43300000
 8008dac:	417b3333 	.word	0x417b3333

08008db0 <_ZN7DRV821423getMotorVoltageRegisterEv>:

uint8_t DRV8214::getMotorVoltageRegister() {
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_STATUS1);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2104      	movs	r1, #4
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f001 fc60 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008dc4:	4603      	mov	r3, r0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <_ZN7DRV821415getMotorCurrentEv>:

float DRV8214::getMotorCurrent() {
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
    // 00h corresponds to 0 A and C0h corresponds to the maximum value set by the CS_GAIN_SEL bit
    float current = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS2) / 192.0f) * config.MaxCurrent;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	2105      	movs	r1, #5
 8008dde:	4618      	mov	r0, r3
 8008de0:	f001 fc50 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008de4:	4603      	mov	r3, r0
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dee:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8008e14 <_ZN7DRV821415getMotorCurrentEv+0x44>
 8008df2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e00:	edc7 7a03 	vstr	s15, [r7, #12]
    return current;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	ee07 3a90 	vmov	s15, r3
}
 8008e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	43400000 	.word	0x43400000

08008e18 <_ZN7DRV821423getMotorCurrentRegisterEv>:

uint8_t DRV8214::getMotorCurrentRegister() {
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_STATUS2);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2105      	movs	r1, #5
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 fc2c 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008e2c:	4603      	mov	r3, r0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
	...

08008e38 <_ZN7DRV821412getDutyCycleEv>:

uint8_t DRV8214::getDutyCycle() {
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
    uint8_t dutyCycle = drv8214_i2c_read_register(address, DRV8214_REG_STATUS3) & REG_STATUS3_IN_DUTY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2106      	movs	r1, #6
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 fc1c 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e52:	73fb      	strb	r3, [r7, #15]
    return (dutyCycle * 100) / 63; // Convert 6-bit value to percentage
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	2264      	movs	r2, #100	@ 0x64
 8008e58:	fb02 f303 	mul.w	r3, r2, r3
 8008e5c:	4a05      	ldr	r2, [pc, #20]	@ (8008e74 <_ZN7DRV821412getDutyCycleEv+0x3c>)
 8008e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8008e62:	441a      	add	r2, r3
 8008e64:	1152      	asrs	r2, r2, #5
 8008e66:	17db      	asrs	r3, r3, #31
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	b2db      	uxtb	r3, r3
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	82082083 	.word	0x82082083

08008e78 <_ZN7DRV821410getCONFIG0Ev>:

uint8_t DRV8214::getCONFIG0() {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_CONFIG0);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2109      	movs	r1, #9
 8008e86:	4618      	mov	r0, r3
 8008e88:	f001 fbfc 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008e8c:	4603      	mov	r3, r0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <_ZN7DRV821417getInrushDurationEv>:

uint16_t DRV8214::getInrushDuration() {
 8008e96:	b590      	push	{r4, r7, lr}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
    return (drv8214_i2c_read_register(address, DRV8214_CONFIG1) << 8) | drv8214_i2c_read_register(address, DRV8214_CONFIG2);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	210a      	movs	r1, #10
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f001 fbed 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	b21b      	sxth	r3, r3
 8008eae:	021b      	lsls	r3, r3, #8
 8008eb0:	b21c      	sxth	r4, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	210b      	movs	r1, #11
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f001 fbe3 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	b21b      	sxth	r3, r3
 8008ec2:	4323      	orrs	r3, r4
 8008ec4:	b21b      	sxth	r3, r3
 8008ec6:	b29b      	uxth	r3, r3
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd90      	pop	{r4, r7, pc}

08008ed0 <_ZN7DRV821410getCONFIG3Ev>:

uint8_t DRV8214::getCONFIG3() {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_CONFIG3);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	210c      	movs	r1, #12
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f001 fbd0 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008ee4:	4603      	mov	r3, r0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <_ZN7DRV821410getCONFIG4Ev>:

uint8_t DRV8214::getCONFIG4() {
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_CONFIG4);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	210d      	movs	r1, #13
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 fbc1 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008f02:	4603      	mov	r3, r0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <_ZN7DRV821412getREG_CTRL0Ev>:

uint8_t DRV8214::getREG_CTRL0() {
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL0);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	210e      	movs	r1, #14
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f001 fbb2 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008f20:	4603      	mov	r3, r0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <_ZN7DRV821412getREG_CTRL1Ev>:

uint8_t DRV8214::getREG_CTRL1() {
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	210f      	movs	r1, #15
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 fba3 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008f3e:	4603      	mov	r3, r0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <_ZN7DRV821412getREG_CTRL2Ev>:

uint8_t DRV8214::getREG_CTRL2() {
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL2);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2110      	movs	r1, #16
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 fb94 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008f5c:	4603      	mov	r3, r0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <_ZN7DRV821411getRC_CTRL0Ev>:

uint8_t DRV8214::getRC_CTRL0() {
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL0);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2111      	movs	r1, #17
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 fb85 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008f7a:	4603      	mov	r3, r0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <_ZN7DRV821411getRC_CTRL1Ev>:

uint8_t DRV8214::getRC_CTRL1() {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL1);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2112      	movs	r1, #18
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 fb76 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008f98:	4603      	mov	r3, r0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <_ZN7DRV821411getRC_CTRL2Ev>:

uint8_t DRV8214::getRC_CTRL2() {
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL2);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	2113      	movs	r1, #19
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f001 fb67 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008fb6:	4603      	mov	r3, r0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <_ZN7DRV821418getRippleThresholdEv>:

uint16_t DRV8214::getRippleThreshold()
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
    uint8_t ctrl2 = drv8214_i2c_read_register(address, DRV8214_RC_CTRL2);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2113      	movs	r1, #19
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 fb58 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	73fb      	strb	r3, [r7, #15]
    uint8_t ctrl1 = drv8214_i2c_read_register(address, DRV8214_RC_CTRL1);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2112      	movs	r1, #18
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f001 fb50 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73bb      	strb	r3, [r7, #14]
    // top two bits are bits 1..0 in ctrl2
    uint16_t thr_high = (ctrl2 & 0x03) << 8; // shift them to bits 9..8
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	021b      	lsls	r3, r3, #8
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ff4:	81bb      	strh	r3, [r7, #12]
    uint16_t thr_low  = ctrl1;               // bits 7..0
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	817b      	strh	r3, [r7, #10]
    return (thr_high | thr_low); 
 8008ffa:	89ba      	ldrh	r2, [r7, #12]
 8008ffc:	897b      	ldrh	r3, [r7, #10]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	b29b      	uxth	r3, r3
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <_ZN7DRV821424getRippleThresholdScaledEv>:

uint16_t DRV8214::getRippleThresholdScaled() {
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
    getRippleThresholdScale();
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f83f 	bl	8009096 <_ZN7DRV821423getRippleThresholdScaleEv>
    if (config.ripple_threshold_scale  == 0) { return getRippleThreshold() * 2;  }
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <_ZN7DRV821424getRippleThresholdScaledEv+0x26>
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff ffcc 	bl	8008fc0 <_ZN7DRV821418getRippleThresholdEv>
 8009028:	4603      	mov	r3, r0
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	b29b      	uxth	r3, r3
 800902e:	e02e      	b.n	800908e <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    if (config.ripple_threshold_scale  == 1) { return getRippleThreshold() * 8;  }
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009036:	2b01      	cmp	r3, #1
 8009038:	d106      	bne.n	8009048 <_ZN7DRV821424getRippleThresholdScaledEv+0x3e>
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff ffc0 	bl	8008fc0 <_ZN7DRV821418getRippleThresholdEv>
 8009040:	4603      	mov	r3, r0
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	b29b      	uxth	r3, r3
 8009046:	e022      	b.n	800908e <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    if (config.ripple_threshold_scale  == 2) { return getRippleThreshold() * 16; }
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800904e:	2b02      	cmp	r3, #2
 8009050:	d106      	bne.n	8009060 <_ZN7DRV821424getRippleThresholdScaledEv+0x56>
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff ffb4 	bl	8008fc0 <_ZN7DRV821418getRippleThresholdEv>
 8009058:	4603      	mov	r3, r0
 800905a:	011b      	lsls	r3, r3, #4
 800905c:	b29b      	uxth	r3, r3
 800905e:	e016      	b.n	800908e <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    if (config.ripple_threshold_scale  == 3) { return getRippleThreshold() * 64; }
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009066:	2b03      	cmp	r3, #3
 8009068:	d106      	bne.n	8009078 <_ZN7DRV821424getRippleThresholdScaledEv+0x6e>
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff ffa8 	bl	8008fc0 <_ZN7DRV821418getRippleThresholdEv>
 8009070:	4603      	mov	r3, r0
 8009072:	019b      	lsls	r3, r3, #6
 8009074:	b29b      	uxth	r3, r3
 8009076:	e00a      	b.n	800908e <_ZN7DRV821424getRippleThresholdScaledEv+0x84>
    return getRippleThreshold() * config.ripple_threshold_scale;
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7ff ffa1 	bl	8008fc0 <_ZN7DRV821418getRippleThresholdEv>
 800907e:	4603      	mov	r3, r0
 8009080:	461a      	mov	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009088:	fb12 f303 	smulbb	r3, r2, r3
 800908c:	b29b      	uxth	r3, r3
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <_ZN7DRV821423getRippleThresholdScaleEv>:

uint16_t DRV8214::getRippleThresholdScale() {
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
    config.ripple_threshold_scale = (drv8214_i2c_read_register(address, DRV8214_RC_CTRL2) & RC_CTRL2_RC_THR_SCALE) >> 2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2113      	movs	r1, #19
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 faed 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 80090aa:	4603      	mov	r3, r0
 80090ac:	089b      	lsrs	r3, r3, #2
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	f003 0303 	and.w	r3, r3, #3
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    return config.ripple_threshold_scale;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <_ZN7DRV82146getKMCEv>:

uint8_t DRV8214::getKMC() {
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL4);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2115      	movs	r1, #21
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 fad3 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 80090de:	4603      	mov	r3, r0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <_ZN7DRV821411getRC_CTRL6Ev>:

uint8_t DRV8214::getFilterDamping() {
    return (drv8214_i2c_read_register(address, DRV8214_RC_CTRL5) >> 4) & 0x0F;
}

uint8_t DRV8214::getRC_CTRL6() {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL6);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2117      	movs	r1, #23
 80090f6:	4618      	mov	r0, r3
 80090f8:	f001 fac4 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 80090fc:	4603      	mov	r3, r0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <_ZN7DRV821411getRC_CTRL7Ev>:

uint8_t DRV8214::getRC_CTRL7() {
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL7);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2118      	movs	r1, #24
 8009114:	4618      	mov	r0, r3
 8009116:	f001 fab5 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 800911a:	4603      	mov	r3, r0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <_ZN7DRV821411getRC_CTRL8Ev>:

uint8_t DRV8214::getRC_CTRL8() {
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL8);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2119      	movs	r1, #25
 8009132:	4618      	mov	r0, r3
 8009134:	f001 faa6 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 8009138:	4603      	mov	r3, r0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <_ZN7DRV821413enableHbridgeEv>:

// --- Control Functions ---
void DRV8214::enableHbridge() {
 8009142:	b580      	push	{r7, lr}
 8009144:	b082      	sub	sp, #8
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OUT, true);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	7818      	ldrb	r0, [r3, #0]
 800914e:	2301      	movs	r3, #1
 8009150:	2280      	movs	r2, #128	@ 0x80
 8009152:	2109      	movs	r1, #9
 8009154:	f001 fada 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009158:	bf00      	nop
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <_ZN7DRV821414disableHbridgeEv>:

void DRV8214::disableHbridge() {
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OUT, false);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	7818      	ldrb	r0, [r3, #0]
 800916c:	2300      	movs	r3, #0
 800916e:	2280      	movs	r2, #128	@ 0x80
 8009170:	2109      	movs	r1, #9
 8009172:	f001 facb 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <_ZN7DRV821417setStallDetectionEb>:

void DRV8214::setStallDetection(bool stall_en) {
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	460b      	mov	r3, r1
 8009188:	70fb      	strb	r3, [r7, #3]
    config.stall_enabled = stall_en;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	78fa      	ldrb	r2, [r7, #3]
 800918e:	751a      	strb	r2, [r3, #20]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG0_EN_STALL, stall_en);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	7818      	ldrb	r0, [r3, #0]
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	2220      	movs	r2, #32
 8009198:	210c      	movs	r1, #12
 800919a:	f001 fab7 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <_ZN7DRV821415setVoltageRangeEb>:

void DRV8214::setVoltageRange(bool range) {
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b082      	sub	sp, #8
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	460b      	mov	r3, r1
 80091b0:	70fb      	strb	r3, [r7, #3]
    config.voltage_range = range;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	78fa      	ldrb	r2, [r7, #3]
 80091b6:	73da      	strb	r2, [r3, #15]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_VM_GAIN_SEL, range);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	7818      	ldrb	r0, [r3, #0]
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	2208      	movs	r2, #8
 80091c0:	2109      	movs	r1, #9
 80091c2:	f001 faa3 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 80091c6:	bf00      	nop
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <_ZN7DRV821424setOvervoltageProtectionEb>:

void DRV8214::setOvervoltageProtection(bool OVP) {
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	460b      	mov	r3, r1
 80091d8:	70fb      	strb	r3, [r7, #3]
    config.ovp_enabled = OVP;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	78fa      	ldrb	r2, [r7, #3]
 80091de:	755a      	strb	r2, [r3, #21]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OVP, true);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	7818      	ldrb	r0, [r3, #0]
 80091e4:	2301      	movs	r3, #1
 80091e6:	2240      	movs	r2, #64	@ 0x40
 80091e8:	2109      	movs	r1, #9
 80091ea:	f001 fa8f 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 80091ee:	bf00      	nop
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <_ZN7DRV821418resetRippleCounterEv>:

void DRV8214::resetRippleCounter() {
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b082      	sub	sp, #8
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_CLR_CNT, true);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	7818      	ldrb	r0, [r3, #0]
 8009202:	2301      	movs	r3, #1
 8009204:	2204      	movs	r2, #4
 8009206:	2109      	movs	r1, #9
 8009208:	f001 fa80 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <_ZN7DRV821415resetFaultFlagsEv>:

void DRV8214::resetFaultFlags() {
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
    disableHbridge();
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff ff9f 	bl	8009160 <_ZN7DRV821414disableHbridgeEv>
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_CLR_FLT, true);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	7818      	ldrb	r0, [r3, #0]
 8009226:	2301      	movs	r3, #1
 8009228:	2202      	movs	r2, #2
 800922a:	2109      	movs	r1, #9
 800922c:	f001 fa6e 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
    enableHbridge();
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff ff86 	bl	8009142 <_ZN7DRV821413enableHbridgeEv>
}
 8009236:	bf00      	nop
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <_ZN7DRV821417setInrushDurationEt>:

void DRV8214::disableDutyCycleControl() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_DUTY_CTRL, false);
}

void DRV8214::setInrushDuration(uint16_t threshold) {
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	460b      	mov	r3, r1
 8009248:	807b      	strh	r3, [r7, #2]
    drv8214_i2c_write_register(address, DRV8214_CONFIG1, (threshold >> 8) & 0xFF);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	7818      	ldrb	r0, [r3, #0]
 800924e:	887b      	ldrh	r3, [r7, #2]
 8009250:	0a1b      	lsrs	r3, r3, #8
 8009252:	b29b      	uxth	r3, r3
 8009254:	b2db      	uxtb	r3, r3
 8009256:	461a      	mov	r2, r3
 8009258:	210a      	movs	r1, #10
 800925a:	f001 f9ed 	bl	800a638 <_Z26drv8214_i2c_write_registerhhh>
    drv8214_i2c_write_register(address, DRV8214_CONFIG2, threshold & 0xFF);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	887a      	ldrh	r2, [r7, #2]
 8009264:	b2d2      	uxtb	r2, r2
 8009266:	210b      	movs	r1, #11
 8009268:	4618      	mov	r0, r3
 800926a:	f001 f9e5 	bl	800a638 <_Z26drv8214_i2c_write_registerhhh>
}
 800926e:	bf00      	nop
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <_ZN7DRV821417setCurrentRegModeEh>:

void DRV8214::setCurrentRegMode(uint8_t mode) {
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]

    if (mode > 3) { mode = 3; } // Cap mode to 3
 8009284:	78fb      	ldrb	r3, [r7, #3]
 8009286:	2b03      	cmp	r3, #3
 8009288:	d901      	bls.n	800928e <_ZN7DRV821417setCurrentRegModeEh+0x16>
 800928a:	2303      	movs	r3, #3
 800928c:	70fb      	strb	r3, [r7, #3]
    switch (mode){
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	2b03      	cmp	r3, #3
 8009292:	d823      	bhi.n	80092dc <_ZN7DRV821417setCurrentRegModeEh+0x64>
 8009294:	a201      	add	r2, pc, #4	@ (adr r2, 800929c <_ZN7DRV821417setCurrentRegModeEh+0x24>)
 8009296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929a:	bf00      	nop
 800929c:	080092ad 	.word	0x080092ad
 80092a0:	080092b9 	.word	0x080092b9
 80092a4:	080092c5 	.word	0x080092c5
 80092a8:	080092d1 	.word	0x080092d1
    case 0: // 0b00
        mode = 0x00; // No current regulation at anytime
 80092ac:	2300      	movs	r3, #0
 80092ae:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 0;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	761a      	strb	r2, [r3, #24]
        break;
 80092b6:	e012      	b.n	80092de <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 1: // 0b01
        mode = 0x40; // Current regulation at all time if stall detection is desabled
 80092b8:	2340      	movs	r3, #64	@ 0x40
 80092ba:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 1; // Current regulation during tinrush only if stall detection is enabled
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	761a      	strb	r2, [r3, #24]
        break;       
 80092c2:	e00c      	b.n	80092de <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 2: // 0b10
        mode = 0x80; // Current regulation at all time
 80092c4:	2380      	movs	r3, #128	@ 0x80
 80092c6:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	761a      	strb	r2, [r3, #24]
        break;
 80092ce:	e006      	b.n	80092de <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 3: // 0b11
        mode = 0xC0; // Current regulation at all time
 80092d0:	23c0      	movs	r3, #192	@ 0xc0
 80092d2:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 3;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2203      	movs	r2, #3
 80092d8:	761a      	strb	r2, [r3, #24]
        break;
 80092da:	e000      	b.n	80092de <_ZN7DRV821417setCurrentRegModeEh+0x66>
    default:
        break;
 80092dc:	bf00      	nop
    }
    drv8214_i2c_modify_register_bits(address, DRV8214_CONFIG3, CONFIG3_IMODE, mode);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	7818      	ldrb	r0, [r3, #0]
 80092e2:	78fb      	ldrb	r3, [r7, #3]
 80092e4:	22c0      	movs	r2, #192	@ 0xc0
 80092e6:	210c      	movs	r1, #12
 80092e8:	f001 fa42 	bl	800a770 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 80092ec:	bf00      	nop
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <_ZN7DRV821416setStallBehaviorEb>:

void DRV8214::setStallBehavior(bool behavior) {
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
    // The SMODE bit programs the device's response to a stall condition. 
    // When SMODE = 0b, the STALL bit becomes 1b, the outputs are disabled
    // When SMODE = 1b, the STALL bit becomes 1b, but the outputs continue to drive current into the motor
    config.stall_behavior = behavior;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	78fa      	ldrb	r2, [r7, #3]
 8009304:	759a      	strb	r2, [r3, #22]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_SMODE, behavior);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	7818      	ldrb	r0, [r3, #0]
 800930a:	78fb      	ldrb	r3, [r7, #3]
 800930c:	2220      	movs	r2, #32
 800930e:	210c      	movs	r1, #12
 8009310:	f001 f9fc 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <_ZN7DRV821427setInternalVoltageReferenceEf>:

void DRV8214::setInternalVoltageReference(float reference_voltage) {
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	ed87 0a00 	vstr	s0, [r7]
    // VVREF must be lower than VVM by at least 1.25 V. The maximum recommended value of VVREF is 3.3 V. 
    // If INT_VREF bit is set to 1b, VVREF is internally selected with a fixed value of 500 mV.
    if (reference_voltage == 0) { 
 8009328:	edd7 7a00 	vldr	s15, [r7]
 800932c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009334:	d10b      	bne.n	800934e <_ZN7DRV821427setInternalVoltageReferenceEf+0x32>
        config.Vref = 0.5f; // Default
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800933c:	611a      	str	r2, [r3, #16]
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, true);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	7818      	ldrb	r0, [r3, #0]
 8009342:	2301      	movs	r3, #1
 8009344:	2210      	movs	r2, #16
 8009346:	210c      	movs	r1, #12
 8009348:	f001 f9e0 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
    } else { 
        config.Vref = reference_voltage;
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, false);
    }
}
 800934c:	e009      	b.n	8009362 <_ZN7DRV821427setInternalVoltageReferenceEf+0x46>
        config.Vref = reference_voltage;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	611a      	str	r2, [r3, #16]
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, false);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	7818      	ldrb	r0, [r3, #0]
 8009358:	2300      	movs	r3, #0
 800935a:	2210      	movs	r2, #16
 800935c:	210c      	movs	r1, #12
 800935e:	f001 f9d5 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009362:	bf00      	nop
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <_ZN7DRV821413setI2CControlEb>:

void DRV8214::configureConfig3(uint8_t config3) {
    drv8214_i2c_write_register(address, DRV8214_CONFIG3, config3);
}

void DRV8214::setI2CControl(bool I2CControl) {
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	460b      	mov	r3, r1
 8009374:	70fb      	strb	r3, [r7, #3]
    config.I2CControlled = I2CControl;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	731a      	strb	r2, [r3, #12]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_BC, I2CControl);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	7818      	ldrb	r0, [r3, #0]
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	2204      	movs	r2, #4
 8009384:	210d      	movs	r1, #13
 8009386:	f001 f9c1 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 800938a:	bf00      	nop
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <_ZN7DRV821416enablePWMControlEv>:

void DRV8214::enablePWMControl() {
 8009392:	b580      	push	{r7, lr}
 8009394:	b082      	sub	sp, #8
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_PMODE, true);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	7818      	ldrb	r0, [r3, #0]
 800939e:	2301      	movs	r3, #1
 80093a0:	2208      	movs	r2, #8
 80093a2:	210d      	movs	r1, #13
 80093a4:	f001 f9b2 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <_ZN7DRV821417enablePHENControlEv>:

void DRV8214::enablePHENControl() {
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_PMODE, false);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	7818      	ldrb	r0, [r3, #0]
 80093bc:	2300      	movs	r3, #0
 80093be:	2208      	movs	r2, #8
 80093c0:	210d      	movs	r1, #13
 80093c2:	f001 f9a3 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 80093c6:	bf00      	nop
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <_ZN7DRV821420enableStallInterruptEv>:

void DRV8214::enableStallInterrupt() {
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b082      	sub	sp, #8
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_STALL_REP, true);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7818      	ldrb	r0, [r3, #0]
 80093da:	2301      	movs	r3, #1
 80093dc:	2220      	movs	r2, #32
 80093de:	210d      	movs	r1, #13
 80093e0:	f001 f994 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <_ZN7DRV821429enableCountThresholdInterruptEv>:

void DRV8214::disableStallInterrupt() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_STALL_REP, false);
}

void DRV8214::enableCountThresholdInterrupt() {
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register_bits(address, DRV8214_CONFIG4, CONFIG4_RC_REP, 0b10000000);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	7818      	ldrb	r0, [r3, #0]
 80093f8:	2380      	movs	r3, #128	@ 0x80
 80093fa:	22c0      	movs	r2, #192	@ 0xc0
 80093fc:	210d      	movs	r1, #13
 80093fe:	f001 f9b7 	bl	800a770 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>:

void DRV8214::disableCountThresholdInterrupt() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_RC_REP, false);
}

void DRV8214::setBridgeBehaviorThresholdReached(bool stops) {
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	70fb      	strb	r3, [r7, #3]
    // stops = 0b: H-bridge stays enabled when RC_CNT exceeds threshold
    // stops = 1b: H-bridge is disabled (High-Z) when RC_CNT exceeds threshold
    config.bridge_behavior_thr_reached = stops; 
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	78fa      	ldrb	r2, [r7, #3]
 800941a:	75da      	strb	r2, [r3, #23]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_RC_HIZ, stops);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	7818      	ldrb	r0, [r3, #0]
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	2220      	movs	r2, #32
 8009424:	2111      	movs	r1, #17
 8009426:	f001 f971 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <_ZN7DRV821416setSoftStartStopEb>:

void DRV8214::setSoftStartStop(bool enable) {
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	460b      	mov	r3, r1
 800943c:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_REG_CTRL0, REG_CTRL0_EN_SS, enable);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	7818      	ldrb	r0, [r3, #0]
 8009442:	78fb      	ldrb	r3, [r7, #3]
 8009444:	2220      	movs	r2, #32
 8009446:	210e      	movs	r1, #14
 8009448:	f001 f960 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <_ZN7DRV821428setRegulationAndStallCurrentEf>:

void DRV8214::configureControl0(uint8_t control0) {
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL0, control0);
}

void DRV8214::setRegulationAndStallCurrent(float requested_current) {
 8009454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009458:	b0cd      	sub	sp, #308	@ 0x134
 800945a:	af08      	add	r7, sp, #32
 800945c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009460:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009464:	6018      	str	r0, [r3, #0]
 8009466:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800946a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800946e:	ed83 0a00 	vstr	s0, [r3]
    //   1X1b => 5560 μA/A, max current 0.125 A

    uint8_t cs_gain_sel;

    // Clamp very low currents (<0.125 A) to the lowest recommended setting:
    if (requested_current < 0.125f) {
 8009472:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009476:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800947a:	edd3 7a00 	vldr	s15, [r3]
 800947e:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8009482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948a:	d512      	bpl.n	80094b2 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x5e>
        cs_gain_sel = 0b111; // 5560 μA/A, max current 0.125 A
 800948c:	2307      	movs	r3, #7
 800948e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 5560e-6; // Convert μA/A to A/A
 8009492:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009496:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a89      	ldr	r2, [pc, #548]	@ (80096c4 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x270>)
 800949e:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.125f;
 80094a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 80094ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80094b0:	e091      	b.n	80095d6 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 0.25f) {
 80094b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094b6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094ba:	edd3 7a00 	vldr	s15, [r3]
 80094be:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80094c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ca:	d512      	bpl.n	80094f2 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x9e>
        cs_gain_sel = 0b110; // 5560 μA/A, max current 0.25 A
 80094cc:	2306      	movs	r3, #6
 80094ce:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 5560e-6;
 80094d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a79      	ldr	r2, [pc, #484]	@ (80096c4 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x270>)
 80094de:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.25f;
 80094e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 80094ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80094f0:	e071      	b.n	80095d6 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 0.5f) {
 80094f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094fa:	edd3 7a00 	vldr	s15, [r3]
 80094fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950a:	d512      	bpl.n	8009532 <_ZN7DRV821428setRegulationAndStallCurrentEf+0xde>
        cs_gain_sel = 0b011; // 1125 μA/A, max current 0.5 A
 800950c:	2303      	movs	r3, #3
 800950e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 1125e-6;
 8009512:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009516:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a6a      	ldr	r2, [pc, #424]	@ (80096c8 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x274>)
 800951e:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.5f;
 8009520:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009524:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800952e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009530:	e051      	b.n	80095d6 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 1.0f) {
 8009532:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009536:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800953a:	edd3 7a00 	vldr	s15, [r3]
 800953e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954a:	d512      	bpl.n	8009572 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x11e>
        cs_gain_sel = 0b010; // 1125 μA/A, max current 1 A
 800954c:	2302      	movs	r3, #2
 800954e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 1125e-6;
 8009552:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009556:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a5a      	ldr	r2, [pc, #360]	@ (80096c8 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x274>)
 800955e:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 1.0f;
 8009560:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009564:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800956e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009570:	e031      	b.n	80095d6 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 2.0f) {
 8009572:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009576:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800957a:	edd3 7a00 	vldr	s15, [r3]
 800957e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800958a:	d512      	bpl.n	80095b2 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x15e>
        cs_gain_sel = 0b001; // 225 μA/A, max current 2 A
 800958c:	2301      	movs	r3, #1
 800958e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 225e-6;
 8009592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009596:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a4b      	ldr	r2, [pc, #300]	@ (80096cc <_ZN7DRV821428setRegulationAndStallCurrentEf+0x278>)
 800959e:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 2.0f;
 80095a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80095ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80095b0:	e011      	b.n	80095d6 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else {
        // For >= 2.0 A, recommended setting is 000b (max current 4 A).
        // Also clamp above 4 A to the same setting (since 4 A is the top of the recommended range).
        cs_gain_sel = 0b000; // 225 μA/A, max current 4 A
 80095b2:	2300      	movs	r3, #0
 80095b4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 225e-6;
 80095b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a42      	ldr	r2, [pc, #264]	@ (80096cc <_ZN7DRV821428setRegulationAndStallCurrentEf+0x278>)
 80095c4:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 4.0f;
 80095c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80095d4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL0, RC_CTRL0_CS_GAIN_SEL, cs_gain_sel);
 80095d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	7818      	ldrb	r0, [r3, #0]
 80095e2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80095e6:	2207      	movs	r2, #7
 80095e8:	2111      	movs	r1, #17
 80095ea:	f001 f8c1 	bl	800a770 <_Z32drv8214_i2c_modify_register_bitshhhh>

    // Update Itrip calculation with the new scale
    config.Itrip = config.Vref / (Ripropri * config.Aipropri);
 80095ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	edd3 6a04 	vldr	s13, [r3, #16]
 80095fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009600:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	885b      	ldrh	r3, [r3, #2]
 8009608:	ee07 3a90 	vmov	s15, r3
 800960c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009610:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009614:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	edd3 7a07 	vldr	s15, [r3, #28]
 800961e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800962a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	edc3 7a08 	vstr	s15, [r3, #32]

    if (config.verbose) {
 8009634:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009638:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009642:	2b00      	cmp	r3, #0
 8009644:	d038      	beq.n	80096b8 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x264>
        char buffer[256];
        snprintf(buffer, sizeof(buffer), "Requested Itrip = %f A => Chosen CS_GAIN_SEL: 0b%d => Aipropri = %f uA/A => Actual Itrip = %f A\n", requested_current, cs_gain_sel, config.Aipropri, config.Itrip);
 8009646:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800964a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800964e:	6818      	ldr	r0, [r3, #0]
 8009650:	f7f6 ff52 	bl	80004f8 <__aeabi_f2d>
 8009654:	4604      	mov	r4, r0
 8009656:	460d      	mov	r5, r1
 8009658:	f897 610f 	ldrb.w	r6, [r7, #271]	@ 0x10f
 800965c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009660:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	4618      	mov	r0, r3
 800966a:	f7f6 ff45 	bl	80004f8 <__aeabi_f2d>
 800966e:	4680      	mov	r8, r0
 8009670:	4689      	mov	r9, r1
 8009672:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009676:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6a1b      	ldr	r3, [r3, #32]
 800967e:	4618      	mov	r0, r3
 8009680:	f7f6 ff3a 	bl	80004f8 <__aeabi_f2d>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	f107 000c 	add.w	r0, r7, #12
 800968c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009690:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009694:	9602      	str	r6, [sp, #8]
 8009696:	e9cd 4500 	strd	r4, r5, [sp]
 800969a:	4a0d      	ldr	r2, [pc, #52]	@ (80096d0 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x27c>)
 800969c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80096a0:	f009 fd26 	bl	80130f0 <sniprintf>
        drvPrint(buffer);
 80096a4:	f107 020c 	add.w	r2, r7, #12
 80096a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096b0:	4611      	mov	r1, r2
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	f000 fef4 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    }
}
 80096b8:	bf00      	nop
 80096ba:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80096be:	46bd      	mov	sp, r7
 80096c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096c4:	3bb630a9 	.word	0x3bb630a9
 80096c8:	3a9374bc 	.word	0x3a9374bc
 80096cc:	396bedfa 	.word	0x396bedfa
 80096d0:	080161c0 	.word	0x080161c0
 80096d4:	00000000 	.word	0x00000000

080096d8 <_ZN7DRV821414setRippleSpeedEt>:

void DRV8214::setRippleSpeed(uint16_t speed) {
 80096d8:	b5b0      	push	{r4, r5, r7, lr}
 80096da:	b0d2      	sub	sp, #328	@ 0x148
 80096dc:	af04      	add	r7, sp, #16
 80096de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80096e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80096e6:	6018      	str	r0, [r3, #0]
 80096e8:	460a      	mov	r2, r1
 80096ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80096ee:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80096f2:	801a      	strh	r2, [r3, #0]
    if (speed > motor_max_rpm) { speed = motor_max_rpm; } // Cap speed to the maximum RPM of the motor
 80096f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80096f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	891b      	ldrh	r3, [r3, #8]
 8009700:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009704:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009708:	8812      	ldrh	r2, [r2, #0]
 800970a:	429a      	cmp	r2, r3
 800970c:	d90a      	bls.n	8009724 <_ZN7DRV821414setRippleSpeedEt+0x4c>
 800970e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009712:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009716:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800971a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800971e:	6812      	ldr	r2, [r2, #0]
 8009720:	8912      	ldrh	r2, [r2, #8]
 8009722:	801a      	strh	r2, [r3, #0]

    // Find the corresponding ripples frequency (Hz) value
    uint32_t ripple_speed = (speed * motor_reduction_ratio * ripples_per_revolution * 2 * M_PI) / 60;
 8009724:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009728:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009732:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8009736:	6812      	ldr	r2, [r2, #0]
 8009738:	79d2      	ldrb	r2, [r2, #7]
 800973a:	fb02 f303 	mul.w	r3, r2, r3
 800973e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009742:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8009746:	6812      	ldr	r2, [r2, #0]
 8009748:	8892      	ldrh	r2, [r2, #4]
 800974a:	fb02 f303 	mul.w	r3, r2, r3
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	4618      	mov	r0, r3
 8009752:	f7f6 febf 	bl	80004d4 <__aeabi_i2d>
 8009756:	a36d      	add	r3, pc, #436	@ (adr r3, 800990c <_ZN7DRV821414setRippleSpeedEt+0x234>)
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	f7f6 ff24 	bl	80005a8 <__aeabi_dmul>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4610      	mov	r0, r2
 8009766:	4619      	mov	r1, r3
 8009768:	f04f 0200 	mov.w	r2, #0
 800976c:	4b64      	ldr	r3, [pc, #400]	@ (8009900 <_ZN7DRV821414setRippleSpeedEt+0x228>)
 800976e:	f7f7 f845 	bl	80007fc <__aeabi_ddiv>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4610      	mov	r0, r2
 8009778:	4619      	mov	r1, r3
 800977a:	f7f7 f9ed 	bl	8000b58 <__aeabi_d2uiz>
 800977e:	4603      	mov	r3, r0
 8009780:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    // Define max feasible ripple speed based on 8-bit WSET_VSET and max scaling factor (128)
    const uint16_t MAX_SPEED = 32640; // 255 * 128 = 32640 rad/s
 8009784:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 8009788:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    
    // Cap threshold to the maximum feasible value
    if (ripple_speed > MAX_SPEED) { ripple_speed = MAX_SPEED; }
 800978c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009790:	f5b3 4fff 	cmp.w	r3, #32640	@ 0x7f80
 8009794:	d903      	bls.n	800979e <_ZN7DRV821414setRippleSpeedEt+0xc6>
 8009796:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 800979a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    struct ScaleOption {
        uint16_t scale;
        uint8_t bits;
    };

    ScaleOption scaleOptions[] = {
 800979e:	4b59      	ldr	r3, [pc, #356]	@ (8009904 <_ZN7DRV821414setRippleSpeedEt+0x22c>)
 80097a0:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 80097a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80097a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {64, 0b10},
        {128, 0b11}
    };

    // Find the optimal scaling factor and 10-bit value
    uint16_t WSET_VSET = ripple_speed;
 80097aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097ae:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    uint8_t W_SCALE = 0b00;
 80097b2:	2300      	movs	r3, #0
 80097b4:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131

    for (const auto &option : scaleOptions) {
 80097b8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80097bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80097c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80097c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80097c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80097cc:	3310      	adds	r3, #16
 80097ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80097d2:	e024      	b.n	800981e <_ZN7DRV821414setRippleSpeedEt+0x146>
 80097d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097d8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        if (ripple_speed >= option.scale) {
 80097dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d313      	bcc.n	8009814 <_ZN7DRV821414setRippleSpeedEt+0x13c>
            WSET_VSET = ripple_speed / option.scale;
 80097ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097fc:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
            if (WSET_VSET <= 255) { // Ensure WSET_VSET fits within 8 bits
 8009800:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8009804:	2bff      	cmp	r3, #255	@ 0xff
 8009806:	d805      	bhi.n	8009814 <_ZN7DRV821414setRippleSpeedEt+0x13c>
                W_SCALE = option.bits;
 8009808:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800980c:	789b      	ldrb	r3, [r3, #2]
 800980e:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
                break;
 8009812:	e00a      	b.n	800982a <_ZN7DRV821414setRippleSpeedEt+0x152>
    for (const auto &option : scaleOptions) {
 8009814:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009818:	3304      	adds	r3, #4
 800981a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800981e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8009822:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009826:	429a      	cmp	r2, r3
 8009828:	d1d4      	bne.n	80097d4 <_ZN7DRV821414setRippleSpeedEt+0xfc>
            }
        }
    }
    config.w_scale = scaleOptions[W_SCALE].scale;
 800982a:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009834:	443b      	add	r3, r7
 8009836:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800983a:	b2da      	uxtb	r2, r3
 800983c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009840:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    WSET_VSET = WSET_VSET & 0xFF; // Ensure WSET_VSET fits within 8 bits
 800984a:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 800984e:	b2db      	uxtb	r3, r3
 8009850:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132

    if (config.verbose) {
 8009854:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009858:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009862:	2b00      	cmp	r3, #0
 8009864:	d02b      	beq.n	80098be <_ZN7DRV821414setRippleSpeedEt+0x1e6>
        char buffer[256];  // Adjust the buffer size as needed
        snprintf(buffer, sizeof(buffer), "WSET_VSET: %d | W_SCALE: %d or 0b%d | Effective Target Speed: %d rad/s\n", WSET_VSET, config.w_scale, W_SCALE, WSET_VSET * config.w_scale);
 8009866:	f8b7 4132 	ldrh.w	r4, [r7, #306]	@ 0x132
 800986a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800986e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009878:	461d      	mov	r5, r3
 800987a:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 800987e:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 8009882:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009886:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800988a:	6809      	ldr	r1, [r1, #0]
 800988c:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 8009890:	fb01 f202 	mul.w	r2, r1, r2
 8009894:	f107 000c 	add.w	r0, r7, #12
 8009898:	9202      	str	r2, [sp, #8]
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	9500      	str	r5, [sp, #0]
 800989e:	4623      	mov	r3, r4
 80098a0:	4a19      	ldr	r2, [pc, #100]	@ (8009908 <_ZN7DRV821414setRippleSpeedEt+0x230>)
 80098a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80098a6:	f009 fc23 	bl	80130f0 <sniprintf>
        drvPrint(buffer);
 80098aa:	f107 020c 	add.w	r2, r7, #12
 80098ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098b2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80098b6:	4611      	mov	r1, r2
 80098b8:	6818      	ldr	r0, [r3, #0]
 80098ba:	f000 fdf1 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    }
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, WSET_VSET);
 80098be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098c2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	210f      	movs	r1, #15
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 feb0 	bl	800a638 <_Z26drv8214_i2c_write_registerhhh>
    drv8214_i2c_modify_register_bits(address, DRV8214_REG_CTRL0, REG_CTRL0_W_SCALE, W_SCALE);
 80098d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	7818      	ldrb	r0, [r3, #0]
 80098e4:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 80098e8:	2203      	movs	r2, #3
 80098ea:	210e      	movs	r1, #14
 80098ec:	f000 ff40 	bl	800a770 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 80098f0:	bf00      	nop
 80098f2:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bdb0      	pop	{r4, r5, r7, pc}
 80098fa:	bf00      	nop
 80098fc:	f3af 8000 	nop.w
 8009900:	404e0000 	.word	0x404e0000
 8009904:	0801626c 	.word	0x0801626c
 8009908:	08016224 	.word	0x08016224
 800990c:	54442d18 	.word	0x54442d18
 8009910:	400921fb 	.word	0x400921fb

08009914 <_ZN7DRV821415setVoltageSpeedEf>:

void DRV8214::setVoltageSpeed(float voltage) {
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	ed87 0a02 	vstr	s0, [r7, #8]
    if (voltage < 0.0f) { voltage = 0.0f; } // Ensure voltage is non-negative
 8009920:	edd7 7a02 	vldr	s15, [r7, #8]
 8009924:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800992c:	d502      	bpl.n	8009934 <_ZN7DRV821415setVoltageSpeedEf+0x20>
 800992e:	f04f 0300 	mov.w	r3, #0
 8009932:	60bb      	str	r3, [r7, #8]

    // Depending on the VM_GAIN_SEL bit (voltage_range), clamp and scale accordingly
    if (config.voltage_range) {
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	7bdb      	ldrb	r3, [r3, #15]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d026      	beq.n	800998a <_ZN7DRV821415setVoltageSpeedEf+0x76>
        // VM_GAIN_SEL = 1 → Range: 0 to 3.92 V
        if (voltage > 3.92f) { voltage = 3.92f; }
 800993c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009940:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80099e0 <_ZN7DRV821415setVoltageSpeedEf+0xcc>
 8009944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994c:	dd01      	ble.n	8009952 <_ZN7DRV821415setVoltageSpeedEf+0x3e>
 800994e:	4b25      	ldr	r3, [pc, #148]	@ (80099e4 <_ZN7DRV821415setVoltageSpeedEf+0xd0>)
 8009950:	60bb      	str	r3, [r7, #8]
        // Apply formula from table 8-23: WSET_VSET = voltage * (255 / 3.92)
        float scaled = voltage * (255.0f / 3.92f);
 8009952:	edd7 7a02 	vldr	s15, [r7, #8]
 8009956:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80099e8 <_ZN7DRV821415setVoltageSpeedEf+0xd4>
 800995a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800995e:	edc7 7a05 	vstr	s15, [r7, #20]
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
 8009962:	edd7 7a05 	vldr	s15, [r7, #20]
 8009966:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800996a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800996e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009972:	edc7 7a01 	vstr	s15, [r7, #4]
 8009976:	793b      	ldrb	r3, [r7, #4]
 8009978:	74fb      	strb	r3, [r7, #19]
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	7cfa      	ldrb	r2, [r7, #19]
 8009980:	210f      	movs	r1, #15
 8009982:	4618      	mov	r0, r3
 8009984:	f000 fe58 	bl	800a638 <_Z26drv8214_i2c_write_registerhhh>
        // Apply formula from table 8-23: WSET_VSET = voltage * (255 / 15.7)
        float scaled = voltage * (255.0f / 15.7f);
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
    }
}
 8009988:	e025      	b.n	80099d6 <_ZN7DRV821415setVoltageSpeedEf+0xc2>
        if (voltage > 15.7f) { voltage = 11.0f; } // Cap voltage to 11 V because of Overvoltage Protection
 800998a:	edd7 7a02 	vldr	s15, [r7, #8]
 800998e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80099ec <_ZN7DRV821415setVoltageSpeedEf+0xd8>
 8009992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999a:	dd01      	ble.n	80099a0 <_ZN7DRV821415setVoltageSpeedEf+0x8c>
 800999c:	4b14      	ldr	r3, [pc, #80]	@ (80099f0 <_ZN7DRV821415setVoltageSpeedEf+0xdc>)
 800999e:	60bb      	str	r3, [r7, #8]
        float scaled = voltage * (255.0f / 15.7f);
 80099a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80099a4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80099f4 <_ZN7DRV821415setVoltageSpeedEf+0xe0>
 80099a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099ac:	edc7 7a07 	vstr	s15, [r7, #28]
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
 80099b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80099b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80099b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80099c4:	793b      	ldrb	r3, [r7, #4]
 80099c6:	76fb      	strb	r3, [r7, #27]
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	7efa      	ldrb	r2, [r7, #27]
 80099ce:	210f      	movs	r1, #15
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 fe31 	bl	800a638 <_Z26drv8214_i2c_write_registerhhh>
}
 80099d6:	bf00      	nop
 80099d8:	3720      	adds	r7, #32
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	407ae148 	.word	0x407ae148
 80099e4:	407ae148 	.word	0x407ae148
 80099e8:	42821a1f 	.word	0x42821a1f
 80099ec:	417b3333 	.word	0x417b3333
 80099f0:	41300000 	.word	0x41300000
 80099f4:	4181efb2 	.word	0x4181efb2

080099f8 <_ZN7DRV821417enableRippleCountEb>:

void DRV8214::configureControl2(uint8_t control2) {
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL2, control2);
}

void DRV8214::enableRippleCount(bool enable) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_EN_RC, enable);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	7818      	ldrb	r0, [r3, #0]
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	2280      	movs	r2, #128	@ 0x80
 8009a0c:	2111      	movs	r1, #17
 8009a0e:	f000 fe7d 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <_ZN7DRV821421enableErrorCorrectionEb>:

void DRV8214::enableErrorCorrection(bool enable) {
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	460b      	mov	r3, r1
 8009a24:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_DIS_EC, !enable);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	7818      	ldrb	r0, [r3, #0]
 8009a2a:	78fb      	ldrb	r3, [r7, #3]
 8009a2c:	f083 0301 	eor.w	r3, r3, #1
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2240      	movs	r2, #64	@ 0x40
 8009a34:	2111      	movs	r1, #17
 8009a36:	f000 fe69 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009a3a:	bf00      	nop
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <_ZN7DRV821423setRippleCountThresholdEt>:

void DRV8214::configureRippleCount0(uint8_t ripple0) {
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL0, ripple0);
}

void DRV8214::setRippleCountThreshold(uint16_t threshold) {
 8009a44:	b590      	push	{r4, r7, lr}
 8009a46:	b0d1      	sub	sp, #324	@ 0x144
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a4e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009a52:	6018      	str	r0, [r3, #0]
 8009a54:	460a      	mov	r2, r1
 8009a56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a5a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009a5e:	801a      	strh	r2, [r3, #0]
    // Define max feasible threshold based on 10-bit RC_THR and max scaling factor (64)
    const uint16_t MAX_THRESHOLD = 65535; // 1024 * 64 = 65536
 8009a60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009a64:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    struct ScaleOption {
        uint16_t scale;
        uint8_t bits;
    };

    ScaleOption scaleOptions[] = {
 8009a68:	4b5c      	ldr	r3, [pc, #368]	@ (8009bdc <_ZN7DRV821423setRippleCountThresholdEt+0x198>)
 8009a6a:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 8009a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {16, 0b10},
        {64, 0b11}
    };
    
    // Find the optimal scaling factor and 10-bit value
    uint16_t rc_thr = threshold;
 8009a74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a78:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    uint8_t rc_thr_scale_bits = 0b00;
 8009a82:	2300      	movs	r3, #0
 8009a84:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135

    for (const auto &option : scaleOptions) {
 8009a88:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8009a8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8009a90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a94:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009a98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a9c:	3310      	adds	r3, #16
 8009a9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8009aa2:	e029      	b.n	8009af8 <_ZN7DRV821423setRippleCountThresholdEt+0xb4>
 8009aa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009aa8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        if (threshold >= option.scale) {
 8009aac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009ab6:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009aba:	8812      	ldrh	r2, [r2, #0]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d316      	bcc.n	8009aee <_ZN7DRV821423setRippleCountThresholdEt+0xaa>
            rc_thr = threshold / option.scale;
 8009ac0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009aca:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009ace:	8812      	ldrh	r2, [r2, #0]
 8009ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ad4:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
            if (rc_thr < 1024) { // Ensure it fits in 10 bits
 8009ad8:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ae0:	d205      	bcs.n	8009aee <_ZN7DRV821423setRippleCountThresholdEt+0xaa>
                rc_thr_scale_bits = option.bits;
 8009ae2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009ae6:	789b      	ldrb	r3, [r3, #2]
 8009ae8:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
                break;
 8009aec:	e00a      	b.n	8009b04 <_ZN7DRV821423setRippleCountThresholdEt+0xc0>
    for (const auto &option : scaleOptions) {
 8009aee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009af2:	3304      	adds	r3, #4
 8009af4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009af8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009afc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d1cf      	bne.n	8009aa4 <_ZN7DRV821423setRippleCountThresholdEt+0x60>
            }
        }
    }
    if (config.verbose) {
 8009b04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d016      	beq.n	8009b44 <_ZN7DRV821423setRippleCountThresholdEt+0x100>
        char buffer[256];  // Adjust the buffer size as needed
        snprintf(buffer, sizeof(buffer), "RC_THR: %d | RC_THR_SCALE: %d ", rc_thr, rc_thr_scale_bits);
 8009b16:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8009b1a:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8009b1e:	f107 000c 	add.w	r0, r7, #12
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	4613      	mov	r3, r2
 8009b26:	4a2e      	ldr	r2, [pc, #184]	@ (8009be0 <_ZN7DRV821423setRippleCountThresholdEt+0x19c>)
 8009b28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009b2c:	f009 fae0 	bl	80130f0 <sniprintf>
        drvPrint(buffer);
 8009b30:	f107 020c 	add.w	r2, r7, #12
 8009b34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b38:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	f000 fcae 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    }
    config.ripple_threshold = rc_thr;
 8009b44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8009b52:	869a      	strh	r2, [r3, #52]	@ 0x34
    config.ripple_threshold_scale = rc_thr_scale_bits;
 8009b54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b58:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 8009b62:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    // Ensure rc_thr fits within 10 bits
    rc_thr = rc_thr & 0x3FF;
 8009b66:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b6e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    
    // Split into lower 8 bits and upper 2 bits
    uint8_t rc_thr_low  = rc_thr & 0xFF;         // bits 7..0
 8009b72:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009b76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    uint8_t rc_thr_high = (rc_thr >> 8) & 0x03;  // bits 9..8
 8009b7a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009b7e:	0a1b      	lsrs	r3, r3, #8
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	f003 0303 	and.w	r3, r3, #3
 8009b88:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL1, rc_thr_low);
 8009b8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b90:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8009b9c:	2112      	movs	r1, #18
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fd4a 	bl	800a638 <_Z26drv8214_i2c_write_registerhhh>
    setRippleThresholdScale(rc_thr_scale_bits);
 8009ba4:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 8009ba8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009bac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	6818      	ldr	r0, [r3, #0]
 8009bb4:	f000 f816 	bl	8009be4 <_ZN7DRV821423setRippleThresholdScaleEh>
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_RC_THR_HIGH, rc_thr_high);
 8009bb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009bbc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	7818      	ldrb	r0, [r3, #0]
 8009bc4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009bc8:	2203      	movs	r2, #3
 8009bca:	2113      	movs	r1, #19
 8009bcc:	f000 fdd0 	bl	800a770 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009bd0:	bf00      	nop
 8009bd2:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd90      	pop	{r4, r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	0801629c 	.word	0x0801629c
 8009be0:	0801627c 	.word	0x0801627c

08009be4 <_ZN7DRV821423setRippleThresholdScaleEh>:

void DRV8214::setRippleThresholdScale(uint8_t scale) {
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
    scale = scale & 0x03;
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	70fb      	strb	r3, [r7, #3]
    scale = scale << 2; //make sure the 2 bits of scale are placed on bit 2 and 3
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_RC_THR_SCALE, scale);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7818      	ldrb	r0, [r3, #0]
 8009c02:	78fb      	ldrb	r3, [r7, #3]
 8009c04:	220c      	movs	r2, #12
 8009c06:	2113      	movs	r1, #19
 8009c08:	f000 fdb2 	bl	800a770 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009c0c:	bf00      	nop
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <_ZN7DRV821411setKMCScaleEh>:

void DRV8214::setKMCScale(uint8_t scale) {
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	70fb      	strb	r3, [r7, #3]
    scale = scale << 4; //make sure the 2 bits of scale are placed on bit 4 and 5
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	011b      	lsls	r3, r3, #4
 8009c24:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_KMC_SCALE, scale);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	7818      	ldrb	r0, [r3, #0]
 8009c2a:	78fb      	ldrb	r3, [r7, #3]
 8009c2c:	2230      	movs	r2, #48	@ 0x30
 8009c2e:	2113      	movs	r1, #19
 8009c30:	f000 fd9e 	bl	800a770 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009c34:	bf00      	nop
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <_ZN7DRV821425setMotorInverseResistanceEh>:

void DRV8214::setMotorInverseResistance(uint8_t resistance) {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL3, resistance);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	78fa      	ldrb	r2, [r7, #3]
 8009c4e:	2114      	movs	r1, #20
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 fcf1 	bl	800a638 <_Z26drv8214_i2c_write_registerhhh>
}
 8009c56:	bf00      	nop
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <_ZN7DRV821430setMotorInverseResistanceScaleEh>:

void DRV8214::setMotorInverseResistanceScale(uint8_t scale) {
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	70fb      	strb	r3, [r7, #3]
    scale = scale << 6; //make sure the 2 bits of scale are placed on bit 6 and 7
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	019b      	lsls	r3, r3, #6
 8009c6e:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_INV_R_SCALE, scale);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	7818      	ldrb	r0, [r3, #0]
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	22c0      	movs	r2, #192	@ 0xc0
 8009c78:	2113      	movs	r1, #19
 8009c7a:	f000 fd79 	bl	800a770 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009c7e:	bf00      	nop
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <_ZN7DRV821430setResistanceRelatedParametersEv>:

void DRV8214::setResistanceRelatedParameters() {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08a      	sub	sp, #40	@ 0x28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
    // Possible values of INV_R_SCALE and corresponding register bit settings
    const uint16_t scaleValues[4] = {2, 64, 1024, 8192};
 8009c90:	4a39      	ldr	r2, [pc, #228]	@ (8009d78 <_ZN7DRV821430setResistanceRelatedParametersEv+0xf0>)
 8009c92:	f107 0310 	add.w	r3, r7, #16
 8009c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c9a:	e883 0003 	stmia.w	r3, {r0, r1}
    const uint8_t scaleBits[4] = {0b00, 0b01, 0b10, 0b11};
 8009c9e:	4b37      	ldr	r3, [pc, #220]	@ (8009d7c <_ZN7DRV821430setResistanceRelatedParametersEv+0xf4>)
 8009ca0:	60fb      	str	r3, [r7, #12]

    // Default values (minimum valid values)
    uint8_t bestScaleBits = 0b00;  // Default to scale 2
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t bestInvR = 1;          // Minimum valid INV_R
 8009ca8:	2301      	movs	r3, #1
 8009caa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    // Iterate from largest scale to smallest for best resolution
    for (int i = 3; i >= 0; --i)
 8009cae:	2303      	movs	r3, #3
 8009cb0:	623b      	str	r3, [r7, #32]
 8009cb2:	e03f      	b.n	8009d34 <_ZN7DRV821430setResistanceRelatedParametersEv+0xac>
    {
        float candidate = scaleValues[i] / motor_internal_resistance;
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	3328      	adds	r3, #40	@ 0x28
 8009cba:	443b      	add	r3, r7
 8009cbc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	799b      	ldrb	r3, [r3, #6]
 8009cc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cd2:	edc7 7a06 	vstr	s15, [r7, #24]
        float rounded = roundf(candidate);
 8009cd6:	ed97 0a06 	vldr	s0, [r7, #24]
 8009cda:	f008 fd8f 	bl	80127fc <roundf>
 8009cde:	ed87 0a07 	vstr	s0, [r7, #28]

        // Ensure the value is at least 1
        if (rounded < 1.0f) {
 8009ce2:	edd7 7a07 	vldr	s15, [r7, #28]
 8009ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf2:	d502      	bpl.n	8009cfa <_ZN7DRV821430setResistanceRelatedParametersEv+0x72>
            rounded = 1.0f;
 8009cf4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009cf8:	61fb      	str	r3, [r7, #28]
        }

        // If within valid range, select this scale and break
        if (rounded <= 255.0f)
 8009cfa:	edd7 7a07 	vldr	s15, [r7, #28]
 8009cfe:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8009d80 <_ZN7DRV821430setResistanceRelatedParametersEv+0xf8>
 8009d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0a:	d810      	bhi.n	8009d2e <_ZN7DRV821430setResistanceRelatedParametersEv+0xa6>
        {
            bestScaleBits = scaleBits[i];
 8009d0c:	f107 020c 	add.w	r2, r7, #12
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	4413      	add	r3, r2
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            bestInvR = static_cast<uint8_t>(rounded);
 8009d1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8009d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d22:	edc7 7a00 	vstr	s15, [r7]
 8009d26:	783b      	ldrb	r3, [r7, #0]
 8009d28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            break;
 8009d2c:	e005      	b.n	8009d3a <_ZN7DRV821430setResistanceRelatedParametersEv+0xb2>
    for (int i = 3; i >= 0; --i)
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	623b      	str	r3, [r7, #32]
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	dabc      	bge.n	8009cb4 <_ZN7DRV821430setResistanceRelatedParametersEv+0x2c>
        }
    }
    config.inv_r = bestInvR;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d40:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    config.inv_r_scale = scaleValues[bestScaleBits];
 8009d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d48:	005b      	lsls	r3, r3, #1
 8009d4a:	3328      	adds	r3, #40	@ 0x28
 8009d4c:	443b      	add	r3, r7
 8009d4e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	85da      	strh	r2, [r3, #46]	@ 0x2e

    // Set the selected INV_R and INV_R_SCALE
    setMotorInverseResistanceScale(bestScaleBits);
 8009d56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff ff7e 	bl	8009c5e <_ZN7DRV821430setMotorInverseResistanceScaleEh>
    setMotorInverseResistance(bestInvR);
 8009d62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7ff ff67 	bl	8009c3c <_ZN7DRV821425setMotorInverseResistanceEh>
}
 8009d6e:	bf00      	nop
 8009d70:	3728      	adds	r7, #40	@ 0x28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	080162ac 	.word	0x080162ac
 8009d7c:	03020100 	.word	0x03020100
 8009d80:	437f0000 	.word	0x437f0000

08009d84 <_ZN7DRV82146setKMCEh>:

void DRV8214::setKMC(uint8_t factor) {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL4, factor);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	78fa      	ldrb	r2, [r7, #3]
 8009d96:	2115      	movs	r1, #21
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 fc4d 	bl	800a638 <_Z26drv8214_i2c_write_registerhhh>
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <_ZN7DRV821414setControlModeE11ControlModeb>:
void DRV8214::configureRippleCount8(uint8_t ripple8) {
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL8, ripple8);
}

// --- Motor Control Functions ---
void DRV8214::setControlMode(ControlMode mode, bool I2CControl) {
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	70fb      	strb	r3, [r7, #3]
 8009db2:	4613      	mov	r3, r2
 8009db4:	70bb      	strb	r3, [r7, #2]
    config.control_mode = mode;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	78fa      	ldrb	r2, [r7, #3]
 8009dba:	735a      	strb	r2, [r3, #13]
    setI2CControl(I2CControl);
 8009dbc:	78bb      	ldrb	r3, [r7, #2]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff fad2 	bl	800936a <_ZN7DRV821413setI2CControlEb>
    switch (mode) {
 8009dc6:	78fb      	ldrb	r3, [r7, #3]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <_ZN7DRV821414setControlModeE11ControlModeb+0x2c>
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d004      	beq.n	8009dda <_ZN7DRV821414setControlModeE11ControlModeb+0x34>
            break;
        case PH_EN:
            enablePHENControl();
            break;
    }
}
 8009dd0:	e007      	b.n	8009de2 <_ZN7DRV821414setControlModeE11ControlModeb+0x3c>
            enablePWMControl();
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7ff fadd 	bl	8009392 <_ZN7DRV821416enablePWMControlEv>
            break;
 8009dd8:	e003      	b.n	8009de2 <_ZN7DRV821414setControlModeE11ControlModeb+0x3c>
            enablePHENControl();
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff fae8 	bl	80093b0 <_ZN7DRV821417enablePHENControlEv>
            break;
 8009de0:	bf00      	nop
}
 8009de2:	bf00      	nop
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <_ZN7DRV821417setRegulationModeE14RegulationMode>:

void DRV8214::setRegulationMode(RegulationMode regulation) {
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
    uint8_t reg_ctrl = 0;  // Default value
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
    switch (regulation) {
 8009dfc:	78fb      	ldrb	r3, [r7, #3]
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d81a      	bhi.n	8009e38 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
 8009e02:	a201      	add	r2, pc, #4	@ (adr r2, 8009e08 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x1c>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e19 	.word	0x08009e19
 8009e0c:	08009e1f 	.word	0x08009e1f
 8009e10:	08009e25 	.word	0x08009e25
 8009e14:	08009e33 	.word	0x08009e33
        case CURRENT_FIXED:
            reg_ctrl = (0b00 << 3);  // Fixed Off-Time Current Regulation
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73fb      	strb	r3, [r7, #15]
            break;
 8009e1c:	e00c      	b.n	8009e38 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case CURRENT_CYCLES:
            reg_ctrl = (0b01 << 3);  // Cycle-By-Cycle Current Regulation
 8009e1e:	2308      	movs	r3, #8
 8009e20:	73fb      	strb	r3, [r7, #15]
            break;
 8009e22:	e009      	b.n	8009e38 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case SPEED:
            reg_ctrl = (0b10 << 3);  // Speed Regulation
 8009e24:	2310      	movs	r3, #16
 8009e26:	73fb      	strb	r3, [r7, #15]
            enableRippleCount();
 8009e28:	2101      	movs	r1, #1
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff fde4 	bl	80099f8 <_ZN7DRV821417enableRippleCountEb>
            break;
 8009e30:	e002      	b.n	8009e38 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case VOLTAGE:
            reg_ctrl = (0b11 << 3);  // Voltage Regulation
 8009e32:	2318      	movs	r3, #24
 8009e34:	73fb      	strb	r3, [r7, #15]
            break;
 8009e36:	bf00      	nop
    }
    config.regulation_mode = regulation;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	78fa      	ldrb	r2, [r7, #3]
 8009e3c:	739a      	strb	r2, [r3, #14]
    drv8214_i2c_modify_register_bits(address, DRV8214_REG_CTRL0, REG_CTRL0_REG_CTRL, reg_ctrl);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	7818      	ldrb	r0, [r3, #0]
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	2218      	movs	r2, #24
 8009e46:	210e      	movs	r1, #14
 8009e48:	f000 fc92 	bl	800a770 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009e4c:	bf00      	nop
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <_ZN7DRV821411turnForwardEtff>:

void DRV8214::turnForward(uint16_t speed, float voltage, float requested_current) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009e62:	edc7 0a00 	vstr	s1, [r7]
 8009e66:	817b      	strh	r3, [r7, #10]
    disableHbridge();
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f7ff f979 	bl	8009160 <_ZN7DRV821414disableHbridgeEv>
    switch (config.regulation_mode) {
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	7b9b      	ldrb	r3, [r3, #14]
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d822      	bhi.n	8009ebc <_ZN7DRV821411turnForwardEtff+0x68>
 8009e76:	a201      	add	r2, pc, #4	@ (adr r2, 8009e7c <_ZN7DRV821411turnForwardEtff+0x28>)
 8009e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7c:	08009e8d 	.word	0x08009e8d
 8009e80:	08009e99 	.word	0x08009e99
 8009e84:	08009ea5 	.word	0x08009ea5
 8009e88:	08009eb1 	.word	0x08009eb1
        case CURRENT_FIXED: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 8009e8c:	ed97 0a00 	vldr	s0, [r7]
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f7ff fadf 	bl	8009454 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 8009e96:	e011      	b.n	8009ebc <_ZN7DRV821411turnForwardEtff+0x68>
        case CURRENT_CYCLES: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 8009e98:	ed97 0a00 	vldr	s0, [r7]
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f7ff fad9 	bl	8009454 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 8009ea2:	e00b      	b.n	8009ebc <_ZN7DRV821411turnForwardEtff+0x68>
        case SPEED: 
            setRippleSpeed(speed);
 8009ea4:	897b      	ldrh	r3, [r7, #10]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f7ff fc15 	bl	80096d8 <_ZN7DRV821414setRippleSpeedEt>
            break;
 8009eae:	e005      	b.n	8009ebc <_ZN7DRV821411turnForwardEtff+0x68>
        case VOLTAGE:
            setVoltageSpeed(voltage);
 8009eb0:	ed97 0a01 	vldr	s0, [r7, #4]
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f7ff fd2d 	bl	8009914 <_ZN7DRV821415setVoltageSpeedEf>
            break;
 8009eba:	bf00      	nop
    }
    
    if (config.control_mode == PWM) {
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	7b5b      	ldrb	r3, [r3, #13]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10e      	bne.n	8009ee2 <_ZN7DRV821411turnForwardEtff+0x8e>
        // Table 8-5 => Forward => Input1=1, Input2=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);  // Input1=1
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	7818      	ldrb	r0, [r3, #0]
 8009ec8:	2301      	movs	r3, #1
 8009eca:	2202      	movs	r2, #2
 8009ecc:	210d      	movs	r1, #13
 8009ece:	f000 fc1d 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false); // Input2=0
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	7818      	ldrb	r0, [r3, #0]
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	2201      	movs	r2, #1
 8009eda:	210d      	movs	r1, #13
 8009edc:	f000 fc16 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
 8009ee0:	e00d      	b.n	8009efe <_ZN7DRV821411turnForwardEtff+0xaa>
    } 
    else { // PH/EN mode
        // Table 8-4 => Forward => EN=1, PH=1
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true); // EN=1
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	7818      	ldrb	r0, [r3, #0]
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	2202      	movs	r2, #2
 8009eea:	210d      	movs	r1, #13
 8009eec:	f000 fc0e 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true); // PH=1
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	7818      	ldrb	r0, [r3, #0]
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	210d      	movs	r1, #13
 8009efa:	f000 fc07 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
    }
    enableHbridge();
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7ff f91f 	bl	8009142 <_ZN7DRV821413enableHbridgeEv>
    if (config.verbose) { drvPrint("Turning Forward\n"); }
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <_ZN7DRV821411turnForwardEtff+0xc2>
 8009f0e:	4904      	ldr	r1, [pc, #16]	@ (8009f20 <_ZN7DRV821411turnForwardEtff+0xcc>)
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 fac5 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
}
 8009f16:	bf00      	nop
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	080162b4 	.word	0x080162b4

08009f24 <_ZN7DRV821411turnReverseEtff>:

void DRV8214::turnReverse(uint16_t speed, float voltage, float requested_current) {
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009f32:	edc7 0a00 	vstr	s1, [r7]
 8009f36:	817b      	strh	r3, [r7, #10]
    enableHbridge();
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7ff f902 	bl	8009142 <_ZN7DRV821413enableHbridgeEv>
    switch (config.regulation_mode) {
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	7b9b      	ldrb	r3, [r3, #14]
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d822      	bhi.n	8009f8c <_ZN7DRV821411turnReverseEtff+0x68>
 8009f46:	a201      	add	r2, pc, #4	@ (adr r2, 8009f4c <_ZN7DRV821411turnReverseEtff+0x28>)
 8009f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4c:	08009f5d 	.word	0x08009f5d
 8009f50:	08009f69 	.word	0x08009f69
 8009f54:	08009f75 	.word	0x08009f75
 8009f58:	08009f81 	.word	0x08009f81
        case CURRENT_FIXED: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 8009f5c:	ed97 0a00 	vldr	s0, [r7]
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7ff fa77 	bl	8009454 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 8009f66:	e011      	b.n	8009f8c <_ZN7DRV821411turnReverseEtff+0x68>
        case CURRENT_CYCLES: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 8009f68:	ed97 0a00 	vldr	s0, [r7]
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f7ff fa71 	bl	8009454 <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 8009f72:	e00b      	b.n	8009f8c <_ZN7DRV821411turnReverseEtff+0x68>
        case SPEED: 
            setRippleSpeed(speed);
 8009f74:	897b      	ldrh	r3, [r7, #10]
 8009f76:	4619      	mov	r1, r3
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7ff fbad 	bl	80096d8 <_ZN7DRV821414setRippleSpeedEt>
            break;
 8009f7e:	e005      	b.n	8009f8c <_ZN7DRV821411turnReverseEtff+0x68>
        case VOLTAGE:
            setVoltageSpeed(voltage);
 8009f80:	ed97 0a01 	vldr	s0, [r7, #4]
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f7ff fcc5 	bl	8009914 <_ZN7DRV821415setVoltageSpeedEf>
            break;
 8009f8a:	bf00      	nop
    }
    if (config.control_mode == PWM) {
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	7b5b      	ldrb	r3, [r3, #13]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10e      	bne.n	8009fb2 <_ZN7DRV821411turnReverseEtff+0x8e>
        // Table 8-5 => Reverse => Input1=0, Input2=1
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, false);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	7818      	ldrb	r0, [r3, #0]
 8009f98:	2300      	movs	r3, #0
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	210d      	movs	r1, #13
 8009f9e:	f000 fbb5 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	7818      	ldrb	r0, [r3, #0]
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	2201      	movs	r2, #1
 8009faa:	210d      	movs	r1, #13
 8009fac:	f000 fbae 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
 8009fb0:	e00d      	b.n	8009fce <_ZN7DRV821411turnReverseEtff+0xaa>
    } 
    else { // PH/EN mode
        // Table 8-4 => Reverse => EN=1, PH=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	7818      	ldrb	r0, [r3, #0]
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	2202      	movs	r2, #2
 8009fba:	210d      	movs	r1, #13
 8009fbc:	f000 fba6 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	7818      	ldrb	r0, [r3, #0]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	210d      	movs	r1, #13
 8009fca:	f000 fb9f 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
    }
    if (config.verbose) { drvPrint("Turning Reverse\n"); }
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <_ZN7DRV821411turnReverseEtff+0xbc>
 8009fd8:	4903      	ldr	r1, [pc, #12]	@ (8009fe8 <_ZN7DRV821411turnReverseEtff+0xc4>)
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 fa60 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
}
 8009fe0:	bf00      	nop
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	080162c8 	.word	0x080162c8

08009fec <_ZN7DRV821410brakeMotorEb>:

void DRV8214::brakeMotor(bool initial_config) {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	70fb      	strb	r3, [r7, #3]
    enableHbridge();
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7ff f8a2 	bl	8009142 <_ZN7DRV821413enableHbridgeEv>
    if (config.control_mode == PWM) {
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	7b5b      	ldrb	r3, [r3, #13]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10e      	bne.n	800a024 <_ZN7DRV821410brakeMotorEb+0x38>
        // Table 8-5 => Brake => Input1=1, Input2=1 => both outputs low
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	7818      	ldrb	r0, [r3, #0]
 800a00a:	2301      	movs	r3, #1
 800a00c:	2202      	movs	r2, #2
 800a00e:	210d      	movs	r1, #13
 800a010:	f000 fb7c 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7818      	ldrb	r0, [r3, #0]
 800a018:	2301      	movs	r3, #1
 800a01a:	2201      	movs	r2, #1
 800a01c:	210d      	movs	r1, #13
 800a01e:	f000 fb75 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
 800a022:	e00d      	b.n	800a040 <_ZN7DRV821410brakeMotorEb+0x54>
    }
    else { // PH/EN mode
        // Table 8-4 => Brake => EN=0 => outputs go low
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, false);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	7818      	ldrb	r0, [r3, #0]
 800a028:	2300      	movs	r3, #0
 800a02a:	2202      	movs	r2, #2
 800a02c:	210d      	movs	r1, #13
 800a02e:	f000 fb6d 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
        // PH can be 0 or 1, the datasheet shows "X" => still brake with EN=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	7818      	ldrb	r0, [r3, #0]
 800a036:	2300      	movs	r3, #0
 800a038:	2201      	movs	r2, #1
 800a03a:	210d      	movs	r1, #13
 800a03c:	f000 fb66 	bl	800a70c <_Z27drv8214_i2c_modify_registerhhhh>
    }
    if (config.verbose & !initial_config) { drvPrint("Braking Motor\n"); }
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a046:	461a      	mov	r2, r3
 800a048:	78fb      	ldrb	r3, [r7, #3]
 800a04a:	f083 0301 	eor.w	r3, r3, #1
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	4013      	ands	r3, r2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <_ZN7DRV821410brakeMotorEb+0x72>
 800a056:	4904      	ldr	r1, [pc, #16]	@ (800a068 <_ZN7DRV821410brakeMotorEb+0x7c>)
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fa21 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	080162dc 	.word	0x080162dc

0800a06c <_ZN7DRV821412turnXRipplesEtbbtff>:
        drvPrint("PH/EN mode does not support coast (High-Z) while awake.");
    }
    if (config.verbose) { drvPrint("Coasting Motor\n"); }
}

void DRV8214::turnXRipples(uint16_t ripples_target, bool stops, bool direction, uint16_t speed, float voltage, float requested_current) {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	4608      	mov	r0, r1
 800a076:	4611      	mov	r1, r2
 800a078:	461a      	mov	r2, r3
 800a07a:	ed87 0a01 	vstr	s0, [r7, #4]
 800a07e:	edc7 0a00 	vstr	s1, [r7]
 800a082:	4603      	mov	r3, r0
 800a084:	817b      	strh	r3, [r7, #10]
 800a086:	460b      	mov	r3, r1
 800a088:	727b      	strb	r3, [r7, #9]
 800a08a:	4613      	mov	r3, r2
 800a08c:	723b      	strb	r3, [r7, #8]
    setRippleCountThreshold(ripples_target);
 800a08e:	897b      	ldrh	r3, [r7, #10]
 800a090:	4619      	mov	r1, r3
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f7ff fcd6 	bl	8009a44 <_ZN7DRV821423setRippleCountThresholdEt>
    resetRippleCounter();
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f7ff f8ac 	bl	80091f6 <_ZN7DRV821418resetRippleCounterEv>
    if (stops != config.bridge_behavior_thr_reached) { setBridgeBehaviorThresholdReached(stops); } // Set bridge behavior if different
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	7ddb      	ldrb	r3, [r3, #23]
 800a0a2:	7a7a      	ldrb	r2, [r7, #9]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d004      	beq.n	800a0b2 <_ZN7DRV821412turnXRipplesEtbbtff+0x46>
 800a0a8:	7a7b      	ldrb	r3, [r7, #9]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f7ff f9ac 	bl	800940a <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>
    if (direction) { turnForward(speed, voltage, requested_current); } else { turnReverse(speed, voltage, requested_current); }
 800a0b2:	7a3b      	ldrb	r3, [r7, #8]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d009      	beq.n	800a0cc <_ZN7DRV821412turnXRipplesEtbbtff+0x60>
 800a0b8:	8b3b      	ldrh	r3, [r7, #24]
 800a0ba:	edd7 0a00 	vldr	s1, [r7]
 800a0be:	ed97 0a01 	vldr	s0, [r7, #4]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7ff fec5 	bl	8009e54 <_ZN7DRV821411turnForwardEtff>
}
 800a0ca:	e008      	b.n	800a0de <_ZN7DRV821412turnXRipplesEtbbtff+0x72>
    if (direction) { turnForward(speed, voltage, requested_current); } else { turnReverse(speed, voltage, requested_current); }
 800a0cc:	8b3b      	ldrh	r3, [r7, #24]
 800a0ce:	edd7 0a00 	vldr	s1, [r7]
 800a0d2:	ed97 0a01 	vldr	s0, [r7, #4]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7ff ff23 	bl	8009f24 <_ZN7DRV821411turnReverseEtff>
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <_ZN7DRV821416printMotorConfigEb>:

    uint8_t ripples_target = revolutions_target * ripples_per_revolution * motor_reduction_ratio;
    turnXRipples(ripples_target, stops, direction, speed, voltage, requested_current);
}

void DRV8214::printMotorConfig(bool initial_config) {
 800a0e8:	b590      	push	{r4, r7, lr}
 800a0ea:	b0c7      	sub	sp, #284	@ 0x11c
 800a0ec:	af04      	add	r7, sp, #16
 800a0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0f6:	6018      	str	r0, [r3, #0]
 800a0f8:	460a      	mov	r2, r1
 800a0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0fe:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800a102:	701a      	strb	r2, [r3, #0]
    char buffer[256];  // Adjust the buffer size as needed
    
    if (initial_config) {
 800a104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a108:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d017      	beq.n	800a142 <_ZN7DRV821416printMotorConfigEb+0x5a>
        // Using snprintf to safely format the string
        snprintf(buffer, sizeof(buffer), "----- Finished initialized driver %d -----\n", driver_ID);
 800a112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a116:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	785b      	ldrb	r3, [r3, #1]
 800a11e:	f107 0008 	add.w	r0, r7, #8
 800a122:	4a94      	ldr	r2, [pc, #592]	@ (800a374 <_ZN7DRV821416printMotorConfigEb+0x28c>)
 800a124:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a128:	f008 ffe2 	bl	80130f0 <sniprintf>
        drvPrint(buffer);
 800a12c:	f107 0208 	add.w	r2, r7, #8
 800a130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a138:	4611      	mov	r1, r2
 800a13a:	6818      	ldr	r0, [r3, #0]
 800a13c:	f000 f9b0 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
 800a140:	e016      	b.n	800a170 <_ZN7DRV821416printMotorConfigEb+0x88>
    } else {
        snprintf(buffer, sizeof(buffer), "DRV8214 Driver %d", driver_ID);
 800a142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	785b      	ldrb	r3, [r3, #1]
 800a14e:	f107 0008 	add.w	r0, r7, #8
 800a152:	4a89      	ldr	r2, [pc, #548]	@ (800a378 <_ZN7DRV821416printMotorConfigEb+0x290>)
 800a154:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a158:	f008 ffca 	bl	80130f0 <sniprintf>
        drvPrint(buffer);
 800a15c:	f107 0208 	add.w	r2, r7, #8
 800a160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a168:	4611      	mov	r1, r2
 800a16a:	6818      	ldr	r0, [r3, #0]
 800a16c:	f000 f998 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    }
    snprintf(buffer, sizeof(buffer),
        "Address: 0x%02X | Sense Resistor: %d Ohms | Ripples per Rotor Revolution: %d | Ripples per Shaft Revolution: %d\n",
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 800a170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer),
 800a17c:	461c      	mov	r4, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 800a17e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	885b      	ldrh	r3, [r3, #2]
    snprintf(buffer, sizeof(buffer),
 800a18a:	461a      	mov	r2, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 800a18c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	889b      	ldrh	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer),
 800a198:	4619      	mov	r1, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 800a19a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a19e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	889b      	ldrh	r3, [r3, #4]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	79db      	ldrb	r3, [r3, #7]
    snprintf(buffer, sizeof(buffer),
 800a1b4:	fb00 f303 	mul.w	r3, r0, r3
 800a1b8:	f107 0008 	add.w	r0, r7, #8
 800a1bc:	9302      	str	r3, [sp, #8]
 800a1be:	9101      	str	r1, [sp, #4]
 800a1c0:	9200      	str	r2, [sp, #0]
 800a1c2:	4623      	mov	r3, r4
 800a1c4:	4a6d      	ldr	r2, [pc, #436]	@ (800a37c <_ZN7DRV821416printMotorConfigEb+0x294>)
 800a1c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a1ca:	f008 ff91 	bl	80130f0 <sniprintf>
    drvPrint(buffer);
 800a1ce:	f107 0208 	add.w	r2, r7, #8
 800a1d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1da:	4611      	mov	r1, r2
 800a1dc:	6818      	ldr	r0, [r3, #0]
 800a1de:	f000 f95f 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
        config.voltage_range ? "Enabled" : "Disabled",
 800a1e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	7bdb      	ldrb	r3, [r3, #15]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <_ZN7DRV821416printMotorConfigEb+0x10e>
 800a1f2:	4c63      	ldr	r4, [pc, #396]	@ (800a380 <_ZN7DRV821416printMotorConfigEb+0x298>)
 800a1f4:	e000      	b.n	800a1f8 <_ZN7DRV821416printMotorConfigEb+0x110>
 800a1f6:	4c63      	ldr	r4, [pc, #396]	@ (800a384 <_ZN7DRV821416printMotorConfigEb+0x29c>)
        config.stall_enabled ? "Enabled" : "Disabled",
 800a1f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	7d1b      	ldrb	r3, [r3, #20]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <_ZN7DRV821416printMotorConfigEb+0x124>
 800a208:	4b5d      	ldr	r3, [pc, #372]	@ (800a380 <_ZN7DRV821416printMotorConfigEb+0x298>)
 800a20a:	e000      	b.n	800a20e <_ZN7DRV821416printMotorConfigEb+0x126>
 800a20c:	4b5d      	ldr	r3, [pc, #372]	@ (800a384 <_ZN7DRV821416printMotorConfigEb+0x29c>)
        config.I2CControlled ? "Yes" : "No",
 800a20e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800a212:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800a216:	6812      	ldr	r2, [r2, #0]
 800a218:	7b12      	ldrb	r2, [r2, #12]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 800a21a:	2a00      	cmp	r2, #0
 800a21c:	d001      	beq.n	800a222 <_ZN7DRV821416printMotorConfigEb+0x13a>
 800a21e:	4a5a      	ldr	r2, [pc, #360]	@ (800a388 <_ZN7DRV821416printMotorConfigEb+0x2a0>)
 800a220:	e000      	b.n	800a224 <_ZN7DRV821416printMotorConfigEb+0x13c>
 800a222:	4a5a      	ldr	r2, [pc, #360]	@ (800a38c <_ZN7DRV821416printMotorConfigEb+0x2a4>)
        (config.control_mode == PWM) ? "PWM" : "PH_EN");
 800a224:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800a228:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 800a22c:	6809      	ldr	r1, [r1, #0]
 800a22e:	7b49      	ldrb	r1, [r1, #13]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 800a230:	2900      	cmp	r1, #0
 800a232:	d101      	bne.n	800a238 <_ZN7DRV821416printMotorConfigEb+0x150>
 800a234:	4956      	ldr	r1, [pc, #344]	@ (800a390 <_ZN7DRV821416printMotorConfigEb+0x2a8>)
 800a236:	e000      	b.n	800a23a <_ZN7DRV821416printMotorConfigEb+0x152>
 800a238:	4956      	ldr	r1, [pc, #344]	@ (800a394 <_ZN7DRV821416printMotorConfigEb+0x2ac>)
 800a23a:	f107 0008 	add.w	r0, r7, #8
 800a23e:	9102      	str	r1, [sp, #8]
 800a240:	9201      	str	r2, [sp, #4]
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	4623      	mov	r3, r4
 800a246:	4a54      	ldr	r2, [pc, #336]	@ (800a398 <_ZN7DRV821416printMotorConfigEb+0x2b0>)
 800a248:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a24c:	f008 ff50 	bl	80130f0 <sniprintf>
    drvPrint(buffer);
 800a250:	f107 0208 	add.w	r2, r7, #8
 800a254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a25c:	4611      	mov	r1, r2
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	f000 f91e 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    
    // Regulation mode details
    drvPrint(" | Regulation: ");
 800a264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a26c:	494b      	ldr	r1, [pc, #300]	@ (800a39c <_ZN7DRV821416printMotorConfigEb+0x2b4>)
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	f000 f916 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    switch (config.regulation_mode) {
 800a274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	7b9b      	ldrb	r3, [r3, #14]
 800a280:	2b03      	cmp	r3, #3
 800a282:	d82f      	bhi.n	800a2e4 <_ZN7DRV821416printMotorConfigEb+0x1fc>
 800a284:	a201      	add	r2, pc, #4	@ (adr r2, 800a28c <_ZN7DRV821416printMotorConfigEb+0x1a4>)
 800a286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28a:	bf00      	nop
 800a28c:	0800a29d 	.word	0x0800a29d
 800a290:	0800a2af 	.word	0x0800a2af
 800a294:	0800a2c1 	.word	0x0800a2c1
 800a298:	0800a2d3 	.word	0x0800a2d3
        case CURRENT_FIXED:   drvPrint("CURRENT_FIXED\n"); break;
 800a29c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2a4:	493e      	ldr	r1, [pc, #248]	@ (800a3a0 <_ZN7DRV821416printMotorConfigEb+0x2b8>)
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	f000 f8fa 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
 800a2ac:	e01a      	b.n	800a2e4 <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case CURRENT_CYCLES:  drvPrint("CURRENT_CYCLES\n"); break;
 800a2ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2b6:	493b      	ldr	r1, [pc, #236]	@ (800a3a4 <_ZN7DRV821416printMotorConfigEb+0x2bc>)
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	f000 f8f1 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
 800a2be:	e011      	b.n	800a2e4 <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case SPEED:           drvPrint("SPEED\n"); break;
 800a2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2c8:	4937      	ldr	r1, [pc, #220]	@ (800a3a8 <_ZN7DRV821416printMotorConfigEb+0x2c0>)
 800a2ca:	6818      	ldr	r0, [r3, #0]
 800a2cc:	f000 f8e8 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
 800a2d0:	e008      	b.n	800a2e4 <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case VOLTAGE:         drvPrint("VOLTAGE\n"); break;
 800a2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2da:	4934      	ldr	r1, [pc, #208]	@ (800a3ac <_ZN7DRV821416printMotorConfigEb+0x2c4>)
 800a2dc:	6818      	ldr	r0, [r3, #0]
 800a2de:	f000 f8df 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
 800a2e2:	bf00      	nop
    }
    
    snprintf(buffer, sizeof(buffer),
        "Vref: %.3f | Current Reg. Mode: %d | VRange: %s \n",
            config.Vref, config.current_reg_mode,
 800a2e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	691b      	ldr	r3, [r3, #16]
    snprintf(buffer, sizeof(buffer),
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7f6 f901 	bl	80004f8 <__aeabi_f2d>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	460b      	mov	r3, r1
            config.Vref, config.current_reg_mode,
 800a2fa:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800a2fe:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 800a302:	6809      	ldr	r1, [r1, #0]
 800a304:	7e09      	ldrb	r1, [r1, #24]
    snprintf(buffer, sizeof(buffer),
 800a306:	460c      	mov	r4, r1
            config.voltage_range ? "0V-3.92V" : "0V-15.7V");
 800a308:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800a30c:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 800a310:	6809      	ldr	r1, [r1, #0]
 800a312:	7bc9      	ldrb	r1, [r1, #15]
    snprintf(buffer, sizeof(buffer),
 800a314:	2900      	cmp	r1, #0
 800a316:	d001      	beq.n	800a31c <_ZN7DRV821416printMotorConfigEb+0x234>
 800a318:	4925      	ldr	r1, [pc, #148]	@ (800a3b0 <_ZN7DRV821416printMotorConfigEb+0x2c8>)
 800a31a:	e000      	b.n	800a31e <_ZN7DRV821416printMotorConfigEb+0x236>
 800a31c:	4925      	ldr	r1, [pc, #148]	@ (800a3b4 <_ZN7DRV821416printMotorConfigEb+0x2cc>)
 800a31e:	f107 0008 	add.w	r0, r7, #8
 800a322:	9103      	str	r1, [sp, #12]
 800a324:	9402      	str	r4, [sp, #8]
 800a326:	e9cd 2300 	strd	r2, r3, [sp]
 800a32a:	4a23      	ldr	r2, [pc, #140]	@ (800a3b8 <_ZN7DRV821416printMotorConfigEb+0x2d0>)
 800a32c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a330:	f008 fede 	bl	80130f0 <sniprintf>
    drvPrint(buffer);
 800a334:	f107 0208 	add.w	r2, r7, #8
 800a338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a33c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a340:	4611      	mov	r1, r2
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	f000 f8ac 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "Stall Behavior: %s | Bridge Behavior Thr. reached: %s\n",
        config.stall_behavior ? "Drive current" : "Disable outputs",
 800a348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a34c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	7d9b      	ldrb	r3, [r3, #22]
    snprintf(buffer, sizeof(buffer),
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <_ZN7DRV821416printMotorConfigEb+0x274>
 800a358:	4a18      	ldr	r2, [pc, #96]	@ (800a3bc <_ZN7DRV821416printMotorConfigEb+0x2d4>)
 800a35a:	e000      	b.n	800a35e <_ZN7DRV821416printMotorConfigEb+0x276>
 800a35c:	4a18      	ldr	r2, [pc, #96]	@ (800a3c0 <_ZN7DRV821416printMotorConfigEb+0x2d8>)
        config.bridge_behavior_thr_reached ? "H-bridge disabled" : "H-bridge stays enabled");
 800a35e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	7ddb      	ldrb	r3, [r3, #23]
    snprintf(buffer, sizeof(buffer),
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d02c      	beq.n	800a3c8 <_ZN7DRV821416printMotorConfigEb+0x2e0>
 800a36e:	4b15      	ldr	r3, [pc, #84]	@ (800a3c4 <_ZN7DRV821416printMotorConfigEb+0x2dc>)
 800a370:	e02b      	b.n	800a3ca <_ZN7DRV821416printMotorConfigEb+0x2e2>
 800a372:	bf00      	nop
 800a374:	08016334 	.word	0x08016334
 800a378:	08016360 	.word	0x08016360
 800a37c:	08016374 	.word	0x08016374
 800a380:	080163e8 	.word	0x080163e8
 800a384:	080163f0 	.word	0x080163f0
 800a388:	080163fc 	.word	0x080163fc
 800a38c:	08016400 	.word	0x08016400
 800a390:	08016404 	.word	0x08016404
 800a394:	08016408 	.word	0x08016408
 800a398:	08016410 	.word	0x08016410
 800a39c:	0801645c 	.word	0x0801645c
 800a3a0:	0801646c 	.word	0x0801646c
 800a3a4:	0801647c 	.word	0x0801647c
 800a3a8:	0801648c 	.word	0x0801648c
 800a3ac:	08016494 	.word	0x08016494
 800a3b0:	080164a0 	.word	0x080164a0
 800a3b4:	080164ac 	.word	0x080164ac
 800a3b8:	080164b8 	.word	0x080164b8
 800a3bc:	080164ec 	.word	0x080164ec
 800a3c0:	080164fc 	.word	0x080164fc
 800a3c4:	0801650c 	.word	0x0801650c
 800a3c8:	4b31      	ldr	r3, [pc, #196]	@ (800a490 <_ZN7DRV821416printMotorConfigEb+0x3a8>)
 800a3ca:	f107 0008 	add.w	r0, r7, #8
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	4a30      	ldr	r2, [pc, #192]	@ (800a494 <_ZN7DRV821416printMotorConfigEb+0x3ac>)
 800a3d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a3d8:	f008 fe8a 	bl	80130f0 <sniprintf>
    drvPrint(buffer);
 800a3dc:	f107 0208 	add.w	r2, r7, #8
 800a3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	f000 f858 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "Inrush Duration: %d ms | INV_R: %d | INV_R_SCALE: %d\n",
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 800a3f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
    snprintf(buffer, sizeof(buffer),
 800a3fc:	4619      	mov	r1, r3
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 800a3fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    snprintf(buffer, sizeof(buffer),
 800a40c:	461a      	mov	r2, r3
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 800a40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
    snprintf(buffer, sizeof(buffer),
 800a41a:	f107 0008 	add.w	r0, r7, #8
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	9200      	str	r2, [sp, #0]
 800a422:	460b      	mov	r3, r1
 800a424:	4a1c      	ldr	r2, [pc, #112]	@ (800a498 <_ZN7DRV821416printMotorConfigEb+0x3b0>)
 800a426:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a42a:	f008 fe61 	bl	80130f0 <sniprintf>
    drvPrint(buffer);
 800a42e:	f107 0208 	add.w	r2, r7, #8
 800a432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a43a:	4611      	mov	r1, r2
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	f000 f82f 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "KMC: %d | KMCScale: %d\n",
        config.kmc, config.kmc_scale);
 800a442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
    snprintf(buffer, sizeof(buffer),
 800a450:	461a      	mov	r2, r3
        config.kmc, config.kmc_scale);
 800a452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
    snprintf(buffer, sizeof(buffer),
 800a460:	f107 0008 	add.w	r0, r7, #8
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	4613      	mov	r3, r2
 800a468:	4a0c      	ldr	r2, [pc, #48]	@ (800a49c <_ZN7DRV821416printMotorConfigEb+0x3b4>)
 800a46a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a46e:	f008 fe3f 	bl	80130f0 <sniprintf>
    drvPrint(buffer);
 800a472:	f107 0208 	add.w	r2, r7, #8
 800a476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a47a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a47e:	4611      	mov	r1, r2
 800a480:	6818      	ldr	r0, [r3, #0]
 800a482:	f000 f80d 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
}
 800a486:	bf00      	nop
 800a488:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd90      	pop	{r4, r7, pc}
 800a490:	08016520 	.word	0x08016520
 800a494:	08016538 	.word	0x08016538
 800a498:	08016570 	.word	0x08016570
 800a49c:	080165a8 	.word	0x080165a8

0800a4a0 <_ZN7DRV82148drvPrintEPKc>:

void DRV8214::drvPrint(const char* msg) {
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
    #elif defined(DRV8214_PLATFORM_STM32)
        // Option 1: Using HAL_UART_Transmit directly
        // HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    
        // Option 2: If you have retargeted printf to UART, you could simply use:
        printf("%s", msg);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	4803      	ldr	r0, [pc, #12]	@ (800a4bc <_ZN7DRV82148drvPrintEPKc+0x1c>)
 800a4ae:	f008 ff17 	bl	80132e0 <iprintf>
    #endif
}
 800a4b2:	bf00      	nop
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	080165c0 	.word	0x080165c0

0800a4c0 <_ZN7DRV821416printFaultStatusEv>:

void DRV8214::printFaultStatus() {
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b0c4      	sub	sp, #272	@ 0x110
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4ce:	6018      	str	r0, [r3, #0]
    char buffer[256];  // Buffer for formatted output
    uint8_t faultReg = drv8214_i2c_read_register(address, DRV8214_FAULT);
 800a4d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2100      	movs	r1, #0
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 f8d0 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

    snprintf(buffer, sizeof(buffer), "DRV8214 Driver %d - FAULT Register Status:\n", driver_ID);
 800a4ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	785b      	ldrb	r3, [r3, #1]
 800a4f6:	f107 000c 	add.w	r0, r7, #12
 800a4fa:	4a3e      	ldr	r2, [pc, #248]	@ (800a5f4 <_ZN7DRV821416printFaultStatusEv+0x134>)
 800a4fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a500:	f008 fdf6 	bl	80130f0 <sniprintf>
    drvPrint(buffer);
 800a504:	f107 020c 	add.w	r2, r7, #12
 800a508:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a50c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a510:	4611      	mov	r1, r2
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	f7ff ffc4 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>

    if (faultReg & (1 << 7)) {
 800a518:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	da08      	bge.n	800a532 <_ZN7DRV821416printFaultStatusEv+0x72>
        drvPrint(" - FAULT: General fault detected.\n");
 800a520:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a524:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a528:	4933      	ldr	r1, [pc, #204]	@ (800a5f8 <_ZN7DRV821416printFaultStatusEv+0x138>)
 800a52a:	6818      	ldr	r0, [r3, #0]
 800a52c:	f7ff ffb8 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
 800a530:	e007      	b.n	800a542 <_ZN7DRV821416printFaultStatusEv+0x82>
    } else {
        drvPrint(" - FAULT: No faults detected.\n");
 800a532:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a536:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a53a:	4930      	ldr	r1, [pc, #192]	@ (800a5fc <_ZN7DRV821416printFaultStatusEv+0x13c>)
 800a53c:	6818      	ldr	r0, [r3, #0]
 800a53e:	f7ff ffaf 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 5)) {
 800a542:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a546:	f003 0320 	and.w	r3, r3, #32
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d007      	beq.n	800a55e <_ZN7DRV821416printFaultStatusEv+0x9e>
        drvPrint(" - STALL: Motor stall detected.\n");
 800a54e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a552:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a556:	492a      	ldr	r1, [pc, #168]	@ (800a600 <_ZN7DRV821416printFaultStatusEv+0x140>)
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	f7ff ffa1 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 4)) {
 800a55e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a562:	f003 0310 	and.w	r3, r3, #16
 800a566:	2b00      	cmp	r3, #0
 800a568:	d007      	beq.n	800a57a <_ZN7DRV821416printFaultStatusEv+0xba>
        drvPrint(" - OCP: Overcurrent protection (OCP) event occurred.\n");
 800a56a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a56e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a572:	4924      	ldr	r1, [pc, #144]	@ (800a604 <_ZN7DRV821416printFaultStatusEv+0x144>)
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	f7ff ff93 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 3)) {
 800a57a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a57e:	f003 0308 	and.w	r3, r3, #8
 800a582:	2b00      	cmp	r3, #0
 800a584:	d007      	beq.n	800a596 <_ZN7DRV821416printFaultStatusEv+0xd6>
        drvPrint(" - OVP: Overvoltage protection (OVP) event occurred.\n");
 800a586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a58a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a58e:	491e      	ldr	r1, [pc, #120]	@ (800a608 <_ZN7DRV821416printFaultStatusEv+0x148>)
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	f7ff ff85 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 2)) {
 800a596:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a59a:	f003 0304 	and.w	r3, r3, #4
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d007      	beq.n	800a5b2 <_ZN7DRV821416printFaultStatusEv+0xf2>
        drvPrint(" - TSD: Thermal shutdown (TSD) event occurred.\n");
 800a5a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5aa:	4918      	ldr	r1, [pc, #96]	@ (800a60c <_ZN7DRV821416printFaultStatusEv+0x14c>)
 800a5ac:	6818      	ldr	r0, [r3, #0]
 800a5ae:	f7ff ff77 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 1)) {
 800a5b2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a5b6:	f003 0302 	and.w	r3, r3, #2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d007      	beq.n	800a5ce <_ZN7DRV821416printFaultStatusEv+0x10e>
        drvPrint(" - NPOR: Device is in power-on reset (NPOR).\n");
 800a5be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5c6:	4912      	ldr	r1, [pc, #72]	@ (800a610 <_ZN7DRV821416printFaultStatusEv+0x150>)
 800a5c8:	6818      	ldr	r0, [r3, #0]
 800a5ca:	f7ff ff69 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 0)) {
 800a5ce:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d007      	beq.n	800a5ea <_ZN7DRV821416printFaultStatusEv+0x12a>
        drvPrint(" - CNT_DONE: Ripple counting threshold exceeded.\n");
 800a5da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5e2:	490c      	ldr	r1, [pc, #48]	@ (800a614 <_ZN7DRV821416printFaultStatusEv+0x154>)
 800a5e4:	6818      	ldr	r0, [r3, #0]
 800a5e6:	f7ff ff5b 	bl	800a4a0 <_ZN7DRV82148drvPrintEPKc>
    }
}
 800a5ea:	bf00      	nop
 800a5ec:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	080165c4 	.word	0x080165c4
 800a5f8:	080165f0 	.word	0x080165f0
 800a5fc:	08016614 	.word	0x08016614
 800a600:	08016634 	.word	0x08016634
 800a604:	08016658 	.word	0x08016658
 800a608:	08016690 	.word	0x08016690
 800a60c:	080166c8 	.word	0x080166c8
 800a610:	080166f8 	.word	0x080166f8
 800a614:	08016728 	.word	0x08016728

0800a618 <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef>:
#include "drv8214_platform_i2c.h"

#ifdef DRV8214_PLATFORM_STM32
    static I2C_HandleTypeDef* drv_i2c_handle = NULL; // Static pointer to the I2C handle

    void drv8214_i2c_set_handle(I2C_HandleTypeDef* hi2c) {
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
        drv_i2c_handle = hi2c;
 800a620:	4a04      	ldr	r2, [pc, #16]	@ (800a634 <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef+0x1c>)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6013      	str	r3, [r2, #0]
    }
 800a626:	bf00      	nop
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	200006d8 	.word	0x200006d8

0800a638 <_Z26drv8214_i2c_write_registerhhh>:
#endif

void drv8214_i2c_write_register(uint8_t device_address, uint8_t reg, uint8_t value) {
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af02      	add	r7, sp, #8
 800a63e:	4603      	mov	r3, r0
 800a640:	71fb      	strb	r3, [r7, #7]
 800a642:	460b      	mov	r3, r1
 800a644:	71bb      	strb	r3, [r7, #6]
 800a646:	4613      	mov	r3, r2
 800a648:	717b      	strb	r3, [r7, #5]
    if (drv_i2c_handle == NULL) {
 800a64a:	4b0d      	ldr	r3, [pc, #52]	@ (800a680 <_Z26drv8214_i2c_write_registerhhh+0x48>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d012      	beq.n	800a678 <_Z26drv8214_i2c_write_registerhhh+0x40>
    Wire.beginTransmission(device_address);
    Wire.write(reg);
    Wire.write(value);
    Wire.endTransmission();
#elif defined(DRV8214_PLATFORM_STM32)
    uint8_t data[2] = { reg, value };
 800a652:	79bb      	ldrb	r3, [r7, #6]
 800a654:	733b      	strb	r3, [r7, #12]
 800a656:	797b      	ldrb	r3, [r7, #5]
 800a658:	737b      	strb	r3, [r7, #13]
    // STM32 HAL expects the 7-bit address to be shifted left by 1
    HAL_I2C_Master_Transmit(drv_i2c_handle, (uint16_t)(device_address << 1), data, 2, HAL_MAX_DELAY);
 800a65a:	4b09      	ldr	r3, [pc, #36]	@ (800a680 <_Z26drv8214_i2c_write_registerhhh+0x48>)
 800a65c:	6818      	ldr	r0, [r3, #0]
 800a65e:	79fb      	ldrb	r3, [r7, #7]
 800a660:	b29b      	uxth	r3, r3
 800a662:	005b      	lsls	r3, r3, #1
 800a664:	b299      	uxth	r1, r3
 800a666:	f107 020c 	add.w	r2, r7, #12
 800a66a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	2302      	movs	r3, #2
 800a672:	f002 fa27 	bl	800cac4 <HAL_I2C_Master_Transmit>
 800a676:	e000      	b.n	800a67a <_Z26drv8214_i2c_write_registerhhh+0x42>
        return;
 800a678:	bf00      	nop
    // Add error handling for HAL_StatusTypeDef if needed
#endif
}
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	200006d8 	.word	0x200006d8

0800a684 <_Z25drv8214_i2c_read_registerhh>:

uint8_t drv8214_i2c_read_register(uint8_t device_address, uint8_t reg) {
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af02      	add	r7, sp, #8
 800a68a:	4603      	mov	r3, r0
 800a68c:	460a      	mov	r2, r1
 800a68e:	71fb      	strb	r3, [r7, #7]
 800a690:	4613      	mov	r3, r2
 800a692:	71bb      	strb	r3, [r7, #6]
    if (drv_i2c_handle == NULL) {
 800a694:	4b1c      	ldr	r3, [pc, #112]	@ (800a708 <_Z25drv8214_i2c_read_registerhh+0x84>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <_Z25drv8214_i2c_read_registerhh+0x1c>
         // Handle error: I2C handle not set
        return 0;
 800a69c:	2300      	movs	r3, #0
 800a69e:	e02f      	b.n	800a700 <_Z25drv8214_i2c_read_registerhh+0x7c>
    if (Wire.available()) {
        return Wire.read();
    }
    return 0; // Error or no data
#elif defined(DRV8214_PLATFORM_STM32)
    uint8_t data = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73fb      	strb	r3, [r7, #15]
    // STM32 HAL I2C typically uses separate Transmit then Receive for this,
    // or HAL_I2C_Mem_Read for register-based reads.
    // Your Arduino code pattern translates better to separate Transmit/Receive.
    if (HAL_I2C_Master_Transmit(drv_i2c_handle, (uint16_t)(device_address << 1), &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 800a6a4:	4b18      	ldr	r3, [pc, #96]	@ (800a708 <_Z25drv8214_i2c_read_registerhh+0x84>)
 800a6a6:	6818      	ldr	r0, [r3, #0]
 800a6a8:	79fb      	ldrb	r3, [r7, #7]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	005b      	lsls	r3, r3, #1
 800a6ae:	b299      	uxth	r1, r3
 800a6b0:	1dba      	adds	r2, r7, #6
 800a6b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f002 fa03 	bl	800cac4 <HAL_I2C_Master_Transmit>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	bf0c      	ite	eq
 800a6c4:	2301      	moveq	r3, #1
 800a6c6:	2300      	movne	r3, #0
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d017      	beq.n	800a6fe <_Z25drv8214_i2c_read_registerhh+0x7a>
        if (HAL_I2C_Master_Receive(drv_i2c_handle, (uint16_t)(device_address << 1), &data, 1, HAL_MAX_DELAY) == HAL_OK) {
 800a6ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a708 <_Z25drv8214_i2c_read_registerhh+0x84>)
 800a6d0:	6818      	ldr	r0, [r3, #0]
 800a6d2:	79fb      	ldrb	r3, [r7, #7]
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	b299      	uxth	r1, r3
 800a6da:	f107 020f 	add.w	r2, r7, #15
 800a6de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f002 fb05 	bl	800ccf4 <HAL_I2C_Master_Receive>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	bf0c      	ite	eq
 800a6f0:	2301      	moveq	r3, #1
 800a6f2:	2300      	movne	r3, #0
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <_Z25drv8214_i2c_read_registerhh+0x7a>
            return data;
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
 800a6fc:	e000      	b.n	800a700 <_Z25drv8214_i2c_read_registerhh+0x7c>
        }
    }
    // Consider using HAL_I2C_Mem_Read for more robustness:
    // HAL_I2C_Mem_Read(drv_i2c_handle, (uint16_t)(device_address << 1), reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
    return 0; // Error
 800a6fe:	2300      	movs	r3, #0
#endif
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	200006d8 	.word	0x200006d8

0800a70c <_Z27drv8214_i2c_modify_registerhhhh>:

void drv8214_i2c_modify_register(uint8_t device_address, uint8_t reg, uint8_t mask, uint8_t enable_bits) {
 800a70c:	b590      	push	{r4, r7, lr}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	4604      	mov	r4, r0
 800a714:	4608      	mov	r0, r1
 800a716:	4611      	mov	r1, r2
 800a718:	461a      	mov	r2, r3
 800a71a:	4623      	mov	r3, r4
 800a71c:	71fb      	strb	r3, [r7, #7]
 800a71e:	4603      	mov	r3, r0
 800a720:	71bb      	strb	r3, [r7, #6]
 800a722:	460b      	mov	r3, r1
 800a724:	717b      	strb	r3, [r7, #5]
 800a726:	4613      	mov	r3, r2
 800a728:	713b      	strb	r3, [r7, #4]
    uint8_t current_value = drv8214_i2c_read_register(device_address, reg);
 800a72a:	79ba      	ldrb	r2, [r7, #6]
 800a72c:	79fb      	ldrb	r3, [r7, #7]
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff ffa7 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 800a736:	4603      	mov	r3, r0
 800a738:	73fb      	strb	r3, [r7, #15]
    if (enable_bits) {
 800a73a:	793b      	ldrb	r3, [r7, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d004      	beq.n	800a74a <_Z27drv8214_i2c_modify_registerhhhh+0x3e>
        current_value |= mask;  // Set bits
 800a740:	7bfa      	ldrb	r2, [r7, #15]
 800a742:	797b      	ldrb	r3, [r7, #5]
 800a744:	4313      	orrs	r3, r2
 800a746:	73fb      	strb	r3, [r7, #15]
 800a748:	e008      	b.n	800a75c <_Z27drv8214_i2c_modify_registerhhhh+0x50>
    } else {
        current_value &= ~mask; // Clear bits
 800a74a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a74e:	43db      	mvns	r3, r3
 800a750:	b25a      	sxtb	r2, r3
 800a752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a756:	4013      	ands	r3, r2
 800a758:	b25b      	sxtb	r3, r3
 800a75a:	73fb      	strb	r3, [r7, #15]
    }
    drv8214_i2c_write_register(device_address, reg, current_value);
 800a75c:	7bfa      	ldrb	r2, [r7, #15]
 800a75e:	79b9      	ldrb	r1, [r7, #6]
 800a760:	79fb      	ldrb	r3, [r7, #7]
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff ff68 	bl	800a638 <_Z26drv8214_i2c_write_registerhhh>
}
 800a768:	bf00      	nop
 800a76a:	3714      	adds	r7, #20
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd90      	pop	{r4, r7, pc}

0800a770 <_Z32drv8214_i2c_modify_register_bitshhhh>:

void drv8214_i2c_modify_register_bits(uint8_t device_address, uint8_t reg, uint8_t mask, uint8_t new_value) {
 800a770:	b590      	push	{r4, r7, lr}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	4604      	mov	r4, r0
 800a778:	4608      	mov	r0, r1
 800a77a:	4611      	mov	r1, r2
 800a77c:	461a      	mov	r2, r3
 800a77e:	4623      	mov	r3, r4
 800a780:	71fb      	strb	r3, [r7, #7]
 800a782:	4603      	mov	r3, r0
 800a784:	71bb      	strb	r3, [r7, #6]
 800a786:	460b      	mov	r3, r1
 800a788:	717b      	strb	r3, [r7, #5]
 800a78a:	4613      	mov	r3, r2
 800a78c:	713b      	strb	r3, [r7, #4]
    uint8_t current_value = drv8214_i2c_read_register(device_address, reg);
 800a78e:	79ba      	ldrb	r2, [r7, #6]
 800a790:	79fb      	ldrb	r3, [r7, #7]
 800a792:	4611      	mov	r1, r2
 800a794:	4618      	mov	r0, r3
 800a796:	f7ff ff75 	bl	800a684 <_Z25drv8214_i2c_read_registerhh>
 800a79a:	4603      	mov	r3, r0
 800a79c:	73fb      	strb	r3, [r7, #15]
    current_value = (current_value & ~mask) | (new_value & mask); // Apply new value only to masked bits
 800a79e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a7a2:	43db      	mvns	r3, r3
 800a7a4:	b25a      	sxtb	r2, r3
 800a7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	b25a      	sxtb	r2, r3
 800a7ae:	7939      	ldrb	r1, [r7, #4]
 800a7b0:	797b      	ldrb	r3, [r7, #5]
 800a7b2:	400b      	ands	r3, r1
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	b25b      	sxtb	r3, r3
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	b25b      	sxtb	r3, r3
 800a7bc:	73fb      	strb	r3, [r7, #15]
    drv8214_i2c_write_register(device_address, reg, current_value);
 800a7be:	7bfa      	ldrb	r2, [r7, #15]
 800a7c0:	79b9      	ldrb	r1, [r7, #6]
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff ff37 	bl	800a638 <_Z26drv8214_i2c_write_registerhhh>
 800a7ca:	bf00      	nop
 800a7cc:	3714      	adds	r7, #20
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd90      	pop	{r4, r7, pc}
	...

0800a7d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a7de:	4b0c      	ldr	r3, [pc, #48]	@ (800a810 <HAL_Init+0x3c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a0b      	ldr	r2, [pc, #44]	@ (800a810 <HAL_Init+0x3c>)
 800a7e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a7ea:	2003      	movs	r0, #3
 800a7ec:	f001 fb1e 	bl	800be2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a7f0:	200f      	movs	r0, #15
 800a7f2:	f000 f80f 	bl	800a814 <HAL_InitTick>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	71fb      	strb	r3, [r7, #7]
 800a800:	e001      	b.n	800a806 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a802:	f7f8 fe3a 	bl	800347a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a806:	79fb      	ldrb	r3, [r7, #7]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	58004000 	.word	0x58004000

0800a814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800a820:	4b17      	ldr	r3, [pc, #92]	@ (800a880 <HAL_InitTick+0x6c>)
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d024      	beq.n	800a872 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a828:	f004 fd6e 	bl	800f308 <HAL_RCC_GetHCLKFreq>
 800a82c:	4602      	mov	r2, r0
 800a82e:	4b14      	ldr	r3, [pc, #80]	@ (800a880 <HAL_InitTick+0x6c>)
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	4619      	mov	r1, r3
 800a834:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a838:	fbb3 f3f1 	udiv	r3, r3, r1
 800a83c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a840:	4618      	mov	r0, r3
 800a842:	f001 fb34 	bl	800beae <HAL_SYSTICK_Config>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10f      	bne.n	800a86c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b0f      	cmp	r3, #15
 800a850:	d809      	bhi.n	800a866 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a852:	2200      	movs	r2, #0
 800a854:	6879      	ldr	r1, [r7, #4]
 800a856:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a85a:	f001 faf2 	bl	800be42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a85e:	4a09      	ldr	r2, [pc, #36]	@ (800a884 <HAL_InitTick+0x70>)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	e007      	b.n	800a876 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	73fb      	strb	r3, [r7, #15]
 800a86a:	e004      	b.n	800a876 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	73fb      	strb	r3, [r7, #15]
 800a870:	e001      	b.n	800a876 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a876:	7bfb      	ldrb	r3, [r7, #15]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20000094 	.word	0x20000094
 800a884:	20000090 	.word	0x20000090

0800a888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a888:	b480      	push	{r7}
 800a88a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a88c:	4b06      	ldr	r3, [pc, #24]	@ (800a8a8 <HAL_IncTick+0x20>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	461a      	mov	r2, r3
 800a892:	4b06      	ldr	r3, [pc, #24]	@ (800a8ac <HAL_IncTick+0x24>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4413      	add	r3, r2
 800a898:	4a04      	ldr	r2, [pc, #16]	@ (800a8ac <HAL_IncTick+0x24>)
 800a89a:	6013      	str	r3, [r2, #0]
}
 800a89c:	bf00      	nop
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	20000094 	.word	0x20000094
 800a8ac:	200006dc 	.word	0x200006dc

0800a8b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	af00      	add	r7, sp, #0
  return uwTick;
 800a8b4:	4b03      	ldr	r3, [pc, #12]	@ (800a8c4 <HAL_GetTick+0x14>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	200006dc 	.word	0x200006dc

0800a8c8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800a8cc:	4b03      	ldr	r3, [pc, #12]	@ (800a8dc <HAL_GetTickPrio+0x14>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	20000090 	.word	0x20000090

0800a8e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a8e8:	f7ff ffe2 	bl	800a8b0 <HAL_GetTick>
 800a8ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8f8:	d005      	beq.n	800a906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a8fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a924 <HAL_Delay+0x44>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4413      	add	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a906:	bf00      	nop
 800a908:	f7ff ffd2 	bl	800a8b0 <HAL_GetTick>
 800a90c:	4602      	mov	r2, r0
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	429a      	cmp	r2, r3
 800a916:	d8f7      	bhi.n	800a908 <HAL_Delay+0x28>
  {
  }
}
 800a918:	bf00      	nop
 800a91a:	bf00      	nop
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20000094 	.word	0x20000094

0800a928 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800a928:	b480      	push	{r7}
 800a92a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800a92c:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <HAL_SuspendTick+0x1c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a04      	ldr	r2, [pc, #16]	@ (800a944 <HAL_SuspendTick+0x1c>)
 800a932:	f023 0302 	bic.w	r3, r3, #2
 800a936:	6013      	str	r3, [r2, #0]
}
 800a938:	bf00      	nop
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	e000e010 	.word	0xe000e010

0800a948 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800a94c:	4b05      	ldr	r3, [pc, #20]	@ (800a964 <HAL_ResumeTick+0x1c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a04      	ldr	r2, [pc, #16]	@ (800a964 <HAL_ResumeTick+0x1c>)
 800a952:	f043 0302 	orr.w	r3, r3, #2
 800a956:	6013      	str	r3, [r2, #0]
}
 800a958:	bf00      	nop
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	e000e010 	.word	0xe000e010

0800a968 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	431a      	orrs	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800a982:	bf00      	nop
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a98e:	b480      	push	{r7}
 800a990:	b083      	sub	sp, #12
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	609a      	str	r2, [r3, #8]
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
 800a9dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3360      	adds	r3, #96	@ 0x60
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	4b08      	ldr	r3, [pc, #32]	@ (800aa14 <LL_ADC_SetOffset+0x44>)
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	430a      	orrs	r2, r1
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800aa08:	bf00      	nop
 800aa0a:	371c      	adds	r7, #28
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	03fff000 	.word	0x03fff000

0800aa18 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	3360      	adds	r3, #96	@ 0x60
 800aa26:	461a      	mov	r2, r3
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	3360      	adds	r3, #96	@ 0x60
 800aa54:	461a      	mov	r2, r3
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	431a      	orrs	r2, r3
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800aa6e:	bf00      	nop
 800aa70:	371c      	adds	r7, #28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b087      	sub	sp, #28
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	60f8      	str	r0, [r7, #12]
 800aa82:	60b9      	str	r1, [r7, #8]
 800aa84:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3330      	adds	r3, #48	@ 0x30
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	0a1b      	lsrs	r3, r3, #8
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	f003 030c 	and.w	r3, r3, #12
 800aa96:	4413      	add	r3, r2
 800aa98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	f003 031f 	and.w	r3, r3, #31
 800aaa4:	211f      	movs	r1, #31
 800aaa6:	fa01 f303 	lsl.w	r3, r1, r3
 800aaaa:	43db      	mvns	r3, r3
 800aaac:	401a      	ands	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	0e9b      	lsrs	r3, r3, #26
 800aab2:	f003 011f 	and.w	r1, r3, #31
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	f003 031f 	and.w	r3, r3, #31
 800aabc:	fa01 f303 	lsl.w	r3, r1, r3
 800aac0:	431a      	orrs	r2, r3
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800aac6:	bf00      	nop
 800aac8:	371c      	adds	r7, #28
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b087      	sub	sp, #28
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	60f8      	str	r0, [r7, #12]
 800aada:	60b9      	str	r1, [r7, #8]
 800aadc:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	3314      	adds	r3, #20
 800aae2:	461a      	mov	r2, r3
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	0e5b      	lsrs	r3, r3, #25
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	f003 0304 	and.w	r3, r3, #4
 800aaee:	4413      	add	r3, r2
 800aaf0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	0d1b      	lsrs	r3, r3, #20
 800aafa:	f003 031f 	and.w	r3, r3, #31
 800aafe:	2107      	movs	r1, #7
 800ab00:	fa01 f303 	lsl.w	r3, r1, r3
 800ab04:	43db      	mvns	r3, r3
 800ab06:	401a      	ands	r2, r3
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	0d1b      	lsrs	r3, r3, #20
 800ab0c:	f003 031f 	and.w	r3, r3, #31
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	fa01 f303 	lsl.w	r3, r1, r3
 800ab16:	431a      	orrs	r2, r3
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800ab1c:	bf00      	nop
 800ab1e:	371c      	adds	r7, #28
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab40:	43db      	mvns	r3, r3
 800ab42:	401a      	ands	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f003 0318 	and.w	r3, r3, #24
 800ab4a:	4908      	ldr	r1, [pc, #32]	@ (800ab6c <LL_ADC_SetChannelSingleDiff+0x44>)
 800ab4c:	40d9      	lsrs	r1, r3
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	400b      	ands	r3, r1
 800ab52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab56:	431a      	orrs	r2, r3
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800ab5e:	bf00      	nop
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	0007ffff 	.word	0x0007ffff

0800ab70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800ab80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	6093      	str	r3, [r2, #8]
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aba8:	d101      	bne.n	800abae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800abaa:	2301      	movs	r3, #1
 800abac:	e000      	b.n	800abb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800abcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800abd0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800abf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abf8:	d101      	bne.n	800abfe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e000      	b.n	800ac00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ac20:	f043 0202 	orr.w	r2, r3, #2
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d101      	bne.n	800ac4c <LL_ADC_IsEnabled+0x18>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e000      	b.n	800ac4e <LL_ADC_IsEnabled+0x1a>
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b083      	sub	sp, #12
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d101      	bne.n	800ac72 <LL_ADC_IsDisableOngoing+0x18>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <LL_ADC_IsDisableOngoing+0x1a>
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ac94:	f043 0210 	orr.w	r2, r3, #16
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b04      	cmp	r3, #4
 800acba:	d101      	bne.n	800acc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800acbc:	2301      	movs	r3, #1
 800acbe:	e000      	b.n	800acc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800acde:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ace2:	f043 0220 	orr.w	r2, r3, #32
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800acea:	bf00      	nop
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b083      	sub	sp, #12
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	f003 0308 	and.w	r3, r3, #8
 800ad06:	2b08      	cmp	r3, #8
 800ad08:	d101      	bne.n	800ad0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e000      	b.n	800ad10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b088      	sub	sp, #32
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e12e      	b.n	800af98 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d109      	bne.n	800ad5c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7f6 f9fd 	bl	8001148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7ff ff17 	bl	800ab94 <LL_ADC_IsDeepPowerDownEnabled>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d004      	beq.n	800ad76 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff fefd 	bl	800ab70 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7ff ff32 	bl	800abe4 <LL_ADC_IsInternalRegulatorEnabled>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d115      	bne.n	800adb2 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7ff ff16 	bl	800abbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ad90:	4b83      	ldr	r3, [pc, #524]	@ (800afa0 <HAL_ADC_Init+0x284>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	099b      	lsrs	r3, r3, #6
 800ad96:	4a83      	ldr	r2, [pc, #524]	@ (800afa4 <HAL_ADC_Init+0x288>)
 800ad98:	fba2 2303 	umull	r2, r3, r2, r3
 800ad9c:	099b      	lsrs	r3, r3, #6
 800ad9e:	3301      	adds	r3, #1
 800ada0:	005b      	lsls	r3, r3, #1
 800ada2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800ada4:	e002      	b.n	800adac <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1f9      	bne.n	800ada6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7ff ff14 	bl	800abe4 <LL_ADC_IsInternalRegulatorEnabled>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10d      	bne.n	800adde <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adc6:	f043 0210 	orr.w	r2, r3, #16
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800add2:	f043 0201 	orr.w	r2, r3, #1
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff ff60 	bl	800aca8 <LL_ADC_REG_IsConversionOngoing>
 800ade8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adee:	f003 0310 	and.w	r3, r3, #16
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f040 80c7 	bne.w	800af86 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f040 80c3 	bne.w	800af86 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae04:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800ae08:	f043 0202 	orr.w	r2, r3, #2
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff ff0d 	bl	800ac34 <LL_ADC_IsEnabled>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10b      	bne.n	800ae38 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ae20:	4861      	ldr	r0, [pc, #388]	@ (800afa8 <HAL_ADC_Init+0x28c>)
 800ae22:	f7ff ff07 	bl	800ac34 <LL_ADC_IsEnabled>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d105      	bne.n	800ae38 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	4619      	mov	r1, r3
 800ae32:	485e      	ldr	r0, [pc, #376]	@ (800afac <HAL_ADC_Init+0x290>)
 800ae34:	f7ff fd98 	bl	800a968 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	7e5b      	ldrb	r3, [r3, #25]
 800ae3c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ae42:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800ae48:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800ae4e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae56:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800ae58:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ae5a:	69ba      	ldr	r2, [r7, #24]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d106      	bne.n	800ae78 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	045b      	lsls	r3, r3, #17
 800ae72:	69ba      	ldr	r2, [r7, #24]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d009      	beq.n	800ae94 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae84:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68da      	ldr	r2, [r3, #12]
 800ae9a:	4b45      	ldr	r3, [pc, #276]	@ (800afb0 <HAL_ADC_Init+0x294>)
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	6812      	ldr	r2, [r2, #0]
 800aea2:	69b9      	ldr	r1, [r7, #24]
 800aea4:	430b      	orrs	r3, r1
 800aea6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7ff fefb 	bl	800aca8 <LL_ADC_REG_IsConversionOngoing>
 800aeb2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7ff ff1c 	bl	800acf6 <LL_ADC_INJ_IsConversionOngoing>
 800aebe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d13d      	bne.n	800af42 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d13a      	bne.n	800af42 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800aed0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aed8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800aeda:	4313      	orrs	r3, r2
 800aedc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aee8:	f023 0302 	bic.w	r3, r3, #2
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	6812      	ldr	r2, [r2, #0]
 800aef0:	69b9      	ldr	r1, [r7, #24]
 800aef2:	430b      	orrs	r3, r1
 800aef4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d118      	bne.n	800af32 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800af0a:	f023 0304 	bic.w	r3, r3, #4
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800af16:	4311      	orrs	r1, r2
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800af1c:	4311      	orrs	r1, r2
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800af22:	430a      	orrs	r2, r1
 800af24:	431a      	orrs	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f042 0201 	orr.w	r2, r2, #1
 800af2e:	611a      	str	r2, [r3, #16]
 800af30:	e007      	b.n	800af42 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	691a      	ldr	r2, [r3, #16]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f022 0201 	bic.w	r2, r2, #1
 800af40:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d10c      	bne.n	800af64 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af50:	f023 010f 	bic.w	r1, r3, #15
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	69db      	ldr	r3, [r3, #28]
 800af58:	1e5a      	subs	r2, r3, #1
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	631a      	str	r2, [r3, #48]	@ 0x30
 800af62:	e007      	b.n	800af74 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f022 020f 	bic.w	r2, r2, #15
 800af72:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af78:	f023 0303 	bic.w	r3, r3, #3
 800af7c:	f043 0201 	orr.w	r2, r3, #1
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	655a      	str	r2, [r3, #84]	@ 0x54
 800af84:	e007      	b.n	800af96 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af8a:	f043 0210 	orr.w	r2, r3, #16
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800af96:	7ffb      	ldrb	r3, [r7, #31]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3720      	adds	r7, #32
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	2000007c 	.word	0x2000007c
 800afa4:	053e2d63 	.word	0x053e2d63
 800afa8:	50040000 	.word	0x50040000
 800afac:	50040300 	.word	0x50040300
 800afb0:	fff0c007 	.word	0xfff0c007

0800afb4 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e118      	b.n	800b1f8 <HAL_ADC_DeInit+0x244>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afca:	f043 0202 	orr.w	r2, r3, #2
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
#if  defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800afd2:	2103      	movs	r1, #3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 fd19 	bl	800ba0c <ADC_ConversionStop>
 800afda:	4603      	mov	r3, r0
 800afdc:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800afec:	60da      	str	r2, [r3, #12]
#endif

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800afee:	7bfb      	ldrb	r3, [r7, #15]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10a      	bne.n	800b00a <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fdc5 	bl	800bb84 <ADC_Disable>
 800affa:	4603      	mov	r3, r0
 800affc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d102      	bne.n	800b00a <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Reset register IER */
#if defined(ADC_SUPPORT_2_5_MSPS)
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
                              ADC_IT_EOCAL | ADC_IT_CCRDY));
#else
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 800b018:	605a      	str	r2, [r3, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC | ADC_IT_JQOVF));
#endif /* ADC_SUPPORT_2_5_MSPS */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOS   | ADC_IT_EOC  | ADC_IT_OVR   |
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f022 021f 	bic.w	r2, r2, #31
 800b028:	605a      	str	r2, [r3, #4]
  /* Reset register ISR */
#if defined(ADC_SUPPORT_2_5_MSPS)
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
                              ADC_FLAG_EOCAL | ADC_FLAG_CCRDY));
#else
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b032:	601a      	str	r2, [r3, #0]
                              ADC_FLAG_JEOS  | ADC_FLAG_JEOC | ADC_FLAG_JQOVF));
#endif /* ADC_SUPPORT_2_5_MSPS */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOS   | ADC_FLAG_EOC  | ADC_FLAG_OVR  |
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	221f      	movs	r2, #31
 800b03a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689a      	ldr	r2, [r3, #8]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 800b04a:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689a      	ldr	r2, [r3, #8]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800b05a:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68d9      	ldr	r1, [r3, #12]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	4b66      	ldr	r3, [pc, #408]	@ (800b200 <HAL_ADC_DeInit+0x24c>)
 800b068:	400b      	ands	r3, r1
 800b06a:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68da      	ldr	r2, [r3, #12]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b07a:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	6812      	ldr	r2, [r2, #0]
 800b086:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b08a:	f023 0307 	bic.w	r3, r3, #7
 800b08e:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	695a      	ldr	r2, [r3, #20]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 800b09e:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	699a      	ldr	r2, [r3, #24]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 800b0ae:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6a1a      	ldr	r2, [r3, #32]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800b0be:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 800b0ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 800b0de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	4b46      	ldr	r3, [pc, #280]	@ (800b204 <HAL_ADC_DeInit+0x250>)
 800b0ec:	400b      	ands	r3, r1
 800b0ee:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	4b43      	ldr	r3, [pc, #268]	@ (800b208 <HAL_ADC_DeInit+0x254>)
 800b0fc:	400b      	ands	r3, r1
 800b0fe:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	4b3f      	ldr	r3, [pc, #252]	@ (800b208 <HAL_ADC_DeInit+0x254>)
 800b10c:	400b      	ands	r3, r1
 800b10e:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	6812      	ldr	r2, [r2, #0]
 800b11a:	f423 63fb 	bic.w	r3, r3, #2008	@ 0x7d8
 800b11e:	f023 0307 	bic.w	r3, r3, #7
 800b122:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	4b37      	ldr	r3, [pc, #220]	@ (800b20c <HAL_ADC_DeInit+0x258>)
 800b130:	400b      	ands	r3, r1
 800b132:	6613      	str	r3, [r2, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	4b33      	ldr	r3, [pc, #204]	@ (800b20c <HAL_ADC_DeInit+0x258>)
 800b140:	400b      	ands	r3, r1
 800b142:	6653      	str	r3, [r2, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	4b2f      	ldr	r3, [pc, #188]	@ (800b20c <HAL_ADC_DeInit+0x258>)
 800b150:	400b      	ands	r3, r1
 800b152:	6693      	str	r3, [r2, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	4b2b      	ldr	r3, [pc, #172]	@ (800b20c <HAL_ADC_DeInit+0x258>)
 800b160:	400b      	ands	r3, r1
 800b162:	66d3      	str	r3, [r2, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	6812      	ldr	r2, [r2, #0]
 800b170:	0cdb      	lsrs	r3, r3, #19
 800b172:	04db      	lsls	r3, r3, #19
 800b174:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	6812      	ldr	r2, [r2, #0]
 800b184:	0cdb      	lsrs	r3, r3, #19
 800b186:	04db      	lsls	r3, r3, #19
 800b188:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	6812      	ldr	r2, [r2, #0]
 800b198:	0cdb      	lsrs	r3, r3, #19
 800b19a:	04db      	lsls	r3, r3, #19
 800b19c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f022 127f 	bic.w	r2, r2, #8323199	@ 0x7f007f
 800b1b0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b1b4:	4816      	ldr	r0, [pc, #88]	@ (800b210 <HAL_ADC_DeInit+0x25c>)
 800b1b6:	f7ff fd3d 	bl	800ac34 <LL_ADC_IsEnabled>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d107      	bne.n	800b1d0 <HAL_ADC_DeInit+0x21c>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 800b1c0:	4b14      	ldr	r3, [pc, #80]	@ (800b214 <HAL_ADC_DeInit+0x260>)
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	4a13      	ldr	r2, [pc, #76]	@ (800b214 <HAL_ADC_DeInit+0x260>)
 800b1c6:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800b1ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1ce:	6093      	str	r3, [r2, #8]

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7f6 f809 	bl	80011e8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	659a      	str	r2, [r3, #88]	@ 0x58
#if  defined(ADC_SUPPORT_2_5_MSPS)
  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
#else
  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	80008004 	.word	0x80008004
 800b204:	e0820830 	.word	0xe0820830
 800b208:	e0820820 	.word	0xe0820820
 800b20c:	03fff000 	.word	0x03fff000
 800b210:	50040000 	.word	0x50040000
 800b214:	50040300 	.word	0x50040300

0800b218 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b226:	2b01      	cmp	r3, #1
 800b228:	d101      	bne.n	800b22e <HAL_ADC_Stop+0x16>
 800b22a:	2302      	movs	r3, #2
 800b22c:	e023      	b.n	800b276 <HAL_ADC_Stop+0x5e>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800b236:	2103      	movs	r1, #3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fbe7 	bl	800ba0c <ADC_ConversionStop>
 800b23e:	4603      	mov	r3, r0
 800b240:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d111      	bne.n	800b26c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fc9b 	bl	800bb84 <ADC_Disable>
 800b24e:	4603      	mov	r3, r0
 800b250:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d109      	bne.n	800b26c <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b25c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b260:	f023 0301 	bic.w	r3, r3, #1
 800b264:	f043 0201 	orr.w	r2, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b274:	7bfb      	ldrb	r3, [r7, #15]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b0b6      	sub	sp, #216	@ 0xd8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d101      	bne.n	800b2a2 <HAL_ADC_ConfigChannel+0x22>
 800b29e:	2302      	movs	r3, #2
 800b2a0:	e39f      	b.n	800b9e2 <HAL_ADC_ConfigChannel+0x762>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7ff fcfa 	bl	800aca8 <LL_ADC_REG_IsConversionOngoing>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f040 8384 	bne.w	800b9c4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6818      	ldr	r0, [r3, #0]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	6859      	ldr	r1, [r3, #4]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	f7ff fbd6 	bl	800aa7a <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7ff fce8 	bl	800aca8 <LL_ADC_REG_IsConversionOngoing>
 800b2d8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7ff fd08 	bl	800acf6 <LL_ADC_INJ_IsConversionOngoing>
 800b2e6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b2ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f040 81a6 	bne.w	800b640 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b2f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f040 81a1 	bne.w	800b640 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6818      	ldr	r0, [r3, #0]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	6819      	ldr	r1, [r3, #0]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	461a      	mov	r2, r3
 800b30c:	f7ff fbe1 	bl	800aad2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	695a      	ldr	r2, [r3, #20]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	08db      	lsrs	r3, r3, #3
 800b31c:	f003 0303 	and.w	r3, r3, #3
 800b320:	005b      	lsls	r3, r3, #1
 800b322:	fa02 f303 	lsl.w	r3, r2, r3
 800b326:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	2b04      	cmp	r3, #4
 800b330:	d00a      	beq.n	800b348 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6818      	ldr	r0, [r3, #0]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	6919      	ldr	r1, [r3, #16]
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b342:	f7ff fb45 	bl	800a9d0 <LL_ADC_SetOffset>
 800b346:	e17b      	b.n	800b640 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2100      	movs	r1, #0
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff fb62 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b354:	4603      	mov	r3, r0
 800b356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10a      	bne.n	800b374 <HAL_ADC_ConfigChannel+0xf4>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2100      	movs	r1, #0
 800b364:	4618      	mov	r0, r3
 800b366:	f7ff fb57 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b36a:	4603      	mov	r3, r0
 800b36c:	0e9b      	lsrs	r3, r3, #26
 800b36e:	f003 021f 	and.w	r2, r3, #31
 800b372:	e01e      	b.n	800b3b2 <HAL_ADC_ConfigChannel+0x132>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2100      	movs	r1, #0
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7ff fb4c 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b380:	4603      	mov	r3, r0
 800b382:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b386:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b38a:	fa93 f3a3 	rbit	r3, r3
 800b38e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b392:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b396:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b39a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800b3a2:	2320      	movs	r3, #32
 800b3a4:	e004      	b.n	800b3b0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800b3a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3aa:	fab3 f383 	clz	r3, r3
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d105      	bne.n	800b3ca <HAL_ADC_ConfigChannel+0x14a>
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	0e9b      	lsrs	r3, r3, #26
 800b3c4:	f003 031f 	and.w	r3, r3, #31
 800b3c8:	e018      	b.n	800b3fc <HAL_ADC_ConfigChannel+0x17c>
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b3d6:	fa93 f3a3 	rbit	r3, r3
 800b3da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800b3de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800b3e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d101      	bne.n	800b3f2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800b3ee:	2320      	movs	r3, #32
 800b3f0:	e004      	b.n	800b3fc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800b3f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3f6:	fab3 f383 	clz	r3, r3
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d106      	bne.n	800b40e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2200      	movs	r2, #0
 800b406:	2100      	movs	r1, #0
 800b408:	4618      	mov	r0, r3
 800b40a:	f7ff fb1b 	bl	800aa44 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2101      	movs	r1, #1
 800b414:	4618      	mov	r0, r3
 800b416:	f7ff faff 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b41a:	4603      	mov	r3, r0
 800b41c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10a      	bne.n	800b43a <HAL_ADC_ConfigChannel+0x1ba>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2101      	movs	r1, #1
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff faf4 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b430:	4603      	mov	r3, r0
 800b432:	0e9b      	lsrs	r3, r3, #26
 800b434:	f003 021f 	and.w	r2, r3, #31
 800b438:	e01e      	b.n	800b478 <HAL_ADC_ConfigChannel+0x1f8>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2101      	movs	r1, #1
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff fae9 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b446:	4603      	mov	r3, r0
 800b448:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b44c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b450:	fa93 f3a3 	rbit	r3, r3
 800b454:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800b458:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b45c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800b460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800b468:	2320      	movs	r3, #32
 800b46a:	e004      	b.n	800b476 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800b46c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b470:	fab3 f383 	clz	r3, r3
 800b474:	b2db      	uxtb	r3, r3
 800b476:	461a      	mov	r2, r3
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b480:	2b00      	cmp	r3, #0
 800b482:	d105      	bne.n	800b490 <HAL_ADC_ConfigChannel+0x210>
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	0e9b      	lsrs	r3, r3, #26
 800b48a:	f003 031f 	and.w	r3, r3, #31
 800b48e:	e018      	b.n	800b4c2 <HAL_ADC_ConfigChannel+0x242>
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b49c:	fa93 f3a3 	rbit	r3, r3
 800b4a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800b4a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b4a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800b4ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800b4b4:	2320      	movs	r3, #32
 800b4b6:	e004      	b.n	800b4c2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800b4b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b4bc:	fab3 f383 	clz	r3, r3
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d106      	bne.n	800b4d4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7ff fab8 	bl	800aa44 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2102      	movs	r1, #2
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7ff fa9c 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10a      	bne.n	800b500 <HAL_ADC_ConfigChannel+0x280>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2102      	movs	r1, #2
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff fa91 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	0e9b      	lsrs	r3, r3, #26
 800b4fa:	f003 021f 	and.w	r2, r3, #31
 800b4fe:	e01e      	b.n	800b53e <HAL_ADC_ConfigChannel+0x2be>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2102      	movs	r1, #2
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff fa86 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b516:	fa93 f3a3 	rbit	r3, r3
 800b51a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800b51e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800b526:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800b52e:	2320      	movs	r3, #32
 800b530:	e004      	b.n	800b53c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800b532:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b536:	fab3 f383 	clz	r3, r3
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	461a      	mov	r2, r3
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b546:	2b00      	cmp	r3, #0
 800b548:	d105      	bne.n	800b556 <HAL_ADC_ConfigChannel+0x2d6>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	0e9b      	lsrs	r3, r3, #26
 800b550:	f003 031f 	and.w	r3, r3, #31
 800b554:	e016      	b.n	800b584 <HAL_ADC_ConfigChannel+0x304>
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b55e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b562:	fa93 f3a3 	rbit	r3, r3
 800b566:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800b568:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b56a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800b56e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b572:	2b00      	cmp	r3, #0
 800b574:	d101      	bne.n	800b57a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800b576:	2320      	movs	r3, #32
 800b578:	e004      	b.n	800b584 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800b57a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b57e:	fab3 f383 	clz	r3, r3
 800b582:	b2db      	uxtb	r3, r3
 800b584:	429a      	cmp	r2, r3
 800b586:	d106      	bne.n	800b596 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2200      	movs	r2, #0
 800b58e:	2102      	movs	r1, #2
 800b590:	4618      	mov	r0, r3
 800b592:	f7ff fa57 	bl	800aa44 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2103      	movs	r1, #3
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7ff fa3b 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10a      	bne.n	800b5c2 <HAL_ADC_ConfigChannel+0x342>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2103      	movs	r1, #3
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff fa30 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	0e9b      	lsrs	r3, r3, #26
 800b5bc:	f003 021f 	and.w	r2, r3, #31
 800b5c0:	e017      	b.n	800b5f2 <HAL_ADC_ConfigChannel+0x372>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2103      	movs	r1, #3
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff fa25 	bl	800aa18 <LL_ADC_GetOffsetChannel>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5d4:	fa93 f3a3 	rbit	r3, r3
 800b5d8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800b5da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800b5de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800b5e4:	2320      	movs	r3, #32
 800b5e6:	e003      	b.n	800b5f0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800b5e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5ea:	fab3 f383 	clz	r3, r3
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d105      	bne.n	800b60a <HAL_ADC_ConfigChannel+0x38a>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	0e9b      	lsrs	r3, r3, #26
 800b604:	f003 031f 	and.w	r3, r3, #31
 800b608:	e011      	b.n	800b62e <HAL_ADC_ConfigChannel+0x3ae>
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b610:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b612:	fa93 f3a3 	rbit	r3, r3
 800b616:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800b618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b61a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800b61c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800b622:	2320      	movs	r3, #32
 800b624:	e003      	b.n	800b62e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800b626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b628:	fab3 f383 	clz	r3, r3
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	429a      	cmp	r2, r3
 800b630:	d106      	bne.n	800b640 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2200      	movs	r2, #0
 800b638:	2103      	movs	r1, #3
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7ff fa02 	bl	800aa44 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4618      	mov	r0, r3
 800b646:	f7ff faf5 	bl	800ac34 <LL_ADC_IsEnabled>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f040 81c2 	bne.w	800b9d6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6818      	ldr	r0, [r3, #0]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	6819      	ldr	r1, [r3, #0]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	461a      	mov	r2, r3
 800b660:	f7ff fa62 	bl	800ab28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	4a8e      	ldr	r2, [pc, #568]	@ (800b8a4 <HAL_ADC_ConfigChannel+0x624>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	f040 8130 	bne.w	800b8d0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10b      	bne.n	800b698 <HAL_ADC_ConfigChannel+0x418>
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	0e9b      	lsrs	r3, r3, #26
 800b686:	3301      	adds	r3, #1
 800b688:	f003 031f 	and.w	r3, r3, #31
 800b68c:	2b09      	cmp	r3, #9
 800b68e:	bf94      	ite	ls
 800b690:	2301      	movls	r3, #1
 800b692:	2300      	movhi	r3, #0
 800b694:	b2db      	uxtb	r3, r3
 800b696:	e019      	b.n	800b6cc <HAL_ADC_ConfigChannel+0x44c>
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b69e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6a0:	fa93 f3a3 	rbit	r3, r3
 800b6a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800b6a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800b6aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d101      	bne.n	800b6b4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800b6b0:	2320      	movs	r3, #32
 800b6b2:	e003      	b.n	800b6bc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800b6b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6b6:	fab3 f383 	clz	r3, r3
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	3301      	adds	r3, #1
 800b6be:	f003 031f 	and.w	r3, r3, #31
 800b6c2:	2b09      	cmp	r3, #9
 800b6c4:	bf94      	ite	ls
 800b6c6:	2301      	movls	r3, #1
 800b6c8:	2300      	movhi	r3, #0
 800b6ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d079      	beq.n	800b7c4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d107      	bne.n	800b6ec <HAL_ADC_ConfigChannel+0x46c>
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	0e9b      	lsrs	r3, r3, #26
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	069b      	lsls	r3, r3, #26
 800b6e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b6ea:	e015      	b.n	800b718 <HAL_ADC_ConfigChannel+0x498>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6f4:	fa93 f3a3 	rbit	r3, r3
 800b6f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800b6fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800b6fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800b704:	2320      	movs	r3, #32
 800b706:	e003      	b.n	800b710 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800b708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b70a:	fab3 f383 	clz	r3, r3
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	3301      	adds	r3, #1
 800b712:	069b      	lsls	r3, r3, #26
 800b714:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b720:	2b00      	cmp	r3, #0
 800b722:	d109      	bne.n	800b738 <HAL_ADC_ConfigChannel+0x4b8>
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	0e9b      	lsrs	r3, r3, #26
 800b72a:	3301      	adds	r3, #1
 800b72c:	f003 031f 	and.w	r3, r3, #31
 800b730:	2101      	movs	r1, #1
 800b732:	fa01 f303 	lsl.w	r3, r1, r3
 800b736:	e017      	b.n	800b768 <HAL_ADC_ConfigChannel+0x4e8>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b73e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b740:	fa93 f3a3 	rbit	r3, r3
 800b744:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800b746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b748:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800b74a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800b750:	2320      	movs	r3, #32
 800b752:	e003      	b.n	800b75c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800b754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b756:	fab3 f383 	clz	r3, r3
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	3301      	adds	r3, #1
 800b75e:	f003 031f 	and.w	r3, r3, #31
 800b762:	2101      	movs	r1, #1
 800b764:	fa01 f303 	lsl.w	r3, r1, r3
 800b768:	ea42 0103 	orr.w	r1, r2, r3
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10a      	bne.n	800b78e <HAL_ADC_ConfigChannel+0x50e>
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	0e9b      	lsrs	r3, r3, #26
 800b77e:	3301      	adds	r3, #1
 800b780:	f003 021f 	and.w	r2, r3, #31
 800b784:	4613      	mov	r3, r2
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	4413      	add	r3, r2
 800b78a:	051b      	lsls	r3, r3, #20
 800b78c:	e018      	b.n	800b7c0 <HAL_ADC_ConfigChannel+0x540>
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b796:	fa93 f3a3 	rbit	r3, r3
 800b79a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800b79c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800b7a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800b7a6:	2320      	movs	r3, #32
 800b7a8:	e003      	b.n	800b7b2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800b7aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ac:	fab3 f383 	clz	r3, r3
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	f003 021f 	and.w	r2, r3, #31
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	005b      	lsls	r3, r3, #1
 800b7bc:	4413      	add	r3, r2
 800b7be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b7c0:	430b      	orrs	r3, r1
 800b7c2:	e080      	b.n	800b8c6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d107      	bne.n	800b7e0 <HAL_ADC_ConfigChannel+0x560>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	0e9b      	lsrs	r3, r3, #26
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	069b      	lsls	r3, r3, #26
 800b7da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b7de:	e015      	b.n	800b80c <HAL_ADC_ConfigChannel+0x58c>
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e8:	fa93 f3a3 	rbit	r3, r3
 800b7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800b7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d101      	bne.n	800b7fc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800b7f8:	2320      	movs	r3, #32
 800b7fa:	e003      	b.n	800b804 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800b7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7fe:	fab3 f383 	clz	r3, r3
 800b802:	b2db      	uxtb	r3, r3
 800b804:	3301      	adds	r3, #1
 800b806:	069b      	lsls	r3, r3, #26
 800b808:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b814:	2b00      	cmp	r3, #0
 800b816:	d109      	bne.n	800b82c <HAL_ADC_ConfigChannel+0x5ac>
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	0e9b      	lsrs	r3, r3, #26
 800b81e:	3301      	adds	r3, #1
 800b820:	f003 031f 	and.w	r3, r3, #31
 800b824:	2101      	movs	r1, #1
 800b826:	fa01 f303 	lsl.w	r3, r1, r3
 800b82a:	e017      	b.n	800b85c <HAL_ADC_ConfigChannel+0x5dc>
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b832:	6a3b      	ldr	r3, [r7, #32]
 800b834:	fa93 f3a3 	rbit	r3, r3
 800b838:	61fb      	str	r3, [r7, #28]
  return result;
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800b844:	2320      	movs	r3, #32
 800b846:	e003      	b.n	800b850 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800b848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84a:	fab3 f383 	clz	r3, r3
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	3301      	adds	r3, #1
 800b852:	f003 031f 	and.w	r3, r3, #31
 800b856:	2101      	movs	r1, #1
 800b858:	fa01 f303 	lsl.w	r3, r1, r3
 800b85c:	ea42 0103 	orr.w	r1, r2, r3
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10d      	bne.n	800b888 <HAL_ADC_ConfigChannel+0x608>
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	0e9b      	lsrs	r3, r3, #26
 800b872:	3301      	adds	r3, #1
 800b874:	f003 021f 	and.w	r2, r3, #31
 800b878:	4613      	mov	r3, r2
 800b87a:	005b      	lsls	r3, r3, #1
 800b87c:	4413      	add	r3, r2
 800b87e:	3b1e      	subs	r3, #30
 800b880:	051b      	lsls	r3, r3, #20
 800b882:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b886:	e01d      	b.n	800b8c4 <HAL_ADC_ConfigChannel+0x644>
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	fa93 f3a3 	rbit	r3, r3
 800b894:	613b      	str	r3, [r7, #16]
  return result;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d103      	bne.n	800b8a8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800b8a0:	2320      	movs	r3, #32
 800b8a2:	e005      	b.n	800b8b0 <HAL_ADC_ConfigChannel+0x630>
 800b8a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	fab3 f383 	clz	r3, r3
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	f003 021f 	and.w	r2, r3, #31
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	005b      	lsls	r3, r3, #1
 800b8ba:	4413      	add	r3, r2
 800b8bc:	3b1e      	subs	r3, #30
 800b8be:	051b      	lsls	r3, r3, #20
 800b8c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b8c4:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	f7ff f901 	bl	800aad2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	4b45      	ldr	r3, [pc, #276]	@ (800b9ec <HAL_ADC_ConfigChannel+0x76c>)
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d07c      	beq.n	800b9d6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b8dc:	4844      	ldr	r0, [pc, #272]	@ (800b9f0 <HAL_ADC_ConfigChannel+0x770>)
 800b8de:	f7ff f869 	bl	800a9b4 <LL_ADC_GetCommonPathInternalCh>
 800b8e2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b8e6:	4843      	ldr	r0, [pc, #268]	@ (800b9f4 <HAL_ADC_ConfigChannel+0x774>)
 800b8e8:	f7ff f9a4 	bl	800ac34 <LL_ADC_IsEnabled>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d15e      	bne.n	800b9b0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a40      	ldr	r2, [pc, #256]	@ (800b9f8 <HAL_ADC_ConfigChannel+0x778>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d127      	bne.n	800b94c <HAL_ADC_ConfigChannel+0x6cc>
 800b8fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b900:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d121      	bne.n	800b94c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a39      	ldr	r2, [pc, #228]	@ (800b9f4 <HAL_ADC_ConfigChannel+0x774>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d161      	bne.n	800b9d6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800b912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b916:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b91a:	4619      	mov	r1, r3
 800b91c:	4834      	ldr	r0, [pc, #208]	@ (800b9f0 <HAL_ADC_ConfigChannel+0x770>)
 800b91e:	f7ff f836 	bl	800a98e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b922:	4b36      	ldr	r3, [pc, #216]	@ (800b9fc <HAL_ADC_ConfigChannel+0x77c>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	099b      	lsrs	r3, r3, #6
 800b928:	4a35      	ldr	r2, [pc, #212]	@ (800ba00 <HAL_ADC_ConfigChannel+0x780>)
 800b92a:	fba2 2303 	umull	r2, r3, r2, r3
 800b92e:	099b      	lsrs	r3, r3, #6
 800b930:	1c5a      	adds	r2, r3, #1
 800b932:	4613      	mov	r3, r2
 800b934:	005b      	lsls	r3, r3, #1
 800b936:	4413      	add	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800b93c:	e002      	b.n	800b944 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3b01      	subs	r3, #1
 800b942:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1f9      	bne.n	800b93e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b94a:	e044      	b.n	800b9d6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a2c      	ldr	r2, [pc, #176]	@ (800ba04 <HAL_ADC_ConfigChannel+0x784>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d113      	bne.n	800b97e <HAL_ADC_ConfigChannel+0x6fe>
 800b956:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b95a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10d      	bne.n	800b97e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a23      	ldr	r2, [pc, #140]	@ (800b9f4 <HAL_ADC_ConfigChannel+0x774>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d134      	bne.n	800b9d6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800b96c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b970:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b974:	4619      	mov	r1, r3
 800b976:	481e      	ldr	r0, [pc, #120]	@ (800b9f0 <HAL_ADC_ConfigChannel+0x770>)
 800b978:	f7ff f809 	bl	800a98e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b97c:	e02b      	b.n	800b9d6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a21      	ldr	r2, [pc, #132]	@ (800ba08 <HAL_ADC_ConfigChannel+0x788>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d126      	bne.n	800b9d6 <HAL_ADC_ConfigChannel+0x756>
 800b988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b98c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d120      	bne.n	800b9d6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a16      	ldr	r2, [pc, #88]	@ (800b9f4 <HAL_ADC_ConfigChannel+0x774>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d11b      	bne.n	800b9d6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800b99e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b9a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	4811      	ldr	r0, [pc, #68]	@ (800b9f0 <HAL_ADC_ConfigChannel+0x770>)
 800b9aa:	f7fe fff0 	bl	800a98e <LL_ADC_SetCommonPathInternalCh>
 800b9ae:	e012      	b.n	800b9d6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9b4:	f043 0220 	orr.w	r2, r3, #32
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800b9c2:	e008      	b.n	800b9d6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9c8:	f043 0220 	orr.w	r2, r3, #32
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800b9de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	37d8      	adds	r7, #216	@ 0xd8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	80080000 	.word	0x80080000
 800b9f0:	50040300 	.word	0x50040300
 800b9f4:	50040000 	.word	0x50040000
 800b9f8:	c7520000 	.word	0xc7520000
 800b9fc:	2000007c 	.word	0x2000007c
 800ba00:	053e2d63 	.word	0x053e2d63
 800ba04:	cb840000 	.word	0xcb840000
 800ba08:	80000001 	.word	0x80000001

0800ba0c <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7ff f940 	bl	800aca8 <LL_ADC_REG_IsConversionOngoing>
 800ba28:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff f961 	bl	800acf6 <LL_ADC_INJ_IsConversionOngoing>
 800ba34:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d103      	bne.n	800ba44 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f000 8098 	beq.w	800bb74 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d02a      	beq.n	800baa8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	7e5b      	ldrb	r3, [r3, #25]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d126      	bne.n	800baa8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	7e1b      	ldrb	r3, [r3, #24]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d122      	bne.n	800baa8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800ba62:	2301      	movs	r3, #1
 800ba64:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800ba66:	e014      	b.n	800ba92 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	4a45      	ldr	r2, [pc, #276]	@ (800bb80 <ADC_ConversionStop+0x174>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d90d      	bls.n	800ba8c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba74:	f043 0210 	orr.w	r2, r3, #16
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba80:	f043 0201 	orr.w	r2, r3, #1
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e074      	b.n	800bb76 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba9c:	2b40      	cmp	r3, #64	@ 0x40
 800ba9e:	d1e3      	bne.n	800ba68 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2240      	movs	r2, #64	@ 0x40
 800baa6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d014      	beq.n	800bad8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7ff f8f8 	bl	800aca8 <LL_ADC_REG_IsConversionOngoing>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00c      	beq.n	800bad8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7ff f8c9 	bl	800ac5a <LL_ADC_IsDisableOngoing>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d104      	bne.n	800bad8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7ff f8d4 	bl	800ac80 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d014      	beq.n	800bb08 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7ff f907 	bl	800acf6 <LL_ADC_INJ_IsConversionOngoing>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00c      	beq.n	800bb08 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7ff f8b1 	bl	800ac5a <LL_ADC_IsDisableOngoing>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d104      	bne.n	800bb08 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff f8e3 	bl	800acce <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d005      	beq.n	800bb1a <ADC_ConversionStop+0x10e>
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	2b03      	cmp	r3, #3
 800bb12:	d105      	bne.n	800bb20 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800bb14:	230c      	movs	r3, #12
 800bb16:	617b      	str	r3, [r7, #20]
        break;
 800bb18:	e005      	b.n	800bb26 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800bb1a:	2308      	movs	r3, #8
 800bb1c:	617b      	str	r3, [r7, #20]
        break;
 800bb1e:	e002      	b.n	800bb26 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800bb20:	2304      	movs	r3, #4
 800bb22:	617b      	str	r3, [r7, #20]
        break;
 800bb24:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800bb26:	f7fe fec3 	bl	800a8b0 <HAL_GetTick>
 800bb2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bb2c:	e01b      	b.n	800bb66 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800bb2e:	f7fe febf 	bl	800a8b0 <HAL_GetTick>
 800bb32:	4602      	mov	r2, r0
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	2b05      	cmp	r3, #5
 800bb3a:	d914      	bls.n	800bb66 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	689a      	ldr	r2, [r3, #8]
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	4013      	ands	r3, r2
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00d      	beq.n	800bb66 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb4e:	f043 0210 	orr.w	r2, r3, #16
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb5a:	f043 0201 	orr.w	r2, r3, #1
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e007      	b.n	800bb76 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689a      	ldr	r2, [r3, #8]
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	4013      	ands	r3, r2
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1dc      	bne.n	800bb2e <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3720      	adds	r7, #32
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	a33fffff 	.word	0xa33fffff

0800bb84 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7ff f862 	bl	800ac5a <LL_ADC_IsDisableOngoing>
 800bb96:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7ff f849 	bl	800ac34 <LL_ADC_IsEnabled>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d047      	beq.n	800bc38 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d144      	bne.n	800bc38 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	f003 030d 	and.w	r3, r3, #13
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d10c      	bne.n	800bbd6 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7ff f823 	bl	800ac0c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2203      	movs	r2, #3
 800bbcc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800bbce:	f7fe fe6f 	bl	800a8b0 <HAL_GetTick>
 800bbd2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bbd4:	e029      	b.n	800bc2a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbda:	f043 0210 	orr.w	r2, r3, #16
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbe6:	f043 0201 	orr.w	r2, r3, #1
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e023      	b.n	800bc3a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800bbf2:	f7fe fe5d 	bl	800a8b0 <HAL_GetTick>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d914      	bls.n	800bc2a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00d      	beq.n	800bc2a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc12:	f043 0210 	orr.w	r2, r3, #16
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc1e:	f043 0201 	orr.w	r2, r3, #1
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e007      	b.n	800bc3a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1dc      	bne.n	800bbf2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
	...

0800bc44 <__NVIC_SetPriorityGrouping>:
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f003 0307 	and.w	r3, r3, #7
 800bc52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bc54:	4b0c      	ldr	r3, [pc, #48]	@ (800bc88 <__NVIC_SetPriorityGrouping+0x44>)
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bc5a:	68ba      	ldr	r2, [r7, #8]
 800bc5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bc60:	4013      	ands	r3, r2
 800bc62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bc6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800bc70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bc76:	4a04      	ldr	r2, [pc, #16]	@ (800bc88 <__NVIC_SetPriorityGrouping+0x44>)
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	60d3      	str	r3, [r2, #12]
}
 800bc7c:	bf00      	nop
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	e000ed00 	.word	0xe000ed00

0800bc8c <__NVIC_GetPriorityGrouping>:
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc90:	4b04      	ldr	r3, [pc, #16]	@ (800bca4 <__NVIC_GetPriorityGrouping+0x18>)
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	0a1b      	lsrs	r3, r3, #8
 800bc96:	f003 0307 	and.w	r3, r3, #7
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	e000ed00 	.word	0xe000ed00

0800bca8 <__NVIC_EnableIRQ>:
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	db0b      	blt.n	800bcd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bcba:	79fb      	ldrb	r3, [r7, #7]
 800bcbc:	f003 021f 	and.w	r2, r3, #31
 800bcc0:	4907      	ldr	r1, [pc, #28]	@ (800bce0 <__NVIC_EnableIRQ+0x38>)
 800bcc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcc6:	095b      	lsrs	r3, r3, #5
 800bcc8:	2001      	movs	r0, #1
 800bcca:	fa00 f202 	lsl.w	r2, r0, r2
 800bcce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bcd2:	bf00      	nop
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	e000e100 	.word	0xe000e100

0800bce4 <__NVIC_DisableIRQ>:
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	db12      	blt.n	800bd1c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bcf6:	79fb      	ldrb	r3, [r7, #7]
 800bcf8:	f003 021f 	and.w	r2, r3, #31
 800bcfc:	490a      	ldr	r1, [pc, #40]	@ (800bd28 <__NVIC_DisableIRQ+0x44>)
 800bcfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd02:	095b      	lsrs	r3, r3, #5
 800bd04:	2001      	movs	r0, #1
 800bd06:	fa00 f202 	lsl.w	r2, r0, r2
 800bd0a:	3320      	adds	r3, #32
 800bd0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bd10:	f3bf 8f4f 	dsb	sy
}
 800bd14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bd16:	f3bf 8f6f 	isb	sy
}
 800bd1a:	bf00      	nop
}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	e000e100 	.word	0xe000e100

0800bd2c <__NVIC_SetPriority>:
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	4603      	mov	r3, r0
 800bd34:	6039      	str	r1, [r7, #0]
 800bd36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	db0a      	blt.n	800bd56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	490c      	ldr	r1, [pc, #48]	@ (800bd78 <__NVIC_SetPriority+0x4c>)
 800bd46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd4a:	0112      	lsls	r2, r2, #4
 800bd4c:	b2d2      	uxtb	r2, r2
 800bd4e:	440b      	add	r3, r1
 800bd50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bd54:	e00a      	b.n	800bd6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	4908      	ldr	r1, [pc, #32]	@ (800bd7c <__NVIC_SetPriority+0x50>)
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	f003 030f 	and.w	r3, r3, #15
 800bd62:	3b04      	subs	r3, #4
 800bd64:	0112      	lsls	r2, r2, #4
 800bd66:	b2d2      	uxtb	r2, r2
 800bd68:	440b      	add	r3, r1
 800bd6a:	761a      	strb	r2, [r3, #24]
}
 800bd6c:	bf00      	nop
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	e000e100 	.word	0xe000e100
 800bd7c:	e000ed00 	.word	0xe000ed00

0800bd80 <NVIC_EncodePriority>:
{
 800bd80:	b480      	push	{r7}
 800bd82:	b089      	sub	sp, #36	@ 0x24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f003 0307 	and.w	r3, r3, #7
 800bd92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	f1c3 0307 	rsb	r3, r3, #7
 800bd9a:	2b04      	cmp	r3, #4
 800bd9c:	bf28      	it	cs
 800bd9e:	2304      	movcs	r3, #4
 800bda0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	3304      	adds	r3, #4
 800bda6:	2b06      	cmp	r3, #6
 800bda8:	d902      	bls.n	800bdb0 <NVIC_EncodePriority+0x30>
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	3b03      	subs	r3, #3
 800bdae:	e000      	b.n	800bdb2 <NVIC_EncodePriority+0x32>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bdb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	fa02 f303 	lsl.w	r3, r2, r3
 800bdbe:	43da      	mvns	r2, r3
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	401a      	ands	r2, r3
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bdc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd2:	43d9      	mvns	r1, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bdd8:	4313      	orrs	r3, r2
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3724      	adds	r7, #36	@ 0x24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
	...

0800bde8 <SysTick_Config>:
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bdf8:	d301      	bcc.n	800bdfe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e00f      	b.n	800be1e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bdfe:	4a0a      	ldr	r2, [pc, #40]	@ (800be28 <SysTick_Config+0x40>)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	3b01      	subs	r3, #1
 800be04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800be06:	210f      	movs	r1, #15
 800be08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be0c:	f7ff ff8e 	bl	800bd2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800be10:	4b05      	ldr	r3, [pc, #20]	@ (800be28 <SysTick_Config+0x40>)
 800be12:	2200      	movs	r2, #0
 800be14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800be16:	4b04      	ldr	r3, [pc, #16]	@ (800be28 <SysTick_Config+0x40>)
 800be18:	2207      	movs	r2, #7
 800be1a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	e000e010 	.word	0xe000e010

0800be2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff ff05 	bl	800bc44 <__NVIC_SetPriorityGrouping>
}
 800be3a:	bf00      	nop
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b086      	sub	sp, #24
 800be46:	af00      	add	r7, sp, #0
 800be48:	4603      	mov	r3, r0
 800be4a:	60b9      	str	r1, [r7, #8]
 800be4c:	607a      	str	r2, [r7, #4]
 800be4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800be50:	f7ff ff1c 	bl	800bc8c <__NVIC_GetPriorityGrouping>
 800be54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	68b9      	ldr	r1, [r7, #8]
 800be5a:	6978      	ldr	r0, [r7, #20]
 800be5c:	f7ff ff90 	bl	800bd80 <NVIC_EncodePriority>
 800be60:	4602      	mov	r2, r0
 800be62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be66:	4611      	mov	r1, r2
 800be68:	4618      	mov	r0, r3
 800be6a:	f7ff ff5f 	bl	800bd2c <__NVIC_SetPriority>
}
 800be6e:	bf00      	nop
 800be70:	3718      	adds	r7, #24
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	4603      	mov	r3, r0
 800be7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800be80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff ff0f 	bl	800bca8 <__NVIC_EnableIRQ>
}
 800be8a:	bf00      	nop
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b082      	sub	sp, #8
 800be96:	af00      	add	r7, sp, #0
 800be98:	4603      	mov	r3, r0
 800be9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800be9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7ff ff1f 	bl	800bce4 <__NVIC_DisableIRQ>
}
 800bea6:	bf00      	nop
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b082      	sub	sp, #8
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7ff ff96 	bl	800bde8 <SysTick_Config>
 800bebc:	4603      	mov	r3, r0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
	...

0800bec8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	e08e      	b.n	800bff8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	461a      	mov	r2, r3
 800bee0:	4b47      	ldr	r3, [pc, #284]	@ (800c000 <HAL_DMA_Init+0x138>)
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d80f      	bhi.n	800bf06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	461a      	mov	r2, r3
 800beec:	4b45      	ldr	r3, [pc, #276]	@ (800c004 <HAL_DMA_Init+0x13c>)
 800beee:	4413      	add	r3, r2
 800bef0:	4a45      	ldr	r2, [pc, #276]	@ (800c008 <HAL_DMA_Init+0x140>)
 800bef2:	fba2 2303 	umull	r2, r3, r2, r3
 800bef6:	091b      	lsrs	r3, r3, #4
 800bef8:	009a      	lsls	r2, r3, #2
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a42      	ldr	r2, [pc, #264]	@ (800c00c <HAL_DMA_Init+0x144>)
 800bf02:	641a      	str	r2, [r3, #64]	@ 0x40
 800bf04:	e00e      	b.n	800bf24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	4b40      	ldr	r3, [pc, #256]	@ (800c010 <HAL_DMA_Init+0x148>)
 800bf0e:	4413      	add	r3, r2
 800bf10:	4a3d      	ldr	r2, [pc, #244]	@ (800c008 <HAL_DMA_Init+0x140>)
 800bf12:	fba2 2303 	umull	r2, r3, r2, r3
 800bf16:	091b      	lsrs	r3, r3, #4
 800bf18:	009a      	lsls	r2, r3, #2
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a3c      	ldr	r2, [pc, #240]	@ (800c014 <HAL_DMA_Init+0x14c>)
 800bf22:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2202      	movs	r2, #2
 800bf28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800bf3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800bf48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f9bc 	bl	800c2f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf84:	d102      	bne.n	800bf8c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf94:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bf98:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bfa2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d010      	beq.n	800bfce <HAL_DMA_Init+0x106>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	2b04      	cmp	r3, #4
 800bfb2:	d80c      	bhi.n	800bfce <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f9db 	bl	800c370 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bfca:	605a      	str	r2, [r3, #4]
 800bfcc:	e008      	b.n	800bfe0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	40020407 	.word	0x40020407
 800c004:	bffdfff8 	.word	0xbffdfff8
 800c008:	cccccccd 	.word	0xcccccccd
 800c00c:	40020000 	.word	0x40020000
 800c010:	bffdfbf8 	.word	0xbffdfbf8
 800c014:	40020400 	.word	0x40020400

0800c018 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d101      	bne.n	800c02a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	e04f      	b.n	800c0ca <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b02      	cmp	r3, #2
 800c034:	d008      	beq.n	800c048 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2204      	movs	r2, #4
 800c03a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e040      	b.n	800c0ca <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f022 020e 	bic.w	r2, r2, #14
 800c056:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c062:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c066:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f022 0201 	bic.w	r2, r2, #1
 800c076:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c07c:	f003 021c 	and.w	r2, r3, #28
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c084:	2101      	movs	r1, #1
 800c086:	fa01 f202 	lsl.w	r2, r1, r2
 800c08a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c094:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00c      	beq.n	800c0b8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c0ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c0b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d005      	beq.n	800c0fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2204      	movs	r2, #4
 800c0f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	73fb      	strb	r3, [r7, #15]
 800c0f8:	e047      	b.n	800c18a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f022 020e 	bic.w	r2, r2, #14
 800c108:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f022 0201 	bic.w	r2, r2, #1
 800c118:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c124:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c128:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c12e:	f003 021c 	and.w	r2, r3, #28
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c136:	2101      	movs	r1, #1
 800c138:	fa01 f202 	lsl.w	r2, r1, r2
 800c13c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c146:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00c      	beq.n	800c16a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c15a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c15e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c168:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d003      	beq.n	800c18a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	4798      	blx	r3
    }
  }
  return status;
 800c18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1b0:	f003 031c 	and.w	r3, r3, #28
 800c1b4:	2204      	movs	r2, #4
 800c1b6:	409a      	lsls	r2, r3
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d026      	beq.n	800c20e <HAL_DMA_IRQHandler+0x7a>
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	f003 0304 	and.w	r3, r3, #4
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d021      	beq.n	800c20e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 0320 	and.w	r3, r3, #32
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d107      	bne.n	800c1e8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f022 0204 	bic.w	r2, r2, #4
 800c1e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1ec:	f003 021c 	and.w	r2, r3, #28
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f4:	2104      	movs	r1, #4
 800c1f6:	fa01 f202 	lsl.w	r2, r1, r2
 800c1fa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c200:	2b00      	cmp	r3, #0
 800c202:	d071      	beq.n	800c2e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c20c:	e06c      	b.n	800c2e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c212:	f003 031c 	and.w	r3, r3, #28
 800c216:	2202      	movs	r2, #2
 800c218:	409a      	lsls	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	4013      	ands	r3, r2
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d02e      	beq.n	800c280 <HAL_DMA_IRQHandler+0xec>
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	f003 0302 	and.w	r3, r3, #2
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d029      	beq.n	800c280 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f003 0320 	and.w	r3, r3, #32
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10b      	bne.n	800c252 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f022 020a 	bic.w	r2, r2, #10
 800c248:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c256:	f003 021c 	and.w	r2, r3, #28
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c25e:	2102      	movs	r1, #2
 800c260:	fa01 f202 	lsl.w	r2, r1, r2
 800c264:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c272:	2b00      	cmp	r3, #0
 800c274:	d038      	beq.n	800c2e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c27e:	e033      	b.n	800c2e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c284:	f003 031c 	and.w	r3, r3, #28
 800c288:	2208      	movs	r2, #8
 800c28a:	409a      	lsls	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4013      	ands	r3, r2
 800c290:	2b00      	cmp	r3, #0
 800c292:	d02a      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x156>
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	f003 0308 	and.w	r3, r3, #8
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d025      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f022 020e 	bic.w	r2, r2, #14
 800c2ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2b2:	f003 021c 	and.w	r2, r3, #28
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2ba:	2101      	movs	r1, #1
 800c2bc:	fa01 f202 	lsl.w	r2, r1, r2
 800c2c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d004      	beq.n	800c2ea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c2e8:	bf00      	nop
 800c2ea:	bf00      	nop
}
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	461a      	mov	r2, r3
 800c302:	4b17      	ldr	r3, [pc, #92]	@ (800c360 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c304:	429a      	cmp	r2, r3
 800c306:	d80a      	bhi.n	800c31e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c30c:	089b      	lsrs	r3, r3, #2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c314:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	6493      	str	r3, [r2, #72]	@ 0x48
 800c31c:	e007      	b.n	800c32e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c322:	089b      	lsrs	r3, r3, #2
 800c324:	009a      	lsls	r2, r3, #2
 800c326:	4b0f      	ldr	r3, [pc, #60]	@ (800c364 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c328:	4413      	add	r3, r2
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	b2db      	uxtb	r3, r3
 800c334:	3b08      	subs	r3, #8
 800c336:	4a0c      	ldr	r2, [pc, #48]	@ (800c368 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c338:	fba2 2303 	umull	r2, r3, r2, r3
 800c33c:	091b      	lsrs	r3, r3, #4
 800c33e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	4a0a      	ldr	r2, [pc, #40]	@ (800c36c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c344:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f003 031f 	and.w	r3, r3, #31
 800c34c:	2201      	movs	r2, #1
 800c34e:	409a      	lsls	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c354:	bf00      	nop
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr
 800c360:	40020407 	.word	0x40020407
 800c364:	4002081c 	.word	0x4002081c
 800c368:	cccccccd 	.word	0xcccccccd
 800c36c:	40020880 	.word	0x40020880

0800c370 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c380:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	4b0b      	ldr	r3, [pc, #44]	@ (800c3b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c386:	4413      	add	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	461a      	mov	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a09      	ldr	r2, [pc, #36]	@ (800c3b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800c394:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3b01      	subs	r3, #1
 800c39a:	f003 0303 	and.w	r3, r3, #3
 800c39e:	2201      	movs	r2, #1
 800c3a0:	409a      	lsls	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800c3a6:	bf00      	nop
 800c3a8:	3714      	adds	r7, #20
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
 800c3b2:	bf00      	nop
 800c3b4:	1000823f 	.word	0x1000823f
 800c3b8:	40020940 	.word	0x40020940

0800c3bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b087      	sub	sp, #28
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c3ca:	e14c      	b.n	800c666 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	2101      	movs	r1, #1
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c3d8:	4013      	ands	r3, r2
 800c3da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f000 813e 	beq.w	800c660 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	f003 0303 	and.w	r3, r3, #3
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d005      	beq.n	800c3fc <HAL_GPIO_Init+0x40>
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	f003 0303 	and.w	r3, r3, #3
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d130      	bne.n	800c45e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	2203      	movs	r2, #3
 800c408:	fa02 f303 	lsl.w	r3, r2, r3
 800c40c:	43db      	mvns	r3, r3
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	4013      	ands	r3, r2
 800c412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	68da      	ldr	r2, [r3, #12]
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	fa02 f303 	lsl.w	r3, r2, r3
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	4313      	orrs	r3, r2
 800c424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c432:	2201      	movs	r2, #1
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	fa02 f303 	lsl.w	r3, r2, r3
 800c43a:	43db      	mvns	r3, r3
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	4013      	ands	r3, r2
 800c440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	091b      	lsrs	r3, r3, #4
 800c448:	f003 0201 	and.w	r2, r3, #1
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	fa02 f303 	lsl.w	r3, r2, r3
 800c452:	693a      	ldr	r2, [r7, #16]
 800c454:	4313      	orrs	r3, r2
 800c456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	693a      	ldr	r2, [r7, #16]
 800c45c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f003 0303 	and.w	r3, r3, #3
 800c466:	2b03      	cmp	r3, #3
 800c468:	d017      	beq.n	800c49a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	005b      	lsls	r3, r3, #1
 800c474:	2203      	movs	r2, #3
 800c476:	fa02 f303 	lsl.w	r3, r2, r3
 800c47a:	43db      	mvns	r3, r3
 800c47c:	693a      	ldr	r2, [r7, #16]
 800c47e:	4013      	ands	r3, r2
 800c480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	689a      	ldr	r2, [r3, #8]
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	005b      	lsls	r3, r3, #1
 800c48a:	fa02 f303 	lsl.w	r3, r2, r3
 800c48e:	693a      	ldr	r2, [r7, #16]
 800c490:	4313      	orrs	r3, r2
 800c492:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	693a      	ldr	r2, [r7, #16]
 800c498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	f003 0303 	and.w	r3, r3, #3
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d123      	bne.n	800c4ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	08da      	lsrs	r2, r3, #3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	3208      	adds	r2, #8
 800c4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	f003 0307 	and.w	r3, r3, #7
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	220f      	movs	r2, #15
 800c4be:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c2:	43db      	mvns	r3, r3
 800c4c4:	693a      	ldr	r2, [r7, #16]
 800c4c6:	4013      	ands	r3, r2
 800c4c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	691a      	ldr	r2, [r3, #16]
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	f003 0307 	and.w	r3, r3, #7
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4da:	693a      	ldr	r2, [r7, #16]
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	08da      	lsrs	r2, r3, #3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	3208      	adds	r2, #8
 800c4e8:	6939      	ldr	r1, [r7, #16]
 800c4ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	005b      	lsls	r3, r3, #1
 800c4f8:	2203      	movs	r2, #3
 800c4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c4fe:	43db      	mvns	r3, r3
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	4013      	ands	r3, r2
 800c504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	f003 0203 	and.w	r2, r3, #3
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	005b      	lsls	r3, r3, #1
 800c512:	fa02 f303 	lsl.w	r3, r2, r3
 800c516:	693a      	ldr	r2, [r7, #16]
 800c518:	4313      	orrs	r3, r2
 800c51a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	693a      	ldr	r2, [r7, #16]
 800c520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 8098 	beq.w	800c660 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800c530:	4a54      	ldr	r2, [pc, #336]	@ (800c684 <HAL_GPIO_Init+0x2c8>)
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	089b      	lsrs	r3, r3, #2
 800c536:	3302      	adds	r3, #2
 800c538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c53c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	f003 0303 	and.w	r3, r3, #3
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	220f      	movs	r2, #15
 800c548:	fa02 f303 	lsl.w	r3, r2, r3
 800c54c:	43db      	mvns	r3, r3
 800c54e:	693a      	ldr	r2, [r7, #16]
 800c550:	4013      	ands	r3, r2
 800c552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c55a:	d019      	beq.n	800c590 <HAL_GPIO_Init+0x1d4>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4a4a      	ldr	r2, [pc, #296]	@ (800c688 <HAL_GPIO_Init+0x2cc>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d013      	beq.n	800c58c <HAL_GPIO_Init+0x1d0>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a49      	ldr	r2, [pc, #292]	@ (800c68c <HAL_GPIO_Init+0x2d0>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d00d      	beq.n	800c588 <HAL_GPIO_Init+0x1cc>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a48      	ldr	r2, [pc, #288]	@ (800c690 <HAL_GPIO_Init+0x2d4>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d007      	beq.n	800c584 <HAL_GPIO_Init+0x1c8>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a47      	ldr	r2, [pc, #284]	@ (800c694 <HAL_GPIO_Init+0x2d8>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d101      	bne.n	800c580 <HAL_GPIO_Init+0x1c4>
 800c57c:	2304      	movs	r3, #4
 800c57e:	e008      	b.n	800c592 <HAL_GPIO_Init+0x1d6>
 800c580:	2307      	movs	r3, #7
 800c582:	e006      	b.n	800c592 <HAL_GPIO_Init+0x1d6>
 800c584:	2303      	movs	r3, #3
 800c586:	e004      	b.n	800c592 <HAL_GPIO_Init+0x1d6>
 800c588:	2302      	movs	r3, #2
 800c58a:	e002      	b.n	800c592 <HAL_GPIO_Init+0x1d6>
 800c58c:	2301      	movs	r3, #1
 800c58e:	e000      	b.n	800c592 <HAL_GPIO_Init+0x1d6>
 800c590:	2300      	movs	r3, #0
 800c592:	697a      	ldr	r2, [r7, #20]
 800c594:	f002 0203 	and.w	r2, r2, #3
 800c598:	0092      	lsls	r2, r2, #2
 800c59a:	4093      	lsls	r3, r2
 800c59c:	693a      	ldr	r2, [r7, #16]
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c5a2:	4938      	ldr	r1, [pc, #224]	@ (800c684 <HAL_GPIO_Init+0x2c8>)
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	089b      	lsrs	r3, r3, #2
 800c5a8:	3302      	adds	r3, #2
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c5b0:	4b39      	ldr	r3, [pc, #228]	@ (800c698 <HAL_GPIO_Init+0x2dc>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	43db      	mvns	r3, r3
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	4013      	ands	r3, r2
 800c5be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d003      	beq.n	800c5d4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c5d4:	4a30      	ldr	r2, [pc, #192]	@ (800c698 <HAL_GPIO_Init+0x2dc>)
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c5da:	4b2f      	ldr	r3, [pc, #188]	@ (800c698 <HAL_GPIO_Init+0x2dc>)
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	43db      	mvns	r3, r3
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d003      	beq.n	800c5fe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c5fe:	4a26      	ldr	r2, [pc, #152]	@ (800c698 <HAL_GPIO_Init+0x2dc>)
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c604:	4b24      	ldr	r3, [pc, #144]	@ (800c698 <HAL_GPIO_Init+0x2dc>)
 800c606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c60a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	43db      	mvns	r3, r3
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	4013      	ands	r3, r2
 800c614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d003      	beq.n	800c62a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800c622:	693a      	ldr	r2, [r7, #16]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	4313      	orrs	r3, r2
 800c628:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c62a:	4a1b      	ldr	r2, [pc, #108]	@ (800c698 <HAL_GPIO_Init+0x2dc>)
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800c632:	4b19      	ldr	r3, [pc, #100]	@ (800c698 <HAL_GPIO_Init+0x2dc>)
 800c634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	43db      	mvns	r3, r3
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	4013      	ands	r3, r2
 800c642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d003      	beq.n	800c658 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	4313      	orrs	r3, r2
 800c656:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c658:	4a0f      	ldr	r2, [pc, #60]	@ (800c698 <HAL_GPIO_Init+0x2dc>)
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	3301      	adds	r3, #1
 800c664:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	fa22 f303 	lsr.w	r3, r2, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	f47f aeab 	bne.w	800c3cc <HAL_GPIO_Init+0x10>
  }
}
 800c676:	bf00      	nop
 800c678:	bf00      	nop
 800c67a:	371c      	adds	r7, #28
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr
 800c684:	40010000 	.word	0x40010000
 800c688:	48000400 	.word	0x48000400
 800c68c:	48000800 	.word	0x48000800
 800c690:	48000c00 	.word	0x48000c00
 800c694:	48001000 	.word	0x48001000
 800c698:	58000800 	.word	0x58000800

0800c69c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b087      	sub	sp, #28
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800c6aa:	e0bb      	b.n	800c824 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b4:	683a      	ldr	r2, [r7, #0]
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 80ae 	beq.w	800c81e <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800c6c2:	4a5f      	ldr	r2, [pc, #380]	@ (800c840 <HAL_GPIO_DeInit+0x1a4>)
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	089b      	lsrs	r3, r3, #2
 800c6c8:	3302      	adds	r3, #2
 800c6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	f003 0303 	and.w	r3, r3, #3
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	220f      	movs	r2, #15
 800c6da:	fa02 f303 	lsl.w	r3, r2, r3
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c6ea:	d019      	beq.n	800c720 <HAL_GPIO_DeInit+0x84>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a55      	ldr	r2, [pc, #340]	@ (800c844 <HAL_GPIO_DeInit+0x1a8>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d013      	beq.n	800c71c <HAL_GPIO_DeInit+0x80>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a54      	ldr	r2, [pc, #336]	@ (800c848 <HAL_GPIO_DeInit+0x1ac>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d00d      	beq.n	800c718 <HAL_GPIO_DeInit+0x7c>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4a53      	ldr	r2, [pc, #332]	@ (800c84c <HAL_GPIO_DeInit+0x1b0>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d007      	beq.n	800c714 <HAL_GPIO_DeInit+0x78>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	4a52      	ldr	r2, [pc, #328]	@ (800c850 <HAL_GPIO_DeInit+0x1b4>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d101      	bne.n	800c710 <HAL_GPIO_DeInit+0x74>
 800c70c:	2304      	movs	r3, #4
 800c70e:	e008      	b.n	800c722 <HAL_GPIO_DeInit+0x86>
 800c710:	2307      	movs	r3, #7
 800c712:	e006      	b.n	800c722 <HAL_GPIO_DeInit+0x86>
 800c714:	2303      	movs	r3, #3
 800c716:	e004      	b.n	800c722 <HAL_GPIO_DeInit+0x86>
 800c718:	2302      	movs	r3, #2
 800c71a:	e002      	b.n	800c722 <HAL_GPIO_DeInit+0x86>
 800c71c:	2301      	movs	r3, #1
 800c71e:	e000      	b.n	800c722 <HAL_GPIO_DeInit+0x86>
 800c720:	2300      	movs	r3, #0
 800c722:	697a      	ldr	r2, [r7, #20]
 800c724:	f002 0203 	and.w	r2, r2, #3
 800c728:	0092      	lsls	r2, r2, #2
 800c72a:	4093      	lsls	r3, r2
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d136      	bne.n	800c7a0 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c732:	4b48      	ldr	r3, [pc, #288]	@ (800c854 <HAL_GPIO_DeInit+0x1b8>)
 800c734:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	43db      	mvns	r3, r3
 800c73c:	4945      	ldr	r1, [pc, #276]	@ (800c854 <HAL_GPIO_DeInit+0x1b8>)
 800c73e:	4013      	ands	r3, r2
 800c740:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800c744:	4b43      	ldr	r3, [pc, #268]	@ (800c854 <HAL_GPIO_DeInit+0x1b8>)
 800c746:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	43db      	mvns	r3, r3
 800c74e:	4941      	ldr	r1, [pc, #260]	@ (800c854 <HAL_GPIO_DeInit+0x1b8>)
 800c750:	4013      	ands	r3, r2
 800c752:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c756:	4b3f      	ldr	r3, [pc, #252]	@ (800c854 <HAL_GPIO_DeInit+0x1b8>)
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	43db      	mvns	r3, r3
 800c75e:	493d      	ldr	r1, [pc, #244]	@ (800c854 <HAL_GPIO_DeInit+0x1b8>)
 800c760:	4013      	ands	r3, r2
 800c762:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800c764:	4b3b      	ldr	r3, [pc, #236]	@ (800c854 <HAL_GPIO_DeInit+0x1b8>)
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	43db      	mvns	r3, r3
 800c76c:	4939      	ldr	r1, [pc, #228]	@ (800c854 <HAL_GPIO_DeInit+0x1b8>)
 800c76e:	4013      	ands	r3, r2
 800c770:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f003 0303 	and.w	r3, r3, #3
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	220f      	movs	r2, #15
 800c77c:	fa02 f303 	lsl.w	r3, r2, r3
 800c780:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800c782:	4a2f      	ldr	r2, [pc, #188]	@ (800c840 <HAL_GPIO_DeInit+0x1a4>)
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	089b      	lsrs	r3, r3, #2
 800c788:	3302      	adds	r3, #2
 800c78a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	43da      	mvns	r2, r3
 800c792:	482b      	ldr	r0, [pc, #172]	@ (800c840 <HAL_GPIO_DeInit+0x1a4>)
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	089b      	lsrs	r3, r3, #2
 800c798:	400a      	ands	r2, r1
 800c79a:	3302      	adds	r3, #2
 800c79c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	005b      	lsls	r3, r3, #1
 800c7a8:	2103      	movs	r1, #3
 800c7aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c7ae:	431a      	orrs	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	08da      	lsrs	r2, r3, #3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	3208      	adds	r2, #8
 800c7bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	f003 0307 	and.w	r3, r3, #7
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	220f      	movs	r2, #15
 800c7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ce:	43db      	mvns	r3, r3
 800c7d0:	697a      	ldr	r2, [r7, #20]
 800c7d2:	08d2      	lsrs	r2, r2, #3
 800c7d4:	4019      	ands	r1, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3208      	adds	r2, #8
 800c7da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	68da      	ldr	r2, [r3, #12]
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	005b      	lsls	r3, r3, #1
 800c7e6:	2103      	movs	r1, #3
 800c7e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c7ec:	43db      	mvns	r3, r3
 800c7ee:	401a      	ands	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685a      	ldr	r2, [r3, #4]
 800c7f8:	2101      	movs	r1, #1
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	fa01 f303 	lsl.w	r3, r1, r3
 800c800:	43db      	mvns	r3, r3
 800c802:	401a      	ands	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	689a      	ldr	r2, [r3, #8]
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	005b      	lsls	r3, r3, #1
 800c810:	2103      	movs	r1, #3
 800c812:	fa01 f303 	lsl.w	r3, r1, r3
 800c816:	43db      	mvns	r3, r3
 800c818:	401a      	ands	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	3301      	adds	r3, #1
 800c822:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	fa22 f303 	lsr.w	r3, r2, r3
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f47f af3d 	bne.w	800c6ac <HAL_GPIO_DeInit+0x10>
  }
}
 800c832:	bf00      	nop
 800c834:	bf00      	nop
 800c836:	371c      	adds	r7, #28
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr
 800c840:	40010000 	.word	0x40010000
 800c844:	48000400 	.word	0x48000400
 800c848:	48000800 	.word	0x48000800
 800c84c:	48000c00 	.word	0x48000c00
 800c850:	48001000 	.word	0x48001000
 800c854:	58000800 	.word	0x58000800

0800c858 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	460b      	mov	r3, r1
 800c862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	691a      	ldr	r2, [r3, #16]
 800c868:	887b      	ldrh	r3, [r7, #2]
 800c86a:	4013      	ands	r3, r2
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d002      	beq.n	800c876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c870:	2301      	movs	r3, #1
 800c872:	73fb      	strb	r3, [r7, #15]
 800c874:	e001      	b.n	800c87a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c876:	2300      	movs	r3, #0
 800c878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	460b      	mov	r3, r1
 800c892:	807b      	strh	r3, [r7, #2]
 800c894:	4613      	mov	r3, r2
 800c896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c898:	787b      	ldrb	r3, [r7, #1]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d003      	beq.n	800c8a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c89e:	887a      	ldrh	r2, [r7, #2]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c8a4:	e002      	b.n	800c8ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c8a6:	887a      	ldrh	r2, [r7, #2]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c8ac:	bf00      	nop
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c8c2:	4b08      	ldr	r3, [pc, #32]	@ (800c8e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c8c4:	68da      	ldr	r2, [r3, #12]
 800c8c6:	88fb      	ldrh	r3, [r7, #6]
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d006      	beq.n	800c8dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c8ce:	4a05      	ldr	r2, [pc, #20]	@ (800c8e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c8d0:	88fb      	ldrh	r3, [r7, #6]
 800c8d2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c8d4:	88fb      	ldrh	r3, [r7, #6]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7f5 ffb6 	bl	8002848 <HAL_GPIO_EXTI_Callback>
  }
}
 800c8dc:	bf00      	nop
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	58000800 	.word	0x58000800

0800c8e8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800c8ee:	4b0a      	ldr	r3, [pc, #40]	@ (800c918 <HAL_HSEM_IRQHandler+0x30>)
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800c8f4:	4b08      	ldr	r3, [pc, #32]	@ (800c918 <HAL_HSEM_IRQHandler+0x30>)
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	43db      	mvns	r3, r3
 800c8fc:	4906      	ldr	r1, [pc, #24]	@ (800c918 <HAL_HSEM_IRQHandler+0x30>)
 800c8fe:	4013      	ands	r3, r2
 800c900:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800c902:	4a05      	ldr	r2, [pc, #20]	@ (800c918 <HAL_HSEM_IRQHandler+0x30>)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f807 	bl	800c91c <HAL_HSEM_FreeCallback>
}
 800c90e:	bf00      	nop
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	58001500 	.word	0x58001500

0800c91c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800c924:	bf00      	nop
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e08d      	b.n	800ca5e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d106      	bne.n	800c95c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7f4 fea8 	bl	80016ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2224      	movs	r2, #36	@ 0x24
 800c960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f022 0201 	bic.w	r2, r2, #1
 800c972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c980:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	689a      	ldr	r2, [r3, #8]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c990:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	2b01      	cmp	r3, #1
 800c998:	d107      	bne.n	800c9aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	689a      	ldr	r2, [r3, #8]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c9a6:	609a      	str	r2, [r3, #8]
 800c9a8:	e006      	b.n	800c9b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	689a      	ldr	r2, [r3, #8]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800c9b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d108      	bne.n	800c9d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9ce:	605a      	str	r2, [r3, #4]
 800c9d0:	e007      	b.n	800c9e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	685a      	ldr	r2, [r3, #4]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c9e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	6812      	ldr	r2, [r2, #0]
 800c9ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c9f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	68da      	ldr	r2, [r3, #12]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ca04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	691a      	ldr	r2, [r3, #16]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	695b      	ldr	r3, [r3, #20]
 800ca0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	699b      	ldr	r3, [r3, #24]
 800ca16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	430a      	orrs	r2, r1
 800ca1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	69d9      	ldr	r1, [r3, #28]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a1a      	ldr	r2, [r3, #32]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	430a      	orrs	r2, r1
 800ca2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f042 0201 	orr.w	r2, r2, #1
 800ca3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2220      	movs	r2, #32
 800ca4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800ca5c:	2300      	movs	r3, #0
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3708      	adds	r7, #8
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b082      	sub	sp, #8
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d101      	bne.n	800ca78 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e021      	b.n	800cabc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2224      	movs	r2, #36	@ 0x24
 800ca7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f022 0201 	bic.w	r2, r2, #1
 800ca8e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f7f4 fe83 	bl	800179c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2200      	movs	r2, #0
 800cab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b088      	sub	sp, #32
 800cac8:	af02      	add	r7, sp, #8
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	607a      	str	r2, [r7, #4]
 800cace:	461a      	mov	r2, r3
 800cad0:	460b      	mov	r3, r1
 800cad2:	817b      	strh	r3, [r7, #10]
 800cad4:	4613      	mov	r3, r2
 800cad6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	2b20      	cmp	r3, #32
 800cae2:	f040 80fd 	bne.w	800cce0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800caec:	2b01      	cmp	r3, #1
 800caee:	d101      	bne.n	800caf4 <HAL_I2C_Master_Transmit+0x30>
 800caf0:	2302      	movs	r3, #2
 800caf2:	e0f6      	b.n	800cce2 <HAL_I2C_Master_Transmit+0x21e>
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2201      	movs	r2, #1
 800caf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cafc:	f7fd fed8 	bl	800a8b0 <HAL_GetTick>
 800cb00:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	2319      	movs	r3, #25
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f000 fdcc 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d001      	beq.n	800cb1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e0e1      	b.n	800cce2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2221      	movs	r2, #33	@ 0x21
 800cb22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2210      	movs	r2, #16
 800cb2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2200      	movs	r2, #0
 800cb32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	893a      	ldrh	r2, [r7, #8]
 800cb3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2200      	movs	r2, #0
 800cb44:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	2bff      	cmp	r3, #255	@ 0xff
 800cb4e:	d906      	bls.n	800cb5e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	22ff      	movs	r2, #255	@ 0xff
 800cb54:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800cb56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cb5a:	617b      	str	r3, [r7, #20]
 800cb5c:	e007      	b.n	800cb6e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800cb68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cb6c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d024      	beq.n	800cbc0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb7a:	781a      	ldrb	r2, [r3, #0]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb86:	1c5a      	adds	r2, r3, #1
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	3b01      	subs	r3, #1
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	3301      	adds	r3, #1
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	8979      	ldrh	r1, [r7, #10]
 800cbb2:	4b4e      	ldr	r3, [pc, #312]	@ (800ccec <HAL_I2C_Master_Transmit+0x228>)
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f000 ffc7 	bl	800db4c <I2C_TransferConfig>
 800cbbe:	e066      	b.n	800cc8e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbc4:	b2da      	uxtb	r2, r3
 800cbc6:	8979      	ldrh	r1, [r7, #10]
 800cbc8:	4b48      	ldr	r3, [pc, #288]	@ (800ccec <HAL_I2C_Master_Transmit+0x228>)
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	68f8      	ldr	r0, [r7, #12]
 800cbd0:	f000 ffbc 	bl	800db4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800cbd4:	e05b      	b.n	800cc8e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbd6:	693a      	ldr	r2, [r7, #16]
 800cbd8:	6a39      	ldr	r1, [r7, #32]
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f000 fdbf 	bl	800d75e <I2C_WaitOnTXISFlagUntilTimeout>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d001      	beq.n	800cbea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e07b      	b.n	800cce2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbee:	781a      	ldrb	r2, [r3, #0]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	3b01      	subs	r3, #1
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc12:	3b01      	subs	r3, #1
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d034      	beq.n	800cc8e <HAL_I2C_Master_Transmit+0x1ca>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d130      	bne.n	800cc8e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	6a3b      	ldr	r3, [r7, #32]
 800cc32:	2200      	movs	r2, #0
 800cc34:	2180      	movs	r1, #128	@ 0x80
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f000 fd38 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e04d      	b.n	800cce2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	2bff      	cmp	r3, #255	@ 0xff
 800cc4e:	d90e      	bls.n	800cc6e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	22ff      	movs	r2, #255	@ 0xff
 800cc54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	8979      	ldrh	r1, [r7, #10]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f000 ff70 	bl	800db4c <I2C_TransferConfig>
 800cc6c:	e00f      	b.n	800cc8e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc72:	b29a      	uxth	r2, r3
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc7c:	b2da      	uxtb	r2, r3
 800cc7e:	8979      	ldrh	r1, [r7, #10]
 800cc80:	2300      	movs	r3, #0
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f000 ff5f 	bl	800db4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d19e      	bne.n	800cbd6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc98:	693a      	ldr	r2, [r7, #16]
 800cc9a:	6a39      	ldr	r1, [r7, #32]
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	f000 fda5 	bl	800d7ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e01a      	b.n	800cce2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2220      	movs	r2, #32
 800ccb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	6859      	ldr	r1, [r3, #4]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf0 <HAL_I2C_Master_Transmit+0x22c>)
 800ccc0:	400b      	ands	r3, r1
 800ccc2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	e000      	b.n	800cce2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800cce0:	2302      	movs	r3, #2
  }
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3718      	adds	r7, #24
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	80002000 	.word	0x80002000
 800ccf0:	fe00e800 	.word	0xfe00e800

0800ccf4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b088      	sub	sp, #32
 800ccf8:	af02      	add	r7, sp, #8
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	607a      	str	r2, [r7, #4]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	460b      	mov	r3, r1
 800cd02:	817b      	strh	r3, [r7, #10]
 800cd04:	4613      	mov	r3, r2
 800cd06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b20      	cmp	r3, #32
 800cd12:	f040 80db 	bne.w	800cecc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d101      	bne.n	800cd24 <HAL_I2C_Master_Receive+0x30>
 800cd20:	2302      	movs	r3, #2
 800cd22:	e0d4      	b.n	800cece <HAL_I2C_Master_Receive+0x1da>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2201      	movs	r2, #1
 800cd28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cd2c:	f7fd fdc0 	bl	800a8b0 <HAL_GetTick>
 800cd30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	2319      	movs	r3, #25
 800cd38:	2201      	movs	r2, #1
 800cd3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f000 fcb4 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e0bf      	b.n	800cece <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2222      	movs	r2, #34	@ 0x22
 800cd52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2210      	movs	r2, #16
 800cd5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2200      	movs	r2, #0
 800cd62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	893a      	ldrh	r2, [r7, #8]
 800cd6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	2bff      	cmp	r3, #255	@ 0xff
 800cd7e:	d90e      	bls.n	800cd9e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	22ff      	movs	r2, #255	@ 0xff
 800cd84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	8979      	ldrh	r1, [r7, #10]
 800cd8e:	4b52      	ldr	r3, [pc, #328]	@ (800ced8 <HAL_I2C_Master_Receive+0x1e4>)
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f000 fed8 	bl	800db4c <I2C_TransferConfig>
 800cd9c:	e06d      	b.n	800ce7a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	8979      	ldrh	r1, [r7, #10]
 800cdb0:	4b49      	ldr	r3, [pc, #292]	@ (800ced8 <HAL_I2C_Master_Receive+0x1e4>)
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f000 fec7 	bl	800db4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800cdbe:	e05c      	b.n	800ce7a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	6a39      	ldr	r1, [r7, #32]
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f000 fd55 	bl	800d874 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d001      	beq.n	800cdd4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e07c      	b.n	800cece <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdde:	b2d2      	uxtb	r2, r2
 800cde0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cde6:	1c5a      	adds	r2, r3, #1
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d034      	beq.n	800ce7a <HAL_I2C_Master_Receive+0x186>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d130      	bne.n	800ce7a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	2180      	movs	r1, #128	@ 0x80
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f000 fc42 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d001      	beq.n	800ce32 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e04d      	b.n	800cece <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	2bff      	cmp	r3, #255	@ 0xff
 800ce3a:	d90e      	bls.n	800ce5a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	22ff      	movs	r2, #255	@ 0xff
 800ce40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce46:	b2da      	uxtb	r2, r3
 800ce48:	8979      	ldrh	r1, [r7, #10]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ce52:	68f8      	ldr	r0, [r7, #12]
 800ce54:	f000 fe7a 	bl	800db4c <I2C_TransferConfig>
 800ce58:	e00f      	b.n	800ce7a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce68:	b2da      	uxtb	r2, r3
 800ce6a:	8979      	ldrh	r1, [r7, #10]
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f000 fe69 	bl	800db4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d19d      	bne.n	800cdc0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce84:	697a      	ldr	r2, [r7, #20]
 800ce86:	6a39      	ldr	r1, [r7, #32]
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f000 fcaf 	bl	800d7ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d001      	beq.n	800ce98 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	e01a      	b.n	800cece <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2220      	movs	r2, #32
 800ce9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	6859      	ldr	r1, [r3, #4]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	4b0c      	ldr	r3, [pc, #48]	@ (800cedc <HAL_I2C_Master_Receive+0x1e8>)
 800ceac:	400b      	ands	r3, r1
 800ceae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2220      	movs	r2, #32
 800ceb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800cec8:	2300      	movs	r3, #0
 800ceca:	e000      	b.n	800cece <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800cecc:	2302      	movs	r3, #2
  }
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	80002400 	.word	0x80002400
 800cedc:	fe00e800 	.word	0xfe00e800

0800cee0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b088      	sub	sp, #32
 800cee4:	af02      	add	r7, sp, #8
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	4608      	mov	r0, r1
 800ceea:	4611      	mov	r1, r2
 800ceec:	461a      	mov	r2, r3
 800ceee:	4603      	mov	r3, r0
 800cef0:	817b      	strh	r3, [r7, #10]
 800cef2:	460b      	mov	r3, r1
 800cef4:	813b      	strh	r3, [r7, #8]
 800cef6:	4613      	mov	r3, r2
 800cef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b20      	cmp	r3, #32
 800cf04:	f040 80f9 	bne.w	800d0fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf08:	6a3b      	ldr	r3, [r7, #32]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d002      	beq.n	800cf14 <HAL_I2C_Mem_Write+0x34>
 800cf0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d105      	bne.n	800cf20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e0ed      	b.n	800d0fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d101      	bne.n	800cf2e <HAL_I2C_Mem_Write+0x4e>
 800cf2a:	2302      	movs	r3, #2
 800cf2c:	e0e6      	b.n	800d0fc <HAL_I2C_Mem_Write+0x21c>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2201      	movs	r2, #1
 800cf32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cf36:	f7fd fcbb 	bl	800a8b0 <HAL_GetTick>
 800cf3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	2319      	movs	r3, #25
 800cf42:	2201      	movs	r2, #1
 800cf44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f000 fbaf 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d001      	beq.n	800cf58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800cf54:	2301      	movs	r3, #1
 800cf56:	e0d1      	b.n	800d0fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2221      	movs	r2, #33	@ 0x21
 800cf5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2240      	movs	r2, #64	@ 0x40
 800cf64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6a3a      	ldr	r2, [r7, #32]
 800cf72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cf78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cf80:	88f8      	ldrh	r0, [r7, #6]
 800cf82:	893a      	ldrh	r2, [r7, #8]
 800cf84:	8979      	ldrh	r1, [r7, #10]
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	9301      	str	r3, [sp, #4]
 800cf8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8c:	9300      	str	r3, [sp, #0]
 800cf8e:	4603      	mov	r3, r0
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f000 fabf 	bl	800d514 <I2C_RequestMemoryWrite>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d005      	beq.n	800cfa8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e0a9      	b.n	800d0fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	2bff      	cmp	r3, #255	@ 0xff
 800cfb0:	d90e      	bls.n	800cfd0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	22ff      	movs	r2, #255	@ 0xff
 800cfb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	8979      	ldrh	r1, [r7, #10]
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	f000 fdbf 	bl	800db4c <I2C_TransferConfig>
 800cfce:	e00f      	b.n	800cff0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	8979      	ldrh	r1, [r7, #10]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	9300      	str	r3, [sp, #0]
 800cfe6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f000 fdae 	bl	800db4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cff0:	697a      	ldr	r2, [r7, #20]
 800cff2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f000 fbb2 	bl	800d75e <I2C_WaitOnTXISFlagUntilTimeout>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	e07b      	b.n	800d0fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d008:	781a      	ldrb	r2, [r3, #0]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d014:	1c5a      	adds	r2, r3, #1
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d01e:	b29b      	uxth	r3, r3
 800d020:	3b01      	subs	r3, #1
 800d022:	b29a      	uxth	r2, r3
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d02c:	3b01      	subs	r3, #1
 800d02e:	b29a      	uxth	r2, r3
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d038:	b29b      	uxth	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d034      	beq.n	800d0a8 <HAL_I2C_Mem_Write+0x1c8>
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d042:	2b00      	cmp	r3, #0
 800d044:	d130      	bne.n	800d0a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d04c:	2200      	movs	r2, #0
 800d04e:	2180      	movs	r1, #128	@ 0x80
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f000 fb2b 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	e04d      	b.n	800d0fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d064:	b29b      	uxth	r3, r3
 800d066:	2bff      	cmp	r3, #255	@ 0xff
 800d068:	d90e      	bls.n	800d088 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	22ff      	movs	r2, #255	@ 0xff
 800d06e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d074:	b2da      	uxtb	r2, r3
 800d076:	8979      	ldrh	r1, [r7, #10]
 800d078:	2300      	movs	r3, #0
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f000 fd63 	bl	800db4c <I2C_TransferConfig>
 800d086:	e00f      	b.n	800d0a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d096:	b2da      	uxtb	r2, r3
 800d098:	8979      	ldrh	r1, [r7, #10]
 800d09a:	2300      	movs	r3, #0
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f000 fd52 	bl	800db4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d19e      	bne.n	800cff0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0b2:	697a      	ldr	r2, [r7, #20]
 800d0b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f000 fb98 	bl	800d7ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d001      	beq.n	800d0c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e01a      	b.n	800d0fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2220      	movs	r2, #32
 800d0cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	6859      	ldr	r1, [r3, #4]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d104 <HAL_I2C_Mem_Write+0x224>)
 800d0da:	400b      	ands	r3, r1
 800d0dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2220      	movs	r2, #32
 800d0e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	e000      	b.n	800d0fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800d0fa:	2302      	movs	r3, #2
  }
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3718      	adds	r7, #24
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	fe00e800 	.word	0xfe00e800

0800d108 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b088      	sub	sp, #32
 800d10c:	af02      	add	r7, sp, #8
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	4608      	mov	r0, r1
 800d112:	4611      	mov	r1, r2
 800d114:	461a      	mov	r2, r3
 800d116:	4603      	mov	r3, r0
 800d118:	817b      	strh	r3, [r7, #10]
 800d11a:	460b      	mov	r3, r1
 800d11c:	813b      	strh	r3, [r7, #8]
 800d11e:	4613      	mov	r3, r2
 800d120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b20      	cmp	r3, #32
 800d12c:	f040 80fd 	bne.w	800d32a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800d130:	6a3b      	ldr	r3, [r7, #32]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d002      	beq.n	800d13c <HAL_I2C_Mem_Read+0x34>
 800d136:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d105      	bne.n	800d148 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d142:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800d144:	2301      	movs	r3, #1
 800d146:	e0f1      	b.n	800d32c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d101      	bne.n	800d156 <HAL_I2C_Mem_Read+0x4e>
 800d152:	2302      	movs	r3, #2
 800d154:	e0ea      	b.n	800d32c <HAL_I2C_Mem_Read+0x224>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2201      	movs	r2, #1
 800d15a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d15e:	f7fd fba7 	bl	800a8b0 <HAL_GetTick>
 800d162:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	2319      	movs	r3, #25
 800d16a:	2201      	movs	r2, #1
 800d16c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f000 fa9b 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d001      	beq.n	800d180 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e0d5      	b.n	800d32c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2222      	movs	r2, #34	@ 0x22
 800d184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2240      	movs	r2, #64	@ 0x40
 800d18c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6a3a      	ldr	r2, [r7, #32]
 800d19a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d1a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d1a8:	88f8      	ldrh	r0, [r7, #6]
 800d1aa:	893a      	ldrh	r2, [r7, #8]
 800d1ac:	8979      	ldrh	r1, [r7, #10]
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	9301      	str	r3, [sp, #4]
 800d1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b4:	9300      	str	r3, [sp, #0]
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f000 f9ff 	bl	800d5bc <I2C_RequestMemoryRead>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d005      	beq.n	800d1d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e0ad      	b.n	800d32c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	2bff      	cmp	r3, #255	@ 0xff
 800d1d8:	d90e      	bls.n	800d1f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	22ff      	movs	r2, #255	@ 0xff
 800d1de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1e4:	b2da      	uxtb	r2, r3
 800d1e6:	8979      	ldrh	r1, [r7, #10]
 800d1e8:	4b52      	ldr	r3, [pc, #328]	@ (800d334 <HAL_I2C_Mem_Read+0x22c>)
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f000 fcab 	bl	800db4c <I2C_TransferConfig>
 800d1f6:	e00f      	b.n	800d218 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d206:	b2da      	uxtb	r2, r3
 800d208:	8979      	ldrh	r1, [r7, #10]
 800d20a:	4b4a      	ldr	r3, [pc, #296]	@ (800d334 <HAL_I2C_Mem_Read+0x22c>)
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f000 fc9a 	bl	800db4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d21e:	2200      	movs	r2, #0
 800d220:	2104      	movs	r1, #4
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f000 fa42 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d001      	beq.n	800d232 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	e07c      	b.n	800d32c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d23c:	b2d2      	uxtb	r2, r2
 800d23e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d244:	1c5a      	adds	r2, r3, #1
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d24e:	3b01      	subs	r3, #1
 800d250:	b29a      	uxth	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	3b01      	subs	r3, #1
 800d25e:	b29a      	uxth	r2, r3
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d268:	b29b      	uxth	r3, r3
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d034      	beq.n	800d2d8 <HAL_I2C_Mem_Read+0x1d0>
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d272:	2b00      	cmp	r3, #0
 800d274:	d130      	bne.n	800d2d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27c:	2200      	movs	r2, #0
 800d27e:	2180      	movs	r1, #128	@ 0x80
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f000 fa13 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	e04d      	b.n	800d32c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d294:	b29b      	uxth	r3, r3
 800d296:	2bff      	cmp	r3, #255	@ 0xff
 800d298:	d90e      	bls.n	800d2b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	22ff      	movs	r2, #255	@ 0xff
 800d29e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	8979      	ldrh	r1, [r7, #10]
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f000 fc4b 	bl	800db4c <I2C_TransferConfig>
 800d2b6:	e00f      	b.n	800d2d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	8979      	ldrh	r1, [r7, #10]
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f000 fc3a 	bl	800db4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d19a      	bne.n	800d218 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2e2:	697a      	ldr	r2, [r7, #20]
 800d2e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f000 fa80 	bl	800d7ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d001      	beq.n	800d2f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e01a      	b.n	800d32c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2220      	movs	r2, #32
 800d2fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6859      	ldr	r1, [r3, #4]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	4b0b      	ldr	r3, [pc, #44]	@ (800d338 <HAL_I2C_Mem_Read+0x230>)
 800d30a:	400b      	ands	r3, r1
 800d30c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2220      	movs	r2, #32
 800d312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2200      	movs	r2, #0
 800d31a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d326:	2300      	movs	r3, #0
 800d328:	e000      	b.n	800d32c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d32a:	2302      	movs	r3, #2
  }
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3718      	adds	r7, #24
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	80002400 	.word	0x80002400
 800d338:	fe00e800 	.word	0xfe00e800

0800d33c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08a      	sub	sp, #40	@ 0x28
 800d340:	af02      	add	r7, sp, #8
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	607a      	str	r2, [r7, #4]
 800d346:	603b      	str	r3, [r7, #0]
 800d348:	460b      	mov	r3, r1
 800d34a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800d34c:	2300      	movs	r3, #0
 800d34e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d356:	b2db      	uxtb	r3, r3
 800d358:	2b20      	cmp	r3, #32
 800d35a:	f040 80d6 	bne.w	800d50a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	699b      	ldr	r3, [r3, #24]
 800d364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d36c:	d101      	bne.n	800d372 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800d36e:	2302      	movs	r3, #2
 800d370:	e0cc      	b.n	800d50c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d101      	bne.n	800d380 <HAL_I2C_IsDeviceReady+0x44>
 800d37c:	2302      	movs	r3, #2
 800d37e:	e0c5      	b.n	800d50c <HAL_I2C_IsDeviceReady+0x1d0>
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2201      	movs	r2, #1
 800d384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2224      	movs	r2, #36	@ 0x24
 800d38c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d107      	bne.n	800d3ae <HAL_I2C_IsDeviceReady+0x72>
 800d39e:	897b      	ldrh	r3, [r7, #10]
 800d3a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d3a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d3ac:	e006      	b.n	800d3bc <HAL_I2C_IsDeviceReady+0x80>
 800d3ae:	897b      	ldrh	r3, [r7, #10]
 800d3b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d3b8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	6812      	ldr	r2, [r2, #0]
 800d3c0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800d3c2:	f7fd fa75 	bl	800a8b0 <HAL_GetTick>
 800d3c6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	699b      	ldr	r3, [r3, #24]
 800d3ce:	f003 0320 	and.w	r3, r3, #32
 800d3d2:	2b20      	cmp	r3, #32
 800d3d4:	bf0c      	ite	eq
 800d3d6:	2301      	moveq	r3, #1
 800d3d8:	2300      	movne	r3, #0
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	f003 0310 	and.w	r3, r3, #16
 800d3e8:	2b10      	cmp	r3, #16
 800d3ea:	bf0c      	ite	eq
 800d3ec:	2301      	moveq	r3, #1
 800d3ee:	2300      	movne	r3, #0
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d3f4:	e034      	b.n	800d460 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3fc:	d01a      	beq.n	800d434 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d3fe:	f7fd fa57 	bl	800a8b0 <HAL_GetTick>
 800d402:	4602      	mov	r2, r0
 800d404:	69bb      	ldr	r3, [r7, #24]
 800d406:	1ad3      	subs	r3, r2, r3
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d302      	bcc.n	800d414 <HAL_I2C_IsDeviceReady+0xd8>
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10f      	bne.n	800d434 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2220      	movs	r2, #32
 800d418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d420:	f043 0220 	orr.w	r2, r3, #32
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2200      	movs	r2, #0
 800d42c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800d430:	2301      	movs	r3, #1
 800d432:	e06b      	b.n	800d50c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	699b      	ldr	r3, [r3, #24]
 800d43a:	f003 0320 	and.w	r3, r3, #32
 800d43e:	2b20      	cmp	r3, #32
 800d440:	bf0c      	ite	eq
 800d442:	2301      	moveq	r3, #1
 800d444:	2300      	movne	r3, #0
 800d446:	b2db      	uxtb	r3, r3
 800d448:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	699b      	ldr	r3, [r3, #24]
 800d450:	f003 0310 	and.w	r3, r3, #16
 800d454:	2b10      	cmp	r3, #16
 800d456:	bf0c      	ite	eq
 800d458:	2301      	moveq	r3, #1
 800d45a:	2300      	movne	r3, #0
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d460:	7ffb      	ldrb	r3, [r7, #31]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d102      	bne.n	800d46c <HAL_I2C_IsDeviceReady+0x130>
 800d466:	7fbb      	ldrb	r3, [r7, #30]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d0c4      	beq.n	800d3f6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	f003 0310 	and.w	r3, r3, #16
 800d476:	2b10      	cmp	r3, #16
 800d478:	d01a      	beq.n	800d4b0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	2200      	movs	r2, #0
 800d482:	2120      	movs	r1, #32
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f000 f911 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d001      	beq.n	800d494 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	e03b      	b.n	800d50c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2220      	movs	r2, #32
 800d49a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2220      	movs	r2, #32
 800d4a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	e02d      	b.n	800d50c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	2120      	movs	r1, #32
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f000 f8f6 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d001      	beq.n	800d4ca <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e020      	b.n	800d50c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2210      	movs	r2, #16
 800d4d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2220      	movs	r2, #32
 800d4d8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	f63f af56 	bhi.w	800d396 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2220      	movs	r2, #32
 800d4ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4f6:	f043 0220 	orr.w	r2, r3, #32
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2200      	movs	r2, #0
 800d502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800d506:	2301      	movs	r3, #1
 800d508:	e000      	b.n	800d50c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800d50a:	2302      	movs	r3, #2
  }
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3720      	adds	r7, #32
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af02      	add	r7, sp, #8
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	4608      	mov	r0, r1
 800d51e:	4611      	mov	r1, r2
 800d520:	461a      	mov	r2, r3
 800d522:	4603      	mov	r3, r0
 800d524:	817b      	strh	r3, [r7, #10]
 800d526:	460b      	mov	r3, r1
 800d528:	813b      	strh	r3, [r7, #8]
 800d52a:	4613      	mov	r3, r2
 800d52c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d52e:	88fb      	ldrh	r3, [r7, #6]
 800d530:	b2da      	uxtb	r2, r3
 800d532:	8979      	ldrh	r1, [r7, #10]
 800d534:	4b20      	ldr	r3, [pc, #128]	@ (800d5b8 <I2C_RequestMemoryWrite+0xa4>)
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f000 fb05 	bl	800db4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d542:	69fa      	ldr	r2, [r7, #28]
 800d544:	69b9      	ldr	r1, [r7, #24]
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	f000 f909 	bl	800d75e <I2C_WaitOnTXISFlagUntilTimeout>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d001      	beq.n	800d556 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d552:	2301      	movs	r3, #1
 800d554:	e02c      	b.n	800d5b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d556:	88fb      	ldrh	r3, [r7, #6]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d105      	bne.n	800d568 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d55c:	893b      	ldrh	r3, [r7, #8]
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	629a      	str	r2, [r3, #40]	@ 0x28
 800d566:	e015      	b.n	800d594 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d568:	893b      	ldrh	r3, [r7, #8]
 800d56a:	0a1b      	lsrs	r3, r3, #8
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	b2da      	uxtb	r2, r3
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d576:	69fa      	ldr	r2, [r7, #28]
 800d578:	69b9      	ldr	r1, [r7, #24]
 800d57a:	68f8      	ldr	r0, [r7, #12]
 800d57c:	f000 f8ef 	bl	800d75e <I2C_WaitOnTXISFlagUntilTimeout>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d001      	beq.n	800d58a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e012      	b.n	800d5b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d58a:	893b      	ldrh	r3, [r7, #8]
 800d58c:	b2da      	uxtb	r2, r3
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	2200      	movs	r2, #0
 800d59c:	2180      	movs	r1, #128	@ 0x80
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f000 f884 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d001      	beq.n	800d5ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e000      	b.n	800d5b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d5ae:	2300      	movs	r3, #0
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	80002000 	.word	0x80002000

0800d5bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b086      	sub	sp, #24
 800d5c0:	af02      	add	r7, sp, #8
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	817b      	strh	r3, [r7, #10]
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	813b      	strh	r3, [r7, #8]
 800d5d2:	4613      	mov	r3, r2
 800d5d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d5d6:	88fb      	ldrh	r3, [r7, #6]
 800d5d8:	b2da      	uxtb	r2, r3
 800d5da:	8979      	ldrh	r1, [r7, #10]
 800d5dc:	4b20      	ldr	r3, [pc, #128]	@ (800d660 <I2C_RequestMemoryRead+0xa4>)
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f000 fab2 	bl	800db4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5e8:	69fa      	ldr	r2, [r7, #28]
 800d5ea:	69b9      	ldr	r1, [r7, #24]
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f000 f8b6 	bl	800d75e <I2C_WaitOnTXISFlagUntilTimeout>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e02c      	b.n	800d656 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d5fc:	88fb      	ldrh	r3, [r7, #6]
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d105      	bne.n	800d60e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d602:	893b      	ldrh	r3, [r7, #8]
 800d604:	b2da      	uxtb	r2, r3
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	629a      	str	r2, [r3, #40]	@ 0x28
 800d60c:	e015      	b.n	800d63a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d60e:	893b      	ldrh	r3, [r7, #8]
 800d610:	0a1b      	lsrs	r3, r3, #8
 800d612:	b29b      	uxth	r3, r3
 800d614:	b2da      	uxtb	r2, r3
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d61c:	69fa      	ldr	r2, [r7, #28]
 800d61e:	69b9      	ldr	r1, [r7, #24]
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f000 f89c 	bl	800d75e <I2C_WaitOnTXISFlagUntilTimeout>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d001      	beq.n	800d630 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	e012      	b.n	800d656 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d630:	893b      	ldrh	r3, [r7, #8]
 800d632:	b2da      	uxtb	r2, r3
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	2200      	movs	r2, #0
 800d642:	2140      	movs	r1, #64	@ 0x40
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f000 f831 	bl	800d6ac <I2C_WaitOnFlagUntilTimeout>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e000      	b.n	800d656 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	80002000 	.word	0x80002000

0800d664 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	699b      	ldr	r3, [r3, #24]
 800d672:	f003 0302 	and.w	r3, r3, #2
 800d676:	2b02      	cmp	r3, #2
 800d678:	d103      	bne.n	800d682 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2200      	movs	r2, #0
 800d680:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d007      	beq.n	800d6a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	699a      	ldr	r2, [r3, #24]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f042 0201 	orr.w	r2, r2, #1
 800d69e:	619a      	str	r2, [r3, #24]
  }
}
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	603b      	str	r3, [r7, #0]
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d6bc:	e03b      	b.n	800d736 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d6be:	69ba      	ldr	r2, [r7, #24]
 800d6c0:	6839      	ldr	r1, [r7, #0]
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f000 f962 	bl	800d98c <I2C_IsErrorOccurred>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d001      	beq.n	800d6d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e041      	b.n	800d756 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6d8:	d02d      	beq.n	800d736 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6da:	f7fd f8e9 	bl	800a8b0 <HAL_GetTick>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	1ad3      	subs	r3, r2, r3
 800d6e4:	683a      	ldr	r2, [r7, #0]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d302      	bcc.n	800d6f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d122      	bne.n	800d736 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	699a      	ldr	r2, [r3, #24]
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	4013      	ands	r3, r2
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	bf0c      	ite	eq
 800d700:	2301      	moveq	r3, #1
 800d702:	2300      	movne	r3, #0
 800d704:	b2db      	uxtb	r3, r3
 800d706:	461a      	mov	r2, r3
 800d708:	79fb      	ldrb	r3, [r7, #7]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d113      	bne.n	800d736 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d712:	f043 0220 	orr.w	r2, r3, #32
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2220      	movs	r2, #32
 800d71e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e00f      	b.n	800d756 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	699a      	ldr	r2, [r3, #24]
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	4013      	ands	r3, r2
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	429a      	cmp	r2, r3
 800d744:	bf0c      	ite	eq
 800d746:	2301      	moveq	r3, #1
 800d748:	2300      	movne	r3, #0
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	461a      	mov	r2, r3
 800d74e:	79fb      	ldrb	r3, [r7, #7]
 800d750:	429a      	cmp	r2, r3
 800d752:	d0b4      	beq.n	800d6be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b084      	sub	sp, #16
 800d762:	af00      	add	r7, sp, #0
 800d764:	60f8      	str	r0, [r7, #12]
 800d766:	60b9      	str	r1, [r7, #8]
 800d768:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d76a:	e033      	b.n	800d7d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	68b9      	ldr	r1, [r7, #8]
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f000 f90b 	bl	800d98c <I2C_IsErrorOccurred>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d001      	beq.n	800d780 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d77c:	2301      	movs	r3, #1
 800d77e:	e031      	b.n	800d7e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d786:	d025      	beq.n	800d7d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d788:	f7fd f892 	bl	800a8b0 <HAL_GetTick>
 800d78c:	4602      	mov	r2, r0
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	429a      	cmp	r2, r3
 800d796:	d302      	bcc.n	800d79e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d11a      	bne.n	800d7d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	699b      	ldr	r3, [r3, #24]
 800d7a4:	f003 0302 	and.w	r3, r3, #2
 800d7a8:	2b02      	cmp	r3, #2
 800d7aa:	d013      	beq.n	800d7d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7b0:	f043 0220 	orr.w	r2, r3, #32
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2220      	movs	r2, #32
 800d7bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e007      	b.n	800d7e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	f003 0302 	and.w	r3, r3, #2
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d1c4      	bne.n	800d76c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d7e2:	2300      	movs	r3, #0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d7f8:	e02f      	b.n	800d85a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	68b9      	ldr	r1, [r7, #8]
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f000 f8c4 	bl	800d98c <I2C_IsErrorOccurred>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d001      	beq.n	800d80e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d80a:	2301      	movs	r3, #1
 800d80c:	e02d      	b.n	800d86a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d80e:	f7fd f84f 	bl	800a8b0 <HAL_GetTick>
 800d812:	4602      	mov	r2, r0
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d302      	bcc.n	800d824 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d11a      	bne.n	800d85a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	699b      	ldr	r3, [r3, #24]
 800d82a:	f003 0320 	and.w	r3, r3, #32
 800d82e:	2b20      	cmp	r3, #32
 800d830:	d013      	beq.n	800d85a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d836:	f043 0220 	orr.w	r2, r3, #32
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2220      	movs	r2, #32
 800d842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2200      	movs	r2, #0
 800d84a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800d856:	2301      	movs	r3, #1
 800d858:	e007      	b.n	800d86a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	699b      	ldr	r3, [r3, #24]
 800d860:	f003 0320 	and.w	r3, r3, #32
 800d864:	2b20      	cmp	r3, #32
 800d866:	d1c8      	bne.n	800d7fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d868:	2300      	movs	r3, #0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
	...

0800d874 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b086      	sub	sp, #24
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d880:	2300      	movs	r3, #0
 800d882:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d884:	e071      	b.n	800d96a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	68b9      	ldr	r1, [r7, #8]
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	f000 f87e 	bl	800d98c <I2C_IsErrorOccurred>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d001      	beq.n	800d89a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800d896:	2301      	movs	r3, #1
 800d898:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	699b      	ldr	r3, [r3, #24]
 800d8a0:	f003 0320 	and.w	r3, r3, #32
 800d8a4:	2b20      	cmp	r3, #32
 800d8a6:	d13b      	bne.n	800d920 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800d8a8:	7dfb      	ldrb	r3, [r7, #23]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d138      	bne.n	800d920 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	f003 0304 	and.w	r3, r3, #4
 800d8b8:	2b04      	cmp	r3, #4
 800d8ba:	d105      	bne.n	800d8c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	699b      	ldr	r3, [r3, #24]
 800d8ce:	f003 0310 	and.w	r3, r3, #16
 800d8d2:	2b10      	cmp	r3, #16
 800d8d4:	d121      	bne.n	800d91a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2210      	movs	r2, #16
 800d8dc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2204      	movs	r2, #4
 800d8e2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2220      	movs	r2, #32
 800d8ea:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6859      	ldr	r1, [r3, #4]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	4b24      	ldr	r3, [pc, #144]	@ (800d988 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800d8f8:	400b      	ands	r3, r1
 800d8fa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2220      	movs	r2, #32
 800d900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800d914:	2301      	movs	r3, #1
 800d916:	75fb      	strb	r3, [r7, #23]
 800d918:	e002      	b.n	800d920 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2200      	movs	r2, #0
 800d91e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800d920:	f7fc ffc6 	bl	800a8b0 <HAL_GetTick>
 800d924:	4602      	mov	r2, r0
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d302      	bcc.n	800d936 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d119      	bne.n	800d96a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800d936:	7dfb      	ldrb	r3, [r7, #23]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d116      	bne.n	800d96a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	699b      	ldr	r3, [r3, #24]
 800d942:	f003 0304 	and.w	r3, r3, #4
 800d946:	2b04      	cmp	r3, #4
 800d948:	d00f      	beq.n	800d96a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d94e:	f043 0220 	orr.w	r2, r3, #32
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2220      	movs	r2, #32
 800d95a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2200      	movs	r2, #0
 800d962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800d966:	2301      	movs	r3, #1
 800d968:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	699b      	ldr	r3, [r3, #24]
 800d970:	f003 0304 	and.w	r3, r3, #4
 800d974:	2b04      	cmp	r3, #4
 800d976:	d002      	beq.n	800d97e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800d978:	7dfb      	ldrb	r3, [r7, #23]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d083      	beq.n	800d886 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800d97e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	fe00e800 	.word	0xfe00e800

0800d98c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b08a      	sub	sp, #40	@ 0x28
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	699b      	ldr	r3, [r3, #24]
 800d9a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	f003 0310 	and.w	r3, r3, #16
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d068      	beq.n	800da8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2210      	movs	r2, #16
 800d9be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d9c0:	e049      	b.n	800da56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9c8:	d045      	beq.n	800da56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d9ca:	f7fc ff71 	bl	800a8b0 <HAL_GetTick>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	1ad3      	subs	r3, r2, r3
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d302      	bcc.n	800d9e0 <I2C_IsErrorOccurred+0x54>
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d13a      	bne.n	800da56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d9ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d9f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da02:	d121      	bne.n	800da48 <I2C_IsErrorOccurred+0xbc>
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800da0a:	d01d      	beq.n	800da48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800da0c:	7cfb      	ldrb	r3, [r7, #19]
 800da0e:	2b20      	cmp	r3, #32
 800da10:	d01a      	beq.n	800da48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	685a      	ldr	r2, [r3, #4]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800da20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800da22:	f7fc ff45 	bl	800a8b0 <HAL_GetTick>
 800da26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800da28:	e00e      	b.n	800da48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800da2a:	f7fc ff41 	bl	800a8b0 <HAL_GetTick>
 800da2e:	4602      	mov	r2, r0
 800da30:	69fb      	ldr	r3, [r7, #28]
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	2b19      	cmp	r3, #25
 800da36:	d907      	bls.n	800da48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	f043 0320 	orr.w	r3, r3, #32
 800da3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800da46:	e006      	b.n	800da56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	f003 0320 	and.w	r3, r3, #32
 800da52:	2b20      	cmp	r3, #32
 800da54:	d1e9      	bne.n	800da2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	f003 0320 	and.w	r3, r3, #32
 800da60:	2b20      	cmp	r3, #32
 800da62:	d003      	beq.n	800da6c <I2C_IsErrorOccurred+0xe0>
 800da64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d0aa      	beq.n	800d9c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800da6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da70:	2b00      	cmp	r3, #0
 800da72:	d103      	bne.n	800da7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2220      	movs	r2, #32
 800da7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800da7c:	6a3b      	ldr	r3, [r7, #32]
 800da7e:	f043 0304 	orr.w	r3, r3, #4
 800da82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800da84:	2301      	movs	r3, #1
 800da86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	699b      	ldr	r3, [r3, #24]
 800da90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00b      	beq.n	800dab4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	f043 0301 	orr.w	r3, r3, #1
 800daa2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800daac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800daae:	2301      	movs	r3, #1
 800dab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00b      	beq.n	800dad6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800dabe:	6a3b      	ldr	r3, [r7, #32]
 800dac0:	f043 0308 	orr.w	r3, r3, #8
 800dac4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dace:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800dad0:	2301      	movs	r3, #1
 800dad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00b      	beq.n	800daf8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800dae0:	6a3b      	ldr	r3, [r7, #32]
 800dae2:	f043 0302 	orr.w	r3, r3, #2
 800dae6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800daf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800daf2:	2301      	movs	r3, #1
 800daf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800daf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d01c      	beq.n	800db3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f7ff fdaf 	bl	800d664 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	6859      	ldr	r1, [r3, #4]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	4b0d      	ldr	r3, [pc, #52]	@ (800db48 <I2C_IsErrorOccurred+0x1bc>)
 800db12:	400b      	ands	r3, r1
 800db14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800db1a:	6a3b      	ldr	r3, [r7, #32]
 800db1c:	431a      	orrs	r2, r3
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2220      	movs	r2, #32
 800db26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2200      	movs	r2, #0
 800db36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800db3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3728      	adds	r7, #40	@ 0x28
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	fe00e800 	.word	0xfe00e800

0800db4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b087      	sub	sp, #28
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	607b      	str	r3, [r7, #4]
 800db56:	460b      	mov	r3, r1
 800db58:	817b      	strh	r3, [r7, #10]
 800db5a:	4613      	mov	r3, r2
 800db5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db5e:	897b      	ldrh	r3, [r7, #10]
 800db60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800db64:	7a7b      	ldrb	r3, [r7, #9]
 800db66:	041b      	lsls	r3, r3, #16
 800db68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db72:	6a3b      	ldr	r3, [r7, #32]
 800db74:	4313      	orrs	r3, r2
 800db76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	685a      	ldr	r2, [r3, #4]
 800db82:	6a3b      	ldr	r3, [r7, #32]
 800db84:	0d5b      	lsrs	r3, r3, #21
 800db86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800db8a:	4b08      	ldr	r3, [pc, #32]	@ (800dbac <I2C_TransferConfig+0x60>)
 800db8c:	430b      	orrs	r3, r1
 800db8e:	43db      	mvns	r3, r3
 800db90:	ea02 0103 	and.w	r1, r2, r3
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	697a      	ldr	r2, [r7, #20]
 800db9a:	430a      	orrs	r2, r1
 800db9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800db9e:	bf00      	nop
 800dba0:	371c      	adds	r7, #28
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	03ff63ff 	.word	0x03ff63ff

0800dbb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	2b20      	cmp	r3, #32
 800dbc4:	d138      	bne.n	800dc38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d101      	bne.n	800dbd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	e032      	b.n	800dc3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2224      	movs	r2, #36	@ 0x24
 800dbe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f022 0201 	bic.w	r2, r2, #1
 800dbf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800dc02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	6819      	ldr	r1, [r3, #0]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	683a      	ldr	r2, [r7, #0]
 800dc10:	430a      	orrs	r2, r1
 800dc12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f042 0201 	orr.w	r2, r2, #1
 800dc22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2220      	movs	r2, #32
 800dc28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dc34:	2300      	movs	r3, #0
 800dc36:	e000      	b.n	800dc3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dc38:	2302      	movs	r3, #2
  }
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	370c      	adds	r7, #12
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr

0800dc46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800dc46:	b480      	push	{r7}
 800dc48:	b085      	sub	sp, #20
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	2b20      	cmp	r3, #32
 800dc5a:	d139      	bne.n	800dcd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d101      	bne.n	800dc6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800dc66:	2302      	movs	r3, #2
 800dc68:	e033      	b.n	800dcd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2224      	movs	r2, #36	@ 0x24
 800dc76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f022 0201 	bic.w	r2, r2, #1
 800dc88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dc98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	021b      	lsls	r3, r3, #8
 800dc9e:	68fa      	ldr	r2, [r7, #12]
 800dca0:	4313      	orrs	r3, r2
 800dca2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f042 0201 	orr.w	r2, r2, #1
 800dcba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2220      	movs	r2, #32
 800dcc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	e000      	b.n	800dcd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800dcd0:	2302      	movs	r3, #2
  }
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3714      	adds	r7, #20
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
	...

0800dce0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d01e      	beq.n	800dd30 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800dcf2:	4b13      	ldr	r3, [pc, #76]	@ (800dd40 <HAL_IPCC_Init+0x60>)
 800dcf4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d102      	bne.n	800dd08 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f7f3 fdae 	bl	8001864 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800dd08:	68b8      	ldr	r0, [r7, #8]
 800dd0a:	f000 f8f5 	bl	800def8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f000 f8c6 	bl	800deac <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800dd2e:	e001      	b.n	800dd34 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
 800dd32:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3710      	adds	r7, #16
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	58000c00 	.word	0x58000c00

0800dd44 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800dd50:	4b22      	ldr	r3, [pc, #136]	@ (800dddc <HAL_IPCC_TX_IRQHandler+0x98>)
 800dd52:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	43db      	mvns	r3, r3
 800dd5a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800dd5e:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	041b      	lsls	r3, r3, #16
 800dd66:	43db      	mvns	r3, r3
 800dd68:	697a      	ldr	r2, [r7, #20]
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800dd6e:	e02c      	b.n	800ddca <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	f003 030f 	and.w	r3, r3, #15
 800dd76:	3310      	adds	r3, #16
 800dd78:	2201      	movs	r2, #1
 800dd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd7e:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 800dd80:	697a      	ldr	r2, [r7, #20]
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	4013      	ands	r3, r2
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d01c      	beq.n	800ddc4 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	685a      	ldr	r2, [r3, #4]
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	431a      	orrs	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	3306      	adds	r3, #6
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4413      	add	r3, r2
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d009      	beq.n	800ddba <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	3306      	adds	r3, #6
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	4413      	add	r3, r2
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	6939      	ldr	r1, [r7, #16]
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	43db      	mvns	r3, r3
 800ddbe:	697a      	ldr	r2, [r7, #20]
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1cf      	bne.n	800dd70 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 800ddd0:	bf00      	nop
 800ddd2:	bf00      	nop
 800ddd4:	3718      	adds	r7, #24
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	58000c00 	.word	0x58000c00

0800dde0 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b088      	sub	sp, #32
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800dde8:	2300      	movs	r3, #0
 800ddea:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800ddec:	4b20      	ldr	r3, [pc, #128]	@ (800de70 <HAL_IPCC_RX_IRQHandler+0x90>)
 800ddee:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 800ddf0:	4b20      	ldr	r3, [pc, #128]	@ (800de74 <HAL_IPCC_RX_IRQHandler+0x94>)
 800ddf2:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	43db      	mvns	r3, r3
 800ddfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ddfe:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	69fa      	ldr	r2, [r7, #28]
 800de06:	4013      	ands	r3, r2
 800de08:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800de0a:	e029      	b.n	800de60 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	f003 030f 	and.w	r3, r3, #15
 800de12:	2201      	movs	r2, #1
 800de14:	fa02 f303 	lsl.w	r3, r2, r3
 800de18:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 800de1a:	69fa      	ldr	r2, [r7, #28]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	4013      	ands	r3, r2
 800de20:	2b00      	cmp	r3, #0
 800de22:	d01a      	beq.n	800de5a <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	685a      	ldr	r2, [r3, #4]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	431a      	orrs	r2, r3
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	4413      	add	r3, r2
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d008      	beq.n	800de50 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	4413      	add	r3, r2
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	2201      	movs	r2, #1
 800de4a:	69b9      	ldr	r1, [r7, #24]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	43db      	mvns	r3, r3
 800de54:	69fa      	ldr	r2, [r7, #28]
 800de56:	4013      	ands	r3, r2
 800de58:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	3301      	adds	r3, #1
 800de5e:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1d2      	bne.n	800de0c <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 800de66:	bf00      	nop
 800de68:	bf00      	nop
 800de6a:	3720      	adds	r7, #32
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	58000c00 	.word	0x58000c00
 800de74:	58000c10 	.word	0x58000c10

0800de78 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	4613      	mov	r3, r2
 800de84:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800de86:	bf00      	nop
 800de88:	3714      	adds	r7, #20
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800de92:	b480      	push	{r7}
 800de94:	b085      	sub	sp, #20
 800de96:	af00      	add	r7, sp, #0
 800de98:	60f8      	str	r0, [r7, #12]
 800de9a:	60b9      	str	r1, [r7, #8]
 800de9c:	4613      	mov	r3, r2
 800de9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800dea0:	bf00      	nop
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800deac:	b480      	push	{r7}
 800deae:	b085      	sub	sp, #20
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800deb4:	2300      	movs	r3, #0
 800deb6:	60fb      	str	r3, [r7, #12]
 800deb8:	e00f      	b.n	800deda <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	4413      	add	r3, r2
 800dec2:	4a0b      	ldr	r2, [pc, #44]	@ (800def0 <IPCC_SetDefaultCallbacks+0x44>)
 800dec4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	3306      	adds	r3, #6
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	4413      	add	r3, r2
 800ded0:	4a08      	ldr	r2, [pc, #32]	@ (800def4 <IPCC_SetDefaultCallbacks+0x48>)
 800ded2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	3301      	adds	r3, #1
 800ded8:	60fb      	str	r3, [r7, #12]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2b05      	cmp	r3, #5
 800dede:	d9ec      	bls.n	800deba <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800dee0:	bf00      	nop
 800dee2:	bf00      	nop
 800dee4:	3714      	adds	r7, #20
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr
 800deee:	bf00      	nop
 800def0:	0800de79 	.word	0x0800de79
 800def4:	0800de93 	.word	0x0800de93

0800def8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800df0c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	223f      	movs	r2, #63	@ 0x3f
 800df12:	609a      	str	r2, [r3, #8]
}
 800df14:	bf00      	nop
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800df28:	4b06      	ldr	r3, [pc, #24]	@ (800df44 <LL_EXTI_EnableIT_0_31+0x24>)
 800df2a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800df2e:	4905      	ldr	r1, [pc, #20]	@ (800df44 <LL_EXTI_EnableIT_0_31+0x24>)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4313      	orrs	r3, r2
 800df34:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800df38:	bf00      	nop
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	58000800 	.word	0x58000800

0800df48 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800df50:	4b07      	ldr	r3, [pc, #28]	@ (800df70 <LL_EXTI_DisableIT_0_31+0x28>)
 800df52:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	43db      	mvns	r3, r3
 800df5a:	4905      	ldr	r1, [pc, #20]	@ (800df70 <LL_EXTI_DisableIT_0_31+0x28>)
 800df5c:	4013      	ands	r3, r2
 800df5e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800df62:	bf00      	nop
 800df64:	370c      	adds	r7, #12
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	58000800 	.word	0x58000800

0800df74 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 800df7c:	4b07      	ldr	r3, [pc, #28]	@ (800df9c <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800df7e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	43db      	mvns	r3, r3
 800df86:	4905      	ldr	r1, [pc, #20]	@ (800df9c <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800df88:	4013      	ands	r3, r2
 800df8a:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
}
 800df8e:	bf00      	nop
 800df90:	370c      	adds	r7, #12
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	58000800 	.word	0x58000800

0800dfa0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800dfa8:	4b05      	ldr	r3, [pc, #20]	@ (800dfc0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	4904      	ldr	r1, [pc, #16]	@ (800dfc0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	600b      	str	r3, [r1, #0]

}
 800dfb4:	bf00      	nop
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	58000800 	.word	0x58000800

0800dfc4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800dfcc:	4b06      	ldr	r3, [pc, #24]	@ (800dfe8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	43db      	mvns	r3, r3
 800dfd4:	4904      	ldr	r1, [pc, #16]	@ (800dfe8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	600b      	str	r3, [r1, #0]

}
 800dfda:	bf00      	nop
 800dfdc:	370c      	adds	r7, #12
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	58000800 	.word	0x58000800

0800dfec <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800dff4:	4b05      	ldr	r3, [pc, #20]	@ (800e00c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	4904      	ldr	r1, [pc, #16]	@ (800e00c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4313      	orrs	r3, r2
 800dffe:	604b      	str	r3, [r1, #4]
}
 800e000:	bf00      	nop
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr
 800e00c:	58000800 	.word	0x58000800

0800e010 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800e010:	b480      	push	{r7}
 800e012:	b083      	sub	sp, #12
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800e018:	4b06      	ldr	r3, [pc, #24]	@ (800e034 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800e01a:	685a      	ldr	r2, [r3, #4]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	43db      	mvns	r3, r3
 800e020:	4904      	ldr	r1, [pc, #16]	@ (800e034 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800e022:	4013      	ands	r3, r2
 800e024:	604b      	str	r3, [r1, #4]
}
 800e026:	bf00      	nop
 800e028:	370c      	adds	r7, #12
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	58000800 	.word	0x58000800

0800e038 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800e038:	b480      	push	{r7}
 800e03a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e03c:	4b05      	ldr	r3, [pc, #20]	@ (800e054 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a04      	ldr	r2, [pc, #16]	@ (800e054 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e046:	6013      	str	r3, [r2, #0]
}
 800e048:	bf00      	nop
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	58000400 	.word	0x58000400

0800e058 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800e060:	4b1d      	ldr	r3, [pc, #116]	@ (800e0d8 <HAL_PWR_ConfigPVD+0x80>)
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	f023 020e 	bic.w	r2, r3, #14
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	491a      	ldr	r1, [pc, #104]	@ (800e0d8 <HAL_PWR_ConfigPVD+0x80>)
 800e06e:	4313      	orrs	r3, r2
 800e070:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 800e072:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e076:	f7ff ff67 	bl	800df48 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 800e07a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e07e:	f7ff ff79 	bl	800df74 <LL_C2_EXTI_DisableIT_0_31>

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800e082:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e086:	f7ff ffc3 	bl	800e010 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800e08a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e08e:	f7ff ff99 	bl	800dfc4 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d003      	beq.n	800e0a6 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800e09e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e0a2:	f7ff ff3d 	bl	800df20 <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	f003 0301 	and.w	r3, r3, #1
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d003      	beq.n	800e0ba <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800e0b2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e0b6:	f7ff ff73 	bl	800dfa0 <LL_EXTI_EnableRisingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	f003 0302 	and.w	r3, r3, #2
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d003      	beq.n	800e0ce <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800e0c6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e0ca:	f7ff ff8f 	bl	800dfec <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800e0ce:	2300      	movs	r3, #0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	58000400 	.word	0x58000400

0800e0dc <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800e0e0:	4b05      	ldr	r3, [pc, #20]	@ (800e0f8 <HAL_PWR_EnablePVD+0x1c>)
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	4a04      	ldr	r2, [pc, #16]	@ (800e0f8 <HAL_PWR_EnablePVD+0x1c>)
 800e0e6:	f043 0301 	orr.w	r3, r3, #1
 800e0ea:	6053      	str	r3, [r2, #4]
}
 800e0ec:	bf00      	nop
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	58000400 	.word	0x58000400

0800e0fc <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 800e104:	4b0c      	ldr	r3, [pc, #48]	@ (800e138 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800e106:	68da      	ldr	r2, [r3, #12]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f003 031f 	and.w	r3, r3, #31
 800e10e:	43db      	mvns	r3, r3
 800e110:	401a      	ands	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	095b      	lsrs	r3, r3, #5
 800e116:	4908      	ldr	r1, [pc, #32]	@ (800e138 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800e118:	4313      	orrs	r3, r2
 800e11a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800e11c:	4b06      	ldr	r3, [pc, #24]	@ (800e138 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800e11e:	689a      	ldr	r2, [r3, #8]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f003 031f 	and.w	r3, r3, #31
 800e126:	4904      	ldr	r1, [pc, #16]	@ (800e138 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800e128:	4313      	orrs	r3, r2
 800e12a:	608b      	str	r3, [r1, #8]
}
 800e12c:	bf00      	nop
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr
 800e138:	58000400 	.word	0x58000400

0800e13c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN4: An event on PA2   PIN wakes-up the system from Standby mode.
  *           @arg PWR_WAKEUP_PIN5: An event on PC5   PIN wakes-up the system from Standby mode.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 800e144:	4b07      	ldr	r3, [pc, #28]	@ (800e164 <HAL_PWR_DisableWakeUpPin+0x28>)
 800e146:	689a      	ldr	r2, [r3, #8]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f003 031f 	and.w	r3, r3, #31
 800e14e:	43db      	mvns	r3, r3
 800e150:	4904      	ldr	r1, [pc, #16]	@ (800e164 <HAL_PWR_DisableWakeUpPin+0x28>)
 800e152:	4013      	ands	r3, r2
 800e154:	608b      	str	r3, [r1, #8]
}
 800e156:	bf00      	nop
 800e158:	370c      	adds	r7, #12
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop
 800e164:	58000400 	.word	0x58000400

0800e168 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e168:	b480      	push	{r7}
 800e16a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800e16c:	4b04      	ldr	r3, [pc, #16]	@ (800e180 <HAL_PWREx_GetVoltageRange+0x18>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800e174:	4618      	mov	r0, r3
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	58000400 	.word	0x58000400

0800e184 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
 800e18a:	4603      	mov	r3, r0
 800e18c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800e18e:	4b11      	ldr	r3, [pc, #68]	@ (800e1d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f023 0307 	bic.w	r3, r3, #7
 800e196:	4a0f      	ldr	r2, [pc, #60]	@ (800e1d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800e198:	f043 0302 	orr.w	r3, r3, #2
 800e19c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e19e:	4b0e      	ldr	r3, [pc, #56]	@ (800e1d8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800e1a0:	691b      	ldr	r3, [r3, #16]
 800e1a2:	4a0d      	ldr	r2, [pc, #52]	@ (800e1d8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800e1a4:	f043 0304 	orr.w	r3, r3, #4
 800e1a8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800e1aa:	79fb      	ldrb	r3, [r7, #7]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d101      	bne.n	800e1b4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800e1b0:	bf30      	wfi
 800e1b2:	e002      	b.n	800e1ba <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800e1b4:	bf40      	sev
    __WFE();
 800e1b6:	bf20      	wfe
    __WFE();
 800e1b8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e1ba:	4b07      	ldr	r3, [pc, #28]	@ (800e1d8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800e1bc:	691b      	ldr	r3, [r3, #16]
 800e1be:	4a06      	ldr	r2, [pc, #24]	@ (800e1d8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800e1c0:	f023 0304 	bic.w	r3, r3, #4
 800e1c4:	6113      	str	r3, [r2, #16]
}
 800e1c6:	bf00      	nop
 800e1c8:	370c      	adds	r7, #12
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	58000400 	.word	0x58000400
 800e1d8:	e000ed00 	.word	0xe000ed00

0800e1dc <LL_RCC_HSE_IsEnabledDiv2>:
{
 800e1dc:	b480      	push	{r7}
 800e1de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800e1e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e1ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1ee:	d101      	bne.n	800e1f4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	e000      	b.n	800e1f6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800e1f4:	2300      	movs	r3, #0
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <LL_RCC_HSE_Enable>:
{
 800e200:	b480      	push	{r7}
 800e202:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800e204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e20e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e212:	6013      	str	r3, [r2, #0]
}
 800e214:	bf00      	nop
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <LL_RCC_HSE_Disable>:
{
 800e21e:	b480      	push	{r7}
 800e220:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800e222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e22c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e230:	6013      	str	r3, [r2, #0]
}
 800e232:	bf00      	nop
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <LL_RCC_HSE_IsReady>:
{
 800e23c:	b480      	push	{r7}
 800e23e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e24a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e24e:	d101      	bne.n	800e254 <LL_RCC_HSE_IsReady+0x18>
 800e250:	2301      	movs	r3, #1
 800e252:	e000      	b.n	800e256 <LL_RCC_HSE_IsReady+0x1a>
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <LL_RCC_HSI_Enable>:
{
 800e260:	b480      	push	{r7}
 800e262:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e26e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e272:	6013      	str	r3, [r2, #0]
}
 800e274:	bf00      	nop
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <LL_RCC_HSI_Disable>:
{
 800e27e:	b480      	push	{r7}
 800e280:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800e282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e28c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e290:	6013      	str	r3, [r2, #0]
}
 800e292:	bf00      	nop
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <LL_RCC_HSI_IsReady>:
{
 800e29c:	b480      	push	{r7}
 800e29e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e2a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e2aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2ae:	d101      	bne.n	800e2b4 <LL_RCC_HSI_IsReady+0x18>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e000      	b.n	800e2b6 <LL_RCC_HSI_IsReady+0x1a>
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr

0800e2c0 <LL_RCC_HSI_SetCalibTrimming>:
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800e2c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	061b      	lsls	r3, r3, #24
 800e2d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	604b      	str	r3, [r1, #4]
}
 800e2de:	bf00      	nop
 800e2e0:	370c      	adds	r7, #12
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr

0800e2ea <LL_RCC_HSI48_Enable>:
{
 800e2ea:	b480      	push	{r7}
 800e2ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e2ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e2f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e2fa:	f043 0301 	orr.w	r3, r3, #1
 800e2fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e302:	bf00      	nop
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <LL_RCC_HSI48_Disable>:
{
 800e30c:	b480      	push	{r7}
 800e30e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e318:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e31c:	f023 0301 	bic.w	r3, r3, #1
 800e320:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e324:	bf00      	nop
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr

0800e32e <LL_RCC_HSI48_IsReady>:
{
 800e32e:	b480      	push	{r7}
 800e330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800e332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e336:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e33a:	f003 0302 	and.w	r3, r3, #2
 800e33e:	2b02      	cmp	r3, #2
 800e340:	d101      	bne.n	800e346 <LL_RCC_HSI48_IsReady+0x18>
 800e342:	2301      	movs	r3, #1
 800e344:	e000      	b.n	800e348 <LL_RCC_HSI48_IsReady+0x1a>
 800e346:	2300      	movs	r3, #0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr

0800e352 <LL_RCC_LSE_Enable>:
{
 800e352:	b480      	push	{r7}
 800e354:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e35e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e362:	f043 0301 	orr.w	r3, r3, #1
 800e366:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e36a:	bf00      	nop
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <LL_RCC_LSE_Disable>:
{
 800e374:	b480      	push	{r7}
 800e376:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e380:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e384:	f023 0301 	bic.w	r3, r3, #1
 800e388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e38c:	bf00      	nop
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr

0800e396 <LL_RCC_LSE_EnableBypass>:
{
 800e396:	b480      	push	{r7}
 800e398:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e39a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e39e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e3a6:	f043 0304 	orr.w	r3, r3, #4
 800e3aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e3ae:	bf00      	nop
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <LL_RCC_LSE_DisableBypass>:
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e3bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e3c8:	f023 0304 	bic.w	r3, r3, #4
 800e3cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e3d0:	bf00      	nop
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr

0800e3da <LL_RCC_LSE_IsReady>:
{
 800e3da:	b480      	push	{r7}
 800e3dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e3de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3e6:	f003 0302 	and.w	r3, r3, #2
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	d101      	bne.n	800e3f2 <LL_RCC_LSE_IsReady+0x18>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e000      	b.n	800e3f4 <LL_RCC_LSE_IsReady+0x1a>
 800e3f2:	2300      	movs	r3, #0
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <LL_RCC_LSI1_Enable>:
{
 800e3fe:	b480      	push	{r7}
 800e400:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e40a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e40e:	f043 0301 	orr.w	r3, r3, #1
 800e412:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e416:	bf00      	nop
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <LL_RCC_LSI1_Disable>:
{
 800e420:	b480      	push	{r7}
 800e422:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e42c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e430:	f023 0301 	bic.w	r3, r3, #1
 800e434:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e438:	bf00      	nop
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr

0800e442 <LL_RCC_LSI1_IsReady>:
{
 800e442:	b480      	push	{r7}
 800e444:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e44a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e44e:	f003 0302 	and.w	r3, r3, #2
 800e452:	2b02      	cmp	r3, #2
 800e454:	d101      	bne.n	800e45a <LL_RCC_LSI1_IsReady+0x18>
 800e456:	2301      	movs	r3, #1
 800e458:	e000      	b.n	800e45c <LL_RCC_LSI1_IsReady+0x1a>
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	46bd      	mov	sp, r7
 800e460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e464:	4770      	bx	lr

0800e466 <LL_RCC_LSI2_Enable>:
{
 800e466:	b480      	push	{r7}
 800e468:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e46a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e46e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e472:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e476:	f043 0304 	orr.w	r3, r3, #4
 800e47a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e47e:	bf00      	nop
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <LL_RCC_LSI2_Disable>:
{
 800e488:	b480      	push	{r7}
 800e48a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e48c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e494:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e498:	f023 0304 	bic.w	r3, r3, #4
 800e49c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e4a0:	bf00      	nop
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <LL_RCC_LSI2_IsReady>:
{
 800e4aa:	b480      	push	{r7}
 800e4ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e4ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e4b6:	f003 0308 	and.w	r3, r3, #8
 800e4ba:	2b08      	cmp	r3, #8
 800e4bc:	d101      	bne.n	800e4c2 <LL_RCC_LSI2_IsReady+0x18>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e000      	b.n	800e4c4 <LL_RCC_LSI2_IsReady+0x1a>
 800e4c2:	2300      	movs	r3, #0
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr

0800e4ce <LL_RCC_LSI2_SetTrimming>:
{
 800e4ce:	b480      	push	{r7}
 800e4d0:	b083      	sub	sp, #12
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800e4d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e4de:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	021b      	lsls	r3, r3, #8
 800e4e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800e4f0:	bf00      	nop
 800e4f2:	370c      	adds	r7, #12
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <LL_RCC_MSI_Enable>:
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800e500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e50a:	f043 0301 	orr.w	r3, r3, #1
 800e50e:	6013      	str	r3, [r2, #0]
}
 800e510:	bf00      	nop
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr

0800e51a <LL_RCC_MSI_Disable>:
{
 800e51a:	b480      	push	{r7}
 800e51c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800e51e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e528:	f023 0301 	bic.w	r3, r3, #1
 800e52c:	6013      	str	r3, [r2, #0]
}
 800e52e:	bf00      	nop
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <LL_RCC_MSI_IsReady>:
{
 800e538:	b480      	push	{r7}
 800e53a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e53c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f003 0302 	and.w	r3, r3, #2
 800e546:	2b02      	cmp	r3, #2
 800e548:	d101      	bne.n	800e54e <LL_RCC_MSI_IsReady+0x16>
 800e54a:	2301      	movs	r3, #1
 800e54c:	e000      	b.n	800e550 <LL_RCC_MSI_IsReady+0x18>
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr

0800e55a <LL_RCC_MSI_SetRange>:
{
 800e55a:	b480      	push	{r7}
 800e55c:	b083      	sub	sp, #12
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800e562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e56c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4313      	orrs	r3, r2
 800e574:	600b      	str	r3, [r1, #0]
}
 800e576:	bf00      	nop
 800e578:	370c      	adds	r7, #12
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr

0800e582 <LL_RCC_MSI_GetRange>:
{
 800e582:	b480      	push	{r7}
 800e584:	b083      	sub	sp, #12
 800e586:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800e588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e592:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2bb0      	cmp	r3, #176	@ 0xb0
 800e598:	d901      	bls.n	800e59e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800e59a:	23b0      	movs	r3, #176	@ 0xb0
 800e59c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800e59e:	687b      	ldr	r3, [r7, #4]
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <LL_RCC_MSI_SetCalibTrimming>:
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800e5b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	021b      	lsls	r3, r3, #8
 800e5c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	604b      	str	r3, [r1, #4]
}
 800e5ca:	bf00      	nop
 800e5cc:	370c      	adds	r7, #12
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr

0800e5d6 <LL_RCC_SetSysClkSource>:
{
 800e5d6:	b480      	push	{r7}
 800e5d8:	b083      	sub	sp, #12
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800e5de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5e2:	689b      	ldr	r3, [r3, #8]
 800e5e4:	f023 0203 	bic.w	r2, r3, #3
 800e5e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	608b      	str	r3, [r1, #8]
}
 800e5f2:	bf00      	nop
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <LL_RCC_GetSysClkSource>:
{
 800e5fe:	b480      	push	{r7}
 800e600:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	f003 030c 	and.w	r3, r3, #12
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr

0800e616 <LL_RCC_SetAHBPrescaler>:
{
 800e616:	b480      	push	{r7}
 800e618:	b083      	sub	sp, #12
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800e61e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e628:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4313      	orrs	r3, r2
 800e630:	608b      	str	r3, [r1, #8]
}
 800e632:	bf00      	nop
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr

0800e63e <LL_C2_RCC_SetAHBPrescaler>:
{
 800e63e:	b480      	push	{r7}
 800e640:	b083      	sub	sp, #12
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800e646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e64a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e64e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e652:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4313      	orrs	r3, r2
 800e65a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e65e:	bf00      	nop
 800e660:	370c      	adds	r7, #12
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr

0800e66a <LL_RCC_SetAHB4Prescaler>:
{
 800e66a:	b480      	push	{r7}
 800e66c:	b083      	sub	sp, #12
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800e672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e676:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e67a:	f023 020f 	bic.w	r2, r3, #15
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	091b      	lsrs	r3, r3, #4
 800e682:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e686:	4313      	orrs	r3, r2
 800e688:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e68c:	bf00      	nop
 800e68e:	370c      	adds	r7, #12
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <LL_RCC_SetAPB1Prescaler>:
{
 800e698:	b480      	push	{r7}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800e6a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6a4:	689b      	ldr	r3, [r3, #8]
 800e6a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e6aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	608b      	str	r3, [r1, #8]
}
 800e6b4:	bf00      	nop
 800e6b6:	370c      	adds	r7, #12
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <LL_RCC_SetAPB2Prescaler>:
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800e6c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6cc:	689b      	ldr	r3, [r3, #8]
 800e6ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e6d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	608b      	str	r3, [r1, #8]
}
 800e6dc:	bf00      	nop
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr

0800e6e8 <LL_RCC_GetAHBPrescaler>:
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e6ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6f0:	689b      	ldr	r3, [r3, #8]
 800e6f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <LL_RCC_GetAHB4Prescaler>:
{
 800e700:	b480      	push	{r7}
 800e702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800e704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e708:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e70c:	011b      	lsls	r3, r3, #4
 800e70e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e712:	4618      	mov	r0, r3
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <LL_RCC_GetAPB1Prescaler>:
{
 800e71c:	b480      	push	{r7}
 800e71e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800e720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <LL_RCC_GetAPB2Prescaler>:
{
 800e734:	b480      	push	{r7}
 800e736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800e738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800e742:	4618      	mov	r0, r3
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800e74c:	b480      	push	{r7}
 800e74e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800e750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e75a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e75e:	6013      	str	r3, [r2, #0]
}
 800e760:	bf00      	nop
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800e76a:	b480      	push	{r7}
 800e76c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800e76e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e778:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e77c:	6013      	str	r3, [r2, #0]
}
 800e77e:	bf00      	nop
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800e788:	b480      	push	{r7}
 800e78a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800e78c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e796:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e79a:	d101      	bne.n	800e7a0 <LL_RCC_PLL_IsReady+0x18>
 800e79c:	2301      	movs	r3, #1
 800e79e:	e000      	b.n	800e7a2 <LL_RCC_PLL_IsReady+0x1a>
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e7b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	0a1b      	lsrs	r3, r3, #8
 800e7b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr

0800e7c6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e7c6:	b480      	push	{r7}
 800e7c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e7ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7ce:	68db      	ldr	r3, [r3, #12]
 800e7d0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e7de:	b480      	push	{r7}
 800e7e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e7e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr

0800e7f6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e7f6:	b480      	push	{r7}
 800e7f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e7fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	f003 0303 	and.w	r3, r3, #3
}
 800e804:	4618      	mov	r0, r3
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr

0800e80e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800e80e:	b480      	push	{r7}
 800e810:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800e812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e816:	689b      	ldr	r3, [r3, #8]
 800e818:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e81c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e820:	d101      	bne.n	800e826 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800e822:	2301      	movs	r3, #1
 800e824:	e000      	b.n	800e828 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800e826:	2300      	movs	r3, #0
}
 800e828:	4618      	mov	r0, r3
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr

0800e832 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800e832:	b480      	push	{r7}
 800e834:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800e836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e83a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e83e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e846:	d101      	bne.n	800e84c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800e848:	2301      	movs	r3, #1
 800e84a:	e000      	b.n	800e84e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800e858:	b480      	push	{r7}
 800e85a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800e85c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e860:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e86c:	d101      	bne.n	800e872 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800e86e:	2301      	movs	r3, #1
 800e870:	e000      	b.n	800e874 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800e872:	2300      	movs	r3, #0
}
 800e874:	4618      	mov	r0, r3
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr

0800e87e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800e87e:	b480      	push	{r7}
 800e880:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800e882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e88c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e890:	d101      	bne.n	800e896 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800e892:	2301      	movs	r3, #1
 800e894:	e000      	b.n	800e898 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800e8a2:	b480      	push	{r7}
 800e8a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800e8a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8aa:	689b      	ldr	r3, [r3, #8]
 800e8ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e8b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e8b4:	d101      	bne.n	800e8ba <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e000      	b.n	800e8bc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr
	...

0800e8c8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e8c8:	b590      	push	{r4, r7, lr}
 800e8ca:	b08d      	sub	sp, #52	@ 0x34
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d101      	bne.n	800e8da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	e363      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f003 0320 	and.w	r3, r3, #32
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	f000 808d 	beq.w	800ea02 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e8e8:	f7ff fe89 	bl	800e5fe <LL_RCC_GetSysClkSource>
 800e8ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e8ee:	f7ff ff82 	bl	800e7f6 <LL_RCC_PLL_GetMainSource>
 800e8f2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800e8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d005      	beq.n	800e906 <HAL_RCC_OscConfig+0x3e>
 800e8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8fc:	2b0c      	cmp	r3, #12
 800e8fe:	d147      	bne.n	800e990 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800e900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e902:	2b01      	cmp	r3, #1
 800e904:	d144      	bne.n	800e990 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	69db      	ldr	r3, [r3, #28]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d101      	bne.n	800e912 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800e90e:	2301      	movs	r3, #1
 800e910:	e347      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e916:	f7ff fe34 	bl	800e582 <LL_RCC_MSI_GetRange>
 800e91a:	4603      	mov	r3, r0
 800e91c:	429c      	cmp	r4, r3
 800e91e:	d914      	bls.n	800e94a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e924:	4618      	mov	r0, r3
 800e926:	f000 fd2f 	bl	800f388 <RCC_SetFlashLatencyFromMSIRange>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d001      	beq.n	800e934 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800e930:	2301      	movs	r3, #1
 800e932:	e336      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e938:	4618      	mov	r0, r3
 800e93a:	f7ff fe0e 	bl	800e55a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6a1b      	ldr	r3, [r3, #32]
 800e942:	4618      	mov	r0, r3
 800e944:	f7ff fe32 	bl	800e5ac <LL_RCC_MSI_SetCalibTrimming>
 800e948:	e013      	b.n	800e972 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e94e:	4618      	mov	r0, r3
 800e950:	f7ff fe03 	bl	800e55a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6a1b      	ldr	r3, [r3, #32]
 800e958:	4618      	mov	r0, r3
 800e95a:	f7ff fe27 	bl	800e5ac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e962:	4618      	mov	r0, r3
 800e964:	f000 fd10 	bl	800f388 <RCC_SetFlashLatencyFromMSIRange>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d001      	beq.n	800e972 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800e96e:	2301      	movs	r3, #1
 800e970:	e317      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e972:	f000 fcc9 	bl	800f308 <HAL_RCC_GetHCLKFreq>
 800e976:	4603      	mov	r3, r0
 800e978:	4aa4      	ldr	r2, [pc, #656]	@ (800ec0c <HAL_RCC_OscConfig+0x344>)
 800e97a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e97c:	4ba4      	ldr	r3, [pc, #656]	@ (800ec10 <HAL_RCC_OscConfig+0x348>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4618      	mov	r0, r3
 800e982:	f7fb ff47 	bl	800a814 <HAL_InitTick>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d039      	beq.n	800ea00 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800e98c:	2301      	movs	r3, #1
 800e98e:	e308      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	69db      	ldr	r3, [r3, #28]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d01e      	beq.n	800e9d6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e998:	f7ff fdb0 	bl	800e4fc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e99c:	f7fb ff88 	bl	800a8b0 <HAL_GetTick>
 800e9a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800e9a2:	e008      	b.n	800e9b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e9a4:	f7fb ff84 	bl	800a8b0 <HAL_GetTick>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ac:	1ad3      	subs	r3, r2, r3
 800e9ae:	2b02      	cmp	r3, #2
 800e9b0:	d901      	bls.n	800e9b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e9b2:	2303      	movs	r3, #3
 800e9b4:	e2f5      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800e9b6:	f7ff fdbf 	bl	800e538 <LL_RCC_MSI_IsReady>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d0f1      	beq.n	800e9a4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7ff fdc8 	bl	800e55a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6a1b      	ldr	r3, [r3, #32]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7ff fdec 	bl	800e5ac <LL_RCC_MSI_SetCalibTrimming>
 800e9d4:	e015      	b.n	800ea02 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e9d6:	f7ff fda0 	bl	800e51a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e9da:	f7fb ff69 	bl	800a8b0 <HAL_GetTick>
 800e9de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800e9e0:	e008      	b.n	800e9f4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e9e2:	f7fb ff65 	bl	800a8b0 <HAL_GetTick>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ea:	1ad3      	subs	r3, r2, r3
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	d901      	bls.n	800e9f4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800e9f0:	2303      	movs	r3, #3
 800e9f2:	e2d6      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800e9f4:	f7ff fda0 	bl	800e538 <LL_RCC_MSI_IsReady>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1f1      	bne.n	800e9e2 <HAL_RCC_OscConfig+0x11a>
 800e9fe:	e000      	b.n	800ea02 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ea00:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f003 0301 	and.w	r3, r3, #1
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d047      	beq.n	800ea9e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ea0e:	f7ff fdf6 	bl	800e5fe <LL_RCC_GetSysClkSource>
 800ea12:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ea14:	f7ff feef 	bl	800e7f6 <LL_RCC_PLL_GetMainSource>
 800ea18:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800ea1a:	6a3b      	ldr	r3, [r7, #32]
 800ea1c:	2b08      	cmp	r3, #8
 800ea1e:	d005      	beq.n	800ea2c <HAL_RCC_OscConfig+0x164>
 800ea20:	6a3b      	ldr	r3, [r7, #32]
 800ea22:	2b0c      	cmp	r3, #12
 800ea24:	d108      	bne.n	800ea38 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	2b03      	cmp	r3, #3
 800ea2a:	d105      	bne.n	800ea38 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d134      	bne.n	800ea9e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800ea34:	2301      	movs	r3, #1
 800ea36:	e2b4      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea40:	d102      	bne.n	800ea48 <HAL_RCC_OscConfig+0x180>
 800ea42:	f7ff fbdd 	bl	800e200 <LL_RCC_HSE_Enable>
 800ea46:	e001      	b.n	800ea4c <HAL_RCC_OscConfig+0x184>
 800ea48:	f7ff fbe9 	bl	800e21e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d012      	beq.n	800ea7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea54:	f7fb ff2c 	bl	800a8b0 <HAL_GetTick>
 800ea58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800ea5a:	e008      	b.n	800ea6e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea5c:	f7fb ff28 	bl	800a8b0 <HAL_GetTick>
 800ea60:	4602      	mov	r2, r0
 800ea62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	2b64      	cmp	r3, #100	@ 0x64
 800ea68:	d901      	bls.n	800ea6e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	e299      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800ea6e:	f7ff fbe5 	bl	800e23c <LL_RCC_HSE_IsReady>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d0f1      	beq.n	800ea5c <HAL_RCC_OscConfig+0x194>
 800ea78:	e011      	b.n	800ea9e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea7a:	f7fb ff19 	bl	800a8b0 <HAL_GetTick>
 800ea7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800ea80:	e008      	b.n	800ea94 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea82:	f7fb ff15 	bl	800a8b0 <HAL_GetTick>
 800ea86:	4602      	mov	r2, r0
 800ea88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8a:	1ad3      	subs	r3, r2, r3
 800ea8c:	2b64      	cmp	r3, #100	@ 0x64
 800ea8e:	d901      	bls.n	800ea94 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ea90:	2303      	movs	r3, #3
 800ea92:	e286      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800ea94:	f7ff fbd2 	bl	800e23c <LL_RCC_HSE_IsReady>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d1f1      	bne.n	800ea82 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f003 0302 	and.w	r3, r3, #2
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d04c      	beq.n	800eb44 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eaaa:	f7ff fda8 	bl	800e5fe <LL_RCC_GetSysClkSource>
 800eaae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800eab0:	f7ff fea1 	bl	800e7f6 <LL_RCC_PLL_GetMainSource>
 800eab4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	2b04      	cmp	r3, #4
 800eaba:	d005      	beq.n	800eac8 <HAL_RCC_OscConfig+0x200>
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	2b0c      	cmp	r3, #12
 800eac0:	d10e      	bne.n	800eae0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	2b02      	cmp	r3, #2
 800eac6:	d10b      	bne.n	800eae0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d101      	bne.n	800ead4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800ead0:	2301      	movs	r3, #1
 800ead2:	e266      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	691b      	ldr	r3, [r3, #16]
 800ead8:	4618      	mov	r0, r3
 800eada:	f7ff fbf1 	bl	800e2c0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800eade:	e031      	b.n	800eb44 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d019      	beq.n	800eb1c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eae8:	f7ff fbba 	bl	800e260 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eaec:	f7fb fee0 	bl	800a8b0 <HAL_GetTick>
 800eaf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800eaf2:	e008      	b.n	800eb06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eaf4:	f7fb fedc 	bl	800a8b0 <HAL_GetTick>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	2b02      	cmp	r3, #2
 800eb00:	d901      	bls.n	800eb06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800eb02:	2303      	movs	r3, #3
 800eb04:	e24d      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800eb06:	f7ff fbc9 	bl	800e29c <LL_RCC_HSI_IsReady>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d0f1      	beq.n	800eaf4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	691b      	ldr	r3, [r3, #16]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7ff fbd3 	bl	800e2c0 <LL_RCC_HSI_SetCalibTrimming>
 800eb1a:	e013      	b.n	800eb44 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800eb1c:	f7ff fbaf 	bl	800e27e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb20:	f7fb fec6 	bl	800a8b0 <HAL_GetTick>
 800eb24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800eb26:	e008      	b.n	800eb3a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eb28:	f7fb fec2 	bl	800a8b0 <HAL_GetTick>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	2b02      	cmp	r3, #2
 800eb34:	d901      	bls.n	800eb3a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800eb36:	2303      	movs	r3, #3
 800eb38:	e233      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800eb3a:	f7ff fbaf 	bl	800e29c <LL_RCC_HSI_IsReady>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1f1      	bne.n	800eb28 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f003 0308 	and.w	r3, r3, #8
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d106      	bne.n	800eb5e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f000 80a3 	beq.w	800eca4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d076      	beq.n	800ec54 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f003 0310 	and.w	r3, r3, #16
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d046      	beq.n	800ec00 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800eb72:	f7ff fc66 	bl	800e442 <LL_RCC_LSI1_IsReady>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d113      	bne.n	800eba4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800eb7c:	f7ff fc3f 	bl	800e3fe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800eb80:	f7fb fe96 	bl	800a8b0 <HAL_GetTick>
 800eb84:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800eb86:	e008      	b.n	800eb9a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800eb88:	f7fb fe92 	bl	800a8b0 <HAL_GetTick>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	d901      	bls.n	800eb9a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800eb96:	2303      	movs	r3, #3
 800eb98:	e203      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800eb9a:	f7ff fc52 	bl	800e442 <LL_RCC_LSI1_IsReady>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d0f1      	beq.n	800eb88 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800eba4:	f7ff fc5f 	bl	800e466 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eba8:	f7fb fe82 	bl	800a8b0 <HAL_GetTick>
 800ebac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ebae:	e008      	b.n	800ebc2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ebb0:	f7fb fe7e 	bl	800a8b0 <HAL_GetTick>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	2b03      	cmp	r3, #3
 800ebbc:	d901      	bls.n	800ebc2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	e1ef      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ebc2:	f7ff fc72 	bl	800e4aa <LL_RCC_LSI2_IsReady>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d0f1      	beq.n	800ebb0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7ff fc7c 	bl	800e4ce <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ebd6:	f7ff fc23 	bl	800e420 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebda:	f7fb fe69 	bl	800a8b0 <HAL_GetTick>
 800ebde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ebe0:	e008      	b.n	800ebf4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ebe2:	f7fb fe65 	bl	800a8b0 <HAL_GetTick>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebea:	1ad3      	subs	r3, r2, r3
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d901      	bls.n	800ebf4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	e1d6      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ebf4:	f7ff fc25 	bl	800e442 <LL_RCC_LSI1_IsReady>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1f1      	bne.n	800ebe2 <HAL_RCC_OscConfig+0x31a>
 800ebfe:	e051      	b.n	800eca4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ec00:	f7ff fbfd 	bl	800e3fe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec04:	f7fb fe54 	bl	800a8b0 <HAL_GetTick>
 800ec08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ec0a:	e00c      	b.n	800ec26 <HAL_RCC_OscConfig+0x35e>
 800ec0c:	2000007c 	.word	0x2000007c
 800ec10:	20000090 	.word	0x20000090
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ec14:	f7fb fe4c 	bl	800a8b0 <HAL_GetTick>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec1c:	1ad3      	subs	r3, r2, r3
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d901      	bls.n	800ec26 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ec22:	2303      	movs	r3, #3
 800ec24:	e1bd      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ec26:	f7ff fc0c 	bl	800e442 <LL_RCC_LSI1_IsReady>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d0f1      	beq.n	800ec14 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ec30:	f7ff fc2a 	bl	800e488 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ec34:	e008      	b.n	800ec48 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ec36:	f7fb fe3b 	bl	800a8b0 <HAL_GetTick>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3e:	1ad3      	subs	r3, r2, r3
 800ec40:	2b03      	cmp	r3, #3
 800ec42:	d901      	bls.n	800ec48 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800ec44:	2303      	movs	r3, #3
 800ec46:	e1ac      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ec48:	f7ff fc2f 	bl	800e4aa <LL_RCC_LSI2_IsReady>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1f1      	bne.n	800ec36 <HAL_RCC_OscConfig+0x36e>
 800ec52:	e027      	b.n	800eca4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ec54:	f7ff fc18 	bl	800e488 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec58:	f7fb fe2a 	bl	800a8b0 <HAL_GetTick>
 800ec5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ec5e:	e008      	b.n	800ec72 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ec60:	f7fb fe26 	bl	800a8b0 <HAL_GetTick>
 800ec64:	4602      	mov	r2, r0
 800ec66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	2b03      	cmp	r3, #3
 800ec6c:	d901      	bls.n	800ec72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ec6e:	2303      	movs	r3, #3
 800ec70:	e197      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ec72:	f7ff fc1a 	bl	800e4aa <LL_RCC_LSI2_IsReady>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1f1      	bne.n	800ec60 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800ec7c:	f7ff fbd0 	bl	800e420 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec80:	f7fb fe16 	bl	800a8b0 <HAL_GetTick>
 800ec84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ec86:	e008      	b.n	800ec9a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ec88:	f7fb fe12 	bl	800a8b0 <HAL_GetTick>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	2b02      	cmp	r3, #2
 800ec94:	d901      	bls.n	800ec9a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	e183      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ec9a:	f7ff fbd2 	bl	800e442 <LL_RCC_LSI1_IsReady>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1f1      	bne.n	800ec88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f003 0304 	and.w	r3, r3, #4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d05b      	beq.n	800ed68 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ecb0:	4ba7      	ldr	r3, [pc, #668]	@ (800ef50 <HAL_RCC_OscConfig+0x688>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d114      	bne.n	800ece6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ecbc:	f7ff f9bc 	bl	800e038 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ecc0:	f7fb fdf6 	bl	800a8b0 <HAL_GetTick>
 800ecc4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ecc6:	e008      	b.n	800ecda <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ecc8:	f7fb fdf2 	bl	800a8b0 <HAL_GetTick>
 800eccc:	4602      	mov	r2, r0
 800ecce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	d901      	bls.n	800ecda <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ecd6:	2303      	movs	r3, #3
 800ecd8:	e163      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ecda:	4b9d      	ldr	r3, [pc, #628]	@ (800ef50 <HAL_RCC_OscConfig+0x688>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d0f0      	beq.n	800ecc8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d102      	bne.n	800ecf4 <HAL_RCC_OscConfig+0x42c>
 800ecee:	f7ff fb30 	bl	800e352 <LL_RCC_LSE_Enable>
 800ecf2:	e00c      	b.n	800ed0e <HAL_RCC_OscConfig+0x446>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	689b      	ldr	r3, [r3, #8]
 800ecf8:	2b05      	cmp	r3, #5
 800ecfa:	d104      	bne.n	800ed06 <HAL_RCC_OscConfig+0x43e>
 800ecfc:	f7ff fb4b 	bl	800e396 <LL_RCC_LSE_EnableBypass>
 800ed00:	f7ff fb27 	bl	800e352 <LL_RCC_LSE_Enable>
 800ed04:	e003      	b.n	800ed0e <HAL_RCC_OscConfig+0x446>
 800ed06:	f7ff fb35 	bl	800e374 <LL_RCC_LSE_Disable>
 800ed0a:	f7ff fb55 	bl	800e3b8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d014      	beq.n	800ed40 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed16:	f7fb fdcb 	bl	800a8b0 <HAL_GetTick>
 800ed1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ed1c:	e00a      	b.n	800ed34 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ed1e:	f7fb fdc7 	bl	800a8b0 <HAL_GetTick>
 800ed22:	4602      	mov	r2, r0
 800ed24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed26:	1ad3      	subs	r3, r2, r3
 800ed28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d901      	bls.n	800ed34 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ed30:	2303      	movs	r3, #3
 800ed32:	e136      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ed34:	f7ff fb51 	bl	800e3da <LL_RCC_LSE_IsReady>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d0ef      	beq.n	800ed1e <HAL_RCC_OscConfig+0x456>
 800ed3e:	e013      	b.n	800ed68 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed40:	f7fb fdb6 	bl	800a8b0 <HAL_GetTick>
 800ed44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ed46:	e00a      	b.n	800ed5e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ed48:	f7fb fdb2 	bl	800a8b0 <HAL_GetTick>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed50:	1ad3      	subs	r3, r2, r3
 800ed52:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d901      	bls.n	800ed5e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ed5a:	2303      	movs	r3, #3
 800ed5c:	e121      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ed5e:	f7ff fb3c 	bl	800e3da <LL_RCC_LSE_IsReady>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1ef      	bne.n	800ed48 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d02c      	beq.n	800edce <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d014      	beq.n	800eda6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ed7c:	f7ff fab5 	bl	800e2ea <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed80:	f7fb fd96 	bl	800a8b0 <HAL_GetTick>
 800ed84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ed86:	e008      	b.n	800ed9a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ed88:	f7fb fd92 	bl	800a8b0 <HAL_GetTick>
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	2b02      	cmp	r3, #2
 800ed94:	d901      	bls.n	800ed9a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800ed96:	2303      	movs	r3, #3
 800ed98:	e103      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ed9a:	f7ff fac8 	bl	800e32e <LL_RCC_HSI48_IsReady>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d0f1      	beq.n	800ed88 <HAL_RCC_OscConfig+0x4c0>
 800eda4:	e013      	b.n	800edce <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800eda6:	f7ff fab1 	bl	800e30c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800edaa:	f7fb fd81 	bl	800a8b0 <HAL_GetTick>
 800edae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800edb0:	e008      	b.n	800edc4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800edb2:	f7fb fd7d 	bl	800a8b0 <HAL_GetTick>
 800edb6:	4602      	mov	r2, r0
 800edb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d901      	bls.n	800edc4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800edc0:	2303      	movs	r3, #3
 800edc2:	e0ee      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800edc4:	f7ff fab3 	bl	800e32e <LL_RCC_HSI48_IsReady>
 800edc8:	4603      	mov	r3, r0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d1f1      	bne.n	800edb2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	f000 80e4 	beq.w	800efa0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800edd8:	f7ff fc11 	bl	800e5fe <LL_RCC_GetSysClkSource>
 800eddc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800edde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edea:	2b02      	cmp	r3, #2
 800edec:	f040 80b4 	bne.w	800ef58 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f003 0203 	and.w	r2, r3, #3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d123      	bne.n	800ee46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d11c      	bne.n	800ee46 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	0a1b      	lsrs	r3, r3, #8
 800ee10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d114      	bne.n	800ee46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d10d      	bne.n	800ee46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d106      	bne.n	800ee46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d05d      	beq.n	800ef02 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	2b0c      	cmp	r3, #12
 800ee4a:	d058      	beq.n	800eefe <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ee4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d001      	beq.n	800ee5e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	e0a1      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ee5e:	f7ff fc84 	bl	800e76a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ee62:	f7fb fd25 	bl	800a8b0 <HAL_GetTick>
 800ee66:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ee68:	e008      	b.n	800ee7c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ee6a:	f7fb fd21 	bl	800a8b0 <HAL_GetTick>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d901      	bls.n	800ee7c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800ee78:	2303      	movs	r3, #3
 800ee7a:	e092      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ee7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1ef      	bne.n	800ee6a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ee8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee8e:	68da      	ldr	r2, [r3, #12]
 800ee90:	4b30      	ldr	r3, [pc, #192]	@ (800ef54 <HAL_RCC_OscConfig+0x68c>)
 800ee92:	4013      	ands	r3, r2
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ee9c:	4311      	orrs	r1, r2
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800eea2:	0212      	lsls	r2, r2, #8
 800eea4:	4311      	orrs	r1, r2
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800eeaa:	4311      	orrs	r1, r2
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800eeb0:	4311      	orrs	r1, r2
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800eeb6:	430a      	orrs	r2, r1
 800eeb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800eebc:	4313      	orrs	r3, r2
 800eebe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800eec0:	f7ff fc44 	bl	800e74c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800eec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800eece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eed2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800eed4:	f7fb fcec 	bl	800a8b0 <HAL_GetTick>
 800eed8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eeda:	e008      	b.n	800eeee <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eedc:	f7fb fce8 	bl	800a8b0 <HAL_GetTick>
 800eee0:	4602      	mov	r2, r0
 800eee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee4:	1ad3      	subs	r3, r2, r3
 800eee6:	2b02      	cmp	r3, #2
 800eee8:	d901      	bls.n	800eeee <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800eeea:	2303      	movs	r3, #3
 800eeec:	e059      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eeee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d0ef      	beq.n	800eedc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800eefc:	e050      	b.n	800efa0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800eefe:	2301      	movs	r3, #1
 800ef00:	e04f      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ef02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d147      	bne.n	800efa0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ef10:	f7ff fc1c 	bl	800e74c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ef14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ef1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ef24:	f7fb fcc4 	bl	800a8b0 <HAL_GetTick>
 800ef28:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ef2a:	e008      	b.n	800ef3e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ef2c:	f7fb fcc0 	bl	800a8b0 <HAL_GetTick>
 800ef30:	4602      	mov	r2, r0
 800ef32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef34:	1ad3      	subs	r3, r2, r3
 800ef36:	2b02      	cmp	r3, #2
 800ef38:	d901      	bls.n	800ef3e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800ef3a:	2303      	movs	r3, #3
 800ef3c:	e031      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ef3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d0ef      	beq.n	800ef2c <HAL_RCC_OscConfig+0x664>
 800ef4c:	e028      	b.n	800efa0 <HAL_RCC_OscConfig+0x6d8>
 800ef4e:	bf00      	nop
 800ef50:	58000400 	.word	0x58000400
 800ef54:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	2b0c      	cmp	r3, #12
 800ef5c:	d01e      	beq.n	800ef9c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ef5e:	f7ff fc04 	bl	800e76a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef62:	f7fb fca5 	bl	800a8b0 <HAL_GetTick>
 800ef66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ef68:	e008      	b.n	800ef7c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ef6a:	f7fb fca1 	bl	800a8b0 <HAL_GetTick>
 800ef6e:	4602      	mov	r2, r0
 800ef70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef72:	1ad3      	subs	r3, r2, r3
 800ef74:	2b02      	cmp	r3, #2
 800ef76:	d901      	bls.n	800ef7c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800ef78:	2303      	movs	r3, #3
 800ef7a:	e012      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ef7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d1ef      	bne.n	800ef6a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800ef8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef8e:	68da      	ldr	r2, [r3, #12]
 800ef90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ef94:	4b05      	ldr	r3, [pc, #20]	@ (800efac <HAL_RCC_OscConfig+0x6e4>)
 800ef96:	4013      	ands	r3, r2
 800ef98:	60cb      	str	r3, [r1, #12]
 800ef9a:	e001      	b.n	800efa0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	e000      	b.n	800efa2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3734      	adds	r7, #52	@ 0x34
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd90      	pop	{r4, r7, pc}
 800efaa:	bf00      	nop
 800efac:	eefefffc 	.word	0xeefefffc

0800efb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d101      	bne.n	800efc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800efc0:	2301      	movs	r3, #1
 800efc2:	e12d      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800efc4:	4b98      	ldr	r3, [pc, #608]	@ (800f228 <HAL_RCC_ClockConfig+0x278>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f003 0307 	and.w	r3, r3, #7
 800efcc:	683a      	ldr	r2, [r7, #0]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d91b      	bls.n	800f00a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800efd2:	4b95      	ldr	r3, [pc, #596]	@ (800f228 <HAL_RCC_ClockConfig+0x278>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	f023 0207 	bic.w	r2, r3, #7
 800efda:	4993      	ldr	r1, [pc, #588]	@ (800f228 <HAL_RCC_ClockConfig+0x278>)
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	4313      	orrs	r3, r2
 800efe0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800efe2:	f7fb fc65 	bl	800a8b0 <HAL_GetTick>
 800efe6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800efe8:	e008      	b.n	800effc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800efea:	f7fb fc61 	bl	800a8b0 <HAL_GetTick>
 800efee:	4602      	mov	r2, r0
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	1ad3      	subs	r3, r2, r3
 800eff4:	2b02      	cmp	r3, #2
 800eff6:	d901      	bls.n	800effc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800eff8:	2303      	movs	r3, #3
 800effa:	e111      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800effc:	4b8a      	ldr	r3, [pc, #552]	@ (800f228 <HAL_RCC_ClockConfig+0x278>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f003 0307 	and.w	r3, r3, #7
 800f004:	683a      	ldr	r2, [r7, #0]
 800f006:	429a      	cmp	r2, r3
 800f008:	d1ef      	bne.n	800efea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f003 0302 	and.w	r3, r3, #2
 800f012:	2b00      	cmp	r3, #0
 800f014:	d016      	beq.n	800f044 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	689b      	ldr	r3, [r3, #8]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff fafb 	bl	800e616 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f020:	f7fb fc46 	bl	800a8b0 <HAL_GetTick>
 800f024:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f026:	e008      	b.n	800f03a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f028:	f7fb fc42 	bl	800a8b0 <HAL_GetTick>
 800f02c:	4602      	mov	r2, r0
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	2b02      	cmp	r3, #2
 800f034:	d901      	bls.n	800f03a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800f036:	2303      	movs	r3, #3
 800f038:	e0f2      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f03a:	f7ff fbe8 	bl	800e80e <LL_RCC_IsActiveFlag_HPRE>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d0f1      	beq.n	800f028 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f003 0320 	and.w	r3, r3, #32
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d016      	beq.n	800f07e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	695b      	ldr	r3, [r3, #20]
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff faf2 	bl	800e63e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f05a:	f7fb fc29 	bl	800a8b0 <HAL_GetTick>
 800f05e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f060:	e008      	b.n	800f074 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f062:	f7fb fc25 	bl	800a8b0 <HAL_GetTick>
 800f066:	4602      	mov	r2, r0
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	1ad3      	subs	r3, r2, r3
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	d901      	bls.n	800f074 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800f070:	2303      	movs	r3, #3
 800f072:	e0d5      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f074:	f7ff fbdd 	bl	800e832 <LL_RCC_IsActiveFlag_C2HPRE>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d0f1      	beq.n	800f062 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f086:	2b00      	cmp	r3, #0
 800f088:	d016      	beq.n	800f0b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	699b      	ldr	r3, [r3, #24]
 800f08e:	4618      	mov	r0, r3
 800f090:	f7ff faeb 	bl	800e66a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f094:	f7fb fc0c 	bl	800a8b0 <HAL_GetTick>
 800f098:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f09a:	e008      	b.n	800f0ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f09c:	f7fb fc08 	bl	800a8b0 <HAL_GetTick>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	1ad3      	subs	r3, r2, r3
 800f0a6:	2b02      	cmp	r3, #2
 800f0a8:	d901      	bls.n	800f0ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800f0aa:	2303      	movs	r3, #3
 800f0ac:	e0b8      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f0ae:	f7ff fbd3 	bl	800e858 <LL_RCC_IsActiveFlag_SHDHPRE>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d0f1      	beq.n	800f09c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f003 0304 	and.w	r3, r3, #4
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d016      	beq.n	800f0f2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7ff fae5 	bl	800e698 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f0ce:	f7fb fbef 	bl	800a8b0 <HAL_GetTick>
 800f0d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f0d4:	e008      	b.n	800f0e8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f0d6:	f7fb fbeb 	bl	800a8b0 <HAL_GetTick>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d901      	bls.n	800f0e8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800f0e4:	2303      	movs	r3, #3
 800f0e6:	e09b      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f0e8:	f7ff fbc9 	bl	800e87e <LL_RCC_IsActiveFlag_PPRE1>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d0f1      	beq.n	800f0d6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f003 0308 	and.w	r3, r3, #8
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d017      	beq.n	800f12e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	691b      	ldr	r3, [r3, #16]
 800f102:	00db      	lsls	r3, r3, #3
 800f104:	4618      	mov	r0, r3
 800f106:	f7ff fadb 	bl	800e6c0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f10a:	f7fb fbd1 	bl	800a8b0 <HAL_GetTick>
 800f10e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f110:	e008      	b.n	800f124 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f112:	f7fb fbcd 	bl	800a8b0 <HAL_GetTick>
 800f116:	4602      	mov	r2, r0
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	1ad3      	subs	r3, r2, r3
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d901      	bls.n	800f124 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800f120:	2303      	movs	r3, #3
 800f122:	e07d      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f124:	f7ff fbbd 	bl	800e8a2 <LL_RCC_IsActiveFlag_PPRE2>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d0f1      	beq.n	800f112 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f003 0301 	and.w	r3, r3, #1
 800f136:	2b00      	cmp	r3, #0
 800f138:	d043      	beq.n	800f1c2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d106      	bne.n	800f150 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800f142:	f7ff f87b 	bl	800e23c <LL_RCC_HSE_IsReady>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d11e      	bne.n	800f18a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f14c:	2301      	movs	r3, #1
 800f14e:	e067      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	2b03      	cmp	r3, #3
 800f156:	d106      	bne.n	800f166 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800f158:	f7ff fb16 	bl	800e788 <LL_RCC_PLL_IsReady>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d113      	bne.n	800f18a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f162:	2301      	movs	r3, #1
 800f164:	e05c      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d106      	bne.n	800f17c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800f16e:	f7ff f9e3 	bl	800e538 <LL_RCC_MSI_IsReady>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d108      	bne.n	800f18a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f178:	2301      	movs	r3, #1
 800f17a:	e051      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800f17c:	f7ff f88e 	bl	800e29c <LL_RCC_HSI_IsReady>
 800f180:	4603      	mov	r3, r0
 800f182:	2b00      	cmp	r3, #0
 800f184:	d101      	bne.n	800f18a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f186:	2301      	movs	r3, #1
 800f188:	e04a      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	4618      	mov	r0, r3
 800f190:	f7ff fa21 	bl	800e5d6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f194:	f7fb fb8c 	bl	800a8b0 <HAL_GetTick>
 800f198:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f19a:	e00a      	b.n	800f1b2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f19c:	f7fb fb88 	bl	800a8b0 <HAL_GetTick>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d901      	bls.n	800f1b2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800f1ae:	2303      	movs	r3, #3
 800f1b0:	e036      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f1b2:	f7ff fa24 	bl	800e5fe <LL_RCC_GetSysClkSource>
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d1ec      	bne.n	800f19c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f1c2:	4b19      	ldr	r3, [pc, #100]	@ (800f228 <HAL_RCC_ClockConfig+0x278>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f003 0307 	and.w	r3, r3, #7
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d21b      	bcs.n	800f208 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f1d0:	4b15      	ldr	r3, [pc, #84]	@ (800f228 <HAL_RCC_ClockConfig+0x278>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f023 0207 	bic.w	r2, r3, #7
 800f1d8:	4913      	ldr	r1, [pc, #76]	@ (800f228 <HAL_RCC_ClockConfig+0x278>)
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f1e0:	f7fb fb66 	bl	800a8b0 <HAL_GetTick>
 800f1e4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1e6:	e008      	b.n	800f1fa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f1e8:	f7fb fb62 	bl	800a8b0 <HAL_GetTick>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	1ad3      	subs	r3, r2, r3
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d901      	bls.n	800f1fa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800f1f6:	2303      	movs	r3, #3
 800f1f8:	e012      	b.n	800f220 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1fa:	4b0b      	ldr	r3, [pc, #44]	@ (800f228 <HAL_RCC_ClockConfig+0x278>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f003 0307 	and.w	r3, r3, #7
 800f202:	683a      	ldr	r2, [r7, #0]
 800f204:	429a      	cmp	r2, r3
 800f206:	d1ef      	bne.n	800f1e8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f208:	f000 f87e 	bl	800f308 <HAL_RCC_GetHCLKFreq>
 800f20c:	4603      	mov	r3, r0
 800f20e:	4a07      	ldr	r2, [pc, #28]	@ (800f22c <HAL_RCC_ClockConfig+0x27c>)
 800f210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800f212:	f7fb fb59 	bl	800a8c8 <HAL_GetTickPrio>
 800f216:	4603      	mov	r3, r0
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fb fafb 	bl	800a814 <HAL_InitTick>
 800f21e:	4603      	mov	r3, r0
}
 800f220:	4618      	mov	r0, r3
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	58004000 	.word	0x58004000
 800f22c:	2000007c 	.word	0x2000007c

0800f230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f230:	b590      	push	{r4, r7, lr}
 800f232:	b085      	sub	sp, #20
 800f234:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f236:	f7ff f9e2 	bl	800e5fe <LL_RCC_GetSysClkSource>
 800f23a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d10a      	bne.n	800f258 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f242:	f7ff f99e 	bl	800e582 <LL_RCC_MSI_GetRange>
 800f246:	4603      	mov	r3, r0
 800f248:	091b      	lsrs	r3, r3, #4
 800f24a:	f003 030f 	and.w	r3, r3, #15
 800f24e:	4a2b      	ldr	r2, [pc, #172]	@ (800f2fc <HAL_RCC_GetSysClockFreq+0xcc>)
 800f250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f254:	60fb      	str	r3, [r7, #12]
 800f256:	e04b      	b.n	800f2f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2b04      	cmp	r3, #4
 800f25c:	d102      	bne.n	800f264 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f25e:	4b28      	ldr	r3, [pc, #160]	@ (800f300 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f260:	60fb      	str	r3, [r7, #12]
 800f262:	e045      	b.n	800f2f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b08      	cmp	r3, #8
 800f268:	d10a      	bne.n	800f280 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f26a:	f7fe ffb7 	bl	800e1dc <LL_RCC_HSE_IsEnabledDiv2>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b01      	cmp	r3, #1
 800f272:	d102      	bne.n	800f27a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800f274:	4b22      	ldr	r3, [pc, #136]	@ (800f300 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f276:	60fb      	str	r3, [r7, #12]
 800f278:	e03a      	b.n	800f2f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800f27a:	4b22      	ldr	r3, [pc, #136]	@ (800f304 <HAL_RCC_GetSysClockFreq+0xd4>)
 800f27c:	60fb      	str	r3, [r7, #12]
 800f27e:	e037      	b.n	800f2f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800f280:	f7ff fab9 	bl	800e7f6 <LL_RCC_PLL_GetMainSource>
 800f284:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	2b02      	cmp	r3, #2
 800f28a:	d003      	beq.n	800f294 <HAL_RCC_GetSysClockFreq+0x64>
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	2b03      	cmp	r3, #3
 800f290:	d003      	beq.n	800f29a <HAL_RCC_GetSysClockFreq+0x6a>
 800f292:	e00d      	b.n	800f2b0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800f294:	4b1a      	ldr	r3, [pc, #104]	@ (800f300 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f296:	60bb      	str	r3, [r7, #8]
        break;
 800f298:	e015      	b.n	800f2c6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f29a:	f7fe ff9f 	bl	800e1dc <LL_RCC_HSE_IsEnabledDiv2>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d102      	bne.n	800f2aa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800f2a4:	4b16      	ldr	r3, [pc, #88]	@ (800f300 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f2a6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800f2a8:	e00d      	b.n	800f2c6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800f2aa:	4b16      	ldr	r3, [pc, #88]	@ (800f304 <HAL_RCC_GetSysClockFreq+0xd4>)
 800f2ac:	60bb      	str	r3, [r7, #8]
        break;
 800f2ae:	e00a      	b.n	800f2c6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f2b0:	f7ff f967 	bl	800e582 <LL_RCC_MSI_GetRange>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	091b      	lsrs	r3, r3, #4
 800f2b8:	f003 030f 	and.w	r3, r3, #15
 800f2bc:	4a0f      	ldr	r2, [pc, #60]	@ (800f2fc <HAL_RCC_GetSysClockFreq+0xcc>)
 800f2be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2c2:	60bb      	str	r3, [r7, #8]
        break;
 800f2c4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800f2c6:	f7ff fa71 	bl	800e7ac <LL_RCC_PLL_GetN>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	fb03 f402 	mul.w	r4, r3, r2
 800f2d2:	f7ff fa84 	bl	800e7de <LL_RCC_PLL_GetDivider>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	091b      	lsrs	r3, r3, #4
 800f2da:	3301      	adds	r3, #1
 800f2dc:	fbb4 f4f3 	udiv	r4, r4, r3
 800f2e0:	f7ff fa71 	bl	800e7c6 <LL_RCC_PLL_GetR>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	0f5b      	lsrs	r3, r3, #29
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	fbb4 f3f3 	udiv	r3, r4, r3
 800f2ee:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3714      	adds	r7, #20
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd90      	pop	{r4, r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	080167e8 	.word	0x080167e8
 800f300:	00f42400 	.word	0x00f42400
 800f304:	01e84800 	.word	0x01e84800

0800f308 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f308:	b598      	push	{r3, r4, r7, lr}
 800f30a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800f30c:	f7ff ff90 	bl	800f230 <HAL_RCC_GetSysClockFreq>
 800f310:	4604      	mov	r4, r0
 800f312:	f7ff f9e9 	bl	800e6e8 <LL_RCC_GetAHBPrescaler>
 800f316:	4603      	mov	r3, r0
 800f318:	091b      	lsrs	r3, r3, #4
 800f31a:	f003 030f 	and.w	r3, r3, #15
 800f31e:	4a03      	ldr	r2, [pc, #12]	@ (800f32c <HAL_RCC_GetHCLKFreq+0x24>)
 800f320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f324:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800f328:	4618      	mov	r0, r3
 800f32a:	bd98      	pop	{r3, r4, r7, pc}
 800f32c:	08016788 	.word	0x08016788

0800f330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f330:	b598      	push	{r3, r4, r7, lr}
 800f332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800f334:	f7ff ffe8 	bl	800f308 <HAL_RCC_GetHCLKFreq>
 800f338:	4604      	mov	r4, r0
 800f33a:	f7ff f9ef 	bl	800e71c <LL_RCC_GetAPB1Prescaler>
 800f33e:	4603      	mov	r3, r0
 800f340:	0a1b      	lsrs	r3, r3, #8
 800f342:	f003 0307 	and.w	r3, r3, #7
 800f346:	4a04      	ldr	r2, [pc, #16]	@ (800f358 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f34c:	f003 031f 	and.w	r3, r3, #31
 800f350:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f354:	4618      	mov	r0, r3
 800f356:	bd98      	pop	{r3, r4, r7, pc}
 800f358:	080167c8 	.word	0x080167c8

0800f35c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f35c:	b598      	push	{r3, r4, r7, lr}
 800f35e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800f360:	f7ff ffd2 	bl	800f308 <HAL_RCC_GetHCLKFreq>
 800f364:	4604      	mov	r4, r0
 800f366:	f7ff f9e5 	bl	800e734 <LL_RCC_GetAPB2Prescaler>
 800f36a:	4603      	mov	r3, r0
 800f36c:	0adb      	lsrs	r3, r3, #11
 800f36e:	f003 0307 	and.w	r3, r3, #7
 800f372:	4a04      	ldr	r2, [pc, #16]	@ (800f384 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f378:	f003 031f 	and.w	r3, r3, #31
 800f37c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f380:	4618      	mov	r0, r3
 800f382:	bd98      	pop	{r3, r4, r7, pc}
 800f384:	080167c8 	.word	0x080167c8

0800f388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800f388:	b590      	push	{r4, r7, lr}
 800f38a:	b085      	sub	sp, #20
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2bb0      	cmp	r3, #176	@ 0xb0
 800f394:	d903      	bls.n	800f39e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800f396:	4b15      	ldr	r3, [pc, #84]	@ (800f3ec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f39a:	60fb      	str	r3, [r7, #12]
 800f39c:	e007      	b.n	800f3ae <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	091b      	lsrs	r3, r3, #4
 800f3a2:	f003 030f 	and.w	r3, r3, #15
 800f3a6:	4a11      	ldr	r2, [pc, #68]	@ (800f3ec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f3a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ac:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800f3ae:	f7ff f9a7 	bl	800e700 <LL_RCC_GetAHB4Prescaler>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	091b      	lsrs	r3, r3, #4
 800f3b6:	f003 030f 	and.w	r3, r3, #15
 800f3ba:	4a0d      	ldr	r2, [pc, #52]	@ (800f3f0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800f3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3c6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	4a0a      	ldr	r2, [pc, #40]	@ (800f3f4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800f3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800f3d0:	0c9c      	lsrs	r4, r3, #18
 800f3d2:	f7fe fec9 	bl	800e168 <HAL_PWREx_GetVoltageRange>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	4619      	mov	r1, r3
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f000 f80c 	bl	800f3f8 <RCC_SetFlashLatency>
 800f3e0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3714      	adds	r7, #20
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd90      	pop	{r4, r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	080167e8 	.word	0x080167e8
 800f3f0:	08016788 	.word	0x08016788
 800f3f4:	431bde83 	.word	0x431bde83

0800f3f8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800f3f8:	b590      	push	{r4, r7, lr}
 800f3fa:	b093      	sub	sp, #76	@ 0x4c
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800f402:	4b37      	ldr	r3, [pc, #220]	@ (800f4e0 <RCC_SetFlashLatency+0xe8>)
 800f404:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800f408:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f40a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800f40e:	4a35      	ldr	r2, [pc, #212]	@ (800f4e4 <RCC_SetFlashLatency+0xec>)
 800f410:	f107 031c 	add.w	r3, r7, #28
 800f414:	ca07      	ldmia	r2, {r0, r1, r2}
 800f416:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800f41a:	4b33      	ldr	r3, [pc, #204]	@ (800f4e8 <RCC_SetFlashLatency+0xf0>)
 800f41c:	f107 040c 	add.w	r4, r7, #12
 800f420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f422:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800f426:	2300      	movs	r3, #0
 800f428:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f430:	d11a      	bne.n	800f468 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f432:	2300      	movs	r3, #0
 800f434:	643b      	str	r3, [r7, #64]	@ 0x40
 800f436:	e013      	b.n	800f460 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800f438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	3348      	adds	r3, #72	@ 0x48
 800f43e:	443b      	add	r3, r7
 800f440:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	429a      	cmp	r2, r3
 800f448:	d807      	bhi.n	800f45a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f44a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f44c:	009b      	lsls	r3, r3, #2
 800f44e:	3348      	adds	r3, #72	@ 0x48
 800f450:	443b      	add	r3, r7
 800f452:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f456:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f458:	e020      	b.n	800f49c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f45a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f45c:	3301      	adds	r3, #1
 800f45e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f462:	2b03      	cmp	r3, #3
 800f464:	d9e8      	bls.n	800f438 <RCC_SetFlashLatency+0x40>
 800f466:	e019      	b.n	800f49c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f468:	2300      	movs	r3, #0
 800f46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f46c:	e013      	b.n	800f496 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800f46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	3348      	adds	r3, #72	@ 0x48
 800f474:	443b      	add	r3, r7
 800f476:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d807      	bhi.n	800f490 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	3348      	adds	r3, #72	@ 0x48
 800f486:	443b      	add	r3, r7
 800f488:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f48c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f48e:	e005      	b.n	800f49c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f492:	3301      	adds	r3, #1
 800f494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f498:	2b02      	cmp	r3, #2
 800f49a:	d9e8      	bls.n	800f46e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800f49c:	4b13      	ldr	r3, [pc, #76]	@ (800f4ec <RCC_SetFlashLatency+0xf4>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f023 0207 	bic.w	r2, r3, #7
 800f4a4:	4911      	ldr	r1, [pc, #68]	@ (800f4ec <RCC_SetFlashLatency+0xf4>)
 800f4a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f4ac:	f7fb fa00 	bl	800a8b0 <HAL_GetTick>
 800f4b0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f4b2:	e008      	b.n	800f4c6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f4b4:	f7fb f9fc 	bl	800a8b0 <HAL_GetTick>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4bc:	1ad3      	subs	r3, r2, r3
 800f4be:	2b02      	cmp	r3, #2
 800f4c0:	d901      	bls.n	800f4c6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800f4c2:	2303      	movs	r3, #3
 800f4c4:	e007      	b.n	800f4d6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f4c6:	4b09      	ldr	r3, [pc, #36]	@ (800f4ec <RCC_SetFlashLatency+0xf4>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f003 0307 	and.w	r3, r3, #7
 800f4ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d1ef      	bne.n	800f4b4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	374c      	adds	r7, #76	@ 0x4c
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd90      	pop	{r4, r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	0801675c 	.word	0x0801675c
 800f4e4:	0801676c 	.word	0x0801676c
 800f4e8:	08016778 	.word	0x08016778
 800f4ec:	58004000 	.word	0x58004000

0800f4f0 <LL_RCC_LSE_IsEnabled>:
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800f4f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4fc:	f003 0301 	and.w	r3, r3, #1
 800f500:	2b01      	cmp	r3, #1
 800f502:	d101      	bne.n	800f508 <LL_RCC_LSE_IsEnabled+0x18>
 800f504:	2301      	movs	r3, #1
 800f506:	e000      	b.n	800f50a <LL_RCC_LSE_IsEnabled+0x1a>
 800f508:	2300      	movs	r3, #0
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr

0800f514 <LL_RCC_LSE_IsReady>:
{
 800f514:	b480      	push	{r7}
 800f516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f520:	f003 0302 	and.w	r3, r3, #2
 800f524:	2b02      	cmp	r3, #2
 800f526:	d101      	bne.n	800f52c <LL_RCC_LSE_IsReady+0x18>
 800f528:	2301      	movs	r3, #1
 800f52a:	e000      	b.n	800f52e <LL_RCC_LSE_IsReady+0x1a>
 800f52c:	2300      	movs	r3, #0
}
 800f52e:	4618      	mov	r0, r3
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <LL_RCC_SetRFWKPClockSource>:
{
 800f538:	b480      	push	{r7}
 800f53a:	b083      	sub	sp, #12
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800f540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f548:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800f54c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4313      	orrs	r3, r2
 800f554:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800f558:	bf00      	nop
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <LL_RCC_SetSMPSClockSource>:
{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800f56c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f572:	f023 0203 	bic.w	r2, r3, #3
 800f576:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	4313      	orrs	r3, r2
 800f57e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f580:	bf00      	nop
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <LL_RCC_SetSMPSPrescaler>:
{
 800f58c:	b480      	push	{r7}
 800f58e:	b083      	sub	sp, #12
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800f594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f59a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800f59e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f5a8:	bf00      	nop
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <LL_RCC_SetUSARTClockSource>:
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800f5bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f5c4:	f023 0203 	bic.w	r2, r3, #3
 800f5c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4313      	orrs	r3, r2
 800f5d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f5d4:	bf00      	nop
 800f5d6:	370c      	adds	r7, #12
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <LL_RCC_SetLPUARTClockSource>:
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800f5e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f5f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f5f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f600:	bf00      	nop
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr

0800f60c <LL_RCC_SetI2CClockSource>:
{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800f614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f618:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	091b      	lsrs	r3, r3, #4
 800f620:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f624:	43db      	mvns	r3, r3
 800f626:	401a      	ands	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	011b      	lsls	r3, r3, #4
 800f62c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f630:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f634:	4313      	orrs	r3, r2
 800f636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f63a:	bf00      	nop
 800f63c:	370c      	adds	r7, #12
 800f63e:	46bd      	mov	sp, r7
 800f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f644:	4770      	bx	lr

0800f646 <LL_RCC_SetLPTIMClockSource>:
{
 800f646:	b480      	push	{r7}
 800f648:	b083      	sub	sp, #12
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800f64e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f652:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	0c1b      	lsrs	r3, r3, #16
 800f65a:	041b      	lsls	r3, r3, #16
 800f65c:	43db      	mvns	r3, r3
 800f65e:	401a      	ands	r2, r3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	041b      	lsls	r3, r3, #16
 800f664:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f668:	4313      	orrs	r3, r2
 800f66a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f66e:	bf00      	nop
 800f670:	370c      	adds	r7, #12
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr

0800f67a <LL_RCC_SetSAIClockSource>:
{
 800f67a:	b480      	push	{r7}
 800f67c:	b083      	sub	sp, #12
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800f682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f68a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800f68e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4313      	orrs	r3, r2
 800f696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f69a:	bf00      	nop
 800f69c:	370c      	adds	r7, #12
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr

0800f6a6 <LL_RCC_SetRNGClockSource>:
{
 800f6a6:	b480      	push	{r7}
 800f6a8:	b083      	sub	sp, #12
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800f6ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800f6ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f6c6:	bf00      	nop
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <LL_RCC_SetCLK48ClockSource>:
{
 800f6d2:	b480      	push	{r7}
 800f6d4:	b083      	sub	sp, #12
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800f6da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f6e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f6f2:	bf00      	nop
 800f6f4:	370c      	adds	r7, #12
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr

0800f6fe <LL_RCC_SetUSBClockSource>:
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b082      	sub	sp, #8
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f7ff ffe3 	bl	800f6d2 <LL_RCC_SetCLK48ClockSource>
}
 800f70c:	bf00      	nop
 800f70e:	3708      	adds	r7, #8
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <LL_RCC_SetADCClockSource>:
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800f71c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f724:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800f728:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4313      	orrs	r3, r2
 800f730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f734:	bf00      	nop
 800f736:	370c      	adds	r7, #12
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <LL_RCC_SetRTCClockSource>:
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800f748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f750:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f754:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4313      	orrs	r3, r2
 800f75c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <LL_RCC_GetRTCClockSource>:
{
 800f76c:	b480      	push	{r7}
 800f76e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800f770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr

0800f786 <LL_RCC_ForceBackupDomainReset>:
{
 800f786:	b480      	push	{r7}
 800f788:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f78a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f792:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f79a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f79e:	bf00      	nop
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr

0800f7a8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f7ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f7b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f7bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f7c0:	bf00      	nop
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr

0800f7ca <LL_RCC_PLLSAI1_Enable>:
{
 800f7ca:	b480      	push	{r7}
 800f7cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f7ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f7d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f7dc:	6013      	str	r3, [r2, #0]
}
 800f7de:	bf00      	nop
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <LL_RCC_PLLSAI1_Disable>:
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f7ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f7f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f7fa:	6013      	str	r3, [r2, #0]
}
 800f7fc:	bf00      	nop
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr

0800f806 <LL_RCC_PLLSAI1_IsReady>:
{
 800f806:	b480      	push	{r7}
 800f808:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800f80a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f814:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f818:	d101      	bne.n	800f81e <LL_RCC_PLLSAI1_IsReady+0x18>
 800f81a:	2301      	movs	r3, #1
 800f81c:	e000      	b.n	800f820 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800f81e:	2300      	movs	r3, #0
}
 800f820:	4618      	mov	r0, r3
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr

0800f82a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b088      	sub	sp, #32
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800f832:	2300      	movs	r3, #0
 800f834:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800f836:	2300      	movs	r3, #0
 800f838:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f842:	2b00      	cmp	r3, #0
 800f844:	d034      	beq.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f84a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f84e:	d021      	beq.n	800f894 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800f850:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f854:	d81b      	bhi.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f856:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f85a:	d01d      	beq.n	800f898 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800f85c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f860:	d815      	bhi.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00b      	beq.n	800f87e <HAL_RCCEx_PeriphCLKConfig+0x54>
 800f866:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f86a:	d110      	bne.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800f86c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f87a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800f87c:	e00d      	b.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	3304      	adds	r3, #4
 800f882:	4618      	mov	r0, r3
 800f884:	f000 f947 	bl	800fb16 <RCCEx_PLLSAI1_ConfigNP>
 800f888:	4603      	mov	r3, r0
 800f88a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f88c:	e005      	b.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800f88e:	2301      	movs	r3, #1
 800f890:	77fb      	strb	r3, [r7, #31]
        break;
 800f892:	e002      	b.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f894:	bf00      	nop
 800f896:	e000      	b.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f89a:	7ffb      	ldrb	r3, [r7, #31]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d105      	bne.n	800f8ac <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7ff fee8 	bl	800f67a <LL_RCC_SetSAIClockSource>
 800f8aa:	e001      	b.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8ac:	7ffb      	ldrb	r3, [r7, #31]
 800f8ae:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d046      	beq.n	800f94a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800f8bc:	f7ff ff56 	bl	800f76c <LL_RCC_GetRTCClockSource>
 800f8c0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8c6:	69ba      	ldr	r2, [r7, #24]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d03c      	beq.n	800f946 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f8cc:	f7fe fbb4 	bl	800e038 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800f8d0:	69bb      	ldr	r3, [r7, #24]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d105      	bne.n	800f8e2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7ff ff30 	bl	800f740 <LL_RCC_SetRTCClockSource>
 800f8e0:	e02e      	b.n	800f940 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800f8e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8ea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800f8ec:	f7ff ff4b 	bl	800f786 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800f8f0:	f7ff ff5a 	bl	800f7a8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8fe:	4313      	orrs	r3, r2
 800f900:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800f902:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800f90c:	f7ff fdf0 	bl	800f4f0 <LL_RCC_LSE_IsEnabled>
 800f910:	4603      	mov	r3, r0
 800f912:	2b01      	cmp	r3, #1
 800f914:	d114      	bne.n	800f940 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f916:	f7fa ffcb 	bl	800a8b0 <HAL_GetTick>
 800f91a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800f91c:	e00b      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f91e:	f7fa ffc7 	bl	800a8b0 <HAL_GetTick>
 800f922:	4602      	mov	r2, r0
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	1ad3      	subs	r3, r2, r3
 800f928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d902      	bls.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800f930:	2303      	movs	r3, #3
 800f932:	77fb      	strb	r3, [r7, #31]
              break;
 800f934:	e004      	b.n	800f940 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800f936:	f7ff fded 	bl	800f514 <LL_RCC_LSE_IsReady>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d1ee      	bne.n	800f91e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800f940:	7ffb      	ldrb	r3, [r7, #31]
 800f942:	77bb      	strb	r3, [r7, #30]
 800f944:	e001      	b.n	800f94a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f946:	7ffb      	ldrb	r3, [r7, #31]
 800f948:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f003 0301 	and.w	r3, r3, #1
 800f952:	2b00      	cmp	r3, #0
 800f954:	d004      	beq.n	800f960 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	699b      	ldr	r3, [r3, #24]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7ff fe2a 	bl	800f5b4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	f003 0302 	and.w	r3, r3, #2
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d004      	beq.n	800f976 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	69db      	ldr	r3, [r3, #28]
 800f970:	4618      	mov	r0, r3
 800f972:	f7ff fe35 	bl	800f5e0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f003 0310 	and.w	r3, r3, #16
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d004      	beq.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f986:	4618      	mov	r0, r3
 800f988:	f7ff fe5d 	bl	800f646 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f003 0320 	and.w	r3, r3, #32
 800f994:	2b00      	cmp	r3, #0
 800f996:	d004      	beq.n	800f9a2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7ff fe52 	bl	800f646 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	f003 0304 	and.w	r3, r3, #4
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d004      	beq.n	800f9b8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6a1b      	ldr	r3, [r3, #32]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7ff fe2a 	bl	800f60c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f003 0308 	and.w	r3, r3, #8
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d004      	beq.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7ff fe1f 	bl	800f60c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d022      	beq.n	800fa20 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7ff fe8d 	bl	800f6fe <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f9ec:	d107      	bne.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800f9ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f9f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f9fc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fa06:	d10b      	bne.n	800fa20 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	3304      	adds	r3, #4
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f000 f8dd 	bl	800fbcc <RCCEx_PLLSAI1_ConfigNQ>
 800fa12:	4603      	mov	r3, r0
 800fa14:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800fa16:	7ffb      	ldrb	r3, [r7, #31]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d001      	beq.n	800fa20 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800fa1c:	7ffb      	ldrb	r3, [r7, #31]
 800fa1e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d02b      	beq.n	800fa84 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa34:	d008      	beq.n	800fa48 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fa3e:	d003      	beq.n	800fa48 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d105      	bne.n	800fa54 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7ff fe2a 	bl	800f6a6 <LL_RCC_SetRNGClockSource>
 800fa52:	e00a      	b.n	800fa6a <HAL_RCCEx_PeriphCLKConfig+0x240>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fa5c:	60fb      	str	r3, [r7, #12]
 800fa5e:	2000      	movs	r0, #0
 800fa60:	f7ff fe21 	bl	800f6a6 <LL_RCC_SetRNGClockSource>
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f7ff fe34 	bl	800f6d2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa6e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800fa72:	d107      	bne.n	800fa84 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800fa74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fa7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fa82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d022      	beq.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7ff fe3d 	bl	800f714 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800faa2:	d107      	bne.n	800fab4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800faa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800faae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fab2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fab8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fabc:	d10b      	bne.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3304      	adds	r3, #4
 800fac2:	4618      	mov	r0, r3
 800fac4:	f000 f8dd 	bl	800fc82 <RCCEx_PLLSAI1_ConfigNR>
 800fac8:	4603      	mov	r3, r0
 800faca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800facc:	7ffb      	ldrb	r3, [r7, #31]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d001      	beq.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800fad2:	7ffb      	ldrb	r3, [r7, #31]
 800fad4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d004      	beq.n	800faec <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7ff fd26 	bl	800f538 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d009      	beq.n	800fb0c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7ff fd45 	bl	800f58c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7ff fd2c 	bl	800f564 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800fb0c:	7fbb      	ldrb	r3, [r7, #30]
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3720      	adds	r7, #32
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}

0800fb16 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fb16:	b580      	push	{r7, lr}
 800fb18:	b084      	sub	sp, #16
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fb22:	f7ff fe61 	bl	800f7e8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fb26:	f7fa fec3 	bl	800a8b0 <HAL_GetTick>
 800fb2a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fb2c:	e009      	b.n	800fb42 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fb2e:	f7fa febf 	bl	800a8b0 <HAL_GetTick>
 800fb32:	4602      	mov	r2, r0
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	1ad3      	subs	r3, r2, r3
 800fb38:	2b02      	cmp	r3, #2
 800fb3a:	d902      	bls.n	800fb42 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800fb3c:	2303      	movs	r3, #3
 800fb3e:	73fb      	strb	r3, [r7, #15]
      break;
 800fb40:	e004      	b.n	800fb4c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fb42:	f7ff fe60 	bl	800f806 <LL_RCC_PLLSAI1_IsReady>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d1f0      	bne.n	800fb2e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800fb4c:	7bfb      	ldrb	r3, [r7, #15]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d137      	bne.n	800fbc2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fb52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb56:	691b      	ldr	r3, [r3, #16]
 800fb58:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	021b      	lsls	r3, r3, #8
 800fb62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fb66:	4313      	orrs	r3, r2
 800fb68:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800fb6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb6e:	691b      	ldr	r3, [r3, #16]
 800fb70:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fb7c:	4313      	orrs	r3, r2
 800fb7e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fb80:	f7ff fe23 	bl	800f7ca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb84:	f7fa fe94 	bl	800a8b0 <HAL_GetTick>
 800fb88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fb8a:	e009      	b.n	800fba0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fb8c:	f7fa fe90 	bl	800a8b0 <HAL_GetTick>
 800fb90:	4602      	mov	r2, r0
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	1ad3      	subs	r3, r2, r3
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	d902      	bls.n	800fba0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800fb9a:	2303      	movs	r3, #3
 800fb9c:	73fb      	strb	r3, [r7, #15]
        break;
 800fb9e:	e004      	b.n	800fbaa <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fba0:	f7ff fe31 	bl	800f806 <LL_RCC_PLLSAI1_IsReady>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d1f0      	bne.n	800fb8c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800fbaa:	7bfb      	ldrb	r3, [r7, #15]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d108      	bne.n	800fbc2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fbb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fbb4:	691a      	ldr	r2, [r3, #16]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	691b      	ldr	r3, [r3, #16]
 800fbba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3710      	adds	r7, #16
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fbd8:	f7ff fe06 	bl	800f7e8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fbdc:	f7fa fe68 	bl	800a8b0 <HAL_GetTick>
 800fbe0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fbe2:	e009      	b.n	800fbf8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fbe4:	f7fa fe64 	bl	800a8b0 <HAL_GetTick>
 800fbe8:	4602      	mov	r2, r0
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	1ad3      	subs	r3, r2, r3
 800fbee:	2b02      	cmp	r3, #2
 800fbf0:	d902      	bls.n	800fbf8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800fbf2:	2303      	movs	r3, #3
 800fbf4:	73fb      	strb	r3, [r7, #15]
      break;
 800fbf6:	e004      	b.n	800fc02 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fbf8:	f7ff fe05 	bl	800f806 <LL_RCC_PLLSAI1_IsReady>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d1f0      	bne.n	800fbe4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800fc02:	7bfb      	ldrb	r3, [r7, #15]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d137      	bne.n	800fc78 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fc08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc0c:	691b      	ldr	r3, [r3, #16]
 800fc0e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	021b      	lsls	r3, r3, #8
 800fc18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fc1c:	4313      	orrs	r3, r2
 800fc1e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800fc20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc24:	691b      	ldr	r3, [r3, #16]
 800fc26:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	689b      	ldr	r3, [r3, #8]
 800fc2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fc32:	4313      	orrs	r3, r2
 800fc34:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fc36:	f7ff fdc8 	bl	800f7ca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc3a:	f7fa fe39 	bl	800a8b0 <HAL_GetTick>
 800fc3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fc40:	e009      	b.n	800fc56 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fc42:	f7fa fe35 	bl	800a8b0 <HAL_GetTick>
 800fc46:	4602      	mov	r2, r0
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	1ad3      	subs	r3, r2, r3
 800fc4c:	2b02      	cmp	r3, #2
 800fc4e:	d902      	bls.n	800fc56 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800fc50:	2303      	movs	r3, #3
 800fc52:	73fb      	strb	r3, [r7, #15]
        break;
 800fc54:	e004      	b.n	800fc60 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fc56:	f7ff fdd6 	bl	800f806 <LL_RCC_PLLSAI1_IsReady>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d1f0      	bne.n	800fc42 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800fc60:	7bfb      	ldrb	r3, [r7, #15]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d108      	bne.n	800fc78 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fc66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc6a:	691a      	ldr	r2, [r3, #16]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fc74:	4313      	orrs	r3, r2
 800fc76:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b084      	sub	sp, #16
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fc8e:	f7ff fdab 	bl	800f7e8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fc92:	f7fa fe0d 	bl	800a8b0 <HAL_GetTick>
 800fc96:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fc98:	e009      	b.n	800fcae <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fc9a:	f7fa fe09 	bl	800a8b0 <HAL_GetTick>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	2b02      	cmp	r3, #2
 800fca6:	d902      	bls.n	800fcae <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800fca8:	2303      	movs	r3, #3
 800fcaa:	73fb      	strb	r3, [r7, #15]
      break;
 800fcac:	e004      	b.n	800fcb8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fcae:	f7ff fdaa 	bl	800f806 <LL_RCC_PLLSAI1_IsReady>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1f0      	bne.n	800fc9a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800fcb8:	7bfb      	ldrb	r3, [r7, #15]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d137      	bne.n	800fd2e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fcbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fcc2:	691b      	ldr	r3, [r3, #16]
 800fcc4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	021b      	lsls	r3, r3, #8
 800fcce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fcd2:	4313      	orrs	r3, r2
 800fcd4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800fcd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fce8:	4313      	orrs	r3, r2
 800fcea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fcec:	f7ff fd6d 	bl	800f7ca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fcf0:	f7fa fdde 	bl	800a8b0 <HAL_GetTick>
 800fcf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fcf6:	e009      	b.n	800fd0c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fcf8:	f7fa fdda 	bl	800a8b0 <HAL_GetTick>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	1ad3      	subs	r3, r2, r3
 800fd02:	2b02      	cmp	r3, #2
 800fd04:	d902      	bls.n	800fd0c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800fd06:	2303      	movs	r3, #3
 800fd08:	73fb      	strb	r3, [r7, #15]
        break;
 800fd0a:	e004      	b.n	800fd16 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fd0c:	f7ff fd7b 	bl	800f806 <LL_RCC_PLLSAI1_IsReady>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	d1f0      	bne.n	800fcf8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800fd16:	7bfb      	ldrb	r3, [r7, #15]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d108      	bne.n	800fd2e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fd1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd20:	691a      	ldr	r2, [r3, #16]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	691b      	ldr	r3, [r3, #16]
 800fd26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fd2a:	4313      	orrs	r3, r2
 800fd2c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3710      	adds	r7, #16
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fd40:	2301      	movs	r3, #1
 800fd42:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d101      	bne.n	800fd4e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	e07a      	b.n	800fe44 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d106      	bne.n	800fd68 <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f7f3 fa4e 	bl	8003204 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2202      	movs	r2, #2
 800fd6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	f003 0310 	and.w	r3, r3, #16
 800fd7a:	2b10      	cmp	r3, #16
 800fd7c:	d058      	beq.n	800fe30 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	22ca      	movs	r2, #202	@ 0xca
 800fd84:	625a      	str	r2, [r3, #36]	@ 0x24
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2253      	movs	r2, #83	@ 0x53
 800fd8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 f882 	bl	800fe98 <RTC_EnterInitMode>
 800fd94:	4603      	mov	r3, r0
 800fd96:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800fd98:	7bfb      	ldrb	r3, [r7, #15]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d12c      	bne.n	800fdf8 <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	689b      	ldr	r3, [r3, #8]
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	6812      	ldr	r2, [r2, #0]
 800fda8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fdac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fdb0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	6899      	ldr	r1, [r3, #8]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	685a      	ldr	r2, [r3, #4]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	691b      	ldr	r3, [r3, #16]
 800fdc0:	431a      	orrs	r2, r3
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	699b      	ldr	r3, [r3, #24]
 800fdc6:	431a      	orrs	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	430a      	orrs	r2, r1
 800fdce:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	68d2      	ldr	r2, [r2, #12]
 800fdd8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	6919      	ldr	r1, [r3, #16]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	689b      	ldr	r3, [r3, #8]
 800fde4:	041a      	lsls	r2, r3, #16
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	430a      	orrs	r2, r1
 800fdec:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f000 f88a 	bl	800ff08 <RTC_ExitInitMode>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d113      	bne.n	800fe26 <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f022 0203 	bic.w	r2, r2, #3
 800fe0c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	69da      	ldr	r2, [r3, #28]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	695b      	ldr	r3, [r3, #20]
 800fe1c:	431a      	orrs	r2, r3
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	430a      	orrs	r2, r1
 800fe24:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	22ff      	movs	r2, #255	@ 0xff
 800fe2c:	625a      	str	r2, [r3, #36]	@ 0x24
 800fe2e:	e001      	b.n	800fe34 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800fe30:	2300      	movs	r3, #0
 800fe32:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800fe34:	7bfb      	ldrb	r3, [r7, #15]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d103      	bne.n	800fe42 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2201      	movs	r2, #1
 800fe3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800fe42:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3710      	adds	r7, #16
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fe54:	2300      	movs	r3, #0
 800fe56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4a0d      	ldr	r2, [pc, #52]	@ (800fe94 <HAL_RTC_WaitForSynchro+0x48>)
 800fe5e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800fe60:	f7fa fd26 	bl	800a8b0 <HAL_GetTick>
 800fe64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fe66:	e009      	b.n	800fe7c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fe68:	f7fa fd22 	bl	800a8b0 <HAL_GetTick>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fe76:	d901      	bls.n	800fe7c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800fe78:	2303      	movs	r3, #3
 800fe7a:	e007      	b.n	800fe8c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	f003 0320 	and.w	r3, r3, #32
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d0ee      	beq.n	800fe68 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800fe8a:	2300      	movs	r3, #0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	0001ff5f 	.word	0x0001ff5f

0800fe98 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fea0:	2300      	movs	r3, #0
 800fea2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800fea4:	2300      	movs	r3, #0
 800fea6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d123      	bne.n	800fefe <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	68da      	ldr	r2, [r3, #12]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800fec4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800fec6:	f7fa fcf3 	bl	800a8b0 <HAL_GetTick>
 800feca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800fecc:	e00d      	b.n	800feea <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fece:	f7fa fcef 	bl	800a8b0 <HAL_GetTick>
 800fed2:	4602      	mov	r2, r0
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	1ad3      	subs	r3, r2, r3
 800fed8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fedc:	d905      	bls.n	800feea <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2204      	movs	r2, #4
 800fee2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800fee6:	2301      	movs	r3, #1
 800fee8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d102      	bne.n	800fefe <RTC_EnterInitMode+0x66>
 800fef8:	7bfb      	ldrb	r3, [r7, #15]
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d1e7      	bne.n	800fece <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800fefe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3710      	adds	r7, #16
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ff10:	2300      	movs	r3, #0
 800ff12:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	68da      	ldr	r2, [r3, #12]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ff22:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	689b      	ldr	r3, [r3, #8]
 800ff2a:	f003 0320 	and.w	r3, r3, #32
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d10b      	bne.n	800ff4a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f7ff ff8a 	bl	800fe4c <HAL_RTC_WaitForSynchro>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d005      	beq.n	800ff4a <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2204      	movs	r2, #4
 800ff42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800ff46:	2301      	movs	r3, #1
 800ff48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ff4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3710      	adds	r7, #16
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b087      	sub	sp, #28
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	60b9      	str	r1, [r7, #8]
 800ff5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800ff60:	4b5f      	ldr	r3, [pc, #380]	@ (80100e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4a5f      	ldr	r2, [pc, #380]	@ (80100e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800ff66:	fba2 2303 	umull	r2, r3, r2, r3
 800ff6a:	0adb      	lsrs	r3, r3, #11
 800ff6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ff70:	fb02 f303 	mul.w	r3, r2, r3
 800ff74:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	d101      	bne.n	800ff84 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 800ff80:	2302      	movs	r3, #2
 800ff82:	e0a7      	b.n	80100d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2201      	movs	r2, #1
 800ff88:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2202      	movs	r2, #2
 800ff90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	22ca      	movs	r2, #202	@ 0xca
 800ff9a:	625a      	str	r2, [r3, #36]	@ 0x24
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	2253      	movs	r2, #83	@ 0x53
 800ffa2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	689b      	ldr	r3, [r3, #8]
 800ffaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d01a      	beq.n	800ffe8 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	3b01      	subs	r3, #1
 800ffb6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d10d      	bne.n	800ffda <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	22ff      	movs	r2, #255	@ 0xff
 800ffc4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2203      	movs	r2, #3
 800ffca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800ffd6:	2303      	movs	r3, #3
 800ffd8:	e07c      	b.n	80100d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	f003 0304 	and.w	r3, r3, #4
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d1e4      	bne.n	800ffb2 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	689a      	ldr	r2, [r3, #8]
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fff6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	68db      	ldr	r3, [r3, #12]
 800fffe:	b2da      	uxtb	r2, r3
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8010008:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801000a:	4b35      	ldr	r3, [pc, #212]	@ (80100e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4a35      	ldr	r2, [pc, #212]	@ (80100e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 8010010:	fba2 2303 	umull	r2, r3, r2, r3
 8010014:	0adb      	lsrs	r3, r3, #11
 8010016:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801001a:	fb02 f303 	mul.w	r3, r2, r3
 801001e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	3b01      	subs	r3, #1
 8010024:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d10d      	bne.n	8010048 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	22ff      	movs	r2, #255	@ 0xff
 8010032:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2203      	movs	r2, #3
 8010038:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	2200      	movs	r2, #0
 8010040:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8010044:	2303      	movs	r3, #3
 8010046:	e045      	b.n	80100d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	f003 0304 	and.w	r3, r3, #4
 8010052:	2b00      	cmp	r3, #0
 8010054:	d0e4      	beq.n	8010020 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	689a      	ldr	r2, [r3, #8]
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f022 0207 	bic.w	r2, r2, #7
 8010064:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	6899      	ldr	r1, [r3, #8]
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	430a      	orrs	r2, r1
 8010074:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	68ba      	ldr	r2, [r7, #8]
 801007c:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801007e:	4b1a      	ldr	r3, [pc, #104]	@ (80100e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8010080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010084:	4a18      	ldr	r2, [pc, #96]	@ (80100e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8010086:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801008a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801008e:	4b16      	ldr	r3, [pc, #88]	@ (80100e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4a15      	ldr	r2, [pc, #84]	@ (80100e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8010094:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010098:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	689a      	ldr	r2, [r3, #8]
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80100a8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	689a      	ldr	r2, [r3, #8]
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80100b8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	22ff      	movs	r2, #255	@ 0xff
 80100c0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	2201      	movs	r2, #1
 80100c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	2200      	movs	r2, #0
 80100ce:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80100d2:	2300      	movs	r3, #0
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	371c      	adds	r7, #28
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr
 80100e0:	2000007c 	.word	0x2000007c
 80100e4:	10624dd3 	.word	0x10624dd3
 80100e8:	58000800 	.word	0x58000800

080100ec <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80100f4:	4b0f      	ldr	r3, [pc, #60]	@ (8010134 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80100f6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80100fa:	60da      	str	r2, [r3, #12]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010106:	2b00      	cmp	r3, #0
 8010108:	d00b      	beq.n	8010122 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	b2da      	uxtb	r2, r3
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 801011a:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f000 f80b 	bl	8010138 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2201      	movs	r2, #1
 8010126:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 801012a:	bf00      	nop
 801012c:	3708      	adds	r7, #8
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	58000800 	.word	0x58000800

08010138 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8010138:	b480      	push	{r7}
 801013a:	b083      	sub	sp, #12
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8010140:	bf00      	nop
 8010142:	370c      	adds	r7, #12
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b084      	sub	sp, #16
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d101      	bne.n	801015e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801015a:	2301      	movs	r3, #1
 801015c:	e095      	b.n	801028a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010162:	2b00      	cmp	r3, #0
 8010164:	d108      	bne.n	8010178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801016e:	d009      	beq.n	8010184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2200      	movs	r2, #0
 8010174:	61da      	str	r2, [r3, #28]
 8010176:	e005      	b.n	8010184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2200      	movs	r2, #0
 8010182:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2200      	movs	r2, #0
 8010188:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010190:	b2db      	uxtb	r3, r3
 8010192:	2b00      	cmp	r3, #0
 8010194:	d106      	bne.n	80101a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2200      	movs	r2, #0
 801019a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7f3 f8d6 	bl	8003350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2202      	movs	r2, #2
 80101a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80101ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80101c4:	d902      	bls.n	80101cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80101c6:	2300      	movs	r3, #0
 80101c8:	60fb      	str	r3, [r7, #12]
 80101ca:	e002      	b.n	80101d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80101cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80101da:	d007      	beq.n	80101ec <HAL_SPI_Init+0xa0>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80101e4:	d002      	beq.n	80101ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2200      	movs	r2, #0
 80101ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	689b      	ldr	r3, [r3, #8]
 80101f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80101fc:	431a      	orrs	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	691b      	ldr	r3, [r3, #16]
 8010202:	f003 0302 	and.w	r3, r3, #2
 8010206:	431a      	orrs	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	695b      	ldr	r3, [r3, #20]
 801020c:	f003 0301 	and.w	r3, r3, #1
 8010210:	431a      	orrs	r2, r3
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	699b      	ldr	r3, [r3, #24]
 8010216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801021a:	431a      	orrs	r2, r3
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	69db      	ldr	r3, [r3, #28]
 8010220:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010224:	431a      	orrs	r2, r3
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6a1b      	ldr	r3, [r3, #32]
 801022a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801022e:	ea42 0103 	orr.w	r1, r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010236:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	430a      	orrs	r2, r1
 8010240:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	699b      	ldr	r3, [r3, #24]
 8010246:	0c1b      	lsrs	r3, r3, #16
 8010248:	f003 0204 	and.w	r2, r3, #4
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010250:	f003 0310 	and.w	r3, r3, #16
 8010254:	431a      	orrs	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801025a:	f003 0308 	and.w	r3, r3, #8
 801025e:	431a      	orrs	r2, r3
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8010268:	ea42 0103 	orr.w	r1, r2, r3
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	430a      	orrs	r2, r1
 8010278:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2200      	movs	r2, #0
 801027e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2201      	movs	r2, #1
 8010284:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8010288:	2300      	movs	r3, #0
}
 801028a:	4618      	mov	r0, r3
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}

08010292 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010292:	b580      	push	{r7, lr}
 8010294:	b088      	sub	sp, #32
 8010296:	af00      	add	r7, sp, #0
 8010298:	60f8      	str	r0, [r7, #12]
 801029a:	60b9      	str	r1, [r7, #8]
 801029c:	603b      	str	r3, [r7, #0]
 801029e:	4613      	mov	r3, r2
 80102a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80102a2:	f7fa fb05 	bl	800a8b0 <HAL_GetTick>
 80102a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80102a8:	88fb      	ldrh	r3, [r7, #6]
 80102aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	2b01      	cmp	r3, #1
 80102b6:	d001      	beq.n	80102bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80102b8:	2302      	movs	r3, #2
 80102ba:	e15c      	b.n	8010576 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d002      	beq.n	80102c8 <HAL_SPI_Transmit+0x36>
 80102c2:	88fb      	ldrh	r3, [r7, #6]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d101      	bne.n	80102cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80102c8:	2301      	movs	r3, #1
 80102ca:	e154      	b.n	8010576 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d101      	bne.n	80102da <HAL_SPI_Transmit+0x48>
 80102d6:	2302      	movs	r3, #2
 80102d8:	e14d      	b.n	8010576 <HAL_SPI_Transmit+0x2e4>
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2201      	movs	r2, #1
 80102de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2203      	movs	r2, #3
 80102e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	2200      	movs	r2, #0
 80102ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	68ba      	ldr	r2, [r7, #8]
 80102f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	88fa      	ldrh	r2, [r7, #6]
 80102fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	88fa      	ldrh	r2, [r7, #6]
 8010300:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2200      	movs	r2, #0
 8010306:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2200      	movs	r2, #0
 801030c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2200      	movs	r2, #0
 8010314:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2200      	movs	r2, #0
 801031c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2200      	movs	r2, #0
 8010322:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801032c:	d10f      	bne.n	801034e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801033c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801034c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010358:	2b40      	cmp	r3, #64	@ 0x40
 801035a:	d007      	beq.n	801036c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801036a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010374:	d952      	bls.n	801041c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d002      	beq.n	8010384 <HAL_SPI_Transmit+0xf2>
 801037e:	8b7b      	ldrh	r3, [r7, #26]
 8010380:	2b01      	cmp	r3, #1
 8010382:	d145      	bne.n	8010410 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010388:	881a      	ldrh	r2, [r3, #0]
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010394:	1c9a      	adds	r2, r3, #2
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801039e:	b29b      	uxth	r3, r3
 80103a0:	3b01      	subs	r3, #1
 80103a2:	b29a      	uxth	r2, r3
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80103a8:	e032      	b.n	8010410 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	689b      	ldr	r3, [r3, #8]
 80103b0:	f003 0302 	and.w	r3, r3, #2
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	d112      	bne.n	80103de <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103bc:	881a      	ldrh	r2, [r3, #0]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103c8:	1c9a      	adds	r2, r3, #2
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	3b01      	subs	r3, #1
 80103d6:	b29a      	uxth	r2, r3
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80103dc:	e018      	b.n	8010410 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103de:	f7fa fa67 	bl	800a8b0 <HAL_GetTick>
 80103e2:	4602      	mov	r2, r0
 80103e4:	69fb      	ldr	r3, [r7, #28]
 80103e6:	1ad3      	subs	r3, r2, r3
 80103e8:	683a      	ldr	r2, [r7, #0]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d803      	bhi.n	80103f6 <HAL_SPI_Transmit+0x164>
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80103f4:	d102      	bne.n	80103fc <HAL_SPI_Transmit+0x16a>
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d109      	bne.n	8010410 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2201      	movs	r2, #1
 8010400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2200      	movs	r2, #0
 8010408:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 801040c:	2303      	movs	r3, #3
 801040e:	e0b2      	b.n	8010576 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010414:	b29b      	uxth	r3, r3
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1c7      	bne.n	80103aa <HAL_SPI_Transmit+0x118>
 801041a:	e083      	b.n	8010524 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d002      	beq.n	801042a <HAL_SPI_Transmit+0x198>
 8010424:	8b7b      	ldrh	r3, [r7, #26]
 8010426:	2b01      	cmp	r3, #1
 8010428:	d177      	bne.n	801051a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801042e:	b29b      	uxth	r3, r3
 8010430:	2b01      	cmp	r3, #1
 8010432:	d912      	bls.n	801045a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010438:	881a      	ldrh	r2, [r3, #0]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010444:	1c9a      	adds	r2, r3, #2
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801044e:	b29b      	uxth	r3, r3
 8010450:	3b02      	subs	r3, #2
 8010452:	b29a      	uxth	r2, r3
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010458:	e05f      	b.n	801051a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	330c      	adds	r3, #12
 8010464:	7812      	ldrb	r2, [r2, #0]
 8010466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801046c:	1c5a      	adds	r2, r3, #1
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010476:	b29b      	uxth	r3, r3
 8010478:	3b01      	subs	r3, #1
 801047a:	b29a      	uxth	r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8010480:	e04b      	b.n	801051a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	689b      	ldr	r3, [r3, #8]
 8010488:	f003 0302 	and.w	r3, r3, #2
 801048c:	2b02      	cmp	r3, #2
 801048e:	d12b      	bne.n	80104e8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010494:	b29b      	uxth	r3, r3
 8010496:	2b01      	cmp	r3, #1
 8010498:	d912      	bls.n	80104c0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801049e:	881a      	ldrh	r2, [r3, #0]
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104aa:	1c9a      	adds	r2, r3, #2
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	3b02      	subs	r3, #2
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80104be:	e02c      	b.n	801051a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	330c      	adds	r3, #12
 80104ca:	7812      	ldrb	r2, [r2, #0]
 80104cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104d2:	1c5a      	adds	r2, r3, #1
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80104dc:	b29b      	uxth	r3, r3
 80104de:	3b01      	subs	r3, #1
 80104e0:	b29a      	uxth	r2, r3
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80104e6:	e018      	b.n	801051a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80104e8:	f7fa f9e2 	bl	800a8b0 <HAL_GetTick>
 80104ec:	4602      	mov	r2, r0
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	683a      	ldr	r2, [r7, #0]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d803      	bhi.n	8010500 <HAL_SPI_Transmit+0x26e>
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80104fe:	d102      	bne.n	8010506 <HAL_SPI_Transmit+0x274>
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d109      	bne.n	801051a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2201      	movs	r2, #1
 801050a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2200      	movs	r2, #0
 8010512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8010516:	2303      	movs	r3, #3
 8010518:	e02d      	b.n	8010576 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801051e:	b29b      	uxth	r3, r3
 8010520:	2b00      	cmp	r3, #0
 8010522:	d1ae      	bne.n	8010482 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010524:	69fa      	ldr	r2, [r7, #28]
 8010526:	6839      	ldr	r1, [r7, #0]
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f000 fa67 	bl	80109fc <SPI_EndRxTxTransaction>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d002      	beq.n	801053a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2220      	movs	r2, #32
 8010538:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	689b      	ldr	r3, [r3, #8]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d10a      	bne.n	8010558 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010542:	2300      	movs	r3, #0
 8010544:	617b      	str	r3, [r7, #20]
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	617b      	str	r3, [r7, #20]
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	689b      	ldr	r3, [r3, #8]
 8010554:	617b      	str	r3, [r7, #20]
 8010556:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2201      	movs	r2, #1
 801055c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2200      	movs	r2, #0
 8010564:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801056c:	2b00      	cmp	r3, #0
 801056e:	d001      	beq.n	8010574 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8010570:	2301      	movs	r3, #1
 8010572:	e000      	b.n	8010576 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8010574:	2300      	movs	r3, #0
  }
}
 8010576:	4618      	mov	r0, r3
 8010578:	3720      	adds	r7, #32
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
	...

08010580 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b088      	sub	sp, #32
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	689b      	ldr	r3, [r3, #8]
 8010596:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010598:	69bb      	ldr	r3, [r7, #24]
 801059a:	099b      	lsrs	r3, r3, #6
 801059c:	f003 0301 	and.w	r3, r3, #1
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d10f      	bne.n	80105c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d00a      	beq.n	80105c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	099b      	lsrs	r3, r3, #6
 80105b2:	f003 0301 	and.w	r3, r3, #1
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d004      	beq.n	80105c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	4798      	blx	r3
    return;
 80105c2:	e0d7      	b.n	8010774 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80105c4:	69bb      	ldr	r3, [r7, #24]
 80105c6:	085b      	lsrs	r3, r3, #1
 80105c8:	f003 0301 	and.w	r3, r3, #1
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d00a      	beq.n	80105e6 <HAL_SPI_IRQHandler+0x66>
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	09db      	lsrs	r3, r3, #7
 80105d4:	f003 0301 	and.w	r3, r3, #1
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d004      	beq.n	80105e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	4798      	blx	r3
    return;
 80105e4:	e0c6      	b.n	8010774 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80105e6:	69bb      	ldr	r3, [r7, #24]
 80105e8:	095b      	lsrs	r3, r3, #5
 80105ea:	f003 0301 	and.w	r3, r3, #1
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d10c      	bne.n	801060c <HAL_SPI_IRQHandler+0x8c>
 80105f2:	69bb      	ldr	r3, [r7, #24]
 80105f4:	099b      	lsrs	r3, r3, #6
 80105f6:	f003 0301 	and.w	r3, r3, #1
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d106      	bne.n	801060c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	0a1b      	lsrs	r3, r3, #8
 8010602:	f003 0301 	and.w	r3, r3, #1
 8010606:	2b00      	cmp	r3, #0
 8010608:	f000 80b4 	beq.w	8010774 <HAL_SPI_IRQHandler+0x1f4>
 801060c:	69fb      	ldr	r3, [r7, #28]
 801060e:	095b      	lsrs	r3, r3, #5
 8010610:	f003 0301 	and.w	r3, r3, #1
 8010614:	2b00      	cmp	r3, #0
 8010616:	f000 80ad 	beq.w	8010774 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801061a:	69bb      	ldr	r3, [r7, #24]
 801061c:	099b      	lsrs	r3, r3, #6
 801061e:	f003 0301 	and.w	r3, r3, #1
 8010622:	2b00      	cmp	r3, #0
 8010624:	d023      	beq.n	801066e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b03      	cmp	r3, #3
 8010630:	d011      	beq.n	8010656 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010636:	f043 0204 	orr.w	r2, r3, #4
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801063e:	2300      	movs	r3, #0
 8010640:	617b      	str	r3, [r7, #20]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	617b      	str	r3, [r7, #20]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	689b      	ldr	r3, [r3, #8]
 8010650:	617b      	str	r3, [r7, #20]
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	e00b      	b.n	801066e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010656:	2300      	movs	r3, #0
 8010658:	613b      	str	r3, [r7, #16]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	613b      	str	r3, [r7, #16]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	689b      	ldr	r3, [r3, #8]
 8010668:	613b      	str	r3, [r7, #16]
 801066a:	693b      	ldr	r3, [r7, #16]
        return;
 801066c:	e082      	b.n	8010774 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	095b      	lsrs	r3, r3, #5
 8010672:	f003 0301 	and.w	r3, r3, #1
 8010676:	2b00      	cmp	r3, #0
 8010678:	d014      	beq.n	80106a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801067e:	f043 0201 	orr.w	r2, r3, #1
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010686:	2300      	movs	r3, #0
 8010688:	60fb      	str	r3, [r7, #12]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	689b      	ldr	r3, [r3, #8]
 8010690:	60fb      	str	r3, [r7, #12]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	681a      	ldr	r2, [r3, #0]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80106a0:	601a      	str	r2, [r3, #0]
 80106a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80106a4:	69bb      	ldr	r3, [r7, #24]
 80106a6:	0a1b      	lsrs	r3, r3, #8
 80106a8:	f003 0301 	and.w	r3, r3, #1
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d00c      	beq.n	80106ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106b4:	f043 0208 	orr.w	r2, r3, #8
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80106bc:	2300      	movs	r3, #0
 80106be:	60bb      	str	r3, [r7, #8]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	60bb      	str	r3, [r7, #8]
 80106c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d04f      	beq.n	8010772 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	685a      	ldr	r2, [r3, #4]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80106e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2201      	movs	r2, #1
 80106e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	f003 0302 	and.w	r3, r3, #2
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d104      	bne.n	80106fe <HAL_SPI_IRQHandler+0x17e>
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	f003 0301 	and.w	r3, r3, #1
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d034      	beq.n	8010768 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	685a      	ldr	r2, [r3, #4]
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f022 0203 	bic.w	r2, r2, #3
 801070c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010712:	2b00      	cmp	r3, #0
 8010714:	d011      	beq.n	801073a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801071a:	4a18      	ldr	r2, [pc, #96]	@ (801077c <HAL_SPI_IRQHandler+0x1fc>)
 801071c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010722:	4618      	mov	r0, r3
 8010724:	f7fb fcd7 	bl	800c0d6 <HAL_DMA_Abort_IT>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	d005      	beq.n	801073a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010732:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801073e:	2b00      	cmp	r3, #0
 8010740:	d016      	beq.n	8010770 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010746:	4a0d      	ldr	r2, [pc, #52]	@ (801077c <HAL_SPI_IRQHandler+0x1fc>)
 8010748:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801074e:	4618      	mov	r0, r3
 8010750:	f7fb fcc1 	bl	800c0d6 <HAL_DMA_Abort_IT>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d00a      	beq.n	8010770 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801075e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8010766:	e003      	b.n	8010770 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f000 f809 	bl	8010780 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801076e:	e000      	b.n	8010772 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8010770:	bf00      	nop
    return;
 8010772:	bf00      	nop
  }
}
 8010774:	3720      	adds	r7, #32
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	08010795 	.word	0x08010795

08010780 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010788:	bf00      	nop
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2200      	movs	r2, #0
 80107a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2200      	movs	r2, #0
 80107ae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80107b0:	68f8      	ldr	r0, [r7, #12]
 80107b2:	f7ff ffe5 	bl	8010780 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80107b6:	bf00      	nop
 80107b8:	3710      	adds	r7, #16
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
	...

080107c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b088      	sub	sp, #32
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	603b      	str	r3, [r7, #0]
 80107cc:	4613      	mov	r3, r2
 80107ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80107d0:	f7fa f86e 	bl	800a8b0 <HAL_GetTick>
 80107d4:	4602      	mov	r2, r0
 80107d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107d8:	1a9b      	subs	r3, r3, r2
 80107da:	683a      	ldr	r2, [r7, #0]
 80107dc:	4413      	add	r3, r2
 80107de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80107e0:	f7fa f866 	bl	800a8b0 <HAL_GetTick>
 80107e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80107e6:	4b39      	ldr	r3, [pc, #228]	@ (80108cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	015b      	lsls	r3, r3, #5
 80107ec:	0d1b      	lsrs	r3, r3, #20
 80107ee:	69fa      	ldr	r2, [r7, #28]
 80107f0:	fb02 f303 	mul.w	r3, r2, r3
 80107f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80107f6:	e054      	b.n	80108a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80107fe:	d050      	beq.n	80108a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010800:	f7fa f856 	bl	800a8b0 <HAL_GetTick>
 8010804:	4602      	mov	r2, r0
 8010806:	69bb      	ldr	r3, [r7, #24]
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	69fa      	ldr	r2, [r7, #28]
 801080c:	429a      	cmp	r2, r3
 801080e:	d902      	bls.n	8010816 <SPI_WaitFlagStateUntilTimeout+0x56>
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d13d      	bne.n	8010892 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	685a      	ldr	r2, [r3, #4]
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010824:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801082e:	d111      	bne.n	8010854 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	689b      	ldr	r3, [r3, #8]
 8010834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010838:	d004      	beq.n	8010844 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010842:	d107      	bne.n	8010854 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010852:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801085c:	d10f      	bne.n	801087e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801086c:	601a      	str	r2, [r3, #0]
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801087c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2201      	movs	r2, #1
 8010882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2200      	movs	r2, #0
 801088a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801088e:	2303      	movs	r3, #3
 8010890:	e017      	b.n	80108c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d101      	bne.n	801089c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010898:	2300      	movs	r3, #0
 801089a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	3b01      	subs	r3, #1
 80108a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	689a      	ldr	r2, [r3, #8]
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	4013      	ands	r3, r2
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	bf0c      	ite	eq
 80108b2:	2301      	moveq	r3, #1
 80108b4:	2300      	movne	r3, #0
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	461a      	mov	r2, r3
 80108ba:	79fb      	ldrb	r3, [r7, #7]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d19b      	bne.n	80107f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80108c0:	2300      	movs	r3, #0
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3720      	adds	r7, #32
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	2000007c 	.word	0x2000007c

080108d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b08a      	sub	sp, #40	@ 0x28
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	60f8      	str	r0, [r7, #12]
 80108d8:	60b9      	str	r1, [r7, #8]
 80108da:	607a      	str	r2, [r7, #4]
 80108dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80108de:	2300      	movs	r3, #0
 80108e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80108e2:	f7f9 ffe5 	bl	800a8b0 <HAL_GetTick>
 80108e6:	4602      	mov	r2, r0
 80108e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ea:	1a9b      	subs	r3, r3, r2
 80108ec:	683a      	ldr	r2, [r7, #0]
 80108ee:	4413      	add	r3, r2
 80108f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80108f2:	f7f9 ffdd 	bl	800a8b0 <HAL_GetTick>
 80108f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	330c      	adds	r3, #12
 80108fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8010900:	4b3d      	ldr	r3, [pc, #244]	@ (80109f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8010902:	681a      	ldr	r2, [r3, #0]
 8010904:	4613      	mov	r3, r2
 8010906:	009b      	lsls	r3, r3, #2
 8010908:	4413      	add	r3, r2
 801090a:	00da      	lsls	r2, r3, #3
 801090c:	1ad3      	subs	r3, r2, r3
 801090e:	0d1b      	lsrs	r3, r3, #20
 8010910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010912:	fb02 f303 	mul.w	r3, r2, r3
 8010916:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8010918:	e060      	b.n	80109dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8010920:	d107      	bne.n	8010932 <SPI_WaitFifoStateUntilTimeout+0x62>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d104      	bne.n	8010932 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	b2db      	uxtb	r3, r3
 801092e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8010930:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010938:	d050      	beq.n	80109dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801093a:	f7f9 ffb9 	bl	800a8b0 <HAL_GetTick>
 801093e:	4602      	mov	r2, r0
 8010940:	6a3b      	ldr	r3, [r7, #32]
 8010942:	1ad3      	subs	r3, r2, r3
 8010944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010946:	429a      	cmp	r2, r3
 8010948:	d902      	bls.n	8010950 <SPI_WaitFifoStateUntilTimeout+0x80>
 801094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801094c:	2b00      	cmp	r3, #0
 801094e:	d13d      	bne.n	80109cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	685a      	ldr	r2, [r3, #4]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801095e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010968:	d111      	bne.n	801098e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	689b      	ldr	r3, [r3, #8]
 801096e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010972:	d004      	beq.n	801097e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	689b      	ldr	r3, [r3, #8]
 8010978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801097c:	d107      	bne.n	801098e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801098c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010996:	d10f      	bne.n	80109b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80109a6:	601a      	str	r2, [r3, #0]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80109b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2201      	movs	r2, #1
 80109bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80109c8:	2303      	movs	r3, #3
 80109ca:	e010      	b.n	80109ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80109cc:	69bb      	ldr	r3, [r7, #24]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d101      	bne.n	80109d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80109d2:	2300      	movs	r3, #0
 80109d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80109d6:	69bb      	ldr	r3, [r7, #24]
 80109d8:	3b01      	subs	r3, #1
 80109da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	689a      	ldr	r2, [r3, #8]
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	4013      	ands	r3, r2
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d196      	bne.n	801091a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80109ec:	2300      	movs	r3, #0
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3728      	adds	r7, #40	@ 0x28
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}
 80109f6:	bf00      	nop
 80109f8:	2000007c 	.word	0x2000007c

080109fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b086      	sub	sp, #24
 8010a00:	af02      	add	r7, sp, #8
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	9300      	str	r3, [sp, #0]
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8010a14:	68f8      	ldr	r0, [r7, #12]
 8010a16:	f7ff ff5b 	bl	80108d0 <SPI_WaitFifoStateUntilTimeout>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d007      	beq.n	8010a30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010a24:	f043 0220 	orr.w	r2, r3, #32
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8010a2c:	2303      	movs	r3, #3
 8010a2e:	e027      	b.n	8010a80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	9300      	str	r3, [sp, #0]
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	2200      	movs	r2, #0
 8010a38:	2180      	movs	r1, #128	@ 0x80
 8010a3a:	68f8      	ldr	r0, [r7, #12]
 8010a3c:	f7ff fec0 	bl	80107c0 <SPI_WaitFlagStateUntilTimeout>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d007      	beq.n	8010a56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010a4a:	f043 0220 	orr.w	r2, r3, #32
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8010a52:	2303      	movs	r3, #3
 8010a54:	e014      	b.n	8010a80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	9300      	str	r3, [sp, #0]
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8010a62:	68f8      	ldr	r0, [r7, #12]
 8010a64:	f7ff ff34 	bl	80108d0 <SPI_WaitFifoStateUntilTimeout>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d007      	beq.n	8010a7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010a72:	f043 0220 	orr.w	r2, r3, #32
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8010a7a:	2303      	movs	r3, #3
 8010a7c:	e000      	b.n	8010a80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8010a7e:	2300      	movs	r3, #0
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3710      	adds	r7, #16
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d101      	bne.n	8010a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010a96:	2301      	movs	r3, #1
 8010a98:	e049      	b.n	8010b2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d106      	bne.n	8010ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f7f2 ff7c 	bl	80039ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2202      	movs	r2, #2
 8010ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	3304      	adds	r3, #4
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	4610      	mov	r0, r2
 8010ac8:	f000 fb08 	bl	80110dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2201      	movs	r2, #1
 8010ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2201      	movs	r2, #1
 8010af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2201      	movs	r2, #1
 8010af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2201      	movs	r2, #1
 8010b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2201      	movs	r2, #1
 8010b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2201      	movs	r2, #1
 8010b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2201      	movs	r2, #1
 8010b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2201      	movs	r2, #1
 8010b20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2201      	movs	r2, #1
 8010b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010b2c:	2300      	movs	r3, #0
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b082      	sub	sp, #8
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2202      	movs	r2, #2
 8010b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	6a1b      	ldr	r3, [r3, #32]
 8010b4c:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 8010b50:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d10f      	bne.n	8010b78 <HAL_TIM_Base_DeInit+0x42>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	6a1a      	ldr	r2, [r3, #32]
 8010b5e:	f240 4344 	movw	r3, #1092	@ 0x444
 8010b62:	4013      	ands	r3, r2
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d107      	bne.n	8010b78 <HAL_TIM_Base_DeInit+0x42>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f022 0201 	bic.w	r2, r2, #1
 8010b76:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7f2 ff43 	bl	8003a04 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2200      	movs	r2, #0
 8010b82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2200      	movs	r2, #0
 8010b92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2200      	movs	r2, #0
 8010be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010be6:	2300      	movs	r3, #0
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3708      	adds	r7, #8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b085      	sub	sp, #20
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	2b01      	cmp	r3, #1
 8010c02:	d001      	beq.n	8010c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010c04:	2301      	movs	r3, #1
 8010c06:	e036      	b.n	8010c76 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2202      	movs	r2, #2
 8010c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	68da      	ldr	r2, [r3, #12]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f042 0201 	orr.w	r2, r2, #1
 8010c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	4a17      	ldr	r2, [pc, #92]	@ (8010c84 <HAL_TIM_Base_Start_IT+0x94>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d004      	beq.n	8010c34 <HAL_TIM_Base_Start_IT+0x44>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c32:	d115      	bne.n	8010c60 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	689a      	ldr	r2, [r3, #8]
 8010c3a:	4b13      	ldr	r3, [pc, #76]	@ (8010c88 <HAL_TIM_Base_Start_IT+0x98>)
 8010c3c:	4013      	ands	r3, r2
 8010c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2b06      	cmp	r3, #6
 8010c44:	d015      	beq.n	8010c72 <HAL_TIM_Base_Start_IT+0x82>
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c4c:	d011      	beq.n	8010c72 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	f042 0201 	orr.w	r2, r2, #1
 8010c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c5e:	e008      	b.n	8010c72 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	681a      	ldr	r2, [r3, #0]
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f042 0201 	orr.w	r2, r2, #1
 8010c6e:	601a      	str	r2, [r3, #0]
 8010c70:	e000      	b.n	8010c74 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010c74:	2300      	movs	r3, #0
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3714      	adds	r7, #20
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr
 8010c82:	bf00      	nop
 8010c84:	40012c00 	.word	0x40012c00
 8010c88:	00010007 	.word	0x00010007

08010c8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b083      	sub	sp, #12
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	68da      	ldr	r2, [r3, #12]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f022 0201 	bic.w	r2, r2, #1
 8010ca2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	6a1b      	ldr	r3, [r3, #32]
 8010caa:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 8010cae:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d10f      	bne.n	8010cd6 <HAL_TIM_Base_Stop_IT+0x4a>
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	6a1a      	ldr	r2, [r3, #32]
 8010cbc:	f240 4344 	movw	r3, #1092	@ 0x444
 8010cc0:	4013      	ands	r3, r2
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d107      	bne.n	8010cd6 <HAL_TIM_Base_Stop_IT+0x4a>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	f022 0201 	bic.w	r2, r2, #1
 8010cd4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2201      	movs	r2, #1
 8010cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8010cde:	2300      	movs	r3, #0
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	370c      	adds	r7, #12
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr

08010cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	691b      	ldr	r3, [r3, #16]
 8010d02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	f003 0302 	and.w	r3, r3, #2
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d020      	beq.n	8010d50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f003 0302 	and.w	r3, r3, #2
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d01b      	beq.n	8010d50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	f06f 0202 	mvn.w	r2, #2
 8010d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2201      	movs	r2, #1
 8010d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	699b      	ldr	r3, [r3, #24]
 8010d2e:	f003 0303 	and.w	r3, r3, #3
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d003      	beq.n	8010d3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f000 f9b2 	bl	80110a0 <HAL_TIM_IC_CaptureCallback>
 8010d3c:	e005      	b.n	8010d4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f000 f9a4 	bl	801108c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 f9b5 	bl	80110b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	f003 0304 	and.w	r3, r3, #4
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d020      	beq.n	8010d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	f003 0304 	and.w	r3, r3, #4
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d01b      	beq.n	8010d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f06f 0204 	mvn.w	r2, #4
 8010d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2202      	movs	r2, #2
 8010d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	699b      	ldr	r3, [r3, #24]
 8010d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d003      	beq.n	8010d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f000 f98c 	bl	80110a0 <HAL_TIM_IC_CaptureCallback>
 8010d88:	e005      	b.n	8010d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f000 f97e 	bl	801108c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f000 f98f 	bl	80110b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	f003 0308 	and.w	r3, r3, #8
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d020      	beq.n	8010de8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	f003 0308 	and.w	r3, r3, #8
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d01b      	beq.n	8010de8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f06f 0208 	mvn.w	r2, #8
 8010db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2204      	movs	r2, #4
 8010dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	69db      	ldr	r3, [r3, #28]
 8010dc6:	f003 0303 	and.w	r3, r3, #3
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d003      	beq.n	8010dd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f000 f966 	bl	80110a0 <HAL_TIM_IC_CaptureCallback>
 8010dd4:	e005      	b.n	8010de2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f000 f958 	bl	801108c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 f969 	bl	80110b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2200      	movs	r2, #0
 8010de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	f003 0310 	and.w	r3, r3, #16
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d020      	beq.n	8010e34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f003 0310 	and.w	r3, r3, #16
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d01b      	beq.n	8010e34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f06f 0210 	mvn.w	r2, #16
 8010e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2208      	movs	r2, #8
 8010e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	69db      	ldr	r3, [r3, #28]
 8010e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d003      	beq.n	8010e22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 f940 	bl	80110a0 <HAL_TIM_IC_CaptureCallback>
 8010e20:	e005      	b.n	8010e2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 f932 	bl	801108c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f000 f943 	bl	80110b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2200      	movs	r2, #0
 8010e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	f003 0301 	and.w	r3, r3, #1
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d00c      	beq.n	8010e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f003 0301 	and.w	r3, r3, #1
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d007      	beq.n	8010e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	f06f 0201 	mvn.w	r2, #1
 8010e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f7f1 fd7a 	bl	800294c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d104      	bne.n	8010e6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d00c      	beq.n	8010e86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d007      	beq.n	8010e86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8010e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f000 fa9b 	bl	80113bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d00c      	beq.n	8010eaa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d007      	beq.n	8010eaa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f000 fa93 	bl	80113d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d00c      	beq.n	8010ece <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d007      	beq.n	8010ece <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f000 f8fd 	bl	80110c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	f003 0320 	and.w	r3, r3, #32
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d00c      	beq.n	8010ef2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f003 0320 	and.w	r3, r3, #32
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d007      	beq.n	8010ef2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f06f 0220 	mvn.w	r2, #32
 8010eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 fa5b 	bl	80113a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010ef2:	bf00      	nop
 8010ef4:	3710      	adds	r7, #16
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}

08010efa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010efa:	b580      	push	{r7, lr}
 8010efc:	b084      	sub	sp, #16
 8010efe:	af00      	add	r7, sp, #0
 8010f00:	6078      	str	r0, [r7, #4]
 8010f02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010f04:	2300      	movs	r3, #0
 8010f06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d101      	bne.n	8010f16 <HAL_TIM_ConfigClockSource+0x1c>
 8010f12:	2302      	movs	r3, #2
 8010f14:	e0b6      	b.n	8011084 <HAL_TIM_ConfigClockSource+0x18a>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2201      	movs	r2, #1
 8010f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2202      	movs	r2, #2
 8010f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	689b      	ldr	r3, [r3, #8]
 8010f2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8010f34:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010f38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010f40:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010f52:	d03e      	beq.n	8010fd2 <HAL_TIM_ConfigClockSource+0xd8>
 8010f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010f58:	f200 8087 	bhi.w	801106a <HAL_TIM_ConfigClockSource+0x170>
 8010f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010f60:	f000 8086 	beq.w	8011070 <HAL_TIM_ConfigClockSource+0x176>
 8010f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010f68:	d87f      	bhi.n	801106a <HAL_TIM_ConfigClockSource+0x170>
 8010f6a:	2b70      	cmp	r3, #112	@ 0x70
 8010f6c:	d01a      	beq.n	8010fa4 <HAL_TIM_ConfigClockSource+0xaa>
 8010f6e:	2b70      	cmp	r3, #112	@ 0x70
 8010f70:	d87b      	bhi.n	801106a <HAL_TIM_ConfigClockSource+0x170>
 8010f72:	2b60      	cmp	r3, #96	@ 0x60
 8010f74:	d050      	beq.n	8011018 <HAL_TIM_ConfigClockSource+0x11e>
 8010f76:	2b60      	cmp	r3, #96	@ 0x60
 8010f78:	d877      	bhi.n	801106a <HAL_TIM_ConfigClockSource+0x170>
 8010f7a:	2b50      	cmp	r3, #80	@ 0x50
 8010f7c:	d03c      	beq.n	8010ff8 <HAL_TIM_ConfigClockSource+0xfe>
 8010f7e:	2b50      	cmp	r3, #80	@ 0x50
 8010f80:	d873      	bhi.n	801106a <HAL_TIM_ConfigClockSource+0x170>
 8010f82:	2b40      	cmp	r3, #64	@ 0x40
 8010f84:	d058      	beq.n	8011038 <HAL_TIM_ConfigClockSource+0x13e>
 8010f86:	2b40      	cmp	r3, #64	@ 0x40
 8010f88:	d86f      	bhi.n	801106a <HAL_TIM_ConfigClockSource+0x170>
 8010f8a:	2b30      	cmp	r3, #48	@ 0x30
 8010f8c:	d064      	beq.n	8011058 <HAL_TIM_ConfigClockSource+0x15e>
 8010f8e:	2b30      	cmp	r3, #48	@ 0x30
 8010f90:	d86b      	bhi.n	801106a <HAL_TIM_ConfigClockSource+0x170>
 8010f92:	2b20      	cmp	r3, #32
 8010f94:	d060      	beq.n	8011058 <HAL_TIM_ConfigClockSource+0x15e>
 8010f96:	2b20      	cmp	r3, #32
 8010f98:	d867      	bhi.n	801106a <HAL_TIM_ConfigClockSource+0x170>
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d05c      	beq.n	8011058 <HAL_TIM_ConfigClockSource+0x15e>
 8010f9e:	2b10      	cmp	r3, #16
 8010fa0:	d05a      	beq.n	8011058 <HAL_TIM_ConfigClockSource+0x15e>
 8010fa2:	e062      	b.n	801106a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010fb4:	f000 f978 	bl	80112a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	689b      	ldr	r3, [r3, #8]
 8010fbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010fc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	68ba      	ldr	r2, [r7, #8]
 8010fce:	609a      	str	r2, [r3, #8]
      break;
 8010fd0:	e04f      	b.n	8011072 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010fe2:	f000 f961 	bl	80112a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	689a      	ldr	r2, [r3, #8]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010ff4:	609a      	str	r2, [r3, #8]
      break;
 8010ff6:	e03c      	b.n	8011072 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011004:	461a      	mov	r2, r3
 8011006:	f000 f8d3 	bl	80111b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2150      	movs	r1, #80	@ 0x50
 8011010:	4618      	mov	r0, r3
 8011012:	f000 f92c 	bl	801126e <TIM_ITRx_SetConfig>
      break;
 8011016:	e02c      	b.n	8011072 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011024:	461a      	mov	r2, r3
 8011026:	f000 f8f2 	bl	801120e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	2160      	movs	r1, #96	@ 0x60
 8011030:	4618      	mov	r0, r3
 8011032:	f000 f91c 	bl	801126e <TIM_ITRx_SetConfig>
      break;
 8011036:	e01c      	b.n	8011072 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011044:	461a      	mov	r2, r3
 8011046:	f000 f8b3 	bl	80111b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	2140      	movs	r1, #64	@ 0x40
 8011050:	4618      	mov	r0, r3
 8011052:	f000 f90c 	bl	801126e <TIM_ITRx_SetConfig>
      break;
 8011056:	e00c      	b.n	8011072 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4619      	mov	r1, r3
 8011062:	4610      	mov	r0, r2
 8011064:	f000 f903 	bl	801126e <TIM_ITRx_SetConfig>
      break;
 8011068:	e003      	b.n	8011072 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801106a:	2301      	movs	r3, #1
 801106c:	73fb      	strb	r3, [r7, #15]
      break;
 801106e:	e000      	b.n	8011072 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8011070:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2201      	movs	r2, #1
 8011076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2200      	movs	r2, #0
 801107e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011082:	7bfb      	ldrb	r3, [r7, #15]
}
 8011084:	4618      	mov	r0, r3
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801108c:	b480      	push	{r7}
 801108e:	b083      	sub	sp, #12
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011094:	bf00      	nop
 8011096:	370c      	adds	r7, #12
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr

080110a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80110a8:	bf00      	nop
 80110aa:	370c      	adds	r7, #12
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr

080110b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80110b4:	b480      	push	{r7}
 80110b6:	b083      	sub	sp, #12
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80110bc:	bf00      	nop
 80110be:	370c      	adds	r7, #12
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80110d0:	bf00      	nop
 80110d2:	370c      	adds	r7, #12
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	4a2d      	ldr	r2, [pc, #180]	@ (80111a4 <TIM_Base_SetConfig+0xc8>)
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d003      	beq.n	80110fc <TIM_Base_SetConfig+0x20>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80110fa:	d108      	bne.n	801110e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	685b      	ldr	r3, [r3, #4]
 8011108:	68fa      	ldr	r2, [r7, #12]
 801110a:	4313      	orrs	r3, r2
 801110c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	4a24      	ldr	r2, [pc, #144]	@ (80111a4 <TIM_Base_SetConfig+0xc8>)
 8011112:	4293      	cmp	r3, r2
 8011114:	d00b      	beq.n	801112e <TIM_Base_SetConfig+0x52>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801111c:	d007      	beq.n	801112e <TIM_Base_SetConfig+0x52>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	4a21      	ldr	r2, [pc, #132]	@ (80111a8 <TIM_Base_SetConfig+0xcc>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d003      	beq.n	801112e <TIM_Base_SetConfig+0x52>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4a20      	ldr	r2, [pc, #128]	@ (80111ac <TIM_Base_SetConfig+0xd0>)
 801112a:	4293      	cmp	r3, r2
 801112c:	d108      	bne.n	8011140 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	68fa      	ldr	r2, [r7, #12]
 801113c:	4313      	orrs	r3, r2
 801113e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	695b      	ldr	r3, [r3, #20]
 801114a:	4313      	orrs	r3, r2
 801114c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	689a      	ldr	r2, [r3, #8]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4a10      	ldr	r2, [pc, #64]	@ (80111a4 <TIM_Base_SetConfig+0xc8>)
 8011162:	4293      	cmp	r3, r2
 8011164:	d007      	beq.n	8011176 <TIM_Base_SetConfig+0x9a>
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	4a0f      	ldr	r2, [pc, #60]	@ (80111a8 <TIM_Base_SetConfig+0xcc>)
 801116a:	4293      	cmp	r3, r2
 801116c:	d003      	beq.n	8011176 <TIM_Base_SetConfig+0x9a>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	4a0e      	ldr	r2, [pc, #56]	@ (80111ac <TIM_Base_SetConfig+0xd0>)
 8011172:	4293      	cmp	r3, r2
 8011174:	d103      	bne.n	801117e <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	691a      	ldr	r2, [r3, #16]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f043 0204 	orr.w	r2, r3, #4
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2201      	movs	r2, #1
 801118e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	68fa      	ldr	r2, [r7, #12]
 8011194:	601a      	str	r2, [r3, #0]
}
 8011196:	bf00      	nop
 8011198:	3714      	adds	r7, #20
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	40012c00 	.word	0x40012c00
 80111a8:	40014400 	.word	0x40014400
 80111ac:	40014800 	.word	0x40014800

080111b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80111b0:	b480      	push	{r7}
 80111b2:	b087      	sub	sp, #28
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	60f8      	str	r0, [r7, #12]
 80111b8:	60b9      	str	r1, [r7, #8]
 80111ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	6a1b      	ldr	r3, [r3, #32]
 80111c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	6a1b      	ldr	r3, [r3, #32]
 80111c6:	f023 0201 	bic.w	r2, r3, #1
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	699b      	ldr	r3, [r3, #24]
 80111d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80111da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	011b      	lsls	r3, r3, #4
 80111e0:	693a      	ldr	r2, [r7, #16]
 80111e2:	4313      	orrs	r3, r2
 80111e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	f023 030a 	bic.w	r3, r3, #10
 80111ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80111ee:	697a      	ldr	r2, [r7, #20]
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	4313      	orrs	r3, r2
 80111f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	693a      	ldr	r2, [r7, #16]
 80111fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	697a      	ldr	r2, [r7, #20]
 8011200:	621a      	str	r2, [r3, #32]
}
 8011202:	bf00      	nop
 8011204:	371c      	adds	r7, #28
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr

0801120e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801120e:	b480      	push	{r7}
 8011210:	b087      	sub	sp, #28
 8011212:	af00      	add	r7, sp, #0
 8011214:	60f8      	str	r0, [r7, #12]
 8011216:	60b9      	str	r1, [r7, #8]
 8011218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	6a1b      	ldr	r3, [r3, #32]
 801121e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	6a1b      	ldr	r3, [r3, #32]
 8011224:	f023 0210 	bic.w	r2, r3, #16
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	699b      	ldr	r3, [r3, #24]
 8011230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	031b      	lsls	r3, r3, #12
 801123e:	693a      	ldr	r2, [r7, #16]
 8011240:	4313      	orrs	r3, r2
 8011242:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801124a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	011b      	lsls	r3, r3, #4
 8011250:	697a      	ldr	r2, [r7, #20]
 8011252:	4313      	orrs	r3, r2
 8011254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	693a      	ldr	r2, [r7, #16]
 801125a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	697a      	ldr	r2, [r7, #20]
 8011260:	621a      	str	r2, [r3, #32]
}
 8011262:	bf00      	nop
 8011264:	371c      	adds	r7, #28
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr

0801126e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801126e:	b480      	push	{r7}
 8011270:	b085      	sub	sp, #20
 8011272:	af00      	add	r7, sp, #0
 8011274:	6078      	str	r0, [r7, #4]
 8011276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	689b      	ldr	r3, [r3, #8]
 801127c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8011284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801128a:	683a      	ldr	r2, [r7, #0]
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	4313      	orrs	r3, r2
 8011290:	f043 0307 	orr.w	r3, r3, #7
 8011294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	68fa      	ldr	r2, [r7, #12]
 801129a:	609a      	str	r2, [r3, #8]
}
 801129c:	bf00      	nop
 801129e:	3714      	adds	r7, #20
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b087      	sub	sp, #28
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	607a      	str	r2, [r7, #4]
 80112b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	689b      	ldr	r3, [r3, #8]
 80112ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80112c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	021a      	lsls	r2, r3, #8
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	431a      	orrs	r2, r3
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	4313      	orrs	r3, r2
 80112d0:	697a      	ldr	r2, [r7, #20]
 80112d2:	4313      	orrs	r3, r2
 80112d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	697a      	ldr	r2, [r7, #20]
 80112da:	609a      	str	r2, [r3, #8]
}
 80112dc:	bf00      	nop
 80112de:	371c      	adds	r7, #28
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d101      	bne.n	8011300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80112fc:	2302      	movs	r3, #2
 80112fe:	e04a      	b.n	8011396 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2201      	movs	r2, #1
 8011304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2202      	movs	r2, #2
 801130c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	689b      	ldr	r3, [r3, #8]
 801131e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	4a1f      	ldr	r2, [pc, #124]	@ (80113a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8011326:	4293      	cmp	r3, r2
 8011328:	d108      	bne.n	801133c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011330:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	68fa      	ldr	r2, [r7, #12]
 8011338:	4313      	orrs	r3, r2
 801133a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	68fa      	ldr	r2, [r7, #12]
 801134a:	4313      	orrs	r3, r2
 801134c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	68fa      	ldr	r2, [r7, #12]
 8011354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	4a12      	ldr	r2, [pc, #72]	@ (80113a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 801135c:	4293      	cmp	r3, r2
 801135e:	d004      	beq.n	801136a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011368:	d10c      	bne.n	8011384 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	689b      	ldr	r3, [r3, #8]
 8011376:	68ba      	ldr	r2, [r7, #8]
 8011378:	4313      	orrs	r3, r2
 801137a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2201      	movs	r2, #1
 8011388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2200      	movs	r2, #0
 8011390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011394:	2300      	movs	r3, #0
}
 8011396:	4618      	mov	r0, r3
 8011398:	3714      	adds	r7, #20
 801139a:	46bd      	mov	sp, r7
 801139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a0:	4770      	bx	lr
 80113a2:	bf00      	nop
 80113a4:	40012c00 	.word	0x40012c00

080113a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b083      	sub	sp, #12
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80113b0:	bf00      	nop
 80113b2:	370c      	adds	r7, #12
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr

080113bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80113c4:	bf00      	nop
 80113c6:	370c      	adds	r7, #12
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr

080113d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80113d0:	b480      	push	{r7}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80113d8:	bf00      	nop
 80113da:	370c      	adds	r7, #12
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr

080113e4 <LL_RCC_GetUSARTClockSource>:
{
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80113ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80113f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	4013      	ands	r3, r2
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	370c      	adds	r7, #12
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr

08011404 <LL_RCC_GetLPUARTClockSource>:
{
 8011404:	b480      	push	{r7}
 8011406:	b083      	sub	sp, #12
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801140c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011410:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4013      	ands	r3, r2
}
 8011418:	4618      	mov	r0, r3
 801141a:	370c      	adds	r7, #12
 801141c:	46bd      	mov	sp, r7
 801141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011422:	4770      	bx	lr

08011424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b082      	sub	sp, #8
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d101      	bne.n	8011436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011432:	2301      	movs	r3, #1
 8011434:	e042      	b.n	80114bc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801143c:	2b00      	cmp	r3, #0
 801143e:	d106      	bne.n	801144e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2200      	movs	r2, #0
 8011444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f7f2 fb8f 	bl	8003b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2224      	movs	r2, #36	@ 0x24
 8011452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	681a      	ldr	r2, [r3, #0]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f022 0201 	bic.w	r2, r2, #1
 8011464:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801146a:	2b00      	cmp	r3, #0
 801146c:	d002      	beq.n	8011474 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f000 fdf2 	bl	8012058 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 fbc7 	bl	8011c08 <UART_SetConfig>
 801147a:	4603      	mov	r3, r0
 801147c:	2b01      	cmp	r3, #1
 801147e:	d101      	bne.n	8011484 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011480:	2301      	movs	r3, #1
 8011482:	e01b      	b.n	80114bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	685a      	ldr	r2, [r3, #4]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	689a      	ldr	r2, [r3, #8]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80114a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	f042 0201 	orr.w	r2, r2, #1
 80114b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f000 fe71 	bl	801219c <UART_CheckIdleState>
 80114ba:	4603      	mov	r3, r0
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3708      	adds	r7, #8
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d101      	bne.n	80114d6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80114d2:	2301      	movs	r3, #1
 80114d4:	e031      	b.n	801153a <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2224      	movs	r2, #36	@ 0x24
 80114da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	681a      	ldr	r2, [r3, #0]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f022 0201 	bic.w	r2, r2, #1
 80114ec:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	2200      	movs	r2, #0
 80114f4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2200      	movs	r2, #0
 80114fc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	2200      	movs	r2, #0
 8011504:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f7f2 fb7e 	bl	8003c08 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2200      	movs	r2, #0
 8011510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2200      	movs	r2, #0
 8011518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2200      	movs	r2, #0
 8011520:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2200      	movs	r2, #0
 8011528:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2200      	movs	r2, #0
 801152e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2200      	movs	r2, #0
 8011534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011538:	2300      	movs	r3, #0
}
 801153a:	4618      	mov	r0, r3
 801153c:	3708      	adds	r7, #8
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
	...

08011544 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b0ba      	sub	sp, #232	@ 0xe8
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	69db      	ldr	r3, [r3, #28]
 8011552:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801156a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801156e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8011572:	4013      	ands	r3, r2
 8011574:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8011578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801157c:	2b00      	cmp	r3, #0
 801157e:	d11b      	bne.n	80115b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011584:	f003 0320 	and.w	r3, r3, #32
 8011588:	2b00      	cmp	r3, #0
 801158a:	d015      	beq.n	80115b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801158c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011590:	f003 0320 	and.w	r3, r3, #32
 8011594:	2b00      	cmp	r3, #0
 8011596:	d105      	bne.n	80115a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801159c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d009      	beq.n	80115b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 8300 	beq.w	8011bae <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	4798      	blx	r3
      }
      return;
 80115b6:	e2fa      	b.n	8011bae <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80115b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f000 8123 	beq.w	8011808 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80115c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80115c6:	4b8d      	ldr	r3, [pc, #564]	@ (80117fc <HAL_UART_IRQHandler+0x2b8>)
 80115c8:	4013      	ands	r3, r2
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d106      	bne.n	80115dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80115ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80115d2:	4b8b      	ldr	r3, [pc, #556]	@ (8011800 <HAL_UART_IRQHandler+0x2bc>)
 80115d4:	4013      	ands	r3, r2
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	f000 8116 	beq.w	8011808 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80115dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80115e0:	f003 0301 	and.w	r3, r3, #1
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d011      	beq.n	801160c <HAL_UART_IRQHandler+0xc8>
 80115e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80115ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d00b      	beq.n	801160c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2201      	movs	r2, #1
 80115fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011602:	f043 0201 	orr.w	r2, r3, #1
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801160c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011610:	f003 0302 	and.w	r3, r3, #2
 8011614:	2b00      	cmp	r3, #0
 8011616:	d011      	beq.n	801163c <HAL_UART_IRQHandler+0xf8>
 8011618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801161c:	f003 0301 	and.w	r3, r3, #1
 8011620:	2b00      	cmp	r3, #0
 8011622:	d00b      	beq.n	801163c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2202      	movs	r2, #2
 801162a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011632:	f043 0204 	orr.w	r2, r3, #4
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801163c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011640:	f003 0304 	and.w	r3, r3, #4
 8011644:	2b00      	cmp	r3, #0
 8011646:	d011      	beq.n	801166c <HAL_UART_IRQHandler+0x128>
 8011648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801164c:	f003 0301 	and.w	r3, r3, #1
 8011650:	2b00      	cmp	r3, #0
 8011652:	d00b      	beq.n	801166c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	2204      	movs	r2, #4
 801165a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011662:	f043 0202 	orr.w	r2, r3, #2
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801166c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011670:	f003 0308 	and.w	r3, r3, #8
 8011674:	2b00      	cmp	r3, #0
 8011676:	d017      	beq.n	80116a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801167c:	f003 0320 	and.w	r3, r3, #32
 8011680:	2b00      	cmp	r3, #0
 8011682:	d105      	bne.n	8011690 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011684:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011688:	4b5c      	ldr	r3, [pc, #368]	@ (80117fc <HAL_UART_IRQHandler+0x2b8>)
 801168a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801168c:	2b00      	cmp	r3, #0
 801168e:	d00b      	beq.n	80116a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	2208      	movs	r2, #8
 8011696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801169e:	f043 0208 	orr.w	r2, r3, #8
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80116a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d012      	beq.n	80116da <HAL_UART_IRQHandler+0x196>
 80116b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80116b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00c      	beq.n	80116da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80116c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116d0:	f043 0220 	orr.w	r2, r3, #32
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 8266 	beq.w	8011bb2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80116e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116ea:	f003 0320 	and.w	r3, r3, #32
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d013      	beq.n	801171a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80116f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80116f6:	f003 0320 	and.w	r3, r3, #32
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d105      	bne.n	801170a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80116fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011706:	2b00      	cmp	r3, #0
 8011708:	d007      	beq.n	801171a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801170e:	2b00      	cmp	r3, #0
 8011710:	d003      	beq.n	801171a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011720:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	689b      	ldr	r3, [r3, #8]
 801172a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801172e:	2b40      	cmp	r3, #64	@ 0x40
 8011730:	d005      	beq.n	801173e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011736:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801173a:	2b00      	cmp	r3, #0
 801173c:	d054      	beq.n	80117e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 fe43 	bl	80123ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	689b      	ldr	r3, [r3, #8]
 801174a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801174e:	2b40      	cmp	r3, #64	@ 0x40
 8011750:	d146      	bne.n	80117e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	3308      	adds	r3, #8
 8011758:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801175c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011760:	e853 3f00 	ldrex	r3, [r3]
 8011764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8011768:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801176c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	3308      	adds	r3, #8
 801177a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801177e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011782:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801178a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801178e:	e841 2300 	strex	r3, r2, [r1]
 8011792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8011796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801179a:	2b00      	cmp	r3, #0
 801179c:	d1d9      	bne.n	8011752 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d017      	beq.n	80117d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117ae:	4a15      	ldr	r2, [pc, #84]	@ (8011804 <HAL_UART_IRQHandler+0x2c0>)
 80117b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7fa fc8c 	bl	800c0d6 <HAL_DMA_Abort_IT>
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d019      	beq.n	80117f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80117ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80117d2:	4610      	mov	r0, r2
 80117d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117d6:	e00f      	b.n	80117f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f000 f9ff 	bl	8011bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117de:	e00b      	b.n	80117f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f000 f9fb 	bl	8011bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117e6:	e007      	b.n	80117f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f000 f9f7 	bl	8011bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2200      	movs	r2, #0
 80117f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80117f6:	e1dc      	b.n	8011bb2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117f8:	bf00      	nop
    return;
 80117fa:	e1da      	b.n	8011bb2 <HAL_UART_IRQHandler+0x66e>
 80117fc:	10000001 	.word	0x10000001
 8011800:	04000120 	.word	0x04000120
 8011804:	08012497 	.word	0x08012497

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801180c:	2b01      	cmp	r3, #1
 801180e:	f040 8170 	bne.w	8011af2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011816:	f003 0310 	and.w	r3, r3, #16
 801181a:	2b00      	cmp	r3, #0
 801181c:	f000 8169 	beq.w	8011af2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011824:	f003 0310 	and.w	r3, r3, #16
 8011828:	2b00      	cmp	r3, #0
 801182a:	f000 8162 	beq.w	8011af2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2210      	movs	r2, #16
 8011834:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	689b      	ldr	r3, [r3, #8]
 801183c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011840:	2b40      	cmp	r3, #64	@ 0x40
 8011842:	f040 80d8 	bne.w	80119f6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011854:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011858:	2b00      	cmp	r3, #0
 801185a:	f000 80af 	beq.w	80119bc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011864:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011868:	429a      	cmp	r2, r3
 801186a:	f080 80a7 	bcs.w	80119bc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011874:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f003 0320 	and.w	r3, r3, #32
 8011886:	2b00      	cmp	r3, #0
 8011888:	f040 8087 	bne.w	801199a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011894:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011898:	e853 3f00 	ldrex	r3, [r3]
 801189c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80118a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80118a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80118a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	461a      	mov	r2, r3
 80118b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80118b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80118ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80118c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80118c6:	e841 2300 	strex	r3, r2, [r1]
 80118ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80118ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d1da      	bne.n	801188c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	3308      	adds	r3, #8
 80118dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80118e0:	e853 3f00 	ldrex	r3, [r3]
 80118e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80118e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80118e8:	f023 0301 	bic.w	r3, r3, #1
 80118ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	3308      	adds	r3, #8
 80118f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80118fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80118fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011900:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011902:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011906:	e841 2300 	strex	r3, r2, [r1]
 801190a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801190c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801190e:	2b00      	cmp	r3, #0
 8011910:	d1e1      	bne.n	80118d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	3308      	adds	r3, #8
 8011918:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801191a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801191c:	e853 3f00 	ldrex	r3, [r3]
 8011920:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	3308      	adds	r3, #8
 8011932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011936:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011938:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801193a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801193c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801193e:	e841 2300 	strex	r3, r2, [r1]
 8011942:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011946:	2b00      	cmp	r3, #0
 8011948:	d1e3      	bne.n	8011912 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2220      	movs	r2, #32
 801194e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2200      	movs	r2, #0
 8011956:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801195e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011960:	e853 3f00 	ldrex	r3, [r3]
 8011964:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011968:	f023 0310 	bic.w	r3, r3, #16
 801196c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	461a      	mov	r2, r3
 8011976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801197a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801197c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801197e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011980:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011982:	e841 2300 	strex	r3, r2, [r1]
 8011986:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801198a:	2b00      	cmp	r3, #0
 801198c:	d1e4      	bne.n	8011958 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011994:	4618      	mov	r0, r3
 8011996:	f7fa fb3f 	bl	800c018 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2202      	movs	r2, #2
 801199e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	1ad3      	subs	r3, r2, r3
 80119b0:	b29b      	uxth	r3, r3
 80119b2:	4619      	mov	r1, r3
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 f91b 	bl	8011bf0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80119ba:	e0fc      	b.n	8011bb6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80119c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80119c6:	429a      	cmp	r2, r3
 80119c8:	f040 80f5 	bne.w	8011bb6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	f003 0320 	and.w	r3, r3, #32
 80119da:	2b20      	cmp	r3, #32
 80119dc:	f040 80eb 	bne.w	8011bb6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2202      	movs	r2, #2
 80119e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80119ec:	4619      	mov	r1, r3
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 f8fe 	bl	8011bf0 <HAL_UARTEx_RxEventCallback>
      return;
 80119f4:	e0df      	b.n	8011bb6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011a02:	b29b      	uxth	r3, r3
 8011a04:	1ad3      	subs	r3, r2, r3
 8011a06:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011a10:	b29b      	uxth	r3, r3
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	f000 80d1 	beq.w	8011bba <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8011a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	f000 80cc 	beq.w	8011bba <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a2a:	e853 3f00 	ldrex	r3, [r3]
 8011a2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011a36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	461a      	mov	r2, r3
 8011a40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a4c:	e841 2300 	strex	r3, r2, [r1]
 8011a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d1e4      	bne.n	8011a22 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	3308      	adds	r3, #8
 8011a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a62:	e853 3f00 	ldrex	r3, [r3]
 8011a66:	623b      	str	r3, [r7, #32]
   return(result);
 8011a68:	6a3b      	ldr	r3, [r7, #32]
 8011a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011a6e:	f023 0301 	bic.w	r3, r3, #1
 8011a72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	3308      	adds	r3, #8
 8011a7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011a80:	633a      	str	r2, [r7, #48]	@ 0x30
 8011a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a88:	e841 2300 	strex	r3, r2, [r1]
 8011a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d1e1      	bne.n	8011a58 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2220      	movs	r2, #32
 8011a98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	e853 3f00 	ldrex	r3, [r3]
 8011ab4:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	f023 0310 	bic.w	r3, r3, #16
 8011abc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011aca:	61fb      	str	r3, [r7, #28]
 8011acc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ace:	69b9      	ldr	r1, [r7, #24]
 8011ad0:	69fa      	ldr	r2, [r7, #28]
 8011ad2:	e841 2300 	strex	r3, r2, [r1]
 8011ad6:	617b      	str	r3, [r7, #20]
   return(result);
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d1e4      	bne.n	8011aa8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2202      	movs	r2, #2
 8011ae2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011ae8:	4619      	mov	r1, r3
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f000 f880 	bl	8011bf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011af0:	e063      	b.n	8011bba <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011af6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00e      	beq.n	8011b1c <HAL_UART_IRQHandler+0x5d8>
 8011afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d008      	beq.n	8011b1c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8011b12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f000 fcfb 	bl	8012510 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011b1a:	e051      	b.n	8011bc0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d014      	beq.n	8011b52 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d105      	bne.n	8011b40 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011b38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d008      	beq.n	8011b52 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d03a      	beq.n	8011bbe <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	4798      	blx	r3
    }
    return;
 8011b50:	e035      	b.n	8011bbe <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d009      	beq.n	8011b72 <HAL_UART_IRQHandler+0x62e>
 8011b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d003      	beq.n	8011b72 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f000 fca5 	bl	80124ba <UART_EndTransmit_IT>
    return;
 8011b70:	e026      	b.n	8011bc0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d009      	beq.n	8011b92 <HAL_UART_IRQHandler+0x64e>
 8011b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b82:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d003      	beq.n	8011b92 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f000 fcd4 	bl	8012538 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011b90:	e016      	b.n	8011bc0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d010      	beq.n	8011bc0 <HAL_UART_IRQHandler+0x67c>
 8011b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	da0c      	bge.n	8011bc0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f000 fcbc 	bl	8012524 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011bac:	e008      	b.n	8011bc0 <HAL_UART_IRQHandler+0x67c>
      return;
 8011bae:	bf00      	nop
 8011bb0:	e006      	b.n	8011bc0 <HAL_UART_IRQHandler+0x67c>
    return;
 8011bb2:	bf00      	nop
 8011bb4:	e004      	b.n	8011bc0 <HAL_UART_IRQHandler+0x67c>
      return;
 8011bb6:	bf00      	nop
 8011bb8:	e002      	b.n	8011bc0 <HAL_UART_IRQHandler+0x67c>
      return;
 8011bba:	bf00      	nop
 8011bbc:	e000      	b.n	8011bc0 <HAL_UART_IRQHandler+0x67c>
    return;
 8011bbe:	bf00      	nop
  }
}
 8011bc0:	37e8      	adds	r7, #232	@ 0xe8
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop

08011bc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b083      	sub	sp, #12
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011bd0:	bf00      	nop
 8011bd2:	370c      	adds	r7, #12
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr

08011bdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011be4:	bf00      	nop
 8011be6:	370c      	adds	r7, #12
 8011be8:	46bd      	mov	sp, r7
 8011bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bee:	4770      	bx	lr

08011bf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b083      	sub	sp, #12
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011bfc:	bf00      	nop
 8011bfe:	370c      	adds	r7, #12
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011c0c:	b08c      	sub	sp, #48	@ 0x30
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011c12:	2300      	movs	r3, #0
 8011c14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	689a      	ldr	r2, [r3, #8]
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	691b      	ldr	r3, [r3, #16]
 8011c20:	431a      	orrs	r2, r3
 8011c22:	697b      	ldr	r3, [r7, #20]
 8011c24:	695b      	ldr	r3, [r3, #20]
 8011c26:	431a      	orrs	r2, r3
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	69db      	ldr	r3, [r3, #28]
 8011c2c:	4313      	orrs	r3, r2
 8011c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	681a      	ldr	r2, [r3, #0]
 8011c36:	4baf      	ldr	r3, [pc, #700]	@ (8011ef4 <UART_SetConfig+0x2ec>)
 8011c38:	4013      	ands	r3, r2
 8011c3a:	697a      	ldr	r2, [r7, #20]
 8011c3c:	6812      	ldr	r2, [r2, #0]
 8011c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011c40:	430b      	orrs	r3, r1
 8011c42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	68da      	ldr	r2, [r3, #12]
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	430a      	orrs	r2, r1
 8011c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	699b      	ldr	r3, [r3, #24]
 8011c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4aa4      	ldr	r2, [pc, #656]	@ (8011ef8 <UART_SetConfig+0x2f0>)
 8011c66:	4293      	cmp	r3, r2
 8011c68:	d004      	beq.n	8011c74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	6a1b      	ldr	r3, [r3, #32]
 8011c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c70:	4313      	orrs	r3, r2
 8011c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	689b      	ldr	r3, [r3, #8]
 8011c7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8011c7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8011c82:	697a      	ldr	r2, [r7, #20]
 8011c84:	6812      	ldr	r2, [r2, #0]
 8011c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011c88:	430b      	orrs	r3, r1
 8011c8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c92:	f023 010f 	bic.w	r1, r3, #15
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	430a      	orrs	r2, r1
 8011ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	4a95      	ldr	r2, [pc, #596]	@ (8011efc <UART_SetConfig+0x2f4>)
 8011ca8:	4293      	cmp	r3, r2
 8011caa:	d125      	bne.n	8011cf8 <UART_SetConfig+0xf0>
 8011cac:	2003      	movs	r0, #3
 8011cae:	f7ff fb99 	bl	80113e4 <LL_RCC_GetUSARTClockSource>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	2b03      	cmp	r3, #3
 8011cb6:	d81b      	bhi.n	8011cf0 <UART_SetConfig+0xe8>
 8011cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8011cc0 <UART_SetConfig+0xb8>)
 8011cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cbe:	bf00      	nop
 8011cc0:	08011cd1 	.word	0x08011cd1
 8011cc4:	08011ce1 	.word	0x08011ce1
 8011cc8:	08011cd9 	.word	0x08011cd9
 8011ccc:	08011ce9 	.word	0x08011ce9
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011cd6:	e042      	b.n	8011d5e <UART_SetConfig+0x156>
 8011cd8:	2302      	movs	r3, #2
 8011cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011cde:	e03e      	b.n	8011d5e <UART_SetConfig+0x156>
 8011ce0:	2304      	movs	r3, #4
 8011ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011ce6:	e03a      	b.n	8011d5e <UART_SetConfig+0x156>
 8011ce8:	2308      	movs	r3, #8
 8011cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011cee:	e036      	b.n	8011d5e <UART_SetConfig+0x156>
 8011cf0:	2310      	movs	r3, #16
 8011cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011cf6:	e032      	b.n	8011d5e <UART_SetConfig+0x156>
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	4a7e      	ldr	r2, [pc, #504]	@ (8011ef8 <UART_SetConfig+0x2f0>)
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d12a      	bne.n	8011d58 <UART_SetConfig+0x150>
 8011d02:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8011d06:	f7ff fb7d 	bl	8011404 <LL_RCC_GetLPUARTClockSource>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011d10:	d01a      	beq.n	8011d48 <UART_SetConfig+0x140>
 8011d12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011d16:	d81b      	bhi.n	8011d50 <UART_SetConfig+0x148>
 8011d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011d1c:	d00c      	beq.n	8011d38 <UART_SetConfig+0x130>
 8011d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011d22:	d815      	bhi.n	8011d50 <UART_SetConfig+0x148>
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d003      	beq.n	8011d30 <UART_SetConfig+0x128>
 8011d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011d2c:	d008      	beq.n	8011d40 <UART_SetConfig+0x138>
 8011d2e:	e00f      	b.n	8011d50 <UART_SetConfig+0x148>
 8011d30:	2300      	movs	r3, #0
 8011d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011d36:	e012      	b.n	8011d5e <UART_SetConfig+0x156>
 8011d38:	2302      	movs	r3, #2
 8011d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011d3e:	e00e      	b.n	8011d5e <UART_SetConfig+0x156>
 8011d40:	2304      	movs	r3, #4
 8011d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011d46:	e00a      	b.n	8011d5e <UART_SetConfig+0x156>
 8011d48:	2308      	movs	r3, #8
 8011d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011d4e:	e006      	b.n	8011d5e <UART_SetConfig+0x156>
 8011d50:	2310      	movs	r3, #16
 8011d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011d56:	e002      	b.n	8011d5e <UART_SetConfig+0x156>
 8011d58:	2310      	movs	r3, #16
 8011d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4a65      	ldr	r2, [pc, #404]	@ (8011ef8 <UART_SetConfig+0x2f0>)
 8011d64:	4293      	cmp	r3, r2
 8011d66:	f040 8097 	bne.w	8011e98 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011d6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011d6e:	2b08      	cmp	r3, #8
 8011d70:	d823      	bhi.n	8011dba <UART_SetConfig+0x1b2>
 8011d72:	a201      	add	r2, pc, #4	@ (adr r2, 8011d78 <UART_SetConfig+0x170>)
 8011d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d78:	08011d9d 	.word	0x08011d9d
 8011d7c:	08011dbb 	.word	0x08011dbb
 8011d80:	08011da5 	.word	0x08011da5
 8011d84:	08011dbb 	.word	0x08011dbb
 8011d88:	08011dab 	.word	0x08011dab
 8011d8c:	08011dbb 	.word	0x08011dbb
 8011d90:	08011dbb 	.word	0x08011dbb
 8011d94:	08011dbb 	.word	0x08011dbb
 8011d98:	08011db3 	.word	0x08011db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011d9c:	f7fd fac8 	bl	800f330 <HAL_RCC_GetPCLK1Freq>
 8011da0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011da2:	e010      	b.n	8011dc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011da4:	4b56      	ldr	r3, [pc, #344]	@ (8011f00 <UART_SetConfig+0x2f8>)
 8011da6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011da8:	e00d      	b.n	8011dc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011daa:	f7fd fa41 	bl	800f230 <HAL_RCC_GetSysClockFreq>
 8011dae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011db0:	e009      	b.n	8011dc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011db2:	f248 0306 	movw	r3, #32774	@ 0x8006
 8011db6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011db8:	e005      	b.n	8011dc6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011dc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	f000 812b 	beq.w	8012024 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dd2:	4a4c      	ldr	r2, [pc, #304]	@ (8011f04 <UART_SetConfig+0x2fc>)
 8011dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011dd8:	461a      	mov	r2, r3
 8011dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011de0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	685a      	ldr	r2, [r3, #4]
 8011de6:	4613      	mov	r3, r2
 8011de8:	005b      	lsls	r3, r3, #1
 8011dea:	4413      	add	r3, r2
 8011dec:	69ba      	ldr	r2, [r7, #24]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d305      	bcc.n	8011dfe <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011df8:	69ba      	ldr	r2, [r7, #24]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d903      	bls.n	8011e06 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8011dfe:	2301      	movs	r3, #1
 8011e00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011e04:	e10e      	b.n	8012024 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e08:	2200      	movs	r2, #0
 8011e0a:	60bb      	str	r3, [r7, #8]
 8011e0c:	60fa      	str	r2, [r7, #12]
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e12:	4a3c      	ldr	r2, [pc, #240]	@ (8011f04 <UART_SetConfig+0x2fc>)
 8011e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	603b      	str	r3, [r7, #0]
 8011e1e:	607a      	str	r2, [r7, #4]
 8011e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011e28:	f7ee feb6 	bl	8000b98 <__aeabi_uldivmod>
 8011e2c:	4602      	mov	r2, r0
 8011e2e:	460b      	mov	r3, r1
 8011e30:	4610      	mov	r0, r2
 8011e32:	4619      	mov	r1, r3
 8011e34:	f04f 0200 	mov.w	r2, #0
 8011e38:	f04f 0300 	mov.w	r3, #0
 8011e3c:	020b      	lsls	r3, r1, #8
 8011e3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011e42:	0202      	lsls	r2, r0, #8
 8011e44:	6979      	ldr	r1, [r7, #20]
 8011e46:	6849      	ldr	r1, [r1, #4]
 8011e48:	0849      	lsrs	r1, r1, #1
 8011e4a:	2000      	movs	r0, #0
 8011e4c:	460c      	mov	r4, r1
 8011e4e:	4605      	mov	r5, r0
 8011e50:	eb12 0804 	adds.w	r8, r2, r4
 8011e54:	eb43 0905 	adc.w	r9, r3, r5
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	685b      	ldr	r3, [r3, #4]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	469a      	mov	sl, r3
 8011e60:	4693      	mov	fp, r2
 8011e62:	4652      	mov	r2, sl
 8011e64:	465b      	mov	r3, fp
 8011e66:	4640      	mov	r0, r8
 8011e68:	4649      	mov	r1, r9
 8011e6a:	f7ee fe95 	bl	8000b98 <__aeabi_uldivmod>
 8011e6e:	4602      	mov	r2, r0
 8011e70:	460b      	mov	r3, r1
 8011e72:	4613      	mov	r3, r2
 8011e74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011e76:	6a3b      	ldr	r3, [r7, #32]
 8011e78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011e7c:	d308      	bcc.n	8011e90 <UART_SetConfig+0x288>
 8011e7e:	6a3b      	ldr	r3, [r7, #32]
 8011e80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011e84:	d204      	bcs.n	8011e90 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	6a3a      	ldr	r2, [r7, #32]
 8011e8c:	60da      	str	r2, [r3, #12]
 8011e8e:	e0c9      	b.n	8012024 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8011e90:	2301      	movs	r3, #1
 8011e92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011e96:	e0c5      	b.n	8012024 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	69db      	ldr	r3, [r3, #28]
 8011e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011ea0:	d16d      	bne.n	8011f7e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8011ea2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011ea6:	3b01      	subs	r3, #1
 8011ea8:	2b07      	cmp	r3, #7
 8011eaa:	d82d      	bhi.n	8011f08 <UART_SetConfig+0x300>
 8011eac:	a201      	add	r2, pc, #4	@ (adr r2, 8011eb4 <UART_SetConfig+0x2ac>)
 8011eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb2:	bf00      	nop
 8011eb4:	08011ed5 	.word	0x08011ed5
 8011eb8:	08011edd 	.word	0x08011edd
 8011ebc:	08011f09 	.word	0x08011f09
 8011ec0:	08011ee3 	.word	0x08011ee3
 8011ec4:	08011f09 	.word	0x08011f09
 8011ec8:	08011f09 	.word	0x08011f09
 8011ecc:	08011f09 	.word	0x08011f09
 8011ed0:	08011eeb 	.word	0x08011eeb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011ed4:	f7fd fa42 	bl	800f35c <HAL_RCC_GetPCLK2Freq>
 8011ed8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011eda:	e01b      	b.n	8011f14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011edc:	4b08      	ldr	r3, [pc, #32]	@ (8011f00 <UART_SetConfig+0x2f8>)
 8011ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011ee0:	e018      	b.n	8011f14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011ee2:	f7fd f9a5 	bl	800f230 <HAL_RCC_GetSysClockFreq>
 8011ee6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011ee8:	e014      	b.n	8011f14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011eea:	f248 0306 	movw	r3, #32774	@ 0x8006
 8011eee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011ef0:	e010      	b.n	8011f14 <UART_SetConfig+0x30c>
 8011ef2:	bf00      	nop
 8011ef4:	cfff69f3 	.word	0xcfff69f3
 8011ef8:	40008000 	.word	0x40008000
 8011efc:	40013800 	.word	0x40013800
 8011f00:	00f42400 	.word	0x00f42400
 8011f04:	08018874 	.word	0x08018874
      default:
        pclk = 0U;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011f12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	f000 8084 	beq.w	8012024 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f20:	4a4b      	ldr	r2, [pc, #300]	@ (8012050 <UART_SetConfig+0x448>)
 8011f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f26:	461a      	mov	r2, r3
 8011f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f2e:	005a      	lsls	r2, r3, #1
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	085b      	lsrs	r3, r3, #1
 8011f36:	441a      	add	r2, r3
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f40:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011f42:	6a3b      	ldr	r3, [r7, #32]
 8011f44:	2b0f      	cmp	r3, #15
 8011f46:	d916      	bls.n	8011f76 <UART_SetConfig+0x36e>
 8011f48:	6a3b      	ldr	r3, [r7, #32]
 8011f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011f4e:	d212      	bcs.n	8011f76 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011f50:	6a3b      	ldr	r3, [r7, #32]
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	f023 030f 	bic.w	r3, r3, #15
 8011f58:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011f5a:	6a3b      	ldr	r3, [r7, #32]
 8011f5c:	085b      	lsrs	r3, r3, #1
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	f003 0307 	and.w	r3, r3, #7
 8011f64:	b29a      	uxth	r2, r3
 8011f66:	8bfb      	ldrh	r3, [r7, #30]
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	8bfa      	ldrh	r2, [r7, #30]
 8011f72:	60da      	str	r2, [r3, #12]
 8011f74:	e056      	b.n	8012024 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8011f76:	2301      	movs	r3, #1
 8011f78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011f7c:	e052      	b.n	8012024 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011f82:	3b01      	subs	r3, #1
 8011f84:	2b07      	cmp	r3, #7
 8011f86:	d822      	bhi.n	8011fce <UART_SetConfig+0x3c6>
 8011f88:	a201      	add	r2, pc, #4	@ (adr r2, 8011f90 <UART_SetConfig+0x388>)
 8011f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f8e:	bf00      	nop
 8011f90:	08011fb1 	.word	0x08011fb1
 8011f94:	08011fb9 	.word	0x08011fb9
 8011f98:	08011fcf 	.word	0x08011fcf
 8011f9c:	08011fbf 	.word	0x08011fbf
 8011fa0:	08011fcf 	.word	0x08011fcf
 8011fa4:	08011fcf 	.word	0x08011fcf
 8011fa8:	08011fcf 	.word	0x08011fcf
 8011fac:	08011fc7 	.word	0x08011fc7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011fb0:	f7fd f9d4 	bl	800f35c <HAL_RCC_GetPCLK2Freq>
 8011fb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011fb6:	e010      	b.n	8011fda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011fb8:	4b26      	ldr	r3, [pc, #152]	@ (8012054 <UART_SetConfig+0x44c>)
 8011fba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011fbc:	e00d      	b.n	8011fda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011fbe:	f7fd f937 	bl	800f230 <HAL_RCC_GetSysClockFreq>
 8011fc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011fc4:	e009      	b.n	8011fda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011fc6:	f248 0306 	movw	r3, #32774	@ 0x8006
 8011fca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011fcc:	e005      	b.n	8011fda <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011fd8:	bf00      	nop
    }

    if (pclk != 0U)
 8011fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d021      	beq.n	8012024 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8012050 <UART_SetConfig+0x448>)
 8011fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fea:	461a      	mov	r2, r3
 8011fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fee:	fbb3 f2f2 	udiv	r2, r3, r2
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	685b      	ldr	r3, [r3, #4]
 8011ff6:	085b      	lsrs	r3, r3, #1
 8011ff8:	441a      	add	r2, r3
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8012002:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012004:	6a3b      	ldr	r3, [r7, #32]
 8012006:	2b0f      	cmp	r3, #15
 8012008:	d909      	bls.n	801201e <UART_SetConfig+0x416>
 801200a:	6a3b      	ldr	r3, [r7, #32]
 801200c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012010:	d205      	bcs.n	801201e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012012:	6a3b      	ldr	r3, [r7, #32]
 8012014:	b29a      	uxth	r2, r3
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	60da      	str	r2, [r3, #12]
 801201c:	e002      	b.n	8012024 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801201e:	2301      	movs	r3, #1
 8012020:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	2201      	movs	r2, #1
 8012028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	2201      	movs	r2, #1
 8012030:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	2200      	movs	r2, #0
 8012038:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	2200      	movs	r2, #0
 801203e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8012040:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8012044:	4618      	mov	r0, r3
 8012046:	3730      	adds	r7, #48	@ 0x30
 8012048:	46bd      	mov	sp, r7
 801204a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801204e:	bf00      	nop
 8012050:	08018874 	.word	0x08018874
 8012054:	00f42400 	.word	0x00f42400

08012058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012058:	b480      	push	{r7}
 801205a:	b083      	sub	sp, #12
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012064:	f003 0308 	and.w	r3, r3, #8
 8012068:	2b00      	cmp	r3, #0
 801206a:	d00a      	beq.n	8012082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	430a      	orrs	r2, r1
 8012080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012086:	f003 0301 	and.w	r3, r3, #1
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00a      	beq.n	80120a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	685b      	ldr	r3, [r3, #4]
 8012094:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	430a      	orrs	r2, r1
 80120a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120a8:	f003 0302 	and.w	r3, r3, #2
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d00a      	beq.n	80120c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	430a      	orrs	r2, r1
 80120c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120ca:	f003 0304 	and.w	r3, r3, #4
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d00a      	beq.n	80120e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	685b      	ldr	r3, [r3, #4]
 80120d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	430a      	orrs	r2, r1
 80120e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120ec:	f003 0310 	and.w	r3, r3, #16
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d00a      	beq.n	801210a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	689b      	ldr	r3, [r3, #8]
 80120fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	430a      	orrs	r2, r1
 8012108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801210e:	f003 0320 	and.w	r3, r3, #32
 8012112:	2b00      	cmp	r3, #0
 8012114:	d00a      	beq.n	801212c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	689b      	ldr	r3, [r3, #8]
 801211c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	430a      	orrs	r2, r1
 801212a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012134:	2b00      	cmp	r3, #0
 8012136:	d01a      	beq.n	801216e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	430a      	orrs	r2, r1
 801214c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012156:	d10a      	bne.n	801216e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	430a      	orrs	r2, r1
 801216c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012176:	2b00      	cmp	r3, #0
 8012178:	d00a      	beq.n	8012190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	685b      	ldr	r3, [r3, #4]
 8012180:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	430a      	orrs	r2, r1
 801218e:	605a      	str	r2, [r3, #4]
  }
}
 8012190:	bf00      	nop
 8012192:	370c      	adds	r7, #12
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr

0801219c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b098      	sub	sp, #96	@ 0x60
 80121a0:	af02      	add	r7, sp, #8
 80121a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2200      	movs	r2, #0
 80121a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80121ac:	f7f8 fb80 	bl	800a8b0 <HAL_GetTick>
 80121b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	f003 0308 	and.w	r3, r3, #8
 80121bc:	2b08      	cmp	r3, #8
 80121be:	d12f      	bne.n	8012220 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80121c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80121c4:	9300      	str	r3, [sp, #0]
 80121c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121c8:	2200      	movs	r2, #0
 80121ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f000 f88e 	bl	80122f0 <UART_WaitOnFlagUntilTimeout>
 80121d4:	4603      	mov	r3, r0
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d022      	beq.n	8012220 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121e2:	e853 3f00 	ldrex	r3, [r3]
 80121e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80121e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80121ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	461a      	mov	r2, r3
 80121f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80121fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80121fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012200:	e841 2300 	strex	r3, r2, [r1]
 8012204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012208:	2b00      	cmp	r3, #0
 801220a:	d1e6      	bne.n	80121da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	2220      	movs	r2, #32
 8012210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2200      	movs	r2, #0
 8012218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801221c:	2303      	movs	r3, #3
 801221e:	e063      	b.n	80122e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f003 0304 	and.w	r3, r3, #4
 801222a:	2b04      	cmp	r3, #4
 801222c:	d149      	bne.n	80122c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801222e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012232:	9300      	str	r3, [sp, #0]
 8012234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012236:	2200      	movs	r2, #0
 8012238:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f000 f857 	bl	80122f0 <UART_WaitOnFlagUntilTimeout>
 8012242:	4603      	mov	r3, r0
 8012244:	2b00      	cmp	r3, #0
 8012246:	d03c      	beq.n	80122c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012250:	e853 3f00 	ldrex	r3, [r3]
 8012254:	623b      	str	r3, [r7, #32]
   return(result);
 8012256:	6a3b      	ldr	r3, [r7, #32]
 8012258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801225c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	461a      	mov	r2, r3
 8012264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012266:	633b      	str	r3, [r7, #48]	@ 0x30
 8012268:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801226a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801226c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801226e:	e841 2300 	strex	r3, r2, [r1]
 8012272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012276:	2b00      	cmp	r3, #0
 8012278:	d1e6      	bne.n	8012248 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	3308      	adds	r3, #8
 8012280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	e853 3f00 	ldrex	r3, [r3]
 8012288:	60fb      	str	r3, [r7, #12]
   return(result);
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	f023 0301 	bic.w	r3, r3, #1
 8012290:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	3308      	adds	r3, #8
 8012298:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801229a:	61fa      	str	r2, [r7, #28]
 801229c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801229e:	69b9      	ldr	r1, [r7, #24]
 80122a0:	69fa      	ldr	r2, [r7, #28]
 80122a2:	e841 2300 	strex	r3, r2, [r1]
 80122a6:	617b      	str	r3, [r7, #20]
   return(result);
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d1e5      	bne.n	801227a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2220      	movs	r2, #32
 80122b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2200      	movs	r2, #0
 80122ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80122be:	2303      	movs	r3, #3
 80122c0:	e012      	b.n	80122e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	2220      	movs	r2, #32
 80122c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2220      	movs	r2, #32
 80122ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2200      	movs	r2, #0
 80122d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2200      	movs	r2, #0
 80122dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	2200      	movs	r2, #0
 80122e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80122e6:	2300      	movs	r3, #0
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3758      	adds	r7, #88	@ 0x58
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	60f8      	str	r0, [r7, #12]
 80122f8:	60b9      	str	r1, [r7, #8]
 80122fa:	603b      	str	r3, [r7, #0]
 80122fc:	4613      	mov	r3, r2
 80122fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012300:	e04f      	b.n	80123a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012302:	69bb      	ldr	r3, [r7, #24]
 8012304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012308:	d04b      	beq.n	80123a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801230a:	f7f8 fad1 	bl	800a8b0 <HAL_GetTick>
 801230e:	4602      	mov	r2, r0
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	1ad3      	subs	r3, r2, r3
 8012314:	69ba      	ldr	r2, [r7, #24]
 8012316:	429a      	cmp	r2, r3
 8012318:	d302      	bcc.n	8012320 <UART_WaitOnFlagUntilTimeout+0x30>
 801231a:	69bb      	ldr	r3, [r7, #24]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d101      	bne.n	8012324 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012320:	2303      	movs	r3, #3
 8012322:	e04e      	b.n	80123c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	f003 0304 	and.w	r3, r3, #4
 801232e:	2b00      	cmp	r3, #0
 8012330:	d037      	beq.n	80123a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	2b80      	cmp	r3, #128	@ 0x80
 8012336:	d034      	beq.n	80123a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	2b40      	cmp	r3, #64	@ 0x40
 801233c:	d031      	beq.n	80123a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	69db      	ldr	r3, [r3, #28]
 8012344:	f003 0308 	and.w	r3, r3, #8
 8012348:	2b08      	cmp	r3, #8
 801234a:	d110      	bne.n	801236e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2208      	movs	r2, #8
 8012352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012354:	68f8      	ldr	r0, [r7, #12]
 8012356:	f000 f838 	bl	80123ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	2208      	movs	r2, #8
 801235e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2200      	movs	r2, #0
 8012366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801236a:	2301      	movs	r3, #1
 801236c:	e029      	b.n	80123c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	69db      	ldr	r3, [r3, #28]
 8012374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801237c:	d111      	bne.n	80123a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	f000 f81e 	bl	80123ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2220      	movs	r2, #32
 8012392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	2200      	movs	r2, #0
 801239a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801239e:	2303      	movs	r3, #3
 80123a0:	e00f      	b.n	80123c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	69da      	ldr	r2, [r3, #28]
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	4013      	ands	r3, r2
 80123ac:	68ba      	ldr	r2, [r7, #8]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	bf0c      	ite	eq
 80123b2:	2301      	moveq	r3, #1
 80123b4:	2300      	movne	r3, #0
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	461a      	mov	r2, r3
 80123ba:	79fb      	ldrb	r3, [r7, #7]
 80123bc:	429a      	cmp	r2, r3
 80123be:	d0a0      	beq.n	8012302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80123c0:	2300      	movs	r3, #0
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3710      	adds	r7, #16
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}

080123ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80123ca:	b480      	push	{r7}
 80123cc:	b095      	sub	sp, #84	@ 0x54
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123da:	e853 3f00 	ldrex	r3, [r3]
 80123de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80123e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80123e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	461a      	mov	r2, r3
 80123ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80123f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80123f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80123f8:	e841 2300 	strex	r3, r2, [r1]
 80123fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80123fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012400:	2b00      	cmp	r3, #0
 8012402:	d1e6      	bne.n	80123d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	3308      	adds	r3, #8
 801240a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801240c:	6a3b      	ldr	r3, [r7, #32]
 801240e:	e853 3f00 	ldrex	r3, [r3]
 8012412:	61fb      	str	r3, [r7, #28]
   return(result);
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801241a:	f023 0301 	bic.w	r3, r3, #1
 801241e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	3308      	adds	r3, #8
 8012426:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012428:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801242a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801242c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801242e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012430:	e841 2300 	strex	r3, r2, [r1]
 8012434:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012438:	2b00      	cmp	r3, #0
 801243a:	d1e3      	bne.n	8012404 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012440:	2b01      	cmp	r3, #1
 8012442:	d118      	bne.n	8012476 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	e853 3f00 	ldrex	r3, [r3]
 8012450:	60bb      	str	r3, [r7, #8]
   return(result);
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	f023 0310 	bic.w	r3, r3, #16
 8012458:	647b      	str	r3, [r7, #68]	@ 0x44
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	461a      	mov	r2, r3
 8012460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012462:	61bb      	str	r3, [r7, #24]
 8012464:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012466:	6979      	ldr	r1, [r7, #20]
 8012468:	69ba      	ldr	r2, [r7, #24]
 801246a:	e841 2300 	strex	r3, r2, [r1]
 801246e:	613b      	str	r3, [r7, #16]
   return(result);
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d1e6      	bne.n	8012444 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2220      	movs	r2, #32
 801247a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2200      	movs	r2, #0
 8012482:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2200      	movs	r2, #0
 8012488:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801248a:	bf00      	nop
 801248c:	3754      	adds	r7, #84	@ 0x54
 801248e:	46bd      	mov	sp, r7
 8012490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012494:	4770      	bx	lr

08012496 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012496:	b580      	push	{r7, lr}
 8012498:	b084      	sub	sp, #16
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2200      	movs	r2, #0
 80124a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80124ac:	68f8      	ldr	r0, [r7, #12]
 80124ae:	f7ff fb95 	bl	8011bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80124b2:	bf00      	nop
 80124b4:	3710      	adds	r7, #16
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80124ba:	b580      	push	{r7, lr}
 80124bc:	b088      	sub	sp, #32
 80124be:	af00      	add	r7, sp, #0
 80124c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	e853 3f00 	ldrex	r3, [r3]
 80124ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80124d6:	61fb      	str	r3, [r7, #28]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	461a      	mov	r2, r3
 80124de:	69fb      	ldr	r3, [r7, #28]
 80124e0:	61bb      	str	r3, [r7, #24]
 80124e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124e4:	6979      	ldr	r1, [r7, #20]
 80124e6:	69ba      	ldr	r2, [r7, #24]
 80124e8:	e841 2300 	strex	r3, r2, [r1]
 80124ec:	613b      	str	r3, [r7, #16]
   return(result);
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d1e6      	bne.n	80124c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2220      	movs	r2, #32
 80124f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2200      	movs	r2, #0
 8012500:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f7ff fb60 	bl	8011bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012508:	bf00      	nop
 801250a:	3720      	adds	r7, #32
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012518:	bf00      	nop
 801251a:	370c      	adds	r7, #12
 801251c:	46bd      	mov	sp, r7
 801251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012522:	4770      	bx	lr

08012524 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012524:	b480      	push	{r7}
 8012526:	b083      	sub	sp, #12
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801252c:	bf00      	nop
 801252e:	370c      	adds	r7, #12
 8012530:	46bd      	mov	sp, r7
 8012532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012536:	4770      	bx	lr

08012538 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012538:	b480      	push	{r7}
 801253a:	b083      	sub	sp, #12
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012540:	bf00      	nop
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801254c:	b480      	push	{r7}
 801254e:	b085      	sub	sp, #20
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801255a:	2b01      	cmp	r3, #1
 801255c:	d101      	bne.n	8012562 <HAL_UARTEx_DisableFifoMode+0x16>
 801255e:	2302      	movs	r3, #2
 8012560:	e027      	b.n	80125b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2201      	movs	r2, #1
 8012566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2224      	movs	r2, #36	@ 0x24
 801256e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	f022 0201 	bic.w	r2, r2, #1
 8012588:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012590:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2200      	movs	r2, #0
 8012596:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	68fa      	ldr	r2, [r7, #12]
 801259e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2220      	movs	r2, #32
 80125a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2200      	movs	r2, #0
 80125ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80125b0:	2300      	movs	r3, #0
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	3714      	adds	r7, #20
 80125b6:	46bd      	mov	sp, r7
 80125b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125bc:	4770      	bx	lr

080125be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80125be:	b580      	push	{r7, lr}
 80125c0:	b084      	sub	sp, #16
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
 80125c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80125ce:	2b01      	cmp	r3, #1
 80125d0:	d101      	bne.n	80125d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80125d2:	2302      	movs	r3, #2
 80125d4:	e02d      	b.n	8012632 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	2201      	movs	r2, #1
 80125da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2224      	movs	r2, #36	@ 0x24
 80125e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	681a      	ldr	r2, [r3, #0]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	f022 0201 	bic.w	r2, r2, #1
 80125fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	689b      	ldr	r3, [r3, #8]
 8012604:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	683a      	ldr	r2, [r7, #0]
 801260e:	430a      	orrs	r2, r1
 8012610:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f000 f850 	bl	80126b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	68fa      	ldr	r2, [r7, #12]
 801261e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2220      	movs	r2, #32
 8012624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2200      	movs	r2, #0
 801262c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012630:	2300      	movs	r3, #0
}
 8012632:	4618      	mov	r0, r3
 8012634:	3710      	adds	r7, #16
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}

0801263a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801263a:	b580      	push	{r7, lr}
 801263c:	b084      	sub	sp, #16
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
 8012642:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801264a:	2b01      	cmp	r3, #1
 801264c:	d101      	bne.n	8012652 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801264e:	2302      	movs	r3, #2
 8012650:	e02d      	b.n	80126ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2201      	movs	r2, #1
 8012656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	2224      	movs	r2, #36	@ 0x24
 801265e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	681a      	ldr	r2, [r3, #0]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	f022 0201 	bic.w	r2, r2, #1
 8012678:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	689b      	ldr	r3, [r3, #8]
 8012680:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	683a      	ldr	r2, [r7, #0]
 801268a:	430a      	orrs	r2, r1
 801268c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f000 f812 	bl	80126b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	68fa      	ldr	r2, [r7, #12]
 801269a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2220      	movs	r2, #32
 80126a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80126ac:	2300      	movs	r3, #0
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3710      	adds	r7, #16
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
	...

080126b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b085      	sub	sp, #20
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d108      	bne.n	80126da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2201      	movs	r2, #1
 80126cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2201      	movs	r2, #1
 80126d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80126d8:	e031      	b.n	801273e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80126da:	2308      	movs	r3, #8
 80126dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80126de:	2308      	movs	r3, #8
 80126e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	689b      	ldr	r3, [r3, #8]
 80126e8:	0e5b      	lsrs	r3, r3, #25
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	f003 0307 	and.w	r3, r3, #7
 80126f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	689b      	ldr	r3, [r3, #8]
 80126f8:	0f5b      	lsrs	r3, r3, #29
 80126fa:	b2db      	uxtb	r3, r3
 80126fc:	f003 0307 	and.w	r3, r3, #7
 8012700:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012702:	7bbb      	ldrb	r3, [r7, #14]
 8012704:	7b3a      	ldrb	r2, [r7, #12]
 8012706:	4911      	ldr	r1, [pc, #68]	@ (801274c <UARTEx_SetNbDataToProcess+0x94>)
 8012708:	5c8a      	ldrb	r2, [r1, r2]
 801270a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801270e:	7b3a      	ldrb	r2, [r7, #12]
 8012710:	490f      	ldr	r1, [pc, #60]	@ (8012750 <UARTEx_SetNbDataToProcess+0x98>)
 8012712:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012714:	fb93 f3f2 	sdiv	r3, r3, r2
 8012718:	b29a      	uxth	r2, r3
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012720:	7bfb      	ldrb	r3, [r7, #15]
 8012722:	7b7a      	ldrb	r2, [r7, #13]
 8012724:	4909      	ldr	r1, [pc, #36]	@ (801274c <UARTEx_SetNbDataToProcess+0x94>)
 8012726:	5c8a      	ldrb	r2, [r1, r2]
 8012728:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801272c:	7b7a      	ldrb	r2, [r7, #13]
 801272e:	4908      	ldr	r1, [pc, #32]	@ (8012750 <UARTEx_SetNbDataToProcess+0x98>)
 8012730:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012732:	fb93 f3f2 	sdiv	r3, r3, r2
 8012736:	b29a      	uxth	r2, r3
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801273e:	bf00      	nop
 8012740:	3714      	adds	r7, #20
 8012742:	46bd      	mov	sp, r7
 8012744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012748:	4770      	bx	lr
 801274a:	bf00      	nop
 801274c:	0801888c 	.word	0x0801888c
 8012750:	08018894 	.word	0x08018894

08012754 <_Z14i2c_mux_selectP7i2c_muxi>:

	// Ensure all channels are disabled by default
	return i2c_mux_select_multi(mux, 0);
}

int i2c_mux_select(i2c_mux_t* mux, int ch) {
 8012754:	b580      	push	{r7, lr}
 8012756:	b084      	sub	sp, #16
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	6039      	str	r1, [r7, #0]

	// If ch is in range 0-7 then one channel is enabled, else all are disabled
	uint8_t mask = 1 << ch;
 801275e:	2201      	movs	r2, #1
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	fa02 f303 	lsl.w	r3, r2, r3
 8012766:	73fb      	strb	r3, [r7, #15]
	return i2c_mux_select_multi(mux, mask);
 8012768:	7bfb      	ldrb	r3, [r7, #15]
 801276a:	4619      	mov	r1, r3
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f000 f805 	bl	801277c <_Z20i2c_mux_select_multiP7i2c_muxh>
 8012772:	4603      	mov	r3, r0
}
 8012774:	4618      	mov	r0, r3
 8012776:	3710      	adds	r7, #16
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <_Z20i2c_mux_select_multiP7i2c_muxh>:

int i2c_mux_select_multi(i2c_mux_t* mux, uint8_t mask) {
 801277c:	b580      	push	{r7, lr}
 801277e:	b086      	sub	sp, #24
 8012780:	af02      	add	r7, sp, #8
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	460b      	mov	r3, r1
 8012786:	70fb      	strb	r3, [r7, #3]
	if (mux->hi2c == NULL) return 1;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d101      	bne.n	8012794 <_Z20i2c_mux_select_multiP7i2c_muxh+0x18>
 8012790:	2301      	movs	r3, #1
 8012792:	e02f      	b.n	80127f4 <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>

	// Transmit bitmask to multiplexer
	uint8_t addr = (I2C_MUX_BASE_ADDR + mux->addr_offset) << 1;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	7a9b      	ldrb	r3, [r3, #10]
 8012798:	3370      	adds	r3, #112	@ 0x70
 801279a:	b2db      	uxtb	r3, r3
 801279c:	005b      	lsls	r3, r3, #1
 801279e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(mux->hi2c, addr, &mask, 1, I2C_MUX_TIMEOUT);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6818      	ldr	r0, [r3, #0]
 80127a4:	7bfb      	ldrb	r3, [r7, #15]
 80127a6:	b299      	uxth	r1, r3
 80127a8:	1cfa      	adds	r2, r7, #3
 80127aa:	2301      	movs	r3, #1
 80127ac:	9300      	str	r3, [sp, #0]
 80127ae:	2301      	movs	r3, #1
 80127b0:	f7fa f988 	bl	800cac4 <HAL_I2C_Master_Transmit>
 80127b4:	4603      	mov	r3, r0
 80127b6:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK) return 1;
 80127b8:	7bbb      	ldrb	r3, [r7, #14]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d001      	beq.n	80127c2 <_Z20i2c_mux_select_multiP7i2c_muxh+0x46>
 80127be:	2301      	movs	r3, #1
 80127c0:	e018      	b.n	80127f4 <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>

	// Read back bitmask from multiplexer to verify
	uint8_t mask_check = 0;
 80127c2:	2300      	movs	r3, #0
 80127c4:	737b      	strb	r3, [r7, #13]
	res = HAL_I2C_Master_Receive(mux->hi2c, addr, &mask_check, 1, I2C_MUX_TIMEOUT);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6818      	ldr	r0, [r3, #0]
 80127ca:	7bfb      	ldrb	r3, [r7, #15]
 80127cc:	b299      	uxth	r1, r3
 80127ce:	f107 020d 	add.w	r2, r7, #13
 80127d2:	2301      	movs	r3, #1
 80127d4:	9300      	str	r3, [sp, #0]
 80127d6:	2301      	movs	r3, #1
 80127d8:	f7fa fa8c 	bl	800ccf4 <HAL_I2C_Master_Receive>
 80127dc:	4603      	mov	r3, r0
 80127de:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK || mask_check != mask) return 1;
 80127e0:	7bbb      	ldrb	r3, [r7, #14]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d103      	bne.n	80127ee <_Z20i2c_mux_select_multiP7i2c_muxh+0x72>
 80127e6:	7b7a      	ldrb	r2, [r7, #13]
 80127e8:	78fb      	ldrb	r3, [r7, #3]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d001      	beq.n	80127f2 <_Z20i2c_mux_select_multiP7i2c_muxh+0x76>
 80127ee:	2301      	movs	r3, #1
 80127f0:	e000      	b.n	80127f4 <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>
	return 0;
 80127f2:	2300      	movs	r3, #0
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3710      	adds	r7, #16
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <roundf>:
 80127fc:	ee10 0a10 	vmov	r0, s0
 8012800:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8012804:	3a7f      	subs	r2, #127	@ 0x7f
 8012806:	2a16      	cmp	r2, #22
 8012808:	dc15      	bgt.n	8012836 <roundf+0x3a>
 801280a:	2a00      	cmp	r2, #0
 801280c:	da08      	bge.n	8012820 <roundf+0x24>
 801280e:	3201      	adds	r2, #1
 8012810:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8012814:	d101      	bne.n	801281a <roundf+0x1e>
 8012816:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 801281a:	ee00 3a10 	vmov	s0, r3
 801281e:	4770      	bx	lr
 8012820:	4907      	ldr	r1, [pc, #28]	@ (8012840 <roundf+0x44>)
 8012822:	4111      	asrs	r1, r2
 8012824:	4201      	tst	r1, r0
 8012826:	d0fa      	beq.n	801281e <roundf+0x22>
 8012828:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801282c:	4113      	asrs	r3, r2
 801282e:	4403      	add	r3, r0
 8012830:	ea23 0301 	bic.w	r3, r3, r1
 8012834:	e7f1      	b.n	801281a <roundf+0x1e>
 8012836:	2a80      	cmp	r2, #128	@ 0x80
 8012838:	d1f1      	bne.n	801281e <roundf+0x22>
 801283a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801283e:	4770      	bx	lr
 8012840:	007fffff 	.word	0x007fffff

08012844 <__cvt>:
 8012844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012848:	ec57 6b10 	vmov	r6, r7, d0
 801284c:	2f00      	cmp	r7, #0
 801284e:	460c      	mov	r4, r1
 8012850:	4619      	mov	r1, r3
 8012852:	463b      	mov	r3, r7
 8012854:	bfbb      	ittet	lt
 8012856:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801285a:	461f      	movlt	r7, r3
 801285c:	2300      	movge	r3, #0
 801285e:	232d      	movlt	r3, #45	@ 0x2d
 8012860:	700b      	strb	r3, [r1, #0]
 8012862:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012864:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012868:	4691      	mov	r9, r2
 801286a:	f023 0820 	bic.w	r8, r3, #32
 801286e:	bfbc      	itt	lt
 8012870:	4632      	movlt	r2, r6
 8012872:	4616      	movlt	r6, r2
 8012874:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012878:	d005      	beq.n	8012886 <__cvt+0x42>
 801287a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801287e:	d100      	bne.n	8012882 <__cvt+0x3e>
 8012880:	3401      	adds	r4, #1
 8012882:	2102      	movs	r1, #2
 8012884:	e000      	b.n	8012888 <__cvt+0x44>
 8012886:	2103      	movs	r1, #3
 8012888:	ab03      	add	r3, sp, #12
 801288a:	9301      	str	r3, [sp, #4]
 801288c:	ab02      	add	r3, sp, #8
 801288e:	9300      	str	r3, [sp, #0]
 8012890:	ec47 6b10 	vmov	d0, r6, r7
 8012894:	4653      	mov	r3, sl
 8012896:	4622      	mov	r2, r4
 8012898:	f000 fe5e 	bl	8013558 <_dtoa_r>
 801289c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80128a0:	4605      	mov	r5, r0
 80128a2:	d119      	bne.n	80128d8 <__cvt+0x94>
 80128a4:	f019 0f01 	tst.w	r9, #1
 80128a8:	d00e      	beq.n	80128c8 <__cvt+0x84>
 80128aa:	eb00 0904 	add.w	r9, r0, r4
 80128ae:	2200      	movs	r2, #0
 80128b0:	2300      	movs	r3, #0
 80128b2:	4630      	mov	r0, r6
 80128b4:	4639      	mov	r1, r7
 80128b6:	f7ee f8df 	bl	8000a78 <__aeabi_dcmpeq>
 80128ba:	b108      	cbz	r0, 80128c0 <__cvt+0x7c>
 80128bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80128c0:	2230      	movs	r2, #48	@ 0x30
 80128c2:	9b03      	ldr	r3, [sp, #12]
 80128c4:	454b      	cmp	r3, r9
 80128c6:	d31e      	bcc.n	8012906 <__cvt+0xc2>
 80128c8:	9b03      	ldr	r3, [sp, #12]
 80128ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128cc:	1b5b      	subs	r3, r3, r5
 80128ce:	4628      	mov	r0, r5
 80128d0:	6013      	str	r3, [r2, #0]
 80128d2:	b004      	add	sp, #16
 80128d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80128dc:	eb00 0904 	add.w	r9, r0, r4
 80128e0:	d1e5      	bne.n	80128ae <__cvt+0x6a>
 80128e2:	7803      	ldrb	r3, [r0, #0]
 80128e4:	2b30      	cmp	r3, #48	@ 0x30
 80128e6:	d10a      	bne.n	80128fe <__cvt+0xba>
 80128e8:	2200      	movs	r2, #0
 80128ea:	2300      	movs	r3, #0
 80128ec:	4630      	mov	r0, r6
 80128ee:	4639      	mov	r1, r7
 80128f0:	f7ee f8c2 	bl	8000a78 <__aeabi_dcmpeq>
 80128f4:	b918      	cbnz	r0, 80128fe <__cvt+0xba>
 80128f6:	f1c4 0401 	rsb	r4, r4, #1
 80128fa:	f8ca 4000 	str.w	r4, [sl]
 80128fe:	f8da 3000 	ldr.w	r3, [sl]
 8012902:	4499      	add	r9, r3
 8012904:	e7d3      	b.n	80128ae <__cvt+0x6a>
 8012906:	1c59      	adds	r1, r3, #1
 8012908:	9103      	str	r1, [sp, #12]
 801290a:	701a      	strb	r2, [r3, #0]
 801290c:	e7d9      	b.n	80128c2 <__cvt+0x7e>

0801290e <__exponent>:
 801290e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012910:	2900      	cmp	r1, #0
 8012912:	bfba      	itte	lt
 8012914:	4249      	neglt	r1, r1
 8012916:	232d      	movlt	r3, #45	@ 0x2d
 8012918:	232b      	movge	r3, #43	@ 0x2b
 801291a:	2909      	cmp	r1, #9
 801291c:	7002      	strb	r2, [r0, #0]
 801291e:	7043      	strb	r3, [r0, #1]
 8012920:	dd29      	ble.n	8012976 <__exponent+0x68>
 8012922:	f10d 0307 	add.w	r3, sp, #7
 8012926:	461d      	mov	r5, r3
 8012928:	270a      	movs	r7, #10
 801292a:	461a      	mov	r2, r3
 801292c:	fbb1 f6f7 	udiv	r6, r1, r7
 8012930:	fb07 1416 	mls	r4, r7, r6, r1
 8012934:	3430      	adds	r4, #48	@ 0x30
 8012936:	f802 4c01 	strb.w	r4, [r2, #-1]
 801293a:	460c      	mov	r4, r1
 801293c:	2c63      	cmp	r4, #99	@ 0x63
 801293e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8012942:	4631      	mov	r1, r6
 8012944:	dcf1      	bgt.n	801292a <__exponent+0x1c>
 8012946:	3130      	adds	r1, #48	@ 0x30
 8012948:	1e94      	subs	r4, r2, #2
 801294a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801294e:	1c41      	adds	r1, r0, #1
 8012950:	4623      	mov	r3, r4
 8012952:	42ab      	cmp	r3, r5
 8012954:	d30a      	bcc.n	801296c <__exponent+0x5e>
 8012956:	f10d 0309 	add.w	r3, sp, #9
 801295a:	1a9b      	subs	r3, r3, r2
 801295c:	42ac      	cmp	r4, r5
 801295e:	bf88      	it	hi
 8012960:	2300      	movhi	r3, #0
 8012962:	3302      	adds	r3, #2
 8012964:	4403      	add	r3, r0
 8012966:	1a18      	subs	r0, r3, r0
 8012968:	b003      	add	sp, #12
 801296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801296c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012970:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012974:	e7ed      	b.n	8012952 <__exponent+0x44>
 8012976:	2330      	movs	r3, #48	@ 0x30
 8012978:	3130      	adds	r1, #48	@ 0x30
 801297a:	7083      	strb	r3, [r0, #2]
 801297c:	70c1      	strb	r1, [r0, #3]
 801297e:	1d03      	adds	r3, r0, #4
 8012980:	e7f1      	b.n	8012966 <__exponent+0x58>
	...

08012984 <_printf_float>:
 8012984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012988:	b08d      	sub	sp, #52	@ 0x34
 801298a:	460c      	mov	r4, r1
 801298c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012990:	4616      	mov	r6, r2
 8012992:	461f      	mov	r7, r3
 8012994:	4605      	mov	r5, r0
 8012996:	f000 fd51 	bl	801343c <_localeconv_r>
 801299a:	6803      	ldr	r3, [r0, #0]
 801299c:	9304      	str	r3, [sp, #16]
 801299e:	4618      	mov	r0, r3
 80129a0:	f7ed fc3e 	bl	8000220 <strlen>
 80129a4:	2300      	movs	r3, #0
 80129a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80129a8:	f8d8 3000 	ldr.w	r3, [r8]
 80129ac:	9005      	str	r0, [sp, #20]
 80129ae:	3307      	adds	r3, #7
 80129b0:	f023 0307 	bic.w	r3, r3, #7
 80129b4:	f103 0208 	add.w	r2, r3, #8
 80129b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80129bc:	f8d4 b000 	ldr.w	fp, [r4]
 80129c0:	f8c8 2000 	str.w	r2, [r8]
 80129c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80129c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80129cc:	9307      	str	r3, [sp, #28]
 80129ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80129d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80129d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129da:	4b9c      	ldr	r3, [pc, #624]	@ (8012c4c <_printf_float+0x2c8>)
 80129dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80129e0:	f7ee f87c 	bl	8000adc <__aeabi_dcmpun>
 80129e4:	bb70      	cbnz	r0, 8012a44 <_printf_float+0xc0>
 80129e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129ea:	4b98      	ldr	r3, [pc, #608]	@ (8012c4c <_printf_float+0x2c8>)
 80129ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80129f0:	f7ee f856 	bl	8000aa0 <__aeabi_dcmple>
 80129f4:	bb30      	cbnz	r0, 8012a44 <_printf_float+0xc0>
 80129f6:	2200      	movs	r2, #0
 80129f8:	2300      	movs	r3, #0
 80129fa:	4640      	mov	r0, r8
 80129fc:	4649      	mov	r1, r9
 80129fe:	f7ee f845 	bl	8000a8c <__aeabi_dcmplt>
 8012a02:	b110      	cbz	r0, 8012a0a <_printf_float+0x86>
 8012a04:	232d      	movs	r3, #45	@ 0x2d
 8012a06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a0a:	4a91      	ldr	r2, [pc, #580]	@ (8012c50 <_printf_float+0x2cc>)
 8012a0c:	4b91      	ldr	r3, [pc, #580]	@ (8012c54 <_printf_float+0x2d0>)
 8012a0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012a12:	bf8c      	ite	hi
 8012a14:	4690      	movhi	r8, r2
 8012a16:	4698      	movls	r8, r3
 8012a18:	2303      	movs	r3, #3
 8012a1a:	6123      	str	r3, [r4, #16]
 8012a1c:	f02b 0304 	bic.w	r3, fp, #4
 8012a20:	6023      	str	r3, [r4, #0]
 8012a22:	f04f 0900 	mov.w	r9, #0
 8012a26:	9700      	str	r7, [sp, #0]
 8012a28:	4633      	mov	r3, r6
 8012a2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012a2c:	4621      	mov	r1, r4
 8012a2e:	4628      	mov	r0, r5
 8012a30:	f000 f9d2 	bl	8012dd8 <_printf_common>
 8012a34:	3001      	adds	r0, #1
 8012a36:	f040 808d 	bne.w	8012b54 <_printf_float+0x1d0>
 8012a3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a3e:	b00d      	add	sp, #52	@ 0x34
 8012a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a44:	4642      	mov	r2, r8
 8012a46:	464b      	mov	r3, r9
 8012a48:	4640      	mov	r0, r8
 8012a4a:	4649      	mov	r1, r9
 8012a4c:	f7ee f846 	bl	8000adc <__aeabi_dcmpun>
 8012a50:	b140      	cbz	r0, 8012a64 <_printf_float+0xe0>
 8012a52:	464b      	mov	r3, r9
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	bfbc      	itt	lt
 8012a58:	232d      	movlt	r3, #45	@ 0x2d
 8012a5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8012c58 <_printf_float+0x2d4>)
 8012a60:	4b7e      	ldr	r3, [pc, #504]	@ (8012c5c <_printf_float+0x2d8>)
 8012a62:	e7d4      	b.n	8012a0e <_printf_float+0x8a>
 8012a64:	6863      	ldr	r3, [r4, #4]
 8012a66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012a6a:	9206      	str	r2, [sp, #24]
 8012a6c:	1c5a      	adds	r2, r3, #1
 8012a6e:	d13b      	bne.n	8012ae8 <_printf_float+0x164>
 8012a70:	2306      	movs	r3, #6
 8012a72:	6063      	str	r3, [r4, #4]
 8012a74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012a78:	2300      	movs	r3, #0
 8012a7a:	6022      	str	r2, [r4, #0]
 8012a7c:	9303      	str	r3, [sp, #12]
 8012a7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8012a80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012a84:	ab09      	add	r3, sp, #36	@ 0x24
 8012a86:	9300      	str	r3, [sp, #0]
 8012a88:	6861      	ldr	r1, [r4, #4]
 8012a8a:	ec49 8b10 	vmov	d0, r8, r9
 8012a8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012a92:	4628      	mov	r0, r5
 8012a94:	f7ff fed6 	bl	8012844 <__cvt>
 8012a98:	9b06      	ldr	r3, [sp, #24]
 8012a9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a9c:	2b47      	cmp	r3, #71	@ 0x47
 8012a9e:	4680      	mov	r8, r0
 8012aa0:	d129      	bne.n	8012af6 <_printf_float+0x172>
 8012aa2:	1cc8      	adds	r0, r1, #3
 8012aa4:	db02      	blt.n	8012aac <_printf_float+0x128>
 8012aa6:	6863      	ldr	r3, [r4, #4]
 8012aa8:	4299      	cmp	r1, r3
 8012aaa:	dd41      	ble.n	8012b30 <_printf_float+0x1ac>
 8012aac:	f1aa 0a02 	sub.w	sl, sl, #2
 8012ab0:	fa5f fa8a 	uxtb.w	sl, sl
 8012ab4:	3901      	subs	r1, #1
 8012ab6:	4652      	mov	r2, sl
 8012ab8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012abc:	9109      	str	r1, [sp, #36]	@ 0x24
 8012abe:	f7ff ff26 	bl	801290e <__exponent>
 8012ac2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012ac4:	1813      	adds	r3, r2, r0
 8012ac6:	2a01      	cmp	r2, #1
 8012ac8:	4681      	mov	r9, r0
 8012aca:	6123      	str	r3, [r4, #16]
 8012acc:	dc02      	bgt.n	8012ad4 <_printf_float+0x150>
 8012ace:	6822      	ldr	r2, [r4, #0]
 8012ad0:	07d2      	lsls	r2, r2, #31
 8012ad2:	d501      	bpl.n	8012ad8 <_printf_float+0x154>
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	6123      	str	r3, [r4, #16]
 8012ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d0a2      	beq.n	8012a26 <_printf_float+0xa2>
 8012ae0:	232d      	movs	r3, #45	@ 0x2d
 8012ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ae6:	e79e      	b.n	8012a26 <_printf_float+0xa2>
 8012ae8:	9a06      	ldr	r2, [sp, #24]
 8012aea:	2a47      	cmp	r2, #71	@ 0x47
 8012aec:	d1c2      	bne.n	8012a74 <_printf_float+0xf0>
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d1c0      	bne.n	8012a74 <_printf_float+0xf0>
 8012af2:	2301      	movs	r3, #1
 8012af4:	e7bd      	b.n	8012a72 <_printf_float+0xee>
 8012af6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012afa:	d9db      	bls.n	8012ab4 <_printf_float+0x130>
 8012afc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012b00:	d118      	bne.n	8012b34 <_printf_float+0x1b0>
 8012b02:	2900      	cmp	r1, #0
 8012b04:	6863      	ldr	r3, [r4, #4]
 8012b06:	dd0b      	ble.n	8012b20 <_printf_float+0x19c>
 8012b08:	6121      	str	r1, [r4, #16]
 8012b0a:	b913      	cbnz	r3, 8012b12 <_printf_float+0x18e>
 8012b0c:	6822      	ldr	r2, [r4, #0]
 8012b0e:	07d0      	lsls	r0, r2, #31
 8012b10:	d502      	bpl.n	8012b18 <_printf_float+0x194>
 8012b12:	3301      	adds	r3, #1
 8012b14:	440b      	add	r3, r1
 8012b16:	6123      	str	r3, [r4, #16]
 8012b18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012b1a:	f04f 0900 	mov.w	r9, #0
 8012b1e:	e7db      	b.n	8012ad8 <_printf_float+0x154>
 8012b20:	b913      	cbnz	r3, 8012b28 <_printf_float+0x1a4>
 8012b22:	6822      	ldr	r2, [r4, #0]
 8012b24:	07d2      	lsls	r2, r2, #31
 8012b26:	d501      	bpl.n	8012b2c <_printf_float+0x1a8>
 8012b28:	3302      	adds	r3, #2
 8012b2a:	e7f4      	b.n	8012b16 <_printf_float+0x192>
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	e7f2      	b.n	8012b16 <_printf_float+0x192>
 8012b30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b36:	4299      	cmp	r1, r3
 8012b38:	db05      	blt.n	8012b46 <_printf_float+0x1c2>
 8012b3a:	6823      	ldr	r3, [r4, #0]
 8012b3c:	6121      	str	r1, [r4, #16]
 8012b3e:	07d8      	lsls	r0, r3, #31
 8012b40:	d5ea      	bpl.n	8012b18 <_printf_float+0x194>
 8012b42:	1c4b      	adds	r3, r1, #1
 8012b44:	e7e7      	b.n	8012b16 <_printf_float+0x192>
 8012b46:	2900      	cmp	r1, #0
 8012b48:	bfd4      	ite	le
 8012b4a:	f1c1 0202 	rsble	r2, r1, #2
 8012b4e:	2201      	movgt	r2, #1
 8012b50:	4413      	add	r3, r2
 8012b52:	e7e0      	b.n	8012b16 <_printf_float+0x192>
 8012b54:	6823      	ldr	r3, [r4, #0]
 8012b56:	055a      	lsls	r2, r3, #21
 8012b58:	d407      	bmi.n	8012b6a <_printf_float+0x1e6>
 8012b5a:	6923      	ldr	r3, [r4, #16]
 8012b5c:	4642      	mov	r2, r8
 8012b5e:	4631      	mov	r1, r6
 8012b60:	4628      	mov	r0, r5
 8012b62:	47b8      	blx	r7
 8012b64:	3001      	adds	r0, #1
 8012b66:	d12b      	bne.n	8012bc0 <_printf_float+0x23c>
 8012b68:	e767      	b.n	8012a3a <_printf_float+0xb6>
 8012b6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012b6e:	f240 80dd 	bls.w	8012d2c <_printf_float+0x3a8>
 8012b72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012b76:	2200      	movs	r2, #0
 8012b78:	2300      	movs	r3, #0
 8012b7a:	f7ed ff7d 	bl	8000a78 <__aeabi_dcmpeq>
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	d033      	beq.n	8012bea <_printf_float+0x266>
 8012b82:	4a37      	ldr	r2, [pc, #220]	@ (8012c60 <_printf_float+0x2dc>)
 8012b84:	2301      	movs	r3, #1
 8012b86:	4631      	mov	r1, r6
 8012b88:	4628      	mov	r0, r5
 8012b8a:	47b8      	blx	r7
 8012b8c:	3001      	adds	r0, #1
 8012b8e:	f43f af54 	beq.w	8012a3a <_printf_float+0xb6>
 8012b92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012b96:	4543      	cmp	r3, r8
 8012b98:	db02      	blt.n	8012ba0 <_printf_float+0x21c>
 8012b9a:	6823      	ldr	r3, [r4, #0]
 8012b9c:	07d8      	lsls	r0, r3, #31
 8012b9e:	d50f      	bpl.n	8012bc0 <_printf_float+0x23c>
 8012ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ba4:	4631      	mov	r1, r6
 8012ba6:	4628      	mov	r0, r5
 8012ba8:	47b8      	blx	r7
 8012baa:	3001      	adds	r0, #1
 8012bac:	f43f af45 	beq.w	8012a3a <_printf_float+0xb6>
 8012bb0:	f04f 0900 	mov.w	r9, #0
 8012bb4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012bb8:	f104 0a1a 	add.w	sl, r4, #26
 8012bbc:	45c8      	cmp	r8, r9
 8012bbe:	dc09      	bgt.n	8012bd4 <_printf_float+0x250>
 8012bc0:	6823      	ldr	r3, [r4, #0]
 8012bc2:	079b      	lsls	r3, r3, #30
 8012bc4:	f100 8103 	bmi.w	8012dce <_printf_float+0x44a>
 8012bc8:	68e0      	ldr	r0, [r4, #12]
 8012bca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012bcc:	4298      	cmp	r0, r3
 8012bce:	bfb8      	it	lt
 8012bd0:	4618      	movlt	r0, r3
 8012bd2:	e734      	b.n	8012a3e <_printf_float+0xba>
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	4652      	mov	r2, sl
 8012bd8:	4631      	mov	r1, r6
 8012bda:	4628      	mov	r0, r5
 8012bdc:	47b8      	blx	r7
 8012bde:	3001      	adds	r0, #1
 8012be0:	f43f af2b 	beq.w	8012a3a <_printf_float+0xb6>
 8012be4:	f109 0901 	add.w	r9, r9, #1
 8012be8:	e7e8      	b.n	8012bbc <_printf_float+0x238>
 8012bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	dc39      	bgt.n	8012c64 <_printf_float+0x2e0>
 8012bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8012c60 <_printf_float+0x2dc>)
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	4631      	mov	r1, r6
 8012bf6:	4628      	mov	r0, r5
 8012bf8:	47b8      	blx	r7
 8012bfa:	3001      	adds	r0, #1
 8012bfc:	f43f af1d 	beq.w	8012a3a <_printf_float+0xb6>
 8012c00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012c04:	ea59 0303 	orrs.w	r3, r9, r3
 8012c08:	d102      	bne.n	8012c10 <_printf_float+0x28c>
 8012c0a:	6823      	ldr	r3, [r4, #0]
 8012c0c:	07d9      	lsls	r1, r3, #31
 8012c0e:	d5d7      	bpl.n	8012bc0 <_printf_float+0x23c>
 8012c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c14:	4631      	mov	r1, r6
 8012c16:	4628      	mov	r0, r5
 8012c18:	47b8      	blx	r7
 8012c1a:	3001      	adds	r0, #1
 8012c1c:	f43f af0d 	beq.w	8012a3a <_printf_float+0xb6>
 8012c20:	f04f 0a00 	mov.w	sl, #0
 8012c24:	f104 0b1a 	add.w	fp, r4, #26
 8012c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c2a:	425b      	negs	r3, r3
 8012c2c:	4553      	cmp	r3, sl
 8012c2e:	dc01      	bgt.n	8012c34 <_printf_float+0x2b0>
 8012c30:	464b      	mov	r3, r9
 8012c32:	e793      	b.n	8012b5c <_printf_float+0x1d8>
 8012c34:	2301      	movs	r3, #1
 8012c36:	465a      	mov	r2, fp
 8012c38:	4631      	mov	r1, r6
 8012c3a:	4628      	mov	r0, r5
 8012c3c:	47b8      	blx	r7
 8012c3e:	3001      	adds	r0, #1
 8012c40:	f43f aefb 	beq.w	8012a3a <_printf_float+0xb6>
 8012c44:	f10a 0a01 	add.w	sl, sl, #1
 8012c48:	e7ee      	b.n	8012c28 <_printf_float+0x2a4>
 8012c4a:	bf00      	nop
 8012c4c:	7fefffff 	.word	0x7fefffff
 8012c50:	080188a0 	.word	0x080188a0
 8012c54:	0801889c 	.word	0x0801889c
 8012c58:	080188a8 	.word	0x080188a8
 8012c5c:	080188a4 	.word	0x080188a4
 8012c60:	080188ac 	.word	0x080188ac
 8012c64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012c66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012c6a:	4553      	cmp	r3, sl
 8012c6c:	bfa8      	it	ge
 8012c6e:	4653      	movge	r3, sl
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	4699      	mov	r9, r3
 8012c74:	dc36      	bgt.n	8012ce4 <_printf_float+0x360>
 8012c76:	f04f 0b00 	mov.w	fp, #0
 8012c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c7e:	f104 021a 	add.w	r2, r4, #26
 8012c82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012c84:	9306      	str	r3, [sp, #24]
 8012c86:	eba3 0309 	sub.w	r3, r3, r9
 8012c8a:	455b      	cmp	r3, fp
 8012c8c:	dc31      	bgt.n	8012cf2 <_printf_float+0x36e>
 8012c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c90:	459a      	cmp	sl, r3
 8012c92:	dc3a      	bgt.n	8012d0a <_printf_float+0x386>
 8012c94:	6823      	ldr	r3, [r4, #0]
 8012c96:	07da      	lsls	r2, r3, #31
 8012c98:	d437      	bmi.n	8012d0a <_printf_float+0x386>
 8012c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c9c:	ebaa 0903 	sub.w	r9, sl, r3
 8012ca0:	9b06      	ldr	r3, [sp, #24]
 8012ca2:	ebaa 0303 	sub.w	r3, sl, r3
 8012ca6:	4599      	cmp	r9, r3
 8012ca8:	bfa8      	it	ge
 8012caa:	4699      	movge	r9, r3
 8012cac:	f1b9 0f00 	cmp.w	r9, #0
 8012cb0:	dc33      	bgt.n	8012d1a <_printf_float+0x396>
 8012cb2:	f04f 0800 	mov.w	r8, #0
 8012cb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012cba:	f104 0b1a 	add.w	fp, r4, #26
 8012cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cc0:	ebaa 0303 	sub.w	r3, sl, r3
 8012cc4:	eba3 0309 	sub.w	r3, r3, r9
 8012cc8:	4543      	cmp	r3, r8
 8012cca:	f77f af79 	ble.w	8012bc0 <_printf_float+0x23c>
 8012cce:	2301      	movs	r3, #1
 8012cd0:	465a      	mov	r2, fp
 8012cd2:	4631      	mov	r1, r6
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	47b8      	blx	r7
 8012cd8:	3001      	adds	r0, #1
 8012cda:	f43f aeae 	beq.w	8012a3a <_printf_float+0xb6>
 8012cde:	f108 0801 	add.w	r8, r8, #1
 8012ce2:	e7ec      	b.n	8012cbe <_printf_float+0x33a>
 8012ce4:	4642      	mov	r2, r8
 8012ce6:	4631      	mov	r1, r6
 8012ce8:	4628      	mov	r0, r5
 8012cea:	47b8      	blx	r7
 8012cec:	3001      	adds	r0, #1
 8012cee:	d1c2      	bne.n	8012c76 <_printf_float+0x2f2>
 8012cf0:	e6a3      	b.n	8012a3a <_printf_float+0xb6>
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	4631      	mov	r1, r6
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	9206      	str	r2, [sp, #24]
 8012cfa:	47b8      	blx	r7
 8012cfc:	3001      	adds	r0, #1
 8012cfe:	f43f ae9c 	beq.w	8012a3a <_printf_float+0xb6>
 8012d02:	9a06      	ldr	r2, [sp, #24]
 8012d04:	f10b 0b01 	add.w	fp, fp, #1
 8012d08:	e7bb      	b.n	8012c82 <_printf_float+0x2fe>
 8012d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d0e:	4631      	mov	r1, r6
 8012d10:	4628      	mov	r0, r5
 8012d12:	47b8      	blx	r7
 8012d14:	3001      	adds	r0, #1
 8012d16:	d1c0      	bne.n	8012c9a <_printf_float+0x316>
 8012d18:	e68f      	b.n	8012a3a <_printf_float+0xb6>
 8012d1a:	9a06      	ldr	r2, [sp, #24]
 8012d1c:	464b      	mov	r3, r9
 8012d1e:	4442      	add	r2, r8
 8012d20:	4631      	mov	r1, r6
 8012d22:	4628      	mov	r0, r5
 8012d24:	47b8      	blx	r7
 8012d26:	3001      	adds	r0, #1
 8012d28:	d1c3      	bne.n	8012cb2 <_printf_float+0x32e>
 8012d2a:	e686      	b.n	8012a3a <_printf_float+0xb6>
 8012d2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012d30:	f1ba 0f01 	cmp.w	sl, #1
 8012d34:	dc01      	bgt.n	8012d3a <_printf_float+0x3b6>
 8012d36:	07db      	lsls	r3, r3, #31
 8012d38:	d536      	bpl.n	8012da8 <_printf_float+0x424>
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	4642      	mov	r2, r8
 8012d3e:	4631      	mov	r1, r6
 8012d40:	4628      	mov	r0, r5
 8012d42:	47b8      	blx	r7
 8012d44:	3001      	adds	r0, #1
 8012d46:	f43f ae78 	beq.w	8012a3a <_printf_float+0xb6>
 8012d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d4e:	4631      	mov	r1, r6
 8012d50:	4628      	mov	r0, r5
 8012d52:	47b8      	blx	r7
 8012d54:	3001      	adds	r0, #1
 8012d56:	f43f ae70 	beq.w	8012a3a <_printf_float+0xb6>
 8012d5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012d5e:	2200      	movs	r2, #0
 8012d60:	2300      	movs	r3, #0
 8012d62:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012d66:	f7ed fe87 	bl	8000a78 <__aeabi_dcmpeq>
 8012d6a:	b9c0      	cbnz	r0, 8012d9e <_printf_float+0x41a>
 8012d6c:	4653      	mov	r3, sl
 8012d6e:	f108 0201 	add.w	r2, r8, #1
 8012d72:	4631      	mov	r1, r6
 8012d74:	4628      	mov	r0, r5
 8012d76:	47b8      	blx	r7
 8012d78:	3001      	adds	r0, #1
 8012d7a:	d10c      	bne.n	8012d96 <_printf_float+0x412>
 8012d7c:	e65d      	b.n	8012a3a <_printf_float+0xb6>
 8012d7e:	2301      	movs	r3, #1
 8012d80:	465a      	mov	r2, fp
 8012d82:	4631      	mov	r1, r6
 8012d84:	4628      	mov	r0, r5
 8012d86:	47b8      	blx	r7
 8012d88:	3001      	adds	r0, #1
 8012d8a:	f43f ae56 	beq.w	8012a3a <_printf_float+0xb6>
 8012d8e:	f108 0801 	add.w	r8, r8, #1
 8012d92:	45d0      	cmp	r8, sl
 8012d94:	dbf3      	blt.n	8012d7e <_printf_float+0x3fa>
 8012d96:	464b      	mov	r3, r9
 8012d98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012d9c:	e6df      	b.n	8012b5e <_printf_float+0x1da>
 8012d9e:	f04f 0800 	mov.w	r8, #0
 8012da2:	f104 0b1a 	add.w	fp, r4, #26
 8012da6:	e7f4      	b.n	8012d92 <_printf_float+0x40e>
 8012da8:	2301      	movs	r3, #1
 8012daa:	4642      	mov	r2, r8
 8012dac:	e7e1      	b.n	8012d72 <_printf_float+0x3ee>
 8012dae:	2301      	movs	r3, #1
 8012db0:	464a      	mov	r2, r9
 8012db2:	4631      	mov	r1, r6
 8012db4:	4628      	mov	r0, r5
 8012db6:	47b8      	blx	r7
 8012db8:	3001      	adds	r0, #1
 8012dba:	f43f ae3e 	beq.w	8012a3a <_printf_float+0xb6>
 8012dbe:	f108 0801 	add.w	r8, r8, #1
 8012dc2:	68e3      	ldr	r3, [r4, #12]
 8012dc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012dc6:	1a5b      	subs	r3, r3, r1
 8012dc8:	4543      	cmp	r3, r8
 8012dca:	dcf0      	bgt.n	8012dae <_printf_float+0x42a>
 8012dcc:	e6fc      	b.n	8012bc8 <_printf_float+0x244>
 8012dce:	f04f 0800 	mov.w	r8, #0
 8012dd2:	f104 0919 	add.w	r9, r4, #25
 8012dd6:	e7f4      	b.n	8012dc2 <_printf_float+0x43e>

08012dd8 <_printf_common>:
 8012dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ddc:	4616      	mov	r6, r2
 8012dde:	4698      	mov	r8, r3
 8012de0:	688a      	ldr	r2, [r1, #8]
 8012de2:	690b      	ldr	r3, [r1, #16]
 8012de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012de8:	4293      	cmp	r3, r2
 8012dea:	bfb8      	it	lt
 8012dec:	4613      	movlt	r3, r2
 8012dee:	6033      	str	r3, [r6, #0]
 8012df0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012df4:	4607      	mov	r7, r0
 8012df6:	460c      	mov	r4, r1
 8012df8:	b10a      	cbz	r2, 8012dfe <_printf_common+0x26>
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	6033      	str	r3, [r6, #0]
 8012dfe:	6823      	ldr	r3, [r4, #0]
 8012e00:	0699      	lsls	r1, r3, #26
 8012e02:	bf42      	ittt	mi
 8012e04:	6833      	ldrmi	r3, [r6, #0]
 8012e06:	3302      	addmi	r3, #2
 8012e08:	6033      	strmi	r3, [r6, #0]
 8012e0a:	6825      	ldr	r5, [r4, #0]
 8012e0c:	f015 0506 	ands.w	r5, r5, #6
 8012e10:	d106      	bne.n	8012e20 <_printf_common+0x48>
 8012e12:	f104 0a19 	add.w	sl, r4, #25
 8012e16:	68e3      	ldr	r3, [r4, #12]
 8012e18:	6832      	ldr	r2, [r6, #0]
 8012e1a:	1a9b      	subs	r3, r3, r2
 8012e1c:	42ab      	cmp	r3, r5
 8012e1e:	dc26      	bgt.n	8012e6e <_printf_common+0x96>
 8012e20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012e24:	6822      	ldr	r2, [r4, #0]
 8012e26:	3b00      	subs	r3, #0
 8012e28:	bf18      	it	ne
 8012e2a:	2301      	movne	r3, #1
 8012e2c:	0692      	lsls	r2, r2, #26
 8012e2e:	d42b      	bmi.n	8012e88 <_printf_common+0xb0>
 8012e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012e34:	4641      	mov	r1, r8
 8012e36:	4638      	mov	r0, r7
 8012e38:	47c8      	blx	r9
 8012e3a:	3001      	adds	r0, #1
 8012e3c:	d01e      	beq.n	8012e7c <_printf_common+0xa4>
 8012e3e:	6823      	ldr	r3, [r4, #0]
 8012e40:	6922      	ldr	r2, [r4, #16]
 8012e42:	f003 0306 	and.w	r3, r3, #6
 8012e46:	2b04      	cmp	r3, #4
 8012e48:	bf02      	ittt	eq
 8012e4a:	68e5      	ldreq	r5, [r4, #12]
 8012e4c:	6833      	ldreq	r3, [r6, #0]
 8012e4e:	1aed      	subeq	r5, r5, r3
 8012e50:	68a3      	ldr	r3, [r4, #8]
 8012e52:	bf0c      	ite	eq
 8012e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e58:	2500      	movne	r5, #0
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	bfc4      	itt	gt
 8012e5e:	1a9b      	subgt	r3, r3, r2
 8012e60:	18ed      	addgt	r5, r5, r3
 8012e62:	2600      	movs	r6, #0
 8012e64:	341a      	adds	r4, #26
 8012e66:	42b5      	cmp	r5, r6
 8012e68:	d11a      	bne.n	8012ea0 <_printf_common+0xc8>
 8012e6a:	2000      	movs	r0, #0
 8012e6c:	e008      	b.n	8012e80 <_printf_common+0xa8>
 8012e6e:	2301      	movs	r3, #1
 8012e70:	4652      	mov	r2, sl
 8012e72:	4641      	mov	r1, r8
 8012e74:	4638      	mov	r0, r7
 8012e76:	47c8      	blx	r9
 8012e78:	3001      	adds	r0, #1
 8012e7a:	d103      	bne.n	8012e84 <_printf_common+0xac>
 8012e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e84:	3501      	adds	r5, #1
 8012e86:	e7c6      	b.n	8012e16 <_printf_common+0x3e>
 8012e88:	18e1      	adds	r1, r4, r3
 8012e8a:	1c5a      	adds	r2, r3, #1
 8012e8c:	2030      	movs	r0, #48	@ 0x30
 8012e8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012e92:	4422      	add	r2, r4
 8012e94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012e98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012e9c:	3302      	adds	r3, #2
 8012e9e:	e7c7      	b.n	8012e30 <_printf_common+0x58>
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	4622      	mov	r2, r4
 8012ea4:	4641      	mov	r1, r8
 8012ea6:	4638      	mov	r0, r7
 8012ea8:	47c8      	blx	r9
 8012eaa:	3001      	adds	r0, #1
 8012eac:	d0e6      	beq.n	8012e7c <_printf_common+0xa4>
 8012eae:	3601      	adds	r6, #1
 8012eb0:	e7d9      	b.n	8012e66 <_printf_common+0x8e>
	...

08012eb4 <_printf_i>:
 8012eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012eb8:	7e0f      	ldrb	r7, [r1, #24]
 8012eba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012ebc:	2f78      	cmp	r7, #120	@ 0x78
 8012ebe:	4691      	mov	r9, r2
 8012ec0:	4680      	mov	r8, r0
 8012ec2:	460c      	mov	r4, r1
 8012ec4:	469a      	mov	sl, r3
 8012ec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012eca:	d807      	bhi.n	8012edc <_printf_i+0x28>
 8012ecc:	2f62      	cmp	r7, #98	@ 0x62
 8012ece:	d80a      	bhi.n	8012ee6 <_printf_i+0x32>
 8012ed0:	2f00      	cmp	r7, #0
 8012ed2:	f000 80d1 	beq.w	8013078 <_printf_i+0x1c4>
 8012ed6:	2f58      	cmp	r7, #88	@ 0x58
 8012ed8:	f000 80b8 	beq.w	801304c <_printf_i+0x198>
 8012edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012ee4:	e03a      	b.n	8012f5c <_printf_i+0xa8>
 8012ee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012eea:	2b15      	cmp	r3, #21
 8012eec:	d8f6      	bhi.n	8012edc <_printf_i+0x28>
 8012eee:	a101      	add	r1, pc, #4	@ (adr r1, 8012ef4 <_printf_i+0x40>)
 8012ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ef4:	08012f4d 	.word	0x08012f4d
 8012ef8:	08012f61 	.word	0x08012f61
 8012efc:	08012edd 	.word	0x08012edd
 8012f00:	08012edd 	.word	0x08012edd
 8012f04:	08012edd 	.word	0x08012edd
 8012f08:	08012edd 	.word	0x08012edd
 8012f0c:	08012f61 	.word	0x08012f61
 8012f10:	08012edd 	.word	0x08012edd
 8012f14:	08012edd 	.word	0x08012edd
 8012f18:	08012edd 	.word	0x08012edd
 8012f1c:	08012edd 	.word	0x08012edd
 8012f20:	0801305f 	.word	0x0801305f
 8012f24:	08012f8b 	.word	0x08012f8b
 8012f28:	08013019 	.word	0x08013019
 8012f2c:	08012edd 	.word	0x08012edd
 8012f30:	08012edd 	.word	0x08012edd
 8012f34:	08013081 	.word	0x08013081
 8012f38:	08012edd 	.word	0x08012edd
 8012f3c:	08012f8b 	.word	0x08012f8b
 8012f40:	08012edd 	.word	0x08012edd
 8012f44:	08012edd 	.word	0x08012edd
 8012f48:	08013021 	.word	0x08013021
 8012f4c:	6833      	ldr	r3, [r6, #0]
 8012f4e:	1d1a      	adds	r2, r3, #4
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	6032      	str	r2, [r6, #0]
 8012f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	e09c      	b.n	801309a <_printf_i+0x1e6>
 8012f60:	6833      	ldr	r3, [r6, #0]
 8012f62:	6820      	ldr	r0, [r4, #0]
 8012f64:	1d19      	adds	r1, r3, #4
 8012f66:	6031      	str	r1, [r6, #0]
 8012f68:	0606      	lsls	r6, r0, #24
 8012f6a:	d501      	bpl.n	8012f70 <_printf_i+0xbc>
 8012f6c:	681d      	ldr	r5, [r3, #0]
 8012f6e:	e003      	b.n	8012f78 <_printf_i+0xc4>
 8012f70:	0645      	lsls	r5, r0, #25
 8012f72:	d5fb      	bpl.n	8012f6c <_printf_i+0xb8>
 8012f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012f78:	2d00      	cmp	r5, #0
 8012f7a:	da03      	bge.n	8012f84 <_printf_i+0xd0>
 8012f7c:	232d      	movs	r3, #45	@ 0x2d
 8012f7e:	426d      	negs	r5, r5
 8012f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f84:	4858      	ldr	r0, [pc, #352]	@ (80130e8 <_printf_i+0x234>)
 8012f86:	230a      	movs	r3, #10
 8012f88:	e011      	b.n	8012fae <_printf_i+0xfa>
 8012f8a:	6821      	ldr	r1, [r4, #0]
 8012f8c:	6833      	ldr	r3, [r6, #0]
 8012f8e:	0608      	lsls	r0, r1, #24
 8012f90:	f853 5b04 	ldr.w	r5, [r3], #4
 8012f94:	d402      	bmi.n	8012f9c <_printf_i+0xe8>
 8012f96:	0649      	lsls	r1, r1, #25
 8012f98:	bf48      	it	mi
 8012f9a:	b2ad      	uxthmi	r5, r5
 8012f9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8012f9e:	4852      	ldr	r0, [pc, #328]	@ (80130e8 <_printf_i+0x234>)
 8012fa0:	6033      	str	r3, [r6, #0]
 8012fa2:	bf14      	ite	ne
 8012fa4:	230a      	movne	r3, #10
 8012fa6:	2308      	moveq	r3, #8
 8012fa8:	2100      	movs	r1, #0
 8012faa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012fae:	6866      	ldr	r6, [r4, #4]
 8012fb0:	60a6      	str	r6, [r4, #8]
 8012fb2:	2e00      	cmp	r6, #0
 8012fb4:	db05      	blt.n	8012fc2 <_printf_i+0x10e>
 8012fb6:	6821      	ldr	r1, [r4, #0]
 8012fb8:	432e      	orrs	r6, r5
 8012fba:	f021 0104 	bic.w	r1, r1, #4
 8012fbe:	6021      	str	r1, [r4, #0]
 8012fc0:	d04b      	beq.n	801305a <_printf_i+0x1a6>
 8012fc2:	4616      	mov	r6, r2
 8012fc4:	fbb5 f1f3 	udiv	r1, r5, r3
 8012fc8:	fb03 5711 	mls	r7, r3, r1, r5
 8012fcc:	5dc7      	ldrb	r7, [r0, r7]
 8012fce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012fd2:	462f      	mov	r7, r5
 8012fd4:	42bb      	cmp	r3, r7
 8012fd6:	460d      	mov	r5, r1
 8012fd8:	d9f4      	bls.n	8012fc4 <_printf_i+0x110>
 8012fda:	2b08      	cmp	r3, #8
 8012fdc:	d10b      	bne.n	8012ff6 <_printf_i+0x142>
 8012fde:	6823      	ldr	r3, [r4, #0]
 8012fe0:	07df      	lsls	r7, r3, #31
 8012fe2:	d508      	bpl.n	8012ff6 <_printf_i+0x142>
 8012fe4:	6923      	ldr	r3, [r4, #16]
 8012fe6:	6861      	ldr	r1, [r4, #4]
 8012fe8:	4299      	cmp	r1, r3
 8012fea:	bfde      	ittt	le
 8012fec:	2330      	movle	r3, #48	@ 0x30
 8012fee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012ff2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8012ff6:	1b92      	subs	r2, r2, r6
 8012ff8:	6122      	str	r2, [r4, #16]
 8012ffa:	f8cd a000 	str.w	sl, [sp]
 8012ffe:	464b      	mov	r3, r9
 8013000:	aa03      	add	r2, sp, #12
 8013002:	4621      	mov	r1, r4
 8013004:	4640      	mov	r0, r8
 8013006:	f7ff fee7 	bl	8012dd8 <_printf_common>
 801300a:	3001      	adds	r0, #1
 801300c:	d14a      	bne.n	80130a4 <_printf_i+0x1f0>
 801300e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013012:	b004      	add	sp, #16
 8013014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013018:	6823      	ldr	r3, [r4, #0]
 801301a:	f043 0320 	orr.w	r3, r3, #32
 801301e:	6023      	str	r3, [r4, #0]
 8013020:	4832      	ldr	r0, [pc, #200]	@ (80130ec <_printf_i+0x238>)
 8013022:	2778      	movs	r7, #120	@ 0x78
 8013024:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013028:	6823      	ldr	r3, [r4, #0]
 801302a:	6831      	ldr	r1, [r6, #0]
 801302c:	061f      	lsls	r7, r3, #24
 801302e:	f851 5b04 	ldr.w	r5, [r1], #4
 8013032:	d402      	bmi.n	801303a <_printf_i+0x186>
 8013034:	065f      	lsls	r7, r3, #25
 8013036:	bf48      	it	mi
 8013038:	b2ad      	uxthmi	r5, r5
 801303a:	6031      	str	r1, [r6, #0]
 801303c:	07d9      	lsls	r1, r3, #31
 801303e:	bf44      	itt	mi
 8013040:	f043 0320 	orrmi.w	r3, r3, #32
 8013044:	6023      	strmi	r3, [r4, #0]
 8013046:	b11d      	cbz	r5, 8013050 <_printf_i+0x19c>
 8013048:	2310      	movs	r3, #16
 801304a:	e7ad      	b.n	8012fa8 <_printf_i+0xf4>
 801304c:	4826      	ldr	r0, [pc, #152]	@ (80130e8 <_printf_i+0x234>)
 801304e:	e7e9      	b.n	8013024 <_printf_i+0x170>
 8013050:	6823      	ldr	r3, [r4, #0]
 8013052:	f023 0320 	bic.w	r3, r3, #32
 8013056:	6023      	str	r3, [r4, #0]
 8013058:	e7f6      	b.n	8013048 <_printf_i+0x194>
 801305a:	4616      	mov	r6, r2
 801305c:	e7bd      	b.n	8012fda <_printf_i+0x126>
 801305e:	6833      	ldr	r3, [r6, #0]
 8013060:	6825      	ldr	r5, [r4, #0]
 8013062:	6961      	ldr	r1, [r4, #20]
 8013064:	1d18      	adds	r0, r3, #4
 8013066:	6030      	str	r0, [r6, #0]
 8013068:	062e      	lsls	r6, r5, #24
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	d501      	bpl.n	8013072 <_printf_i+0x1be>
 801306e:	6019      	str	r1, [r3, #0]
 8013070:	e002      	b.n	8013078 <_printf_i+0x1c4>
 8013072:	0668      	lsls	r0, r5, #25
 8013074:	d5fb      	bpl.n	801306e <_printf_i+0x1ba>
 8013076:	8019      	strh	r1, [r3, #0]
 8013078:	2300      	movs	r3, #0
 801307a:	6123      	str	r3, [r4, #16]
 801307c:	4616      	mov	r6, r2
 801307e:	e7bc      	b.n	8012ffa <_printf_i+0x146>
 8013080:	6833      	ldr	r3, [r6, #0]
 8013082:	1d1a      	adds	r2, r3, #4
 8013084:	6032      	str	r2, [r6, #0]
 8013086:	681e      	ldr	r6, [r3, #0]
 8013088:	6862      	ldr	r2, [r4, #4]
 801308a:	2100      	movs	r1, #0
 801308c:	4630      	mov	r0, r6
 801308e:	f7ed f877 	bl	8000180 <memchr>
 8013092:	b108      	cbz	r0, 8013098 <_printf_i+0x1e4>
 8013094:	1b80      	subs	r0, r0, r6
 8013096:	6060      	str	r0, [r4, #4]
 8013098:	6863      	ldr	r3, [r4, #4]
 801309a:	6123      	str	r3, [r4, #16]
 801309c:	2300      	movs	r3, #0
 801309e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80130a2:	e7aa      	b.n	8012ffa <_printf_i+0x146>
 80130a4:	6923      	ldr	r3, [r4, #16]
 80130a6:	4632      	mov	r2, r6
 80130a8:	4649      	mov	r1, r9
 80130aa:	4640      	mov	r0, r8
 80130ac:	47d0      	blx	sl
 80130ae:	3001      	adds	r0, #1
 80130b0:	d0ad      	beq.n	801300e <_printf_i+0x15a>
 80130b2:	6823      	ldr	r3, [r4, #0]
 80130b4:	079b      	lsls	r3, r3, #30
 80130b6:	d413      	bmi.n	80130e0 <_printf_i+0x22c>
 80130b8:	68e0      	ldr	r0, [r4, #12]
 80130ba:	9b03      	ldr	r3, [sp, #12]
 80130bc:	4298      	cmp	r0, r3
 80130be:	bfb8      	it	lt
 80130c0:	4618      	movlt	r0, r3
 80130c2:	e7a6      	b.n	8013012 <_printf_i+0x15e>
 80130c4:	2301      	movs	r3, #1
 80130c6:	4632      	mov	r2, r6
 80130c8:	4649      	mov	r1, r9
 80130ca:	4640      	mov	r0, r8
 80130cc:	47d0      	blx	sl
 80130ce:	3001      	adds	r0, #1
 80130d0:	d09d      	beq.n	801300e <_printf_i+0x15a>
 80130d2:	3501      	adds	r5, #1
 80130d4:	68e3      	ldr	r3, [r4, #12]
 80130d6:	9903      	ldr	r1, [sp, #12]
 80130d8:	1a5b      	subs	r3, r3, r1
 80130da:	42ab      	cmp	r3, r5
 80130dc:	dcf2      	bgt.n	80130c4 <_printf_i+0x210>
 80130de:	e7eb      	b.n	80130b8 <_printf_i+0x204>
 80130e0:	2500      	movs	r5, #0
 80130e2:	f104 0619 	add.w	r6, r4, #25
 80130e6:	e7f5      	b.n	80130d4 <_printf_i+0x220>
 80130e8:	080188ae 	.word	0x080188ae
 80130ec:	080188bf 	.word	0x080188bf

080130f0 <sniprintf>:
 80130f0:	b40c      	push	{r2, r3}
 80130f2:	b530      	push	{r4, r5, lr}
 80130f4:	4b18      	ldr	r3, [pc, #96]	@ (8013158 <sniprintf+0x68>)
 80130f6:	1e0c      	subs	r4, r1, #0
 80130f8:	681d      	ldr	r5, [r3, #0]
 80130fa:	b09d      	sub	sp, #116	@ 0x74
 80130fc:	da08      	bge.n	8013110 <sniprintf+0x20>
 80130fe:	238b      	movs	r3, #139	@ 0x8b
 8013100:	602b      	str	r3, [r5, #0]
 8013102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013106:	b01d      	add	sp, #116	@ 0x74
 8013108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801310c:	b002      	add	sp, #8
 801310e:	4770      	bx	lr
 8013110:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013114:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013118:	f04f 0300 	mov.w	r3, #0
 801311c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801311e:	bf14      	ite	ne
 8013120:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8013124:	4623      	moveq	r3, r4
 8013126:	9304      	str	r3, [sp, #16]
 8013128:	9307      	str	r3, [sp, #28]
 801312a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801312e:	9002      	str	r0, [sp, #8]
 8013130:	9006      	str	r0, [sp, #24]
 8013132:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013136:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013138:	ab21      	add	r3, sp, #132	@ 0x84
 801313a:	a902      	add	r1, sp, #8
 801313c:	4628      	mov	r0, r5
 801313e:	9301      	str	r3, [sp, #4]
 8013140:	f001 f836 	bl	80141b0 <_svfiprintf_r>
 8013144:	1c43      	adds	r3, r0, #1
 8013146:	bfbc      	itt	lt
 8013148:	238b      	movlt	r3, #139	@ 0x8b
 801314a:	602b      	strlt	r3, [r5, #0]
 801314c:	2c00      	cmp	r4, #0
 801314e:	d0da      	beq.n	8013106 <sniprintf+0x16>
 8013150:	9b02      	ldr	r3, [sp, #8]
 8013152:	2200      	movs	r2, #0
 8013154:	701a      	strb	r2, [r3, #0]
 8013156:	e7d6      	b.n	8013106 <sniprintf+0x16>
 8013158:	200000a4 	.word	0x200000a4

0801315c <std>:
 801315c:	2300      	movs	r3, #0
 801315e:	b510      	push	{r4, lr}
 8013160:	4604      	mov	r4, r0
 8013162:	e9c0 3300 	strd	r3, r3, [r0]
 8013166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801316a:	6083      	str	r3, [r0, #8]
 801316c:	8181      	strh	r1, [r0, #12]
 801316e:	6643      	str	r3, [r0, #100]	@ 0x64
 8013170:	81c2      	strh	r2, [r0, #14]
 8013172:	6183      	str	r3, [r0, #24]
 8013174:	4619      	mov	r1, r3
 8013176:	2208      	movs	r2, #8
 8013178:	305c      	adds	r0, #92	@ 0x5c
 801317a:	f000 f929 	bl	80133d0 <memset>
 801317e:	4b0d      	ldr	r3, [pc, #52]	@ (80131b4 <std+0x58>)
 8013180:	6263      	str	r3, [r4, #36]	@ 0x24
 8013182:	4b0d      	ldr	r3, [pc, #52]	@ (80131b8 <std+0x5c>)
 8013184:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013186:	4b0d      	ldr	r3, [pc, #52]	@ (80131bc <std+0x60>)
 8013188:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801318a:	4b0d      	ldr	r3, [pc, #52]	@ (80131c0 <std+0x64>)
 801318c:	6323      	str	r3, [r4, #48]	@ 0x30
 801318e:	4b0d      	ldr	r3, [pc, #52]	@ (80131c4 <std+0x68>)
 8013190:	6224      	str	r4, [r4, #32]
 8013192:	429c      	cmp	r4, r3
 8013194:	d006      	beq.n	80131a4 <std+0x48>
 8013196:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801319a:	4294      	cmp	r4, r2
 801319c:	d002      	beq.n	80131a4 <std+0x48>
 801319e:	33d0      	adds	r3, #208	@ 0xd0
 80131a0:	429c      	cmp	r4, r3
 80131a2:	d105      	bne.n	80131b0 <std+0x54>
 80131a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80131a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131ac:	f000 b942 	b.w	8013434 <__retarget_lock_init_recursive>
 80131b0:	bd10      	pop	{r4, pc}
 80131b2:	bf00      	nop
 80131b4:	08014fe5 	.word	0x08014fe5
 80131b8:	08015007 	.word	0x08015007
 80131bc:	0801503f 	.word	0x0801503f
 80131c0:	08015063 	.word	0x08015063
 80131c4:	200006e0 	.word	0x200006e0

080131c8 <stdio_exit_handler>:
 80131c8:	4a02      	ldr	r2, [pc, #8]	@ (80131d4 <stdio_exit_handler+0xc>)
 80131ca:	4903      	ldr	r1, [pc, #12]	@ (80131d8 <stdio_exit_handler+0x10>)
 80131cc:	4803      	ldr	r0, [pc, #12]	@ (80131dc <stdio_exit_handler+0x14>)
 80131ce:	f000 b869 	b.w	80132a4 <_fwalk_sglue>
 80131d2:	bf00      	nop
 80131d4:	20000098 	.word	0x20000098
 80131d8:	08014889 	.word	0x08014889
 80131dc:	200000a8 	.word	0x200000a8

080131e0 <cleanup_stdio>:
 80131e0:	6841      	ldr	r1, [r0, #4]
 80131e2:	4b0c      	ldr	r3, [pc, #48]	@ (8013214 <cleanup_stdio+0x34>)
 80131e4:	4299      	cmp	r1, r3
 80131e6:	b510      	push	{r4, lr}
 80131e8:	4604      	mov	r4, r0
 80131ea:	d001      	beq.n	80131f0 <cleanup_stdio+0x10>
 80131ec:	f001 fb4c 	bl	8014888 <_fflush_r>
 80131f0:	68a1      	ldr	r1, [r4, #8]
 80131f2:	4b09      	ldr	r3, [pc, #36]	@ (8013218 <cleanup_stdio+0x38>)
 80131f4:	4299      	cmp	r1, r3
 80131f6:	d002      	beq.n	80131fe <cleanup_stdio+0x1e>
 80131f8:	4620      	mov	r0, r4
 80131fa:	f001 fb45 	bl	8014888 <_fflush_r>
 80131fe:	68e1      	ldr	r1, [r4, #12]
 8013200:	4b06      	ldr	r3, [pc, #24]	@ (801321c <cleanup_stdio+0x3c>)
 8013202:	4299      	cmp	r1, r3
 8013204:	d004      	beq.n	8013210 <cleanup_stdio+0x30>
 8013206:	4620      	mov	r0, r4
 8013208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801320c:	f001 bb3c 	b.w	8014888 <_fflush_r>
 8013210:	bd10      	pop	{r4, pc}
 8013212:	bf00      	nop
 8013214:	200006e0 	.word	0x200006e0
 8013218:	20000748 	.word	0x20000748
 801321c:	200007b0 	.word	0x200007b0

08013220 <global_stdio_init.part.0>:
 8013220:	b510      	push	{r4, lr}
 8013222:	4b0b      	ldr	r3, [pc, #44]	@ (8013250 <global_stdio_init.part.0+0x30>)
 8013224:	4c0b      	ldr	r4, [pc, #44]	@ (8013254 <global_stdio_init.part.0+0x34>)
 8013226:	4a0c      	ldr	r2, [pc, #48]	@ (8013258 <global_stdio_init.part.0+0x38>)
 8013228:	601a      	str	r2, [r3, #0]
 801322a:	4620      	mov	r0, r4
 801322c:	2200      	movs	r2, #0
 801322e:	2104      	movs	r1, #4
 8013230:	f7ff ff94 	bl	801315c <std>
 8013234:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013238:	2201      	movs	r2, #1
 801323a:	2109      	movs	r1, #9
 801323c:	f7ff ff8e 	bl	801315c <std>
 8013240:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013244:	2202      	movs	r2, #2
 8013246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801324a:	2112      	movs	r1, #18
 801324c:	f7ff bf86 	b.w	801315c <std>
 8013250:	20000818 	.word	0x20000818
 8013254:	200006e0 	.word	0x200006e0
 8013258:	080131c9 	.word	0x080131c9

0801325c <__sfp_lock_acquire>:
 801325c:	4801      	ldr	r0, [pc, #4]	@ (8013264 <__sfp_lock_acquire+0x8>)
 801325e:	f000 b8ea 	b.w	8013436 <__retarget_lock_acquire_recursive>
 8013262:	bf00      	nop
 8013264:	2000081d 	.word	0x2000081d

08013268 <__sfp_lock_release>:
 8013268:	4801      	ldr	r0, [pc, #4]	@ (8013270 <__sfp_lock_release+0x8>)
 801326a:	f000 b8e5 	b.w	8013438 <__retarget_lock_release_recursive>
 801326e:	bf00      	nop
 8013270:	2000081d 	.word	0x2000081d

08013274 <__sinit>:
 8013274:	b510      	push	{r4, lr}
 8013276:	4604      	mov	r4, r0
 8013278:	f7ff fff0 	bl	801325c <__sfp_lock_acquire>
 801327c:	6a23      	ldr	r3, [r4, #32]
 801327e:	b11b      	cbz	r3, 8013288 <__sinit+0x14>
 8013280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013284:	f7ff bff0 	b.w	8013268 <__sfp_lock_release>
 8013288:	4b04      	ldr	r3, [pc, #16]	@ (801329c <__sinit+0x28>)
 801328a:	6223      	str	r3, [r4, #32]
 801328c:	4b04      	ldr	r3, [pc, #16]	@ (80132a0 <__sinit+0x2c>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d1f5      	bne.n	8013280 <__sinit+0xc>
 8013294:	f7ff ffc4 	bl	8013220 <global_stdio_init.part.0>
 8013298:	e7f2      	b.n	8013280 <__sinit+0xc>
 801329a:	bf00      	nop
 801329c:	080131e1 	.word	0x080131e1
 80132a0:	20000818 	.word	0x20000818

080132a4 <_fwalk_sglue>:
 80132a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132a8:	4607      	mov	r7, r0
 80132aa:	4688      	mov	r8, r1
 80132ac:	4614      	mov	r4, r2
 80132ae:	2600      	movs	r6, #0
 80132b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80132b4:	f1b9 0901 	subs.w	r9, r9, #1
 80132b8:	d505      	bpl.n	80132c6 <_fwalk_sglue+0x22>
 80132ba:	6824      	ldr	r4, [r4, #0]
 80132bc:	2c00      	cmp	r4, #0
 80132be:	d1f7      	bne.n	80132b0 <_fwalk_sglue+0xc>
 80132c0:	4630      	mov	r0, r6
 80132c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132c6:	89ab      	ldrh	r3, [r5, #12]
 80132c8:	2b01      	cmp	r3, #1
 80132ca:	d907      	bls.n	80132dc <_fwalk_sglue+0x38>
 80132cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80132d0:	3301      	adds	r3, #1
 80132d2:	d003      	beq.n	80132dc <_fwalk_sglue+0x38>
 80132d4:	4629      	mov	r1, r5
 80132d6:	4638      	mov	r0, r7
 80132d8:	47c0      	blx	r8
 80132da:	4306      	orrs	r6, r0
 80132dc:	3568      	adds	r5, #104	@ 0x68
 80132de:	e7e9      	b.n	80132b4 <_fwalk_sglue+0x10>

080132e0 <iprintf>:
 80132e0:	b40f      	push	{r0, r1, r2, r3}
 80132e2:	b507      	push	{r0, r1, r2, lr}
 80132e4:	4906      	ldr	r1, [pc, #24]	@ (8013300 <iprintf+0x20>)
 80132e6:	ab04      	add	r3, sp, #16
 80132e8:	6808      	ldr	r0, [r1, #0]
 80132ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80132ee:	6881      	ldr	r1, [r0, #8]
 80132f0:	9301      	str	r3, [sp, #4]
 80132f2:	f001 f883 	bl	80143fc <_vfiprintf_r>
 80132f6:	b003      	add	sp, #12
 80132f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80132fc:	b004      	add	sp, #16
 80132fe:	4770      	bx	lr
 8013300:	200000a4 	.word	0x200000a4

08013304 <putchar>:
 8013304:	4b02      	ldr	r3, [pc, #8]	@ (8013310 <putchar+0xc>)
 8013306:	4601      	mov	r1, r0
 8013308:	6818      	ldr	r0, [r3, #0]
 801330a:	6882      	ldr	r2, [r0, #8]
 801330c:	f001 bfd2 	b.w	80152b4 <_putc_r>
 8013310:	200000a4 	.word	0x200000a4

08013314 <_puts_r>:
 8013314:	6a03      	ldr	r3, [r0, #32]
 8013316:	b570      	push	{r4, r5, r6, lr}
 8013318:	6884      	ldr	r4, [r0, #8]
 801331a:	4605      	mov	r5, r0
 801331c:	460e      	mov	r6, r1
 801331e:	b90b      	cbnz	r3, 8013324 <_puts_r+0x10>
 8013320:	f7ff ffa8 	bl	8013274 <__sinit>
 8013324:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013326:	07db      	lsls	r3, r3, #31
 8013328:	d405      	bmi.n	8013336 <_puts_r+0x22>
 801332a:	89a3      	ldrh	r3, [r4, #12]
 801332c:	0598      	lsls	r0, r3, #22
 801332e:	d402      	bmi.n	8013336 <_puts_r+0x22>
 8013330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013332:	f000 f880 	bl	8013436 <__retarget_lock_acquire_recursive>
 8013336:	89a3      	ldrh	r3, [r4, #12]
 8013338:	0719      	lsls	r1, r3, #28
 801333a:	d502      	bpl.n	8013342 <_puts_r+0x2e>
 801333c:	6923      	ldr	r3, [r4, #16]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d135      	bne.n	80133ae <_puts_r+0x9a>
 8013342:	4621      	mov	r1, r4
 8013344:	4628      	mov	r0, r5
 8013346:	f001 fefd 	bl	8015144 <__swsetup_r>
 801334a:	b380      	cbz	r0, 80133ae <_puts_r+0x9a>
 801334c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013352:	07da      	lsls	r2, r3, #31
 8013354:	d405      	bmi.n	8013362 <_puts_r+0x4e>
 8013356:	89a3      	ldrh	r3, [r4, #12]
 8013358:	059b      	lsls	r3, r3, #22
 801335a:	d402      	bmi.n	8013362 <_puts_r+0x4e>
 801335c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801335e:	f000 f86b 	bl	8013438 <__retarget_lock_release_recursive>
 8013362:	4628      	mov	r0, r5
 8013364:	bd70      	pop	{r4, r5, r6, pc}
 8013366:	2b00      	cmp	r3, #0
 8013368:	da04      	bge.n	8013374 <_puts_r+0x60>
 801336a:	69a2      	ldr	r2, [r4, #24]
 801336c:	429a      	cmp	r2, r3
 801336e:	dc17      	bgt.n	80133a0 <_puts_r+0x8c>
 8013370:	290a      	cmp	r1, #10
 8013372:	d015      	beq.n	80133a0 <_puts_r+0x8c>
 8013374:	6823      	ldr	r3, [r4, #0]
 8013376:	1c5a      	adds	r2, r3, #1
 8013378:	6022      	str	r2, [r4, #0]
 801337a:	7019      	strb	r1, [r3, #0]
 801337c:	68a3      	ldr	r3, [r4, #8]
 801337e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013382:	3b01      	subs	r3, #1
 8013384:	60a3      	str	r3, [r4, #8]
 8013386:	2900      	cmp	r1, #0
 8013388:	d1ed      	bne.n	8013366 <_puts_r+0x52>
 801338a:	2b00      	cmp	r3, #0
 801338c:	da11      	bge.n	80133b2 <_puts_r+0x9e>
 801338e:	4622      	mov	r2, r4
 8013390:	210a      	movs	r1, #10
 8013392:	4628      	mov	r0, r5
 8013394:	f001 fe97 	bl	80150c6 <__swbuf_r>
 8013398:	3001      	adds	r0, #1
 801339a:	d0d7      	beq.n	801334c <_puts_r+0x38>
 801339c:	250a      	movs	r5, #10
 801339e:	e7d7      	b.n	8013350 <_puts_r+0x3c>
 80133a0:	4622      	mov	r2, r4
 80133a2:	4628      	mov	r0, r5
 80133a4:	f001 fe8f 	bl	80150c6 <__swbuf_r>
 80133a8:	3001      	adds	r0, #1
 80133aa:	d1e7      	bne.n	801337c <_puts_r+0x68>
 80133ac:	e7ce      	b.n	801334c <_puts_r+0x38>
 80133ae:	3e01      	subs	r6, #1
 80133b0:	e7e4      	b.n	801337c <_puts_r+0x68>
 80133b2:	6823      	ldr	r3, [r4, #0]
 80133b4:	1c5a      	adds	r2, r3, #1
 80133b6:	6022      	str	r2, [r4, #0]
 80133b8:	220a      	movs	r2, #10
 80133ba:	701a      	strb	r2, [r3, #0]
 80133bc:	e7ee      	b.n	801339c <_puts_r+0x88>
	...

080133c0 <puts>:
 80133c0:	4b02      	ldr	r3, [pc, #8]	@ (80133cc <puts+0xc>)
 80133c2:	4601      	mov	r1, r0
 80133c4:	6818      	ldr	r0, [r3, #0]
 80133c6:	f7ff bfa5 	b.w	8013314 <_puts_r>
 80133ca:	bf00      	nop
 80133cc:	200000a4 	.word	0x200000a4

080133d0 <memset>:
 80133d0:	4402      	add	r2, r0
 80133d2:	4603      	mov	r3, r0
 80133d4:	4293      	cmp	r3, r2
 80133d6:	d100      	bne.n	80133da <memset+0xa>
 80133d8:	4770      	bx	lr
 80133da:	f803 1b01 	strb.w	r1, [r3], #1
 80133de:	e7f9      	b.n	80133d4 <memset+0x4>

080133e0 <__errno>:
 80133e0:	4b01      	ldr	r3, [pc, #4]	@ (80133e8 <__errno+0x8>)
 80133e2:	6818      	ldr	r0, [r3, #0]
 80133e4:	4770      	bx	lr
 80133e6:	bf00      	nop
 80133e8:	200000a4 	.word	0x200000a4

080133ec <__libc_init_array>:
 80133ec:	b570      	push	{r4, r5, r6, lr}
 80133ee:	4d0d      	ldr	r5, [pc, #52]	@ (8013424 <__libc_init_array+0x38>)
 80133f0:	4c0d      	ldr	r4, [pc, #52]	@ (8013428 <__libc_init_array+0x3c>)
 80133f2:	1b64      	subs	r4, r4, r5
 80133f4:	10a4      	asrs	r4, r4, #2
 80133f6:	2600      	movs	r6, #0
 80133f8:	42a6      	cmp	r6, r4
 80133fa:	d109      	bne.n	8013410 <__libc_init_array+0x24>
 80133fc:	4d0b      	ldr	r5, [pc, #44]	@ (801342c <__libc_init_array+0x40>)
 80133fe:	4c0c      	ldr	r4, [pc, #48]	@ (8013430 <__libc_init_array+0x44>)
 8013400:	f002 f92c 	bl	801565c <_init>
 8013404:	1b64      	subs	r4, r4, r5
 8013406:	10a4      	asrs	r4, r4, #2
 8013408:	2600      	movs	r6, #0
 801340a:	42a6      	cmp	r6, r4
 801340c:	d105      	bne.n	801341a <__libc_init_array+0x2e>
 801340e:	bd70      	pop	{r4, r5, r6, pc}
 8013410:	f855 3b04 	ldr.w	r3, [r5], #4
 8013414:	4798      	blx	r3
 8013416:	3601      	adds	r6, #1
 8013418:	e7ee      	b.n	80133f8 <__libc_init_array+0xc>
 801341a:	f855 3b04 	ldr.w	r3, [r5], #4
 801341e:	4798      	blx	r3
 8013420:	3601      	adds	r6, #1
 8013422:	e7f2      	b.n	801340a <__libc_init_array+0x1e>
 8013424:	08018c1c 	.word	0x08018c1c
 8013428:	08018c1c 	.word	0x08018c1c
 801342c:	08018c1c 	.word	0x08018c1c
 8013430:	08018c24 	.word	0x08018c24

08013434 <__retarget_lock_init_recursive>:
 8013434:	4770      	bx	lr

08013436 <__retarget_lock_acquire_recursive>:
 8013436:	4770      	bx	lr

08013438 <__retarget_lock_release_recursive>:
 8013438:	4770      	bx	lr
	...

0801343c <_localeconv_r>:
 801343c:	4800      	ldr	r0, [pc, #0]	@ (8013440 <_localeconv_r+0x4>)
 801343e:	4770      	bx	lr
 8013440:	200001e4 	.word	0x200001e4

08013444 <quorem>:
 8013444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013448:	6903      	ldr	r3, [r0, #16]
 801344a:	690c      	ldr	r4, [r1, #16]
 801344c:	42a3      	cmp	r3, r4
 801344e:	4607      	mov	r7, r0
 8013450:	db7e      	blt.n	8013550 <quorem+0x10c>
 8013452:	3c01      	subs	r4, #1
 8013454:	f101 0814 	add.w	r8, r1, #20
 8013458:	00a3      	lsls	r3, r4, #2
 801345a:	f100 0514 	add.w	r5, r0, #20
 801345e:	9300      	str	r3, [sp, #0]
 8013460:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013464:	9301      	str	r3, [sp, #4]
 8013466:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801346a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801346e:	3301      	adds	r3, #1
 8013470:	429a      	cmp	r2, r3
 8013472:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013476:	fbb2 f6f3 	udiv	r6, r2, r3
 801347a:	d32e      	bcc.n	80134da <quorem+0x96>
 801347c:	f04f 0a00 	mov.w	sl, #0
 8013480:	46c4      	mov	ip, r8
 8013482:	46ae      	mov	lr, r5
 8013484:	46d3      	mov	fp, sl
 8013486:	f85c 3b04 	ldr.w	r3, [ip], #4
 801348a:	b298      	uxth	r0, r3
 801348c:	fb06 a000 	mla	r0, r6, r0, sl
 8013490:	0c02      	lsrs	r2, r0, #16
 8013492:	0c1b      	lsrs	r3, r3, #16
 8013494:	fb06 2303 	mla	r3, r6, r3, r2
 8013498:	f8de 2000 	ldr.w	r2, [lr]
 801349c:	b280      	uxth	r0, r0
 801349e:	b292      	uxth	r2, r2
 80134a0:	1a12      	subs	r2, r2, r0
 80134a2:	445a      	add	r2, fp
 80134a4:	f8de 0000 	ldr.w	r0, [lr]
 80134a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80134b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80134b6:	b292      	uxth	r2, r2
 80134b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80134bc:	45e1      	cmp	r9, ip
 80134be:	f84e 2b04 	str.w	r2, [lr], #4
 80134c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80134c6:	d2de      	bcs.n	8013486 <quorem+0x42>
 80134c8:	9b00      	ldr	r3, [sp, #0]
 80134ca:	58eb      	ldr	r3, [r5, r3]
 80134cc:	b92b      	cbnz	r3, 80134da <quorem+0x96>
 80134ce:	9b01      	ldr	r3, [sp, #4]
 80134d0:	3b04      	subs	r3, #4
 80134d2:	429d      	cmp	r5, r3
 80134d4:	461a      	mov	r2, r3
 80134d6:	d32f      	bcc.n	8013538 <quorem+0xf4>
 80134d8:	613c      	str	r4, [r7, #16]
 80134da:	4638      	mov	r0, r7
 80134dc:	f001 fc7a 	bl	8014dd4 <__mcmp>
 80134e0:	2800      	cmp	r0, #0
 80134e2:	db25      	blt.n	8013530 <quorem+0xec>
 80134e4:	4629      	mov	r1, r5
 80134e6:	2000      	movs	r0, #0
 80134e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80134ec:	f8d1 c000 	ldr.w	ip, [r1]
 80134f0:	fa1f fe82 	uxth.w	lr, r2
 80134f4:	fa1f f38c 	uxth.w	r3, ip
 80134f8:	eba3 030e 	sub.w	r3, r3, lr
 80134fc:	4403      	add	r3, r0
 80134fe:	0c12      	lsrs	r2, r2, #16
 8013500:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013504:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013508:	b29b      	uxth	r3, r3
 801350a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801350e:	45c1      	cmp	r9, r8
 8013510:	f841 3b04 	str.w	r3, [r1], #4
 8013514:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013518:	d2e6      	bcs.n	80134e8 <quorem+0xa4>
 801351a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801351e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013522:	b922      	cbnz	r2, 801352e <quorem+0xea>
 8013524:	3b04      	subs	r3, #4
 8013526:	429d      	cmp	r5, r3
 8013528:	461a      	mov	r2, r3
 801352a:	d30b      	bcc.n	8013544 <quorem+0x100>
 801352c:	613c      	str	r4, [r7, #16]
 801352e:	3601      	adds	r6, #1
 8013530:	4630      	mov	r0, r6
 8013532:	b003      	add	sp, #12
 8013534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013538:	6812      	ldr	r2, [r2, #0]
 801353a:	3b04      	subs	r3, #4
 801353c:	2a00      	cmp	r2, #0
 801353e:	d1cb      	bne.n	80134d8 <quorem+0x94>
 8013540:	3c01      	subs	r4, #1
 8013542:	e7c6      	b.n	80134d2 <quorem+0x8e>
 8013544:	6812      	ldr	r2, [r2, #0]
 8013546:	3b04      	subs	r3, #4
 8013548:	2a00      	cmp	r2, #0
 801354a:	d1ef      	bne.n	801352c <quorem+0xe8>
 801354c:	3c01      	subs	r4, #1
 801354e:	e7ea      	b.n	8013526 <quorem+0xe2>
 8013550:	2000      	movs	r0, #0
 8013552:	e7ee      	b.n	8013532 <quorem+0xee>
 8013554:	0000      	movs	r0, r0
	...

08013558 <_dtoa_r>:
 8013558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801355c:	69c7      	ldr	r7, [r0, #28]
 801355e:	b097      	sub	sp, #92	@ 0x5c
 8013560:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013564:	ec55 4b10 	vmov	r4, r5, d0
 8013568:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801356a:	9107      	str	r1, [sp, #28]
 801356c:	4681      	mov	r9, r0
 801356e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013570:	9311      	str	r3, [sp, #68]	@ 0x44
 8013572:	b97f      	cbnz	r7, 8013594 <_dtoa_r+0x3c>
 8013574:	2010      	movs	r0, #16
 8013576:	f001 f859 	bl	801462c <malloc>
 801357a:	4602      	mov	r2, r0
 801357c:	f8c9 001c 	str.w	r0, [r9, #28]
 8013580:	b920      	cbnz	r0, 801358c <_dtoa_r+0x34>
 8013582:	4ba9      	ldr	r3, [pc, #676]	@ (8013828 <_dtoa_r+0x2d0>)
 8013584:	21ef      	movs	r1, #239	@ 0xef
 8013586:	48a9      	ldr	r0, [pc, #676]	@ (801382c <_dtoa_r+0x2d4>)
 8013588:	f001 ff68 	bl	801545c <__assert_func>
 801358c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013590:	6007      	str	r7, [r0, #0]
 8013592:	60c7      	str	r7, [r0, #12]
 8013594:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013598:	6819      	ldr	r1, [r3, #0]
 801359a:	b159      	cbz	r1, 80135b4 <_dtoa_r+0x5c>
 801359c:	685a      	ldr	r2, [r3, #4]
 801359e:	604a      	str	r2, [r1, #4]
 80135a0:	2301      	movs	r3, #1
 80135a2:	4093      	lsls	r3, r2
 80135a4:	608b      	str	r3, [r1, #8]
 80135a6:	4648      	mov	r0, r9
 80135a8:	f001 f9e2 	bl	8014970 <_Bfree>
 80135ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80135b0:	2200      	movs	r2, #0
 80135b2:	601a      	str	r2, [r3, #0]
 80135b4:	1e2b      	subs	r3, r5, #0
 80135b6:	bfb9      	ittee	lt
 80135b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80135bc:	9305      	strlt	r3, [sp, #20]
 80135be:	2300      	movge	r3, #0
 80135c0:	6033      	strge	r3, [r6, #0]
 80135c2:	9f05      	ldr	r7, [sp, #20]
 80135c4:	4b9a      	ldr	r3, [pc, #616]	@ (8013830 <_dtoa_r+0x2d8>)
 80135c6:	bfbc      	itt	lt
 80135c8:	2201      	movlt	r2, #1
 80135ca:	6032      	strlt	r2, [r6, #0]
 80135cc:	43bb      	bics	r3, r7
 80135ce:	d112      	bne.n	80135f6 <_dtoa_r+0x9e>
 80135d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80135d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80135d6:	6013      	str	r3, [r2, #0]
 80135d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80135dc:	4323      	orrs	r3, r4
 80135de:	f000 855a 	beq.w	8014096 <_dtoa_r+0xb3e>
 80135e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80135e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8013844 <_dtoa_r+0x2ec>
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	f000 855c 	beq.w	80140a6 <_dtoa_r+0xb4e>
 80135ee:	f10a 0303 	add.w	r3, sl, #3
 80135f2:	f000 bd56 	b.w	80140a2 <_dtoa_r+0xb4a>
 80135f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80135fa:	2200      	movs	r2, #0
 80135fc:	ec51 0b17 	vmov	r0, r1, d7
 8013600:	2300      	movs	r3, #0
 8013602:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8013606:	f7ed fa37 	bl	8000a78 <__aeabi_dcmpeq>
 801360a:	4680      	mov	r8, r0
 801360c:	b158      	cbz	r0, 8013626 <_dtoa_r+0xce>
 801360e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013610:	2301      	movs	r3, #1
 8013612:	6013      	str	r3, [r2, #0]
 8013614:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013616:	b113      	cbz	r3, 801361e <_dtoa_r+0xc6>
 8013618:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801361a:	4b86      	ldr	r3, [pc, #536]	@ (8013834 <_dtoa_r+0x2dc>)
 801361c:	6013      	str	r3, [r2, #0]
 801361e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013848 <_dtoa_r+0x2f0>
 8013622:	f000 bd40 	b.w	80140a6 <_dtoa_r+0xb4e>
 8013626:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801362a:	aa14      	add	r2, sp, #80	@ 0x50
 801362c:	a915      	add	r1, sp, #84	@ 0x54
 801362e:	4648      	mov	r0, r9
 8013630:	f001 fc80 	bl	8014f34 <__d2b>
 8013634:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013638:	9002      	str	r0, [sp, #8]
 801363a:	2e00      	cmp	r6, #0
 801363c:	d078      	beq.n	8013730 <_dtoa_r+0x1d8>
 801363e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013640:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8013644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013648:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801364c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013650:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013654:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013658:	4619      	mov	r1, r3
 801365a:	2200      	movs	r2, #0
 801365c:	4b76      	ldr	r3, [pc, #472]	@ (8013838 <_dtoa_r+0x2e0>)
 801365e:	f7ec fdeb 	bl	8000238 <__aeabi_dsub>
 8013662:	a36b      	add	r3, pc, #428	@ (adr r3, 8013810 <_dtoa_r+0x2b8>)
 8013664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013668:	f7ec ff9e 	bl	80005a8 <__aeabi_dmul>
 801366c:	a36a      	add	r3, pc, #424	@ (adr r3, 8013818 <_dtoa_r+0x2c0>)
 801366e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013672:	f7ec fde3 	bl	800023c <__adddf3>
 8013676:	4604      	mov	r4, r0
 8013678:	4630      	mov	r0, r6
 801367a:	460d      	mov	r5, r1
 801367c:	f7ec ff2a 	bl	80004d4 <__aeabi_i2d>
 8013680:	a367      	add	r3, pc, #412	@ (adr r3, 8013820 <_dtoa_r+0x2c8>)
 8013682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013686:	f7ec ff8f 	bl	80005a8 <__aeabi_dmul>
 801368a:	4602      	mov	r2, r0
 801368c:	460b      	mov	r3, r1
 801368e:	4620      	mov	r0, r4
 8013690:	4629      	mov	r1, r5
 8013692:	f7ec fdd3 	bl	800023c <__adddf3>
 8013696:	4604      	mov	r4, r0
 8013698:	460d      	mov	r5, r1
 801369a:	f7ed fa35 	bl	8000b08 <__aeabi_d2iz>
 801369e:	2200      	movs	r2, #0
 80136a0:	4607      	mov	r7, r0
 80136a2:	2300      	movs	r3, #0
 80136a4:	4620      	mov	r0, r4
 80136a6:	4629      	mov	r1, r5
 80136a8:	f7ed f9f0 	bl	8000a8c <__aeabi_dcmplt>
 80136ac:	b140      	cbz	r0, 80136c0 <_dtoa_r+0x168>
 80136ae:	4638      	mov	r0, r7
 80136b0:	f7ec ff10 	bl	80004d4 <__aeabi_i2d>
 80136b4:	4622      	mov	r2, r4
 80136b6:	462b      	mov	r3, r5
 80136b8:	f7ed f9de 	bl	8000a78 <__aeabi_dcmpeq>
 80136bc:	b900      	cbnz	r0, 80136c0 <_dtoa_r+0x168>
 80136be:	3f01      	subs	r7, #1
 80136c0:	2f16      	cmp	r7, #22
 80136c2:	d852      	bhi.n	801376a <_dtoa_r+0x212>
 80136c4:	4b5d      	ldr	r3, [pc, #372]	@ (801383c <_dtoa_r+0x2e4>)
 80136c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80136ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80136d2:	f7ed f9db 	bl	8000a8c <__aeabi_dcmplt>
 80136d6:	2800      	cmp	r0, #0
 80136d8:	d049      	beq.n	801376e <_dtoa_r+0x216>
 80136da:	3f01      	subs	r7, #1
 80136dc:	2300      	movs	r3, #0
 80136de:	9310      	str	r3, [sp, #64]	@ 0x40
 80136e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80136e2:	1b9b      	subs	r3, r3, r6
 80136e4:	1e5a      	subs	r2, r3, #1
 80136e6:	bf45      	ittet	mi
 80136e8:	f1c3 0301 	rsbmi	r3, r3, #1
 80136ec:	9300      	strmi	r3, [sp, #0]
 80136ee:	2300      	movpl	r3, #0
 80136f0:	2300      	movmi	r3, #0
 80136f2:	9206      	str	r2, [sp, #24]
 80136f4:	bf54      	ite	pl
 80136f6:	9300      	strpl	r3, [sp, #0]
 80136f8:	9306      	strmi	r3, [sp, #24]
 80136fa:	2f00      	cmp	r7, #0
 80136fc:	db39      	blt.n	8013772 <_dtoa_r+0x21a>
 80136fe:	9b06      	ldr	r3, [sp, #24]
 8013700:	970d      	str	r7, [sp, #52]	@ 0x34
 8013702:	443b      	add	r3, r7
 8013704:	9306      	str	r3, [sp, #24]
 8013706:	2300      	movs	r3, #0
 8013708:	9308      	str	r3, [sp, #32]
 801370a:	9b07      	ldr	r3, [sp, #28]
 801370c:	2b09      	cmp	r3, #9
 801370e:	d863      	bhi.n	80137d8 <_dtoa_r+0x280>
 8013710:	2b05      	cmp	r3, #5
 8013712:	bfc4      	itt	gt
 8013714:	3b04      	subgt	r3, #4
 8013716:	9307      	strgt	r3, [sp, #28]
 8013718:	9b07      	ldr	r3, [sp, #28]
 801371a:	f1a3 0302 	sub.w	r3, r3, #2
 801371e:	bfcc      	ite	gt
 8013720:	2400      	movgt	r4, #0
 8013722:	2401      	movle	r4, #1
 8013724:	2b03      	cmp	r3, #3
 8013726:	d863      	bhi.n	80137f0 <_dtoa_r+0x298>
 8013728:	e8df f003 	tbb	[pc, r3]
 801372c:	2b375452 	.word	0x2b375452
 8013730:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8013734:	441e      	add	r6, r3
 8013736:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801373a:	2b20      	cmp	r3, #32
 801373c:	bfc1      	itttt	gt
 801373e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013742:	409f      	lslgt	r7, r3
 8013744:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013748:	fa24 f303 	lsrgt.w	r3, r4, r3
 801374c:	bfd6      	itet	le
 801374e:	f1c3 0320 	rsble	r3, r3, #32
 8013752:	ea47 0003 	orrgt.w	r0, r7, r3
 8013756:	fa04 f003 	lslle.w	r0, r4, r3
 801375a:	f7ec feab 	bl	80004b4 <__aeabi_ui2d>
 801375e:	2201      	movs	r2, #1
 8013760:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013764:	3e01      	subs	r6, #1
 8013766:	9212      	str	r2, [sp, #72]	@ 0x48
 8013768:	e776      	b.n	8013658 <_dtoa_r+0x100>
 801376a:	2301      	movs	r3, #1
 801376c:	e7b7      	b.n	80136de <_dtoa_r+0x186>
 801376e:	9010      	str	r0, [sp, #64]	@ 0x40
 8013770:	e7b6      	b.n	80136e0 <_dtoa_r+0x188>
 8013772:	9b00      	ldr	r3, [sp, #0]
 8013774:	1bdb      	subs	r3, r3, r7
 8013776:	9300      	str	r3, [sp, #0]
 8013778:	427b      	negs	r3, r7
 801377a:	9308      	str	r3, [sp, #32]
 801377c:	2300      	movs	r3, #0
 801377e:	930d      	str	r3, [sp, #52]	@ 0x34
 8013780:	e7c3      	b.n	801370a <_dtoa_r+0x1b2>
 8013782:	2301      	movs	r3, #1
 8013784:	9309      	str	r3, [sp, #36]	@ 0x24
 8013786:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013788:	eb07 0b03 	add.w	fp, r7, r3
 801378c:	f10b 0301 	add.w	r3, fp, #1
 8013790:	2b01      	cmp	r3, #1
 8013792:	9303      	str	r3, [sp, #12]
 8013794:	bfb8      	it	lt
 8013796:	2301      	movlt	r3, #1
 8013798:	e006      	b.n	80137a8 <_dtoa_r+0x250>
 801379a:	2301      	movs	r3, #1
 801379c:	9309      	str	r3, [sp, #36]	@ 0x24
 801379e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	dd28      	ble.n	80137f6 <_dtoa_r+0x29e>
 80137a4:	469b      	mov	fp, r3
 80137a6:	9303      	str	r3, [sp, #12]
 80137a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80137ac:	2100      	movs	r1, #0
 80137ae:	2204      	movs	r2, #4
 80137b0:	f102 0514 	add.w	r5, r2, #20
 80137b4:	429d      	cmp	r5, r3
 80137b6:	d926      	bls.n	8013806 <_dtoa_r+0x2ae>
 80137b8:	6041      	str	r1, [r0, #4]
 80137ba:	4648      	mov	r0, r9
 80137bc:	f001 f898 	bl	80148f0 <_Balloc>
 80137c0:	4682      	mov	sl, r0
 80137c2:	2800      	cmp	r0, #0
 80137c4:	d142      	bne.n	801384c <_dtoa_r+0x2f4>
 80137c6:	4b1e      	ldr	r3, [pc, #120]	@ (8013840 <_dtoa_r+0x2e8>)
 80137c8:	4602      	mov	r2, r0
 80137ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80137ce:	e6da      	b.n	8013586 <_dtoa_r+0x2e>
 80137d0:	2300      	movs	r3, #0
 80137d2:	e7e3      	b.n	801379c <_dtoa_r+0x244>
 80137d4:	2300      	movs	r3, #0
 80137d6:	e7d5      	b.n	8013784 <_dtoa_r+0x22c>
 80137d8:	2401      	movs	r4, #1
 80137da:	2300      	movs	r3, #0
 80137dc:	9307      	str	r3, [sp, #28]
 80137de:	9409      	str	r4, [sp, #36]	@ 0x24
 80137e0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80137e4:	2200      	movs	r2, #0
 80137e6:	f8cd b00c 	str.w	fp, [sp, #12]
 80137ea:	2312      	movs	r3, #18
 80137ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80137ee:	e7db      	b.n	80137a8 <_dtoa_r+0x250>
 80137f0:	2301      	movs	r3, #1
 80137f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80137f4:	e7f4      	b.n	80137e0 <_dtoa_r+0x288>
 80137f6:	f04f 0b01 	mov.w	fp, #1
 80137fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80137fe:	465b      	mov	r3, fp
 8013800:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8013804:	e7d0      	b.n	80137a8 <_dtoa_r+0x250>
 8013806:	3101      	adds	r1, #1
 8013808:	0052      	lsls	r2, r2, #1
 801380a:	e7d1      	b.n	80137b0 <_dtoa_r+0x258>
 801380c:	f3af 8000 	nop.w
 8013810:	636f4361 	.word	0x636f4361
 8013814:	3fd287a7 	.word	0x3fd287a7
 8013818:	8b60c8b3 	.word	0x8b60c8b3
 801381c:	3fc68a28 	.word	0x3fc68a28
 8013820:	509f79fb 	.word	0x509f79fb
 8013824:	3fd34413 	.word	0x3fd34413
 8013828:	080188dd 	.word	0x080188dd
 801382c:	080188f4 	.word	0x080188f4
 8013830:	7ff00000 	.word	0x7ff00000
 8013834:	080188ad 	.word	0x080188ad
 8013838:	3ff80000 	.word	0x3ff80000
 801383c:	08018a48 	.word	0x08018a48
 8013840:	0801894c 	.word	0x0801894c
 8013844:	080188d9 	.word	0x080188d9
 8013848:	080188ac 	.word	0x080188ac
 801384c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013850:	6018      	str	r0, [r3, #0]
 8013852:	9b03      	ldr	r3, [sp, #12]
 8013854:	2b0e      	cmp	r3, #14
 8013856:	f200 80a1 	bhi.w	801399c <_dtoa_r+0x444>
 801385a:	2c00      	cmp	r4, #0
 801385c:	f000 809e 	beq.w	801399c <_dtoa_r+0x444>
 8013860:	2f00      	cmp	r7, #0
 8013862:	dd33      	ble.n	80138cc <_dtoa_r+0x374>
 8013864:	4b9c      	ldr	r3, [pc, #624]	@ (8013ad8 <_dtoa_r+0x580>)
 8013866:	f007 020f 	and.w	r2, r7, #15
 801386a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801386e:	ed93 7b00 	vldr	d7, [r3]
 8013872:	05f8      	lsls	r0, r7, #23
 8013874:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8013878:	ea4f 1427 	mov.w	r4, r7, asr #4
 801387c:	d516      	bpl.n	80138ac <_dtoa_r+0x354>
 801387e:	4b97      	ldr	r3, [pc, #604]	@ (8013adc <_dtoa_r+0x584>)
 8013880:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013888:	f7ec ffb8 	bl	80007fc <__aeabi_ddiv>
 801388c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013890:	f004 040f 	and.w	r4, r4, #15
 8013894:	2603      	movs	r6, #3
 8013896:	4d91      	ldr	r5, [pc, #580]	@ (8013adc <_dtoa_r+0x584>)
 8013898:	b954      	cbnz	r4, 80138b0 <_dtoa_r+0x358>
 801389a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801389e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80138a2:	f7ec ffab 	bl	80007fc <__aeabi_ddiv>
 80138a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138aa:	e028      	b.n	80138fe <_dtoa_r+0x3a6>
 80138ac:	2602      	movs	r6, #2
 80138ae:	e7f2      	b.n	8013896 <_dtoa_r+0x33e>
 80138b0:	07e1      	lsls	r1, r4, #31
 80138b2:	d508      	bpl.n	80138c6 <_dtoa_r+0x36e>
 80138b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80138b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80138bc:	f7ec fe74 	bl	80005a8 <__aeabi_dmul>
 80138c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80138c4:	3601      	adds	r6, #1
 80138c6:	1064      	asrs	r4, r4, #1
 80138c8:	3508      	adds	r5, #8
 80138ca:	e7e5      	b.n	8013898 <_dtoa_r+0x340>
 80138cc:	f000 80af 	beq.w	8013a2e <_dtoa_r+0x4d6>
 80138d0:	427c      	negs	r4, r7
 80138d2:	4b81      	ldr	r3, [pc, #516]	@ (8013ad8 <_dtoa_r+0x580>)
 80138d4:	4d81      	ldr	r5, [pc, #516]	@ (8013adc <_dtoa_r+0x584>)
 80138d6:	f004 020f 	and.w	r2, r4, #15
 80138da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80138de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80138e6:	f7ec fe5f 	bl	80005a8 <__aeabi_dmul>
 80138ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138ee:	1124      	asrs	r4, r4, #4
 80138f0:	2300      	movs	r3, #0
 80138f2:	2602      	movs	r6, #2
 80138f4:	2c00      	cmp	r4, #0
 80138f6:	f040 808f 	bne.w	8013a18 <_dtoa_r+0x4c0>
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d1d3      	bne.n	80138a6 <_dtoa_r+0x34e>
 80138fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013900:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013904:	2b00      	cmp	r3, #0
 8013906:	f000 8094 	beq.w	8013a32 <_dtoa_r+0x4da>
 801390a:	4b75      	ldr	r3, [pc, #468]	@ (8013ae0 <_dtoa_r+0x588>)
 801390c:	2200      	movs	r2, #0
 801390e:	4620      	mov	r0, r4
 8013910:	4629      	mov	r1, r5
 8013912:	f7ed f8bb 	bl	8000a8c <__aeabi_dcmplt>
 8013916:	2800      	cmp	r0, #0
 8013918:	f000 808b 	beq.w	8013a32 <_dtoa_r+0x4da>
 801391c:	9b03      	ldr	r3, [sp, #12]
 801391e:	2b00      	cmp	r3, #0
 8013920:	f000 8087 	beq.w	8013a32 <_dtoa_r+0x4da>
 8013924:	f1bb 0f00 	cmp.w	fp, #0
 8013928:	dd34      	ble.n	8013994 <_dtoa_r+0x43c>
 801392a:	4620      	mov	r0, r4
 801392c:	4b6d      	ldr	r3, [pc, #436]	@ (8013ae4 <_dtoa_r+0x58c>)
 801392e:	2200      	movs	r2, #0
 8013930:	4629      	mov	r1, r5
 8013932:	f7ec fe39 	bl	80005a8 <__aeabi_dmul>
 8013936:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801393a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 801393e:	3601      	adds	r6, #1
 8013940:	465c      	mov	r4, fp
 8013942:	4630      	mov	r0, r6
 8013944:	f7ec fdc6 	bl	80004d4 <__aeabi_i2d>
 8013948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801394c:	f7ec fe2c 	bl	80005a8 <__aeabi_dmul>
 8013950:	4b65      	ldr	r3, [pc, #404]	@ (8013ae8 <_dtoa_r+0x590>)
 8013952:	2200      	movs	r2, #0
 8013954:	f7ec fc72 	bl	800023c <__adddf3>
 8013958:	4605      	mov	r5, r0
 801395a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801395e:	2c00      	cmp	r4, #0
 8013960:	d16a      	bne.n	8013a38 <_dtoa_r+0x4e0>
 8013962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013966:	4b61      	ldr	r3, [pc, #388]	@ (8013aec <_dtoa_r+0x594>)
 8013968:	2200      	movs	r2, #0
 801396a:	f7ec fc65 	bl	8000238 <__aeabi_dsub>
 801396e:	4602      	mov	r2, r0
 8013970:	460b      	mov	r3, r1
 8013972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013976:	462a      	mov	r2, r5
 8013978:	4633      	mov	r3, r6
 801397a:	f7ed f8a5 	bl	8000ac8 <__aeabi_dcmpgt>
 801397e:	2800      	cmp	r0, #0
 8013980:	f040 8298 	bne.w	8013eb4 <_dtoa_r+0x95c>
 8013984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013988:	462a      	mov	r2, r5
 801398a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801398e:	f7ed f87d 	bl	8000a8c <__aeabi_dcmplt>
 8013992:	bb38      	cbnz	r0, 80139e4 <_dtoa_r+0x48c>
 8013994:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8013998:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801399c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801399e:	2b00      	cmp	r3, #0
 80139a0:	f2c0 8157 	blt.w	8013c52 <_dtoa_r+0x6fa>
 80139a4:	2f0e      	cmp	r7, #14
 80139a6:	f300 8154 	bgt.w	8013c52 <_dtoa_r+0x6fa>
 80139aa:	4b4b      	ldr	r3, [pc, #300]	@ (8013ad8 <_dtoa_r+0x580>)
 80139ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80139b0:	ed93 7b00 	vldr	d7, [r3]
 80139b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	ed8d 7b00 	vstr	d7, [sp]
 80139bc:	f280 80e5 	bge.w	8013b8a <_dtoa_r+0x632>
 80139c0:	9b03      	ldr	r3, [sp, #12]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	f300 80e1 	bgt.w	8013b8a <_dtoa_r+0x632>
 80139c8:	d10c      	bne.n	80139e4 <_dtoa_r+0x48c>
 80139ca:	4b48      	ldr	r3, [pc, #288]	@ (8013aec <_dtoa_r+0x594>)
 80139cc:	2200      	movs	r2, #0
 80139ce:	ec51 0b17 	vmov	r0, r1, d7
 80139d2:	f7ec fde9 	bl	80005a8 <__aeabi_dmul>
 80139d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139da:	f7ed f86b 	bl	8000ab4 <__aeabi_dcmpge>
 80139de:	2800      	cmp	r0, #0
 80139e0:	f000 8266 	beq.w	8013eb0 <_dtoa_r+0x958>
 80139e4:	2400      	movs	r4, #0
 80139e6:	4625      	mov	r5, r4
 80139e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139ea:	4656      	mov	r6, sl
 80139ec:	ea6f 0803 	mvn.w	r8, r3
 80139f0:	2700      	movs	r7, #0
 80139f2:	4621      	mov	r1, r4
 80139f4:	4648      	mov	r0, r9
 80139f6:	f000 ffbb 	bl	8014970 <_Bfree>
 80139fa:	2d00      	cmp	r5, #0
 80139fc:	f000 80bd 	beq.w	8013b7a <_dtoa_r+0x622>
 8013a00:	b12f      	cbz	r7, 8013a0e <_dtoa_r+0x4b6>
 8013a02:	42af      	cmp	r7, r5
 8013a04:	d003      	beq.n	8013a0e <_dtoa_r+0x4b6>
 8013a06:	4639      	mov	r1, r7
 8013a08:	4648      	mov	r0, r9
 8013a0a:	f000 ffb1 	bl	8014970 <_Bfree>
 8013a0e:	4629      	mov	r1, r5
 8013a10:	4648      	mov	r0, r9
 8013a12:	f000 ffad 	bl	8014970 <_Bfree>
 8013a16:	e0b0      	b.n	8013b7a <_dtoa_r+0x622>
 8013a18:	07e2      	lsls	r2, r4, #31
 8013a1a:	d505      	bpl.n	8013a28 <_dtoa_r+0x4d0>
 8013a1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013a20:	f7ec fdc2 	bl	80005a8 <__aeabi_dmul>
 8013a24:	3601      	adds	r6, #1
 8013a26:	2301      	movs	r3, #1
 8013a28:	1064      	asrs	r4, r4, #1
 8013a2a:	3508      	adds	r5, #8
 8013a2c:	e762      	b.n	80138f4 <_dtoa_r+0x39c>
 8013a2e:	2602      	movs	r6, #2
 8013a30:	e765      	b.n	80138fe <_dtoa_r+0x3a6>
 8013a32:	9c03      	ldr	r4, [sp, #12]
 8013a34:	46b8      	mov	r8, r7
 8013a36:	e784      	b.n	8013942 <_dtoa_r+0x3ea>
 8013a38:	4b27      	ldr	r3, [pc, #156]	@ (8013ad8 <_dtoa_r+0x580>)
 8013a3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013a3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013a40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013a44:	4454      	add	r4, sl
 8013a46:	2900      	cmp	r1, #0
 8013a48:	d054      	beq.n	8013af4 <_dtoa_r+0x59c>
 8013a4a:	4929      	ldr	r1, [pc, #164]	@ (8013af0 <_dtoa_r+0x598>)
 8013a4c:	2000      	movs	r0, #0
 8013a4e:	f7ec fed5 	bl	80007fc <__aeabi_ddiv>
 8013a52:	4633      	mov	r3, r6
 8013a54:	462a      	mov	r2, r5
 8013a56:	f7ec fbef 	bl	8000238 <__aeabi_dsub>
 8013a5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013a5e:	4656      	mov	r6, sl
 8013a60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a64:	f7ed f850 	bl	8000b08 <__aeabi_d2iz>
 8013a68:	4605      	mov	r5, r0
 8013a6a:	f7ec fd33 	bl	80004d4 <__aeabi_i2d>
 8013a6e:	4602      	mov	r2, r0
 8013a70:	460b      	mov	r3, r1
 8013a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a76:	f7ec fbdf 	bl	8000238 <__aeabi_dsub>
 8013a7a:	3530      	adds	r5, #48	@ 0x30
 8013a7c:	4602      	mov	r2, r0
 8013a7e:	460b      	mov	r3, r1
 8013a80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013a84:	f806 5b01 	strb.w	r5, [r6], #1
 8013a88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013a8c:	f7ec fffe 	bl	8000a8c <__aeabi_dcmplt>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	d172      	bne.n	8013b7a <_dtoa_r+0x622>
 8013a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a98:	4911      	ldr	r1, [pc, #68]	@ (8013ae0 <_dtoa_r+0x588>)
 8013a9a:	2000      	movs	r0, #0
 8013a9c:	f7ec fbcc 	bl	8000238 <__aeabi_dsub>
 8013aa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013aa4:	f7ec fff2 	bl	8000a8c <__aeabi_dcmplt>
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	f040 80b4 	bne.w	8013c16 <_dtoa_r+0x6be>
 8013aae:	42a6      	cmp	r6, r4
 8013ab0:	f43f af70 	beq.w	8013994 <_dtoa_r+0x43c>
 8013ab4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8013ae4 <_dtoa_r+0x58c>)
 8013aba:	2200      	movs	r2, #0
 8013abc:	f7ec fd74 	bl	80005a8 <__aeabi_dmul>
 8013ac0:	4b08      	ldr	r3, [pc, #32]	@ (8013ae4 <_dtoa_r+0x58c>)
 8013ac2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013acc:	f7ec fd6c 	bl	80005a8 <__aeabi_dmul>
 8013ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ad4:	e7c4      	b.n	8013a60 <_dtoa_r+0x508>
 8013ad6:	bf00      	nop
 8013ad8:	08018a48 	.word	0x08018a48
 8013adc:	08018a20 	.word	0x08018a20
 8013ae0:	3ff00000 	.word	0x3ff00000
 8013ae4:	40240000 	.word	0x40240000
 8013ae8:	401c0000 	.word	0x401c0000
 8013aec:	40140000 	.word	0x40140000
 8013af0:	3fe00000 	.word	0x3fe00000
 8013af4:	4631      	mov	r1, r6
 8013af6:	4628      	mov	r0, r5
 8013af8:	f7ec fd56 	bl	80005a8 <__aeabi_dmul>
 8013afc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013b00:	9413      	str	r4, [sp, #76]	@ 0x4c
 8013b02:	4656      	mov	r6, sl
 8013b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b08:	f7ec fffe 	bl	8000b08 <__aeabi_d2iz>
 8013b0c:	4605      	mov	r5, r0
 8013b0e:	f7ec fce1 	bl	80004d4 <__aeabi_i2d>
 8013b12:	4602      	mov	r2, r0
 8013b14:	460b      	mov	r3, r1
 8013b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b1a:	f7ec fb8d 	bl	8000238 <__aeabi_dsub>
 8013b1e:	3530      	adds	r5, #48	@ 0x30
 8013b20:	f806 5b01 	strb.w	r5, [r6], #1
 8013b24:	4602      	mov	r2, r0
 8013b26:	460b      	mov	r3, r1
 8013b28:	42a6      	cmp	r6, r4
 8013b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b2e:	f04f 0200 	mov.w	r2, #0
 8013b32:	d124      	bne.n	8013b7e <_dtoa_r+0x626>
 8013b34:	4baf      	ldr	r3, [pc, #700]	@ (8013df4 <_dtoa_r+0x89c>)
 8013b36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013b3a:	f7ec fb7f 	bl	800023c <__adddf3>
 8013b3e:	4602      	mov	r2, r0
 8013b40:	460b      	mov	r3, r1
 8013b42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b46:	f7ec ffbf 	bl	8000ac8 <__aeabi_dcmpgt>
 8013b4a:	2800      	cmp	r0, #0
 8013b4c:	d163      	bne.n	8013c16 <_dtoa_r+0x6be>
 8013b4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013b52:	49a8      	ldr	r1, [pc, #672]	@ (8013df4 <_dtoa_r+0x89c>)
 8013b54:	2000      	movs	r0, #0
 8013b56:	f7ec fb6f 	bl	8000238 <__aeabi_dsub>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	460b      	mov	r3, r1
 8013b5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b62:	f7ec ff93 	bl	8000a8c <__aeabi_dcmplt>
 8013b66:	2800      	cmp	r0, #0
 8013b68:	f43f af14 	beq.w	8013994 <_dtoa_r+0x43c>
 8013b6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8013b6e:	1e73      	subs	r3, r6, #1
 8013b70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013b72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013b76:	2b30      	cmp	r3, #48	@ 0x30
 8013b78:	d0f8      	beq.n	8013b6c <_dtoa_r+0x614>
 8013b7a:	4647      	mov	r7, r8
 8013b7c:	e03b      	b.n	8013bf6 <_dtoa_r+0x69e>
 8013b7e:	4b9e      	ldr	r3, [pc, #632]	@ (8013df8 <_dtoa_r+0x8a0>)
 8013b80:	f7ec fd12 	bl	80005a8 <__aeabi_dmul>
 8013b84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b88:	e7bc      	b.n	8013b04 <_dtoa_r+0x5ac>
 8013b8a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013b8e:	4656      	mov	r6, sl
 8013b90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b94:	4620      	mov	r0, r4
 8013b96:	4629      	mov	r1, r5
 8013b98:	f7ec fe30 	bl	80007fc <__aeabi_ddiv>
 8013b9c:	f7ec ffb4 	bl	8000b08 <__aeabi_d2iz>
 8013ba0:	4680      	mov	r8, r0
 8013ba2:	f7ec fc97 	bl	80004d4 <__aeabi_i2d>
 8013ba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013baa:	f7ec fcfd 	bl	80005a8 <__aeabi_dmul>
 8013bae:	4602      	mov	r2, r0
 8013bb0:	460b      	mov	r3, r1
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	4629      	mov	r1, r5
 8013bb6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013bba:	f7ec fb3d 	bl	8000238 <__aeabi_dsub>
 8013bbe:	f806 4b01 	strb.w	r4, [r6], #1
 8013bc2:	9d03      	ldr	r5, [sp, #12]
 8013bc4:	eba6 040a 	sub.w	r4, r6, sl
 8013bc8:	42a5      	cmp	r5, r4
 8013bca:	4602      	mov	r2, r0
 8013bcc:	460b      	mov	r3, r1
 8013bce:	d133      	bne.n	8013c38 <_dtoa_r+0x6e0>
 8013bd0:	f7ec fb34 	bl	800023c <__adddf3>
 8013bd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bd8:	4604      	mov	r4, r0
 8013bda:	460d      	mov	r5, r1
 8013bdc:	f7ec ff74 	bl	8000ac8 <__aeabi_dcmpgt>
 8013be0:	b9c0      	cbnz	r0, 8013c14 <_dtoa_r+0x6bc>
 8013be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013be6:	4620      	mov	r0, r4
 8013be8:	4629      	mov	r1, r5
 8013bea:	f7ec ff45 	bl	8000a78 <__aeabi_dcmpeq>
 8013bee:	b110      	cbz	r0, 8013bf6 <_dtoa_r+0x69e>
 8013bf0:	f018 0f01 	tst.w	r8, #1
 8013bf4:	d10e      	bne.n	8013c14 <_dtoa_r+0x6bc>
 8013bf6:	9902      	ldr	r1, [sp, #8]
 8013bf8:	4648      	mov	r0, r9
 8013bfa:	f000 feb9 	bl	8014970 <_Bfree>
 8013bfe:	2300      	movs	r3, #0
 8013c00:	7033      	strb	r3, [r6, #0]
 8013c02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c04:	3701      	adds	r7, #1
 8013c06:	601f      	str	r7, [r3, #0]
 8013c08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f000 824b 	beq.w	80140a6 <_dtoa_r+0xb4e>
 8013c10:	601e      	str	r6, [r3, #0]
 8013c12:	e248      	b.n	80140a6 <_dtoa_r+0xb4e>
 8013c14:	46b8      	mov	r8, r7
 8013c16:	4633      	mov	r3, r6
 8013c18:	461e      	mov	r6, r3
 8013c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c1e:	2a39      	cmp	r2, #57	@ 0x39
 8013c20:	d106      	bne.n	8013c30 <_dtoa_r+0x6d8>
 8013c22:	459a      	cmp	sl, r3
 8013c24:	d1f8      	bne.n	8013c18 <_dtoa_r+0x6c0>
 8013c26:	2230      	movs	r2, #48	@ 0x30
 8013c28:	f108 0801 	add.w	r8, r8, #1
 8013c2c:	f88a 2000 	strb.w	r2, [sl]
 8013c30:	781a      	ldrb	r2, [r3, #0]
 8013c32:	3201      	adds	r2, #1
 8013c34:	701a      	strb	r2, [r3, #0]
 8013c36:	e7a0      	b.n	8013b7a <_dtoa_r+0x622>
 8013c38:	4b6f      	ldr	r3, [pc, #444]	@ (8013df8 <_dtoa_r+0x8a0>)
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	f7ec fcb4 	bl	80005a8 <__aeabi_dmul>
 8013c40:	2200      	movs	r2, #0
 8013c42:	2300      	movs	r3, #0
 8013c44:	4604      	mov	r4, r0
 8013c46:	460d      	mov	r5, r1
 8013c48:	f7ec ff16 	bl	8000a78 <__aeabi_dcmpeq>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	d09f      	beq.n	8013b90 <_dtoa_r+0x638>
 8013c50:	e7d1      	b.n	8013bf6 <_dtoa_r+0x69e>
 8013c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c54:	2a00      	cmp	r2, #0
 8013c56:	f000 80ea 	beq.w	8013e2e <_dtoa_r+0x8d6>
 8013c5a:	9a07      	ldr	r2, [sp, #28]
 8013c5c:	2a01      	cmp	r2, #1
 8013c5e:	f300 80cd 	bgt.w	8013dfc <_dtoa_r+0x8a4>
 8013c62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013c64:	2a00      	cmp	r2, #0
 8013c66:	f000 80c1 	beq.w	8013dec <_dtoa_r+0x894>
 8013c6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013c6e:	9c08      	ldr	r4, [sp, #32]
 8013c70:	9e00      	ldr	r6, [sp, #0]
 8013c72:	9a00      	ldr	r2, [sp, #0]
 8013c74:	441a      	add	r2, r3
 8013c76:	9200      	str	r2, [sp, #0]
 8013c78:	9a06      	ldr	r2, [sp, #24]
 8013c7a:	2101      	movs	r1, #1
 8013c7c:	441a      	add	r2, r3
 8013c7e:	4648      	mov	r0, r9
 8013c80:	9206      	str	r2, [sp, #24]
 8013c82:	f000 ff29 	bl	8014ad8 <__i2b>
 8013c86:	4605      	mov	r5, r0
 8013c88:	b166      	cbz	r6, 8013ca4 <_dtoa_r+0x74c>
 8013c8a:	9b06      	ldr	r3, [sp, #24]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	dd09      	ble.n	8013ca4 <_dtoa_r+0x74c>
 8013c90:	42b3      	cmp	r3, r6
 8013c92:	9a00      	ldr	r2, [sp, #0]
 8013c94:	bfa8      	it	ge
 8013c96:	4633      	movge	r3, r6
 8013c98:	1ad2      	subs	r2, r2, r3
 8013c9a:	9200      	str	r2, [sp, #0]
 8013c9c:	9a06      	ldr	r2, [sp, #24]
 8013c9e:	1af6      	subs	r6, r6, r3
 8013ca0:	1ad3      	subs	r3, r2, r3
 8013ca2:	9306      	str	r3, [sp, #24]
 8013ca4:	9b08      	ldr	r3, [sp, #32]
 8013ca6:	b30b      	cbz	r3, 8013cec <_dtoa_r+0x794>
 8013ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	f000 80c6 	beq.w	8013e3c <_dtoa_r+0x8e4>
 8013cb0:	2c00      	cmp	r4, #0
 8013cb2:	f000 80c0 	beq.w	8013e36 <_dtoa_r+0x8de>
 8013cb6:	4629      	mov	r1, r5
 8013cb8:	4622      	mov	r2, r4
 8013cba:	4648      	mov	r0, r9
 8013cbc:	f000 ffc4 	bl	8014c48 <__pow5mult>
 8013cc0:	9a02      	ldr	r2, [sp, #8]
 8013cc2:	4601      	mov	r1, r0
 8013cc4:	4605      	mov	r5, r0
 8013cc6:	4648      	mov	r0, r9
 8013cc8:	f000 ff1c 	bl	8014b04 <__multiply>
 8013ccc:	9902      	ldr	r1, [sp, #8]
 8013cce:	4680      	mov	r8, r0
 8013cd0:	4648      	mov	r0, r9
 8013cd2:	f000 fe4d 	bl	8014970 <_Bfree>
 8013cd6:	9b08      	ldr	r3, [sp, #32]
 8013cd8:	1b1b      	subs	r3, r3, r4
 8013cda:	9308      	str	r3, [sp, #32]
 8013cdc:	f000 80b1 	beq.w	8013e42 <_dtoa_r+0x8ea>
 8013ce0:	9a08      	ldr	r2, [sp, #32]
 8013ce2:	4641      	mov	r1, r8
 8013ce4:	4648      	mov	r0, r9
 8013ce6:	f000 ffaf 	bl	8014c48 <__pow5mult>
 8013cea:	9002      	str	r0, [sp, #8]
 8013cec:	2101      	movs	r1, #1
 8013cee:	4648      	mov	r0, r9
 8013cf0:	f000 fef2 	bl	8014ad8 <__i2b>
 8013cf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	f000 81d8 	beq.w	80140ae <_dtoa_r+0xb56>
 8013cfe:	461a      	mov	r2, r3
 8013d00:	4601      	mov	r1, r0
 8013d02:	4648      	mov	r0, r9
 8013d04:	f000 ffa0 	bl	8014c48 <__pow5mult>
 8013d08:	9b07      	ldr	r3, [sp, #28]
 8013d0a:	2b01      	cmp	r3, #1
 8013d0c:	4604      	mov	r4, r0
 8013d0e:	f300 809f 	bgt.w	8013e50 <_dtoa_r+0x8f8>
 8013d12:	9b04      	ldr	r3, [sp, #16]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	f040 8097 	bne.w	8013e48 <_dtoa_r+0x8f0>
 8013d1a:	9b05      	ldr	r3, [sp, #20]
 8013d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f040 8093 	bne.w	8013e4c <_dtoa_r+0x8f4>
 8013d26:	9b05      	ldr	r3, [sp, #20]
 8013d28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013d2c:	0d1b      	lsrs	r3, r3, #20
 8013d2e:	051b      	lsls	r3, r3, #20
 8013d30:	b133      	cbz	r3, 8013d40 <_dtoa_r+0x7e8>
 8013d32:	9b00      	ldr	r3, [sp, #0]
 8013d34:	3301      	adds	r3, #1
 8013d36:	9300      	str	r3, [sp, #0]
 8013d38:	9b06      	ldr	r3, [sp, #24]
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	9306      	str	r3, [sp, #24]
 8013d3e:	2301      	movs	r3, #1
 8013d40:	9308      	str	r3, [sp, #32]
 8013d42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	f000 81b8 	beq.w	80140ba <_dtoa_r+0xb62>
 8013d4a:	6923      	ldr	r3, [r4, #16]
 8013d4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013d50:	6918      	ldr	r0, [r3, #16]
 8013d52:	f000 fe75 	bl	8014a40 <__hi0bits>
 8013d56:	f1c0 0020 	rsb	r0, r0, #32
 8013d5a:	9b06      	ldr	r3, [sp, #24]
 8013d5c:	4418      	add	r0, r3
 8013d5e:	f010 001f 	ands.w	r0, r0, #31
 8013d62:	f000 8082 	beq.w	8013e6a <_dtoa_r+0x912>
 8013d66:	f1c0 0320 	rsb	r3, r0, #32
 8013d6a:	2b04      	cmp	r3, #4
 8013d6c:	dd73      	ble.n	8013e56 <_dtoa_r+0x8fe>
 8013d6e:	9b00      	ldr	r3, [sp, #0]
 8013d70:	f1c0 001c 	rsb	r0, r0, #28
 8013d74:	4403      	add	r3, r0
 8013d76:	9300      	str	r3, [sp, #0]
 8013d78:	9b06      	ldr	r3, [sp, #24]
 8013d7a:	4403      	add	r3, r0
 8013d7c:	4406      	add	r6, r0
 8013d7e:	9306      	str	r3, [sp, #24]
 8013d80:	9b00      	ldr	r3, [sp, #0]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	dd05      	ble.n	8013d92 <_dtoa_r+0x83a>
 8013d86:	9902      	ldr	r1, [sp, #8]
 8013d88:	461a      	mov	r2, r3
 8013d8a:	4648      	mov	r0, r9
 8013d8c:	f000 ffb6 	bl	8014cfc <__lshift>
 8013d90:	9002      	str	r0, [sp, #8]
 8013d92:	9b06      	ldr	r3, [sp, #24]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	dd05      	ble.n	8013da4 <_dtoa_r+0x84c>
 8013d98:	4621      	mov	r1, r4
 8013d9a:	461a      	mov	r2, r3
 8013d9c:	4648      	mov	r0, r9
 8013d9e:	f000 ffad 	bl	8014cfc <__lshift>
 8013da2:	4604      	mov	r4, r0
 8013da4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d061      	beq.n	8013e6e <_dtoa_r+0x916>
 8013daa:	9802      	ldr	r0, [sp, #8]
 8013dac:	4621      	mov	r1, r4
 8013dae:	f001 f811 	bl	8014dd4 <__mcmp>
 8013db2:	2800      	cmp	r0, #0
 8013db4:	da5b      	bge.n	8013e6e <_dtoa_r+0x916>
 8013db6:	2300      	movs	r3, #0
 8013db8:	9902      	ldr	r1, [sp, #8]
 8013dba:	220a      	movs	r2, #10
 8013dbc:	4648      	mov	r0, r9
 8013dbe:	f000 fdf9 	bl	80149b4 <__multadd>
 8013dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dc4:	9002      	str	r0, [sp, #8]
 8013dc6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	f000 8177 	beq.w	80140be <_dtoa_r+0xb66>
 8013dd0:	4629      	mov	r1, r5
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	220a      	movs	r2, #10
 8013dd6:	4648      	mov	r0, r9
 8013dd8:	f000 fdec 	bl	80149b4 <__multadd>
 8013ddc:	f1bb 0f00 	cmp.w	fp, #0
 8013de0:	4605      	mov	r5, r0
 8013de2:	dc6f      	bgt.n	8013ec4 <_dtoa_r+0x96c>
 8013de4:	9b07      	ldr	r3, [sp, #28]
 8013de6:	2b02      	cmp	r3, #2
 8013de8:	dc49      	bgt.n	8013e7e <_dtoa_r+0x926>
 8013dea:	e06b      	b.n	8013ec4 <_dtoa_r+0x96c>
 8013dec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013dee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013df2:	e73c      	b.n	8013c6e <_dtoa_r+0x716>
 8013df4:	3fe00000 	.word	0x3fe00000
 8013df8:	40240000 	.word	0x40240000
 8013dfc:	9b03      	ldr	r3, [sp, #12]
 8013dfe:	1e5c      	subs	r4, r3, #1
 8013e00:	9b08      	ldr	r3, [sp, #32]
 8013e02:	42a3      	cmp	r3, r4
 8013e04:	db09      	blt.n	8013e1a <_dtoa_r+0x8c2>
 8013e06:	1b1c      	subs	r4, r3, r4
 8013e08:	9b03      	ldr	r3, [sp, #12]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	f6bf af30 	bge.w	8013c70 <_dtoa_r+0x718>
 8013e10:	9b00      	ldr	r3, [sp, #0]
 8013e12:	9a03      	ldr	r2, [sp, #12]
 8013e14:	1a9e      	subs	r6, r3, r2
 8013e16:	2300      	movs	r3, #0
 8013e18:	e72b      	b.n	8013c72 <_dtoa_r+0x71a>
 8013e1a:	9b08      	ldr	r3, [sp, #32]
 8013e1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013e1e:	9408      	str	r4, [sp, #32]
 8013e20:	1ae3      	subs	r3, r4, r3
 8013e22:	441a      	add	r2, r3
 8013e24:	9e00      	ldr	r6, [sp, #0]
 8013e26:	9b03      	ldr	r3, [sp, #12]
 8013e28:	920d      	str	r2, [sp, #52]	@ 0x34
 8013e2a:	2400      	movs	r4, #0
 8013e2c:	e721      	b.n	8013c72 <_dtoa_r+0x71a>
 8013e2e:	9c08      	ldr	r4, [sp, #32]
 8013e30:	9e00      	ldr	r6, [sp, #0]
 8013e32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8013e34:	e728      	b.n	8013c88 <_dtoa_r+0x730>
 8013e36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013e3a:	e751      	b.n	8013ce0 <_dtoa_r+0x788>
 8013e3c:	9a08      	ldr	r2, [sp, #32]
 8013e3e:	9902      	ldr	r1, [sp, #8]
 8013e40:	e750      	b.n	8013ce4 <_dtoa_r+0x78c>
 8013e42:	f8cd 8008 	str.w	r8, [sp, #8]
 8013e46:	e751      	b.n	8013cec <_dtoa_r+0x794>
 8013e48:	2300      	movs	r3, #0
 8013e4a:	e779      	b.n	8013d40 <_dtoa_r+0x7e8>
 8013e4c:	9b04      	ldr	r3, [sp, #16]
 8013e4e:	e777      	b.n	8013d40 <_dtoa_r+0x7e8>
 8013e50:	2300      	movs	r3, #0
 8013e52:	9308      	str	r3, [sp, #32]
 8013e54:	e779      	b.n	8013d4a <_dtoa_r+0x7f2>
 8013e56:	d093      	beq.n	8013d80 <_dtoa_r+0x828>
 8013e58:	9a00      	ldr	r2, [sp, #0]
 8013e5a:	331c      	adds	r3, #28
 8013e5c:	441a      	add	r2, r3
 8013e5e:	9200      	str	r2, [sp, #0]
 8013e60:	9a06      	ldr	r2, [sp, #24]
 8013e62:	441a      	add	r2, r3
 8013e64:	441e      	add	r6, r3
 8013e66:	9206      	str	r2, [sp, #24]
 8013e68:	e78a      	b.n	8013d80 <_dtoa_r+0x828>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	e7f4      	b.n	8013e58 <_dtoa_r+0x900>
 8013e6e:	9b03      	ldr	r3, [sp, #12]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	46b8      	mov	r8, r7
 8013e74:	dc20      	bgt.n	8013eb8 <_dtoa_r+0x960>
 8013e76:	469b      	mov	fp, r3
 8013e78:	9b07      	ldr	r3, [sp, #28]
 8013e7a:	2b02      	cmp	r3, #2
 8013e7c:	dd1e      	ble.n	8013ebc <_dtoa_r+0x964>
 8013e7e:	f1bb 0f00 	cmp.w	fp, #0
 8013e82:	f47f adb1 	bne.w	80139e8 <_dtoa_r+0x490>
 8013e86:	4621      	mov	r1, r4
 8013e88:	465b      	mov	r3, fp
 8013e8a:	2205      	movs	r2, #5
 8013e8c:	4648      	mov	r0, r9
 8013e8e:	f000 fd91 	bl	80149b4 <__multadd>
 8013e92:	4601      	mov	r1, r0
 8013e94:	4604      	mov	r4, r0
 8013e96:	9802      	ldr	r0, [sp, #8]
 8013e98:	f000 ff9c 	bl	8014dd4 <__mcmp>
 8013e9c:	2800      	cmp	r0, #0
 8013e9e:	f77f ada3 	ble.w	80139e8 <_dtoa_r+0x490>
 8013ea2:	4656      	mov	r6, sl
 8013ea4:	2331      	movs	r3, #49	@ 0x31
 8013ea6:	f806 3b01 	strb.w	r3, [r6], #1
 8013eaa:	f108 0801 	add.w	r8, r8, #1
 8013eae:	e59f      	b.n	80139f0 <_dtoa_r+0x498>
 8013eb0:	9c03      	ldr	r4, [sp, #12]
 8013eb2:	46b8      	mov	r8, r7
 8013eb4:	4625      	mov	r5, r4
 8013eb6:	e7f4      	b.n	8013ea2 <_dtoa_r+0x94a>
 8013eb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	f000 8101 	beq.w	80140c6 <_dtoa_r+0xb6e>
 8013ec4:	2e00      	cmp	r6, #0
 8013ec6:	dd05      	ble.n	8013ed4 <_dtoa_r+0x97c>
 8013ec8:	4629      	mov	r1, r5
 8013eca:	4632      	mov	r2, r6
 8013ecc:	4648      	mov	r0, r9
 8013ece:	f000 ff15 	bl	8014cfc <__lshift>
 8013ed2:	4605      	mov	r5, r0
 8013ed4:	9b08      	ldr	r3, [sp, #32]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d05c      	beq.n	8013f94 <_dtoa_r+0xa3c>
 8013eda:	6869      	ldr	r1, [r5, #4]
 8013edc:	4648      	mov	r0, r9
 8013ede:	f000 fd07 	bl	80148f0 <_Balloc>
 8013ee2:	4606      	mov	r6, r0
 8013ee4:	b928      	cbnz	r0, 8013ef2 <_dtoa_r+0x99a>
 8013ee6:	4b82      	ldr	r3, [pc, #520]	@ (80140f0 <_dtoa_r+0xb98>)
 8013ee8:	4602      	mov	r2, r0
 8013eea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013eee:	f7ff bb4a 	b.w	8013586 <_dtoa_r+0x2e>
 8013ef2:	692a      	ldr	r2, [r5, #16]
 8013ef4:	3202      	adds	r2, #2
 8013ef6:	0092      	lsls	r2, r2, #2
 8013ef8:	f105 010c 	add.w	r1, r5, #12
 8013efc:	300c      	adds	r0, #12
 8013efe:	f001 fa9f 	bl	8015440 <memcpy>
 8013f02:	2201      	movs	r2, #1
 8013f04:	4631      	mov	r1, r6
 8013f06:	4648      	mov	r0, r9
 8013f08:	f000 fef8 	bl	8014cfc <__lshift>
 8013f0c:	f10a 0301 	add.w	r3, sl, #1
 8013f10:	9300      	str	r3, [sp, #0]
 8013f12:	eb0a 030b 	add.w	r3, sl, fp
 8013f16:	9308      	str	r3, [sp, #32]
 8013f18:	9b04      	ldr	r3, [sp, #16]
 8013f1a:	f003 0301 	and.w	r3, r3, #1
 8013f1e:	462f      	mov	r7, r5
 8013f20:	9306      	str	r3, [sp, #24]
 8013f22:	4605      	mov	r5, r0
 8013f24:	9b00      	ldr	r3, [sp, #0]
 8013f26:	9802      	ldr	r0, [sp, #8]
 8013f28:	4621      	mov	r1, r4
 8013f2a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8013f2e:	f7ff fa89 	bl	8013444 <quorem>
 8013f32:	4603      	mov	r3, r0
 8013f34:	3330      	adds	r3, #48	@ 0x30
 8013f36:	9003      	str	r0, [sp, #12]
 8013f38:	4639      	mov	r1, r7
 8013f3a:	9802      	ldr	r0, [sp, #8]
 8013f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f3e:	f000 ff49 	bl	8014dd4 <__mcmp>
 8013f42:	462a      	mov	r2, r5
 8013f44:	9004      	str	r0, [sp, #16]
 8013f46:	4621      	mov	r1, r4
 8013f48:	4648      	mov	r0, r9
 8013f4a:	f000 ff5f 	bl	8014e0c <__mdiff>
 8013f4e:	68c2      	ldr	r2, [r0, #12]
 8013f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f52:	4606      	mov	r6, r0
 8013f54:	bb02      	cbnz	r2, 8013f98 <_dtoa_r+0xa40>
 8013f56:	4601      	mov	r1, r0
 8013f58:	9802      	ldr	r0, [sp, #8]
 8013f5a:	f000 ff3b 	bl	8014dd4 <__mcmp>
 8013f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f60:	4602      	mov	r2, r0
 8013f62:	4631      	mov	r1, r6
 8013f64:	4648      	mov	r0, r9
 8013f66:	920c      	str	r2, [sp, #48]	@ 0x30
 8013f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f6a:	f000 fd01 	bl	8014970 <_Bfree>
 8013f6e:	9b07      	ldr	r3, [sp, #28]
 8013f70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013f72:	9e00      	ldr	r6, [sp, #0]
 8013f74:	ea42 0103 	orr.w	r1, r2, r3
 8013f78:	9b06      	ldr	r3, [sp, #24]
 8013f7a:	4319      	orrs	r1, r3
 8013f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f7e:	d10d      	bne.n	8013f9c <_dtoa_r+0xa44>
 8013f80:	2b39      	cmp	r3, #57	@ 0x39
 8013f82:	d027      	beq.n	8013fd4 <_dtoa_r+0xa7c>
 8013f84:	9a04      	ldr	r2, [sp, #16]
 8013f86:	2a00      	cmp	r2, #0
 8013f88:	dd01      	ble.n	8013f8e <_dtoa_r+0xa36>
 8013f8a:	9b03      	ldr	r3, [sp, #12]
 8013f8c:	3331      	adds	r3, #49	@ 0x31
 8013f8e:	f88b 3000 	strb.w	r3, [fp]
 8013f92:	e52e      	b.n	80139f2 <_dtoa_r+0x49a>
 8013f94:	4628      	mov	r0, r5
 8013f96:	e7b9      	b.n	8013f0c <_dtoa_r+0x9b4>
 8013f98:	2201      	movs	r2, #1
 8013f9a:	e7e2      	b.n	8013f62 <_dtoa_r+0xa0a>
 8013f9c:	9904      	ldr	r1, [sp, #16]
 8013f9e:	2900      	cmp	r1, #0
 8013fa0:	db04      	blt.n	8013fac <_dtoa_r+0xa54>
 8013fa2:	9807      	ldr	r0, [sp, #28]
 8013fa4:	4301      	orrs	r1, r0
 8013fa6:	9806      	ldr	r0, [sp, #24]
 8013fa8:	4301      	orrs	r1, r0
 8013faa:	d120      	bne.n	8013fee <_dtoa_r+0xa96>
 8013fac:	2a00      	cmp	r2, #0
 8013fae:	ddee      	ble.n	8013f8e <_dtoa_r+0xa36>
 8013fb0:	9902      	ldr	r1, [sp, #8]
 8013fb2:	9300      	str	r3, [sp, #0]
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	4648      	mov	r0, r9
 8013fb8:	f000 fea0 	bl	8014cfc <__lshift>
 8013fbc:	4621      	mov	r1, r4
 8013fbe:	9002      	str	r0, [sp, #8]
 8013fc0:	f000 ff08 	bl	8014dd4 <__mcmp>
 8013fc4:	2800      	cmp	r0, #0
 8013fc6:	9b00      	ldr	r3, [sp, #0]
 8013fc8:	dc02      	bgt.n	8013fd0 <_dtoa_r+0xa78>
 8013fca:	d1e0      	bne.n	8013f8e <_dtoa_r+0xa36>
 8013fcc:	07da      	lsls	r2, r3, #31
 8013fce:	d5de      	bpl.n	8013f8e <_dtoa_r+0xa36>
 8013fd0:	2b39      	cmp	r3, #57	@ 0x39
 8013fd2:	d1da      	bne.n	8013f8a <_dtoa_r+0xa32>
 8013fd4:	2339      	movs	r3, #57	@ 0x39
 8013fd6:	f88b 3000 	strb.w	r3, [fp]
 8013fda:	4633      	mov	r3, r6
 8013fdc:	461e      	mov	r6, r3
 8013fde:	3b01      	subs	r3, #1
 8013fe0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013fe4:	2a39      	cmp	r2, #57	@ 0x39
 8013fe6:	d04e      	beq.n	8014086 <_dtoa_r+0xb2e>
 8013fe8:	3201      	adds	r2, #1
 8013fea:	701a      	strb	r2, [r3, #0]
 8013fec:	e501      	b.n	80139f2 <_dtoa_r+0x49a>
 8013fee:	2a00      	cmp	r2, #0
 8013ff0:	dd03      	ble.n	8013ffa <_dtoa_r+0xaa2>
 8013ff2:	2b39      	cmp	r3, #57	@ 0x39
 8013ff4:	d0ee      	beq.n	8013fd4 <_dtoa_r+0xa7c>
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	e7c9      	b.n	8013f8e <_dtoa_r+0xa36>
 8013ffa:	9a00      	ldr	r2, [sp, #0]
 8013ffc:	9908      	ldr	r1, [sp, #32]
 8013ffe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014002:	428a      	cmp	r2, r1
 8014004:	d028      	beq.n	8014058 <_dtoa_r+0xb00>
 8014006:	9902      	ldr	r1, [sp, #8]
 8014008:	2300      	movs	r3, #0
 801400a:	220a      	movs	r2, #10
 801400c:	4648      	mov	r0, r9
 801400e:	f000 fcd1 	bl	80149b4 <__multadd>
 8014012:	42af      	cmp	r7, r5
 8014014:	9002      	str	r0, [sp, #8]
 8014016:	f04f 0300 	mov.w	r3, #0
 801401a:	f04f 020a 	mov.w	r2, #10
 801401e:	4639      	mov	r1, r7
 8014020:	4648      	mov	r0, r9
 8014022:	d107      	bne.n	8014034 <_dtoa_r+0xadc>
 8014024:	f000 fcc6 	bl	80149b4 <__multadd>
 8014028:	4607      	mov	r7, r0
 801402a:	4605      	mov	r5, r0
 801402c:	9b00      	ldr	r3, [sp, #0]
 801402e:	3301      	adds	r3, #1
 8014030:	9300      	str	r3, [sp, #0]
 8014032:	e777      	b.n	8013f24 <_dtoa_r+0x9cc>
 8014034:	f000 fcbe 	bl	80149b4 <__multadd>
 8014038:	4629      	mov	r1, r5
 801403a:	4607      	mov	r7, r0
 801403c:	2300      	movs	r3, #0
 801403e:	220a      	movs	r2, #10
 8014040:	4648      	mov	r0, r9
 8014042:	f000 fcb7 	bl	80149b4 <__multadd>
 8014046:	4605      	mov	r5, r0
 8014048:	e7f0      	b.n	801402c <_dtoa_r+0xad4>
 801404a:	f1bb 0f00 	cmp.w	fp, #0
 801404e:	bfcc      	ite	gt
 8014050:	465e      	movgt	r6, fp
 8014052:	2601      	movle	r6, #1
 8014054:	4456      	add	r6, sl
 8014056:	2700      	movs	r7, #0
 8014058:	9902      	ldr	r1, [sp, #8]
 801405a:	9300      	str	r3, [sp, #0]
 801405c:	2201      	movs	r2, #1
 801405e:	4648      	mov	r0, r9
 8014060:	f000 fe4c 	bl	8014cfc <__lshift>
 8014064:	4621      	mov	r1, r4
 8014066:	9002      	str	r0, [sp, #8]
 8014068:	f000 feb4 	bl	8014dd4 <__mcmp>
 801406c:	2800      	cmp	r0, #0
 801406e:	dcb4      	bgt.n	8013fda <_dtoa_r+0xa82>
 8014070:	d102      	bne.n	8014078 <_dtoa_r+0xb20>
 8014072:	9b00      	ldr	r3, [sp, #0]
 8014074:	07db      	lsls	r3, r3, #31
 8014076:	d4b0      	bmi.n	8013fda <_dtoa_r+0xa82>
 8014078:	4633      	mov	r3, r6
 801407a:	461e      	mov	r6, r3
 801407c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014080:	2a30      	cmp	r2, #48	@ 0x30
 8014082:	d0fa      	beq.n	801407a <_dtoa_r+0xb22>
 8014084:	e4b5      	b.n	80139f2 <_dtoa_r+0x49a>
 8014086:	459a      	cmp	sl, r3
 8014088:	d1a8      	bne.n	8013fdc <_dtoa_r+0xa84>
 801408a:	2331      	movs	r3, #49	@ 0x31
 801408c:	f108 0801 	add.w	r8, r8, #1
 8014090:	f88a 3000 	strb.w	r3, [sl]
 8014094:	e4ad      	b.n	80139f2 <_dtoa_r+0x49a>
 8014096:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014098:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80140f4 <_dtoa_r+0xb9c>
 801409c:	b11b      	cbz	r3, 80140a6 <_dtoa_r+0xb4e>
 801409e:	f10a 0308 	add.w	r3, sl, #8
 80140a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80140a4:	6013      	str	r3, [r2, #0]
 80140a6:	4650      	mov	r0, sl
 80140a8:	b017      	add	sp, #92	@ 0x5c
 80140aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ae:	9b07      	ldr	r3, [sp, #28]
 80140b0:	2b01      	cmp	r3, #1
 80140b2:	f77f ae2e 	ble.w	8013d12 <_dtoa_r+0x7ba>
 80140b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80140b8:	9308      	str	r3, [sp, #32]
 80140ba:	2001      	movs	r0, #1
 80140bc:	e64d      	b.n	8013d5a <_dtoa_r+0x802>
 80140be:	f1bb 0f00 	cmp.w	fp, #0
 80140c2:	f77f aed9 	ble.w	8013e78 <_dtoa_r+0x920>
 80140c6:	4656      	mov	r6, sl
 80140c8:	9802      	ldr	r0, [sp, #8]
 80140ca:	4621      	mov	r1, r4
 80140cc:	f7ff f9ba 	bl	8013444 <quorem>
 80140d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80140d4:	f806 3b01 	strb.w	r3, [r6], #1
 80140d8:	eba6 020a 	sub.w	r2, r6, sl
 80140dc:	4593      	cmp	fp, r2
 80140de:	ddb4      	ble.n	801404a <_dtoa_r+0xaf2>
 80140e0:	9902      	ldr	r1, [sp, #8]
 80140e2:	2300      	movs	r3, #0
 80140e4:	220a      	movs	r2, #10
 80140e6:	4648      	mov	r0, r9
 80140e8:	f000 fc64 	bl	80149b4 <__multadd>
 80140ec:	9002      	str	r0, [sp, #8]
 80140ee:	e7eb      	b.n	80140c8 <_dtoa_r+0xb70>
 80140f0:	0801894c 	.word	0x0801894c
 80140f4:	080188d0 	.word	0x080188d0

080140f8 <__ssputs_r>:
 80140f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140fc:	688e      	ldr	r6, [r1, #8]
 80140fe:	461f      	mov	r7, r3
 8014100:	42be      	cmp	r6, r7
 8014102:	680b      	ldr	r3, [r1, #0]
 8014104:	4682      	mov	sl, r0
 8014106:	460c      	mov	r4, r1
 8014108:	4690      	mov	r8, r2
 801410a:	d82d      	bhi.n	8014168 <__ssputs_r+0x70>
 801410c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014110:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014114:	d026      	beq.n	8014164 <__ssputs_r+0x6c>
 8014116:	6965      	ldr	r5, [r4, #20]
 8014118:	6909      	ldr	r1, [r1, #16]
 801411a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801411e:	eba3 0901 	sub.w	r9, r3, r1
 8014122:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014126:	1c7b      	adds	r3, r7, #1
 8014128:	444b      	add	r3, r9
 801412a:	106d      	asrs	r5, r5, #1
 801412c:	429d      	cmp	r5, r3
 801412e:	bf38      	it	cc
 8014130:	461d      	movcc	r5, r3
 8014132:	0553      	lsls	r3, r2, #21
 8014134:	d527      	bpl.n	8014186 <__ssputs_r+0x8e>
 8014136:	4629      	mov	r1, r5
 8014138:	f000 faa2 	bl	8014680 <_malloc_r>
 801413c:	4606      	mov	r6, r0
 801413e:	b360      	cbz	r0, 801419a <__ssputs_r+0xa2>
 8014140:	6921      	ldr	r1, [r4, #16]
 8014142:	464a      	mov	r2, r9
 8014144:	f001 f97c 	bl	8015440 <memcpy>
 8014148:	89a3      	ldrh	r3, [r4, #12]
 801414a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801414e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014152:	81a3      	strh	r3, [r4, #12]
 8014154:	6126      	str	r6, [r4, #16]
 8014156:	6165      	str	r5, [r4, #20]
 8014158:	444e      	add	r6, r9
 801415a:	eba5 0509 	sub.w	r5, r5, r9
 801415e:	6026      	str	r6, [r4, #0]
 8014160:	60a5      	str	r5, [r4, #8]
 8014162:	463e      	mov	r6, r7
 8014164:	42be      	cmp	r6, r7
 8014166:	d900      	bls.n	801416a <__ssputs_r+0x72>
 8014168:	463e      	mov	r6, r7
 801416a:	6820      	ldr	r0, [r4, #0]
 801416c:	4632      	mov	r2, r6
 801416e:	4641      	mov	r1, r8
 8014170:	f001 f8d4 	bl	801531c <memmove>
 8014174:	68a3      	ldr	r3, [r4, #8]
 8014176:	1b9b      	subs	r3, r3, r6
 8014178:	60a3      	str	r3, [r4, #8]
 801417a:	6823      	ldr	r3, [r4, #0]
 801417c:	4433      	add	r3, r6
 801417e:	6023      	str	r3, [r4, #0]
 8014180:	2000      	movs	r0, #0
 8014182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014186:	462a      	mov	r2, r5
 8014188:	f000 ff6f 	bl	801506a <_realloc_r>
 801418c:	4606      	mov	r6, r0
 801418e:	2800      	cmp	r0, #0
 8014190:	d1e0      	bne.n	8014154 <__ssputs_r+0x5c>
 8014192:	6921      	ldr	r1, [r4, #16]
 8014194:	4650      	mov	r0, sl
 8014196:	f001 f993 	bl	80154c0 <_free_r>
 801419a:	230c      	movs	r3, #12
 801419c:	f8ca 3000 	str.w	r3, [sl]
 80141a0:	89a3      	ldrh	r3, [r4, #12]
 80141a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141a6:	81a3      	strh	r3, [r4, #12]
 80141a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80141ac:	e7e9      	b.n	8014182 <__ssputs_r+0x8a>
	...

080141b0 <_svfiprintf_r>:
 80141b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b4:	4698      	mov	r8, r3
 80141b6:	898b      	ldrh	r3, [r1, #12]
 80141b8:	061b      	lsls	r3, r3, #24
 80141ba:	b09d      	sub	sp, #116	@ 0x74
 80141bc:	4607      	mov	r7, r0
 80141be:	460d      	mov	r5, r1
 80141c0:	4614      	mov	r4, r2
 80141c2:	d510      	bpl.n	80141e6 <_svfiprintf_r+0x36>
 80141c4:	690b      	ldr	r3, [r1, #16]
 80141c6:	b973      	cbnz	r3, 80141e6 <_svfiprintf_r+0x36>
 80141c8:	2140      	movs	r1, #64	@ 0x40
 80141ca:	f000 fa59 	bl	8014680 <_malloc_r>
 80141ce:	6028      	str	r0, [r5, #0]
 80141d0:	6128      	str	r0, [r5, #16]
 80141d2:	b930      	cbnz	r0, 80141e2 <_svfiprintf_r+0x32>
 80141d4:	230c      	movs	r3, #12
 80141d6:	603b      	str	r3, [r7, #0]
 80141d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80141dc:	b01d      	add	sp, #116	@ 0x74
 80141de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e2:	2340      	movs	r3, #64	@ 0x40
 80141e4:	616b      	str	r3, [r5, #20]
 80141e6:	2300      	movs	r3, #0
 80141e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80141ea:	2320      	movs	r3, #32
 80141ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80141f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80141f4:	2330      	movs	r3, #48	@ 0x30
 80141f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014394 <_svfiprintf_r+0x1e4>
 80141fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80141fe:	f04f 0901 	mov.w	r9, #1
 8014202:	4623      	mov	r3, r4
 8014204:	469a      	mov	sl, r3
 8014206:	f813 2b01 	ldrb.w	r2, [r3], #1
 801420a:	b10a      	cbz	r2, 8014210 <_svfiprintf_r+0x60>
 801420c:	2a25      	cmp	r2, #37	@ 0x25
 801420e:	d1f9      	bne.n	8014204 <_svfiprintf_r+0x54>
 8014210:	ebba 0b04 	subs.w	fp, sl, r4
 8014214:	d00b      	beq.n	801422e <_svfiprintf_r+0x7e>
 8014216:	465b      	mov	r3, fp
 8014218:	4622      	mov	r2, r4
 801421a:	4629      	mov	r1, r5
 801421c:	4638      	mov	r0, r7
 801421e:	f7ff ff6b 	bl	80140f8 <__ssputs_r>
 8014222:	3001      	adds	r0, #1
 8014224:	f000 80a7 	beq.w	8014376 <_svfiprintf_r+0x1c6>
 8014228:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801422a:	445a      	add	r2, fp
 801422c:	9209      	str	r2, [sp, #36]	@ 0x24
 801422e:	f89a 3000 	ldrb.w	r3, [sl]
 8014232:	2b00      	cmp	r3, #0
 8014234:	f000 809f 	beq.w	8014376 <_svfiprintf_r+0x1c6>
 8014238:	2300      	movs	r3, #0
 801423a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801423e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014242:	f10a 0a01 	add.w	sl, sl, #1
 8014246:	9304      	str	r3, [sp, #16]
 8014248:	9307      	str	r3, [sp, #28]
 801424a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801424e:	931a      	str	r3, [sp, #104]	@ 0x68
 8014250:	4654      	mov	r4, sl
 8014252:	2205      	movs	r2, #5
 8014254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014258:	484e      	ldr	r0, [pc, #312]	@ (8014394 <_svfiprintf_r+0x1e4>)
 801425a:	f7eb ff91 	bl	8000180 <memchr>
 801425e:	9a04      	ldr	r2, [sp, #16]
 8014260:	b9d8      	cbnz	r0, 801429a <_svfiprintf_r+0xea>
 8014262:	06d0      	lsls	r0, r2, #27
 8014264:	bf44      	itt	mi
 8014266:	2320      	movmi	r3, #32
 8014268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801426c:	0711      	lsls	r1, r2, #28
 801426e:	bf44      	itt	mi
 8014270:	232b      	movmi	r3, #43	@ 0x2b
 8014272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014276:	f89a 3000 	ldrb.w	r3, [sl]
 801427a:	2b2a      	cmp	r3, #42	@ 0x2a
 801427c:	d015      	beq.n	80142aa <_svfiprintf_r+0xfa>
 801427e:	9a07      	ldr	r2, [sp, #28]
 8014280:	4654      	mov	r4, sl
 8014282:	2000      	movs	r0, #0
 8014284:	f04f 0c0a 	mov.w	ip, #10
 8014288:	4621      	mov	r1, r4
 801428a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801428e:	3b30      	subs	r3, #48	@ 0x30
 8014290:	2b09      	cmp	r3, #9
 8014292:	d94b      	bls.n	801432c <_svfiprintf_r+0x17c>
 8014294:	b1b0      	cbz	r0, 80142c4 <_svfiprintf_r+0x114>
 8014296:	9207      	str	r2, [sp, #28]
 8014298:	e014      	b.n	80142c4 <_svfiprintf_r+0x114>
 801429a:	eba0 0308 	sub.w	r3, r0, r8
 801429e:	fa09 f303 	lsl.w	r3, r9, r3
 80142a2:	4313      	orrs	r3, r2
 80142a4:	9304      	str	r3, [sp, #16]
 80142a6:	46a2      	mov	sl, r4
 80142a8:	e7d2      	b.n	8014250 <_svfiprintf_r+0xa0>
 80142aa:	9b03      	ldr	r3, [sp, #12]
 80142ac:	1d19      	adds	r1, r3, #4
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	9103      	str	r1, [sp, #12]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	bfbb      	ittet	lt
 80142b6:	425b      	neglt	r3, r3
 80142b8:	f042 0202 	orrlt.w	r2, r2, #2
 80142bc:	9307      	strge	r3, [sp, #28]
 80142be:	9307      	strlt	r3, [sp, #28]
 80142c0:	bfb8      	it	lt
 80142c2:	9204      	strlt	r2, [sp, #16]
 80142c4:	7823      	ldrb	r3, [r4, #0]
 80142c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80142c8:	d10a      	bne.n	80142e0 <_svfiprintf_r+0x130>
 80142ca:	7863      	ldrb	r3, [r4, #1]
 80142cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80142ce:	d132      	bne.n	8014336 <_svfiprintf_r+0x186>
 80142d0:	9b03      	ldr	r3, [sp, #12]
 80142d2:	1d1a      	adds	r2, r3, #4
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	9203      	str	r2, [sp, #12]
 80142d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80142dc:	3402      	adds	r4, #2
 80142de:	9305      	str	r3, [sp, #20]
 80142e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80143a4 <_svfiprintf_r+0x1f4>
 80142e4:	7821      	ldrb	r1, [r4, #0]
 80142e6:	2203      	movs	r2, #3
 80142e8:	4650      	mov	r0, sl
 80142ea:	f7eb ff49 	bl	8000180 <memchr>
 80142ee:	b138      	cbz	r0, 8014300 <_svfiprintf_r+0x150>
 80142f0:	9b04      	ldr	r3, [sp, #16]
 80142f2:	eba0 000a 	sub.w	r0, r0, sl
 80142f6:	2240      	movs	r2, #64	@ 0x40
 80142f8:	4082      	lsls	r2, r0
 80142fa:	4313      	orrs	r3, r2
 80142fc:	3401      	adds	r4, #1
 80142fe:	9304      	str	r3, [sp, #16]
 8014300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014304:	4824      	ldr	r0, [pc, #144]	@ (8014398 <_svfiprintf_r+0x1e8>)
 8014306:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801430a:	2206      	movs	r2, #6
 801430c:	f7eb ff38 	bl	8000180 <memchr>
 8014310:	2800      	cmp	r0, #0
 8014312:	d036      	beq.n	8014382 <_svfiprintf_r+0x1d2>
 8014314:	4b21      	ldr	r3, [pc, #132]	@ (801439c <_svfiprintf_r+0x1ec>)
 8014316:	bb1b      	cbnz	r3, 8014360 <_svfiprintf_r+0x1b0>
 8014318:	9b03      	ldr	r3, [sp, #12]
 801431a:	3307      	adds	r3, #7
 801431c:	f023 0307 	bic.w	r3, r3, #7
 8014320:	3308      	adds	r3, #8
 8014322:	9303      	str	r3, [sp, #12]
 8014324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014326:	4433      	add	r3, r6
 8014328:	9309      	str	r3, [sp, #36]	@ 0x24
 801432a:	e76a      	b.n	8014202 <_svfiprintf_r+0x52>
 801432c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014330:	460c      	mov	r4, r1
 8014332:	2001      	movs	r0, #1
 8014334:	e7a8      	b.n	8014288 <_svfiprintf_r+0xd8>
 8014336:	2300      	movs	r3, #0
 8014338:	3401      	adds	r4, #1
 801433a:	9305      	str	r3, [sp, #20]
 801433c:	4619      	mov	r1, r3
 801433e:	f04f 0c0a 	mov.w	ip, #10
 8014342:	4620      	mov	r0, r4
 8014344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014348:	3a30      	subs	r2, #48	@ 0x30
 801434a:	2a09      	cmp	r2, #9
 801434c:	d903      	bls.n	8014356 <_svfiprintf_r+0x1a6>
 801434e:	2b00      	cmp	r3, #0
 8014350:	d0c6      	beq.n	80142e0 <_svfiprintf_r+0x130>
 8014352:	9105      	str	r1, [sp, #20]
 8014354:	e7c4      	b.n	80142e0 <_svfiprintf_r+0x130>
 8014356:	fb0c 2101 	mla	r1, ip, r1, r2
 801435a:	4604      	mov	r4, r0
 801435c:	2301      	movs	r3, #1
 801435e:	e7f0      	b.n	8014342 <_svfiprintf_r+0x192>
 8014360:	ab03      	add	r3, sp, #12
 8014362:	9300      	str	r3, [sp, #0]
 8014364:	462a      	mov	r2, r5
 8014366:	4b0e      	ldr	r3, [pc, #56]	@ (80143a0 <_svfiprintf_r+0x1f0>)
 8014368:	a904      	add	r1, sp, #16
 801436a:	4638      	mov	r0, r7
 801436c:	f7fe fb0a 	bl	8012984 <_printf_float>
 8014370:	1c42      	adds	r2, r0, #1
 8014372:	4606      	mov	r6, r0
 8014374:	d1d6      	bne.n	8014324 <_svfiprintf_r+0x174>
 8014376:	89ab      	ldrh	r3, [r5, #12]
 8014378:	065b      	lsls	r3, r3, #25
 801437a:	f53f af2d 	bmi.w	80141d8 <_svfiprintf_r+0x28>
 801437e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014380:	e72c      	b.n	80141dc <_svfiprintf_r+0x2c>
 8014382:	ab03      	add	r3, sp, #12
 8014384:	9300      	str	r3, [sp, #0]
 8014386:	462a      	mov	r2, r5
 8014388:	4b05      	ldr	r3, [pc, #20]	@ (80143a0 <_svfiprintf_r+0x1f0>)
 801438a:	a904      	add	r1, sp, #16
 801438c:	4638      	mov	r0, r7
 801438e:	f7fe fd91 	bl	8012eb4 <_printf_i>
 8014392:	e7ed      	b.n	8014370 <_svfiprintf_r+0x1c0>
 8014394:	0801895d 	.word	0x0801895d
 8014398:	08018967 	.word	0x08018967
 801439c:	08012985 	.word	0x08012985
 80143a0:	080140f9 	.word	0x080140f9
 80143a4:	08018963 	.word	0x08018963

080143a8 <__sfputc_r>:
 80143a8:	6893      	ldr	r3, [r2, #8]
 80143aa:	3b01      	subs	r3, #1
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	b410      	push	{r4}
 80143b0:	6093      	str	r3, [r2, #8]
 80143b2:	da08      	bge.n	80143c6 <__sfputc_r+0x1e>
 80143b4:	6994      	ldr	r4, [r2, #24]
 80143b6:	42a3      	cmp	r3, r4
 80143b8:	db01      	blt.n	80143be <__sfputc_r+0x16>
 80143ba:	290a      	cmp	r1, #10
 80143bc:	d103      	bne.n	80143c6 <__sfputc_r+0x1e>
 80143be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143c2:	f000 be80 	b.w	80150c6 <__swbuf_r>
 80143c6:	6813      	ldr	r3, [r2, #0]
 80143c8:	1c58      	adds	r0, r3, #1
 80143ca:	6010      	str	r0, [r2, #0]
 80143cc:	7019      	strb	r1, [r3, #0]
 80143ce:	4608      	mov	r0, r1
 80143d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143d4:	4770      	bx	lr

080143d6 <__sfputs_r>:
 80143d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143d8:	4606      	mov	r6, r0
 80143da:	460f      	mov	r7, r1
 80143dc:	4614      	mov	r4, r2
 80143de:	18d5      	adds	r5, r2, r3
 80143e0:	42ac      	cmp	r4, r5
 80143e2:	d101      	bne.n	80143e8 <__sfputs_r+0x12>
 80143e4:	2000      	movs	r0, #0
 80143e6:	e007      	b.n	80143f8 <__sfputs_r+0x22>
 80143e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ec:	463a      	mov	r2, r7
 80143ee:	4630      	mov	r0, r6
 80143f0:	f7ff ffda 	bl	80143a8 <__sfputc_r>
 80143f4:	1c43      	adds	r3, r0, #1
 80143f6:	d1f3      	bne.n	80143e0 <__sfputs_r+0xa>
 80143f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080143fc <_vfiprintf_r>:
 80143fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014400:	460d      	mov	r5, r1
 8014402:	b09d      	sub	sp, #116	@ 0x74
 8014404:	4614      	mov	r4, r2
 8014406:	4698      	mov	r8, r3
 8014408:	4606      	mov	r6, r0
 801440a:	b118      	cbz	r0, 8014414 <_vfiprintf_r+0x18>
 801440c:	6a03      	ldr	r3, [r0, #32]
 801440e:	b90b      	cbnz	r3, 8014414 <_vfiprintf_r+0x18>
 8014410:	f7fe ff30 	bl	8013274 <__sinit>
 8014414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014416:	07d9      	lsls	r1, r3, #31
 8014418:	d405      	bmi.n	8014426 <_vfiprintf_r+0x2a>
 801441a:	89ab      	ldrh	r3, [r5, #12]
 801441c:	059a      	lsls	r2, r3, #22
 801441e:	d402      	bmi.n	8014426 <_vfiprintf_r+0x2a>
 8014420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014422:	f7ff f808 	bl	8013436 <__retarget_lock_acquire_recursive>
 8014426:	89ab      	ldrh	r3, [r5, #12]
 8014428:	071b      	lsls	r3, r3, #28
 801442a:	d501      	bpl.n	8014430 <_vfiprintf_r+0x34>
 801442c:	692b      	ldr	r3, [r5, #16]
 801442e:	b99b      	cbnz	r3, 8014458 <_vfiprintf_r+0x5c>
 8014430:	4629      	mov	r1, r5
 8014432:	4630      	mov	r0, r6
 8014434:	f000 fe86 	bl	8015144 <__swsetup_r>
 8014438:	b170      	cbz	r0, 8014458 <_vfiprintf_r+0x5c>
 801443a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801443c:	07dc      	lsls	r4, r3, #31
 801443e:	d504      	bpl.n	801444a <_vfiprintf_r+0x4e>
 8014440:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014444:	b01d      	add	sp, #116	@ 0x74
 8014446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801444a:	89ab      	ldrh	r3, [r5, #12]
 801444c:	0598      	lsls	r0, r3, #22
 801444e:	d4f7      	bmi.n	8014440 <_vfiprintf_r+0x44>
 8014450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014452:	f7fe fff1 	bl	8013438 <__retarget_lock_release_recursive>
 8014456:	e7f3      	b.n	8014440 <_vfiprintf_r+0x44>
 8014458:	2300      	movs	r3, #0
 801445a:	9309      	str	r3, [sp, #36]	@ 0x24
 801445c:	2320      	movs	r3, #32
 801445e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014462:	f8cd 800c 	str.w	r8, [sp, #12]
 8014466:	2330      	movs	r3, #48	@ 0x30
 8014468:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014618 <_vfiprintf_r+0x21c>
 801446c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014470:	f04f 0901 	mov.w	r9, #1
 8014474:	4623      	mov	r3, r4
 8014476:	469a      	mov	sl, r3
 8014478:	f813 2b01 	ldrb.w	r2, [r3], #1
 801447c:	b10a      	cbz	r2, 8014482 <_vfiprintf_r+0x86>
 801447e:	2a25      	cmp	r2, #37	@ 0x25
 8014480:	d1f9      	bne.n	8014476 <_vfiprintf_r+0x7a>
 8014482:	ebba 0b04 	subs.w	fp, sl, r4
 8014486:	d00b      	beq.n	80144a0 <_vfiprintf_r+0xa4>
 8014488:	465b      	mov	r3, fp
 801448a:	4622      	mov	r2, r4
 801448c:	4629      	mov	r1, r5
 801448e:	4630      	mov	r0, r6
 8014490:	f7ff ffa1 	bl	80143d6 <__sfputs_r>
 8014494:	3001      	adds	r0, #1
 8014496:	f000 80a7 	beq.w	80145e8 <_vfiprintf_r+0x1ec>
 801449a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801449c:	445a      	add	r2, fp
 801449e:	9209      	str	r2, [sp, #36]	@ 0x24
 80144a0:	f89a 3000 	ldrb.w	r3, [sl]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	f000 809f 	beq.w	80145e8 <_vfiprintf_r+0x1ec>
 80144aa:	2300      	movs	r3, #0
 80144ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80144b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144b4:	f10a 0a01 	add.w	sl, sl, #1
 80144b8:	9304      	str	r3, [sp, #16]
 80144ba:	9307      	str	r3, [sp, #28]
 80144bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80144c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80144c2:	4654      	mov	r4, sl
 80144c4:	2205      	movs	r2, #5
 80144c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144ca:	4853      	ldr	r0, [pc, #332]	@ (8014618 <_vfiprintf_r+0x21c>)
 80144cc:	f7eb fe58 	bl	8000180 <memchr>
 80144d0:	9a04      	ldr	r2, [sp, #16]
 80144d2:	b9d8      	cbnz	r0, 801450c <_vfiprintf_r+0x110>
 80144d4:	06d1      	lsls	r1, r2, #27
 80144d6:	bf44      	itt	mi
 80144d8:	2320      	movmi	r3, #32
 80144da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144de:	0713      	lsls	r3, r2, #28
 80144e0:	bf44      	itt	mi
 80144e2:	232b      	movmi	r3, #43	@ 0x2b
 80144e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144e8:	f89a 3000 	ldrb.w	r3, [sl]
 80144ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80144ee:	d015      	beq.n	801451c <_vfiprintf_r+0x120>
 80144f0:	9a07      	ldr	r2, [sp, #28]
 80144f2:	4654      	mov	r4, sl
 80144f4:	2000      	movs	r0, #0
 80144f6:	f04f 0c0a 	mov.w	ip, #10
 80144fa:	4621      	mov	r1, r4
 80144fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014500:	3b30      	subs	r3, #48	@ 0x30
 8014502:	2b09      	cmp	r3, #9
 8014504:	d94b      	bls.n	801459e <_vfiprintf_r+0x1a2>
 8014506:	b1b0      	cbz	r0, 8014536 <_vfiprintf_r+0x13a>
 8014508:	9207      	str	r2, [sp, #28]
 801450a:	e014      	b.n	8014536 <_vfiprintf_r+0x13a>
 801450c:	eba0 0308 	sub.w	r3, r0, r8
 8014510:	fa09 f303 	lsl.w	r3, r9, r3
 8014514:	4313      	orrs	r3, r2
 8014516:	9304      	str	r3, [sp, #16]
 8014518:	46a2      	mov	sl, r4
 801451a:	e7d2      	b.n	80144c2 <_vfiprintf_r+0xc6>
 801451c:	9b03      	ldr	r3, [sp, #12]
 801451e:	1d19      	adds	r1, r3, #4
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	9103      	str	r1, [sp, #12]
 8014524:	2b00      	cmp	r3, #0
 8014526:	bfbb      	ittet	lt
 8014528:	425b      	neglt	r3, r3
 801452a:	f042 0202 	orrlt.w	r2, r2, #2
 801452e:	9307      	strge	r3, [sp, #28]
 8014530:	9307      	strlt	r3, [sp, #28]
 8014532:	bfb8      	it	lt
 8014534:	9204      	strlt	r2, [sp, #16]
 8014536:	7823      	ldrb	r3, [r4, #0]
 8014538:	2b2e      	cmp	r3, #46	@ 0x2e
 801453a:	d10a      	bne.n	8014552 <_vfiprintf_r+0x156>
 801453c:	7863      	ldrb	r3, [r4, #1]
 801453e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014540:	d132      	bne.n	80145a8 <_vfiprintf_r+0x1ac>
 8014542:	9b03      	ldr	r3, [sp, #12]
 8014544:	1d1a      	adds	r2, r3, #4
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	9203      	str	r2, [sp, #12]
 801454a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801454e:	3402      	adds	r4, #2
 8014550:	9305      	str	r3, [sp, #20]
 8014552:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014628 <_vfiprintf_r+0x22c>
 8014556:	7821      	ldrb	r1, [r4, #0]
 8014558:	2203      	movs	r2, #3
 801455a:	4650      	mov	r0, sl
 801455c:	f7eb fe10 	bl	8000180 <memchr>
 8014560:	b138      	cbz	r0, 8014572 <_vfiprintf_r+0x176>
 8014562:	9b04      	ldr	r3, [sp, #16]
 8014564:	eba0 000a 	sub.w	r0, r0, sl
 8014568:	2240      	movs	r2, #64	@ 0x40
 801456a:	4082      	lsls	r2, r0
 801456c:	4313      	orrs	r3, r2
 801456e:	3401      	adds	r4, #1
 8014570:	9304      	str	r3, [sp, #16]
 8014572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014576:	4829      	ldr	r0, [pc, #164]	@ (801461c <_vfiprintf_r+0x220>)
 8014578:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801457c:	2206      	movs	r2, #6
 801457e:	f7eb fdff 	bl	8000180 <memchr>
 8014582:	2800      	cmp	r0, #0
 8014584:	d03f      	beq.n	8014606 <_vfiprintf_r+0x20a>
 8014586:	4b26      	ldr	r3, [pc, #152]	@ (8014620 <_vfiprintf_r+0x224>)
 8014588:	bb1b      	cbnz	r3, 80145d2 <_vfiprintf_r+0x1d6>
 801458a:	9b03      	ldr	r3, [sp, #12]
 801458c:	3307      	adds	r3, #7
 801458e:	f023 0307 	bic.w	r3, r3, #7
 8014592:	3308      	adds	r3, #8
 8014594:	9303      	str	r3, [sp, #12]
 8014596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014598:	443b      	add	r3, r7
 801459a:	9309      	str	r3, [sp, #36]	@ 0x24
 801459c:	e76a      	b.n	8014474 <_vfiprintf_r+0x78>
 801459e:	fb0c 3202 	mla	r2, ip, r2, r3
 80145a2:	460c      	mov	r4, r1
 80145a4:	2001      	movs	r0, #1
 80145a6:	e7a8      	b.n	80144fa <_vfiprintf_r+0xfe>
 80145a8:	2300      	movs	r3, #0
 80145aa:	3401      	adds	r4, #1
 80145ac:	9305      	str	r3, [sp, #20]
 80145ae:	4619      	mov	r1, r3
 80145b0:	f04f 0c0a 	mov.w	ip, #10
 80145b4:	4620      	mov	r0, r4
 80145b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145ba:	3a30      	subs	r2, #48	@ 0x30
 80145bc:	2a09      	cmp	r2, #9
 80145be:	d903      	bls.n	80145c8 <_vfiprintf_r+0x1cc>
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d0c6      	beq.n	8014552 <_vfiprintf_r+0x156>
 80145c4:	9105      	str	r1, [sp, #20]
 80145c6:	e7c4      	b.n	8014552 <_vfiprintf_r+0x156>
 80145c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80145cc:	4604      	mov	r4, r0
 80145ce:	2301      	movs	r3, #1
 80145d0:	e7f0      	b.n	80145b4 <_vfiprintf_r+0x1b8>
 80145d2:	ab03      	add	r3, sp, #12
 80145d4:	9300      	str	r3, [sp, #0]
 80145d6:	462a      	mov	r2, r5
 80145d8:	4b12      	ldr	r3, [pc, #72]	@ (8014624 <_vfiprintf_r+0x228>)
 80145da:	a904      	add	r1, sp, #16
 80145dc:	4630      	mov	r0, r6
 80145de:	f7fe f9d1 	bl	8012984 <_printf_float>
 80145e2:	4607      	mov	r7, r0
 80145e4:	1c78      	adds	r0, r7, #1
 80145e6:	d1d6      	bne.n	8014596 <_vfiprintf_r+0x19a>
 80145e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80145ea:	07d9      	lsls	r1, r3, #31
 80145ec:	d405      	bmi.n	80145fa <_vfiprintf_r+0x1fe>
 80145ee:	89ab      	ldrh	r3, [r5, #12]
 80145f0:	059a      	lsls	r2, r3, #22
 80145f2:	d402      	bmi.n	80145fa <_vfiprintf_r+0x1fe>
 80145f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80145f6:	f7fe ff1f 	bl	8013438 <__retarget_lock_release_recursive>
 80145fa:	89ab      	ldrh	r3, [r5, #12]
 80145fc:	065b      	lsls	r3, r3, #25
 80145fe:	f53f af1f 	bmi.w	8014440 <_vfiprintf_r+0x44>
 8014602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014604:	e71e      	b.n	8014444 <_vfiprintf_r+0x48>
 8014606:	ab03      	add	r3, sp, #12
 8014608:	9300      	str	r3, [sp, #0]
 801460a:	462a      	mov	r2, r5
 801460c:	4b05      	ldr	r3, [pc, #20]	@ (8014624 <_vfiprintf_r+0x228>)
 801460e:	a904      	add	r1, sp, #16
 8014610:	4630      	mov	r0, r6
 8014612:	f7fe fc4f 	bl	8012eb4 <_printf_i>
 8014616:	e7e4      	b.n	80145e2 <_vfiprintf_r+0x1e6>
 8014618:	0801895d 	.word	0x0801895d
 801461c:	08018967 	.word	0x08018967
 8014620:	08012985 	.word	0x08012985
 8014624:	080143d7 	.word	0x080143d7
 8014628:	08018963 	.word	0x08018963

0801462c <malloc>:
 801462c:	4b02      	ldr	r3, [pc, #8]	@ (8014638 <malloc+0xc>)
 801462e:	4601      	mov	r1, r0
 8014630:	6818      	ldr	r0, [r3, #0]
 8014632:	f000 b825 	b.w	8014680 <_malloc_r>
 8014636:	bf00      	nop
 8014638:	200000a4 	.word	0x200000a4

0801463c <sbrk_aligned>:
 801463c:	b570      	push	{r4, r5, r6, lr}
 801463e:	4e0f      	ldr	r6, [pc, #60]	@ (801467c <sbrk_aligned+0x40>)
 8014640:	460c      	mov	r4, r1
 8014642:	6831      	ldr	r1, [r6, #0]
 8014644:	4605      	mov	r5, r0
 8014646:	b911      	cbnz	r1, 801464e <sbrk_aligned+0x12>
 8014648:	f000 feb6 	bl	80153b8 <_sbrk_r>
 801464c:	6030      	str	r0, [r6, #0]
 801464e:	4621      	mov	r1, r4
 8014650:	4628      	mov	r0, r5
 8014652:	f000 feb1 	bl	80153b8 <_sbrk_r>
 8014656:	1c43      	adds	r3, r0, #1
 8014658:	d103      	bne.n	8014662 <sbrk_aligned+0x26>
 801465a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801465e:	4620      	mov	r0, r4
 8014660:	bd70      	pop	{r4, r5, r6, pc}
 8014662:	1cc4      	adds	r4, r0, #3
 8014664:	f024 0403 	bic.w	r4, r4, #3
 8014668:	42a0      	cmp	r0, r4
 801466a:	d0f8      	beq.n	801465e <sbrk_aligned+0x22>
 801466c:	1a21      	subs	r1, r4, r0
 801466e:	4628      	mov	r0, r5
 8014670:	f000 fea2 	bl	80153b8 <_sbrk_r>
 8014674:	3001      	adds	r0, #1
 8014676:	d1f2      	bne.n	801465e <sbrk_aligned+0x22>
 8014678:	e7ef      	b.n	801465a <sbrk_aligned+0x1e>
 801467a:	bf00      	nop
 801467c:	20000820 	.word	0x20000820

08014680 <_malloc_r>:
 8014680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014684:	1ccd      	adds	r5, r1, #3
 8014686:	f025 0503 	bic.w	r5, r5, #3
 801468a:	3508      	adds	r5, #8
 801468c:	2d0c      	cmp	r5, #12
 801468e:	bf38      	it	cc
 8014690:	250c      	movcc	r5, #12
 8014692:	2d00      	cmp	r5, #0
 8014694:	4606      	mov	r6, r0
 8014696:	db01      	blt.n	801469c <_malloc_r+0x1c>
 8014698:	42a9      	cmp	r1, r5
 801469a:	d904      	bls.n	80146a6 <_malloc_r+0x26>
 801469c:	230c      	movs	r3, #12
 801469e:	6033      	str	r3, [r6, #0]
 80146a0:	2000      	movs	r0, #0
 80146a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801477c <_malloc_r+0xfc>
 80146aa:	f000 f915 	bl	80148d8 <__malloc_lock>
 80146ae:	f8d8 3000 	ldr.w	r3, [r8]
 80146b2:	461c      	mov	r4, r3
 80146b4:	bb44      	cbnz	r4, 8014708 <_malloc_r+0x88>
 80146b6:	4629      	mov	r1, r5
 80146b8:	4630      	mov	r0, r6
 80146ba:	f7ff ffbf 	bl	801463c <sbrk_aligned>
 80146be:	1c43      	adds	r3, r0, #1
 80146c0:	4604      	mov	r4, r0
 80146c2:	d158      	bne.n	8014776 <_malloc_r+0xf6>
 80146c4:	f8d8 4000 	ldr.w	r4, [r8]
 80146c8:	4627      	mov	r7, r4
 80146ca:	2f00      	cmp	r7, #0
 80146cc:	d143      	bne.n	8014756 <_malloc_r+0xd6>
 80146ce:	2c00      	cmp	r4, #0
 80146d0:	d04b      	beq.n	801476a <_malloc_r+0xea>
 80146d2:	6823      	ldr	r3, [r4, #0]
 80146d4:	4639      	mov	r1, r7
 80146d6:	4630      	mov	r0, r6
 80146d8:	eb04 0903 	add.w	r9, r4, r3
 80146dc:	f000 fe6c 	bl	80153b8 <_sbrk_r>
 80146e0:	4581      	cmp	r9, r0
 80146e2:	d142      	bne.n	801476a <_malloc_r+0xea>
 80146e4:	6821      	ldr	r1, [r4, #0]
 80146e6:	1a6d      	subs	r5, r5, r1
 80146e8:	4629      	mov	r1, r5
 80146ea:	4630      	mov	r0, r6
 80146ec:	f7ff ffa6 	bl	801463c <sbrk_aligned>
 80146f0:	3001      	adds	r0, #1
 80146f2:	d03a      	beq.n	801476a <_malloc_r+0xea>
 80146f4:	6823      	ldr	r3, [r4, #0]
 80146f6:	442b      	add	r3, r5
 80146f8:	6023      	str	r3, [r4, #0]
 80146fa:	f8d8 3000 	ldr.w	r3, [r8]
 80146fe:	685a      	ldr	r2, [r3, #4]
 8014700:	bb62      	cbnz	r2, 801475c <_malloc_r+0xdc>
 8014702:	f8c8 7000 	str.w	r7, [r8]
 8014706:	e00f      	b.n	8014728 <_malloc_r+0xa8>
 8014708:	6822      	ldr	r2, [r4, #0]
 801470a:	1b52      	subs	r2, r2, r5
 801470c:	d420      	bmi.n	8014750 <_malloc_r+0xd0>
 801470e:	2a0b      	cmp	r2, #11
 8014710:	d917      	bls.n	8014742 <_malloc_r+0xc2>
 8014712:	1961      	adds	r1, r4, r5
 8014714:	42a3      	cmp	r3, r4
 8014716:	6025      	str	r5, [r4, #0]
 8014718:	bf18      	it	ne
 801471a:	6059      	strne	r1, [r3, #4]
 801471c:	6863      	ldr	r3, [r4, #4]
 801471e:	bf08      	it	eq
 8014720:	f8c8 1000 	streq.w	r1, [r8]
 8014724:	5162      	str	r2, [r4, r5]
 8014726:	604b      	str	r3, [r1, #4]
 8014728:	4630      	mov	r0, r6
 801472a:	f000 f8db 	bl	80148e4 <__malloc_unlock>
 801472e:	f104 000b 	add.w	r0, r4, #11
 8014732:	1d23      	adds	r3, r4, #4
 8014734:	f020 0007 	bic.w	r0, r0, #7
 8014738:	1ac2      	subs	r2, r0, r3
 801473a:	bf1c      	itt	ne
 801473c:	1a1b      	subne	r3, r3, r0
 801473e:	50a3      	strne	r3, [r4, r2]
 8014740:	e7af      	b.n	80146a2 <_malloc_r+0x22>
 8014742:	6862      	ldr	r2, [r4, #4]
 8014744:	42a3      	cmp	r3, r4
 8014746:	bf0c      	ite	eq
 8014748:	f8c8 2000 	streq.w	r2, [r8]
 801474c:	605a      	strne	r2, [r3, #4]
 801474e:	e7eb      	b.n	8014728 <_malloc_r+0xa8>
 8014750:	4623      	mov	r3, r4
 8014752:	6864      	ldr	r4, [r4, #4]
 8014754:	e7ae      	b.n	80146b4 <_malloc_r+0x34>
 8014756:	463c      	mov	r4, r7
 8014758:	687f      	ldr	r7, [r7, #4]
 801475a:	e7b6      	b.n	80146ca <_malloc_r+0x4a>
 801475c:	461a      	mov	r2, r3
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	42a3      	cmp	r3, r4
 8014762:	d1fb      	bne.n	801475c <_malloc_r+0xdc>
 8014764:	2300      	movs	r3, #0
 8014766:	6053      	str	r3, [r2, #4]
 8014768:	e7de      	b.n	8014728 <_malloc_r+0xa8>
 801476a:	230c      	movs	r3, #12
 801476c:	6033      	str	r3, [r6, #0]
 801476e:	4630      	mov	r0, r6
 8014770:	f000 f8b8 	bl	80148e4 <__malloc_unlock>
 8014774:	e794      	b.n	80146a0 <_malloc_r+0x20>
 8014776:	6005      	str	r5, [r0, #0]
 8014778:	e7d6      	b.n	8014728 <_malloc_r+0xa8>
 801477a:	bf00      	nop
 801477c:	20000824 	.word	0x20000824

08014780 <__sflush_r>:
 8014780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014788:	0716      	lsls	r6, r2, #28
 801478a:	4605      	mov	r5, r0
 801478c:	460c      	mov	r4, r1
 801478e:	d454      	bmi.n	801483a <__sflush_r+0xba>
 8014790:	684b      	ldr	r3, [r1, #4]
 8014792:	2b00      	cmp	r3, #0
 8014794:	dc02      	bgt.n	801479c <__sflush_r+0x1c>
 8014796:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014798:	2b00      	cmp	r3, #0
 801479a:	dd48      	ble.n	801482e <__sflush_r+0xae>
 801479c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801479e:	2e00      	cmp	r6, #0
 80147a0:	d045      	beq.n	801482e <__sflush_r+0xae>
 80147a2:	2300      	movs	r3, #0
 80147a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80147a8:	682f      	ldr	r7, [r5, #0]
 80147aa:	6a21      	ldr	r1, [r4, #32]
 80147ac:	602b      	str	r3, [r5, #0]
 80147ae:	d030      	beq.n	8014812 <__sflush_r+0x92>
 80147b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80147b2:	89a3      	ldrh	r3, [r4, #12]
 80147b4:	0759      	lsls	r1, r3, #29
 80147b6:	d505      	bpl.n	80147c4 <__sflush_r+0x44>
 80147b8:	6863      	ldr	r3, [r4, #4]
 80147ba:	1ad2      	subs	r2, r2, r3
 80147bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80147be:	b10b      	cbz	r3, 80147c4 <__sflush_r+0x44>
 80147c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80147c2:	1ad2      	subs	r2, r2, r3
 80147c4:	2300      	movs	r3, #0
 80147c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80147c8:	6a21      	ldr	r1, [r4, #32]
 80147ca:	4628      	mov	r0, r5
 80147cc:	47b0      	blx	r6
 80147ce:	1c43      	adds	r3, r0, #1
 80147d0:	89a3      	ldrh	r3, [r4, #12]
 80147d2:	d106      	bne.n	80147e2 <__sflush_r+0x62>
 80147d4:	6829      	ldr	r1, [r5, #0]
 80147d6:	291d      	cmp	r1, #29
 80147d8:	d82b      	bhi.n	8014832 <__sflush_r+0xb2>
 80147da:	4a2a      	ldr	r2, [pc, #168]	@ (8014884 <__sflush_r+0x104>)
 80147dc:	40ca      	lsrs	r2, r1
 80147de:	07d6      	lsls	r6, r2, #31
 80147e0:	d527      	bpl.n	8014832 <__sflush_r+0xb2>
 80147e2:	2200      	movs	r2, #0
 80147e4:	6062      	str	r2, [r4, #4]
 80147e6:	04d9      	lsls	r1, r3, #19
 80147e8:	6922      	ldr	r2, [r4, #16]
 80147ea:	6022      	str	r2, [r4, #0]
 80147ec:	d504      	bpl.n	80147f8 <__sflush_r+0x78>
 80147ee:	1c42      	adds	r2, r0, #1
 80147f0:	d101      	bne.n	80147f6 <__sflush_r+0x76>
 80147f2:	682b      	ldr	r3, [r5, #0]
 80147f4:	b903      	cbnz	r3, 80147f8 <__sflush_r+0x78>
 80147f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80147f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80147fa:	602f      	str	r7, [r5, #0]
 80147fc:	b1b9      	cbz	r1, 801482e <__sflush_r+0xae>
 80147fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014802:	4299      	cmp	r1, r3
 8014804:	d002      	beq.n	801480c <__sflush_r+0x8c>
 8014806:	4628      	mov	r0, r5
 8014808:	f000 fe5a 	bl	80154c0 <_free_r>
 801480c:	2300      	movs	r3, #0
 801480e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014810:	e00d      	b.n	801482e <__sflush_r+0xae>
 8014812:	2301      	movs	r3, #1
 8014814:	4628      	mov	r0, r5
 8014816:	47b0      	blx	r6
 8014818:	4602      	mov	r2, r0
 801481a:	1c50      	adds	r0, r2, #1
 801481c:	d1c9      	bne.n	80147b2 <__sflush_r+0x32>
 801481e:	682b      	ldr	r3, [r5, #0]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d0c6      	beq.n	80147b2 <__sflush_r+0x32>
 8014824:	2b1d      	cmp	r3, #29
 8014826:	d001      	beq.n	801482c <__sflush_r+0xac>
 8014828:	2b16      	cmp	r3, #22
 801482a:	d11e      	bne.n	801486a <__sflush_r+0xea>
 801482c:	602f      	str	r7, [r5, #0]
 801482e:	2000      	movs	r0, #0
 8014830:	e022      	b.n	8014878 <__sflush_r+0xf8>
 8014832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014836:	b21b      	sxth	r3, r3
 8014838:	e01b      	b.n	8014872 <__sflush_r+0xf2>
 801483a:	690f      	ldr	r7, [r1, #16]
 801483c:	2f00      	cmp	r7, #0
 801483e:	d0f6      	beq.n	801482e <__sflush_r+0xae>
 8014840:	0793      	lsls	r3, r2, #30
 8014842:	680e      	ldr	r6, [r1, #0]
 8014844:	bf08      	it	eq
 8014846:	694b      	ldreq	r3, [r1, #20]
 8014848:	600f      	str	r7, [r1, #0]
 801484a:	bf18      	it	ne
 801484c:	2300      	movne	r3, #0
 801484e:	eba6 0807 	sub.w	r8, r6, r7
 8014852:	608b      	str	r3, [r1, #8]
 8014854:	f1b8 0f00 	cmp.w	r8, #0
 8014858:	dde9      	ble.n	801482e <__sflush_r+0xae>
 801485a:	6a21      	ldr	r1, [r4, #32]
 801485c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801485e:	4643      	mov	r3, r8
 8014860:	463a      	mov	r2, r7
 8014862:	4628      	mov	r0, r5
 8014864:	47b0      	blx	r6
 8014866:	2800      	cmp	r0, #0
 8014868:	dc08      	bgt.n	801487c <__sflush_r+0xfc>
 801486a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801486e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014872:	81a3      	strh	r3, [r4, #12]
 8014874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801487c:	4407      	add	r7, r0
 801487e:	eba8 0800 	sub.w	r8, r8, r0
 8014882:	e7e7      	b.n	8014854 <__sflush_r+0xd4>
 8014884:	20400001 	.word	0x20400001

08014888 <_fflush_r>:
 8014888:	b538      	push	{r3, r4, r5, lr}
 801488a:	690b      	ldr	r3, [r1, #16]
 801488c:	4605      	mov	r5, r0
 801488e:	460c      	mov	r4, r1
 8014890:	b913      	cbnz	r3, 8014898 <_fflush_r+0x10>
 8014892:	2500      	movs	r5, #0
 8014894:	4628      	mov	r0, r5
 8014896:	bd38      	pop	{r3, r4, r5, pc}
 8014898:	b118      	cbz	r0, 80148a2 <_fflush_r+0x1a>
 801489a:	6a03      	ldr	r3, [r0, #32]
 801489c:	b90b      	cbnz	r3, 80148a2 <_fflush_r+0x1a>
 801489e:	f7fe fce9 	bl	8013274 <__sinit>
 80148a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d0f3      	beq.n	8014892 <_fflush_r+0xa>
 80148aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80148ac:	07d0      	lsls	r0, r2, #31
 80148ae:	d404      	bmi.n	80148ba <_fflush_r+0x32>
 80148b0:	0599      	lsls	r1, r3, #22
 80148b2:	d402      	bmi.n	80148ba <_fflush_r+0x32>
 80148b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80148b6:	f7fe fdbe 	bl	8013436 <__retarget_lock_acquire_recursive>
 80148ba:	4628      	mov	r0, r5
 80148bc:	4621      	mov	r1, r4
 80148be:	f7ff ff5f 	bl	8014780 <__sflush_r>
 80148c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80148c4:	07da      	lsls	r2, r3, #31
 80148c6:	4605      	mov	r5, r0
 80148c8:	d4e4      	bmi.n	8014894 <_fflush_r+0xc>
 80148ca:	89a3      	ldrh	r3, [r4, #12]
 80148cc:	059b      	lsls	r3, r3, #22
 80148ce:	d4e1      	bmi.n	8014894 <_fflush_r+0xc>
 80148d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80148d2:	f7fe fdb1 	bl	8013438 <__retarget_lock_release_recursive>
 80148d6:	e7dd      	b.n	8014894 <_fflush_r+0xc>

080148d8 <__malloc_lock>:
 80148d8:	4801      	ldr	r0, [pc, #4]	@ (80148e0 <__malloc_lock+0x8>)
 80148da:	f7fe bdac 	b.w	8013436 <__retarget_lock_acquire_recursive>
 80148de:	bf00      	nop
 80148e0:	2000081c 	.word	0x2000081c

080148e4 <__malloc_unlock>:
 80148e4:	4801      	ldr	r0, [pc, #4]	@ (80148ec <__malloc_unlock+0x8>)
 80148e6:	f7fe bda7 	b.w	8013438 <__retarget_lock_release_recursive>
 80148ea:	bf00      	nop
 80148ec:	2000081c 	.word	0x2000081c

080148f0 <_Balloc>:
 80148f0:	b570      	push	{r4, r5, r6, lr}
 80148f2:	69c6      	ldr	r6, [r0, #28]
 80148f4:	4604      	mov	r4, r0
 80148f6:	460d      	mov	r5, r1
 80148f8:	b976      	cbnz	r6, 8014918 <_Balloc+0x28>
 80148fa:	2010      	movs	r0, #16
 80148fc:	f7ff fe96 	bl	801462c <malloc>
 8014900:	4602      	mov	r2, r0
 8014902:	61e0      	str	r0, [r4, #28]
 8014904:	b920      	cbnz	r0, 8014910 <_Balloc+0x20>
 8014906:	4b18      	ldr	r3, [pc, #96]	@ (8014968 <_Balloc+0x78>)
 8014908:	4818      	ldr	r0, [pc, #96]	@ (801496c <_Balloc+0x7c>)
 801490a:	216b      	movs	r1, #107	@ 0x6b
 801490c:	f000 fda6 	bl	801545c <__assert_func>
 8014910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014914:	6006      	str	r6, [r0, #0]
 8014916:	60c6      	str	r6, [r0, #12]
 8014918:	69e6      	ldr	r6, [r4, #28]
 801491a:	68f3      	ldr	r3, [r6, #12]
 801491c:	b183      	cbz	r3, 8014940 <_Balloc+0x50>
 801491e:	69e3      	ldr	r3, [r4, #28]
 8014920:	68db      	ldr	r3, [r3, #12]
 8014922:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014926:	b9b8      	cbnz	r0, 8014958 <_Balloc+0x68>
 8014928:	2101      	movs	r1, #1
 801492a:	fa01 f605 	lsl.w	r6, r1, r5
 801492e:	1d72      	adds	r2, r6, #5
 8014930:	0092      	lsls	r2, r2, #2
 8014932:	4620      	mov	r0, r4
 8014934:	f000 fdb0 	bl	8015498 <_calloc_r>
 8014938:	b160      	cbz	r0, 8014954 <_Balloc+0x64>
 801493a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801493e:	e00e      	b.n	801495e <_Balloc+0x6e>
 8014940:	2221      	movs	r2, #33	@ 0x21
 8014942:	2104      	movs	r1, #4
 8014944:	4620      	mov	r0, r4
 8014946:	f000 fda7 	bl	8015498 <_calloc_r>
 801494a:	69e3      	ldr	r3, [r4, #28]
 801494c:	60f0      	str	r0, [r6, #12]
 801494e:	68db      	ldr	r3, [r3, #12]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d1e4      	bne.n	801491e <_Balloc+0x2e>
 8014954:	2000      	movs	r0, #0
 8014956:	bd70      	pop	{r4, r5, r6, pc}
 8014958:	6802      	ldr	r2, [r0, #0]
 801495a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801495e:	2300      	movs	r3, #0
 8014960:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014964:	e7f7      	b.n	8014956 <_Balloc+0x66>
 8014966:	bf00      	nop
 8014968:	080188dd 	.word	0x080188dd
 801496c:	0801896e 	.word	0x0801896e

08014970 <_Bfree>:
 8014970:	b570      	push	{r4, r5, r6, lr}
 8014972:	69c6      	ldr	r6, [r0, #28]
 8014974:	4605      	mov	r5, r0
 8014976:	460c      	mov	r4, r1
 8014978:	b976      	cbnz	r6, 8014998 <_Bfree+0x28>
 801497a:	2010      	movs	r0, #16
 801497c:	f7ff fe56 	bl	801462c <malloc>
 8014980:	4602      	mov	r2, r0
 8014982:	61e8      	str	r0, [r5, #28]
 8014984:	b920      	cbnz	r0, 8014990 <_Bfree+0x20>
 8014986:	4b09      	ldr	r3, [pc, #36]	@ (80149ac <_Bfree+0x3c>)
 8014988:	4809      	ldr	r0, [pc, #36]	@ (80149b0 <_Bfree+0x40>)
 801498a:	218f      	movs	r1, #143	@ 0x8f
 801498c:	f000 fd66 	bl	801545c <__assert_func>
 8014990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014994:	6006      	str	r6, [r0, #0]
 8014996:	60c6      	str	r6, [r0, #12]
 8014998:	b13c      	cbz	r4, 80149aa <_Bfree+0x3a>
 801499a:	69eb      	ldr	r3, [r5, #28]
 801499c:	6862      	ldr	r2, [r4, #4]
 801499e:	68db      	ldr	r3, [r3, #12]
 80149a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80149a4:	6021      	str	r1, [r4, #0]
 80149a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80149aa:	bd70      	pop	{r4, r5, r6, pc}
 80149ac:	080188dd 	.word	0x080188dd
 80149b0:	0801896e 	.word	0x0801896e

080149b4 <__multadd>:
 80149b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149b8:	690d      	ldr	r5, [r1, #16]
 80149ba:	4607      	mov	r7, r0
 80149bc:	460c      	mov	r4, r1
 80149be:	461e      	mov	r6, r3
 80149c0:	f101 0c14 	add.w	ip, r1, #20
 80149c4:	2000      	movs	r0, #0
 80149c6:	f8dc 3000 	ldr.w	r3, [ip]
 80149ca:	b299      	uxth	r1, r3
 80149cc:	fb02 6101 	mla	r1, r2, r1, r6
 80149d0:	0c1e      	lsrs	r6, r3, #16
 80149d2:	0c0b      	lsrs	r3, r1, #16
 80149d4:	fb02 3306 	mla	r3, r2, r6, r3
 80149d8:	b289      	uxth	r1, r1
 80149da:	3001      	adds	r0, #1
 80149dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80149e0:	4285      	cmp	r5, r0
 80149e2:	f84c 1b04 	str.w	r1, [ip], #4
 80149e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80149ea:	dcec      	bgt.n	80149c6 <__multadd+0x12>
 80149ec:	b30e      	cbz	r6, 8014a32 <__multadd+0x7e>
 80149ee:	68a3      	ldr	r3, [r4, #8]
 80149f0:	42ab      	cmp	r3, r5
 80149f2:	dc19      	bgt.n	8014a28 <__multadd+0x74>
 80149f4:	6861      	ldr	r1, [r4, #4]
 80149f6:	4638      	mov	r0, r7
 80149f8:	3101      	adds	r1, #1
 80149fa:	f7ff ff79 	bl	80148f0 <_Balloc>
 80149fe:	4680      	mov	r8, r0
 8014a00:	b928      	cbnz	r0, 8014a0e <__multadd+0x5a>
 8014a02:	4602      	mov	r2, r0
 8014a04:	4b0c      	ldr	r3, [pc, #48]	@ (8014a38 <__multadd+0x84>)
 8014a06:	480d      	ldr	r0, [pc, #52]	@ (8014a3c <__multadd+0x88>)
 8014a08:	21ba      	movs	r1, #186	@ 0xba
 8014a0a:	f000 fd27 	bl	801545c <__assert_func>
 8014a0e:	6922      	ldr	r2, [r4, #16]
 8014a10:	3202      	adds	r2, #2
 8014a12:	f104 010c 	add.w	r1, r4, #12
 8014a16:	0092      	lsls	r2, r2, #2
 8014a18:	300c      	adds	r0, #12
 8014a1a:	f000 fd11 	bl	8015440 <memcpy>
 8014a1e:	4621      	mov	r1, r4
 8014a20:	4638      	mov	r0, r7
 8014a22:	f7ff ffa5 	bl	8014970 <_Bfree>
 8014a26:	4644      	mov	r4, r8
 8014a28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014a2c:	3501      	adds	r5, #1
 8014a2e:	615e      	str	r6, [r3, #20]
 8014a30:	6125      	str	r5, [r4, #16]
 8014a32:	4620      	mov	r0, r4
 8014a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a38:	0801894c 	.word	0x0801894c
 8014a3c:	0801896e 	.word	0x0801896e

08014a40 <__hi0bits>:
 8014a40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014a44:	4603      	mov	r3, r0
 8014a46:	bf36      	itet	cc
 8014a48:	0403      	lslcc	r3, r0, #16
 8014a4a:	2000      	movcs	r0, #0
 8014a4c:	2010      	movcc	r0, #16
 8014a4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014a52:	bf3c      	itt	cc
 8014a54:	021b      	lslcc	r3, r3, #8
 8014a56:	3008      	addcc	r0, #8
 8014a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014a5c:	bf3c      	itt	cc
 8014a5e:	011b      	lslcc	r3, r3, #4
 8014a60:	3004      	addcc	r0, #4
 8014a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a66:	bf3c      	itt	cc
 8014a68:	009b      	lslcc	r3, r3, #2
 8014a6a:	3002      	addcc	r0, #2
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	db05      	blt.n	8014a7c <__hi0bits+0x3c>
 8014a70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014a74:	f100 0001 	add.w	r0, r0, #1
 8014a78:	bf08      	it	eq
 8014a7a:	2020      	moveq	r0, #32
 8014a7c:	4770      	bx	lr

08014a7e <__lo0bits>:
 8014a7e:	6803      	ldr	r3, [r0, #0]
 8014a80:	4602      	mov	r2, r0
 8014a82:	f013 0007 	ands.w	r0, r3, #7
 8014a86:	d00b      	beq.n	8014aa0 <__lo0bits+0x22>
 8014a88:	07d9      	lsls	r1, r3, #31
 8014a8a:	d421      	bmi.n	8014ad0 <__lo0bits+0x52>
 8014a8c:	0798      	lsls	r0, r3, #30
 8014a8e:	bf49      	itett	mi
 8014a90:	085b      	lsrmi	r3, r3, #1
 8014a92:	089b      	lsrpl	r3, r3, #2
 8014a94:	2001      	movmi	r0, #1
 8014a96:	6013      	strmi	r3, [r2, #0]
 8014a98:	bf5c      	itt	pl
 8014a9a:	6013      	strpl	r3, [r2, #0]
 8014a9c:	2002      	movpl	r0, #2
 8014a9e:	4770      	bx	lr
 8014aa0:	b299      	uxth	r1, r3
 8014aa2:	b909      	cbnz	r1, 8014aa8 <__lo0bits+0x2a>
 8014aa4:	0c1b      	lsrs	r3, r3, #16
 8014aa6:	2010      	movs	r0, #16
 8014aa8:	b2d9      	uxtb	r1, r3
 8014aaa:	b909      	cbnz	r1, 8014ab0 <__lo0bits+0x32>
 8014aac:	3008      	adds	r0, #8
 8014aae:	0a1b      	lsrs	r3, r3, #8
 8014ab0:	0719      	lsls	r1, r3, #28
 8014ab2:	bf04      	itt	eq
 8014ab4:	091b      	lsreq	r3, r3, #4
 8014ab6:	3004      	addeq	r0, #4
 8014ab8:	0799      	lsls	r1, r3, #30
 8014aba:	bf04      	itt	eq
 8014abc:	089b      	lsreq	r3, r3, #2
 8014abe:	3002      	addeq	r0, #2
 8014ac0:	07d9      	lsls	r1, r3, #31
 8014ac2:	d403      	bmi.n	8014acc <__lo0bits+0x4e>
 8014ac4:	085b      	lsrs	r3, r3, #1
 8014ac6:	f100 0001 	add.w	r0, r0, #1
 8014aca:	d003      	beq.n	8014ad4 <__lo0bits+0x56>
 8014acc:	6013      	str	r3, [r2, #0]
 8014ace:	4770      	bx	lr
 8014ad0:	2000      	movs	r0, #0
 8014ad2:	4770      	bx	lr
 8014ad4:	2020      	movs	r0, #32
 8014ad6:	4770      	bx	lr

08014ad8 <__i2b>:
 8014ad8:	b510      	push	{r4, lr}
 8014ada:	460c      	mov	r4, r1
 8014adc:	2101      	movs	r1, #1
 8014ade:	f7ff ff07 	bl	80148f0 <_Balloc>
 8014ae2:	4602      	mov	r2, r0
 8014ae4:	b928      	cbnz	r0, 8014af2 <__i2b+0x1a>
 8014ae6:	4b05      	ldr	r3, [pc, #20]	@ (8014afc <__i2b+0x24>)
 8014ae8:	4805      	ldr	r0, [pc, #20]	@ (8014b00 <__i2b+0x28>)
 8014aea:	f240 1145 	movw	r1, #325	@ 0x145
 8014aee:	f000 fcb5 	bl	801545c <__assert_func>
 8014af2:	2301      	movs	r3, #1
 8014af4:	6144      	str	r4, [r0, #20]
 8014af6:	6103      	str	r3, [r0, #16]
 8014af8:	bd10      	pop	{r4, pc}
 8014afa:	bf00      	nop
 8014afc:	0801894c 	.word	0x0801894c
 8014b00:	0801896e 	.word	0x0801896e

08014b04 <__multiply>:
 8014b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b08:	4617      	mov	r7, r2
 8014b0a:	690a      	ldr	r2, [r1, #16]
 8014b0c:	693b      	ldr	r3, [r7, #16]
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	bfa8      	it	ge
 8014b12:	463b      	movge	r3, r7
 8014b14:	4689      	mov	r9, r1
 8014b16:	bfa4      	itt	ge
 8014b18:	460f      	movge	r7, r1
 8014b1a:	4699      	movge	r9, r3
 8014b1c:	693d      	ldr	r5, [r7, #16]
 8014b1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	6879      	ldr	r1, [r7, #4]
 8014b26:	eb05 060a 	add.w	r6, r5, sl
 8014b2a:	42b3      	cmp	r3, r6
 8014b2c:	b085      	sub	sp, #20
 8014b2e:	bfb8      	it	lt
 8014b30:	3101      	addlt	r1, #1
 8014b32:	f7ff fedd 	bl	80148f0 <_Balloc>
 8014b36:	b930      	cbnz	r0, 8014b46 <__multiply+0x42>
 8014b38:	4602      	mov	r2, r0
 8014b3a:	4b41      	ldr	r3, [pc, #260]	@ (8014c40 <__multiply+0x13c>)
 8014b3c:	4841      	ldr	r0, [pc, #260]	@ (8014c44 <__multiply+0x140>)
 8014b3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014b42:	f000 fc8b 	bl	801545c <__assert_func>
 8014b46:	f100 0414 	add.w	r4, r0, #20
 8014b4a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014b4e:	4623      	mov	r3, r4
 8014b50:	2200      	movs	r2, #0
 8014b52:	4573      	cmp	r3, lr
 8014b54:	d320      	bcc.n	8014b98 <__multiply+0x94>
 8014b56:	f107 0814 	add.w	r8, r7, #20
 8014b5a:	f109 0114 	add.w	r1, r9, #20
 8014b5e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8014b62:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014b66:	9302      	str	r3, [sp, #8]
 8014b68:	1beb      	subs	r3, r5, r7
 8014b6a:	3b15      	subs	r3, #21
 8014b6c:	f023 0303 	bic.w	r3, r3, #3
 8014b70:	3304      	adds	r3, #4
 8014b72:	3715      	adds	r7, #21
 8014b74:	42bd      	cmp	r5, r7
 8014b76:	bf38      	it	cc
 8014b78:	2304      	movcc	r3, #4
 8014b7a:	9301      	str	r3, [sp, #4]
 8014b7c:	9b02      	ldr	r3, [sp, #8]
 8014b7e:	9103      	str	r1, [sp, #12]
 8014b80:	428b      	cmp	r3, r1
 8014b82:	d80c      	bhi.n	8014b9e <__multiply+0x9a>
 8014b84:	2e00      	cmp	r6, #0
 8014b86:	dd03      	ble.n	8014b90 <__multiply+0x8c>
 8014b88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d055      	beq.n	8014c3c <__multiply+0x138>
 8014b90:	6106      	str	r6, [r0, #16]
 8014b92:	b005      	add	sp, #20
 8014b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b98:	f843 2b04 	str.w	r2, [r3], #4
 8014b9c:	e7d9      	b.n	8014b52 <__multiply+0x4e>
 8014b9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8014ba2:	f1ba 0f00 	cmp.w	sl, #0
 8014ba6:	d01f      	beq.n	8014be8 <__multiply+0xe4>
 8014ba8:	46c4      	mov	ip, r8
 8014baa:	46a1      	mov	r9, r4
 8014bac:	2700      	movs	r7, #0
 8014bae:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014bb2:	f8d9 3000 	ldr.w	r3, [r9]
 8014bb6:	fa1f fb82 	uxth.w	fp, r2
 8014bba:	b29b      	uxth	r3, r3
 8014bbc:	fb0a 330b 	mla	r3, sl, fp, r3
 8014bc0:	443b      	add	r3, r7
 8014bc2:	f8d9 7000 	ldr.w	r7, [r9]
 8014bc6:	0c12      	lsrs	r2, r2, #16
 8014bc8:	0c3f      	lsrs	r7, r7, #16
 8014bca:	fb0a 7202 	mla	r2, sl, r2, r7
 8014bce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014bd2:	b29b      	uxth	r3, r3
 8014bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014bd8:	4565      	cmp	r5, ip
 8014bda:	f849 3b04 	str.w	r3, [r9], #4
 8014bde:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8014be2:	d8e4      	bhi.n	8014bae <__multiply+0xaa>
 8014be4:	9b01      	ldr	r3, [sp, #4]
 8014be6:	50e7      	str	r7, [r4, r3]
 8014be8:	9b03      	ldr	r3, [sp, #12]
 8014bea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014bee:	3104      	adds	r1, #4
 8014bf0:	f1b9 0f00 	cmp.w	r9, #0
 8014bf4:	d020      	beq.n	8014c38 <__multiply+0x134>
 8014bf6:	6823      	ldr	r3, [r4, #0]
 8014bf8:	4647      	mov	r7, r8
 8014bfa:	46a4      	mov	ip, r4
 8014bfc:	f04f 0a00 	mov.w	sl, #0
 8014c00:	f8b7 b000 	ldrh.w	fp, [r7]
 8014c04:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014c08:	fb09 220b 	mla	r2, r9, fp, r2
 8014c0c:	4452      	add	r2, sl
 8014c0e:	b29b      	uxth	r3, r3
 8014c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c14:	f84c 3b04 	str.w	r3, [ip], #4
 8014c18:	f857 3b04 	ldr.w	r3, [r7], #4
 8014c1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c20:	f8bc 3000 	ldrh.w	r3, [ip]
 8014c24:	fb09 330a 	mla	r3, r9, sl, r3
 8014c28:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014c2c:	42bd      	cmp	r5, r7
 8014c2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c32:	d8e5      	bhi.n	8014c00 <__multiply+0xfc>
 8014c34:	9a01      	ldr	r2, [sp, #4]
 8014c36:	50a3      	str	r3, [r4, r2]
 8014c38:	3404      	adds	r4, #4
 8014c3a:	e79f      	b.n	8014b7c <__multiply+0x78>
 8014c3c:	3e01      	subs	r6, #1
 8014c3e:	e7a1      	b.n	8014b84 <__multiply+0x80>
 8014c40:	0801894c 	.word	0x0801894c
 8014c44:	0801896e 	.word	0x0801896e

08014c48 <__pow5mult>:
 8014c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c4c:	4615      	mov	r5, r2
 8014c4e:	f012 0203 	ands.w	r2, r2, #3
 8014c52:	4607      	mov	r7, r0
 8014c54:	460e      	mov	r6, r1
 8014c56:	d007      	beq.n	8014c68 <__pow5mult+0x20>
 8014c58:	4c25      	ldr	r4, [pc, #148]	@ (8014cf0 <__pow5mult+0xa8>)
 8014c5a:	3a01      	subs	r2, #1
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c62:	f7ff fea7 	bl	80149b4 <__multadd>
 8014c66:	4606      	mov	r6, r0
 8014c68:	10ad      	asrs	r5, r5, #2
 8014c6a:	d03d      	beq.n	8014ce8 <__pow5mult+0xa0>
 8014c6c:	69fc      	ldr	r4, [r7, #28]
 8014c6e:	b97c      	cbnz	r4, 8014c90 <__pow5mult+0x48>
 8014c70:	2010      	movs	r0, #16
 8014c72:	f7ff fcdb 	bl	801462c <malloc>
 8014c76:	4602      	mov	r2, r0
 8014c78:	61f8      	str	r0, [r7, #28]
 8014c7a:	b928      	cbnz	r0, 8014c88 <__pow5mult+0x40>
 8014c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8014cf4 <__pow5mult+0xac>)
 8014c7e:	481e      	ldr	r0, [pc, #120]	@ (8014cf8 <__pow5mult+0xb0>)
 8014c80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014c84:	f000 fbea 	bl	801545c <__assert_func>
 8014c88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c8c:	6004      	str	r4, [r0, #0]
 8014c8e:	60c4      	str	r4, [r0, #12]
 8014c90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014c94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014c98:	b94c      	cbnz	r4, 8014cae <__pow5mult+0x66>
 8014c9a:	f240 2171 	movw	r1, #625	@ 0x271
 8014c9e:	4638      	mov	r0, r7
 8014ca0:	f7ff ff1a 	bl	8014ad8 <__i2b>
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	f8c8 0008 	str.w	r0, [r8, #8]
 8014caa:	4604      	mov	r4, r0
 8014cac:	6003      	str	r3, [r0, #0]
 8014cae:	f04f 0900 	mov.w	r9, #0
 8014cb2:	07eb      	lsls	r3, r5, #31
 8014cb4:	d50a      	bpl.n	8014ccc <__pow5mult+0x84>
 8014cb6:	4631      	mov	r1, r6
 8014cb8:	4622      	mov	r2, r4
 8014cba:	4638      	mov	r0, r7
 8014cbc:	f7ff ff22 	bl	8014b04 <__multiply>
 8014cc0:	4631      	mov	r1, r6
 8014cc2:	4680      	mov	r8, r0
 8014cc4:	4638      	mov	r0, r7
 8014cc6:	f7ff fe53 	bl	8014970 <_Bfree>
 8014cca:	4646      	mov	r6, r8
 8014ccc:	106d      	asrs	r5, r5, #1
 8014cce:	d00b      	beq.n	8014ce8 <__pow5mult+0xa0>
 8014cd0:	6820      	ldr	r0, [r4, #0]
 8014cd2:	b938      	cbnz	r0, 8014ce4 <__pow5mult+0x9c>
 8014cd4:	4622      	mov	r2, r4
 8014cd6:	4621      	mov	r1, r4
 8014cd8:	4638      	mov	r0, r7
 8014cda:	f7ff ff13 	bl	8014b04 <__multiply>
 8014cde:	6020      	str	r0, [r4, #0]
 8014ce0:	f8c0 9000 	str.w	r9, [r0]
 8014ce4:	4604      	mov	r4, r0
 8014ce6:	e7e4      	b.n	8014cb2 <__pow5mult+0x6a>
 8014ce8:	4630      	mov	r0, r6
 8014cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cee:	bf00      	nop
 8014cf0:	08018a10 	.word	0x08018a10
 8014cf4:	080188dd 	.word	0x080188dd
 8014cf8:	0801896e 	.word	0x0801896e

08014cfc <__lshift>:
 8014cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d00:	460c      	mov	r4, r1
 8014d02:	6849      	ldr	r1, [r1, #4]
 8014d04:	6923      	ldr	r3, [r4, #16]
 8014d06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014d0a:	68a3      	ldr	r3, [r4, #8]
 8014d0c:	4607      	mov	r7, r0
 8014d0e:	4691      	mov	r9, r2
 8014d10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d14:	f108 0601 	add.w	r6, r8, #1
 8014d18:	42b3      	cmp	r3, r6
 8014d1a:	db0b      	blt.n	8014d34 <__lshift+0x38>
 8014d1c:	4638      	mov	r0, r7
 8014d1e:	f7ff fde7 	bl	80148f0 <_Balloc>
 8014d22:	4605      	mov	r5, r0
 8014d24:	b948      	cbnz	r0, 8014d3a <__lshift+0x3e>
 8014d26:	4602      	mov	r2, r0
 8014d28:	4b28      	ldr	r3, [pc, #160]	@ (8014dcc <__lshift+0xd0>)
 8014d2a:	4829      	ldr	r0, [pc, #164]	@ (8014dd0 <__lshift+0xd4>)
 8014d2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014d30:	f000 fb94 	bl	801545c <__assert_func>
 8014d34:	3101      	adds	r1, #1
 8014d36:	005b      	lsls	r3, r3, #1
 8014d38:	e7ee      	b.n	8014d18 <__lshift+0x1c>
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	f100 0114 	add.w	r1, r0, #20
 8014d40:	f100 0210 	add.w	r2, r0, #16
 8014d44:	4618      	mov	r0, r3
 8014d46:	4553      	cmp	r3, sl
 8014d48:	db33      	blt.n	8014db2 <__lshift+0xb6>
 8014d4a:	6920      	ldr	r0, [r4, #16]
 8014d4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d50:	f104 0314 	add.w	r3, r4, #20
 8014d54:	f019 091f 	ands.w	r9, r9, #31
 8014d58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014d60:	d02b      	beq.n	8014dba <__lshift+0xbe>
 8014d62:	f1c9 0e20 	rsb	lr, r9, #32
 8014d66:	468a      	mov	sl, r1
 8014d68:	2200      	movs	r2, #0
 8014d6a:	6818      	ldr	r0, [r3, #0]
 8014d6c:	fa00 f009 	lsl.w	r0, r0, r9
 8014d70:	4310      	orrs	r0, r2
 8014d72:	f84a 0b04 	str.w	r0, [sl], #4
 8014d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d7a:	459c      	cmp	ip, r3
 8014d7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014d80:	d8f3      	bhi.n	8014d6a <__lshift+0x6e>
 8014d82:	ebac 0304 	sub.w	r3, ip, r4
 8014d86:	3b15      	subs	r3, #21
 8014d88:	f023 0303 	bic.w	r3, r3, #3
 8014d8c:	3304      	adds	r3, #4
 8014d8e:	f104 0015 	add.w	r0, r4, #21
 8014d92:	4560      	cmp	r0, ip
 8014d94:	bf88      	it	hi
 8014d96:	2304      	movhi	r3, #4
 8014d98:	50ca      	str	r2, [r1, r3]
 8014d9a:	b10a      	cbz	r2, 8014da0 <__lshift+0xa4>
 8014d9c:	f108 0602 	add.w	r6, r8, #2
 8014da0:	3e01      	subs	r6, #1
 8014da2:	4638      	mov	r0, r7
 8014da4:	612e      	str	r6, [r5, #16]
 8014da6:	4621      	mov	r1, r4
 8014da8:	f7ff fde2 	bl	8014970 <_Bfree>
 8014dac:	4628      	mov	r0, r5
 8014dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014db2:	f842 0f04 	str.w	r0, [r2, #4]!
 8014db6:	3301      	adds	r3, #1
 8014db8:	e7c5      	b.n	8014d46 <__lshift+0x4a>
 8014dba:	3904      	subs	r1, #4
 8014dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8014dc4:	459c      	cmp	ip, r3
 8014dc6:	d8f9      	bhi.n	8014dbc <__lshift+0xc0>
 8014dc8:	e7ea      	b.n	8014da0 <__lshift+0xa4>
 8014dca:	bf00      	nop
 8014dcc:	0801894c 	.word	0x0801894c
 8014dd0:	0801896e 	.word	0x0801896e

08014dd4 <__mcmp>:
 8014dd4:	690a      	ldr	r2, [r1, #16]
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	6900      	ldr	r0, [r0, #16]
 8014dda:	1a80      	subs	r0, r0, r2
 8014ddc:	b530      	push	{r4, r5, lr}
 8014dde:	d10e      	bne.n	8014dfe <__mcmp+0x2a>
 8014de0:	3314      	adds	r3, #20
 8014de2:	3114      	adds	r1, #20
 8014de4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014de8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014dec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014df0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014df4:	4295      	cmp	r5, r2
 8014df6:	d003      	beq.n	8014e00 <__mcmp+0x2c>
 8014df8:	d205      	bcs.n	8014e06 <__mcmp+0x32>
 8014dfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014dfe:	bd30      	pop	{r4, r5, pc}
 8014e00:	42a3      	cmp	r3, r4
 8014e02:	d3f3      	bcc.n	8014dec <__mcmp+0x18>
 8014e04:	e7fb      	b.n	8014dfe <__mcmp+0x2a>
 8014e06:	2001      	movs	r0, #1
 8014e08:	e7f9      	b.n	8014dfe <__mcmp+0x2a>
	...

08014e0c <__mdiff>:
 8014e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e10:	4689      	mov	r9, r1
 8014e12:	4606      	mov	r6, r0
 8014e14:	4611      	mov	r1, r2
 8014e16:	4648      	mov	r0, r9
 8014e18:	4614      	mov	r4, r2
 8014e1a:	f7ff ffdb 	bl	8014dd4 <__mcmp>
 8014e1e:	1e05      	subs	r5, r0, #0
 8014e20:	d112      	bne.n	8014e48 <__mdiff+0x3c>
 8014e22:	4629      	mov	r1, r5
 8014e24:	4630      	mov	r0, r6
 8014e26:	f7ff fd63 	bl	80148f0 <_Balloc>
 8014e2a:	4602      	mov	r2, r0
 8014e2c:	b928      	cbnz	r0, 8014e3a <__mdiff+0x2e>
 8014e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8014f2c <__mdiff+0x120>)
 8014e30:	f240 2137 	movw	r1, #567	@ 0x237
 8014e34:	483e      	ldr	r0, [pc, #248]	@ (8014f30 <__mdiff+0x124>)
 8014e36:	f000 fb11 	bl	801545c <__assert_func>
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014e40:	4610      	mov	r0, r2
 8014e42:	b003      	add	sp, #12
 8014e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e48:	bfbc      	itt	lt
 8014e4a:	464b      	movlt	r3, r9
 8014e4c:	46a1      	movlt	r9, r4
 8014e4e:	4630      	mov	r0, r6
 8014e50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014e54:	bfba      	itte	lt
 8014e56:	461c      	movlt	r4, r3
 8014e58:	2501      	movlt	r5, #1
 8014e5a:	2500      	movge	r5, #0
 8014e5c:	f7ff fd48 	bl	80148f0 <_Balloc>
 8014e60:	4602      	mov	r2, r0
 8014e62:	b918      	cbnz	r0, 8014e6c <__mdiff+0x60>
 8014e64:	4b31      	ldr	r3, [pc, #196]	@ (8014f2c <__mdiff+0x120>)
 8014e66:	f240 2145 	movw	r1, #581	@ 0x245
 8014e6a:	e7e3      	b.n	8014e34 <__mdiff+0x28>
 8014e6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014e70:	6926      	ldr	r6, [r4, #16]
 8014e72:	60c5      	str	r5, [r0, #12]
 8014e74:	f109 0310 	add.w	r3, r9, #16
 8014e78:	f109 0514 	add.w	r5, r9, #20
 8014e7c:	f104 0e14 	add.w	lr, r4, #20
 8014e80:	f100 0b14 	add.w	fp, r0, #20
 8014e84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014e88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014e8c:	9301      	str	r3, [sp, #4]
 8014e8e:	46d9      	mov	r9, fp
 8014e90:	f04f 0c00 	mov.w	ip, #0
 8014e94:	9b01      	ldr	r3, [sp, #4]
 8014e96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014e9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014e9e:	9301      	str	r3, [sp, #4]
 8014ea0:	fa1f f38a 	uxth.w	r3, sl
 8014ea4:	4619      	mov	r1, r3
 8014ea6:	b283      	uxth	r3, r0
 8014ea8:	1acb      	subs	r3, r1, r3
 8014eaa:	0c00      	lsrs	r0, r0, #16
 8014eac:	4463      	add	r3, ip
 8014eae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014eb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014eb6:	b29b      	uxth	r3, r3
 8014eb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014ebc:	4576      	cmp	r6, lr
 8014ebe:	f849 3b04 	str.w	r3, [r9], #4
 8014ec2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014ec6:	d8e5      	bhi.n	8014e94 <__mdiff+0x88>
 8014ec8:	1b33      	subs	r3, r6, r4
 8014eca:	3b15      	subs	r3, #21
 8014ecc:	f023 0303 	bic.w	r3, r3, #3
 8014ed0:	3415      	adds	r4, #21
 8014ed2:	3304      	adds	r3, #4
 8014ed4:	42a6      	cmp	r6, r4
 8014ed6:	bf38      	it	cc
 8014ed8:	2304      	movcc	r3, #4
 8014eda:	441d      	add	r5, r3
 8014edc:	445b      	add	r3, fp
 8014ede:	461e      	mov	r6, r3
 8014ee0:	462c      	mov	r4, r5
 8014ee2:	4544      	cmp	r4, r8
 8014ee4:	d30e      	bcc.n	8014f04 <__mdiff+0xf8>
 8014ee6:	f108 0103 	add.w	r1, r8, #3
 8014eea:	1b49      	subs	r1, r1, r5
 8014eec:	f021 0103 	bic.w	r1, r1, #3
 8014ef0:	3d03      	subs	r5, #3
 8014ef2:	45a8      	cmp	r8, r5
 8014ef4:	bf38      	it	cc
 8014ef6:	2100      	movcc	r1, #0
 8014ef8:	440b      	add	r3, r1
 8014efa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014efe:	b191      	cbz	r1, 8014f26 <__mdiff+0x11a>
 8014f00:	6117      	str	r7, [r2, #16]
 8014f02:	e79d      	b.n	8014e40 <__mdiff+0x34>
 8014f04:	f854 1b04 	ldr.w	r1, [r4], #4
 8014f08:	46e6      	mov	lr, ip
 8014f0a:	0c08      	lsrs	r0, r1, #16
 8014f0c:	fa1c fc81 	uxtah	ip, ip, r1
 8014f10:	4471      	add	r1, lr
 8014f12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014f16:	b289      	uxth	r1, r1
 8014f18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014f1c:	f846 1b04 	str.w	r1, [r6], #4
 8014f20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014f24:	e7dd      	b.n	8014ee2 <__mdiff+0xd6>
 8014f26:	3f01      	subs	r7, #1
 8014f28:	e7e7      	b.n	8014efa <__mdiff+0xee>
 8014f2a:	bf00      	nop
 8014f2c:	0801894c 	.word	0x0801894c
 8014f30:	0801896e 	.word	0x0801896e

08014f34 <__d2b>:
 8014f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014f38:	460f      	mov	r7, r1
 8014f3a:	2101      	movs	r1, #1
 8014f3c:	ec59 8b10 	vmov	r8, r9, d0
 8014f40:	4616      	mov	r6, r2
 8014f42:	f7ff fcd5 	bl	80148f0 <_Balloc>
 8014f46:	4604      	mov	r4, r0
 8014f48:	b930      	cbnz	r0, 8014f58 <__d2b+0x24>
 8014f4a:	4602      	mov	r2, r0
 8014f4c:	4b23      	ldr	r3, [pc, #140]	@ (8014fdc <__d2b+0xa8>)
 8014f4e:	4824      	ldr	r0, [pc, #144]	@ (8014fe0 <__d2b+0xac>)
 8014f50:	f240 310f 	movw	r1, #783	@ 0x30f
 8014f54:	f000 fa82 	bl	801545c <__assert_func>
 8014f58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014f5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014f60:	b10d      	cbz	r5, 8014f66 <__d2b+0x32>
 8014f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014f66:	9301      	str	r3, [sp, #4]
 8014f68:	f1b8 0300 	subs.w	r3, r8, #0
 8014f6c:	d023      	beq.n	8014fb6 <__d2b+0x82>
 8014f6e:	4668      	mov	r0, sp
 8014f70:	9300      	str	r3, [sp, #0]
 8014f72:	f7ff fd84 	bl	8014a7e <__lo0bits>
 8014f76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014f7a:	b1d0      	cbz	r0, 8014fb2 <__d2b+0x7e>
 8014f7c:	f1c0 0320 	rsb	r3, r0, #32
 8014f80:	fa02 f303 	lsl.w	r3, r2, r3
 8014f84:	430b      	orrs	r3, r1
 8014f86:	40c2      	lsrs	r2, r0
 8014f88:	6163      	str	r3, [r4, #20]
 8014f8a:	9201      	str	r2, [sp, #4]
 8014f8c:	9b01      	ldr	r3, [sp, #4]
 8014f8e:	61a3      	str	r3, [r4, #24]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	bf0c      	ite	eq
 8014f94:	2201      	moveq	r2, #1
 8014f96:	2202      	movne	r2, #2
 8014f98:	6122      	str	r2, [r4, #16]
 8014f9a:	b1a5      	cbz	r5, 8014fc6 <__d2b+0x92>
 8014f9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014fa0:	4405      	add	r5, r0
 8014fa2:	603d      	str	r5, [r7, #0]
 8014fa4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014fa8:	6030      	str	r0, [r6, #0]
 8014faa:	4620      	mov	r0, r4
 8014fac:	b003      	add	sp, #12
 8014fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fb2:	6161      	str	r1, [r4, #20]
 8014fb4:	e7ea      	b.n	8014f8c <__d2b+0x58>
 8014fb6:	a801      	add	r0, sp, #4
 8014fb8:	f7ff fd61 	bl	8014a7e <__lo0bits>
 8014fbc:	9b01      	ldr	r3, [sp, #4]
 8014fbe:	6163      	str	r3, [r4, #20]
 8014fc0:	3020      	adds	r0, #32
 8014fc2:	2201      	movs	r2, #1
 8014fc4:	e7e8      	b.n	8014f98 <__d2b+0x64>
 8014fc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014fca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014fce:	6038      	str	r0, [r7, #0]
 8014fd0:	6918      	ldr	r0, [r3, #16]
 8014fd2:	f7ff fd35 	bl	8014a40 <__hi0bits>
 8014fd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014fda:	e7e5      	b.n	8014fa8 <__d2b+0x74>
 8014fdc:	0801894c 	.word	0x0801894c
 8014fe0:	0801896e 	.word	0x0801896e

08014fe4 <__sread>:
 8014fe4:	b510      	push	{r4, lr}
 8014fe6:	460c      	mov	r4, r1
 8014fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fec:	f000 f9d2 	bl	8015394 <_read_r>
 8014ff0:	2800      	cmp	r0, #0
 8014ff2:	bfab      	itete	ge
 8014ff4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014ff6:	89a3      	ldrhlt	r3, [r4, #12]
 8014ff8:	181b      	addge	r3, r3, r0
 8014ffa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014ffe:	bfac      	ite	ge
 8015000:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015002:	81a3      	strhlt	r3, [r4, #12]
 8015004:	bd10      	pop	{r4, pc}

08015006 <__swrite>:
 8015006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801500a:	461f      	mov	r7, r3
 801500c:	898b      	ldrh	r3, [r1, #12]
 801500e:	05db      	lsls	r3, r3, #23
 8015010:	4605      	mov	r5, r0
 8015012:	460c      	mov	r4, r1
 8015014:	4616      	mov	r6, r2
 8015016:	d505      	bpl.n	8015024 <__swrite+0x1e>
 8015018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801501c:	2302      	movs	r3, #2
 801501e:	2200      	movs	r2, #0
 8015020:	f000 f9a6 	bl	8015370 <_lseek_r>
 8015024:	89a3      	ldrh	r3, [r4, #12]
 8015026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801502a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801502e:	81a3      	strh	r3, [r4, #12]
 8015030:	4632      	mov	r2, r6
 8015032:	463b      	mov	r3, r7
 8015034:	4628      	mov	r0, r5
 8015036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801503a:	f000 b9cd 	b.w	80153d8 <_write_r>

0801503e <__sseek>:
 801503e:	b510      	push	{r4, lr}
 8015040:	460c      	mov	r4, r1
 8015042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015046:	f000 f993 	bl	8015370 <_lseek_r>
 801504a:	1c43      	adds	r3, r0, #1
 801504c:	89a3      	ldrh	r3, [r4, #12]
 801504e:	bf15      	itete	ne
 8015050:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015052:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015056:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801505a:	81a3      	strheq	r3, [r4, #12]
 801505c:	bf18      	it	ne
 801505e:	81a3      	strhne	r3, [r4, #12]
 8015060:	bd10      	pop	{r4, pc}

08015062 <__sclose>:
 8015062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015066:	f000 b9c9 	b.w	80153fc <_close_r>

0801506a <_realloc_r>:
 801506a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801506e:	4607      	mov	r7, r0
 8015070:	4614      	mov	r4, r2
 8015072:	460d      	mov	r5, r1
 8015074:	b921      	cbnz	r1, 8015080 <_realloc_r+0x16>
 8015076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801507a:	4611      	mov	r1, r2
 801507c:	f7ff bb00 	b.w	8014680 <_malloc_r>
 8015080:	b92a      	cbnz	r2, 801508e <_realloc_r+0x24>
 8015082:	f000 fa1d 	bl	80154c0 <_free_r>
 8015086:	4625      	mov	r5, r4
 8015088:	4628      	mov	r0, r5
 801508a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801508e:	f000 fa73 	bl	8015578 <_malloc_usable_size_r>
 8015092:	4284      	cmp	r4, r0
 8015094:	4606      	mov	r6, r0
 8015096:	d802      	bhi.n	801509e <_realloc_r+0x34>
 8015098:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801509c:	d8f4      	bhi.n	8015088 <_realloc_r+0x1e>
 801509e:	4621      	mov	r1, r4
 80150a0:	4638      	mov	r0, r7
 80150a2:	f7ff faed 	bl	8014680 <_malloc_r>
 80150a6:	4680      	mov	r8, r0
 80150a8:	b908      	cbnz	r0, 80150ae <_realloc_r+0x44>
 80150aa:	4645      	mov	r5, r8
 80150ac:	e7ec      	b.n	8015088 <_realloc_r+0x1e>
 80150ae:	42b4      	cmp	r4, r6
 80150b0:	4622      	mov	r2, r4
 80150b2:	4629      	mov	r1, r5
 80150b4:	bf28      	it	cs
 80150b6:	4632      	movcs	r2, r6
 80150b8:	f000 f9c2 	bl	8015440 <memcpy>
 80150bc:	4629      	mov	r1, r5
 80150be:	4638      	mov	r0, r7
 80150c0:	f000 f9fe 	bl	80154c0 <_free_r>
 80150c4:	e7f1      	b.n	80150aa <_realloc_r+0x40>

080150c6 <__swbuf_r>:
 80150c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150c8:	460e      	mov	r6, r1
 80150ca:	4614      	mov	r4, r2
 80150cc:	4605      	mov	r5, r0
 80150ce:	b118      	cbz	r0, 80150d8 <__swbuf_r+0x12>
 80150d0:	6a03      	ldr	r3, [r0, #32]
 80150d2:	b90b      	cbnz	r3, 80150d8 <__swbuf_r+0x12>
 80150d4:	f7fe f8ce 	bl	8013274 <__sinit>
 80150d8:	69a3      	ldr	r3, [r4, #24]
 80150da:	60a3      	str	r3, [r4, #8]
 80150dc:	89a3      	ldrh	r3, [r4, #12]
 80150de:	071a      	lsls	r2, r3, #28
 80150e0:	d501      	bpl.n	80150e6 <__swbuf_r+0x20>
 80150e2:	6923      	ldr	r3, [r4, #16]
 80150e4:	b943      	cbnz	r3, 80150f8 <__swbuf_r+0x32>
 80150e6:	4621      	mov	r1, r4
 80150e8:	4628      	mov	r0, r5
 80150ea:	f000 f82b 	bl	8015144 <__swsetup_r>
 80150ee:	b118      	cbz	r0, 80150f8 <__swbuf_r+0x32>
 80150f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80150f4:	4638      	mov	r0, r7
 80150f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150f8:	6823      	ldr	r3, [r4, #0]
 80150fa:	6922      	ldr	r2, [r4, #16]
 80150fc:	1a98      	subs	r0, r3, r2
 80150fe:	6963      	ldr	r3, [r4, #20]
 8015100:	b2f6      	uxtb	r6, r6
 8015102:	4283      	cmp	r3, r0
 8015104:	4637      	mov	r7, r6
 8015106:	dc05      	bgt.n	8015114 <__swbuf_r+0x4e>
 8015108:	4621      	mov	r1, r4
 801510a:	4628      	mov	r0, r5
 801510c:	f7ff fbbc 	bl	8014888 <_fflush_r>
 8015110:	2800      	cmp	r0, #0
 8015112:	d1ed      	bne.n	80150f0 <__swbuf_r+0x2a>
 8015114:	68a3      	ldr	r3, [r4, #8]
 8015116:	3b01      	subs	r3, #1
 8015118:	60a3      	str	r3, [r4, #8]
 801511a:	6823      	ldr	r3, [r4, #0]
 801511c:	1c5a      	adds	r2, r3, #1
 801511e:	6022      	str	r2, [r4, #0]
 8015120:	701e      	strb	r6, [r3, #0]
 8015122:	6962      	ldr	r2, [r4, #20]
 8015124:	1c43      	adds	r3, r0, #1
 8015126:	429a      	cmp	r2, r3
 8015128:	d004      	beq.n	8015134 <__swbuf_r+0x6e>
 801512a:	89a3      	ldrh	r3, [r4, #12]
 801512c:	07db      	lsls	r3, r3, #31
 801512e:	d5e1      	bpl.n	80150f4 <__swbuf_r+0x2e>
 8015130:	2e0a      	cmp	r6, #10
 8015132:	d1df      	bne.n	80150f4 <__swbuf_r+0x2e>
 8015134:	4621      	mov	r1, r4
 8015136:	4628      	mov	r0, r5
 8015138:	f7ff fba6 	bl	8014888 <_fflush_r>
 801513c:	2800      	cmp	r0, #0
 801513e:	d0d9      	beq.n	80150f4 <__swbuf_r+0x2e>
 8015140:	e7d6      	b.n	80150f0 <__swbuf_r+0x2a>
	...

08015144 <__swsetup_r>:
 8015144:	b538      	push	{r3, r4, r5, lr}
 8015146:	4b29      	ldr	r3, [pc, #164]	@ (80151ec <__swsetup_r+0xa8>)
 8015148:	4605      	mov	r5, r0
 801514a:	6818      	ldr	r0, [r3, #0]
 801514c:	460c      	mov	r4, r1
 801514e:	b118      	cbz	r0, 8015158 <__swsetup_r+0x14>
 8015150:	6a03      	ldr	r3, [r0, #32]
 8015152:	b90b      	cbnz	r3, 8015158 <__swsetup_r+0x14>
 8015154:	f7fe f88e 	bl	8013274 <__sinit>
 8015158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801515c:	0719      	lsls	r1, r3, #28
 801515e:	d422      	bmi.n	80151a6 <__swsetup_r+0x62>
 8015160:	06da      	lsls	r2, r3, #27
 8015162:	d407      	bmi.n	8015174 <__swsetup_r+0x30>
 8015164:	2209      	movs	r2, #9
 8015166:	602a      	str	r2, [r5, #0]
 8015168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801516c:	81a3      	strh	r3, [r4, #12]
 801516e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015172:	e033      	b.n	80151dc <__swsetup_r+0x98>
 8015174:	0758      	lsls	r0, r3, #29
 8015176:	d512      	bpl.n	801519e <__swsetup_r+0x5a>
 8015178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801517a:	b141      	cbz	r1, 801518e <__swsetup_r+0x4a>
 801517c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015180:	4299      	cmp	r1, r3
 8015182:	d002      	beq.n	801518a <__swsetup_r+0x46>
 8015184:	4628      	mov	r0, r5
 8015186:	f000 f99b 	bl	80154c0 <_free_r>
 801518a:	2300      	movs	r3, #0
 801518c:	6363      	str	r3, [r4, #52]	@ 0x34
 801518e:	89a3      	ldrh	r3, [r4, #12]
 8015190:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015194:	81a3      	strh	r3, [r4, #12]
 8015196:	2300      	movs	r3, #0
 8015198:	6063      	str	r3, [r4, #4]
 801519a:	6923      	ldr	r3, [r4, #16]
 801519c:	6023      	str	r3, [r4, #0]
 801519e:	89a3      	ldrh	r3, [r4, #12]
 80151a0:	f043 0308 	orr.w	r3, r3, #8
 80151a4:	81a3      	strh	r3, [r4, #12]
 80151a6:	6923      	ldr	r3, [r4, #16]
 80151a8:	b94b      	cbnz	r3, 80151be <__swsetup_r+0x7a>
 80151aa:	89a3      	ldrh	r3, [r4, #12]
 80151ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80151b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80151b4:	d003      	beq.n	80151be <__swsetup_r+0x7a>
 80151b6:	4621      	mov	r1, r4
 80151b8:	4628      	mov	r0, r5
 80151ba:	f000 f83f 	bl	801523c <__smakebuf_r>
 80151be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151c2:	f013 0201 	ands.w	r2, r3, #1
 80151c6:	d00a      	beq.n	80151de <__swsetup_r+0x9a>
 80151c8:	2200      	movs	r2, #0
 80151ca:	60a2      	str	r2, [r4, #8]
 80151cc:	6962      	ldr	r2, [r4, #20]
 80151ce:	4252      	negs	r2, r2
 80151d0:	61a2      	str	r2, [r4, #24]
 80151d2:	6922      	ldr	r2, [r4, #16]
 80151d4:	b942      	cbnz	r2, 80151e8 <__swsetup_r+0xa4>
 80151d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80151da:	d1c5      	bne.n	8015168 <__swsetup_r+0x24>
 80151dc:	bd38      	pop	{r3, r4, r5, pc}
 80151de:	0799      	lsls	r1, r3, #30
 80151e0:	bf58      	it	pl
 80151e2:	6962      	ldrpl	r2, [r4, #20]
 80151e4:	60a2      	str	r2, [r4, #8]
 80151e6:	e7f4      	b.n	80151d2 <__swsetup_r+0x8e>
 80151e8:	2000      	movs	r0, #0
 80151ea:	e7f7      	b.n	80151dc <__swsetup_r+0x98>
 80151ec:	200000a4 	.word	0x200000a4

080151f0 <__swhatbuf_r>:
 80151f0:	b570      	push	{r4, r5, r6, lr}
 80151f2:	460c      	mov	r4, r1
 80151f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151f8:	2900      	cmp	r1, #0
 80151fa:	b096      	sub	sp, #88	@ 0x58
 80151fc:	4615      	mov	r5, r2
 80151fe:	461e      	mov	r6, r3
 8015200:	da0d      	bge.n	801521e <__swhatbuf_r+0x2e>
 8015202:	89a3      	ldrh	r3, [r4, #12]
 8015204:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015208:	f04f 0100 	mov.w	r1, #0
 801520c:	bf14      	ite	ne
 801520e:	2340      	movne	r3, #64	@ 0x40
 8015210:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015214:	2000      	movs	r0, #0
 8015216:	6031      	str	r1, [r6, #0]
 8015218:	602b      	str	r3, [r5, #0]
 801521a:	b016      	add	sp, #88	@ 0x58
 801521c:	bd70      	pop	{r4, r5, r6, pc}
 801521e:	466a      	mov	r2, sp
 8015220:	f000 f8fc 	bl	801541c <_fstat_r>
 8015224:	2800      	cmp	r0, #0
 8015226:	dbec      	blt.n	8015202 <__swhatbuf_r+0x12>
 8015228:	9901      	ldr	r1, [sp, #4]
 801522a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801522e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015232:	4259      	negs	r1, r3
 8015234:	4159      	adcs	r1, r3
 8015236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801523a:	e7eb      	b.n	8015214 <__swhatbuf_r+0x24>

0801523c <__smakebuf_r>:
 801523c:	898b      	ldrh	r3, [r1, #12]
 801523e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015240:	079d      	lsls	r5, r3, #30
 8015242:	4606      	mov	r6, r0
 8015244:	460c      	mov	r4, r1
 8015246:	d507      	bpl.n	8015258 <__smakebuf_r+0x1c>
 8015248:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801524c:	6023      	str	r3, [r4, #0]
 801524e:	6123      	str	r3, [r4, #16]
 8015250:	2301      	movs	r3, #1
 8015252:	6163      	str	r3, [r4, #20]
 8015254:	b003      	add	sp, #12
 8015256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015258:	ab01      	add	r3, sp, #4
 801525a:	466a      	mov	r2, sp
 801525c:	f7ff ffc8 	bl	80151f0 <__swhatbuf_r>
 8015260:	9f00      	ldr	r7, [sp, #0]
 8015262:	4605      	mov	r5, r0
 8015264:	4639      	mov	r1, r7
 8015266:	4630      	mov	r0, r6
 8015268:	f7ff fa0a 	bl	8014680 <_malloc_r>
 801526c:	b948      	cbnz	r0, 8015282 <__smakebuf_r+0x46>
 801526e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015272:	059a      	lsls	r2, r3, #22
 8015274:	d4ee      	bmi.n	8015254 <__smakebuf_r+0x18>
 8015276:	f023 0303 	bic.w	r3, r3, #3
 801527a:	f043 0302 	orr.w	r3, r3, #2
 801527e:	81a3      	strh	r3, [r4, #12]
 8015280:	e7e2      	b.n	8015248 <__smakebuf_r+0xc>
 8015282:	89a3      	ldrh	r3, [r4, #12]
 8015284:	6020      	str	r0, [r4, #0]
 8015286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801528a:	81a3      	strh	r3, [r4, #12]
 801528c:	9b01      	ldr	r3, [sp, #4]
 801528e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015292:	b15b      	cbz	r3, 80152ac <__smakebuf_r+0x70>
 8015294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015298:	4630      	mov	r0, r6
 801529a:	f000 f859 	bl	8015350 <_isatty_r>
 801529e:	b128      	cbz	r0, 80152ac <__smakebuf_r+0x70>
 80152a0:	89a3      	ldrh	r3, [r4, #12]
 80152a2:	f023 0303 	bic.w	r3, r3, #3
 80152a6:	f043 0301 	orr.w	r3, r3, #1
 80152aa:	81a3      	strh	r3, [r4, #12]
 80152ac:	89a3      	ldrh	r3, [r4, #12]
 80152ae:	431d      	orrs	r5, r3
 80152b0:	81a5      	strh	r5, [r4, #12]
 80152b2:	e7cf      	b.n	8015254 <__smakebuf_r+0x18>

080152b4 <_putc_r>:
 80152b4:	b570      	push	{r4, r5, r6, lr}
 80152b6:	460d      	mov	r5, r1
 80152b8:	4614      	mov	r4, r2
 80152ba:	4606      	mov	r6, r0
 80152bc:	b118      	cbz	r0, 80152c6 <_putc_r+0x12>
 80152be:	6a03      	ldr	r3, [r0, #32]
 80152c0:	b90b      	cbnz	r3, 80152c6 <_putc_r+0x12>
 80152c2:	f7fd ffd7 	bl	8013274 <__sinit>
 80152c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80152c8:	07d8      	lsls	r0, r3, #31
 80152ca:	d405      	bmi.n	80152d8 <_putc_r+0x24>
 80152cc:	89a3      	ldrh	r3, [r4, #12]
 80152ce:	0599      	lsls	r1, r3, #22
 80152d0:	d402      	bmi.n	80152d8 <_putc_r+0x24>
 80152d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80152d4:	f7fe f8af 	bl	8013436 <__retarget_lock_acquire_recursive>
 80152d8:	68a3      	ldr	r3, [r4, #8]
 80152da:	3b01      	subs	r3, #1
 80152dc:	2b00      	cmp	r3, #0
 80152de:	60a3      	str	r3, [r4, #8]
 80152e0:	da05      	bge.n	80152ee <_putc_r+0x3a>
 80152e2:	69a2      	ldr	r2, [r4, #24]
 80152e4:	4293      	cmp	r3, r2
 80152e6:	db12      	blt.n	801530e <_putc_r+0x5a>
 80152e8:	b2eb      	uxtb	r3, r5
 80152ea:	2b0a      	cmp	r3, #10
 80152ec:	d00f      	beq.n	801530e <_putc_r+0x5a>
 80152ee:	6823      	ldr	r3, [r4, #0]
 80152f0:	1c5a      	adds	r2, r3, #1
 80152f2:	6022      	str	r2, [r4, #0]
 80152f4:	701d      	strb	r5, [r3, #0]
 80152f6:	b2ed      	uxtb	r5, r5
 80152f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80152fa:	07da      	lsls	r2, r3, #31
 80152fc:	d405      	bmi.n	801530a <_putc_r+0x56>
 80152fe:	89a3      	ldrh	r3, [r4, #12]
 8015300:	059b      	lsls	r3, r3, #22
 8015302:	d402      	bmi.n	801530a <_putc_r+0x56>
 8015304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015306:	f7fe f897 	bl	8013438 <__retarget_lock_release_recursive>
 801530a:	4628      	mov	r0, r5
 801530c:	bd70      	pop	{r4, r5, r6, pc}
 801530e:	4629      	mov	r1, r5
 8015310:	4622      	mov	r2, r4
 8015312:	4630      	mov	r0, r6
 8015314:	f7ff fed7 	bl	80150c6 <__swbuf_r>
 8015318:	4605      	mov	r5, r0
 801531a:	e7ed      	b.n	80152f8 <_putc_r+0x44>

0801531c <memmove>:
 801531c:	4288      	cmp	r0, r1
 801531e:	b510      	push	{r4, lr}
 8015320:	eb01 0402 	add.w	r4, r1, r2
 8015324:	d902      	bls.n	801532c <memmove+0x10>
 8015326:	4284      	cmp	r4, r0
 8015328:	4623      	mov	r3, r4
 801532a:	d807      	bhi.n	801533c <memmove+0x20>
 801532c:	1e43      	subs	r3, r0, #1
 801532e:	42a1      	cmp	r1, r4
 8015330:	d008      	beq.n	8015344 <memmove+0x28>
 8015332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015336:	f803 2f01 	strb.w	r2, [r3, #1]!
 801533a:	e7f8      	b.n	801532e <memmove+0x12>
 801533c:	4402      	add	r2, r0
 801533e:	4601      	mov	r1, r0
 8015340:	428a      	cmp	r2, r1
 8015342:	d100      	bne.n	8015346 <memmove+0x2a>
 8015344:	bd10      	pop	{r4, pc}
 8015346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801534a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801534e:	e7f7      	b.n	8015340 <memmove+0x24>

08015350 <_isatty_r>:
 8015350:	b538      	push	{r3, r4, r5, lr}
 8015352:	4d06      	ldr	r5, [pc, #24]	@ (801536c <_isatty_r+0x1c>)
 8015354:	2300      	movs	r3, #0
 8015356:	4604      	mov	r4, r0
 8015358:	4608      	mov	r0, r1
 801535a:	602b      	str	r3, [r5, #0]
 801535c:	f7ee f9b8 	bl	80036d0 <_isatty>
 8015360:	1c43      	adds	r3, r0, #1
 8015362:	d102      	bne.n	801536a <_isatty_r+0x1a>
 8015364:	682b      	ldr	r3, [r5, #0]
 8015366:	b103      	cbz	r3, 801536a <_isatty_r+0x1a>
 8015368:	6023      	str	r3, [r4, #0]
 801536a:	bd38      	pop	{r3, r4, r5, pc}
 801536c:	20000828 	.word	0x20000828

08015370 <_lseek_r>:
 8015370:	b538      	push	{r3, r4, r5, lr}
 8015372:	4d07      	ldr	r5, [pc, #28]	@ (8015390 <_lseek_r+0x20>)
 8015374:	4604      	mov	r4, r0
 8015376:	4608      	mov	r0, r1
 8015378:	4611      	mov	r1, r2
 801537a:	2200      	movs	r2, #0
 801537c:	602a      	str	r2, [r5, #0]
 801537e:	461a      	mov	r2, r3
 8015380:	f7ee f9b1 	bl	80036e6 <_lseek>
 8015384:	1c43      	adds	r3, r0, #1
 8015386:	d102      	bne.n	801538e <_lseek_r+0x1e>
 8015388:	682b      	ldr	r3, [r5, #0]
 801538a:	b103      	cbz	r3, 801538e <_lseek_r+0x1e>
 801538c:	6023      	str	r3, [r4, #0]
 801538e:	bd38      	pop	{r3, r4, r5, pc}
 8015390:	20000828 	.word	0x20000828

08015394 <_read_r>:
 8015394:	b538      	push	{r3, r4, r5, lr}
 8015396:	4d07      	ldr	r5, [pc, #28]	@ (80153b4 <_read_r+0x20>)
 8015398:	4604      	mov	r4, r0
 801539a:	4608      	mov	r0, r1
 801539c:	4611      	mov	r1, r2
 801539e:	2200      	movs	r2, #0
 80153a0:	602a      	str	r2, [r5, #0]
 80153a2:	461a      	mov	r2, r3
 80153a4:	f7ee f95b 	bl	800365e <_read>
 80153a8:	1c43      	adds	r3, r0, #1
 80153aa:	d102      	bne.n	80153b2 <_read_r+0x1e>
 80153ac:	682b      	ldr	r3, [r5, #0]
 80153ae:	b103      	cbz	r3, 80153b2 <_read_r+0x1e>
 80153b0:	6023      	str	r3, [r4, #0]
 80153b2:	bd38      	pop	{r3, r4, r5, pc}
 80153b4:	20000828 	.word	0x20000828

080153b8 <_sbrk_r>:
 80153b8:	b538      	push	{r3, r4, r5, lr}
 80153ba:	4d06      	ldr	r5, [pc, #24]	@ (80153d4 <_sbrk_r+0x1c>)
 80153bc:	2300      	movs	r3, #0
 80153be:	4604      	mov	r4, r0
 80153c0:	4608      	mov	r0, r1
 80153c2:	602b      	str	r3, [r5, #0]
 80153c4:	f7ee f99c 	bl	8003700 <_sbrk>
 80153c8:	1c43      	adds	r3, r0, #1
 80153ca:	d102      	bne.n	80153d2 <_sbrk_r+0x1a>
 80153cc:	682b      	ldr	r3, [r5, #0]
 80153ce:	b103      	cbz	r3, 80153d2 <_sbrk_r+0x1a>
 80153d0:	6023      	str	r3, [r4, #0]
 80153d2:	bd38      	pop	{r3, r4, r5, pc}
 80153d4:	20000828 	.word	0x20000828

080153d8 <_write_r>:
 80153d8:	b538      	push	{r3, r4, r5, lr}
 80153da:	4d07      	ldr	r5, [pc, #28]	@ (80153f8 <_write_r+0x20>)
 80153dc:	4604      	mov	r4, r0
 80153de:	4608      	mov	r0, r1
 80153e0:	4611      	mov	r1, r2
 80153e2:	2200      	movs	r2, #0
 80153e4:	602a      	str	r2, [r5, #0]
 80153e6:	461a      	mov	r2, r3
 80153e8:	f7ed fa94 	bl	8002914 <_write>
 80153ec:	1c43      	adds	r3, r0, #1
 80153ee:	d102      	bne.n	80153f6 <_write_r+0x1e>
 80153f0:	682b      	ldr	r3, [r5, #0]
 80153f2:	b103      	cbz	r3, 80153f6 <_write_r+0x1e>
 80153f4:	6023      	str	r3, [r4, #0]
 80153f6:	bd38      	pop	{r3, r4, r5, pc}
 80153f8:	20000828 	.word	0x20000828

080153fc <_close_r>:
 80153fc:	b538      	push	{r3, r4, r5, lr}
 80153fe:	4d06      	ldr	r5, [pc, #24]	@ (8015418 <_close_r+0x1c>)
 8015400:	2300      	movs	r3, #0
 8015402:	4604      	mov	r4, r0
 8015404:	4608      	mov	r0, r1
 8015406:	602b      	str	r3, [r5, #0]
 8015408:	f7ee f946 	bl	8003698 <_close>
 801540c:	1c43      	adds	r3, r0, #1
 801540e:	d102      	bne.n	8015416 <_close_r+0x1a>
 8015410:	682b      	ldr	r3, [r5, #0]
 8015412:	b103      	cbz	r3, 8015416 <_close_r+0x1a>
 8015414:	6023      	str	r3, [r4, #0]
 8015416:	bd38      	pop	{r3, r4, r5, pc}
 8015418:	20000828 	.word	0x20000828

0801541c <_fstat_r>:
 801541c:	b538      	push	{r3, r4, r5, lr}
 801541e:	4d07      	ldr	r5, [pc, #28]	@ (801543c <_fstat_r+0x20>)
 8015420:	2300      	movs	r3, #0
 8015422:	4604      	mov	r4, r0
 8015424:	4608      	mov	r0, r1
 8015426:	4611      	mov	r1, r2
 8015428:	602b      	str	r3, [r5, #0]
 801542a:	f7ee f941 	bl	80036b0 <_fstat>
 801542e:	1c43      	adds	r3, r0, #1
 8015430:	d102      	bne.n	8015438 <_fstat_r+0x1c>
 8015432:	682b      	ldr	r3, [r5, #0]
 8015434:	b103      	cbz	r3, 8015438 <_fstat_r+0x1c>
 8015436:	6023      	str	r3, [r4, #0]
 8015438:	bd38      	pop	{r3, r4, r5, pc}
 801543a:	bf00      	nop
 801543c:	20000828 	.word	0x20000828

08015440 <memcpy>:
 8015440:	440a      	add	r2, r1
 8015442:	4291      	cmp	r1, r2
 8015444:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015448:	d100      	bne.n	801544c <memcpy+0xc>
 801544a:	4770      	bx	lr
 801544c:	b510      	push	{r4, lr}
 801544e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015456:	4291      	cmp	r1, r2
 8015458:	d1f9      	bne.n	801544e <memcpy+0xe>
 801545a:	bd10      	pop	{r4, pc}

0801545c <__assert_func>:
 801545c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801545e:	4614      	mov	r4, r2
 8015460:	461a      	mov	r2, r3
 8015462:	4b09      	ldr	r3, [pc, #36]	@ (8015488 <__assert_func+0x2c>)
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	4605      	mov	r5, r0
 8015468:	68d8      	ldr	r0, [r3, #12]
 801546a:	b14c      	cbz	r4, 8015480 <__assert_func+0x24>
 801546c:	4b07      	ldr	r3, [pc, #28]	@ (801548c <__assert_func+0x30>)
 801546e:	9100      	str	r1, [sp, #0]
 8015470:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015474:	4906      	ldr	r1, [pc, #24]	@ (8015490 <__assert_func+0x34>)
 8015476:	462b      	mov	r3, r5
 8015478:	f000 f886 	bl	8015588 <fiprintf>
 801547c:	f000 f8a3 	bl	80155c6 <abort>
 8015480:	4b04      	ldr	r3, [pc, #16]	@ (8015494 <__assert_func+0x38>)
 8015482:	461c      	mov	r4, r3
 8015484:	e7f3      	b.n	801546e <__assert_func+0x12>
 8015486:	bf00      	nop
 8015488:	200000a4 	.word	0x200000a4
 801548c:	080189d1 	.word	0x080189d1
 8015490:	080189de 	.word	0x080189de
 8015494:	08018a0c 	.word	0x08018a0c

08015498 <_calloc_r>:
 8015498:	b570      	push	{r4, r5, r6, lr}
 801549a:	fba1 5402 	umull	r5, r4, r1, r2
 801549e:	b934      	cbnz	r4, 80154ae <_calloc_r+0x16>
 80154a0:	4629      	mov	r1, r5
 80154a2:	f7ff f8ed 	bl	8014680 <_malloc_r>
 80154a6:	4606      	mov	r6, r0
 80154a8:	b928      	cbnz	r0, 80154b6 <_calloc_r+0x1e>
 80154aa:	4630      	mov	r0, r6
 80154ac:	bd70      	pop	{r4, r5, r6, pc}
 80154ae:	220c      	movs	r2, #12
 80154b0:	6002      	str	r2, [r0, #0]
 80154b2:	2600      	movs	r6, #0
 80154b4:	e7f9      	b.n	80154aa <_calloc_r+0x12>
 80154b6:	462a      	mov	r2, r5
 80154b8:	4621      	mov	r1, r4
 80154ba:	f7fd ff89 	bl	80133d0 <memset>
 80154be:	e7f4      	b.n	80154aa <_calloc_r+0x12>

080154c0 <_free_r>:
 80154c0:	b538      	push	{r3, r4, r5, lr}
 80154c2:	4605      	mov	r5, r0
 80154c4:	2900      	cmp	r1, #0
 80154c6:	d041      	beq.n	801554c <_free_r+0x8c>
 80154c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154cc:	1f0c      	subs	r4, r1, #4
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	bfb8      	it	lt
 80154d2:	18e4      	addlt	r4, r4, r3
 80154d4:	f7ff fa00 	bl	80148d8 <__malloc_lock>
 80154d8:	4a1d      	ldr	r2, [pc, #116]	@ (8015550 <_free_r+0x90>)
 80154da:	6813      	ldr	r3, [r2, #0]
 80154dc:	b933      	cbnz	r3, 80154ec <_free_r+0x2c>
 80154de:	6063      	str	r3, [r4, #4]
 80154e0:	6014      	str	r4, [r2, #0]
 80154e2:	4628      	mov	r0, r5
 80154e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154e8:	f7ff b9fc 	b.w	80148e4 <__malloc_unlock>
 80154ec:	42a3      	cmp	r3, r4
 80154ee:	d908      	bls.n	8015502 <_free_r+0x42>
 80154f0:	6820      	ldr	r0, [r4, #0]
 80154f2:	1821      	adds	r1, r4, r0
 80154f4:	428b      	cmp	r3, r1
 80154f6:	bf01      	itttt	eq
 80154f8:	6819      	ldreq	r1, [r3, #0]
 80154fa:	685b      	ldreq	r3, [r3, #4]
 80154fc:	1809      	addeq	r1, r1, r0
 80154fe:	6021      	streq	r1, [r4, #0]
 8015500:	e7ed      	b.n	80154de <_free_r+0x1e>
 8015502:	461a      	mov	r2, r3
 8015504:	685b      	ldr	r3, [r3, #4]
 8015506:	b10b      	cbz	r3, 801550c <_free_r+0x4c>
 8015508:	42a3      	cmp	r3, r4
 801550a:	d9fa      	bls.n	8015502 <_free_r+0x42>
 801550c:	6811      	ldr	r1, [r2, #0]
 801550e:	1850      	adds	r0, r2, r1
 8015510:	42a0      	cmp	r0, r4
 8015512:	d10b      	bne.n	801552c <_free_r+0x6c>
 8015514:	6820      	ldr	r0, [r4, #0]
 8015516:	4401      	add	r1, r0
 8015518:	1850      	adds	r0, r2, r1
 801551a:	4283      	cmp	r3, r0
 801551c:	6011      	str	r1, [r2, #0]
 801551e:	d1e0      	bne.n	80154e2 <_free_r+0x22>
 8015520:	6818      	ldr	r0, [r3, #0]
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	6053      	str	r3, [r2, #4]
 8015526:	4408      	add	r0, r1
 8015528:	6010      	str	r0, [r2, #0]
 801552a:	e7da      	b.n	80154e2 <_free_r+0x22>
 801552c:	d902      	bls.n	8015534 <_free_r+0x74>
 801552e:	230c      	movs	r3, #12
 8015530:	602b      	str	r3, [r5, #0]
 8015532:	e7d6      	b.n	80154e2 <_free_r+0x22>
 8015534:	6820      	ldr	r0, [r4, #0]
 8015536:	1821      	adds	r1, r4, r0
 8015538:	428b      	cmp	r3, r1
 801553a:	bf04      	itt	eq
 801553c:	6819      	ldreq	r1, [r3, #0]
 801553e:	685b      	ldreq	r3, [r3, #4]
 8015540:	6063      	str	r3, [r4, #4]
 8015542:	bf04      	itt	eq
 8015544:	1809      	addeq	r1, r1, r0
 8015546:	6021      	streq	r1, [r4, #0]
 8015548:	6054      	str	r4, [r2, #4]
 801554a:	e7ca      	b.n	80154e2 <_free_r+0x22>
 801554c:	bd38      	pop	{r3, r4, r5, pc}
 801554e:	bf00      	nop
 8015550:	20000824 	.word	0x20000824

08015554 <__ascii_mbtowc>:
 8015554:	b082      	sub	sp, #8
 8015556:	b901      	cbnz	r1, 801555a <__ascii_mbtowc+0x6>
 8015558:	a901      	add	r1, sp, #4
 801555a:	b142      	cbz	r2, 801556e <__ascii_mbtowc+0x1a>
 801555c:	b14b      	cbz	r3, 8015572 <__ascii_mbtowc+0x1e>
 801555e:	7813      	ldrb	r3, [r2, #0]
 8015560:	600b      	str	r3, [r1, #0]
 8015562:	7812      	ldrb	r2, [r2, #0]
 8015564:	1e10      	subs	r0, r2, #0
 8015566:	bf18      	it	ne
 8015568:	2001      	movne	r0, #1
 801556a:	b002      	add	sp, #8
 801556c:	4770      	bx	lr
 801556e:	4610      	mov	r0, r2
 8015570:	e7fb      	b.n	801556a <__ascii_mbtowc+0x16>
 8015572:	f06f 0001 	mvn.w	r0, #1
 8015576:	e7f8      	b.n	801556a <__ascii_mbtowc+0x16>

08015578 <_malloc_usable_size_r>:
 8015578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801557c:	1f18      	subs	r0, r3, #4
 801557e:	2b00      	cmp	r3, #0
 8015580:	bfbc      	itt	lt
 8015582:	580b      	ldrlt	r3, [r1, r0]
 8015584:	18c0      	addlt	r0, r0, r3
 8015586:	4770      	bx	lr

08015588 <fiprintf>:
 8015588:	b40e      	push	{r1, r2, r3}
 801558a:	b503      	push	{r0, r1, lr}
 801558c:	4601      	mov	r1, r0
 801558e:	ab03      	add	r3, sp, #12
 8015590:	4805      	ldr	r0, [pc, #20]	@ (80155a8 <fiprintf+0x20>)
 8015592:	f853 2b04 	ldr.w	r2, [r3], #4
 8015596:	6800      	ldr	r0, [r0, #0]
 8015598:	9301      	str	r3, [sp, #4]
 801559a:	f7fe ff2f 	bl	80143fc <_vfiprintf_r>
 801559e:	b002      	add	sp, #8
 80155a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80155a4:	b003      	add	sp, #12
 80155a6:	4770      	bx	lr
 80155a8:	200000a4 	.word	0x200000a4

080155ac <__ascii_wctomb>:
 80155ac:	4603      	mov	r3, r0
 80155ae:	4608      	mov	r0, r1
 80155b0:	b141      	cbz	r1, 80155c4 <__ascii_wctomb+0x18>
 80155b2:	2aff      	cmp	r2, #255	@ 0xff
 80155b4:	d904      	bls.n	80155c0 <__ascii_wctomb+0x14>
 80155b6:	228a      	movs	r2, #138	@ 0x8a
 80155b8:	601a      	str	r2, [r3, #0]
 80155ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80155be:	4770      	bx	lr
 80155c0:	700a      	strb	r2, [r1, #0]
 80155c2:	2001      	movs	r0, #1
 80155c4:	4770      	bx	lr

080155c6 <abort>:
 80155c6:	b508      	push	{r3, lr}
 80155c8:	2006      	movs	r0, #6
 80155ca:	f000 f82b 	bl	8015624 <raise>
 80155ce:	2001      	movs	r0, #1
 80155d0:	f7ee f83a 	bl	8003648 <_exit>

080155d4 <_raise_r>:
 80155d4:	291f      	cmp	r1, #31
 80155d6:	b538      	push	{r3, r4, r5, lr}
 80155d8:	4605      	mov	r5, r0
 80155da:	460c      	mov	r4, r1
 80155dc:	d904      	bls.n	80155e8 <_raise_r+0x14>
 80155de:	2316      	movs	r3, #22
 80155e0:	6003      	str	r3, [r0, #0]
 80155e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80155e6:	bd38      	pop	{r3, r4, r5, pc}
 80155e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80155ea:	b112      	cbz	r2, 80155f2 <_raise_r+0x1e>
 80155ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80155f0:	b94b      	cbnz	r3, 8015606 <_raise_r+0x32>
 80155f2:	4628      	mov	r0, r5
 80155f4:	f000 f830 	bl	8015658 <_getpid_r>
 80155f8:	4622      	mov	r2, r4
 80155fa:	4601      	mov	r1, r0
 80155fc:	4628      	mov	r0, r5
 80155fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015602:	f000 b817 	b.w	8015634 <_kill_r>
 8015606:	2b01      	cmp	r3, #1
 8015608:	d00a      	beq.n	8015620 <_raise_r+0x4c>
 801560a:	1c59      	adds	r1, r3, #1
 801560c:	d103      	bne.n	8015616 <_raise_r+0x42>
 801560e:	2316      	movs	r3, #22
 8015610:	6003      	str	r3, [r0, #0]
 8015612:	2001      	movs	r0, #1
 8015614:	e7e7      	b.n	80155e6 <_raise_r+0x12>
 8015616:	2100      	movs	r1, #0
 8015618:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801561c:	4620      	mov	r0, r4
 801561e:	4798      	blx	r3
 8015620:	2000      	movs	r0, #0
 8015622:	e7e0      	b.n	80155e6 <_raise_r+0x12>

08015624 <raise>:
 8015624:	4b02      	ldr	r3, [pc, #8]	@ (8015630 <raise+0xc>)
 8015626:	4601      	mov	r1, r0
 8015628:	6818      	ldr	r0, [r3, #0]
 801562a:	f7ff bfd3 	b.w	80155d4 <_raise_r>
 801562e:	bf00      	nop
 8015630:	200000a4 	.word	0x200000a4

08015634 <_kill_r>:
 8015634:	b538      	push	{r3, r4, r5, lr}
 8015636:	4d07      	ldr	r5, [pc, #28]	@ (8015654 <_kill_r+0x20>)
 8015638:	2300      	movs	r3, #0
 801563a:	4604      	mov	r4, r0
 801563c:	4608      	mov	r0, r1
 801563e:	4611      	mov	r1, r2
 8015640:	602b      	str	r3, [r5, #0]
 8015642:	f7ed fff1 	bl	8003628 <_kill>
 8015646:	1c43      	adds	r3, r0, #1
 8015648:	d102      	bne.n	8015650 <_kill_r+0x1c>
 801564a:	682b      	ldr	r3, [r5, #0]
 801564c:	b103      	cbz	r3, 8015650 <_kill_r+0x1c>
 801564e:	6023      	str	r3, [r4, #0]
 8015650:	bd38      	pop	{r3, r4, r5, pc}
 8015652:	bf00      	nop
 8015654:	20000828 	.word	0x20000828

08015658 <_getpid_r>:
 8015658:	f7ed bfde 	b.w	8003618 <_getpid>

0801565c <_init>:
 801565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801565e:	bf00      	nop
 8015660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015662:	bc08      	pop	{r3}
 8015664:	469e      	mov	lr, r3
 8015666:	4770      	bx	lr

08015668 <_fini>:
 8015668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801566a:	bf00      	nop
 801566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801566e:	bc08      	pop	{r3}
 8015670:	469e      	mov	lr, r3
 8015672:	4770      	bx	lr
