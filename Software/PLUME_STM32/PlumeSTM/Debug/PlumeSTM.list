
PlumeSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001516c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032e4  080152b0  080152b0  000162b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018594  08018594  00019594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801859c  0801859c  0001959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080185a4  080185a4  000195a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000250  20000008  080185a8  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005cc  20000258  080187f8  0001a258  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20000824  080187f8  0001a824  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001a258  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003bd14  00000000  00000000  0001a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000067d8  00000000  00000000  00055f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000031b0  00000000  00000000  0005c778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002691  00000000  00000000  0005f928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002d38c  00000000  00000000  00061fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00035558  00000000  00000000  0008f345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010f0db  00000000  00000000  000c489d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d3978  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e7e0  00000000  00000000  001d39bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000083  00000000  00000000  001e219c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000258 	.word	0x20000258
 800015c:	00000000 	.word	0x00000000
 8000160:	08015294 	.word	0x08015294

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000025c 	.word	0x2000025c
 800017c:	08015294 	.word	0x08015294

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bac:	f000 b988 	b.w	8000ec0 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	468e      	mov	lr, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	4688      	mov	r8, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d962      	bls.n	8000ca4 <__udivmoddi4+0xdc>
 8000bde:	fab2 f682 	clz	r6, r2
 8000be2:	b14e      	cbz	r6, 8000bf8 <__udivmoddi4+0x30>
 8000be4:	f1c6 0320 	rsb	r3, r6, #32
 8000be8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bec:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf0:	40b7      	lsls	r7, r6
 8000bf2:	ea43 0808 	orr.w	r8, r3, r8
 8000bf6:	40b4      	lsls	r4, r6
 8000bf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c04:	0c23      	lsrs	r3, r4, #16
 8000c06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c1c:	f080 80ea 	bcs.w	8000df4 <__udivmoddi4+0x22c>
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f240 80e7 	bls.w	8000df4 <__udivmoddi4+0x22c>
 8000c26:	3902      	subs	r1, #2
 8000c28:	443b      	add	r3, r7
 8000c2a:	1a9a      	subs	r2, r3, r2
 8000c2c:	b2a3      	uxth	r3, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3e:	459c      	cmp	ip, r3
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0x8e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c48:	f080 80d6 	bcs.w	8000df8 <__udivmoddi4+0x230>
 8000c4c:	459c      	cmp	ip, r3
 8000c4e:	f240 80d3 	bls.w	8000df8 <__udivmoddi4+0x230>
 8000c52:	443b      	add	r3, r7
 8000c54:	3802      	subs	r0, #2
 8000c56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5a:	eba3 030c 	sub.w	r3, r3, ip
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11d      	cbz	r5, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40f3      	lsrs	r3, r6
 8000c64:	2200      	movs	r2, #0
 8000c66:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d905      	bls.n	8000c7e <__udivmoddi4+0xb6>
 8000c72:	b10d      	cbz	r5, 8000c78 <__udivmoddi4+0xb0>
 8000c74:	e9c5 0100 	strd	r0, r1, [r5]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	e7f5      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000c7e:	fab3 f183 	clz	r1, r3
 8000c82:	2900      	cmp	r1, #0
 8000c84:	d146      	bne.n	8000d14 <__udivmoddi4+0x14c>
 8000c86:	4573      	cmp	r3, lr
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xc8>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 8105 	bhi.w	8000e9a <__udivmoddi4+0x2d2>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4690      	mov	r8, r2
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e5      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000c9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000ca2:	e7e2      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	f000 8090 	beq.w	8000dca <__udivmoddi4+0x202>
 8000caa:	fab2 f682 	clz	r6, r2
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	f040 80a4 	bne.w	8000dfc <__udivmoddi4+0x234>
 8000cb4:	1a8a      	subs	r2, r1, r2
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	b280      	uxth	r0, r0
 8000cbe:	b2bc      	uxth	r4, r7
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cce:	fb04 f20c 	mul.w	r2, r4, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x11e>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x11c>
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	f200 80e0 	bhi.w	8000ea4 <__udivmoddi4+0x2dc>
 8000ce4:	46c4      	mov	ip, r8
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cf0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cf4:	fb02 f404 	mul.w	r4, r2, r4
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x144>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x142>
 8000d04:	429c      	cmp	r4, r3
 8000d06:	f200 80ca 	bhi.w	8000e9e <__udivmoddi4+0x2d6>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d14:	f1c1 0620 	rsb	r6, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	fa0e f401 	lsl.w	r4, lr, r1
 8000d24:	fa20 f306 	lsr.w	r3, r0, r6
 8000d28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fa00 f801 	lsl.w	r8, r0, r1
 8000d36:	fa1f fc87 	uxth.w	ip, r7
 8000d3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x1a0>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d5a:	f080 809c 	bcs.w	8000e96 <__udivmoddi4+0x2ce>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f240 8099 	bls.w	8000e96 <__udivmoddi4+0x2ce>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	fa1f fe83 	uxth.w	lr, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d80:	45a4      	cmp	ip, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1ce>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d8a:	f080 8082 	bcs.w	8000e92 <__udivmoddi4+0x2ca>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d97f      	bls.n	8000e92 <__udivmoddi4+0x2ca>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	443c      	add	r4, r7
 8000d96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000da2:	4564      	cmp	r4, ip
 8000da4:	4673      	mov	r3, lr
 8000da6:	46e1      	mov	r9, ip
 8000da8:	d362      	bcc.n	8000e70 <__udivmoddi4+0x2a8>
 8000daa:	d05f      	beq.n	8000e6c <__udivmoddi4+0x2a4>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x1fe>
 8000dae:	ebb8 0203 	subs.w	r2, r8, r3
 8000db2:	eb64 0409 	sbc.w	r4, r4, r9
 8000db6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dba:	fa22 f301 	lsr.w	r3, r2, r1
 8000dbe:	431e      	orrs	r6, r3
 8000dc0:	40cc      	lsrs	r4, r1
 8000dc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e74f      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000dca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dce:	0c01      	lsrs	r1, r0, #16
 8000dd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dd4:	b280      	uxth	r0, r0
 8000dd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4638      	mov	r0, r7
 8000dde:	463c      	mov	r4, r7
 8000de0:	46b8      	mov	r8, r7
 8000de2:	46be      	mov	lr, r7
 8000de4:	2620      	movs	r6, #32
 8000de6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dea:	eba2 0208 	sub.w	r2, r2, r8
 8000dee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000df2:	e766      	b.n	8000cc2 <__udivmoddi4+0xfa>
 8000df4:	4601      	mov	r1, r0
 8000df6:	e718      	b.n	8000c2a <__udivmoddi4+0x62>
 8000df8:	4610      	mov	r0, r2
 8000dfa:	e72c      	b.n	8000c56 <__udivmoddi4+0x8e>
 8000dfc:	f1c6 0220 	rsb	r2, r6, #32
 8000e00:	fa2e f302 	lsr.w	r3, lr, r2
 8000e04:	40b7      	lsls	r7, r6
 8000e06:	40b1      	lsls	r1, r6
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	430a      	orrs	r2, r1
 8000e12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e16:	b2bc      	uxth	r4, r7
 8000e18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb08 f904 	mul.w	r9, r8, r4
 8000e26:	40b0      	lsls	r0, r6
 8000e28:	4589      	cmp	r9, r1
 8000e2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e2e:	b280      	uxth	r0, r0
 8000e30:	d93e      	bls.n	8000eb0 <__udivmoddi4+0x2e8>
 8000e32:	1879      	adds	r1, r7, r1
 8000e34:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e38:	d201      	bcs.n	8000e3e <__udivmoddi4+0x276>
 8000e3a:	4589      	cmp	r9, r1
 8000e3c:	d81f      	bhi.n	8000e7e <__udivmoddi4+0x2b6>
 8000e3e:	eba1 0109 	sub.w	r1, r1, r9
 8000e42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e46:	fb09 f804 	mul.w	r8, r9, r4
 8000e4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e4e:	b292      	uxth	r2, r2
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d229      	bcs.n	8000eac <__udivmoddi4+0x2e4>
 8000e58:	18ba      	adds	r2, r7, r2
 8000e5a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e5e:	d2c4      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e60:	4542      	cmp	r2, r8
 8000e62:	d2c2      	bcs.n	8000dea <__udivmoddi4+0x222>
 8000e64:	f1a9 0102 	sub.w	r1, r9, #2
 8000e68:	443a      	add	r2, r7
 8000e6a:	e7be      	b.n	8000dea <__udivmoddi4+0x222>
 8000e6c:	45f0      	cmp	r8, lr
 8000e6e:	d29d      	bcs.n	8000dac <__udivmoddi4+0x1e4>
 8000e70:	ebbe 0302 	subs.w	r3, lr, r2
 8000e74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e78:	3801      	subs	r0, #1
 8000e7a:	46e1      	mov	r9, ip
 8000e7c:	e796      	b.n	8000dac <__udivmoddi4+0x1e4>
 8000e7e:	eba7 0909 	sub.w	r9, r7, r9
 8000e82:	4449      	add	r1, r9
 8000e84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8c:	fb09 f804 	mul.w	r8, r9, r4
 8000e90:	e7db      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e92:	4673      	mov	r3, lr
 8000e94:	e77f      	b.n	8000d96 <__udivmoddi4+0x1ce>
 8000e96:	4650      	mov	r0, sl
 8000e98:	e766      	b.n	8000d68 <__udivmoddi4+0x1a0>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e6fd      	b.n	8000c9a <__udivmoddi4+0xd2>
 8000e9e:	443b      	add	r3, r7
 8000ea0:	3a02      	subs	r2, #2
 8000ea2:	e733      	b.n	8000d0c <__udivmoddi4+0x144>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	443b      	add	r3, r7
 8000eaa:	e71c      	b.n	8000ce6 <__udivmoddi4+0x11e>
 8000eac:	4649      	mov	r1, r9
 8000eae:	e79c      	b.n	8000dea <__udivmoddi4+0x222>
 8000eb0:	eba1 0109 	sub.w	r1, r1, r9
 8000eb4:	46c4      	mov	ip, r8
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fb09 f804 	mul.w	r8, r9, r4
 8000ebe:	e7c4      	b.n	8000e4a <__udivmoddi4+0x282>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <_ZL20ws2812_send_spi_datahhh>:

// Static variable to track if 5V power for the LED is currently on
static uint8_t s_is_led_power_on = 0;

// Internal helper function to send the SPI data for one LED
static void ws2812_send_spi_data(uint8_t r_scaled, uint8_t g_scaled, uint8_t b_scaled) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	71bb      	strb	r3, [r7, #6]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	717b      	strb	r3, [r7, #5]
    uint32_t color_data = ((uint32_t)g_scaled << 16) | ((uint32_t)r_scaled << 8) | (uint32_t)b_scaled;
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	797b      	ldrb	r3, [r7, #5]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	623b      	str	r3, [r7, #32]
    uint8_t spi_tx_buffer[24]; // Buffer to hold the 24 * 3-bit encoded values

    // This encoding is for the Controllerstech method with ~2.4MHz SPI clock
    for (int i = 0; i < 24; i++) { // Iterate 24 times for 24 WS2812B data bits
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eea:	e019      	b.n	8000f20 <_ZL20ws2812_send_spi_datahhh+0x5c>
        if ((color_data >> (23 - i)) & 0x01) { // Check MSB first
 8000eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eee:	f1c3 0317 	rsb	r3, r3, #23
 8000ef2:	6a3a      	ldr	r2, [r7, #32]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <_ZL20ws2812_send_spi_datahhh+0x4a>
            spi_tx_buffer[i] = 0b00000110; // WS2812B '1' (last 3 bits are 110)
 8000f00:	f107 0208 	add.w	r2, r7, #8
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	4413      	add	r3, r2
 8000f08:	2206      	movs	r2, #6
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	e005      	b.n	8000f1a <_ZL20ws2812_send_spi_datahhh+0x56>
        } else {
            spi_tx_buffer[i] = 0b00000100; // WS2812B '0' (last 3 bits are 100)
 8000f0e:	f107 0208 	add.w	r2, r7, #8
 8000f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f14:	4413      	add	r3, r2
 8000f16:	2204      	movs	r2, #4
 8000f18:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 24; i++) { // Iterate 24 times for 24 WS2812B data bits
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	2b17      	cmp	r3, #23
 8000f24:	dde2      	ble.n	8000eec <_ZL20ws2812_send_spi_datahhh+0x28>
        }
    }

    // Blocking SPI transmit
    HAL_SPI_Transmit(&hspi2, spi_tx_buffer, 24, 100); // 100ms timeout
 8000f26:	f107 0108 	add.w	r1, r7, #8
 8000f2a:	2364      	movs	r3, #100	@ 0x64
 8000f2c:	2218      	movs	r2, #24
 8000f2e:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <_ZL20ws2812_send_spi_datahhh+0x78>)
 8000f30:	f00e ffcb 	bl	800feca <HAL_SPI_Transmit>
}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	@ 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200004d8 	.word	0x200004d8

08000f40 <_Z15WS2812_SetColorhhhh>:
 * @param r Red component (0-255)
 * @param g Green component (0-255)
 * @param b Blue component (0-255)
 * @param brightness_val Brightness (0-100). If 0, LED will be turned off and power disabled.
 */
void WS2812_SetColor(uint8_t r, uint8_t g, uint8_t b, uint8_t brightness_val) {
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4604      	mov	r4, r0
 8000f48:	4608      	mov	r0, r1
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4623      	mov	r3, r4
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	4603      	mov	r3, r0
 8000f54:	71bb      	strb	r3, [r7, #6]
 8000f56:	460b      	mov	r3, r1
 8000f58:	717b      	strb	r3, [r7, #5]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	713b      	strb	r3, [r7, #4]
    uint8_t r_scaled, g_scaled, b_scaled;

    if (brightness_val == 0 || (r == 0 && g == 0 && b == 0)) {
 8000f5e:	793b      	ldrb	r3, [r7, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d008      	beq.n	8000f76 <_Z15WS2812_SetColorhhhh+0x36>
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d11a      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d117      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d114      	bne.n	8000fa0 <_Z15WS2812_SetColorhhhh+0x60>
        // Turn LED completely OFF and disable 5V power
        if (s_is_led_power_on) {
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d049      	beq.n	8001012 <_Z15WS2812_SetColorhhhh+0xd2>
            // Send all zeros to ensure LED is off before cutting power,
            // though just cutting power after last command would also work.
            // This is more explicit.
            ws2812_send_spi_data(0, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ff9e 	bl	8000ec4 <_ZL20ws2812_send_spi_datahhh>
            HAL_Delay(1); // Ensure data is latched/reset (MOSI idle low > 50us)
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f009 f8a5 	bl	800a0d8 <HAL_Delay>
            HAL_GPIO_WritePin(LED_5V_EN_GPIO_Port, LED_5V_EN_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2104      	movs	r1, #4
 8000f92:	4823      	ldr	r0, [pc, #140]	@ (8001020 <_Z15WS2812_SetColorhhhh+0xe0>)
 8000f94:	f00b fa18 	bl	800c3c8 <HAL_GPIO_WritePin>
            s_is_led_power_on = 0;
 8000f98:	4b20      	ldr	r3, [pc, #128]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
        }
        return; // Nothing more to do if brightness is 0 or color is black
 8000f9e:	e038      	b.n	8001012 <_Z15WS2812_SetColorhhhh+0xd2>
    }

    // Ensure 5V power is ON if it wasn't already
    if (!s_is_led_power_on) {
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10a      	bne.n	8000fbe <_Z15WS2812_SetColorhhhh+0x7e>
        HAL_GPIO_WritePin(LED_5V_EN_GPIO_Port, LED_5V_EN_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2104      	movs	r1, #4
 8000fac:	481c      	ldr	r0, [pc, #112]	@ (8001020 <_Z15WS2812_SetColorhhhh+0xe0>)
 8000fae:	f00b fa0b 	bl	800c3c8 <HAL_GPIO_WritePin>
        HAL_Delay(1); // Allow power to stabilize (adjust if too long/short)
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f009 f890 	bl	800a0d8 <HAL_Delay>
        s_is_led_power_on = 1;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <_Z15WS2812_SetColorhhhh+0xdc>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
    }

    // Clamp brightness
    if (brightness_val > 100) {
 8000fbe:	793b      	ldrb	r3, [r7, #4]
 8000fc0:	2b64      	cmp	r3, #100	@ 0x64
 8000fc2:	d901      	bls.n	8000fc8 <_Z15WS2812_SetColorhhhh+0x88>
        brightness_val = 100;
 8000fc4:	2364      	movs	r3, #100	@ 0x64
 8000fc6:	713b      	strb	r3, [r7, #4]
    }

    // Scale colors by brightness
    // (uint32_t) cast is important to avoid overflow during multiplication before division
    r_scaled = (uint8_t)(((uint32_t)r * brightness_val) / 100);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	793a      	ldrb	r2, [r7, #4]
 8000fcc:	fb02 f303 	mul.w	r3, r2, r3
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	73fb      	strb	r3, [r7, #15]
    g_scaled = (uint8_t)(((uint32_t)g * brightness_val) / 100);
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	793a      	ldrb	r2, [r7, #4]
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe8:	095b      	lsrs	r3, r3, #5
 8000fea:	73bb      	strb	r3, [r7, #14]
    b_scaled = (uint8_t)(((uint32_t)b * brightness_val) / 100);
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	793a      	ldrb	r2, [r7, #4]
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <_Z15WS2812_SetColorhhhh+0xe4>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	737b      	strb	r3, [r7, #13]

    ws2812_send_spi_data(r_scaled, g_scaled, b_scaled);
 8000ffe:	7b7a      	ldrb	r2, [r7, #13]
 8001000:	7bb9      	ldrb	r1, [r7, #14]
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <_ZL20ws2812_send_spi_datahhh>
    // After sending data, a low signal on DIN for >50µs is needed to latch the data
    // and reset the internal shift registers for the next data.
    // HAL_SPI_Transmit is blocking. After it finishes, the SPI MOSI line will
    // typically return to its idle state (which should be low for CPOL=Low).
    // A HAL_Delay(1) is much longer than 50µs and will ensure this latch/reset.
    HAL_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f009 f864 	bl	800a0d8 <HAL_Delay>
 8001010:	e000      	b.n	8001014 <_Z15WS2812_SetColorhhhh+0xd4>
        return; // Nothing more to do if brightness is 0 or color is black
 8001012:	bf00      	nop
    // Power (PC2) remains ON until explicitly turned off by calling with brightness 0 or black.
}
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	20000274 	.word	0x20000274
 8001020:	48000800 	.word	0x48000800
 8001024:	51eb851f 	.word	0x51eb851f

08001028 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001044:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8001062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001066:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	43db      	mvns	r3, r3
 800106c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001070:	4013      	ands	r3, r2
 8001072:	64cb      	str	r3, [r1, #76]	@ 0x4c
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001096:	4b29      	ldr	r3, [pc, #164]	@ (800113c <MX_ADC1_Init+0xbc>)
 8001098:	4a29      	ldr	r2, [pc, #164]	@ (8001140 <MX_ADC1_Init+0xc0>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <MX_ADC1_Init+0xbc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a2:	4b26      	ldr	r3, [pc, #152]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ae:	4b23      	ldr	r3, [pc, #140]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010b6:	2204      	movs	r2, #4
 80010b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_ADC1_Init+0xbc>)
 80010f8:	f009 fa48 	bl	800a58c <HAL_ADC_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001102:	f001 fdeb 	bl	8002cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_ADC1_Init+0xc4>)
 8001108:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110a:	2306      	movs	r3, #6
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800110e:	2304      	movs	r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001112:	237f      	movs	r3, #127	@ 0x7f
 8001114:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001116:	2304      	movs	r3, #4
 8001118:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_ADC1_Init+0xbc>)
 8001124:	f009 fdd2 	bl	800accc <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800112e:	f001 fdd5 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000278 	.word	0x20000278
 8001140:	50040000 	.word	0x50040000
 8001144:	19200040 	.word	0x19200040

08001148 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b09c      	sub	sp, #112	@ 0x70
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2250      	movs	r2, #80	@ 0x50
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f011 ff4d 	bl	8013008 <memset>
  if(adcHandle->Instance==ADC1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <HAL_ADC_MspInit+0x9c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d131      	bne.n	80011dc <HAL_ADC_MspInit+0x94>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800117c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800117e:	2318      	movs	r3, #24
 8001180:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001182:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001186:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001188:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800118c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800118e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001192:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8001194:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001198:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800119a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800119e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00e f8fc 	bl	800f3a2 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 80011b0:	f001 fd94 	bl	8002cdc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011b8:	f7ff ff36 	bl	8001028 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff ff33 	bl	8001028 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BAT_SENSE_Pin;
 80011c2:	2302      	movs	r3, #2
 80011c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c6:	2303      	movs	r3, #3
 80011c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(BAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d8:	f00a fe90 	bl	800befc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011dc:	bf00      	nop
 80011de:	3770      	adds	r7, #112	@ 0x70
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	50040000 	.word	0x50040000

080011e8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <HAL_ADC_MspDeInit+0x2c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d108      	bne.n	800120c <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80011fa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011fe:	f7ff ff2c 	bl	800105a <LL_AHB2_GRP1_DisableClock>

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    HAL_GPIO_DeInit(BAT_SENSE_GPIO_Port, BAT_SENSE_Pin);
 8001202:	2102      	movs	r1, #2
 8001204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001208:	f00a ffe8 	bl	800c1dc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	50040000 	.word	0x50040000

08001218 <LL_AHB1_GRP1_EnableClock>:
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001224:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4313      	orrs	r3, r2
 800122e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001234:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123c:	68fb      	ldr	r3, [r7, #12]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800124e:	2004      	movs	r0, #4
 8001250:	f7ff ffe2 	bl	8001218 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff ffdf 	bl	8001218 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	200b      	movs	r0, #11
 8001260:	f00a fb8f 	bl	800b982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001264:	200b      	movs	r0, #11
 8001266:	f00a fba6 	bl	800b9b6 <HAL_NVIC_EnableIRQ>

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <LL_C2_PWR_SetPowerMode+0x28>)
 800127a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800127e:	f023 0207 	bic.w	r2, r3, #7
 8001282:	4905      	ldr	r1, [pc, #20]	@ (8001298 <LL_C2_PWR_SetPowerMode+0x28>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4313      	orrs	r3, r2
 8001288:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	58000400 	.word	0x58000400

0800129c <_ZN14DRV8214_ConfigC1Ev>:

enum ControlMode { PWM, PH_EN };
enum RegulationMode { CURRENT_FIXED, CURRENT_CYCLES, SPEED, VOLTAGE };
// when using I2C control, the speed/voltage cannot be controlled if using the CURRENT_FIXED or CURRENT_CYCLES regulation mode

struct DRV8214_Config {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	705a      	strb	r2, [r3, #1]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2202      	movs	r2, #2
 80012b4:	709a      	strb	r2, [r3, #2]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	70da      	strb	r2, [r3, #3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	721a      	strb	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	725a      	strb	r2, [r3, #9]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	729a      	strb	r2, [r3, #10]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	72da      	strb	r2, [r3, #11]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2203      	movs	r2, #3
 80012e0:	731a      	strb	r2, [r3, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2280      	movs	r2, #128	@ 0x80
 80012fe:	771a      	strb	r2, [r3, #28]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	775a      	strb	r2, [r3, #29]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800130c:	83da      	strh	r2, [r3, #30]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2020 	strb.w	r2, [r3, #32]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	845a      	strh	r2, [r3, #34]	@ 0x22
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	221e      	movs	r2, #30
 8001320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2203      	movs	r2, #3
 8001328:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	851a      	strh	r2, [r3, #40]	@ 0x28
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2202      	movs	r2, #2
 800133e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <_ZN7DRV8214C1Ehhthhht>:
        // Private functions
        void drvPrint(const char* message);

    public:
        // Constructor
        DRV8214(uint8_t addr, uint8_t id, uint16_t sense_resistor, uint8_t ripples, uint8_t rm, uint8_t reduction_ratio, uint16_t rpm) : address(addr), driver_ID(id), Ripropri(sense_resistor), ripples_per_revolution(ripples), motor_internal_resistance(rm), motor_reduction_ratio(reduction_ratio), motor_max_rpm(rpm) {}
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4603      	mov	r3, r0
 8001360:	70fb      	strb	r3, [r7, #3]
 8001362:	460b      	mov	r3, r1
 8001364:	70bb      	strb	r3, [r7, #2]
 8001366:	4613      	mov	r3, r2
 8001368:	803b      	strh	r3, [r7, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	78ba      	ldrb	r2, [r7, #2]
 8001374:	705a      	strb	r2, [r3, #1]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	883a      	ldrh	r2, [r7, #0]
 800137a:	805a      	strh	r2, [r3, #2]
 800137c:	7c3b      	ldrb	r3, [r7, #16]
 800137e:	b29a      	uxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	809a      	strh	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7d3a      	ldrb	r2, [r7, #20]
 8001388:	719a      	strb	r2, [r3, #6]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7e3a      	ldrb	r2, [r7, #24]
 800138e:	71da      	strb	r2, [r3, #7]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	8bba      	ldrh	r2, [r7, #28]
 8001394:	811a      	strh	r2, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	330c      	adds	r3, #12
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff7e 	bl	800129c <_ZN14DRV8214_ConfigC1Ev>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <App_Init>:
static void Set_Inactivity_Delay(uint32_t delay_ms);

/* Public Function Implementations -------------------------------------------*/

void App_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
    printf("System Initialized. Wakeup source: %d (0=Unk, 1=IMU)\r\n", g_wakeup_source);
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <App_Init+0x70>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	481a      	ldr	r0, [pc, #104]	@ (8001420 <App_Init+0x74>)
 80013b8:	f011 fdae 	bl	8012f18 <iprintf>

    // Default GPIO states
    HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2102      	movs	r1, #2
 80013c0:	4818      	ldr	r0, [pc, #96]	@ (8001424 <App_Init+0x78>)
 80013c2:	f00b f801 	bl	800c3c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_RESET_GPIO_Port, MUX_RESET_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d0:	f00a fffa 	bl	800c3c8 <HAL_GPIO_WritePin>

    Init_Muliplexer();
 80013d4:	f000 fe2e 	bl	8002034 <_ZL15Init_Muliplexerv>

    I2C_Scan(&hi2c1);
 80013d8:	4813      	ldr	r0, [pc, #76]	@ (8001428 <App_Init+0x7c>)
 80013da:	f000 fcf3 	bl	8001dc4 <I2C_Scan>
    I2C_Scan(&hi2c3);
 80013de:	4813      	ldr	r0, [pc, #76]	@ (800142c <App_Init+0x80>)
 80013e0:	f000 fcf0 	bl	8001dc4 <I2C_Scan>

    Init_Motor_Drivers();
 80013e4:	f000 fe8e 	bl	8002104 <_ZL18Init_Motor_Driversv>
    Init_IMU();
 80013e8:	f000 ff0a 	bl	8002200 <_ZL8Init_IMUv>

    // Start battery measurement timer
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) { Error_Handler();}
 80013ec:	4810      	ldr	r0, [pc, #64]	@ (8001430 <App_Init+0x84>)
 80013ee:	f00f fa1b 	bl	8010828 <HAL_TIM_Base_Start_IT>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf14      	ite	ne
 80013f8:	2301      	movne	r3, #1
 80013fa:	2300      	moveq	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <App_Init+0x5a>
 8001402:	f001 fc6b 	bl	8002cdc <Error_Handler>

    LED_Startup_Sequence();
 8001406:	f000 ff49 	bl	800229c <_ZL20LED_Startup_Sequencev>
    ResetInactivityTimer();
 800140a:	f000 fc5f 	bl	8001ccc <ResetInactivityTimer>
    printf("App Initialized. Inactivity timer running for %lu ms.\r\n", (unsigned long)INACTIVITY_TIMEOUT_MS);
 800140e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001412:	4808      	ldr	r0, [pc, #32]	@ (8001434 <App_Init+0x88>)
 8001414:	f011 fd80 	bl	8012f18 <iprintf>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000352 	.word	0x20000352
 8001420:	080152b0 	.word	0x080152b0
 8001424:	48001c00 	.word	0x48001c00
 8001428:	200003d0 	.word	0x200003d0
 800142c:	20000424 	.word	0x20000424
 8001430:	200005a0 	.word	0x200005a0
 8001434:	080152e8 	.word	0x080152e8

08001438 <App_Process>:

void App_Process(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    if (inactivity_timer_elapsed_flag) {
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <App_Process+0x74>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <App_Process+0x12>
        Handle_StopMode_Sequence();
 8001446:	f000 f839 	bl	80014bc <_ZL24Handle_StopMode_Sequencev>
    }

    if (imu_interrupt_flag) {
 800144a:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <App_Process+0x78>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <App_Process+0x44>
        imu_interrupt_flag = false; // Clear flag
 8001454:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <App_Process+0x78>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
        WS2812_SetColor(0, 255, 0, 100); // Green for IMU activity
 800145a:	2364      	movs	r3, #100	@ 0x64
 800145c:	2200      	movs	r2, #0
 800145e:	21ff      	movs	r1, #255	@ 0xff
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff fd6d 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
        HAL_Delay(100);
 8001466:	2064      	movs	r0, #100	@ 0x64
 8001468:	f008 fe36 	bl	800a0d8 <HAL_Delay>
        WS2812_SetColor(0, 0, 0, 0);
 800146c:	2300      	movs	r3, #0
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fd64 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
        ResetInactivityTimer(); // Restart the inactivity timer
 8001478:	f000 fc28 	bl	8001ccc <ResetInactivityTimer>
    }

    Handle_Channel_Switch();
 800147c:	f000 f856 	bl	800152c <_ZL21Handle_Channel_Switchv>

    if (wakeup_event) {
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <App_Process+0x7c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <App_Process+0x56>
        Process_Button_Press();
 800148a:	f000 f91b 	bl	80016c4 <_ZL20Process_Button_Pressv>
    }

    if (g_measure_battery_flag) {
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <App_Process+0x80>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	bf14      	ite	ne
 8001498:	2301      	movne	r3, #1
 800149a:	2300      	moveq	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <App_Process+0x6e>
        Handle_Battery_Measurement();
 80014a2:	f000 f9e7 	bl	8001874 <_ZL26Handle_Battery_Measurementv>
    }
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000350 	.word	0x20000350
 80014b0:	20000351 	.word	0x20000351
 80014b4:	200002e4 	.word	0x200002e4
 80014b8:	200002dc 	.word	0x200002dc

080014bc <_ZL24Handle_StopMode_Sequencev>:

/* Private Function Implementations ------------------------------------------*/

static void Handle_StopMode_Sequence(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    inactivity_timer_elapsed_flag = false; // Clear flag
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <_ZL24Handle_StopMode_Sequencev+0x60>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]

    EnterStop2Mode();
 80014c6:	f000 fb9f 	bl	8001c08 <EnterStop2Mode>

    // -- Execution resumes here after wakeup from Stop 2 --

    HAL_ResumeTick();
 80014ca:	f008 fe39 	bl	800a140 <HAL_ResumeTick>
    SystemClock_Config(); // Restore system clock
 80014ce:	f001 fabd 	bl	8002a4c <SystemClock_Config>

    if (imu_interrupt_flag) {
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <_ZL24Handle_StopMode_Sequencev+0x64>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d015      	beq.n	8001508 <_ZL24Handle_StopMode_Sequencev+0x4c>
      imu_interrupt_flag = false;
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <_ZL24Handle_StopMode_Sequencev+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
      printf("Wakeup source: IMU interrupt.\r\n");
 80014e2:	4810      	ldr	r0, [pc, #64]	@ (8001524 <_ZL24Handle_StopMode_Sequencev+0x68>)
 80014e4:	f011 fd88 	bl	8012ff8 <puts>
      WS2812_SetColor(255, 100, 0, 100); // Orange for IMU wakeup
 80014e8:	2364      	movs	r3, #100	@ 0x64
 80014ea:	2200      	movs	r2, #0
 80014ec:	2164      	movs	r1, #100	@ 0x64
 80014ee:	20ff      	movs	r0, #255	@ 0xff
 80014f0:	f7ff fd26 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
      HAL_Delay(500);
 80014f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014f8:	f008 fdee 	bl	800a0d8 <HAL_Delay>
      WS2812_SetColor(0, 0, 0, 0);
 80014fc:	2300      	movs	r3, #0
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff fd1c 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
    }

    Wakeup_Reinit_Peripherals(); // Re-initialize peripherals affected by Stop mode
 8001508:	f000 fbf2 	bl	8001cf0 <Wakeup_Reinit_Peripherals>
    printf("Woke up from Stop 2. System is active.\r\n");
 800150c:	4806      	ldr	r0, [pc, #24]	@ (8001528 <_ZL24Handle_StopMode_Sequencev+0x6c>)
 800150e:	f011 fd73 	bl	8012ff8 <puts>
    ResetInactivityTimer(); // Restart the inactivity timer
 8001512:	f000 fbdb 	bl	8001ccc <ResetInactivityTimer>
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000350 	.word	0x20000350
 8001520:	20000351 	.word	0x20000351
 8001524:	08015320 	.word	0x08015320
 8001528:	08015340 	.word	0x08015340

0800152c <_ZL21Handle_Channel_Switchv>:

static void Handle_Channel_Switch(void)
{
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	b08d      	sub	sp, #52	@ 0x34
 8001530:	af00      	add	r7, sp, #0
    bool switch_is_set = (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_SET);
 8001532:	2108      	movs	r1, #8
 8001534:	485b      	ldr	r0, [pc, #364]	@ (80016a4 <_ZL21Handle_Channel_Switchv+0x178>)
 8001536:	f00a ff2f 	bl	800c398 <HAL_GPIO_ReadPin>
 800153a:	4603      	mov	r3, r0
 800153c:	2b01      	cmp	r3, #1
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    bool needs_switch = (switch_is_set && i2c_channel_to_use != 0) || (!switch_is_set && i2c_channel_to_use != 1);
 8001548:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <_ZL21Handle_Channel_Switchv+0x2c>
 8001550:	4b55      	ldr	r3, [pc, #340]	@ (80016a8 <_ZL21Handle_Channel_Switchv+0x17c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10a      	bne.n	800156e <_ZL21Handle_Channel_Switchv+0x42>
 8001558:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800155c:	f083 0301 	eor.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <_ZL21Handle_Channel_Switchv+0x46>
 8001566:	4b50      	ldr	r3, [pc, #320]	@ (80016a8 <_ZL21Handle_Channel_Switchv+0x17c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <_ZL21Handle_Channel_Switchv+0x46>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <_ZL21Handle_Channel_Switchv+0x48>
 8001572:	2300      	movs	r3, #0
 8001574:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    if (!needs_switch) {
 8001578:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800157c:	f083 0301 	eor.w	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 808a 	bne.w	800169c <_ZL21Handle_Channel_Switchv+0x170>
        return; // No change needed
    }

    if (switch_is_set) { // Switch to channel 0
 8001588:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00d      	beq.n	80015ac <_ZL21Handle_Channel_Switchv+0x80>
        i2c_channel_to_use = 0;
 8001590:	4b45      	ldr	r3, [pc, #276]	@ (80016a8 <_ZL21Handle_Channel_Switchv+0x17c>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2102      	movs	r1, #2
 800159a:	4842      	ldr	r0, [pc, #264]	@ (80016a4 <_ZL21Handle_Channel_Switchv+0x178>)
 800159c:	f00a ff14 	bl	800c3c8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2180      	movs	r1, #128	@ 0x80
 80015a4:	4841      	ldr	r0, [pc, #260]	@ (80016ac <_ZL21Handle_Channel_Switchv+0x180>)
 80015a6:	f00a ff0f 	bl	800c3c8 <HAL_GPIO_WritePin>
 80015aa:	e00c      	b.n	80015c6 <_ZL21Handle_Channel_Switchv+0x9a>
    } else { // Switch to channel 1
        i2c_channel_to_use = 1;
 80015ac:	4b3e      	ldr	r3, [pc, #248]	@ (80016a8 <_ZL21Handle_Channel_Switchv+0x17c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2102      	movs	r1, #2
 80015b6:	483b      	ldr	r0, [pc, #236]	@ (80016a4 <_ZL21Handle_Channel_Switchv+0x178>)
 80015b8:	f00a ff06 	bl	800c3c8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	2180      	movs	r1, #128	@ 0x80
 80015c0:	483a      	ldr	r0, [pc, #232]	@ (80016ac <_ZL21Handle_Channel_Switchv+0x180>)
 80015c2:	f00a ff01 	bl	800c3c8 <HAL_GPIO_WritePin>
    }

    if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
 80015c6:	4b38      	ldr	r3, [pc, #224]	@ (80016a8 <_ZL21Handle_Channel_Switchv+0x17c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4838      	ldr	r0, [pc, #224]	@ (80016b0 <_ZL21Handle_Channel_Switchv+0x184>)
 80015ce:	f010 fedd 	bl	801238c <_Z14i2c_mux_selectP7i2c_muxi>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <_ZL21Handle_Channel_Switchv+0xc4>
      printf("Channel switched to %d successfully!\n", i2c_channel_to_use);
 80015e2:	4b31      	ldr	r3, [pc, #196]	@ (80016a8 <_ZL21Handle_Channel_Switchv+0x17c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4619      	mov	r1, r3
 80015e8:	4832      	ldr	r0, [pc, #200]	@ (80016b4 <_ZL21Handle_Channel_Switchv+0x188>)
 80015ea:	f011 fc95 	bl	8012f18 <iprintf>
 80015ee:	e005      	b.n	80015fc <_ZL21Handle_Channel_Switchv+0xd0>
    } else {
        printf("Failed to select channel %d on I2C multiplexer.\n", i2c_channel_to_use);
 80015f0:	4b2d      	ldr	r3, [pc, #180]	@ (80016a8 <_ZL21Handle_Channel_Switchv+0x17c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4830      	ldr	r0, [pc, #192]	@ (80016b8 <_ZL21Handle_Channel_Switchv+0x18c>)
 80015f8:	f011 fc8e 	bl	8012f18 <iprintf>
    }
    HAL_Delay(10);
 80015fc:	200a      	movs	r0, #10
 80015fe:	f008 fd6b 	bl	800a0d8 <HAL_Delay>

    // Re-initialize driver for the new channel
    driver_configs[i2c_channel_to_use] = DRV8214_Config();
 8001602:	463b      	mov	r3, r7
 8001604:	222c      	movs	r2, #44	@ 0x2c
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f011 fcfd 	bl	8013008 <memset>
 800160e:	463b      	mov	r3, r7
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fe43 	bl	800129c <_ZN14DRV8214_ConfigC1Ev>
 8001616:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <_ZL21Handle_Channel_Switchv+0x17c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	232c      	movs	r3, #44	@ 0x2c
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	4a26      	ldr	r2, [pc, #152]	@ (80016bc <_ZL21Handle_Channel_Switchv+0x190>)
 8001624:	4413      	add	r3, r2
 8001626:	463c      	mov	r4, r7
 8001628:	469c      	mov	ip, r3
 800162a:	f104 0e20 	add.w	lr, r4, #32
 800162e:	4665      	mov	r5, ip
 8001630:	4626      	mov	r6, r4
 8001632:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001634:	6028      	str	r0, [r5, #0]
 8001636:	6069      	str	r1, [r5, #4]
 8001638:	60aa      	str	r2, [r5, #8]
 800163a:	60eb      	str	r3, [r5, #12]
 800163c:	3410      	adds	r4, #16
 800163e:	f10c 0c10 	add.w	ip, ip, #16
 8001642:	4574      	cmp	r4, lr
 8001644:	d1f3      	bne.n	800162e <_ZL21Handle_Channel_Switchv+0x102>
 8001646:	4662      	mov	r2, ip
 8001648:	4623      	mov	r3, r4
 800164a:	cb03      	ldmia	r3!, {r0, r1}
 800164c:	6010      	str	r0, [r2, #0]
 800164e:	6051      	str	r1, [r2, #4]
 8001650:	8819      	ldrh	r1, [r3, #0]
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	8111      	strh	r1, [r2, #8]
 8001656:	7293      	strb	r3, [r2, #10]
    drivers[i2c_channel_to_use].init(driver_configs[i2c_channel_to_use]);
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <_ZL21Handle_Channel_Switchv+0x17c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4a16      	ldr	r2, [pc, #88]	@ (80016c0 <_ZL21Handle_Channel_Switchv+0x194>)
 8001668:	441a      	add	r2, r3
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <_ZL21Handle_Channel_Switchv+0x17c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4619      	mov	r1, r3
 8001670:	232c      	movs	r3, #44	@ 0x2c
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4911      	ldr	r1, [pc, #68]	@ (80016bc <_ZL21Handle_Channel_Switchv+0x190>)
 8001678:	440b      	add	r3, r1
 800167a:	4619      	mov	r1, r3
 800167c:	4610      	mov	r0, r2
 800167e:	f006 ffab 	bl	80085d8 <_ZN7DRV82144initERK14DRV8214_Config>
    drivers[i2c_channel_to_use].resetFaultFlags();
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <_ZL21Handle_Channel_Switchv+0x17c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4a0b      	ldr	r2, [pc, #44]	@ (80016c0 <_ZL21Handle_Channel_Switchv+0x194>)
 8001692:	4413      	add	r3, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f007 f9ba 	bl	8008a0e <_ZN7DRV821415resetFaultFlagsEv>
 800169a:	e000      	b.n	800169e <_ZL21Handle_Channel_Switchv+0x172>
        return; // No change needed
 800169c:	bf00      	nop
}
 800169e:	3734      	adds	r7, #52	@ 0x34
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a4:	48001000 	.word	0x48001000
 80016a8:	20000008 	.word	0x20000008
 80016ac:	48000800 	.word	0x48000800
 80016b0:	20000354 	.word	0x20000354
 80016b4:	08015368 	.word	0x08015368
 80016b8:	08015390 	.word	0x08015390
 80016bc:	2000001c 	.word	0x2000001c
 80016c0:	20000360 	.word	0x20000360

080016c4 <_ZL20Process_Button_Pressv>:

static void Process_Button_Press(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af02      	add	r7, sp, #8
    printf("Button press detected! ID: %d\r\n", button_ID);
 80016ca:	4b5e      	ldr	r3, [pc, #376]	@ (8001844 <_ZL20Process_Button_Pressv+0x180>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4619      	mov	r1, r3
 80016d2:	485d      	ldr	r0, [pc, #372]	@ (8001848 <_ZL20Process_Button_Pressv+0x184>)
 80016d4:	f011 fc20 	bl	8012f18 <iprintf>
    wakeup_event = false; // Reset flag
 80016d8:	4b5c      	ldr	r3, [pc, #368]	@ (800184c <_ZL20Process_Button_Pressv+0x188>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
    ResetInactivityTimer();
 80016de:	f000 faf5 	bl	8001ccc <ResetInactivityTimer>

    switch (button_ID) {
 80016e2:	4b58      	ldr	r3, [pc, #352]	@ (8001844 <_ZL20Process_Button_Pressv+0x180>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	3b01      	subs	r3, #1
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	f200 8096 	bhi.w	800181c <_ZL20Process_Button_Pressv+0x158>
 80016f0:	a201      	add	r2, pc, #4	@ (adr r2, 80016f8 <_ZL20Process_Button_Pressv+0x34>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	0800170d 	.word	0x0800170d
 80016fc:	08001753 	.word	0x08001753
 8001700:	08001793 	.word	0x08001793
 8001704:	080017dd 	.word	0x080017dd
 8001708:	080017f5 	.word	0x080017f5
        case 1:
            WS2812_SetColor(255, 0, 0, 100); // Red
 800170c:	2364      	movs	r3, #100	@ 0x64
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	20ff      	movs	r0, #255	@ 0xff
 8001714:	f7ff fc14 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
            drivers[i2c_channel_to_use].turnXRipples(ripple_target, stops_after_ripples, true, speed, voltage, current);
 8001718:	4b4d      	ldr	r3, [pc, #308]	@ (8001850 <_ZL20Process_Button_Pressv+0x18c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4613      	mov	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4a4b      	ldr	r2, [pc, #300]	@ (8001854 <_ZL20Process_Button_Pressv+0x190>)
 8001728:	1898      	adds	r0, r3, r2
 800172a:	4b4b      	ldr	r3, [pc, #300]	@ (8001858 <_ZL20Process_Button_Pressv+0x194>)
 800172c:	8819      	ldrh	r1, [r3, #0]
 800172e:	4b4b      	ldr	r3, [pc, #300]	@ (800185c <_ZL20Process_Button_Pressv+0x198>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	4a4b      	ldr	r2, [pc, #300]	@ (8001860 <_ZL20Process_Button_Pressv+0x19c>)
 8001734:	edd2 7a00 	vldr	s15, [r2]
 8001738:	4a4a      	ldr	r2, [pc, #296]	@ (8001864 <_ZL20Process_Button_Pressv+0x1a0>)
 800173a:	ed92 7a00 	vldr	s14, [r2]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	eef0 0a47 	vmov.f32	s1, s14
 8001744:	eeb0 0a67 	vmov.f32	s0, s15
 8001748:	2301      	movs	r3, #1
 800174a:	2201      	movs	r2, #1
 800174c:	f008 f88a 	bl	8009864 <_ZN7DRV821412turnXRipplesEtbbtff>
            break;
 8001750:	e06b      	b.n	800182a <_ZL20Process_Button_Pressv+0x166>
        case 2:
            WS2812_SetColor(0, 255, 0, 100); // Green
 8001752:	2364      	movs	r3, #100	@ 0x64
 8001754:	2200      	movs	r2, #0
 8001756:	21ff      	movs	r1, #255	@ 0xff
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff fbf1 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
            drivers[i2c_channel_to_use].turnReverse(speed_low, voltage, current);
 800175e:	4b3c      	ldr	r3, [pc, #240]	@ (8001850 <_ZL20Process_Button_Pressv+0x18c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4a39      	ldr	r2, [pc, #228]	@ (8001854 <_ZL20Process_Button_Pressv+0x190>)
 800176e:	4413      	add	r3, r2
 8001770:	4a3d      	ldr	r2, [pc, #244]	@ (8001868 <_ZL20Process_Button_Pressv+0x1a4>)
 8001772:	8812      	ldrh	r2, [r2, #0]
 8001774:	493a      	ldr	r1, [pc, #232]	@ (8001860 <_ZL20Process_Button_Pressv+0x19c>)
 8001776:	edd1 7a00 	vldr	s15, [r1]
 800177a:	493a      	ldr	r1, [pc, #232]	@ (8001864 <_ZL20Process_Button_Pressv+0x1a0>)
 800177c:	ed91 7a00 	vldr	s14, [r1]
 8001780:	eef0 0a47 	vmov.f32	s1, s14
 8001784:	eeb0 0a67 	vmov.f32	s0, s15
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f007 ffc6 	bl	800971c <_ZN7DRV821411turnReverseEtff>
            break;
 8001790:	e04b      	b.n	800182a <_ZL20Process_Button_Pressv+0x166>
        case 3:
            WS2812_SetColor(0, 0, 255, 100); // Blue
 8001792:	2364      	movs	r3, #100	@ 0x64
 8001794:	22ff      	movs	r2, #255	@ 0xff
 8001796:	2100      	movs	r1, #0
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff fbd1 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
            printf("Clearing fault flags & resetting ripple counter...\r\n");
 800179e:	4833      	ldr	r0, [pc, #204]	@ (800186c <_ZL20Process_Button_Pressv+0x1a8>)
 80017a0:	f011 fc2a 	bl	8012ff8 <puts>
            drivers[i2c_channel_to_use].resetRippleCounter();
 80017a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001850 <_ZL20Process_Button_Pressv+0x18c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4a28      	ldr	r2, [pc, #160]	@ (8001854 <_ZL20Process_Button_Pressv+0x190>)
 80017b4:	4413      	add	r3, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f007 f91a 	bl	80089f0 <_ZN7DRV821418resetRippleCounterEv>
            drivers[i2c_channel_to_use].resetFaultFlags();
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <_ZL20Process_Button_Pressv+0x18c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4613      	mov	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4a22      	ldr	r2, [pc, #136]	@ (8001854 <_ZL20Process_Button_Pressv+0x190>)
 80017cc:	4413      	add	r3, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f007 f91d 	bl	8008a0e <_ZN7DRV821415resetFaultFlagsEv>
            I2C_Scan(&hi2c1);
 80017d4:	4826      	ldr	r0, [pc, #152]	@ (8001870 <_ZL20Process_Button_Pressv+0x1ac>)
 80017d6:	f000 faf5 	bl	8001dc4 <I2C_Scan>
            break;
 80017da:	e026      	b.n	800182a <_ZL20Process_Button_Pressv+0x166>
        case 4:
            WS2812_SetColor(255, 255, 0, 100); // Yellow
 80017dc:	2364      	movs	r3, #100	@ 0x64
 80017de:	2200      	movs	r2, #0
 80017e0:	21ff      	movs	r1, #255	@ 0xff
 80017e2:	20ff      	movs	r0, #255	@ 0xff
 80017e4:	f7ff fbac 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
            printRegisters(i2c_channel_to_use);
 80017e8:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <_ZL20Process_Button_Pressv+0x18c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fb73 	bl	8001ed8 <printRegisters>
            break;
 80017f2:	e01a      	b.n	800182a <_ZL20Process_Button_Pressv+0x166>
        case 5:
            WS2812_SetColor(255, 0, 255, 100); // Magenta
 80017f4:	2364      	movs	r3, #100	@ 0x64
 80017f6:	22ff      	movs	r2, #255	@ 0xff
 80017f8:	2100      	movs	r1, #0
 80017fa:	20ff      	movs	r0, #255	@ 0xff
 80017fc:	f7ff fba0 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
            drivers[i2c_channel_to_use].brakeMotor();
 8001800:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <_ZL20Process_Button_Pressv+0x18c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4613      	mov	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4a11      	ldr	r2, [pc, #68]	@ (8001854 <_ZL20Process_Button_Pressv+0x190>)
 8001810:	4413      	add	r3, r2
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f007 ffe5 	bl	80097e4 <_ZN7DRV821410brakeMotorEb>
            break;
 800181a:	e006      	b.n	800182a <_ZL20Process_Button_Pressv+0x166>
        default:
             WS2812_SetColor(0, 0, 0, 0); // Off
 800181c:	2300      	movs	r3, #0
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff fb8c 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
            break;
 8001828:	bf00      	nop
    }
    HAL_Delay(1000);
 800182a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800182e:	f008 fc53 	bl	800a0d8 <HAL_Delay>
    WS2812_SetColor(0, 0, 0, 0); // Turn off the LED
 8001832:	2300      	movs	r3, #0
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fb81 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200002e5 	.word	0x200002e5
 8001848:	080153c4 	.word	0x080153c4
 800184c:	200002e4 	.word	0x200002e4
 8001850:	20000008 	.word	0x20000008
 8001854:	20000360 	.word	0x20000360
 8001858:	20000018 	.word	0x20000018
 800185c:	2000000a 	.word	0x2000000a
 8001860:	20000010 	.word	0x20000010
 8001864:	20000014 	.word	0x20000014
 8001868:	2000000c 	.word	0x2000000c
 800186c:	080153e4 	.word	0x080153e4
 8001870:	200003d0 	.word	0x200003d0

08001874 <_ZL26Handle_Battery_Measurementv>:

static void Handle_Battery_Measurement(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
    g_measure_battery_flag = 0; // Reset flag
 800187a:	4b2e      	ldr	r3, [pc, #184]	@ (8001934 <_ZL26Handle_Battery_Measurementv+0xc0>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	2102      	movs	r1, #2
 8001884:	482c      	ldr	r0, [pc, #176]	@ (8001938 <_ZL26Handle_Battery_Measurementv+0xc4>)
 8001886:	f00a fd9f 	bl	800c3c8 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Wait for voltage to settle
 800188a:	200a      	movs	r0, #10
 800188c:	f008 fc24 	bl	800a0d8 <HAL_Delay>

    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8001890:	482a      	ldr	r0, [pc, #168]	@ (800193c <_ZL26Handle_Battery_Measurementv+0xc8>)
 8001892:	f009 f8f9 	bl	800aa88 <HAL_ADC_Start>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <_ZL26Handle_Battery_Measurementv+0x3a>
        printf("ADC Start Error\r\n");
 80018a6:	4826      	ldr	r0, [pc, #152]	@ (8001940 <_ZL26Handle_Battery_Measurementv+0xcc>)
 80018a8:	f011 fba6 	bl	8012ff8 <puts>
 80018ac:	e039      	b.n	8001922 <_ZL26Handle_Battery_Measurementv+0xae>
    } else {
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80018ae:	2164      	movs	r1, #100	@ 0x64
 80018b0:	4822      	ldr	r0, [pc, #136]	@ (800193c <_ZL26Handle_Battery_Measurementv+0xc8>)
 80018b2:	f009 f970 	bl	800ab96 <HAL_ADC_PollForConversion>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d027      	beq.n	8001916 <_ZL26Handle_Battery_Measurementv+0xa2>
            uint32_t adc_raw_value = HAL_ADC_GetValue(&hadc1);
 80018c6:	481d      	ldr	r0, [pc, #116]	@ (800193c <_ZL26Handle_Battery_Measurementv+0xc8>)
 80018c8:	f009 f9f2 	bl	800acb0 <HAL_ADC_GetValue>
 80018cc:	6078      	str	r0, [r7, #4]
            float v_sense = ((float)adc_raw_value / ADC_RESOLUTION) * VREF_MCU;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018d8:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001944 <_ZL26Handle_Battery_Measurementv+0xd0>
 80018dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018e0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001948 <_ZL26Handle_Battery_Measurementv+0xd4>
 80018e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e8:	edc7 7a00 	vstr	s15, [r7]
            g_battery_voltage = v_sense * BATTERY_SENSE_DIVIDER_RATIO;
 80018ec:	edd7 7a00 	vldr	s15, [r7]
 80018f0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800194c <_ZL26Handle_Battery_Measurementv+0xd8>
 80018f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <_ZL26Handle_Battery_Measurementv+0xdc>)
 80018fa:	edc3 7a00 	vstr	s15, [r3]
            printf("ADC Raw: %lu, VBAT: %.2fV\r\n", adc_raw_value, g_battery_voltage);
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <_ZL26Handle_Battery_Measurementv+0xdc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fdf8 	bl	80004f8 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4811      	ldr	r0, [pc, #68]	@ (8001954 <_ZL26Handle_Battery_Measurementv+0xe0>)
 8001910:	f011 fb02 	bl	8012f18 <iprintf>
 8001914:	e002      	b.n	800191c <_ZL26Handle_Battery_Measurementv+0xa8>
        } else {
            printf("ADC Poll Timeout\r\n");
 8001916:	4810      	ldr	r0, [pc, #64]	@ (8001958 <_ZL26Handle_Battery_Measurementv+0xe4>)
 8001918:	f011 fb6e 	bl	8012ff8 <puts>
        }
        HAL_ADC_Stop(&hadc1);
 800191c:	4807      	ldr	r0, [pc, #28]	@ (800193c <_ZL26Handle_Battery_Measurementv+0xc8>)
 800191e:	f009 f907 	bl	800ab30 <HAL_ADC_Stop>
    }
    HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	2102      	movs	r1, #2
 8001926:	4804      	ldr	r0, [pc, #16]	@ (8001938 <_ZL26Handle_Battery_Measurementv+0xc4>)
 8001928:	f00a fd4e 	bl	800c3c8 <HAL_GPIO_WritePin>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200002dc 	.word	0x200002dc
 8001938:	48001c00 	.word	0x48001c00
 800193c:	20000278 	.word	0x20000278
 8001940:	08015418 	.word	0x08015418
 8001944:	457ff000 	.word	0x457ff000
 8001948:	40533333 	.word	0x40533333
 800194c:	3fa66666 	.word	0x3fa66666
 8001950:	200002e0 	.word	0x200002e0
 8001954:	0801542c 	.word	0x0801542c
 8001958:	08015448 	.word	0x08015448

0800195c <CheckWakeupSource>:

void CheckWakeupSource(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8001960:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <CheckWakeupSource+0x6c>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d022      	beq.n	80019be <CheckWakeupSource+0x62>
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <CheckWakeupSource+0x6c>)
 800197a:	2201      	movs	r2, #1
 800197c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF1) != RESET) {
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <CheckWakeupSource+0x6c>)
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf14      	ite	ne
 800198c:	2301      	movne	r3, #1
 800198e:	2300      	moveq	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00c      	beq.n	80019b0 <CheckWakeupSource+0x54>
          __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
 8001996:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <CheckWakeupSource+0x6c>)
 8001998:	2201      	movs	r2, #1
 800199a:	619a      	str	r2, [r3, #24]
          printf("Woke up from Standby via IMU (WKUP1/PA0).\r\n");
 800199c:	480b      	ldr	r0, [pc, #44]	@ (80019cc <CheckWakeupSource+0x70>)
 800199e:	f011 fb2b 	bl	8012ff8 <puts>
          g_wakeup_source = WAKEUP_SOURCE_IMU;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <CheckWakeupSource+0x74>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
          HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 80019a8:	2001      	movs	r0, #1
 80019aa:	f00c f967 	bl	800dc7c <HAL_PWR_DisableWakeUpPin>
          g_wakeup_source = WAKEUP_SOURCE_UNKNOWN;
      }
  } else {
      printf("Normal power-on or reset (not from Standby).\r\n");
  }
}
 80019ae:	e009      	b.n	80019c4 <CheckWakeupSource+0x68>
          printf("Woke up from Standby (source other than IMU on PA0 or unknown).\r\n");
 80019b0:	4808      	ldr	r0, [pc, #32]	@ (80019d4 <CheckWakeupSource+0x78>)
 80019b2:	f011 fb21 	bl	8012ff8 <puts>
          g_wakeup_source = WAKEUP_SOURCE_UNKNOWN;
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <CheckWakeupSource+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
}
 80019bc:	e002      	b.n	80019c4 <CheckWakeupSource+0x68>
      printf("Normal power-on or reset (not from Standby).\r\n");
 80019be:	4806      	ldr	r0, [pc, #24]	@ (80019d8 <CheckWakeupSource+0x7c>)
 80019c0:	f011 fb1a 	bl	8012ff8 <puts>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	58000400 	.word	0x58000400
 80019cc:	0801545c 	.word	0x0801545c
 80019d0:	20000352 	.word	0x20000352
 80019d4:	08015488 	.word	0x08015488
 80019d8:	080154cc 	.word	0x080154cc

080019dc <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev>:

static void Configure_BMI270_LowPower_AnyMotion(struct bmi2_dev *dev)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0a4      	sub	sp, #144	@ 0x90
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t sens_list[1];
  struct bmi2_sens_config sens_cfg;
  struct bmi2_int_pin_config int_pin_cfg;

  printf("Configuring BMI270 for Low Power Any Motion...\r\n");
 80019e4:	487d      	ldr	r0, [pc, #500]	@ (8001bdc <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x200>)
 80019e6:	f011 fb07 	bl	8012ff8 <puts>

  uint8_t all_sensors_off[] = { BMI2_ACCEL, BMI2_GYRO, BMI2_AUX };
 80019ea:	4a7d      	ldr	r2, [pc, #500]	@ (8001be0 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x204>)
 80019ec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	4611      	mov	r1, r2
 80019f4:	8019      	strh	r1, [r3, #0]
 80019f6:	3302      	adds	r3, #2
 80019f8:	0c12      	lsrs	r2, r2, #16
 80019fa:	701a      	strb	r2, [r3, #0]
  rslt = bmi270_sensor_disable(all_sensors_off, sizeof(all_sensors_off)/sizeof(all_sensors_off[0]), dev);
 80019fc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	2103      	movs	r1, #3
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fff9 	bl	80059fc <bmi270_sensor_disable>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) { printf("BMI270 Disable All Sensors failed. Error: %d\r\n", rslt); Error_Handler(); }
 8001a10:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x4c>
 8001a18:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4871      	ldr	r0, [pc, #452]	@ (8001be4 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x208>)
 8001a20:	f011 fa7a 	bl	8012f18 <iprintf>
 8001a24:	f001 f95a 	bl	8002cdc <Error_Handler>

  sens_list[0] = BMI2_ACCEL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  rslt = bmi270_sensor_enable(sens_list, 1, dev);
 8001a2e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 ffaa 	bl	8005990 <bmi270_sensor_enable>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) { printf("BMI270 Accel Enable failed. Error: %d\r\n", rslt); Error_Handler(); }
 8001a42:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x7e>
 8001a4a:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4865      	ldr	r0, [pc, #404]	@ (8001be8 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x20c>)
 8001a52:	f011 fa61 	bl	8012f18 <iprintf>
 8001a56:	f001 f941 	bl	8002cdc <Error_Handler>

  sens_cfg.type = BMI2_ACCEL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  bmi2_get_sensor_config(&sens_cfg, 1, dev);
 8001a60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	2101      	movs	r1, #1
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 fadb 	bl	8004024 <bmi2_get_sensor_config>
  sens_cfg.cfg.acc.odr = BMI2_ACC_ODR_50HZ;
 8001a6e:	2307      	movs	r3, #7
 8001a70:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  sens_cfg.cfg.acc.bwp = BMI2_ACC_OSR2_AVG2;
 8001a74:	2301      	movs	r3, #1
 8001a76:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  sens_cfg.cfg.acc.filter_perf = BMI2_POWER_OPT_MODE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
  rslt = bmi2_set_sensor_config(&sens_cfg, 1, dev);
 8001a80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	2101      	movs	r1, #1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fa15 	bl	8003eb8 <bmi2_set_sensor_config>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) { printf("BMI270 Accel Low Power Config failed. Error: %d\r\n", rslt); Error_Handler(); }
 8001a94:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0xd0>
 8001a9c:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4852      	ldr	r0, [pc, #328]	@ (8001bec <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x210>)
 8001aa4:	f011 fa38 	bl	8012f18 <iprintf>
 8001aa8:	f001 f918 	bl	8002cdc <Error_Handler>

  rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f002 f875 	bl	8003b9e <bmi2_set_adv_power_save>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) { printf("BMI270 Enable Advanced Power Save failed. Error: %d\r\n", rslt); Error_Handler(); }
 8001aba:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0xf6>
 8001ac2:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4849      	ldr	r0, [pc, #292]	@ (8001bf0 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x214>)
 8001aca:	f011 fa25 	bl	8012f18 <iprintf>
 8001ace:	f001 f905 	bl	8002cdc <Error_Handler>

  struct bmi2_sens_config anymotion_cfg;
  anymotion_cfg.type = BMI2_ANY_MOTION;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	733b      	strb	r3, [r7, #12]
  bmi270_get_sensor_config(&anymotion_cfg, 1, dev);
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	2101      	movs	r1, #1
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 f850 	bl	8005b84 <bmi270_get_sensor_config>
  anymotion_cfg.cfg.any_motion.duration = 2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	823b      	strh	r3, [r7, #16]
  anymotion_cfg.cfg.any_motion.threshold = 0xAA;
 8001ae8:	23aa      	movs	r3, #170	@ 0xaa
 8001aea:	827b      	strh	r3, [r7, #18]
  anymotion_cfg.cfg.any_motion.select_x = BMI2_ENABLE;
 8001aec:	2301      	movs	r3, #1
 8001aee:	82bb      	strh	r3, [r7, #20]
  anymotion_cfg.cfg.any_motion.select_y = BMI2_ENABLE;
 8001af0:	2301      	movs	r3, #1
 8001af2:	82fb      	strh	r3, [r7, #22]
  anymotion_cfg.cfg.any_motion.select_z = BMI2_ENABLE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	833b      	strh	r3, [r7, #24]
  rslt = bmi270_set_sensor_config(&anymotion_cfg, 1, dev);
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	2101      	movs	r1, #1
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 ffb1 	bl	8005a68 <bmi270_set_sensor_config>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) { printf("BMI270 Set AnyMotion Config failed. Error: %d\r\n", rslt); Error_Handler(); }
 8001b0c:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x148>
 8001b14:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4836      	ldr	r0, [pc, #216]	@ (8001bf4 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x218>)
 8001b1c:	f011 f9fc 	bl	8012f18 <iprintf>
 8001b20:	f001 f8dc 	bl	8002cdc <Error_Handler>

  sens_list[0] = BMI2_ANY_MOTION;
 8001b24:	2304      	movs	r3, #4
 8001b26:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  rslt = bmi270_sensor_enable(sens_list, 1, dev);
 8001b2a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	2101      	movs	r1, #1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 ff2c 	bl	8005990 <bmi270_sensor_enable>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) { printf("BMI270 AnyMotion Sensor Enable failed. Error: %d\r\n", rslt); Error_Handler(); }
 8001b3e:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x17a>
 8001b46:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	482a      	ldr	r0, [pc, #168]	@ (8001bf8 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x21c>)
 8001b4e:	f011 f9e3 	bl	8012f18 <iprintf>
 8001b52:	f001 f8c3 	bl	8002cdc <Error_Handler>

  int_pin_cfg.pin_type = BMI2_INT1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  int_pin_cfg.int_latch = BMI2_INT_NON_LATCH;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  int_pin_cfg.pin_cfg[0].lvl = BMI2_INT_ACTIVE_HIGH;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  int_pin_cfg.pin_cfg[0].od = BMI2_INT_PUSH_PULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  int_pin_cfg.pin_cfg[0].output_en = BMI2_INT_OUTPUT_ENABLE;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  int_pin_cfg.pin_cfg[0].input_en = BMI2_INT_INPUT_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
  rslt = bmi2_set_int_pin_config(&int_pin_cfg, dev);
 8001b7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 f8ad 	bl	8003ce0 <bmi2_set_int_pin_config>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) { printf("BMI270 Set INT Pin Config failed. Error: %d\r\n", rslt); Error_Handler(); }
 8001b8c:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x1c8>
 8001b94:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4818      	ldr	r0, [pc, #96]	@ (8001bfc <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x220>)
 8001b9c:	f011 f9bc 	bl	8012f18 <iprintf>
 8001ba0:	f001 f89c 	bl	8002cdc <Error_Handler>

  rslt = bmi2_map_feat_int(BMI2_ANY_MOTION, BMI2_INT1, dev);
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	2004      	movs	r0, #4
 8001baa:	f002 fba2 	bl	80042f2 <bmi2_map_feat_int>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (rslt != BMI2_OK) { printf("BMI270 Map AnyMotion to INT1 failed. Error: %d\r\n", rslt); Error_Handler(); }
 8001bb4:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x1f0>
 8001bbc:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480f      	ldr	r0, [pc, #60]	@ (8001c00 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x224>)
 8001bc4:	f011 f9a8 	bl	8012f18 <iprintf>
 8001bc8:	f001 f888 	bl	8002cdc <Error_Handler>

  printf("BMI270 Low Power Any Motion Setup Complete.\r\n");
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev+0x228>)
 8001bce:	f011 fa13 	bl	8012ff8 <puts>
}
 8001bd2:	bf00      	nop
 8001bd4:	3790      	adds	r7, #144	@ 0x90
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	080154fc 	.word	0x080154fc
 8001be0:	080156e8 	.word	0x080156e8
 8001be4:	0801552c 	.word	0x0801552c
 8001be8:	0801555c 	.word	0x0801555c
 8001bec:	08015584 	.word	0x08015584
 8001bf0:	080155b8 	.word	0x080155b8
 8001bf4:	080155f0 	.word	0x080155f0
 8001bf8:	08015620 	.word	0x08015620
 8001bfc:	08015654 	.word	0x08015654
 8001c00:	08015684 	.word	0x08015684
 8001c04:	080156b8 	.word	0x080156b8

08001c08 <EnterStop2Mode>:

void EnterStop2Mode(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  printf("Preparing to enter Stop2 Mode...\r\n");
 8001c0c:	4825      	ldr	r0, [pc, #148]	@ (8001ca4 <EnterStop2Mode+0x9c>)
 8001c0e:	f011 f9f3 	bl	8012ff8 <puts>
  WS2812_SetColor(0,0,0,0);
 8001c12:	2300      	movs	r3, #0
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff f991 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
  HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2102      	movs	r1, #2
 8001c22:	4821      	ldr	r0, [pc, #132]	@ (8001ca8 <EnterStop2Mode+0xa0>)
 8001c24:	f00a fbd0 	bl	800c3c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2180      	movs	r1, #128	@ 0x80
 8001c2c:	481f      	ldr	r0, [pc, #124]	@ (8001cac <EnterStop2Mode+0xa4>)
 8001c2e:	f00a fbcb 	bl	800c3c8 <HAL_GPIO_WritePin>
  printf("nSLEEP pins set LOW.\r\n");
 8001c32:	481f      	ldr	r0, [pc, #124]	@ (8001cb0 <EnterStop2Mode+0xa8>)
 8001c34:	f011 f9e0 	bl	8012ff8 <puts>
  HAL_Delay(100); // UART flush
 8001c38:	2064      	movs	r0, #100	@ 0x64
 8001c3a:	f008 fa4d 	bl	800a0d8 <HAL_Delay>

  // 1. Disable all peripherals properly
  HAL_TIM_Base_Stop_IT(&htim2);
 8001c3e:	481d      	ldr	r0, [pc, #116]	@ (8001cb4 <EnterStop2Mode+0xac>)
 8001c40:	f00e fe40 	bl	80108c4 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim16);
 8001c44:	481c      	ldr	r0, [pc, #112]	@ (8001cb8 <EnterStop2Mode+0xb0>)
 8001c46:	f00e fe3d 	bl	80108c4 <HAL_TIM_Base_Stop_IT>
  HAL_ADC_Stop(&hadc1);
 8001c4a:	481c      	ldr	r0, [pc, #112]	@ (8001cbc <EnterStop2Mode+0xb4>)
 8001c4c:	f008 ff70 	bl	800ab30 <HAL_ADC_Stop>
//  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, 0xFFFF);
//  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_C, 0xFFFF);
//  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_H, 0xFFFF);

  // 4. Disable the RF core (CPU2)
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001c50:	2004      	movs	r0, #4
 8001c52:	f7ff fb0d 	bl	8001270 <LL_C2_PWR_SetPowerMode>

  // 5. Enable Flash Power-Down in Stop mode
  HAL_PWREx_EnableFlashPowerDown(PWR_FLASHPD_LPSLEEP);
 8001c56:	2020      	movs	r0, #32
 8001c58:	f00c f834 	bl	800dcc4 <HAL_PWREx_EnableFlashPowerDown>

  // 6. Configure wakeup sources
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001c5c:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <EnterStop2Mode+0xb8>)
 8001c5e:	221f      	movs	r2, #31
 8001c60:	619a      	str	r2, [r3, #24]
  __HAL_GPIO_EXTI_CLEAR_FLAG(IMU_INT1_Pin | BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin | BUTTON4_Pin | BUTTON5_Pin);
 8001c62:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <EnterStop2Mode+0xbc>)
 8001c64:	f240 42b9 	movw	r2, #1209	@ 0x4b9
 8001c68:	60da      	str	r2, [r3, #12]
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1 | PWR_FLAG_WUF2 | PWR_FLAG_WUF3 | PWR_FLAG_WUF4 | PWR_FLAG_WUF5);
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <EnterStop2Mode+0xb8>)
 8001c6c:	2280      	movs	r2, #128	@ 0x80
 8001c6e:	619a      	str	r2, [r3, #24]
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_HIGH);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f00b ffe3 	bl	800dc3c <HAL_PWR_EnableWakeUpPin>
  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
 8001c76:	2002      	movs	r0, #2
 8001c78:	f00c f800 	bl	800dc7c <HAL_PWR_DisableWakeUpPin>
  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN3);
 8001c7c:	2004      	movs	r0, #4
 8001c7e:	f00b fffd 	bl	800dc7c <HAL_PWR_DisableWakeUpPin>
  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN4);
 8001c82:	2008      	movs	r0, #8
 8001c84:	f00b fffa 	bl	800dc7c <HAL_PWR_DisableWakeUpPin>
  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN5);
 8001c88:	2010      	movs	r0, #16
 8001c8a:	f00b fff7 	bl	800dc7c <HAL_PWR_DisableWakeUpPin>
  // 7. Disable debug in stop mode
//  HAL_DBGMCU_DisableDBGStopMode();

  // 8. Disable RTC wakeup timer (this was the fix for immediate wakeup)
  extern RTC_HandleTypeDef hrtc;
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001c8e:	480e      	ldr	r0, [pc, #56]	@ (8001cc8 <EnterStop2Mode+0xc0>)
 8001c90:	f00d ffe8 	bl	800fc64 <HAL_RTCEx_DeactivateWakeUpTimer>

  HAL_SuspendTick();
 8001c94:	f008 fa44 	bl	800a120 <HAL_SuspendTick>
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f00c f82f 	bl	800dcfc <HAL_PWREx_EnterSTOP2Mode>

//  HAL_DBGMCU_EnableDBGStopMode();
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	080156ec 	.word	0x080156ec
 8001ca8:	48001000 	.word	0x48001000
 8001cac:	48000800 	.word	0x48000800
 8001cb0:	08015710 	.word	0x08015710
 8001cb4:	200005a0 	.word	0x200005a0
 8001cb8:	200005ec 	.word	0x200005ec
 8001cbc:	20000278 	.word	0x20000278
 8001cc0:	58000400 	.word	0x58000400
 8001cc4:	58000800 	.word	0x58000800
 8001cc8:	200004b4 	.word	0x200004b4

08001ccc <ResetInactivityTimer>:

  HAL_PWR_EnterSTANDBYMode();
}

void ResetInactivityTimer(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  inactivity_timer_elapsed_flag = false;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <ResetInactivityTimer+0x1c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8001cd6:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <ResetInactivityTimer+0x20>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start_IT(&htim16);
 8001cde:	4803      	ldr	r0, [pc, #12]	@ (8001cec <ResetInactivityTimer+0x20>)
 8001ce0:	f00e fda2 	bl	8010828 <HAL_TIM_Base_Start_IT>
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000350 	.word	0x20000350
 8001cec:	200005ec 	.word	0x200005ec

08001cf0 <Wakeup_Reinit_Peripherals>:

void Wakeup_Reinit_Peripherals(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
    printf("Re-initializing peripherals after wakeup...\r\n");
 8001cf4:	4828      	ldr	r0, [pc, #160]	@ (8001d98 <Wakeup_Reinit_Peripherals+0xa8>)
 8001cf6:	f011 f97f 	bl	8012ff8 <puts>
    HAL_TIM_Base_DeInit(&htim2);
 8001cfa:	4828      	ldr	r0, [pc, #160]	@ (8001d9c <Wakeup_Reinit_Peripherals+0xac>)
 8001cfc:	f00e fd37 	bl	801076e <HAL_TIM_Base_DeInit>
    HAL_TIM_Base_DeInit(&htim16);
 8001d00:	4827      	ldr	r0, [pc, #156]	@ (8001da0 <Wakeup_Reinit_Peripherals+0xb0>)
 8001d02:	f00e fd34 	bl	801076e <HAL_TIM_Base_DeInit>
    HAL_ADC_DeInit(&hadc1);
 8001d06:	4827      	ldr	r0, [pc, #156]	@ (8001da4 <Wakeup_Reinit_Peripherals+0xb4>)
 8001d08:	f008 fd8c 	bl	800a824 <HAL_ADC_DeInit>
    HAL_I2C_DeInit(&hi2c1);
 8001d0c:	4826      	ldr	r0, [pc, #152]	@ (8001da8 <Wakeup_Reinit_Peripherals+0xb8>)
 8001d0e:	f00a fc4a 	bl	800c5a6 <HAL_I2C_DeInit>
    HAL_I2C_DeInit(&hi2c3);
 8001d12:	4826      	ldr	r0, [pc, #152]	@ (8001dac <Wakeup_Reinit_Peripherals+0xbc>)
 8001d14:	f00a fc47 	bl	800c5a6 <HAL_I2C_DeInit>
    HAL_UART_DeInit(&huart1);
 8001d18:	4825      	ldr	r0, [pc, #148]	@ (8001db0 <Wakeup_Reinit_Peripherals+0xc0>)
 8001d1a:	f00f f9ef 	bl	80110fc <HAL_UART_DeInit>

    MX_GPIO_Init();
 8001d1e:	f000 fb39 	bl	8002394 <MX_GPIO_Init>
    MX_DMA_Init();
 8001d22:	f7ff fa92 	bl	800124a <MX_DMA_Init>
    MX_ADC1_Init();
 8001d26:	f7ff f9ab 	bl	8001080 <MX_ADC1_Init>
    MX_I2C1_Init();
 8001d2a:	f000 fcb9 	bl	80026a0 <MX_I2C1_Init>
    MX_I2C3_Init();
 8001d2e:	f000 fcf7 	bl	8002720 <MX_I2C3_Init>
    MX_SPI2_Init();
 8001d32:	f001 f89d 	bl	8002e70 <MX_SPI2_Init>
    MX_TIM2_Init();
 8001d36:	f001 fb91 	bl	800345c <MX_TIM2_Init>
    MX_TIM16_Init();
 8001d3a:	f001 fbdd 	bl	80034f8 <MX_TIM16_Init>
    MX_USART1_UART_Init();
 8001d3e:	f001 fc97 	bl	8003670 <MX_USART1_UART_Init>

    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) { Error_Handler(); }
 8001d42:	4816      	ldr	r0, [pc, #88]	@ (8001d9c <Wakeup_Reinit_Peripherals+0xac>)
 8001d44:	f00e fd70 	bl	8010828 <HAL_TIM_Base_Start_IT>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf14      	ite	ne
 8001d4e:	2301      	movne	r3, #1
 8001d50:	2300      	moveq	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <Wakeup_Reinit_Peripherals+0x6c>
 8001d58:	f000 ffc0 	bl	8002cdc <Error_Handler>

    if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) != 0) {
 8001d5c:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <Wakeup_Reinit_Peripherals+0xc4>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	4815      	ldr	r0, [pc, #84]	@ (8001db8 <Wakeup_Reinit_Peripherals+0xc8>)
 8001d64:	f010 fb12 	bl	801238c <_Z14i2c_mux_selectP7i2c_muxi>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <Wakeup_Reinit_Peripherals+0x96>
        printf("Failed to re-select MUX channel %d after wakeup.\n", i2c_channel_to_use);
 8001d78:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <Wakeup_Reinit_Peripherals+0xc4>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480f      	ldr	r0, [pc, #60]	@ (8001dbc <Wakeup_Reinit_Peripherals+0xcc>)
 8001d80:	f011 f8ca 	bl	8012f18 <iprintf>
    } else {
        printf("I2C MUX channel %d re-selected successfully.\n", i2c_channel_to_use);
    }
}
 8001d84:	e005      	b.n	8001d92 <Wakeup_Reinit_Peripherals+0xa2>
        printf("I2C MUX channel %d re-selected successfully.\n", i2c_channel_to_use);
 8001d86:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <Wakeup_Reinit_Peripherals+0xc4>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480c      	ldr	r0, [pc, #48]	@ (8001dc0 <Wakeup_Reinit_Peripherals+0xd0>)
 8001d8e:	f011 f8c3 	bl	8012f18 <iprintf>
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	0801574c 	.word	0x0801574c
 8001d9c:	200005a0 	.word	0x200005a0
 8001da0:	200005ec 	.word	0x200005ec
 8001da4:	20000278 	.word	0x20000278
 8001da8:	200003d0 	.word	0x200003d0
 8001dac:	20000424 	.word	0x20000424
 8001db0:	20000638 	.word	0x20000638
 8001db4:	20000008 	.word	0x20000008
 8001db8:	20000354 	.word	0x20000354
 8001dbc:	0801577c 	.word	0x0801577c
 8001dc0:	080157b0 	.word	0x080157b0

08001dc4 <I2C_Scan>:

// ... I2C_Scan, printRegisters, and their helpers (printByteAsBinary)...
void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e3c <I2C_Scan+0x78>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d106      	bne.n	8001de4 <I2C_Scan+0x20>
        printf("Scanning I2C Bus 1 (MUX Channel %d)...\r\n", i2c_channel_to_use);
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <I2C_Scan+0x7c>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4819      	ldr	r0, [pc, #100]	@ (8001e44 <I2C_Scan+0x80>)
 8001dde:	f011 f89b 	bl	8012f18 <iprintf>
 8001de2:	e007      	b.n	8001df4 <I2C_Scan+0x30>
    } else if (hi2c->Instance == I2C3) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a17      	ldr	r2, [pc, #92]	@ (8001e48 <I2C_Scan+0x84>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d102      	bne.n	8001df4 <I2C_Scan+0x30>
        printf("Scanning I2C Bus 3...\r\n");
 8001dee:	4817      	ldr	r0, [pc, #92]	@ (8001e4c <I2C_Scan+0x88>)
 8001df0:	f011 f902 	bl	8012ff8 <puts>
    }

    HAL_StatusTypeDef res;
    for (uint8_t i = 1; i < 128; i++) {
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e015      	b.n	8001e26 <I2C_Scan+0x62>
        res = HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i << 1), 2, 10);
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	b299      	uxth	r1, r3
 8001e02:	230a      	movs	r3, #10
 8001e04:	2202      	movs	r2, #2
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f00b f838 	bl	800ce7c <HAL_I2C_IsDeviceReady>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	73bb      	strb	r3, [r7, #14]
        if (res == HAL_OK) {
 8001e10:	7bbb      	ldrb	r3, [r7, #14]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d104      	bne.n	8001e20 <I2C_Scan+0x5c>
            printf("I2C Device Found at Address: 0x%02X\r\n", i);
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <I2C_Scan+0x8c>)
 8001e1c:	f011 f87c 	bl	8012f18 <iprintf>
    for (uint8_t i = 1; i < 128; i++) {
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	3301      	adds	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
 8001e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	dae5      	bge.n	8001dfa <I2C_Scan+0x36>
        }
    }
    printf("I2C Scan Complete.\r\n");
 8001e2e:	4809      	ldr	r0, [pc, #36]	@ (8001e54 <I2C_Scan+0x90>)
 8001e30:	f011 f8e2 	bl	8012ff8 <puts>
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	20000008 	.word	0x20000008
 8001e44:	080157e0 	.word	0x080157e0
 8001e48:	40005c00 	.word	0x40005c00
 8001e4c:	0801580c 	.word	0x0801580c
 8001e50:	08015824 	.word	0x08015824
 8001e54:	0801584c 	.word	0x0801584c

08001e58 <_ZL17printByteAsBinaryh>:

static void printByteAsBinary(uint8_t value) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  for (int i = 7; i >= 0; i--) {
 8001e62:	2307      	movs	r3, #7
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	e00c      	b.n	8001e82 <_ZL17printByteAsBinaryh+0x2a>
    printf("%d", (value >> i) & 1);
 8001e68:	79fa      	ldrb	r2, [r7, #7]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	fa42 f303 	asr.w	r3, r2, r3
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	4619      	mov	r1, r3
 8001e76:	4807      	ldr	r0, [pc, #28]	@ (8001e94 <_ZL17printByteAsBinaryh+0x3c>)
 8001e78:	f011 f84e 	bl	8012f18 <iprintf>
  for (int i = 7; i >= 0; i--) {
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	daef      	bge.n	8001e68 <_ZL17printByteAsBinaryh+0x10>
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	08015860 	.word	0x08015860

08001e98 <_ZL19print2BytesAsBinaryt>:

static void print2BytesAsBinary(uint16_t value) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  for (int i = 15; i >= 0; i--) {
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	e00c      	b.n	8001ec2 <_ZL19print2BytesAsBinaryt+0x2a>
    printf("%d", (value >> i) & 1);
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	fa42 f303 	asr.w	r3, r2, r3
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4807      	ldr	r0, [pc, #28]	@ (8001ed4 <_ZL19print2BytesAsBinaryt+0x3c>)
 8001eb8:	f011 f82e 	bl	8012f18 <iprintf>
  for (int i = 15; i >= 0; i--) {
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	daef      	bge.n	8001ea8 <_ZL19print2BytesAsBinaryt+0x10>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	08015860 	.word	0x08015860

08001ed8 <printRegisters>:

void printRegisters(uint8_t driver_id) {
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  printf("--- DRV8214 Driver %d Status ---\n", driver_id);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	484a      	ldr	r0, [pc, #296]	@ (8002010 <printRegisters+0x138>)
 8001ee8:	f011 f816 	bl	8012f18 <iprintf>
  printf(" Speed: %d RPM | Voltage: %.2fV | Current: %.2fA\n",
         drivers[driver_id].getMotorSpeedRPM(),
 8001eec:	79fa      	ldrb	r2, [r7, #7]
  printf(" Speed: %d RPM | Voltage: %.2fV | Current: %.2fA\n",
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4a47      	ldr	r2, [pc, #284]	@ (8002014 <printRegisters+0x13c>)
 8001ef8:	4413      	add	r3, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f006 fc10 	bl	8008720 <_ZN7DRV821416getMotorSpeedRPMEv>
 8001f00:	4606      	mov	r6, r0
         drivers[driver_id].getMotorVoltage(),
 8001f02:	79fa      	ldrb	r2, [r7, #7]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4a41      	ldr	r2, [pc, #260]	@ (8002014 <printRegisters+0x13c>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f006 fc5f 	bl	80087d4 <_ZN7DRV821415getMotorVoltageEv>
 8001f16:	ee10 3a10 	vmov	r3, s0
  printf(" Speed: %d RPM | Voltage: %.2fV | Current: %.2fA\n",
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe faec 	bl	80004f8 <__aeabi_f2d>
 8001f20:	4604      	mov	r4, r0
 8001f22:	460d      	mov	r5, r1
         drivers[driver_id].getMotorCurrent());
 8001f24:	79fa      	ldrb	r2, [r7, #7]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4a39      	ldr	r2, [pc, #228]	@ (8002014 <printRegisters+0x13c>)
 8001f30:	4413      	add	r3, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f006 fcc0 	bl	80088b8 <_ZN7DRV821415getMotorCurrentEv>
 8001f38:	ee10 3a10 	vmov	r3, s0
  printf(" Speed: %d RPM | Voltage: %.2fV | Current: %.2fA\n",
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fadb 	bl	80004f8 <__aeabi_f2d>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	e9cd 2300 	strd	r2, r3, [sp]
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	462b      	mov	r3, r5
 8001f4e:	4631      	mov	r1, r6
 8001f50:	4831      	ldr	r0, [pc, #196]	@ (8002018 <printRegisters+0x140>)
 8001f52:	f010 ffe1 	bl	8012f18 <iprintf>
  printf(" Ripple Counter: %hu (0b", drivers[driver_id].getRippleCount());
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4a2c      	ldr	r2, [pc, #176]	@ (8002014 <printRegisters+0x13c>)
 8001f62:	4413      	add	r3, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f006 fc17 	bl	8008798 <_ZN7DRV821414getRippleCountEv>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	482b      	ldr	r0, [pc, #172]	@ (800201c <printRegisters+0x144>)
 8001f70:	f010 ffd2 	bl	8012f18 <iprintf>
  print2BytesAsBinary(drivers[driver_id].getRippleCount());
 8001f74:	79fa      	ldrb	r2, [r7, #7]
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4a25      	ldr	r2, [pc, #148]	@ (8002014 <printRegisters+0x13c>)
 8001f80:	4413      	add	r3, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f006 fc08 	bl	8008798 <_ZN7DRV821414getRippleCountEv>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff84 	bl	8001e98 <_ZL19print2BytesAsBinaryt>
  printf(")\n");
 8001f90:	4823      	ldr	r0, [pc, #140]	@ (8002020 <printRegisters+0x148>)
 8001f92:	f011 f831 	bl	8012ff8 <puts>
  drivers[driver_id].printFaultStatus();
 8001f96:	79fa      	ldrb	r2, [r7, #7]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002014 <printRegisters+0x13c>)
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f007 fe87 	bl	8009cb8 <_ZN7DRV821416printFaultStatusEv>
  printf("--- Configuration ---\n");
 8001faa:	481e      	ldr	r0, [pc, #120]	@ (8002024 <printRegisters+0x14c>)
 8001fac:	f011 f824 	bl	8012ff8 <puts>
  printf(" REG_CTRL1 (Target Speed): 0b"); printByteAsBinary(drivers[driver_id].getREG_CTRL1()); printf("\n");
 8001fb0:	481d      	ldr	r0, [pc, #116]	@ (8002028 <printRegisters+0x150>)
 8001fb2:	f010 ffb1 	bl	8012f18 <iprintf>
 8001fb6:	79fa      	ldrb	r2, [r7, #7]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4a14      	ldr	r2, [pc, #80]	@ (8002014 <printRegisters+0x13c>)
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f006 fc9b 	bl	8008900 <_ZN7DRV821412getREG_CTRL1Ev>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff43 	bl	8001e58 <_ZL17printByteAsBinaryh>
 8001fd2:	200a      	movs	r0, #10
 8001fd4:	f010 ffb2 	bl	8012f3c <putchar>
  printf(" REG_CTRL2 (Duty Cycle)  : 0b"); printByteAsBinary(drivers[driver_id].getREG_CTRL2()); printf("\n");
 8001fd8:	4814      	ldr	r0, [pc, #80]	@ (800202c <printRegisters+0x154>)
 8001fda:	f010 ff9d 	bl	8012f18 <iprintf>
 8001fde:	79fa      	ldrb	r2, [r7, #7]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <printRegisters+0x13c>)
 8001fea:	4413      	add	r3, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f006 fc96 	bl	800891e <_ZN7DRV821412getREG_CTRL2Ev>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff2f 	bl	8001e58 <_ZL17printByteAsBinaryh>
 8001ffa:	200a      	movs	r0, #10
 8001ffc:	f010 ff9e 	bl	8012f3c <putchar>
  printf("--------------------------------\n");
 8002000:	480b      	ldr	r0, [pc, #44]	@ (8002030 <printRegisters+0x158>)
 8002002:	f010 fff9 	bl	8012ff8 <puts>
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200e:	bf00      	nop
 8002010:	08015864 	.word	0x08015864
 8002014:	20000360 	.word	0x20000360
 8002018:	08015888 	.word	0x08015888
 800201c:	080158bc 	.word	0x080158bc
 8002020:	080158d8 	.word	0x080158d8
 8002024:	080158dc 	.word	0x080158dc
 8002028:	080158f4 	.word	0x080158f4
 800202c:	08015914 	.word	0x08015914
 8002030:	08015934 	.word	0x08015934

08002034 <_ZL15Init_Muliplexerv>:

static void Init_Muliplexer(void) {
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
    printf("Initializing PCA9546A multiplexer... ");
 8002038:	482a      	ldr	r0, [pc, #168]	@ (80020e4 <_ZL15Init_Muliplexerv+0xb0>)
 800203a:	f010 ff6d 	bl	8012f18 <iprintf>
    i2c_multiplexer.hi2c = &hi2c1;
 800203e:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <_ZL15Init_Muliplexerv+0xb4>)
 8002040:	4a2a      	ldr	r2, [pc, #168]	@ (80020ec <_ZL15Init_Muliplexerv+0xb8>)
 8002042:	601a      	str	r2, [r3, #0]
    i2c_multiplexer.rst_port = MUX_RESET_GPIO_Port;
 8002044:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <_ZL15Init_Muliplexerv+0xb4>)
 8002046:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800204a:	605a      	str	r2, [r3, #4]
    i2c_multiplexer.rst_pin = MUX_RESET_Pin;
 800204c:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <_ZL15Init_Muliplexerv+0xb4>)
 800204e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002052:	811a      	strh	r2, [r3, #8]
    i2c_multiplexer.addr_offset = 0;
 8002054:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <_ZL15Init_Muliplexerv+0xb4>)
 8002056:	2200      	movs	r2, #0
 8002058:	729a      	strb	r2, [r3, #10]
    // Set initial channel based on switch and wake nSLEEP pin
    if (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_SET) {
 800205a:	2108      	movs	r1, #8
 800205c:	4824      	ldr	r0, [pc, #144]	@ (80020f0 <_ZL15Init_Muliplexerv+0xbc>)
 800205e:	f00a f99b 	bl	800c398 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00d      	beq.n	800208e <_ZL15Init_Muliplexerv+0x5a>
        i2c_channel_to_use = 0;
 8002072:	4b20      	ldr	r3, [pc, #128]	@ (80020f4 <_ZL15Init_Muliplexerv+0xc0>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	2102      	movs	r1, #2
 800207c:	481c      	ldr	r0, [pc, #112]	@ (80020f0 <_ZL15Init_Muliplexerv+0xbc>)
 800207e:	f00a f9a3 	bl	800c3c8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	2180      	movs	r1, #128	@ 0x80
 8002086:	481c      	ldr	r0, [pc, #112]	@ (80020f8 <_ZL15Init_Muliplexerv+0xc4>)
 8002088:	f00a f99e 	bl	800c3c8 <HAL_GPIO_WritePin>
 800208c:	e00c      	b.n	80020a8 <_ZL15Init_Muliplexerv+0x74>
    } else {
        i2c_channel_to_use = 1;
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <_ZL15Init_Muliplexerv+0xc0>)
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	2102      	movs	r1, #2
 8002098:	4815      	ldr	r0, [pc, #84]	@ (80020f0 <_ZL15Init_Muliplexerv+0xbc>)
 800209a:	f00a f995 	bl	800c3c8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(nSLEEP_REAR_GPIO_Port, nSLEEP_REAR_Pin, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	2180      	movs	r1, #128	@ 0x80
 80020a2:	4815      	ldr	r0, [pc, #84]	@ (80020f8 <_ZL15Init_Muliplexerv+0xc4>)
 80020a4:	f00a f990 	bl	800c3c8 <HAL_GPIO_WritePin>
    }
    if (i2c_mux_select(&i2c_multiplexer, i2c_channel_to_use) == 0) {
 80020a8:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <_ZL15Init_Muliplexerv+0xc0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	480e      	ldr	r0, [pc, #56]	@ (80020e8 <_ZL15Init_Muliplexerv+0xb4>)
 80020b0:	f010 f96c 	bl	801238c <_Z14i2c_mux_selectP7i2c_muxi>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <_ZL15Init_Muliplexerv+0x9e>
        printf("PCA9546A Initialized Successfully! Channel %d selected.\n", i2c_channel_to_use);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <_ZL15Init_Muliplexerv+0xc0>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	480c      	ldr	r0, [pc, #48]	@ (80020fc <_ZL15Init_Muliplexerv+0xc8>)
 80020cc:	f010 ff24 	bl	8012f18 <iprintf>
    } else {
        printf("Failed to select channel %d.\n", i2c_channel_to_use);
    }
}
 80020d0:	e005      	b.n	80020de <_ZL15Init_Muliplexerv+0xaa>
        printf("Failed to select channel %d.\n", i2c_channel_to_use);
 80020d2:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <_ZL15Init_Muliplexerv+0xc0>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	4619      	mov	r1, r3
 80020d8:	4809      	ldr	r0, [pc, #36]	@ (8002100 <_ZL15Init_Muliplexerv+0xcc>)
 80020da:	f010 ff1d 	bl	8012f18 <iprintf>
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	08015958 	.word	0x08015958
 80020e8:	20000354 	.word	0x20000354
 80020ec:	200003d0 	.word	0x200003d0
 80020f0:	48001000 	.word	0x48001000
 80020f4:	20000008 	.word	0x20000008
 80020f8:	48000800 	.word	0x48000800
 80020fc:	08015980 	.word	0x08015980
 8002100:	080159bc 	.word	0x080159bc

08002104 <_ZL18Init_Motor_Driversv>:

static void Init_Motor_Drivers(void) {
 8002104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002106:	b08d      	sub	sp, #52	@ 0x34
 8002108:	af00      	add	r7, sp, #0
    printf("Initializing DRV8214 drivers...\n");
 800210a:	4836      	ldr	r0, [pc, #216]	@ (80021e4 <_ZL18Init_Motor_Driversv+0xe0>)
 800210c:	f010 ff74 	bl	8012ff8 <puts>
    drv8214_i2c_set_handle(&hi2c1);
 8002110:	4835      	ldr	r0, [pc, #212]	@ (80021e8 <_ZL18Init_Motor_Driversv+0xe4>)
 8002112:	f007 fe7d 	bl	8009e10 <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef>
	// We only initialize the active driver to save time, the other is initialized on channel switch
    driver_configs[i2c_channel_to_use] = DRV8214_Config();
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	222c      	movs	r2, #44	@ 0x2c
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f010 ff73 	bl	8013008 <memset>
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f8b9 	bl	800129c <_ZN14DRV8214_ConfigC1Ev>
 800212a:	4b30      	ldr	r3, [pc, #192]	@ (80021ec <_ZL18Init_Motor_Driversv+0xe8>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	232c      	movs	r3, #44	@ 0x2c
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	4a2e      	ldr	r2, [pc, #184]	@ (80021f0 <_ZL18Init_Motor_Driversv+0xec>)
 8002138:	4413      	add	r3, r2
 800213a:	1d3c      	adds	r4, r7, #4
 800213c:	469c      	mov	ip, r3
 800213e:	f104 0e20 	add.w	lr, r4, #32
 8002142:	4665      	mov	r5, ip
 8002144:	4626      	mov	r6, r4
 8002146:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002148:	6028      	str	r0, [r5, #0]
 800214a:	6069      	str	r1, [r5, #4]
 800214c:	60aa      	str	r2, [r5, #8]
 800214e:	60eb      	str	r3, [r5, #12]
 8002150:	3410      	adds	r4, #16
 8002152:	f10c 0c10 	add.w	ip, ip, #16
 8002156:	4574      	cmp	r4, lr
 8002158:	d1f3      	bne.n	8002142 <_ZL18Init_Motor_Driversv+0x3e>
 800215a:	4662      	mov	r2, ip
 800215c:	4623      	mov	r3, r4
 800215e:	cb03      	ldmia	r3!, {r0, r1}
 8002160:	6010      	str	r0, [r2, #0]
 8002162:	6051      	str	r1, [r2, #4]
 8002164:	8819      	ldrh	r1, [r3, #0]
 8002166:	789b      	ldrb	r3, [r3, #2]
 8002168:	8111      	strh	r1, [r2, #8]
 800216a:	7293      	strb	r3, [r2, #10]
    if (drivers[i2c_channel_to_use].init(driver_configs[i2c_channel_to_use]) == DRV8214_OK) {
 800216c:	4b1f      	ldr	r3, [pc, #124]	@ (80021ec <_ZL18Init_Motor_Driversv+0xe8>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4a1e      	ldr	r2, [pc, #120]	@ (80021f4 <_ZL18Init_Motor_Driversv+0xf0>)
 800217c:	441a      	add	r2, r3
 800217e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <_ZL18Init_Motor_Driversv+0xe8>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	4619      	mov	r1, r3
 8002184:	232c      	movs	r3, #44	@ 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4919      	ldr	r1, [pc, #100]	@ (80021f0 <_ZL18Init_Motor_Driversv+0xec>)
 800218c:	440b      	add	r3, r1
 800218e:	4619      	mov	r1, r3
 8002190:	4610      	mov	r0, r2
 8002192:	f006 fa21 	bl	80085d8 <_ZN7DRV82144initERK14DRV8214_Config>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d012      	beq.n	80021cc <_ZL18Init_Motor_Driversv+0xc8>
        drivers[i2c_channel_to_use].resetFaultFlags();
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <_ZL18Init_Motor_Driversv+0xe8>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4a0f      	ldr	r2, [pc, #60]	@ (80021f4 <_ZL18Init_Motor_Driversv+0xf0>)
 80021b6:	4413      	add	r3, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f006 fc28 	bl	8008a0e <_ZN7DRV821415resetFaultFlagsEv>
        printf("DRV8214 driver %d initialized successfully!\n", i2c_channel_to_use);
 80021be:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <_ZL18Init_Motor_Driversv+0xe8>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	4619      	mov	r1, r3
 80021c4:	480c      	ldr	r0, [pc, #48]	@ (80021f8 <_ZL18Init_Motor_Driversv+0xf4>)
 80021c6:	f010 fea7 	bl	8012f18 <iprintf>
    } else {
        printf("Failed to initialize DRV8214 driver %d.\n", i2c_channel_to_use);
        Error_Handler();
    }
}
 80021ca:	e007      	b.n	80021dc <_ZL18Init_Motor_Driversv+0xd8>
        printf("Failed to initialize DRV8214 driver %d.\n", i2c_channel_to_use);
 80021cc:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <_ZL18Init_Motor_Driversv+0xe8>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	480a      	ldr	r0, [pc, #40]	@ (80021fc <_ZL18Init_Motor_Driversv+0xf8>)
 80021d4:	f010 fea0 	bl	8012f18 <iprintf>
        Error_Handler();
 80021d8:	f000 fd80 	bl	8002cdc <Error_Handler>
}
 80021dc:	bf00      	nop
 80021de:	3734      	adds	r7, #52	@ 0x34
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e4:	080159dc 	.word	0x080159dc
 80021e8:	200003d0 	.word	0x200003d0
 80021ec:	20000008 	.word	0x20000008
 80021f0:	2000001c 	.word	0x2000001c
 80021f4:	20000360 	.word	0x20000360
 80021f8:	080159fc 	.word	0x080159fc
 80021fc:	08015a2c 	.word	0x08015a2c

08002200 <_ZL8Init_IMUv>:

static void Init_IMU(void) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
    printf("Initializing BMI270 IMU... ");
 8002206:	481d      	ldr	r0, [pc, #116]	@ (800227c <_ZL8Init_IMUv+0x7c>)
 8002208:	f010 fe86 	bl	8012f18 <iprintf>
    bmi2_set_i2c_handle(&hi2c3); // Link the driver to the I2C handle
 800220c:	481c      	ldr	r0, [pc, #112]	@ (8002280 <_ZL8Init_IMUv+0x80>)
 800220e:	f006 f939 	bl	8008484 <bmi2_set_i2c_handle>
    bmi270_sensor.intf_ptr = &hi2c3;
 8002212:	4b1c      	ldr	r3, [pc, #112]	@ (8002284 <_ZL8Init_IMUv+0x84>)
 8002214:	4a1a      	ldr	r2, [pc, #104]	@ (8002280 <_ZL8Init_IMUv+0x80>)
 8002216:	605a      	str	r2, [r3, #4]
    bmi270_sensor.intf = BMI2_I2C_INTF;
 8002218:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <_ZL8Init_IMUv+0x84>)
 800221a:	2201      	movs	r2, #1
 800221c:	725a      	strb	r2, [r3, #9]
    bmi270_sensor.read = bmi2_i2c_read;
 800221e:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <_ZL8Init_IMUv+0x84>)
 8002220:	4a19      	ldr	r2, [pc, #100]	@ (8002288 <_ZL8Init_IMUv+0x88>)
 8002222:	639a      	str	r2, [r3, #56]	@ 0x38
    bmi270_sensor.write = bmi2_i2c_write;
 8002224:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <_ZL8Init_IMUv+0x84>)
 8002226:	4a19      	ldr	r2, [pc, #100]	@ (800228c <_ZL8Init_IMUv+0x8c>)
 8002228:	63da      	str	r2, [r3, #60]	@ 0x3c
    bmi270_sensor.delay_us = bmi2_delay_us;
 800222a:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <_ZL8Init_IMUv+0x84>)
 800222c:	4a18      	ldr	r2, [pc, #96]	@ (8002290 <_ZL8Init_IMUv+0x90>)
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40
    bmi270_sensor.read_write_len = 32;
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <_ZL8Init_IMUv+0x84>)
 8002232:	2220      	movs	r2, #32
 8002234:	81da      	strh	r2, [r3, #14]
    bmi270_sensor.config_file_ptr = NULL;
 8002236:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <_ZL8Init_IMUv+0x84>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
    int8_t rslt_bmi = bmi270_init(&bmi270_sensor);
 800223c:	4811      	ldr	r0, [pc, #68]	@ (8002284 <_ZL8Init_IMUv+0x84>)
 800223e:	f003 fb49 	bl	80058d4 <bmi270_init>
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
    if (rslt_bmi == BMI2_OK) {
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <_ZL8Init_IMUv+0x62>
        printf("BMI270 initialized successfully! Chip ID: 0x%X\r\n", bmi270_sensor.chip_id);
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <_ZL8Init_IMUv+0x84>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	480f      	ldr	r0, [pc, #60]	@ (8002294 <_ZL8Init_IMUv+0x94>)
 8002256:	f010 fe5f 	bl	8012f18 <iprintf>
		Configure_BMI270_LowPower_AnyMotion(&bmi270_sensor);
 800225a:	480a      	ldr	r0, [pc, #40]	@ (8002284 <_ZL8Init_IMUv+0x84>)
 800225c:	f7ff fbbe 	bl	80019dc <_ZL35Configure_BMI270_LowPower_AnyMotionP8bmi2_dev>

    } else {
        printf("BMI270 initialization failed. Error code: %d\r\n", rslt_bmi);
        Error_Handler();
    }
}
 8002260:	e007      	b.n	8002272 <_ZL8Init_IMUv+0x72>
        printf("BMI270 initialization failed. Error code: %d\r\n", rslt_bmi);
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	4619      	mov	r1, r3
 8002268:	480b      	ldr	r0, [pc, #44]	@ (8002298 <_ZL8Init_IMUv+0x98>)
 800226a:	f010 fe55 	bl	8012f18 <iprintf>
        Error_Handler();
 800226e:	f000 fd35 	bl	8002cdc <Error_Handler>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	08015a58 	.word	0x08015a58
 8002280:	20000424 	.word	0x20000424
 8002284:	200002e8 	.word	0x200002e8
 8002288:	080084a5 	.word	0x080084a5
 800228c:	080084fd 	.word	0x080084fd
 8002290:	08008555 	.word	0x08008555
 8002294:	08015a74 	.word	0x08015a74
 8002298:	08015aa8 	.word	0x08015aa8

0800229c <_ZL20LED_Startup_Sequencev>:

static void LED_Startup_Sequence(void) {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
    WS2812_SetColor(255, 0, 0, 100); HAL_Delay(330);     // Red
 80022a0:	2364      	movs	r3, #100	@ 0x64
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	20ff      	movs	r0, #255	@ 0xff
 80022a8:	f7fe fe4a 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
 80022ac:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 80022b0:	f007 ff12 	bl	800a0d8 <HAL_Delay>
    WS2812_SetColor(0, 255, 0, 100); HAL_Delay(330);     // Green
 80022b4:	2364      	movs	r3, #100	@ 0x64
 80022b6:	2200      	movs	r2, #0
 80022b8:	21ff      	movs	r1, #255	@ 0xff
 80022ba:	2000      	movs	r0, #0
 80022bc:	f7fe fe40 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
 80022c0:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 80022c4:	f007 ff08 	bl	800a0d8 <HAL_Delay>
    WS2812_SetColor(0, 0, 255, 100); HAL_Delay(330);     // Blue
 80022c8:	2364      	movs	r3, #100	@ 0x64
 80022ca:	22ff      	movs	r2, #255	@ 0xff
 80022cc:	2100      	movs	r1, #0
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7fe fe36 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
 80022d4:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 80022d8:	f007 fefe 	bl	800a0d8 <HAL_Delay>
    WS2812_SetColor(255, 255, 255, 100); HAL_Delay(330); // White
 80022dc:	2364      	movs	r3, #100	@ 0x64
 80022de:	22ff      	movs	r2, #255	@ 0xff
 80022e0:	21ff      	movs	r1, #255	@ 0xff
 80022e2:	20ff      	movs	r0, #255	@ 0xff
 80022e4:	f7fe fe2c 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
 80022e8:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 80022ec:	f007 fef4 	bl	800a0d8 <HAL_Delay>
    WS2812_SetColor(0, 0, 0, 0); // Turn off LEDs
 80022f0:	2300      	movs	r3, #0
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7fe fe22 	bl	8000f40 <_Z15WS2812_SetColorhhhh>
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <_Z41__static_initialization_and_destruction_0v>:
    }
    __HAL_TIM_SET_AUTORELOAD(&htim16, delay_ms);
    __HAL_TIM_SET_COUNTER(&htim16, 0); // Reset the timer counter
    HAL_TIM_Base_Start_IT(&htim16);    // Start the timer with interrupt enabled
    printf("Inactivity timer set for %lu ms.\r\n", (unsigned long)delay_ms);
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b085      	sub	sp, #20
 8002304:	af04      	add	r7, sp, #16
};
 8002306:	4c13      	ldr	r4, [pc, #76]	@ (8002354 <_Z41__static_initialization_and_destruction_0v+0x54>)
 8002308:	f240 4382 	movw	r3, #1154	@ 0x482
 800230c:	9303      	str	r3, [sp, #12]
 800230e:	231a      	movs	r3, #26
 8002310:	9302      	str	r3, [sp, #8]
 8002312:	2314      	movs	r3, #20
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	2306      	movs	r3, #6
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800231e:	2208      	movs	r2, #8
 8002320:	2138      	movs	r1, #56	@ 0x38
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff f814 	bl	8001350 <_ZN7DRV8214C1Ehhthhht>
 8002328:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800232c:	f240 4382 	movw	r3, #1154	@ 0x482
 8002330:	9303      	str	r3, [sp, #12]
 8002332:	231a      	movs	r3, #26
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	2314      	movs	r3, #20
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	2306      	movs	r3, #6
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8002342:	2211      	movs	r2, #17
 8002344:	2138      	movs	r1, #56	@ 0x38
 8002346:	f7ff f803 	bl	8001350 <_ZN7DRV8214C1Ehhthhht>
 800234a:	bf00      	nop
 800234c:	3704      	adds	r7, #4
 800234e:	46bd      	mov	sp, r7
 8002350:	bd90      	pop	{r4, r7, pc}
 8002352:	bf00      	nop
 8002354:	20000360 	.word	0x20000360

08002358 <_GLOBAL__sub_I_g_measure_battery_flag>:
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
 800235c:	f7ff ffd0 	bl	8002300 <_Z41__static_initialization_and_destruction_0v>
 8002360:	bd80      	pop	{r7, pc}

08002362 <LL_AHB2_GRP1_EnableClock>:
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800236a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800236e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002370:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4313      	orrs	r3, r2
 8002378:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4013      	ands	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7ff ffda 	bl	8002362 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	2004      	movs	r0, #4
 80023b0:	f7ff ffd7 	bl	8002362 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b4:	2002      	movs	r0, #2
 80023b6:	f7ff ffd4 	bl	8002362 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ba:	2080      	movs	r0, #128	@ 0x80
 80023bc:	f7ff ffd1 	bl	8002362 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c0:	2008      	movs	r0, #8
 80023c2:	f7ff ffce 	bl	8002362 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c6:	2010      	movs	r0, #16
 80023c8:	f7ff ffcb 	bl	8002362 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN2_Pin|EN1_Pin, GPIO_PIN_RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	210c      	movs	r1, #12
 80023d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023d4:	f009 fff8 	bl	800c3c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_5V_EN_Pin|nSLEEP_REAR_Pin, GPIO_PIN_RESET);
 80023d8:	2200      	movs	r2, #0
 80023da:	2184      	movs	r1, #132	@ 0x84
 80023dc:	4888      	ldr	r0, [pc, #544]	@ (8002600 <MX_GPIO_Init+0x26c>)
 80023de:	f009 fff3 	bl	800c3c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_RESET_GPIO_Port, MUX_RESET_Pin, GPIO_PIN_SET);
 80023e2:	2201      	movs	r2, #1
 80023e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ec:	f009 ffec 	bl	800c3c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_SENSE_EN_GPIO_Port, BAT_SENSE_EN_Pin, GPIO_PIN_RESET);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2102      	movs	r1, #2
 80023f4:	4883      	ldr	r0, [pc, #524]	@ (8002604 <MX_GPIO_Init+0x270>)
 80023f6:	f009 ffe7 	bl	800c3c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_FRONT_GPIO_Port, nSLEEP_FRONT_Pin, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2102      	movs	r1, #2
 80023fe:	4882      	ldr	r0, [pc, #520]	@ (8002608 <MX_GPIO_Init+0x274>)
 8002400:	f009 ffe2 	bl	800c3c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN2_Pin MUX_RESET_Pin EN1_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|MUX_RESET_Pin|EN1_Pin;
 8002404:	f248 030c 	movw	r3, #32780	@ 0x800c
 8002408:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240a:	2301      	movs	r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	4619      	mov	r1, r3
 800241a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800241e:	f009 fd6d 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8002422:	2301      	movs	r3, #1
 8002424:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002426:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800242a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800242c:	2302      	movs	r3, #2
 800242e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	4619      	mov	r1, r3
 8002434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002438:	f009 fd60 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_5V_EN_Pin */
  GPIO_InitStruct.Pin = LED_5V_EN_Pin;
 800243c:	2304      	movs	r3, #4
 800243e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002440:	2301      	movs	r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002448:	2302      	movs	r3, #2
 800244a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_5V_EN_GPIO_Port, &GPIO_InitStruct);
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	4619      	mov	r1, r3
 8002450:	486b      	ldr	r0, [pc, #428]	@ (8002600 <MX_GPIO_Init+0x26c>)
 8002452:	f009 fd53 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON5_Pin */
  GPIO_InitStruct.Pin = BUTTON5_Pin;
 8002456:	2308      	movs	r3, #8
 8002458:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800245a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800245e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON5_GPIO_Port, &GPIO_InitStruct);
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	4619      	mov	r1, r3
 8002468:	4866      	ldr	r0, [pc, #408]	@ (8002604 <MX_GPIO_Init+0x270>)
 800246a:	f009 fd47 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800246e:	23b0      	movs	r3, #176	@ 0xb0
 8002470:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002472:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002476:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002478:	2301      	movs	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	4619      	mov	r1, r3
 8002480:	4862      	ldr	r0, [pc, #392]	@ (800260c <MX_GPIO_Init+0x278>)
 8002482:	f009 fd3b 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 8002486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800248a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800248c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002492:	2301      	movs	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4859      	ldr	r0, [pc, #356]	@ (8002600 <MX_GPIO_Init+0x26c>)
 800249c:	f009 fd2e 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT13_Pin nFAULT17_Pin nFAULT3_Pin nFAULT4_Pin
                           nFAULT14_Pin nFAULT1_Pin */
  GPIO_InitStruct.Pin = nFAULT13_Pin|nFAULT17_Pin|nFAULT3_Pin|nFAULT4_Pin
 80024a0:	f246 430b 	movw	r3, #25611	@ 0x640b
 80024a4:	607b      	str	r3, [r7, #4]
                          |nFAULT14_Pin|nFAULT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4857      	ldr	r0, [pc, #348]	@ (8002610 <MX_GPIO_Init+0x27c>)
 80024b4:	f009 fd22 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT15_Pin nFAULT8_Pin */
  GPIO_InitStruct.Pin = nFAULT15_Pin|nFAULT8_Pin;
 80024b8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80024bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	4619      	mov	r1, r3
 80024ca:	4850      	ldr	r0, [pc, #320]	@ (800260c <MX_GPIO_Init+0x278>)
 80024cc:	f009 fd16 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT9_Pin nFAULT7_Pin nFAULT6_Pin */
  GPIO_InitStruct.Pin = nFAULT9_Pin|nFAULT7_Pin|nFAULT6_Pin;
 80024d0:	2315      	movs	r3, #21
 80024d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d8:	2301      	movs	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	4849      	ldr	r0, [pc, #292]	@ (8002608 <MX_GPIO_Init+0x274>)
 80024e2:	f009 fd0b 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pin : nFAULT12_Pin */
  GPIO_InitStruct.Pin = nFAULT12_Pin;
 80024e6:	2310      	movs	r3, #16
 80024e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(nFAULT12_GPIO_Port, &GPIO_InitStruct);
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4842      	ldr	r0, [pc, #264]	@ (8002600 <MX_GPIO_Init+0x26c>)
 80024f8:	f009 fd00 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT11_Pin nFAULT16_Pin nFAULT0_Pin nFAULT10_Pin */
  GPIO_InitStruct.Pin = nFAULT11_Pin|nFAULT16_Pin|nFAULT0_Pin|nFAULT10_Pin;
 80024fc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002500:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002506:	2301      	movs	r3, #1
 8002508:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	4619      	mov	r1, r3
 800250e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002512:	f009 fcf3 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pin : nFAULT2_Pin */
  GPIO_InitStruct.Pin = nFAULT2_Pin;
 8002516:	2301      	movs	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800251e:	2301      	movs	r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(nFAULT2_GPIO_Port, &GPIO_InitStruct);
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	4619      	mov	r1, r3
 8002526:	4837      	ldr	r0, [pc, #220]	@ (8002604 <MX_GPIO_Init+0x270>)
 8002528:	f009 fce8 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_SENSE_EN_Pin */
  GPIO_InitStruct.Pin = BAT_SENSE_EN_Pin;
 800252c:	2302      	movs	r3, #2
 800252e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002530:	2301      	movs	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BAT_SENSE_EN_GPIO_Port, &GPIO_InitStruct);
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	4619      	mov	r1, r3
 8002540:	4830      	ldr	r0, [pc, #192]	@ (8002604 <MX_GPIO_Init+0x270>)
 8002542:	f009 fcdb 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_FRONT_Pin */
  GPIO_InitStruct.Pin = nSLEEP_FRONT_Pin;
 8002546:	2302      	movs	r3, #2
 8002548:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254a:	2301      	movs	r3, #1
 800254c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(nSLEEP_FRONT_GPIO_Port, &GPIO_InitStruct);
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	4619      	mov	r1, r3
 800255a:	482b      	ldr	r0, [pc, #172]	@ (8002608 <MX_GPIO_Init+0x274>)
 800255c:	f009 fcce 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin SWITCH2_Pin CHARGE_STATUS_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|SWITCH2_Pin|CHARGE_STATUS_Pin;
 8002560:	f249 0310 	movw	r3, #36880	@ 0x9010
 8002564:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	4619      	mov	r1, r3
 8002572:	4827      	ldr	r0, [pc, #156]	@ (8002610 <MX_GPIO_Init+0x27c>)
 8002574:	f009 fcc2 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_REAR_Pin */
  GPIO_InitStruct.Pin = nSLEEP_REAR_Pin;
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257c:	2301      	movs	r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(nSLEEP_REAR_GPIO_Port, &GPIO_InitStruct);
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	4619      	mov	r1, r3
 800258c:	481c      	ldr	r0, [pc, #112]	@ (8002600 <MX_GPIO_Init+0x26c>)
 800258e:	f009 fcb5 	bl	800befc <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH1_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin;
 8002592:	2308      	movs	r3, #8
 8002594:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4819      	ldr	r0, [pc, #100]	@ (8002608 <MX_GPIO_Init+0x274>)
 80025a4:	f009 fcaa 	bl	800befc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	2006      	movs	r0, #6
 80025ae:	f009 f9e8 	bl	800b982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80025b2:	2006      	movs	r0, #6
 80025b4:	f009 f9ff 	bl	800b9b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	2009      	movs	r0, #9
 80025be:	f009 f9e0 	bl	800b982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80025c2:	2009      	movs	r0, #9
 80025c4:	f009 f9f7 	bl	800b9b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	200a      	movs	r0, #10
 80025ce:	f009 f9d8 	bl	800b982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025d2:	200a      	movs	r0, #10
 80025d4:	f009 f9ef 	bl	800b9b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	2017      	movs	r0, #23
 80025de:	f009 f9d0 	bl	800b982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025e2:	2017      	movs	r0, #23
 80025e4:	f009 f9e7 	bl	800b9b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	2028      	movs	r0, #40	@ 0x28
 80025ee:	f009 f9c8 	bl	800b982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025f2:	2028      	movs	r0, #40	@ 0x28
 80025f4:	f009 f9df 	bl	800b9b6 <HAL_NVIC_EnableIRQ>

}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	48000800 	.word	0x48000800
 8002604:	48001c00 	.word	0x48001c00
 8002608:	48001000 	.word	0x48001000
 800260c:	48000400 	.word	0x48000400
 8002610:	48000c00 	.word	0x48000c00

08002614 <LL_AHB2_GRP1_EnableClock>:
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800261c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002620:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002622:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4313      	orrs	r3, r2
 800262a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800262c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002630:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002638:	68fb      	ldr	r3, [r7, #12]
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002652:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002654:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4313      	orrs	r3, r2
 800265c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800265e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002662:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4013      	ands	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002684:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	43db      	mvns	r3, r3
 800268a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800268e:	4013      	ands	r3, r2
 8002690:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <MX_I2C1_Init+0x74>)
 80026a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002718 <MX_I2C1_Init+0x78>)
 80026a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0070133F;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <MX_I2C1_Init+0x74>)
 80026ac:	4a1b      	ldr	r2, [pc, #108]	@ (800271c <MX_I2C1_Init+0x7c>)
 80026ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026b0:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <MX_I2C1_Init+0x74>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026b6:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <MX_I2C1_Init+0x74>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026bc:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <MX_I2C1_Init+0x74>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026c2:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <MX_I2C1_Init+0x74>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <MX_I2C1_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <MX_I2C1_Init+0x74>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <MX_I2C1_Init+0x74>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026da:	480e      	ldr	r0, [pc, #56]	@ (8002714 <MX_I2C1_Init+0x74>)
 80026dc:	f009 fec8 	bl	800c470 <HAL_I2C_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026e6:	f000 faf9 	bl	8002cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026ea:	2100      	movs	r1, #0
 80026ec:	4809      	ldr	r0, [pc, #36]	@ (8002714 <MX_I2C1_Init+0x74>)
 80026ee:	f00a ffff 	bl	800d6f0 <HAL_I2CEx_ConfigAnalogFilter>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026f8:	f000 faf0 	bl	8002cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026fc:	2100      	movs	r1, #0
 80026fe:	4805      	ldr	r0, [pc, #20]	@ (8002714 <MX_I2C1_Init+0x74>)
 8002700:	f00b f841 	bl	800d786 <HAL_I2CEx_ConfigDigitalFilter>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800270a:	f000 fae7 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200003d0 	.word	0x200003d0
 8002718:	40005400 	.word	0x40005400
 800271c:	0070133f 	.word	0x0070133f

08002720 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002724:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <MX_I2C3_Init+0x74>)
 8002726:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <MX_I2C3_Init+0x78>)
 8002728:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0070133F;
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <MX_I2C3_Init+0x74>)
 800272c:	4a1b      	ldr	r2, [pc, #108]	@ (800279c <MX_I2C3_Init+0x7c>)
 800272e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002730:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <MX_I2C3_Init+0x74>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002736:	4b17      	ldr	r3, [pc, #92]	@ (8002794 <MX_I2C3_Init+0x74>)
 8002738:	2201      	movs	r2, #1
 800273a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800273c:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <MX_I2C3_Init+0x74>)
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002742:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <MX_I2C3_Init+0x74>)
 8002744:	2200      	movs	r2, #0
 8002746:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002748:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <MX_I2C3_Init+0x74>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800274e:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <MX_I2C3_Init+0x74>)
 8002750:	2200      	movs	r2, #0
 8002752:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002754:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <MX_I2C3_Init+0x74>)
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800275a:	480e      	ldr	r0, [pc, #56]	@ (8002794 <MX_I2C3_Init+0x74>)
 800275c:	f009 fe88 	bl	800c470 <HAL_I2C_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002766:	f000 fab9 	bl	8002cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800276a:	2100      	movs	r1, #0
 800276c:	4809      	ldr	r0, [pc, #36]	@ (8002794 <MX_I2C3_Init+0x74>)
 800276e:	f00a ffbf 	bl	800d6f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002778:	f000 fab0 	bl	8002cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800277c:	2100      	movs	r1, #0
 800277e:	4805      	ldr	r0, [pc, #20]	@ (8002794 <MX_I2C3_Init+0x74>)
 8002780:	f00b f801 	bl	800d786 <HAL_I2CEx_ConfigDigitalFilter>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800278a:	f000 faa7 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000424 	.word	0x20000424
 8002798:	40005c00 	.word	0x40005c00
 800279c:	0070133f 	.word	0x0070133f

080027a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b09c      	sub	sp, #112	@ 0x70
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	2250      	movs	r2, #80	@ 0x50
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f010 fc21 	bl	8013008 <memset>
  if(i2cHandle->Instance==I2C1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002880 <HAL_I2C_MspInit+0xe0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d127      	bne.n	8002820 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027d0:	2304      	movs	r3, #4
 80027d2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027d4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	4618      	mov	r0, r3
 80027e0:	f00c fddf 	bl	800f3a2 <HAL_RCCEx_PeriphCLKConfig>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80027ea:	f000 fa77 	bl	8002cdc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	2002      	movs	r0, #2
 80027f0:	f7ff ff10 	bl	8002614 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80027f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fa:	2312      	movs	r3, #18
 80027fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002806:	2304      	movs	r3, #4
 8002808:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800280e:	4619      	mov	r1, r3
 8002810:	481c      	ldr	r0, [pc, #112]	@ (8002884 <HAL_I2C_MspInit+0xe4>)
 8002812:	f009 fb73 	bl	800befc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002816:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800281a:	f7ff ff14 	bl	8002646 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800281e:	e02a      	b.n	8002876 <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C3)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a18      	ldr	r2, [pc, #96]	@ (8002888 <HAL_I2C_MspInit+0xe8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d125      	bne.n	8002876 <HAL_I2C_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800282a:	2308      	movs	r3, #8
 800282c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800282e:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002832:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	4618      	mov	r0, r3
 800283a:	f00c fdb2 	bl	800f3a2 <HAL_RCCEx_PeriphCLKConfig>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002844:	f000 fa4a 	bl	8002cdc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002848:	2004      	movs	r0, #4
 800284a:	f7ff fee3 	bl	8002614 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800284e:	2303      	movs	r3, #3
 8002850:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002852:	2312      	movs	r3, #18
 8002854:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285a:	2300      	movs	r3, #0
 800285c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800285e:	2304      	movs	r3, #4
 8002860:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002862:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002866:	4619      	mov	r1, r3
 8002868:	4808      	ldr	r0, [pc, #32]	@ (800288c <HAL_I2C_MspInit+0xec>)
 800286a:	f009 fb47 	bl	800befc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800286e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002872:	f7ff fee8 	bl	8002646 <LL_APB1_GRP1_EnableClock>
}
 8002876:	bf00      	nop
 8002878:	3770      	adds	r7, #112	@ 0x70
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40005400 	.word	0x40005400
 8002884:	48000400 	.word	0x48000400
 8002888:	40005c00 	.word	0x40005c00
 800288c:	48000800 	.word	0x48000800

08002890 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a13      	ldr	r2, [pc, #76]	@ (80028ec <HAL_I2C_MspDeInit+0x5c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d10e      	bne.n	80028c0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80028a2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80028a6:	f7ff fee7 	bl	8002678 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80028aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028ae:	4810      	ldr	r0, [pc, #64]	@ (80028f0 <HAL_I2C_MspDeInit+0x60>)
 80028b0:	f009 fc94 	bl	800c1dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80028b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028b8:	480d      	ldr	r0, [pc, #52]	@ (80028f0 <HAL_I2C_MspDeInit+0x60>)
 80028ba:	f009 fc8f 	bl	800c1dc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80028be:	e010      	b.n	80028e2 <HAL_I2C_MspDeInit+0x52>
  else if(i2cHandle->Instance==I2C3)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0b      	ldr	r2, [pc, #44]	@ (80028f4 <HAL_I2C_MspDeInit+0x64>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10b      	bne.n	80028e2 <HAL_I2C_MspDeInit+0x52>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80028ca:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80028ce:	f7ff fed3 	bl	8002678 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 80028d2:	2102      	movs	r1, #2
 80028d4:	4808      	ldr	r0, [pc, #32]	@ (80028f8 <HAL_I2C_MspDeInit+0x68>)
 80028d6:	f009 fc81 	bl	800c1dc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 80028da:	2101      	movs	r1, #1
 80028dc:	4806      	ldr	r0, [pc, #24]	@ (80028f8 <HAL_I2C_MspDeInit+0x68>)
 80028de:	f009 fc7d 	bl	800c1dc <HAL_GPIO_DeInit>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40005400 	.word	0x40005400
 80028f0:	48000400 	.word	0x48000400
 80028f4:	40005c00 	.word	0x40005c00
 80028f8:	48000800 	.word	0x48000800

080028fc <LL_AHB3_GRP1_EnableClock>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002908:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800290a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4313      	orrs	r3, r2
 8002912:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4013      	ands	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002920:	68fb      	ldr	r3, [r7, #12]
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <MX_IPCC_Init+0x20>)
 8002936:	4a07      	ldr	r2, [pc, #28]	@ (8002954 <MX_IPCC_Init+0x24>)
 8002938:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800293a:	4805      	ldr	r0, [pc, #20]	@ (8002950 <MX_IPCC_Init+0x20>)
 800293c:	f00a ff70 	bl	800d820 <HAL_IPCC_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002946:	f000 f9c9 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000478 	.word	0x20000478
 8002954:	58000c00 	.word	0x58000c00

08002958 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0d      	ldr	r2, [pc, #52]	@ (800299c <HAL_IPCC_MspInit+0x44>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d113      	bne.n	8002992 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800296a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800296e:	f7ff ffc5 	bl	80028fc <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	202c      	movs	r0, #44	@ 0x2c
 8002978:	f009 f803 	bl	800b982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800297c:	202c      	movs	r0, #44	@ 0x2c
 800297e:	f009 f81a 	bl	800b9b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2100      	movs	r1, #0
 8002986:	202d      	movs	r0, #45	@ 0x2d
 8002988:	f008 fffb 	bl	800b982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800298c:	202d      	movs	r0, #45	@ 0x2d
 800298e:	f009 f812 	bl	800b9b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	58000c00 	.word	0x58000c00

080029a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80029a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80029ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80029b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80029bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80029c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <ITM_SendChar+0x2c>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <ITM_SendChar+0x2e>
 80029cc:	2300      	movs	r3, #0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d010      	beq.n	80029f4 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80029d2:	e000      	b.n	80029d6 <ITM_SendChar+0x36>
    {
      __NOP();
 80029d4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80029d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f4      	bne.n	80029d4 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80029ea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80029f4:	687b      	ldr	r3, [r7, #4]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a06:	f007 fae1 	bl	8009fcc <HAL_Init>

  /* USER CODE BEGIN Init */
  CheckWakeupSource();
 8002a0a:	f7fe ffa7 	bl	800195c <CheckWakeupSource>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a0e:	f000 f81d 	bl	8002a4c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002a12:	f000 f891 	bl	8002b38 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002a16:	f7ff ff8b 	bl	8002930 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a1a:	f7ff fcbb 	bl	8002394 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a1e:	f7fe fc14 	bl	800124a <MX_DMA_Init>
  MX_ADC1_Init();
 8002a22:	f7fe fb2d 	bl	8001080 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002a26:	f7ff fe3b 	bl	80026a0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002a2a:	f7ff fe79 	bl	8002720 <MX_I2C3_Init>
  MX_RTC_Init();
 8002a2e:	f000 f985 	bl	8002d3c <MX_RTC_Init>
  MX_TIM2_Init();
 8002a32:	f000 fd13 	bl	800345c <MX_TIM2_Init>
  MX_SPI2_Init();
 8002a36:	f000 fa1b 	bl	8002e70 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002a3a:	f000 fe19 	bl	8003670 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8002a3e:	f000 fd5b 	bl	80034f8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  App_Init(); // Initialize application logic, drivers, and states
 8002a42:	f7fe fcb3 	bl	80013ac <App_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  { 
    App_Process();
 8002a46:	f7fe fcf7 	bl	8001438 <App_Process>
 8002a4a:	e7fc      	b.n	8002a46 <main+0x44>

08002a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b09a      	sub	sp, #104	@ 0x68
 8002a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a52:	f107 0320 	add.w	r3, r7, #32
 8002a56:	2248      	movs	r2, #72	@ 0x48
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f010 fad4 	bl	8013008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	611a      	str	r2, [r3, #16]
 8002a6e:	615a      	str	r2, [r3, #20]
 8002a70:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a72:	4b30      	ldr	r3, [pc, #192]	@ (8002b34 <SystemClock_Config+0xe8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8002b34 <SystemClock_Config+0xe8>)
 8002a7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b2c      	ldr	r3, [pc, #176]	@ (8002b34 <SystemClock_Config+0xe8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002a8e:	232b      	movs	r3, #43	@ 0x2b
 8002a90:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002aa2:	2340      	movs	r3, #64	@ 0x40
 8002aa4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002aaa:	2360      	movs	r3, #96	@ 0x60
 8002aac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002aae:	2305      	movs	r3, #5
 8002ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002aba:	2300      	movs	r3, #0
 8002abc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002abe:	231e      	movs	r3, #30
 8002ac0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ac2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8002ac8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002acc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ace:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ad2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ad4:	f107 0320 	add.w	r3, r7, #32
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f00b fcb1 	bl	800e440 <HAL_RCC_OscConfig>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002aee:	f000 f8f5 	bl	8002cdc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002af2:	236f      	movs	r3, #111	@ 0x6f
 8002af4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af6:	2303      	movs	r3, #3
 8002af8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	2102      	movs	r1, #2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f00c f808 	bl	800eb28 <HAL_RCC_ClockConfig>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf14      	ite	ne
 8002b1e:	2301      	movne	r3, #1
 8002b20:	2300      	moveq	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002b28:	f000 f8d8 	bl	8002cdc <Error_Handler>
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3768      	adds	r7, #104	@ 0x68
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	58000400 	.word	0x58000400

08002b38 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b094      	sub	sp, #80	@ 0x50
 8002b3c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b3e:	463b      	mov	r3, r7
 8002b40:	2250      	movs	r2, #80	@ 0x50
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f010 fa5f 	bl	8013008 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8002b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b4e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002b50:	2300      	movs	r3, #0
 8002b52:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002b54:	2310      	movs	r3, #16
 8002b56:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b58:	463b      	mov	r3, r7
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f00c fc21 	bl	800f3a2 <HAL_RCCEx_PeriphCLKConfig>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <_Z24PeriphCommonClock_Configv+0x3c>
  {
    Error_Handler();
 8002b70:	f000 f8b4 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002b74:	bf00      	nop
 8002b76:	3750      	adds	r7, #80	@ 0x50
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IMU_INT1_Pin)
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d106      	bne.n	8002b9a <HAL_GPIO_EXTI_Callback+0x1e>
  { 
	  imu_interrupt_flag = true;
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c38 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b92:	4a2a      	ldr	r2, [pc, #168]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	60d3      	str	r3, [r2, #12]
    wakeup_event = true; // Set flag for next loop iteration
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    button_ID = 5;
    ResetInactivityTimer();
  }
}
 8002b98:	e04a      	b.n	8002c30 <HAL_GPIO_EXTI_Callback+0xb4>
	else if (GPIO_Pin == BUTTON1_Pin) // Replace YOUR_BUTTON_PIN with the actual pin, e.g., GPIO_PIN_13
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	2b80      	cmp	r3, #128	@ 0x80
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x3c>
	  wakeup_event = true; // Set flag for next loop iteration
 8002ba0:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ba6:	4a25      	ldr	r2, [pc, #148]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	60d3      	str	r3, [r2, #12]
	  button_ID = 1;
 8002bac:	4b25      	ldr	r3, [pc, #148]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
    ResetInactivityTimer();
 8002bb2:	f7ff f88b 	bl	8001ccc <ResetInactivityTimer>
}
 8002bb6:	e03b      	b.n	8002c30 <HAL_GPIO_EXTI_Callback+0xb4>
  } else if (GPIO_Pin == BUTTON2_Pin) {
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_GPIO_EXTI_Callback+0x5a>
	  wakeup_event = true; // Set flag for next loop iteration
 8002bbe:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	60d3      	str	r3, [r2, #12]
	  button_ID = 2;
 8002bca:	4b1e      	ldr	r3, [pc, #120]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002bcc:	2202      	movs	r2, #2
 8002bce:	701a      	strb	r2, [r3, #0]
    ResetInactivityTimer();
 8002bd0:	f7ff f87c 	bl	8001ccc <ResetInactivityTimer>
}
 8002bd4:	e02c      	b.n	8002c30 <HAL_GPIO_EXTI_Callback+0xb4>
  else if (GPIO_Pin == BUTTON3_Pin) {
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d10b      	bne.n	8002bf4 <HAL_GPIO_EXTI_Callback+0x78>
	  wakeup_event = true; // Set flag for next loop iteration
 8002bdc:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002be2:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	60d3      	str	r3, [r2, #12]
	  button_ID = 3;
 8002be8:	4b16      	ldr	r3, [pc, #88]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002bea:	2203      	movs	r2, #3
 8002bec:	701a      	strb	r2, [r3, #0]
    ResetInactivityTimer();
 8002bee:	f7ff f86d 	bl	8001ccc <ResetInactivityTimer>
}
 8002bf2:	e01d      	b.n	8002c30 <HAL_GPIO_EXTI_Callback+0xb4>
  else if (GPIO_Pin == BUTTON4_Pin) {
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfa:	d10b      	bne.n	8002c14 <HAL_GPIO_EXTI_Callback+0x98>
	  wakeup_event = true; // Set flag for next loop iteration
 8002bfc:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c02:	4a0e      	ldr	r2, [pc, #56]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	60d3      	str	r3, [r2, #12]
	  button_ID = 4;
 8002c08:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	701a      	strb	r2, [r3, #0]
    ResetInactivityTimer();
 8002c0e:	f7ff f85d 	bl	8001ccc <ResetInactivityTimer>
}
 8002c12:	e00d      	b.n	8002c30 <HAL_GPIO_EXTI_Callback+0xb4>
  else if (GPIO_Pin == BUTTON5_Pin) {
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d10a      	bne.n	8002c30 <HAL_GPIO_EXTI_Callback+0xb4>
    wakeup_event = true; // Set flag for next loop iteration
 8002c1a:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c20:	4a06      	ldr	r2, [pc, #24]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	60d3      	str	r3, [r2, #12]
    button_ID = 5;
 8002c26:	4b07      	ldr	r3, [pc, #28]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002c28:	2205      	movs	r2, #5
 8002c2a:	701a      	strb	r2, [r3, #0]
    ResetInactivityTimer();
 8002c2c:	f7ff f84e 	bl	8001ccc <ResetInactivityTimer>
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000351 	.word	0x20000351
 8002c3c:	58000800 	.word	0x58000800
 8002c40:	200002e4 	.word	0x200002e4
 8002c44:	200002e5 	.word	0x200002e5

08002c48 <_write>:
#ifdef __cplusplus
  extern "C" {
  #endif
#ifdef USE_SWD
  int _write(int file, char *ptr, int len)
  {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e009      	b.n	8002c6e <_write+0x26>
    {
      ITM_SendChar(*ptr++);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	60ba      	str	r2, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fe9c 	bl	80029a0 <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	dbf1      	blt.n	8002c5a <_write+0x12>
    }
    return len;
 8002c76:	687b      	ldr	r3, [r7, #4]
  }
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) { // Systick Timer
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d102      	bne.n	8002c98 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8002c92:	f007 f9f5 	bl	800a080 <HAL_IncTick>
  else if (htim->Instance == TIM16) // Inactivity Timer
  {
    inactivity_timer_elapsed_flag = true;
    HAL_TIM_Base_Stop_IT(&htim16);
  }
}
 8002c96:	e013      	b.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x40>
  else if (htim->Instance == TIM2) // Battery measurement timer
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca0:	d103      	bne.n	8002caa <HAL_TIM_PeriodElapsedCallback+0x2a>
    g_measure_battery_flag = 1;
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
}
 8002ca8:	e00a      	b.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x40>
  else if (htim->Instance == TIM16) // Inactivity Timer
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a08      	ldr	r2, [pc, #32]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d105      	bne.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x40>
    inactivity_timer_elapsed_flag = true;
 8002cb4:	4b07      	ldr	r3, [pc, #28]	@ (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(&htim16);
 8002cba:	4807      	ldr	r0, [pc, #28]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002cbc:	f00d fe02 	bl	80108c4 <HAL_TIM_Base_Stop_IT>
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	200002dc 	.word	0x200002dc
 8002cd0:	40014400 	.word	0x40014400
 8002cd4:	20000350 	.word	0x20000350
 8002cd8:	200005ec 	.word	0x200005ec

08002cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce0:	b672      	cpsid	i
}
 8002ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <Error_Handler+0x8>

08002ce8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_APB1_GRP1_EnableClock>:
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d16:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d40:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <MX_RTC_Init+0x5c>)
 8002d42:	4a16      	ldr	r2, [pc, #88]	@ (8002d9c <MX_RTC_Init+0x60>)
 8002d44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d46:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <MX_RTC_Init+0x5c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d4c:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <MX_RTC_Init+0x5c>)
 8002d4e:	227f      	movs	r2, #127	@ 0x7f
 8002d50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d52:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <MX_RTC_Init+0x5c>)
 8002d54:	22ff      	movs	r2, #255	@ 0xff
 8002d56:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d58:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <MX_RTC_Init+0x5c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d98 <MX_RTC_Init+0x5c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d64:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <MX_RTC_Init+0x5c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <MX_RTC_Init+0x5c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d70:	4809      	ldr	r0, [pc, #36]	@ (8002d98 <MX_RTC_Init+0x5c>)
 8002d72:	f00c fd9d 	bl	800f8b0 <HAL_RTC_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002d7c:	f7ff ffae 	bl	8002cdc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	4804      	ldr	r0, [pc, #16]	@ (8002d98 <MX_RTC_Init+0x5c>)
 8002d86:	f00c fea1 	bl	800facc <HAL_RTCEx_SetWakeUpTimer_IT>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002d90:	f7ff ffa4 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200004b4 	.word	0x200004b4
 8002d9c:	40002800 	.word	0x40002800

08002da0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b096      	sub	sp, #88	@ 0x58
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002da8:	f107 0308 	add.w	r3, r7, #8
 8002dac:	2250      	movs	r2, #80	@ 0x50
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f010 f929 	bl	8013008 <memset>
  if(rtcHandle->Instance==RTC)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a13      	ldr	r2, [pc, #76]	@ (8002e08 <HAL_RTC_MspInit+0x68>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d11f      	bne.n	8002e00 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8002dc0:	f00a feda 	bl	800db78 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002dc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002dc8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002dca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dce:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dd0:	f107 0308 	add.w	r3, r7, #8
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f00c fae4 	bl	800f3a2 <HAL_RCCEx_PeriphCLKConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8002de0:	f7ff ff7c 	bl	8002cdc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002de4:	f7ff ff80 	bl	8002ce8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002de8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002dec:	f7ff ff8d 	bl	8002d0a <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	2100      	movs	r1, #0
 8002df4:	2003      	movs	r0, #3
 8002df6:	f008 fdc4 	bl	800b982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002dfa:	2003      	movs	r0, #3
 8002dfc:	f008 fddb 	bl	800b9b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002e00:	bf00      	nop
 8002e02:	3758      	adds	r7, #88	@ 0x58
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40002800 	.word	0x40002800

08002e0c <LL_AHB2_GRP1_EnableClock>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e30:	68fb      	ldr	r3, [r7, #12]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_APB1_GRP1_EnableClock>:
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002e76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee8 <MX_SPI2_Init+0x78>)
 8002e78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002e7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e82:	4b18      	ldr	r3, [pc, #96]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e88:	4b16      	ldr	r3, [pc, #88]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002e8a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e8e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e90:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e96:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ea2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002ea6:	2218      	movs	r2, #24
 8002ea8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ebc:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ec2:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002eca:	2208      	movs	r2, #8
 8002ecc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ece:	4805      	ldr	r0, [pc, #20]	@ (8002ee4 <MX_SPI2_Init+0x74>)
 8002ed0:	f00c ff58 	bl	800fd84 <HAL_SPI_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002eda:	f7ff feff 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200004d8 	.word	0x200004d8
 8002ee8:	40003800 	.word	0x40003800

08002eec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 030c 	add.w	r3, r7, #12
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a31      	ldr	r2, [pc, #196]	@ (8002fd0 <HAL_SPI_MspInit+0xe4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d15b      	bne.n	8002fc6 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f0e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002f12:	f7ff ff94 	bl	8002e3e <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f16:	2004      	movs	r0, #4
 8002f18:	f7ff ff78 	bl	8002e0c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1c:	2002      	movs	r0, #2
 8002f1e:	f7ff ff75 	bl	8002e0c <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f22:	2308      	movs	r3, #8
 8002f24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f32:	2305      	movs	r3, #5
 8002f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f36:	f107 030c 	add.w	r3, r7, #12
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4825      	ldr	r0, [pc, #148]	@ (8002fd4 <HAL_SPI_MspInit+0xe8>)
 8002f3e:	f008 ffdd 	bl	800befc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f54:	2305      	movs	r3, #5
 8002f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	481e      	ldr	r0, [pc, #120]	@ (8002fd8 <HAL_SPI_MspInit+0xec>)
 8002f60:	f008 ffcc 	bl	800befc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8002f64:	4b1d      	ldr	r3, [pc, #116]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002f66:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <HAL_SPI_MspInit+0xf4>)
 8002f68:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002f6c:	2209      	movs	r2, #9
 8002f6e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f70:	4b1a      	ldr	r3, [pc, #104]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002f72:	2210      	movs	r2, #16
 8002f74:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f76:	4b19      	ldr	r3, [pc, #100]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f7c:	4b17      	ldr	r3, [pc, #92]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002f7e:	2280      	movs	r2, #128	@ 0x80
 8002f80:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f82:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f88:	4b14      	ldr	r3, [pc, #80]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002f8e:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f94:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002f9a:	4810      	ldr	r0, [pc, #64]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002f9c:	f008 fd34 	bl	800ba08 <HAL_DMA_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8002fa6:	f7ff fe99 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a0b      	ldr	r2, [pc, #44]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002fae:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fdc <HAL_SPI_MspInit+0xf0>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	2023      	movs	r0, #35	@ 0x23
 8002fbc:	f008 fce1 	bl	800b982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002fc0:	2023      	movs	r0, #35	@ 0x23
 8002fc2:	f008 fcf8 	bl	800b9b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	3720      	adds	r7, #32
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40003800 	.word	0x40003800
 8002fd4:	48000800 	.word	0x48000800
 8002fd8:	48000400 	.word	0x48000400
 8002fdc:	2000053c 	.word	0x2000053c
 8002fe0:	40020008 	.word	0x40020008

08002fe4 <LL_AHB3_GRP1_EnableClock>:
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ff2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4013      	ands	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003008:	68fb      	ldr	r3, [r7, #12]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800301c:	463b      	mov	r3, r7
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003024:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003028:	f7ff ffdc 	bl	8002fe4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800302c:	2200      	movs	r2, #0
 800302e:	2100      	movs	r1, #0
 8003030:	202e      	movs	r0, #46	@ 0x2e
 8003032:	f008 fca6 	bl	800b982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003036:	202e      	movs	r0, #46	@ 0x2e
 8003038:	f008 fcbd 	bl	800b9b6 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800303c:	2300      	movs	r3, #0
 800303e:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8003040:	2300      	movs	r3, #0
 8003042:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003044:	463b      	mov	r3, r7
 8003046:	4618      	mov	r0, r3
 8003048:	f00a fda6 	bl	800db98 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800304c:	f00a fde6 	bl	800dc1c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <NMI_Handler+0x4>

08003060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <HardFault_Handler+0x4>

08003068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <MemManage_Handler+0x4>

08003070 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <BusFault_Handler+0x4>

08003078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <UsageFault_Handler+0x4>

08003080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ae:	f006 ffe7 	bl	800a080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80030bc:	4802      	ldr	r0, [pc, #8]	@ (80030c8 <RTC_WKUP_IRQHandler+0x10>)
 80030be:	f00c fe31 	bl	800fd24 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200004b4 	.word	0x200004b4

080030cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 80030d0:	2001      	movs	r0, #1
 80030d2:	f009 f991 	bl	800c3f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}

080030da <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON5_Pin);
 80030de:	2008      	movs	r0, #8
 80030e0:	f009 f98a 	bl	800c3f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 80030ec:	2010      	movs	r0, #16
 80030ee:	f009 f983 	bl	800c3f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80030fc:	4802      	ldr	r0, [pc, #8]	@ (8003108 <DMA1_Channel1_IRQHandler+0x10>)
 80030fe:	f008 fde9 	bl	800bcd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	2000053c 	.word	0x2000053c

0800310c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8003110:	2020      	movs	r0, #32
 8003112:	f009 f971 	bl	800c3f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8003116:	2080      	movs	r0, #128	@ 0x80
 8003118:	f009 f96e 	bl	800c3f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}

08003120 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003124:	4802      	ldr	r0, [pc, #8]	@ (8003130 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003126:	f00d fbfd 	bl	8010924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200005ec 	.word	0x200005ec

08003134 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003138:	4802      	ldr	r0, [pc, #8]	@ (8003144 <TIM2_IRQHandler+0x10>)
 800313a:	f00d fbf3 	bl	8010924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200005a0 	.word	0x200005a0

08003148 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800314c:	4802      	ldr	r0, [pc, #8]	@ (8003158 <SPI2_IRQHandler+0x10>)
 800314e:	f00d f833 	bl	80101b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200004d8 	.word	0x200004d8

0800315c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003160:	4802      	ldr	r0, [pc, #8]	@ (800316c <USART1_IRQHandler+0x10>)
 8003162:	f00e f80b 	bl	801117c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000638 	.word	0x20000638

08003170 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 8003174:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003178:	f009 f93e 	bl	800c3f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}

08003180 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003184:	4802      	ldr	r0, [pc, #8]	@ (8003190 <IPCC_C1_RX_IRQHandler+0x10>)
 8003186:	f00a fbcb 	bl	800d920 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000478 	.word	0x20000478

08003194 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003198:	4802      	ldr	r0, [pc, #8]	@ (80031a4 <IPCC_C1_TX_IRQHandler+0x10>)
 800319a:	f00a fb73 	bl	800d884 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000478 	.word	0x20000478

080031a8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80031ac:	f009 f93c 	bl	800c428 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return 1;
 80031b8:	2301      	movs	r3, #1
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <_kill>:

int _kill(int pid, int sig)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031ce:	f00f ff23 	bl	8013018 <__errno>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2216      	movs	r2, #22
 80031d6:	601a      	str	r2, [r3, #0]
  return -1;
 80031d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_exit>:

void _exit (int status)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ffe7 	bl	80031c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031f6:	bf00      	nop
 80031f8:	e7fd      	b.n	80031f6 <_exit+0x12>

080031fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e00a      	b.n	8003222 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800320c:	f3af 8000 	nop.w
 8003210:	4601      	mov	r1, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	60ba      	str	r2, [r7, #8]
 8003218:	b2ca      	uxtb	r2, r1
 800321a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3301      	adds	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	429a      	cmp	r2, r3
 8003228:	dbf0      	blt.n	800320c <_read+0x12>
  }

  return len;
 800322a:	687b      	ldr	r3, [r7, #4]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800323c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800325c:	605a      	str	r2, [r3, #4]
  return 0;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_isatty>:

int _isatty(int file)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003274:	2301      	movs	r3, #1
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003282:	b480      	push	{r7}
 8003284:	b085      	sub	sp, #20
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a4:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <_sbrk+0x5c>)
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <_sbrk+0x60>)
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032b0:	4b13      	ldr	r3, [pc, #76]	@ (8003300 <_sbrk+0x64>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032b8:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <_sbrk+0x64>)
 80032ba:	4a12      	ldr	r2, [pc, #72]	@ (8003304 <_sbrk+0x68>)
 80032bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <_sbrk+0x64>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d207      	bcs.n	80032dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032cc:	f00f fea4 	bl	8013018 <__errno>
 80032d0:	4603      	mov	r3, r0
 80032d2:	220c      	movs	r2, #12
 80032d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032da:	e009      	b.n	80032f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032dc:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <_sbrk+0x64>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032e2:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <_sbrk+0x64>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	4a05      	ldr	r2, [pc, #20]	@ (8003300 <_sbrk+0x64>)
 80032ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20030000 	.word	0x20030000
 80032fc:	00000400 	.word	0x00000400
 8003300:	2000059c 	.word	0x2000059c
 8003304:	20000828 	.word	0x20000828

08003308 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800330c:	4b24      	ldr	r3, [pc, #144]	@ (80033a0 <SystemInit+0x98>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	4a23      	ldr	r2, [pc, #140]	@ (80033a0 <SystemInit+0x98>)
 8003314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800332c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003330:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003334:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003340:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <SystemInit+0x9c>)
 8003342:	4013      	ands	r3, r2
 8003344:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800334e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003352:	f023 0305 	bic.w	r3, r3, #5
 8003356:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800335a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800335e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003362:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800336e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003372:	4a0d      	ldr	r2, [pc, #52]	@ (80033a8 <SystemInit+0xa0>)
 8003374:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800337a:	4a0b      	ldr	r2, [pc, #44]	@ (80033a8 <SystemInit+0xa0>)
 800337c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800337e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003388:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800338c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003392:	2200      	movs	r2, #0
 8003394:	619a      	str	r2, [r3, #24]
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00
 80033a4:	faf6fefb 	.word	0xfaf6fefb
 80033a8:	22041000 	.word	0x22041000

080033ac <LL_APB1_GRP1_EnableClock>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4013      	ands	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033d0:	68fb      	ldr	r3, [r7, #12]
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <LL_APB1_GRP1_DisableClock>:
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033f4:	4013      	ands	r3, r2
 80033f6:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800340c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003410:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003412:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4313      	orrs	r3, r2
 800341a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003420:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4013      	ands	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003428:	68fb      	ldr	r3, [r7, #12]
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800343e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003442:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	43db      	mvns	r3, r3
 8003448:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800344c:	4013      	ands	r3, r2
 800344e:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003462:	f107 0310 	add.w	r3, r7, #16
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800347a:	4b1e      	ldr	r3, [pc, #120]	@ (80034f4 <MX_TIM2_Init+0x98>)
 800347c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003480:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8003482:	4b1c      	ldr	r3, [pc, #112]	@ (80034f4 <MX_TIM2_Init+0x98>)
 8003484:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8003488:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348a:	4b1a      	ldr	r3, [pc, #104]	@ (80034f4 <MX_TIM2_Init+0x98>)
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8003490:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <MX_TIM2_Init+0x98>)
 8003492:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003496:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003498:	4b16      	ldr	r3, [pc, #88]	@ (80034f4 <MX_TIM2_Init+0x98>)
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800349e:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <MX_TIM2_Init+0x98>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034a4:	4813      	ldr	r0, [pc, #76]	@ (80034f4 <MX_TIM2_Init+0x98>)
 80034a6:	f00d f90b 	bl	80106c0 <HAL_TIM_Base_Init>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80034b0:	f7ff fc14 	bl	8002cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034ba:	f107 0310 	add.w	r3, r7, #16
 80034be:	4619      	mov	r1, r3
 80034c0:	480c      	ldr	r0, [pc, #48]	@ (80034f4 <MX_TIM2_Init+0x98>)
 80034c2:	f00d fb36 	bl	8010b32 <HAL_TIM_ConfigClockSource>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80034cc:	f7ff fc06 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034d0:	2300      	movs	r3, #0
 80034d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	4619      	mov	r1, r3
 80034dc:	4805      	ldr	r0, [pc, #20]	@ (80034f4 <MX_TIM2_Init+0x98>)
 80034de:	f00d fd1f 	bl	8010f20 <HAL_TIMEx_MasterConfigSynchronization>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80034e8:	f7ff fbf8 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80034ec:	bf00      	nop
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	200005a0 	.word	0x200005a0

080034f8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80034fc:	4b10      	ldr	r3, [pc, #64]	@ (8003540 <MX_TIM16_Init+0x48>)
 80034fe:	4a11      	ldr	r2, [pc, #68]	@ (8003544 <MX_TIM16_Init+0x4c>)
 8003500:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 8003502:	4b0f      	ldr	r3, [pc, #60]	@ (8003540 <MX_TIM16_Init+0x48>)
 8003504:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003508:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800350a:	4b0d      	ldr	r3, [pc, #52]	@ (8003540 <MX_TIM16_Init+0x48>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <MX_TIM16_Init+0x48>)
 8003512:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003516:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003518:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <MX_TIM16_Init+0x48>)
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800351e:	4b08      	ldr	r3, [pc, #32]	@ (8003540 <MX_TIM16_Init+0x48>)
 8003520:	2200      	movs	r2, #0
 8003522:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <MX_TIM16_Init+0x48>)
 8003526:	2200      	movs	r2, #0
 8003528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800352a:	4805      	ldr	r0, [pc, #20]	@ (8003540 <MX_TIM16_Init+0x48>)
 800352c:	f00d f8c8 	bl	80106c0 <HAL_TIM_Base_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8003536:	f7ff fbd1 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200005ec 	.word	0x200005ec
 8003544:	40014400 	.word	0x40014400

08003548 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003558:	d10b      	bne.n	8003572 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800355a:	2001      	movs	r0, #1
 800355c:	f7ff ff26 	bl	80033ac <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003560:	2200      	movs	r2, #0
 8003562:	2100      	movs	r1, #0
 8003564:	201c      	movs	r0, #28
 8003566:	f008 fa0c 	bl	800b982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800356a:	201c      	movs	r0, #28
 800356c:	f008 fa23 	bl	800b9b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003570:	e010      	b.n	8003594 <HAL_TIM_Base_MspInit+0x4c>
  else if(tim_baseHandle->Instance==TIM16)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a09      	ldr	r2, [pc, #36]	@ (800359c <HAL_TIM_Base_MspInit+0x54>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d10b      	bne.n	8003594 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800357c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003580:	f7ff ff40 	bl	8003404 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2100      	movs	r1, #0
 8003588:	2019      	movs	r0, #25
 800358a:	f008 f9fa 	bl	800b982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800358e:	2019      	movs	r0, #25
 8003590:	f008 fa11 	bl	800b9b6 <HAL_NVIC_EnableIRQ>
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40014400 	.word	0x40014400

080035a0 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b0:	d106      	bne.n	80035c0 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 80035b2:	2001      	movs	r0, #1
 80035b4:	f7ff ff13 	bl	80033de <LL_APB1_GRP1_DisableClock>

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80035b8:	201c      	movs	r0, #28
 80035ba:	f008 fa0a 	bl	800b9d2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspDeInit 1 */

  /* USER CODE END TIM16_MspDeInit 1 */
  }
}
 80035be:	e00b      	b.n	80035d8 <HAL_TIM_Base_MspDeInit+0x38>
  else if(tim_baseHandle->Instance==TIM16)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a06      	ldr	r2, [pc, #24]	@ (80035e0 <HAL_TIM_Base_MspDeInit+0x40>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d106      	bne.n	80035d8 <HAL_TIM_Base_MspDeInit+0x38>
    __HAL_RCC_TIM16_CLK_DISABLE();
 80035ca:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80035ce:	f7ff ff32 	bl	8003436 <LL_APB2_GRP1_DisableClock>
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 80035d2:	2019      	movs	r0, #25
 80035d4:	f008 f9fd 	bl	800b9d2 <HAL_NVIC_DisableIRQ>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40014400 	.word	0x40014400

080035e4 <LL_AHB2_GRP1_EnableClock>:
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80035ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003600:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4013      	ands	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_APB2_GRP1_EnableClock>:
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800361e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003622:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003624:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4313      	orrs	r3, r2
 800362c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003632:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4013      	ands	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800363a:	68fb      	ldr	r3, [r7, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_APB2_GRP1_DisableClock>:
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003654:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	43db      	mvns	r3, r3
 800365a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800365e:	4013      	ands	r3, r2
 8003660:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003674:	4b22      	ldr	r3, [pc, #136]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 8003676:	4a23      	ldr	r2, [pc, #140]	@ (8003704 <MX_USART1_UART_Init+0x94>)
 8003678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800367a:	4b21      	ldr	r3, [pc, #132]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 800367c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003682:	4b1f      	ldr	r3, [pc, #124]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 8003684:	2200      	movs	r2, #0
 8003686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003688:	4b1d      	ldr	r3, [pc, #116]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 800368a:	2200      	movs	r2, #0
 800368c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800368e:	4b1c      	ldr	r3, [pc, #112]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 8003690:	2200      	movs	r2, #0
 8003692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003694:	4b1a      	ldr	r3, [pc, #104]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 8003696:	220c      	movs	r2, #12
 8003698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800369a:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 800369c:	2200      	movs	r2, #0
 800369e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036a0:	4b17      	ldr	r3, [pc, #92]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036a6:	4b16      	ldr	r3, [pc, #88]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036ac:	4b14      	ldr	r3, [pc, #80]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036b2:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036b8:	4811      	ldr	r0, [pc, #68]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 80036ba:	f00d fccf 	bl	801105c <HAL_UART_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80036c4:	f7ff fb0a 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036c8:	2100      	movs	r1, #0
 80036ca:	480d      	ldr	r0, [pc, #52]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 80036cc:	f00e fd93 	bl	80121f6 <HAL_UARTEx_SetTxFifoThreshold>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80036d6:	f7ff fb01 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036da:	2100      	movs	r1, #0
 80036dc:	4808      	ldr	r0, [pc, #32]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 80036de:	f00e fdc8 	bl	8012272 <HAL_UARTEx_SetRxFifoThreshold>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80036e8:	f7ff faf8 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80036ec:	4804      	ldr	r0, [pc, #16]	@ (8003700 <MX_USART1_UART_Init+0x90>)
 80036ee:	f00e fd49 	bl	8012184 <HAL_UARTEx_DisableFifoMode>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80036f8:	f7ff faf0 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036fc:	bf00      	nop
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000638 	.word	0x20000638
 8003704:	40013800 	.word	0x40013800

08003708 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b09c      	sub	sp, #112	@ 0x70
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003720:	f107 030c 	add.w	r3, r7, #12
 8003724:	2250      	movs	r2, #80	@ 0x50
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f00f fc6d 	bl	8013008 <memset>
  if(uartHandle->Instance==USART1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1b      	ldr	r2, [pc, #108]	@ (80037a0 <HAL_UART_MspInit+0x98>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d12e      	bne.n	8003796 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003738:	2301      	movs	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800373c:	2300      	movs	r3, #0
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003740:	f107 030c 	add.w	r3, r7, #12
 8003744:	4618      	mov	r0, r3
 8003746:	f00b fe2c 	bl	800f3a2 <HAL_RCCEx_PeriphCLKConfig>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003750:	f7ff fac4 	bl	8002cdc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003754:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003758:	f7ff ff5d 	bl	8003616 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375c:	2001      	movs	r0, #1
 800375e:	f7ff ff41 	bl	80035e4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003762:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003766:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003768:	2302      	movs	r3, #2
 800376a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003770:	2302      	movs	r3, #2
 8003772:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003774:	2307      	movs	r3, #7
 8003776:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003778:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800377c:	4619      	mov	r1, r3
 800377e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003782:	f008 fbbb 	bl	800befc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003786:	2200      	movs	r2, #0
 8003788:	2100      	movs	r1, #0
 800378a:	2024      	movs	r0, #36	@ 0x24
 800378c:	f008 f8f9 	bl	800b982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003790:	2024      	movs	r0, #36	@ 0x24
 8003792:	f008 f910 	bl	800b9b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003796:	bf00      	nop
 8003798:	3770      	adds	r7, #112	@ 0x70
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40013800 	.word	0x40013800

080037a4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a09      	ldr	r2, [pc, #36]	@ (80037d8 <HAL_UART_MspDeInit+0x34>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d10c      	bne.n	80037d0 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80037b6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80037ba:	f7ff ff45 	bl	8003648 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10|GPIO_PIN_9);
 80037be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80037c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037c6:	f008 fd09 	bl	800c1dc <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80037ca:	2024      	movs	r0, #36	@ 0x24
 80037cc:	f008 f901 	bl	800b9d2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40013800 	.word	0x40013800

080037dc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80037dc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037de:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037e0:	3304      	adds	r3, #4

080037e2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037e2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037e4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80037e6:	d3f9      	bcc.n	80037dc <CopyDataInit>
  bx lr
 80037e8:	4770      	bx	lr

080037ea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80037ea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80037ec:	3004      	adds	r0, #4

080037ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80037ee:	4288      	cmp	r0, r1
  bcc FillZerobss
 80037f0:	d3fb      	bcc.n	80037ea <FillZerobss>
  bx lr
 80037f2:	4770      	bx	lr

080037f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037f4:	480c      	ldr	r0, [pc, #48]	@ (8003828 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80037f8:	f7ff fd86 	bl	8003308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80037fc:	480b      	ldr	r0, [pc, #44]	@ (800382c <LoopForever+0x6>)
 80037fe:	490c      	ldr	r1, [pc, #48]	@ (8003830 <LoopForever+0xa>)
 8003800:	4a0c      	ldr	r2, [pc, #48]	@ (8003834 <LoopForever+0xe>)
 8003802:	2300      	movs	r3, #0
 8003804:	f7ff ffed 	bl	80037e2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003808:	480b      	ldr	r0, [pc, #44]	@ (8003838 <LoopForever+0x12>)
 800380a:	490c      	ldr	r1, [pc, #48]	@ (800383c <LoopForever+0x16>)
 800380c:	4a0c      	ldr	r2, [pc, #48]	@ (8003840 <LoopForever+0x1a>)
 800380e:	2300      	movs	r3, #0
 8003810:	f7ff ffe7 	bl	80037e2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003814:	480b      	ldr	r0, [pc, #44]	@ (8003844 <LoopForever+0x1e>)
 8003816:	490c      	ldr	r1, [pc, #48]	@ (8003848 <LoopForever+0x22>)
 8003818:	2300      	movs	r3, #0
 800381a:	f7ff ffe8 	bl	80037ee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800381e:	f00f fc01 	bl	8013024 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003822:	f7ff f8ee 	bl	8002a02 <main>

08003826 <LoopForever>:

LoopForever:
  b LoopForever
 8003826:	e7fe      	b.n	8003826 <LoopForever>
  ldr   r0, =_estack
 8003828:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800382c:	20000008 	.word	0x20000008
 8003830:	20000258 	.word	0x20000258
 8003834:	080185a8 	.word	0x080185a8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003838:	20030000 	.word	0x20030000
 800383c:	20030000 	.word	0x20030000
 8003840:	080187f8 	.word	0x080187f8
  INIT_BSS _sbss, _ebss
 8003844:	20000258 	.word	0x20000258
 8003848:	20000824 	.word	0x20000824

0800384c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800384c:	e7fe      	b.n	800384c <ADC1_IRQHandler>
	...

08003850 <bmi2_sec_init>:
 * @brief This API is the entry point for bmi2 sensor. It selects between
 * I2C/SPI interface, based on user selection. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi2_sec_init(struct bmi2_dev *dev)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	73bb      	strb	r3, [r7, #14]

    /* Structure to define the default values for axes re-mapping */
    struct bmi2_axes_remap axes_remap = {
 800385c:	4a2b      	ldr	r2, [pc, #172]	@ (800390c <bmi2_sec_init+0xbc>)
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003866:	6018      	str	r0, [r3, #0]
 8003868:	3304      	adds	r3, #4
 800386a:	8019      	strh	r1, [r3, #0]
        .x_axis = BMI2_MAP_X_AXIS, .x_axis_sign = BMI2_POS_SIGN, .y_axis = BMI2_MAP_Y_AXIS,
        .y_axis_sign = BMI2_POS_SIGN, .z_axis = BMI2_MAP_Z_AXIS, .z_axis_sign = BMI2_POS_SIGN
    };

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f001 fec5 	bl	80055fc <null_ptr_check>
 8003872:	4603      	mov	r3, r0
 8003874:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI2_OK)
 8003876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d140      	bne.n	8003900 <bmi2_sec_init+0xb0>
    {
        /* Set APS flag as after reset, the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from I2C interface */
        if (dev->intf == BMI2_SPI_INTF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7a5b      	ldrb	r3, [r3, #9]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d108      	bne.n	80038a0 <bmi2_sec_init+0x50>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 800388e:	f107 010e 	add.w	r1, r7, #14
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	2000      	movs	r0, #0
 8003898:	f000 f83a 	bl	8003910 <bmi2_get_regs>
 800389c:	4603      	mov	r3, r0
 800389e:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 80038a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d12b      	bne.n	8003900 <bmi2_sec_init+0xb0>
        {
            /* Read chip-id of the BMI2 sensor */
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 80038a8:	f107 010e 	add.w	r1, r7, #14
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	2000      	movs	r0, #0
 80038b2:	f000 f82d 	bl	8003910 <bmi2_get_regs>
 80038b6:	4603      	mov	r3, r0
 80038b8:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI2_OK)
 80038ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d11e      	bne.n	8003900 <bmi2_sec_init+0xb0>
            {
                /* Validate chip-id */
                if (chip_id == dev->chip_id)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	7bbb      	ldrb	r3, [r7, #14]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d114      	bne.n	80038f6 <bmi2_sec_init+0xa6>
                {
                    /* Assign resolution to the structure */
                    dev->resolution = 16;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2210      	movs	r2, #16
 80038d0:	731a      	strb	r2, [r3, #12]

                    /* Set manual enable flag */
                    dev->aux_man_en = 1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	76da      	strb	r2, [r3, #27]

                    /* Set the default values for axis
                     *  re-mapping in the device structure
                     */
                    dev->remap = axes_remap;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3328      	adds	r3, #40	@ 0x28
 80038dc:	f107 0208 	add.w	r2, r7, #8
 80038e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038e4:	6018      	str	r0, [r3, #0]
 80038e6:	3304      	adds	r3, #4
 80038e8:	8019      	strh	r1, [r3, #0]

                    /* Perform soft-reset to bring all register values to their
                     * default values
                     */
                    rslt = bmi2_soft_reset(dev);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f906 	bl	8003afc <bmi2_soft_reset>
 80038f0:	4603      	mov	r3, r0
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	e004      	b.n	8003900 <bmi2_sec_init+0xb0>
                else
                {
                    /* Storing the chip-id value read from
                     * the register to identify the sensor
                     */
                    dev->chip_id = chip_id;
 80038f6:	7bba      	ldrb	r2, [r7, #14]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	701a      	strb	r2, [r3, #0]
                    rslt = BMI2_E_DEV_NOT_FOUND;
 80038fc:	23fd      	movs	r3, #253	@ 0xfd
 80038fe:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	08015b3c 	.word	0x08015b3c

08003910 <bmi2_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x26, 0x5E.
 */
int8_t bmi2_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b0a7      	sub	sp, #156	@ 0x9c
 8003914:	af00      	add	r7, sp, #0
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]
 800391e:	4613      	mov	r3, r2
 8003920:	81bb      	strh	r3, [r7, #12]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define loop */
    uint16_t index = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI2_MAX_LEN];

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f001 fe67 	bl	80055fc <null_ptr_check>
 800392e:	4603      	mov	r3, r0
 8003930:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if ((rslt == BMI2_OK) && (data != NULL))
 8003934:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8003938:	2b00      	cmp	r3, #0
 800393a:	d153      	bne.n	80039e4 <bmi2_get_regs+0xd4>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d050      	beq.n	80039e4 <bmi2_get_regs+0xd4>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	7a5b      	ldrb	r3, [r3, #9]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <bmi2_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI2_SPI_RD_MASK);
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003950:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, (len + dev->dummy_byte), dev->intf_ptr);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8003956:	89bb      	ldrh	r3, [r7, #12]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	7ad2      	ldrb	r2, [r2, #11]
 800395c:	4413      	add	r3, r2
 800395e:	461a      	mov	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f107 0114 	add.w	r1, r7, #20
 8003968:	7bf8      	ldrb	r0, [r7, #15]
 800396a:	47a0      	blx	r4
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	729a      	strb	r2, [r3, #10]

        if (dev->aps_status == BMI2_ENABLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800397a:	2b01      	cmp	r3, #1
 800397c:	d108      	bne.n	8003990 <bmi2_get_regs+0x80>
        {
            dev->delay_us(450, dev->intf_ptr);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6852      	ldr	r2, [r2, #4]
 8003986:	4611      	mov	r1, r2
 8003988:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800398c:	4798      	blx	r3
 800398e:	e006      	b.n	800399e <bmi2_get_regs+0x8e>
        }
        else
        {
            dev->delay_us(2, dev->intf_ptr);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6852      	ldr	r2, [r2, #4]
 8003998:	4611      	mov	r1, r2
 800399a:	2002      	movs	r0, #2
 800399c:	4798      	blx	r3
        }

        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d119      	bne.n	80039dc <bmi2_get_regs+0xcc>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 80039a8:	e012      	b.n	80039d0 <bmi2_get_regs+0xc0>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 80039aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	7ad2      	ldrb	r2, [r2, #11]
 80039b2:	441a      	add	r2, r3
 80039b4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	440b      	add	r3, r1
 80039bc:	3298      	adds	r2, #152	@ 0x98
 80039be:	443a      	add	r2, r7
 80039c0:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 80039c4:	701a      	strb	r2, [r3, #0]
                index++;
 80039c6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80039ca:	3301      	adds	r3, #1
 80039cc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 80039d0:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 80039d4:	89bb      	ldrh	r3, [r7, #12]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3e7      	bcc.n	80039aa <bmi2_get_regs+0x9a>
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 80039da:	e006      	b.n	80039ea <bmi2_get_regs+0xda>
            }
        }
        else
        {
            rslt = BMI2_E_COM_FAIL;
 80039dc:	23fe      	movs	r3, #254	@ 0xfe
 80039de:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 80039e2:	e002      	b.n	80039ea <bmi2_get_regs+0xda>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80039e4:	23ff      	movs	r3, #255	@ 0xff
 80039e6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 80039ea:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	379c      	adds	r7, #156	@ 0x9c
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd90      	pop	{r4, r7, pc}

080039f6 <bmi2_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi2 sensor.
 */
int8_t bmi2_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 80039f6:	b590      	push	{r4, r7, lr}
 80039f8:	b087      	sub	sp, #28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	4603      	mov	r3, r0
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	4613      	mov	r3, r2
 8003a06:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    uint16_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f001 fdf7 	bl	80055fc <null_ptr_check>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (data != NULL))
 8003a12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d168      	bne.n	8003aec <bmi2_set_regs+0xf6>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d065      	beq.n	8003aec <bmi2_set_regs+0xf6>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7a5b      	ldrb	r3, [r3, #9]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d103      	bne.n	8003a30 <bmi2_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI2_SPI_WR_MASK);
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a2e:	73fb      	strb	r3, [r7, #15]
        }

        /* Writing Byte by byte and delay for Low power mode of the sensor is 450 us */
        if (dev->aps_status == BMI2_ENABLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d129      	bne.n	8003a8e <bmi2_set_regs+0x98>
        {
            for (loop = 0; loop < len; loop++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	82bb      	strh	r3, [r7, #20]
 8003a3e:	e021      	b.n	8003a84 <bmi2_set_regs+0x8e>
            {
                dev->intf_rslt = dev->write((uint8_t)((uint16_t)reg_addr + loop), &data[loop], 1, dev->intf_ptr);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8003a44:	8abb      	ldrh	r3, [r7, #20]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	b2d8      	uxtb	r0, r3
 8003a4e:	8abb      	ldrh	r3, [r7, #20]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	18d1      	adds	r1, r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	47a0      	blx	r4
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	729a      	strb	r2, [r3, #10]
                dev->delay_us(BMI2_POWER_SAVE_MODE_DELAY_IN_US, dev->intf_ptr);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6852      	ldr	r2, [r2, #4]
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8003a72:	4798      	blx	r3
                if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11b      	bne.n	8003ab6 <bmi2_set_regs+0xc0>
            for (loop = 0; loop < len; loop++)
 8003a7e:	8abb      	ldrh	r3, [r7, #20]
 8003a80:	3301      	adds	r3, #1
 8003a82:	82bb      	strh	r3, [r7, #20]
 8003a84:	8aba      	ldrh	r2, [r7, #20]
 8003a86:	89bb      	ldrh	r3, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d3d9      	bcc.n	8003a40 <bmi2_set_regs+0x4a>
 8003a8c:	e014      	b.n	8003ab8 <bmi2_set_regs+0xc2>
            }
        }
        /* Burst write and delay for Normal mode of the sensor is 2 us */
        else
        {
            dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8003a92:	89ba      	ldrh	r2, [r7, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	7bf8      	ldrb	r0, [r7, #15]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	47a0      	blx	r4
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	729a      	strb	r2, [r3, #10]
            dev->delay_us(BMI2_NORMAL_MODE_DELAY_IN_US, dev->intf_ptr);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6852      	ldr	r2, [r2, #4]
 8003aae:	4611      	mov	r1, r2
 8003ab0:	2002      	movs	r0, #2
 8003ab2:	4798      	blx	r3
 8003ab4:	e000      	b.n	8003ab8 <bmi2_set_regs+0xc2>
                    break;
 8003ab6:	bf00      	nop
        }

        /* Updating the advance power saver flag */
        if (reg_addr == BMI2_PWR_CONF_ADDR)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b7c      	cmp	r3, #124	@ 0x7c
 8003abc:	d10e      	bne.n	8003adc <bmi2_set_regs+0xe6>
        {
            if (*data & BMI2_ADV_POW_EN_MASK)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <bmi2_set_regs+0xde>
            {
                dev->aps_status = BMI2_ENABLE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8003ad2:	e003      	b.n	8003adc <bmi2_set_regs+0xe6>
            }
            else
            {
                dev->aps_status = BMI2_DISABLE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }

        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <bmi2_set_regs+0xfa>
        {
            rslt = BMI2_E_COM_FAIL;
 8003ae6:	23fe      	movs	r3, #254	@ 0xfe
 8003ae8:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8003aea:	e001      	b.n	8003af0 <bmi2_set_regs+0xfa>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003aec:	23ff      	movs	r3, #255	@ 0xff
 8003aee:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003af0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd90      	pop	{r4, r7, pc}

08003afc <bmi2_soft_reset>:
/*!
 * @brief This API resets bmi2 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi2_soft_reset(struct bmi2_dev *dev)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define soft reset value */
    uint8_t data = BMI2_SOFT_RESET_CMD;
 8003b04:	23b6      	movs	r3, #182	@ 0xb6
 8003b06:	73bb      	strb	r3, [r7, #14]

    /* Variable to read the dummy byte */
    uint8_t dummy_read = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	737b      	strb	r3, [r7, #13]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f001 fd75 	bl	80055fc <null_ptr_check>
 8003b12:	4603      	mov	r3, r0
 8003b14:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8003b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d139      	bne.n	8003b92 <bmi2_soft_reset+0x96>
    {
        /* Reset bmi2 device */
        rslt = bmi2_set_regs(BMI2_CMD_REG_ADDR, &data, 1, dev);
 8003b1e:	f107 010e 	add.w	r1, r7, #14
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	207e      	movs	r0, #126	@ 0x7e
 8003b28:	f7ff ff65 	bl	80039f6 <bmi2_set_regs>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(2000, dev->intf_ptr);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6852      	ldr	r2, [r2, #4]
 8003b38:	4611      	mov	r1, r2
 8003b3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003b3e:	4798      	blx	r3

        /* Set APS flag as after soft reset the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from
         * I2C after a soft-reset
         */
        if ((rslt == BMI2_OK) && (dev->intf == BMI2_SPI_INTF))
 8003b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10c      	bne.n	8003b6a <bmi2_soft_reset+0x6e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	7a5b      	ldrb	r3, [r3, #9]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d108      	bne.n	8003b6a <bmi2_soft_reset+0x6e>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &dummy_read, 1, dev);
 8003b58:	f107 010d 	add.w	r1, r7, #13
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	2000      	movs	r0, #0
 8003b62:	f7ff fed5 	bl	8003910 <bmi2_get_regs>
 8003b66:	4603      	mov	r3, r0
 8003b68:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8003b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d104      	bne.n	8003b7c <bmi2_soft_reset+0x80>
        {
            /* Write the configuration file */
            rslt = bmi2_write_config_file(dev);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f85f 	bl	8003c36 <bmi2_write_config_file>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the sensor status flag in the device structure */
        if (rslt == BMI2_OK)
 8003b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <bmi2_soft_reset+0x96>
        {
            dev->sens_en_stat = 0;
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        }
    }

    return rslt;
 8003b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <bmi2_set_adv_power_save>:

/*!
 * @brief This API enables/disables the advance power save mode in the sensor.
 */
int8_t bmi2_set_adv_power_save(uint8_t enable, struct bmi2_dev *dev)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	6039      	str	r1, [r7, #0]
 8003ba8:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003bae:	6838      	ldr	r0, [r7, #0]
 8003bb0:	f001 fd24 	bl	80055fc <null_ptr_check>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8003bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d134      	bne.n	8003c2a <bmi2_set_adv_power_save+0x8c>
    {
        rslt = bmi2_get_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 8003bc0:	f107 010e 	add.w	r1, r7, #14
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	207c      	movs	r0, #124	@ 0x7c
 8003bca:	f7ff fea1 	bl	8003910 <bmi2_get_regs>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8003bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d127      	bne.n	8003c2a <bmi2_set_adv_power_save+0x8c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ADV_POW_EN, enable);
 8003bda:	7bbb      	ldrb	r3, [r7, #14]
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	b25a      	sxtb	r2, r3
 8003be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	b25b      	sxtb	r3, r3
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	b25b      	sxtb	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	73bb      	strb	r3, [r7, #14]
            rslt = bmi2_set_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 8003bf6:	f107 010e 	add.w	r1, r7, #14
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	207c      	movs	r0, #124	@ 0x7c
 8003c00:	f7ff fef9 	bl	80039f6 <bmi2_set_regs>
 8003c04:	4603      	mov	r3, r0
 8003c06:	73fb      	strb	r3, [r7, #15]

            if (rslt != BMI2_OK)
 8003c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <bmi2_set_adv_power_save+0x76>
            {
                /* Return error if enable/disable APS fails */
                rslt = BMI2_E_SET_APS_FAIL;
 8003c10:	23f3      	movs	r3, #243	@ 0xf3
 8003c12:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BMI2_OK)
 8003c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <bmi2_set_adv_power_save+0x8c>
            {
                dev->aps_status = BMI2_GET_BIT_POS0(reg_data, BMI2_ADV_POW_EN);
 8003c1c:	7bbb      	ldrb	r3, [r7, #14]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }
    }

    return rslt;
 8003c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <bmi2_write_config_file>:

/*!
 * @brief This API loads the configuration file into the bmi2 sensor.
 */
int8_t bmi2_write_config_file(struct bmi2_dev *dev)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to know the load status */
    uint8_t load_status = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f001 fcda 	bl	80055fc <null_ptr_check>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (dev->config_size != 0))
 8003c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d13b      	bne.n	8003ccc <bmi2_write_config_file+0x96>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d036      	beq.n	8003ccc <bmi2_write_config_file+0x96>
    {
        /* Bytes written are multiples of 2 */
        if ((dev->read_write_len % 2) != 0)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	89db      	ldrh	r3, [r3, #14]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <bmi2_write_config_file+0x42>
        {
            dev->read_write_len = dev->read_write_len - 1;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	89db      	ldrh	r3, [r3, #14]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	81da      	strh	r2, [r3, #14]
        }

        if (dev->read_write_len < 2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	89db      	ldrh	r3, [r3, #14]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d802      	bhi.n	8003c86 <bmi2_write_config_file+0x50>
        {
            dev->read_write_len = 2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	81da      	strh	r2, [r3, #14]
        }

        /* Write the configuration file */
        rslt = write_config_file(dev);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fcb4 	bl	80045f4 <write_config_file>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8003c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d11c      	bne.n	8003cd2 <bmi2_write_config_file+0x9c>
        {
            /* Check the configuration load status */
            rslt = bmi2_get_internal_status(&load_status, dev);
 8003c98:	f107 030e 	add.w	r3, r7, #14
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fbb7 	bl	8004412 <bmi2_get_internal_status>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	73fb      	strb	r3, [r7, #15]

            load_status &= BMI2_CONFIG_LOAD_STATUS_MASK;
 8003ca8:	7bbb      	ldrb	r3, [r7, #14]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	73bb      	strb	r3, [r7, #14]

            dev->load_status = load_status;
 8003cb2:	7bba      	ldrb	r2, [r7, #14]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	741a      	strb	r2, [r3, #16]

            /* Return error if loading not successful */
            if ((rslt == BMI2_OK) && (load_status != BMI2_CONFIG_LOAD_SUCCESS))
 8003cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d108      	bne.n	8003cd2 <bmi2_write_config_file+0x9c>
 8003cc0:	7bbb      	ldrb	r3, [r7, #14]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d005      	beq.n	8003cd2 <bmi2_write_config_file+0x9c>
            {
                rslt = BMI2_E_CONFIG_LOAD;
 8003cc6:	23f7      	movs	r3, #247	@ 0xf7
 8003cc8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8003cca:	e002      	b.n	8003cd2 <bmi2_write_config_file+0x9c>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003ccc:	23ff      	movs	r3, #255	@ 0xff
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	e000      	b.n	8003cd4 <bmi2_write_config_file+0x9e>
        if (rslt == BMI2_OK)
 8003cd2:	bf00      	nop
    }

    return rslt;
 8003cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <bmi2_set_int_pin_config>:
 *        1) The input output configuration of the selected interrupt pin:
 *           INT1 or INT2.
 *        2) The interrupt mode: permanently latched or non-latched.
 */
int8_t bmi2_set_int_pin_config(const struct bmi2_int_pin_config *int_cfg, struct bmi2_dev *dev)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define data array */
    uint8_t data_array[3] = { 0 };
 8003cea:	f107 0308 	add.w	r3, r7, #8
 8003cee:	2100      	movs	r1, #0
 8003cf0:	460a      	mov	r2, r1
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	460a      	mov	r2, r1
 8003cf6:	709a      	strb	r2, [r3, #2]

    /* Variable to store register data */
    uint8_t reg_data = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73bb      	strb	r3, [r7, #14]

    /* Variable to define type of interrupt pin  */
    uint8_t int_pin = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	737b      	strb	r3, [r7, #13]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003d00:	6838      	ldr	r0, [r7, #0]
 8003d02:	f001 fc7b 	bl	80055fc <null_ptr_check>
 8003d06:	4603      	mov	r3, r0
 8003d08:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (int_cfg != NULL))
 8003d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 80ca 	bne.w	8003ea8 <bmi2_set_int_pin_config+0x1c8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80c6 	beq.w	8003ea8 <bmi2_set_int_pin_config+0x1c8>
    {
        /* Copy the pin type to a local variable */
        int_pin = int_cfg->pin_type;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	737b      	strb	r3, [r7, #13]
        if ((int_pin > BMI2_INT_NONE) && (int_pin < BMI2_INT_PIN_MAX))
 8003d22:	7b7b      	ldrb	r3, [r7, #13]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80bb 	beq.w	8003ea0 <bmi2_set_int_pin_config+0x1c0>
 8003d2a:	7b7b      	ldrb	r3, [r7, #13]
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	f200 80b7 	bhi.w	8003ea0 <bmi2_set_int_pin_config+0x1c0>
        {
            /* Get the previous configuration data */
            rslt = bmi2_get_regs(BMI2_INT1_IO_CTRL_ADDR, data_array, 3, dev);
 8003d32:	f107 0108 	add.w	r1, r7, #8
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2203      	movs	r2, #3
 8003d3a:	2053      	movs	r0, #83	@ 0x53
 8003d3c:	f7ff fde8 	bl	8003910 <bmi2_get_regs>
 8003d40:	4603      	mov	r3, r0
 8003d42:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8003d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f040 80ac 	bne.w	8003ea6 <bmi2_set_int_pin_config+0x1c6>
            {
                /* Set interrupt pin 1 configuration */
                if ((int_pin == BMI2_INT1) || (int_pin == BMI2_INT_BOTH))
 8003d4e:	7b7b      	ldrb	r3, [r7, #13]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d002      	beq.n	8003d5a <bmi2_set_int_pin_config+0x7a>
 8003d54:	7b7b      	ldrb	r3, [r7, #13]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d141      	bne.n	8003dde <bmi2_set_int_pin_config+0xfe>
                {
                    /* Configure active low or high */
                    reg_data = BMI2_SET_BITS(data_array[0], BMI2_INT_LEVEL, int_cfg->pin_cfg[0].lvl);
 8003d5a:	7a3b      	ldrb	r3, [r7, #8]
 8003d5c:	b25b      	sxtb	r3, r3
 8003d5e:	f023 0302 	bic.w	r3, r3, #2
 8003d62:	b25a      	sxtb	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	789b      	ldrb	r3, [r3, #2]
 8003d68:	b25b      	sxtb	r3, r3
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	b25b      	sxtb	r3, r3
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	b25b      	sxtb	r3, r3
 8003d74:	4313      	orrs	r3, r2
 8003d76:	b25b      	sxtb	r3, r3
 8003d78:	73bb      	strb	r3, [r7, #14]

                    /* Configure push-pull or open drain */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OPEN_DRAIN, int_cfg->pin_cfg[0].od);
 8003d7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d7e:	f023 0304 	bic.w	r3, r3, #4
 8003d82:	b25a      	sxtb	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	78db      	ldrb	r3, [r3, #3]
 8003d88:	b25b      	sxtb	r3, r3
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	b25b      	sxtb	r3, r3
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	b25b      	sxtb	r3, r3
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b25b      	sxtb	r3, r3
 8003d98:	73bb      	strb	r3, [r7, #14]

                    /* Configure output enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OUTPUT_EN, int_cfg->pin_cfg[0].output_en);
 8003d9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d9e:	f023 0308 	bic.w	r3, r3, #8
 8003da2:	b25a      	sxtb	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	791b      	ldrb	r3, [r3, #4]
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	b25b      	sxtb	r3, r3
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	b25b      	sxtb	r3, r3
 8003db4:	4313      	orrs	r3, r2
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	73bb      	strb	r3, [r7, #14]

                    /* Configure input enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_INPUT_EN, int_cfg->pin_cfg[0].input_en);
 8003dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dbe:	f023 0310 	bic.w	r3, r3, #16
 8003dc2:	b25a      	sxtb	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	795b      	ldrb	r3, [r3, #5]
 8003dc8:	b25b      	sxtb	r3, r3
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	b25b      	sxtb	r3, r3
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	b25b      	sxtb	r3, r3
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	73bb      	strb	r3, [r7, #14]

                    /* Copy the data to be written in the respective array */
                    data_array[0] = reg_data;
 8003dda:	7bbb      	ldrb	r3, [r7, #14]
 8003ddc:	723b      	strb	r3, [r7, #8]
                }

                /* Set interrupt pin 2 configuration */
                if ((int_pin == BMI2_INT2) || (int_pin == BMI2_INT_BOTH))
 8003dde:	7b7b      	ldrb	r3, [r7, #13]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d002      	beq.n	8003dea <bmi2_set_int_pin_config+0x10a>
 8003de4:	7b7b      	ldrb	r3, [r7, #13]
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d141      	bne.n	8003e6e <bmi2_set_int_pin_config+0x18e>
                {
                    /* Configure active low or high */
                    reg_data = BMI2_SET_BITS(data_array[1], BMI2_INT_LEVEL, int_cfg->pin_cfg[1].lvl);
 8003dea:	7a7b      	ldrb	r3, [r7, #9]
 8003dec:	b25b      	sxtb	r3, r3
 8003dee:	f023 0302 	bic.w	r3, r3, #2
 8003df2:	b25a      	sxtb	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	799b      	ldrb	r3, [r3, #6]
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	b25b      	sxtb	r3, r3
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	b25b      	sxtb	r3, r3
 8003e04:	4313      	orrs	r3, r2
 8003e06:	b25b      	sxtb	r3, r3
 8003e08:	73bb      	strb	r3, [r7, #14]

                    /* Configure push-pull or open drain */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OPEN_DRAIN, int_cfg->pin_cfg[1].od);
 8003e0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e0e:	f023 0304 	bic.w	r3, r3, #4
 8003e12:	b25a      	sxtb	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	79db      	ldrb	r3, [r3, #7]
 8003e18:	b25b      	sxtb	r3, r3
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	b25b      	sxtb	r3, r3
 8003e24:	4313      	orrs	r3, r2
 8003e26:	b25b      	sxtb	r3, r3
 8003e28:	73bb      	strb	r3, [r7, #14]

                    /* Configure output enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_OUTPUT_EN, int_cfg->pin_cfg[1].output_en);
 8003e2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e2e:	f023 0308 	bic.w	r3, r3, #8
 8003e32:	b25a      	sxtb	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7a1b      	ldrb	r3, [r3, #8]
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	b25b      	sxtb	r3, r3
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b25b      	sxtb	r3, r3
 8003e48:	73bb      	strb	r3, [r7, #14]

                    /* Configure input enable */
                    reg_data = BMI2_SET_BITS(reg_data, BMI2_INT_INPUT_EN, int_cfg->pin_cfg[1].input_en);
 8003e4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e4e:	f023 0310 	bic.w	r3, r3, #16
 8003e52:	b25a      	sxtb	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	7a5b      	ldrb	r3, [r3, #9]
 8003e58:	b25b      	sxtb	r3, r3
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	4313      	orrs	r3, r2
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	73bb      	strb	r3, [r7, #14]

                    /* Copy the data to be written in the respective array */
                    data_array[1] = reg_data;
 8003e6a:	7bbb      	ldrb	r3, [r7, #14]
 8003e6c:	727b      	strb	r3, [r7, #9]
                }

                /* Configure the interrupt mode */
                data_array[2] = BMI2_SET_BIT_POS0(data_array[2], BMI2_INT_LATCH, int_cfg->int_latch);
 8003e6e:	7abb      	ldrb	r3, [r7, #10]
 8003e70:	b25b      	sxtb	r3, r3
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	b25a      	sxtb	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	b25b      	sxtb	r3, r3
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	b25b      	sxtb	r3, r3
 8003e84:	4313      	orrs	r3, r2
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	72bb      	strb	r3, [r7, #10]

                /* Set the configurations simultaneously as
                 * INT1_IO_CTRL, INT2_IO_CTRL, and INT_LATCH lie
                 * in consecutive addresses
                 */
                rslt = bmi2_set_regs(BMI2_INT1_IO_CTRL_ADDR, data_array, 3, dev);
 8003e8c:	f107 0108 	add.w	r1, r7, #8
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2203      	movs	r2, #3
 8003e94:	2053      	movs	r0, #83	@ 0x53
 8003e96:	f7ff fdae 	bl	80039f6 <bmi2_set_regs>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8003e9e:	e002      	b.n	8003ea6 <bmi2_set_int_pin_config+0x1c6>
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_INT_PIN;
 8003ea0:	23f4      	movs	r3, #244	@ 0xf4
 8003ea2:	73fb      	strb	r3, [r7, #15]
        if ((int_pin > BMI2_INT_NONE) && (int_pin < BMI2_INT_PIN_MAX))
 8003ea4:	e002      	b.n	8003eac <bmi2_set_int_pin_config+0x1cc>
 8003ea6:	e001      	b.n	8003eac <bmi2_set_int_pin_config+0x1cc>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003ea8:	23ff      	movs	r3, #255	@ 0xff
 8003eaa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <bmi2_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi2_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f001 fb96 	bl	80055fc <null_ptr_check>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8003ed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f040 8099 	bne.w	8004010 <bmi2_set_sensor_config+0x158>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 8095 	beq.w	8004010 <bmi2_set_sensor_config+0x158>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003eec:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75bb      	strb	r3, [r7, #22]
 8003ef2:	e079      	b.n	8003fe8 <bmi2_set_sensor_config+0x130>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if (aps_stat == BMI2_ENABLE)
 8003ef4:	7d7b      	ldrb	r3, [r7, #21]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d105      	bne.n	8003f06 <bmi2_set_sensor_config+0x4e>
            {
                /* Disable advance power save if
                 * enabled
                 */
                rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	2000      	movs	r0, #0
 8003efe:	f7ff fe4e 	bl	8003b9e <bmi2_set_adv_power_save>
 8003f02:	4603      	mov	r3, r0
 8003f04:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BMI2_OK)
 8003f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d165      	bne.n	8003fda <bmi2_set_sensor_config+0x122>
            {
                switch (sens_cfg[loop].type)
 8003f0e:	7dba      	ldrb	r2, [r7, #22]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	d857      	bhi.n	8003fd4 <bmi2_set_sensor_config+0x11c>
 8003f24:	a201      	add	r2, pc, #4	@ (adr r2, 8003f2c <bmi2_set_sensor_config+0x74>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f55 	.word	0x08003f55
 8003f30:	08003f75 	.word	0x08003f75
 8003f34:	08003f95 	.word	0x08003f95
 8003f38:	08003fd5 	.word	0x08003fd5
 8003f3c:	08003fd5 	.word	0x08003fd5
 8003f40:	08003fd5 	.word	0x08003fd5
 8003f44:	08003fd5 	.word	0x08003fd5
 8003f48:	08003fd5 	.word	0x08003fd5
 8003f4c:	08003fd5 	.word	0x08003fd5
 8003f50:	08003fb5 	.word	0x08003fb5
                {
                    /* Set accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8003f54:	7dba      	ldrb	r2, [r7, #22]
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	3304      	adds	r3, #4
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 fa4a 	bl	8005402 <set_accel_config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	75fb      	strb	r3, [r7, #23]
                        break;
 8003f72:	e032      	b.n	8003fda <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8003f74:	7dba      	ldrb	r2, [r7, #22]
 8003f76:	4613      	mov	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	3304      	adds	r3, #4
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 fab1 	bl	80054f0 <set_gyro_config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	75fb      	strb	r3, [r7, #23]
                        break;
 8003f92:	e022      	b.n	8003fda <bmi2_set_sensor_config+0x122>

                    /* Set auxiliary configuration */
                    case BMI2_AUX:
                        rslt = set_aux_config(&sens_cfg[loop].cfg.aux, dev);
 8003f94:	7dba      	ldrb	r2, [r7, #22]
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fd1d 	bl	80049e8 <set_aux_config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	75fb      	strb	r3, [r7, #23]
                        break;
 8003fb2:	e012      	b.n	8003fda <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = set_gyro_user_gain_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 8003fb4:	7dba      	ldrb	r2, [r7, #22]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fd3c 	bl	8004a46 <set_gyro_user_gain_config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	75fb      	strb	r3, [r7, #23]
                        break;
 8003fd2:	e002      	b.n	8003fda <bmi2_set_sensor_config+0x122>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 8003fd4:	23f8      	movs	r3, #248	@ 0xf8
 8003fd6:	75fb      	strb	r3, [r7, #23]
                        break;
 8003fd8:	bf00      	nop
                }
            }

            /* Return error if any of the set configurations fail */
            if (rslt != BMI2_OK)
 8003fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <bmi2_set_sensor_config+0x13a>
        for (loop = 0; loop < n_sens; loop++)
 8003fe2:	7dbb      	ldrb	r3, [r7, #22]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	75bb      	strb	r3, [r7, #22]
 8003fe8:	7dba      	ldrb	r2, [r7, #22]
 8003fea:	7afb      	ldrb	r3, [r7, #11]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d381      	bcc.n	8003ef4 <bmi2_set_sensor_config+0x3c>
 8003ff0:	e000      	b.n	8003ff4 <bmi2_set_sensor_config+0x13c>
            {
                break;
 8003ff2:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8003ff4:	7d7b      	ldrb	r3, [r7, #21]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d10d      	bne.n	8004016 <bmi2_set_sensor_config+0x15e>
 8003ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <bmi2_set_sensor_config+0x15e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	2001      	movs	r0, #1
 8004006:	f7ff fdca 	bl	8003b9e <bmi2_set_adv_power_save>
 800400a:	4603      	mov	r3, r0
 800400c:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800400e:	e002      	b.n	8004016 <bmi2_set_sensor_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004010:	23ff      	movs	r3, #255	@ 0xff
 8004012:	75fb      	strb	r3, [r7, #23]
 8004014:	e000      	b.n	8004018 <bmi2_set_sensor_config+0x160>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8004016:	bf00      	nop
    }

    return rslt;
 8004018:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <bmi2_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi2_get_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	460b      	mov	r3, r1
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f001 fae0 	bl	80055fc <null_ptr_check>
 800403c:	4603      	mov	r3, r0
 800403e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8004040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f040 80b0 	bne.w	80041aa <bmi2_get_sensor_config+0x186>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80ac 	beq.w	80041aa <bmi2_get_sensor_config+0x186>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004058:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 800405a:	2300      	movs	r3, #0
 800405c:	75bb      	strb	r3, [r7, #22]
 800405e:	e08f      	b.n	8004180 <bmi2_get_sensor_config+0x15c>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if ((sens_cfg[loop].type >= BMI2_MAIN_SENS_MAX_NUM) || (sens_cfg[loop].type == BMI2_AUX))
 8004060:	7dba      	ldrb	r2, [r7, #22]
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d80a      	bhi.n	800408c <bmi2_get_sensor_config+0x68>
 8004076:	7dba      	ldrb	r2, [r7, #22]
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	461a      	mov	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4413      	add	r3, r2
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d108      	bne.n	800409e <bmi2_get_sensor_config+0x7a>
            {

                if (aps_stat == BMI2_ENABLE)
 800408c:	7d7b      	ldrb	r3, [r7, #21]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <bmi2_get_sensor_config+0x7a>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	2000      	movs	r0, #0
 8004096:	f7ff fd82 	bl	8003b9e <bmi2_set_adv_power_save>
 800409a:	4603      	mov	r3, r0
 800409c:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 800409e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d165      	bne.n	8004172 <bmi2_get_sensor_config+0x14e>
            {
                switch (sens_cfg[loop].type)
 80040a6:	7dba      	ldrb	r2, [r7, #22]
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	461a      	mov	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b09      	cmp	r3, #9
 80040ba:	d857      	bhi.n	800416c <bmi2_get_sensor_config+0x148>
 80040bc:	a201      	add	r2, pc, #4	@ (adr r2, 80040c4 <bmi2_get_sensor_config+0xa0>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	0800410d 	.word	0x0800410d
 80040cc:	0800412d 	.word	0x0800412d
 80040d0:	0800416d 	.word	0x0800416d
 80040d4:	0800416d 	.word	0x0800416d
 80040d8:	0800416d 	.word	0x0800416d
 80040dc:	0800416d 	.word	0x0800416d
 80040e0:	0800416d 	.word	0x0800416d
 80040e4:	0800416d 	.word	0x0800416d
 80040e8:	0800414d 	.word	0x0800414d
                {
                    /* Get accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 80040ec:	7dba      	ldrb	r2, [r7, #22]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	3304      	adds	r3, #4
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fecd 	bl	8004ea0 <get_accel_config>
 8004106:	4603      	mov	r3, r0
 8004108:	75fb      	strb	r3, [r7, #23]
                        break;
 800410a:	e032      	b.n	8004172 <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 800410c:	7dba      	ldrb	r2, [r7, #22]
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	461a      	mov	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4618      	mov	r0, r3
 8004122:	f000 feff 	bl	8004f24 <get_gyro_config>
 8004126:	4603      	mov	r3, r0
 8004128:	75fb      	strb	r3, [r7, #23]
                        break;
 800412a:	e022      	b.n	8004172 <bmi2_get_sensor_config+0x14e>

                    /* Get auxiliary configuration */
                    case BMI2_AUX:
                        rslt = get_aux_config(&sens_cfg[loop].cfg.aux, dev);
 800412c:	7dba      	ldrb	r2, [r7, #22]
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	3304      	adds	r3, #4
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 ff41 	bl	8004fc8 <get_aux_config>
 8004146:	4603      	mov	r3, r0
 8004148:	75fb      	strb	r3, [r7, #23]
                        break;
 800414a:	e012      	b.n	8004172 <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = get_gyro_gain_update_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 800414c:	7dba      	ldrb	r2, [r7, #22]
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	3304      	adds	r3, #4
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 ff67 	bl	8005034 <get_gyro_gain_update_config>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]
                        break;
 800416a:	e002      	b.n	8004172 <bmi2_get_sensor_config+0x14e>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 800416c:	23f8      	movs	r3, #248	@ 0xf8
 800416e:	75fb      	strb	r3, [r7, #23]
                        break;
 8004170:	bf00      	nop
                }
            }

            /* Return error if any of the get configurations fail */
            if (rslt != BMI2_OK)
 8004172:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d108      	bne.n	800418c <bmi2_get_sensor_config+0x168>
        for (loop = 0; loop < n_sens; loop++)
 800417a:	7dbb      	ldrb	r3, [r7, #22]
 800417c:	3301      	adds	r3, #1
 800417e:	75bb      	strb	r3, [r7, #22]
 8004180:	7dba      	ldrb	r2, [r7, #22]
 8004182:	7afb      	ldrb	r3, [r7, #11]
 8004184:	429a      	cmp	r2, r3
 8004186:	f4ff af6b 	bcc.w	8004060 <bmi2_get_sensor_config+0x3c>
 800418a:	e000      	b.n	800418e <bmi2_get_sensor_config+0x16a>
            {
                break;
 800418c:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800418e:	7d7b      	ldrb	r3, [r7, #21]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10d      	bne.n	80041b0 <bmi2_get_sensor_config+0x18c>
 8004194:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <bmi2_get_sensor_config+0x18c>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	2001      	movs	r0, #1
 80041a0:	f7ff fcfd 	bl	8003b9e <bmi2_set_adv_power_save>
 80041a4:	4603      	mov	r3, r0
 80041a6:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80041a8:	e002      	b.n	80041b0 <bmi2_get_sensor_config+0x18c>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80041aa:	23ff      	movs	r3, #255	@ 0xff
 80041ac:	75fb      	strb	r3, [r7, #23]
 80041ae:	e000      	b.n	80041b2 <bmi2_get_sensor_config+0x18e>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80041b0:	bf00      	nop
    }

    return rslt;
 80041b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop

080041c0 <bmi2_get_feature_data>:

/*!
 * @brief This API gets the feature data gyroscope user-gain update and gyroscope cross sensitivity.
 */
int8_t bmi2_get_feature_data(struct bmi2_feat_sensor_data *feat_sensor_data, uint8_t n_sens, struct bmi2_dev *dev)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	460b      	mov	r3, r1
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f001 fa12 	bl	80055fc <null_ptr_check>
 80041d8:	4603      	mov	r3, r0
 80041da:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 80041dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d15c      	bne.n	800429e <bmi2_get_feature_data+0xde>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d059      	beq.n	800429e <bmi2_get_feature_data+0xde>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80041f0:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	75bb      	strb	r3, [r7, #22]
 80041f6:	e04b      	b.n	8004290 <bmi2_get_feature_data+0xd0>
        {
            /* Disable Advance power save if enabled for feature
             * configurations
             */
            if (feat_sensor_data[loop].type >= BMI2_MAIN_SENS_MAX_NUM)
 80041f8:	7dbb      	ldrb	r3, [r7, #22]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d908      	bls.n	8004218 <bmi2_get_feature_data+0x58>
            {
                if (aps_stat == BMI2_ENABLE)
 8004206:	7d7b      	ldrb	r3, [r7, #21]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d105      	bne.n	8004218 <bmi2_get_feature_data+0x58>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	2000      	movs	r0, #0
 8004210:	f7ff fcc5 	bl	8003b9e <bmi2_set_adv_power_save>
 8004214:	4603      	mov	r3, r0
 8004216:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 8004218:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d127      	bne.n	8004270 <bmi2_get_feature_data+0xb0>
            {
                switch (feat_sensor_data[loop].type)
 8004220:	7dbb      	ldrb	r3, [r7, #22]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b09      	cmp	r3, #9
 800422c:	d00d      	beq.n	800424a <bmi2_get_feature_data+0x8a>
 800422e:	2b29      	cmp	r3, #41	@ 0x29
 8004230:	d117      	bne.n	8004262 <bmi2_get_feature_data+0xa2>
                {
                    case BMI2_GYRO_CROSS_SENSE:

                        /* Get Gyroscope cross sense value of z axis */
                        rslt = get_gyro_cross_sense(&feat_sensor_data[loop].sens_data.correction_factor_zx, dev);
 8004232:	7dbb      	ldrb	r3, [r7, #22]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	3304      	adds	r3, #4
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4618      	mov	r0, r3
 8004240:	f001 fac2 	bl	80057c8 <get_gyro_cross_sense>
 8004244:	4603      	mov	r3, r0
 8004246:	75fb      	strb	r3, [r7, #23]
                        break;
 8004248:	e00e      	b.n	8004268 <bmi2_get_feature_data+0xa8>

                    case BMI2_GYRO_GAIN_UPDATE:

                        /* Get saturation status of gyroscope user gain update  */
                        rslt =
                            get_gyro_gain_update_status(&feat_sensor_data[loop].sens_data.gyro_user_gain_status, dev);
 800424a:	7dbb      	ldrb	r3, [r7, #22]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	3304      	adds	r3, #4
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4618      	mov	r0, r3
 8004258:	f001 fa1b 	bl	8005692 <get_gyro_gain_update_status>
 800425c:	4603      	mov	r3, r0
 800425e:	75fb      	strb	r3, [r7, #23]
                        break;
 8004260:	e002      	b.n	8004268 <bmi2_get_feature_data+0xa8>
                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 8004262:	23f8      	movs	r3, #248	@ 0xf8
 8004264:	75fb      	strb	r3, [r7, #23]
                        break;
 8004266:	bf00      	nop
                }

                /* Return error if any of the get sensor data fails */
                if (rslt != BMI2_OK)
 8004268:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d114      	bne.n	800429a <bmi2_get_feature_data+0xda>
            }

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8004270:	7d7b      	ldrb	r3, [r7, #21]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d109      	bne.n	800428a <bmi2_get_feature_data+0xca>
 8004276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <bmi2_get_feature_data+0xca>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	2001      	movs	r0, #1
 8004282:	f7ff fc8c 	bl	8003b9e <bmi2_set_adv_power_save>
 8004286:	4603      	mov	r3, r0
 8004288:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 800428a:	7dbb      	ldrb	r3, [r7, #22]
 800428c:	3301      	adds	r3, #1
 800428e:	75bb      	strb	r3, [r7, #22]
 8004290:	7dba      	ldrb	r2, [r7, #22]
 8004292:	7afb      	ldrb	r3, [r7, #11]
 8004294:	429a      	cmp	r2, r3
 8004296:	d3af      	bcc.n	80041f8 <bmi2_get_feature_data+0x38>
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 8004298:	e003      	b.n	80042a2 <bmi2_get_feature_data+0xe2>
                    break;
 800429a:	bf00      	nop
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 800429c:	e001      	b.n	80042a2 <bmi2_get_feature_data+0xe2>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800429e:	23ff      	movs	r3, #255	@ 0xff
 80042a0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80042a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <bmi2_get_status>:
/*!
 * @brief This API gets the data ready status of accelerometer, gyroscope,
 * auxiliary, command decoder and busy status of auxiliary.
 */
int8_t bmi2_get_status(uint8_t *status, struct bmi2_dev *dev)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80042b8:	6838      	ldr	r0, [r7, #0]
 80042ba:	f001 f99f 	bl	80055fc <null_ptr_check>
 80042be:	4603      	mov	r3, r0
 80042c0:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (status != NULL))
 80042c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <bmi2_get_status+0x34>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <bmi2_get_status+0x34>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, status, 1, dev);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2201      	movs	r2, #1
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	2003      	movs	r0, #3
 80042d8:	f7ff fb1a 	bl	8003910 <bmi2_get_regs>
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	e001      	b.n	80042e6 <bmi2_get_status+0x38>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80042e2:	23ff      	movs	r3, #255	@ 0xff
 80042e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80042e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <bmi2_map_feat_int>:

/*!
 * @brief This API maps/unmaps feature interrupts to that of interrupt pins.
 */
int8_t bmi2_map_feat_int(uint8_t type, enum bmi2_hw_int_pin hw_int_pin, struct bmi2_dev *dev)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4603      	mov	r3, r0
 80042fa:	603a      	str	r2, [r7, #0]
 80042fc:	71fb      	strb	r3, [r7, #7]
 80042fe:	460b      	mov	r3, r1
 8004300:	71bb      	strb	r3, [r7, #6]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define the value of feature interrupts */
    uint8_t feat_int = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	73bb      	strb	r3, [r7, #14]

    /* Array to store the interrupt mask bits */
    uint8_t data_array[2] = { 0 };
 8004306:	2300      	movs	r3, #0
 8004308:	81bb      	strh	r3, [r7, #12]

    /* Structure to define map the interrupts */
    struct bmi2_map_int map_int = { 0 };
 800430a:	2300      	movs	r3, #0
 800430c:	813b      	strh	r3, [r7, #8]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800430e:	6838      	ldr	r0, [r7, #0]
 8004310:	f001 f974 	bl	80055fc <null_ptr_check>
 8004314:	4603      	mov	r3, r0
 8004316:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d13a      	bne.n	8004396 <bmi2_map_feat_int+0xa4>
    {
        /* Read interrupt map1 and map2 and register */
        rslt = bmi2_get_regs(BMI2_INT1_MAP_FEAT_ADDR, data_array, 2, dev);
 8004320:	f107 010c 	add.w	r1, r7, #12
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2202      	movs	r2, #2
 8004328:	2056      	movs	r0, #86	@ 0x56
 800432a:	f7ff faf1 	bl	8003910 <bmi2_get_regs>
 800432e:	4603      	mov	r3, r0
 8004330:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI2_OK)
 8004332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d12f      	bne.n	800439a <bmi2_map_feat_int+0xa8>
        {
            /* Get the value of the feature interrupt to be mapped */
            extract_feat_int_map(&map_int, type, dev);
 800433a:	79f9      	ldrb	r1, [r7, #7]
 800433c:	f107 0308 	add.w	r3, r7, #8
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f001 f979 	bl	800563a <extract_feat_int_map>

            feat_int = map_int.sens_map_int;
 8004348:	7a7b      	ldrb	r3, [r7, #9]
 800434a:	73bb      	strb	r3, [r7, #14]

            /* Map the interrupts */
            rslt = map_feat_int(data_array, hw_int_pin, feat_int);
 800434c:	7bba      	ldrb	r2, [r7, #14]
 800434e:	79b9      	ldrb	r1, [r7, #6]
 8004350:	f107 030c 	add.w	r3, r7, #12
 8004354:	4618      	mov	r0, r3
 8004356:	f000 ff97 	bl	8005288 <map_feat_int>
 800435a:	4603      	mov	r3, r0
 800435c:	73fb      	strb	r3, [r7, #15]

            /* Map the interrupts to INT1 and INT2 map register */
            if (rslt == BMI2_OK)
 800435e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d119      	bne.n	800439a <bmi2_map_feat_int+0xa8>
            {
                rslt = bmi2_set_regs(BMI2_INT1_MAP_FEAT_ADDR, &data_array[0], 1, dev);
 8004366:	f107 010c 	add.w	r1, r7, #12
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	2056      	movs	r0, #86	@ 0x56
 8004370:	f7ff fb41 	bl	80039f6 <bmi2_set_regs>
 8004374:	4603      	mov	r3, r0
 8004376:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI2_OK)
 8004378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10c      	bne.n	800439a <bmi2_map_feat_int+0xa8>
                {
                    rslt = bmi2_set_regs(BMI2_INT2_MAP_FEAT_ADDR, &data_array[1], 1, dev);
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	1c59      	adds	r1, r3, #1
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2201      	movs	r2, #1
 800438a:	2057      	movs	r0, #87	@ 0x57
 800438c:	f7ff fb33 	bl	80039f6 <bmi2_set_regs>
 8004390:	4603      	mov	r3, r0
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e001      	b.n	800439a <bmi2_map_feat_int+0xa8>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004396:	23ff      	movs	r3, #255	@ 0xff
 8004398:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800439a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <bmi2_get_gyro_cross_sense>:
/*!
 * @brief This API updates the cross sensitivity coefficient between gyroscope's
 * X and Z axes.
 */
int8_t bmi2_get_gyro_cross_sense(struct bmi2_dev *dev)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b088      	sub	sp, #32
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	77fb      	strb	r3, [r7, #31]
    struct bmi2_feat_sensor_data data;

    /* Check if the feature is supported by this variant */
    if (dev->variant_feature & BMI2_GYRO_CROSS_SENS_ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <bmi2_get_gyro_cross_sense+0x5c>
    {
        rslt = null_ptr_check(dev);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f001 f91b 	bl	80055fc <null_ptr_check>
 80043c6:	4603      	mov	r3, r0
 80043c8:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80043ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d114      	bne.n	80043fc <bmi2_get_gyro_cross_sense+0x56>
        {
            /* Select the feature whose data is to be acquired */
            data.type = BMI2_GYRO_CROSS_SENSE;
 80043d2:	2329      	movs	r3, #41	@ 0x29
 80043d4:	733b      	strb	r3, [r7, #12]

            /* Get the respective data */
            rslt = bmi2_get_feature_data(&data, 1, dev);
 80043d6:	f107 030c 	add.w	r3, r7, #12
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	2101      	movs	r1, #1
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff feee 	bl	80041c0 <bmi2_get_feature_data>
 80043e4:	4603      	mov	r3, r0
 80043e6:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 80043e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <bmi2_get_gyro_cross_sense+0x60>
            {
                /* Update the gyroscope cross sense value of z axis
                 * in the device structure
                 */
                dev->gyr_cross_sens_zx = data.sens_data.correction_factor_zx;
 80043f0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80043fa:	e004      	b.n	8004406 <bmi2_get_gyro_cross_sense+0x60>
            }
        }
        else
        {
            rslt = BMI2_E_NULL_PTR;
 80043fc:	23ff      	movs	r3, #255	@ 0xff
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e001      	b.n	8004406 <bmi2_get_gyro_cross_sense+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8004402:	23f8      	movs	r3, #248	@ 0xf8
 8004404:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8004406:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <bmi2_get_internal_status>:

/*!
 * @brief This API gets Error bits and message indicating internal status.
 */
int8_t bmi2_get_internal_status(uint8_t *int_stat, struct bmi2_dev *dev)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800441c:	6838      	ldr	r0, [r7, #0]
 800441e:	f001 f8ed 	bl	80055fc <null_ptr_check>
 8004422:	4603      	mov	r3, r0
 8004424:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (int_stat != NULL))
 8004426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d113      	bne.n	8004456 <bmi2_get_internal_status+0x44>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <bmi2_get_internal_status+0x44>
    {
        /* Wait till ASIC is initialized */
        dev->delay_us(BMI2_INTERNAL_STATUS_READ_DELAY_MS, dev->intf_ptr);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	6852      	ldr	r2, [r2, #4]
 800443c:	4611      	mov	r1, r2
 800443e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8004442:	4798      	blx	r3

        /* Get the error bits and message */
        rslt = bmi2_get_regs(BMI2_INTERNAL_STATUS_ADDR, int_stat, 1, dev);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	2021      	movs	r0, #33	@ 0x21
 800444c:	f7ff fa60 	bl	8003910 <bmi2_get_regs>
 8004450:	4603      	mov	r3, r0
 8004452:	73fb      	strb	r3, [r7, #15]
 8004454:	e001      	b.n	800445a <bmi2_get_internal_status+0x48>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004456:	23ff      	movs	r3, #255	@ 0xff
 8004458:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800445a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <bmi2_get_feat_config>:
/*!
 * @brief This API is used to get the feature configuration from the
 * selected page.
 */
int8_t bmi2_get_feat_config(uint8_t sw_page, uint8_t *feat_config, struct bmi2_dev *dev)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b086      	sub	sp, #24
 800446a:	af00      	add	r7, sp, #0
 800446c:	4603      	mov	r3, r0
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	73fb      	strb	r3, [r7, #15]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define bytes remaining to read */
    uint8_t bytes_remain = BMI2_FEAT_SIZE_IN_BYTES;
 8004474:	2310      	movs	r3, #16
 8004476:	75bb      	strb	r3, [r7, #22]

    /* Variable to define the read-write length */
    uint8_t read_write_len = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	757b      	strb	r3, [r7, #21]

    /* Variable to define the feature configuration address */
    uint8_t addr = BMI2_FEATURES_REG_ADDR;
 800447c:	2330      	movs	r3, #48	@ 0x30
 800447e:	753b      	strb	r3, [r7, #20]

    /* Variable to define index */
    uint8_t index = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	74fb      	strb	r3, [r7, #19]

    if ((feat_config == NULL) || (dev == NULL))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <bmi2_get_feat_config+0x2a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <bmi2_get_feat_config+0x30>
    {
        rslt = BMI2_E_NULL_PTR;
 8004490:	23ff      	movs	r3, #255	@ 0xff
 8004492:	75fb      	strb	r3, [r7, #23]
 8004494:	e073      	b.n	800457e <bmi2_get_feat_config+0x118>
    }
    else
    {
        /* Check whether the page is valid */
        if (sw_page < dev->page_max)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	7e1a      	ldrb	r2, [r3, #24]
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	429a      	cmp	r2, r3
 800449e:	d96c      	bls.n	800457a <bmi2_get_feat_config+0x114>
        {
            /* Switch page */
            rslt = bmi2_set_regs(BMI2_FEAT_PAGE_ADDR, &sw_page, 1, dev);
 80044a0:	f107 010f 	add.w	r1, r7, #15
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	202f      	movs	r0, #47	@ 0x2f
 80044aa:	f7ff faa4 	bl	80039f6 <bmi2_set_regs>
 80044ae:	4603      	mov	r3, r0
 80044b0:	75fb      	strb	r3, [r7, #23]

            /* If user length is less than feature length */
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 80044b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d152      	bne.n	8004560 <bmi2_get_feat_config+0xfa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	89db      	ldrh	r3, [r3, #14]
 80044be:	2b0f      	cmp	r3, #15
 80044c0:	d84e      	bhi.n	8004560 <bmi2_get_feat_config+0xfa>
            {
                /* Read-write should be even */
                if ((dev->read_write_len % 2) != 0)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	89db      	ldrh	r3, [r3, #14]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d041      	beq.n	8004554 <bmi2_get_feat_config+0xee>
                {
                    dev->read_write_len--;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	89db      	ldrh	r3, [r3, #14]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	81da      	strh	r2, [r3, #14]
                }

                while (bytes_remain > 0)
 80044dc:	e03a      	b.n	8004554 <bmi2_get_feat_config+0xee>
                {
                    if (bytes_remain >= dev->read_write_len)
 80044de:	7dbb      	ldrb	r3, [r7, #22]
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	89db      	ldrh	r3, [r3, #14]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d31d      	bcc.n	8004526 <bmi2_get_feat_config+0xc0>
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, &feat_config[index], dev->read_write_len, dev);
 80044ea:	7cfb      	ldrb	r3, [r7, #19]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	18d1      	adds	r1, r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	89da      	ldrh	r2, [r3, #14]
 80044f4:	7d38      	ldrb	r0, [r7, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f7ff fa0a 	bl	8003910 <bmi2_get_regs>
 80044fc:	4603      	mov	r3, r0
 80044fe:	75fb      	strb	r3, [r7, #23]

                        /* Update index */
                        index += (uint8_t) dev->read_write_len;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	89db      	ldrh	r3, [r3, #14]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	7cfb      	ldrb	r3, [r7, #19]
 8004508:	4413      	add	r3, r2
 800450a:	74fb      	strb	r3, [r7, #19]

                        /* Update address */
                        addr += (uint8_t) dev->read_write_len;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	89db      	ldrh	r3, [r3, #14]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	7d3b      	ldrb	r3, [r7, #20]
 8004514:	4413      	add	r3, r2
 8004516:	753b      	strb	r3, [r7, #20]

                        /* Update read-write length */
                        read_write_len += (uint8_t) dev->read_write_len;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	89db      	ldrh	r3, [r3, #14]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	7d7b      	ldrb	r3, [r7, #21]
 8004520:	4413      	add	r3, r2
 8004522:	757b      	strb	r3, [r7, #21]
 8004524:	e00e      	b.n	8004544 <bmi2_get_feat_config+0xde>
                    }
                    else
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, (uint8_t *) (feat_config + index), (uint16_t) bytes_remain, dev);
 8004526:	7cfb      	ldrb	r3, [r7, #19]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	18d1      	adds	r1, r2, r3
 800452c:	7dbb      	ldrb	r3, [r7, #22]
 800452e:	b29a      	uxth	r2, r3
 8004530:	7d38      	ldrb	r0, [r7, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f7ff f9ec 	bl	8003910 <bmi2_get_regs>
 8004538:	4603      	mov	r3, r0
 800453a:	75fb      	strb	r3, [r7, #23]

                        /* Update read-write length */
                        read_write_len += bytes_remain;
 800453c:	7d7a      	ldrb	r2, [r7, #21]
 800453e:	7dbb      	ldrb	r3, [r7, #22]
 8004540:	4413      	add	r3, r2
 8004542:	757b      	strb	r3, [r7, #21]
                    }

                    /* Remaining bytes */
                    bytes_remain = BMI2_FEAT_SIZE_IN_BYTES - read_write_len;
 8004544:	7d7b      	ldrb	r3, [r7, #21]
 8004546:	f1c3 0310 	rsb	r3, r3, #16
 800454a:	75bb      	strb	r3, [r7, #22]

                    if (rslt != BMI2_OK)
 800454c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <bmi2_get_feat_config+0xf6>
                while (bytes_remain > 0)
 8004554:	7dbb      	ldrb	r3, [r7, #22]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1c1      	bne.n	80044de <bmi2_get_feat_config+0x78>
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 800455a:	e010      	b.n	800457e <bmi2_get_feat_config+0x118>
                    {
                        break;
 800455c:	bf00      	nop
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 800455e:	e00e      	b.n	800457e <bmi2_get_feat_config+0x118>
                    }
                }
            }
            else if (rslt == BMI2_OK)
 8004560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <bmi2_get_feat_config+0x118>
            {
                /* Get configuration from the page */
                rslt = bmi2_get_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2210      	movs	r2, #16
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	2030      	movs	r0, #48	@ 0x30
 8004570:	f7ff f9ce 	bl	8003910 <bmi2_get_regs>
 8004574:	4603      	mov	r3, r0
 8004576:	75fb      	strb	r3, [r7, #23]
 8004578:	e001      	b.n	800457e <bmi2_get_feat_config+0x118>
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_PAGE;
 800457a:	23f6      	movs	r3, #246	@ 0xf6
 800457c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800457e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <bmi2_extract_input_feat_config>:
 * @brief This API is used to extract the input feature configuration
 * details from the look-up table.
 */
uint8_t bmi2_extract_input_feat_config(struct bmi2_feature_config *feat_config, uint8_t type,
                                       const struct bmi2_dev *dev)
{
 800458a:	b480      	push	{r7}
 800458c:	b087      	sub	sp, #28
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	460b      	mov	r3, r1
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 800459c:	2300      	movs	r3, #0
 800459e:	75bb      	strb	r3, [r7, #22]

    /* Search for the input feature from the input configuration array */
    while (loop < dev->input_sens)
 80045a0:	e01c      	b.n	80045dc <bmi2_extract_input_feat_config+0x52>
    {
        if (dev->feat_config[loop].type == type)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a19      	ldr	r1, [r3, #32]
 80045a6:	7dfa      	ldrb	r2, [r7, #23]
 80045a8:	4613      	mov	r3, r2
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	4413      	add	r3, r2
 80045ae:	440b      	add	r3, r1
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	7afa      	ldrb	r2, [r7, #11]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d10e      	bne.n	80045d6 <bmi2_extract_input_feat_config+0x4c>
        {
            *feat_config = dev->feat_config[loop];
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a19      	ldr	r1, [r3, #32]
 80045bc:	7dfa      	ldrb	r2, [r7, #23]
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	18ca      	adds	r2, r1, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8811      	ldrh	r1, [r2, #0]
 80045ca:	7892      	ldrb	r2, [r2, #2]
 80045cc:	8019      	strh	r1, [r3, #0]
 80045ce:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75bb      	strb	r3, [r7, #22]
            break;
 80045d4:	e007      	b.n	80045e6 <bmi2_extract_input_feat_config+0x5c>
        }

        loop++;
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
 80045d8:	3301      	adds	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->input_sens)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7e5b      	ldrb	r3, [r3, #25]
 80045e0:	7dfa      	ldrb	r2, [r7, #23]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d3dd      	bcc.n	80045a2 <bmi2_extract_input_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 80045e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <write_config_file>:

/*!
 * @brief This internal API writes the configuration file.
 */
static int8_t write_config_file(struct bmi2_dev *dev)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to update the configuration file index */
    uint16_t index = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	82bb      	strh	r3, [r7, #20]

    /* config file size */
    uint16_t config_size = dev->config_size;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8004606:	827b      	strh	r3, [r7, #18]

    /* Variable to get the remainder */
    uint8_t remain = (uint8_t)(config_size % dev->read_write_len);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	89da      	ldrh	r2, [r3, #14]
 800460c:	8a7b      	ldrh	r3, [r7, #18]
 800460e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004612:	fb01 f202 	mul.w	r2, r1, r2
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	747b      	strb	r3, [r7, #17]

    /* Variable to get the balance bytes */
    uint16_t bal_byte = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	81fb      	strh	r3, [r7, #14]

    /* Variable to define temporary read/write length */
    uint16_t read_write_len = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	81bb      	strh	r3, [r7, #12]

    /* Disable advanced power save mode */
    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	2000      	movs	r0, #0
 8004628:	f7ff fab9 	bl	8003b9e <bmi2_set_adv_power_save>
 800462c:	4603      	mov	r3, r0
 800462e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8004630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f040 8088 	bne.w	800474a <write_config_file+0x156>
    {
        /* Disable loading of the configuration */
        rslt = set_config_load(BMI2_DISABLE, dev);
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	2000      	movs	r0, #0
 800463e:	f000 f88a 	bl	8004756 <set_config_load>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 8004646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d17d      	bne.n	800474a <write_config_file+0x156>
        {
            if (!remain)
 800464e:	7c7b      	ldrb	r3, [r7, #17]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d11c      	bne.n	800468e <write_config_file+0x9a>
            {
                /* Write the configuration file */
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 8004654:	2300      	movs	r3, #0
 8004656:	82bb      	strh	r3, [r7, #20]
 8004658:	e010      	b.n	800467c <write_config_file+0x88>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	8abb      	ldrh	r3, [r7, #20]
 8004660:	18d0      	adds	r0, r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	89da      	ldrh	r2, [r3, #14]
 8004666:	8ab9      	ldrh	r1, [r7, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f000 f8a6 	bl	80047ba <upload_file>
 800466e:	4603      	mov	r3, r0
 8004670:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	89da      	ldrh	r2, [r3, #14]
 8004676:	8abb      	ldrh	r3, [r7, #20]
 8004678:	4413      	add	r3, r2
 800467a:	82bb      	strh	r3, [r7, #20]
 800467c:	8aba      	ldrh	r2, [r7, #20]
 800467e:	8a7b      	ldrh	r3, [r7, #18]
 8004680:	429a      	cmp	r2, r3
 8004682:	d24e      	bcs.n	8004722 <write_config_file+0x12e>
 8004684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0e6      	beq.n	800465a <write_config_file+0x66>
 800468c:	e049      	b.n	8004722 <write_config_file+0x12e>
                }
            }
            else
            {
                /* Get the balance bytes */
                bal_byte = (uint16_t) config_size - (uint16_t) remain;
 800468e:	7c7b      	ldrb	r3, [r7, #17]
 8004690:	b29b      	uxth	r3, r3
 8004692:	8a7a      	ldrh	r2, [r7, #18]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	81fb      	strh	r3, [r7, #14]

                /* Write the configuration file for the balancem bytes */
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8004698:	2300      	movs	r3, #0
 800469a:	82bb      	strh	r3, [r7, #20]
 800469c:	e010      	b.n	80046c0 <write_config_file+0xcc>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	8abb      	ldrh	r3, [r7, #20]
 80046a4:	18d0      	adds	r0, r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	89da      	ldrh	r2, [r3, #14]
 80046aa:	8ab9      	ldrh	r1, [r7, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f000 f884 	bl	80047ba <upload_file>
 80046b2:	4603      	mov	r3, r0
 80046b4:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	89da      	ldrh	r2, [r3, #14]
 80046ba:	8abb      	ldrh	r3, [r7, #20]
 80046bc:	4413      	add	r3, r2
 80046be:	82bb      	strh	r3, [r7, #20]
 80046c0:	8aba      	ldrh	r2, [r7, #20]
 80046c2:	89fb      	ldrh	r3, [r7, #14]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d203      	bcs.n	80046d0 <write_config_file+0xdc>
 80046c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0e6      	beq.n	800469e <write_config_file+0xaa>
                }

                if (rslt == BMI2_OK)
 80046d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d124      	bne.n	8004722 <write_config_file+0x12e>
                {
                    /* Update length in a temporary variable */
                    read_write_len = dev->read_write_len;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	89db      	ldrh	r3, [r3, #14]
 80046dc:	81bb      	strh	r3, [r7, #12]

                    /* Write the remaining bytes in 2 bytes length */
                    dev->read_write_len = 2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	81da      	strh	r2, [r3, #14]

                    /* Write the configuration file for the remaining bytes */
                    for (index = bal_byte;
 80046e4:	89fb      	ldrh	r3, [r7, #14]
 80046e6:	82bb      	strh	r3, [r7, #20]
 80046e8:	e010      	b.n	800470c <write_config_file+0x118>
                         (index < config_size) && (rslt == BMI2_OK);
                         index += dev->read_write_len)
                    {
                        rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	8abb      	ldrh	r3, [r7, #20]
 80046f0:	18d0      	adds	r0, r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	89da      	ldrh	r2, [r3, #14]
 80046f6:	8ab9      	ldrh	r1, [r7, #20]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f000 f85e 	bl	80047ba <upload_file>
 80046fe:	4603      	mov	r3, r0
 8004700:	75fb      	strb	r3, [r7, #23]
                         index += dev->read_write_len)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	89da      	ldrh	r2, [r3, #14]
 8004706:	8abb      	ldrh	r3, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	82bb      	strh	r3, [r7, #20]
                         (index < config_size) && (rslt == BMI2_OK);
 800470c:	8aba      	ldrh	r2, [r7, #20]
 800470e:	8a7b      	ldrh	r3, [r7, #18]
 8004710:	429a      	cmp	r2, r3
 8004712:	d203      	bcs.n	800471c <write_config_file+0x128>
 8004714:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0e6      	beq.n	80046ea <write_config_file+0xf6>
                    }

                    /* Restore the user set length back from the temporary variable */
                    dev->read_write_len = read_write_len;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	89ba      	ldrh	r2, [r7, #12]
 8004720:	81da      	strh	r2, [r3, #14]
                }
            }

            if (rslt == BMI2_OK)
 8004722:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10f      	bne.n	800474a <write_config_file+0x156>
            {
                /* Enable loading of the configuration */
                rslt = set_config_load(BMI2_ENABLE, dev);
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	2001      	movs	r0, #1
 800472e:	f000 f812 	bl	8004756 <set_config_load>
 8004732:	4603      	mov	r3, r0
 8004734:	75fb      	strb	r3, [r7, #23]

                if (rslt == BMI2_OK)
 8004736:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d105      	bne.n	800474a <write_config_file+0x156>
                {
                    /* Enable advanced power save mode */
                    rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	2001      	movs	r0, #1
 8004742:	f7ff fa2c 	bl	8003b9e <bmi2_set_adv_power_save>
 8004746:	4603      	mov	r3, r0
 8004748:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 800474a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <set_config_load>:
/*!
 * @brief This internal API enables/disables the loading of the configuration
 * file.
 */
static int8_t set_config_load(uint8_t enable, struct bmi2_dev *dev)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	4603      	mov	r3, r0
 800475e:	6039      	str	r1, [r7, #0]
 8004760:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8004766:	f107 010e 	add.w	r1, r7, #14
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2201      	movs	r2, #1
 800476e:	2059      	movs	r0, #89	@ 0x59
 8004770:	f7ff f8ce 	bl	8003910 <bmi2_get_regs>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d116      	bne.n	80047ae <set_config_load+0x58>
    {
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_CONF_LOAD_EN, enable);
 8004780:	7bbb      	ldrb	r3, [r7, #14]
 8004782:	b25b      	sxtb	r3, r3
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	b25a      	sxtb	r2, r3
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	b25b      	sxtb	r3, r3
 8004794:	4313      	orrs	r3, r2
 8004796:	b25b      	sxtb	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	73bb      	strb	r3, [r7, #14]
        rslt = bmi2_set_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 800479c:	f107 010e 	add.w	r1, r7, #14
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	2059      	movs	r0, #89	@ 0x59
 80047a6:	f7ff f926 	bl	80039f6 <bmi2_set_regs>
 80047aa:	4603      	mov	r3, r0
 80047ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80047ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <upload_file>:

/*!
 * @brief This internal API loads the configuration file.
 */
static int8_t upload_file(const uint8_t *config_data, uint16_t index, uint16_t write_len, struct bmi2_dev *dev)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b086      	sub	sp, #24
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	607b      	str	r3, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	817b      	strh	r3, [r7, #10]
 80047c8:	4613      	mov	r3, r2
 80047ca:	813b      	strh	r3, [r7, #8]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store address */
    uint8_t addr_array[2] = { 0 };
 80047cc:	2300      	movs	r3, #0
 80047ce:	82bb      	strh	r3, [r7, #20]

    if (config_data != NULL)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d024      	beq.n	8004820 <upload_file+0x66>
    {
        /* Store 0 to 3 bits of address in first byte */
        addr_array[0] = (uint8_t)((index / 2) & 0x0F);
 80047d6:	897b      	ldrh	r3, [r7, #10]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	b29b      	uxth	r3, r3
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	753b      	strb	r3, [r7, #20]

        /* Store 4 to 11 bits of address in the second byte */
        addr_array[1] = (uint8_t)((index / 2) >> 4);
 80047e6:	897b      	ldrh	r3, [r7, #10]
 80047e8:	085b      	lsrs	r3, r3, #1
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	757b      	strb	r3, [r7, #21]

        /* Write the 2 bytes of address in consecutive locations */
        rslt = bmi2_set_regs(BMI2_INIT_ADDR_0, addr_array, 2, dev);
 80047f4:	f107 0114 	add.w	r1, r7, #20
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	205b      	movs	r0, #91	@ 0x5b
 80047fe:	f7ff f8fa 	bl	80039f6 <bmi2_set_regs>
 8004802:	4603      	mov	r3, r0
 8004804:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 8004806:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <upload_file+0x6a>
        {
            /* Burst write configuration file data corresponding to user set length */
            rslt = bmi2_set_regs(BMI2_INIT_DATA_ADDR, (uint8_t *)config_data, write_len, dev);
 800480e:	893a      	ldrh	r2, [r7, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	205e      	movs	r0, #94	@ 0x5e
 8004816:	f7ff f8ee 	bl	80039f6 <bmi2_set_regs>
 800481a:	4603      	mov	r3, r0
 800481c:	75fb      	strb	r3, [r7, #23]
 800481e:	e001      	b.n	8004824 <upload_file+0x6a>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004820:	23ff      	movs	r3, #255	@ 0xff
 8004822:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004824:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <validate_bw_perf_mode>:
/*!
 * @brief This internal API validates bandwidth and performance mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_perf_mode(uint8_t *bandwidth, uint8_t *perf_mode, struct bmi2_dev *dev)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(perf_mode, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	2100      	movs	r1, #0
 8004842:	68b8      	ldr	r0, [r7, #8]
 8004844:	f000 fda6 	bl	8005394 <check_boundary_val>
 8004848:	4603      	mov	r3, r0
 800484a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 800484c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d114      	bne.n	800487e <validate_bw_perf_mode+0x4e>
    {
        /* Validate and auto-correct bandwidth parameter */
        if (*perf_mode == BMI2_PERF_OPT_MODE)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d108      	bne.n	800486e <validate_bw_perf_mode+0x3e>
        {
            /* Validate for continuous filter mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_CIC_AVG8, dev);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2203      	movs	r2, #3
 8004860:	2100      	movs	r1, #0
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fd96 	bl	8005394 <check_boundary_val>
 8004868:	4603      	mov	r3, r0
 800486a:	75fb      	strb	r3, [r7, #23]
 800486c:	e007      	b.n	800487e <validate_bw_perf_mode+0x4e>
        }
        else
        {
            /* Validate for CIC averaging mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_RES_AVG128, dev);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2207      	movs	r2, #7
 8004872:	2100      	movs	r1, #0
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fd8d 	bl	8005394 <check_boundary_val>
 800487a:	4603      	mov	r3, r0
 800487c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800487e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <validate_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_odr_range(uint8_t *odr, uint8_t *range, struct bmi2_dev *dev)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto correct ODR */
    rslt = check_boundary_val(odr, BMI2_ACC_ODR_0_78HZ, BMI2_ACC_ODR_1600HZ, dev);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	220c      	movs	r2, #12
 800489a:	2101      	movs	r1, #1
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fd79 	bl	8005394 <check_boundary_val>
 80048a2:	4603      	mov	r3, r0
 80048a4:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 80048a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d107      	bne.n	80048be <validate_odr_range+0x34>
    {
        /* Validate and auto correct Range */
        rslt = check_boundary_val(range, BMI2_ACC_RANGE_2G, BMI2_ACC_RANGE_16G, dev);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2203      	movs	r2, #3
 80048b2:	2100      	movs	r1, #0
 80048b4:	68b8      	ldr	r0, [r7, #8]
 80048b6:	f000 fd6d 	bl	8005394 <check_boundary_val>
 80048ba:	4603      	mov	r3, r0
 80048bc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80048be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <validate_gyro_config>:
/*!
 * @brief This internal API validates bandwidth, performance mode, low power/
 * high performance mode, ODR, and range set by the user.
 */
static int8_t validate_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(&config->filter_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	1c98      	adds	r0, r3, #2
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2201      	movs	r2, #1
 80048dc:	2100      	movs	r1, #0
 80048de:	f000 fd59 	bl	8005394 <check_boundary_val>
 80048e2:	4603      	mov	r3, r0
 80048e4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80048e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d13b      	bne.n	8004966 <validate_gyro_config+0x9c>
    {
        /* Validate and auto-correct bandwidth parameter */
        rslt = check_boundary_val(&config->bwp, BMI2_GYR_OSR4_MODE, BMI2_GYR_CIC_MODE, dev);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	1c58      	adds	r0, r3, #1
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2203      	movs	r2, #3
 80048f6:	2100      	movs	r1, #0
 80048f8:	f000 fd4c 	bl	8005394 <check_boundary_val>
 80048fc:	4603      	mov	r3, r0
 80048fe:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8004900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d12e      	bne.n	8004966 <validate_gyro_config+0x9c>
        {
            /* Validate and auto-correct low power/high-performance parameter */
            rslt = check_boundary_val(&config->noise_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	1d58      	adds	r0, r3, #5
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2201      	movs	r2, #1
 8004910:	2100      	movs	r1, #0
 8004912:	f000 fd3f 	bl	8005394 <check_boundary_val>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 800491a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d121      	bne.n	8004966 <validate_gyro_config+0x9c>
            {
                /* Validate and auto-correct ODR parameter */
                rslt = check_boundary_val(&config->odr, BMI2_GYR_ODR_25HZ, BMI2_GYR_ODR_3200HZ, dev);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	220d      	movs	r2, #13
 8004928:	2106      	movs	r1, #6
 800492a:	f000 fd33 	bl	8005394 <check_boundary_val>
 800492e:	4603      	mov	r3, r0
 8004930:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI2_OK)
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d115      	bne.n	8004966 <validate_gyro_config+0x9c>
                {
                    /* Validate and auto-correct OIS range */
                    rslt = check_boundary_val(&config->ois_range, BMI2_GYR_OIS_250, BMI2_GYR_OIS_2000, dev);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	1cd8      	adds	r0, r3, #3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2201      	movs	r2, #1
 8004942:	2100      	movs	r1, #0
 8004944:	f000 fd26 	bl	8005394 <check_boundary_val>
 8004948:	4603      	mov	r3, r0
 800494a:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI2_OK)
 800494c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d108      	bne.n	8004966 <validate_gyro_config+0x9c>
                    {
                        /* Validate and auto-correct range parameter */
                        rslt = check_boundary_val(&config->range, BMI2_GYR_RANGE_2000, BMI2_GYR_RANGE_125, dev);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1d18      	adds	r0, r3, #4
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2204      	movs	r2, #4
 800495c:	2100      	movs	r1, #0
 800495e:	f000 fd19 	bl	8005394 <check_boundary_val>
 8004962:	4603      	mov	r3, r0
 8004964:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004966:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <cfg_error_status>:
/*!
 * @brief This internal API shows the error status when illegal sensor
 * configuration is set.
 */
static int8_t cfg_error_status(struct bmi2_dev *dev)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get error status of the set sensor configuration */
    rslt = bmi2_get_regs(BMI2_EVENT_ADDR, &reg_data, 1, dev);
 800497c:	f107 010e 	add.w	r1, r7, #14
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	201b      	movs	r0, #27
 8004986:	f7fe ffc3 	bl	8003910 <bmi2_get_regs>
 800498a:	4603      	mov	r3, r0
 800498c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800498e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d121      	bne.n	80049da <cfg_error_status+0x66>
    {
        reg_data = BMI2_GET_BITS(reg_data, BMI2_EVENT_FLAG);
 8004996:	7bbb      	ldrb	r3, [r7, #14]
 8004998:	109b      	asrs	r3, r3, #2
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	73bb      	strb	r3, [r7, #14]
        switch (reg_data)
 80049a4:	7bbb      	ldrb	r3, [r7, #14]
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d816      	bhi.n	80049d8 <cfg_error_status+0x64>
 80049aa:	a201      	add	r2, pc, #4	@ (adr r2, 80049b0 <cfg_error_status+0x3c>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	080049c1 	.word	0x080049c1
 80049b4:	080049c7 	.word	0x080049c7
 80049b8:	080049cd 	.word	0x080049cd
 80049bc:	080049d3 	.word	0x080049d3
        {
            case BMI2_NO_ERROR:
                rslt = BMI2_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	73fb      	strb	r3, [r7, #15]
                break;
 80049c4:	e009      	b.n	80049da <cfg_error_status+0x66>
            case BMI2_ACC_ERROR:
                rslt = BMI2_E_ACC_INVALID_CFG;
 80049c6:	23fb      	movs	r3, #251	@ 0xfb
 80049c8:	73fb      	strb	r3, [r7, #15]
                break;
 80049ca:	e006      	b.n	80049da <cfg_error_status+0x66>
            case BMI2_GYR_ERROR:
                rslt = BMI2_E_GYRO_INVALID_CFG;
 80049cc:	23fa      	movs	r3, #250	@ 0xfa
 80049ce:	73fb      	strb	r3, [r7, #15]
                break;
 80049d0:	e003      	b.n	80049da <cfg_error_status+0x66>
            case BMI2_ACC_GYR_ERROR:
                rslt = BMI2_E_ACC_GYR_INVALID_CFG;
 80049d2:	23f9      	movs	r3, #249	@ 0xf9
 80049d4:	73fb      	strb	r3, [r7, #15]
                break;
 80049d6:	e000      	b.n	80049da <cfg_error_status+0x66>
            default:
                break;
 80049d8:	bf00      	nop
        }
    }

    return rslt;
 80049da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop

080049e8 <set_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3)It maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate auxiliary configurations */
    rslt = validate_aux_config(config, dev);
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fa3f 	bl	8004e78 <validate_aux_config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80049fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d119      	bne.n	8004a3a <set_aux_config+0x52>
    {
        /* Enable/Disable auxiliary interface */
        rslt = set_aux_interface(config, dev);
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f8f7 	bl	8004bfc <set_aux_interface>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8004a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10f      	bne.n	8004a3a <set_aux_config+0x52>
        {
            /* Set the auxiliary interface configurations */
            rslt = config_aux_interface(config, dev);
 8004a1a:	6839      	ldr	r1, [r7, #0]
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f91f 	bl	8004c60 <config_aux_interface>
 8004a22:	4603      	mov	r3, r0
 8004a24:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8004a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d105      	bne.n	8004a3a <set_aux_config+0x52>
            {
                /* Set read out offset and ODR */
                rslt = config_aux(config, dev);
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f9db 	bl	8004dec <config_aux>
 8004a36:	4603      	mov	r3, r0
 8004a38:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <set_gyro_user_gain_config>:
/*!
 * @brief This internal API sets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t set_gyro_user_gain_config(const struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b08a      	sub	sp, #40	@ 0x28
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8004a50:	f107 030c 	add.w	r3, r7, #12
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	609a      	str	r2, [r3, #8]
 8004a5c:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	723b      	strb	r3, [r7, #8]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	727b      	strb	r3, [r7, #9]
 8004a72:	2300      	movs	r3, #0
 8004a74:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8004a76:	f107 030c 	add.w	r3, r7, #12
 8004a7a:	623b      	str	r3, [r7, #32]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 8004a7c:	f107 0308 	add.w	r3, r7, #8
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	2109      	movs	r1, #9
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fd80 	bl	800458a <bmi2_extract_input_feat_config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8004a8e:	7ffb      	ldrb	r3, [r7, #31]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80aa 	beq.w	8004bea <set_gyro_user_gain_config+0x1a4>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 8004a96:	7a7b      	ldrb	r3, [r7, #9]
 8004a98:	f107 010c 	add.w	r1, r7, #12
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fce1 	bl	8004466 <bmi2_get_feat_config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8004aaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f040 809e 	bne.w	8004bf0 <set_gyro_user_gain_config+0x1aa>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 8004ab4:	7abb      	ldrb	r3, [r7, #10]
 8004ab6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8004aba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_x */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_X, config->ratio_x);
 8004ac4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	6a3a      	ldr	r2, [r7, #32]
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b21b      	sxth	r3, r3
 8004ad2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ad6:	f023 0307 	bic.w	r3, r3, #7
 8004ada:	b21a      	sxth	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	b21b      	sxth	r3, r3
 8004ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ae6:	b21b      	sxth	r3, r3
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	b219      	sxth	r1, r3
 8004aec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	6a3a      	ldr	r2, [r7, #32]
 8004af4:	4413      	add	r3, r2
 8004af6:	b28a      	uxth	r2, r1
 8004af8:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_y */
            idx++;
 8004afa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004afe:	3301      	adds	r3, #1
 8004b00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_y */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Y, config->ratio_y);
 8004b04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	6a3a      	ldr	r2, [r7, #32]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b21b      	sxth	r3, r3
 8004b12:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b16:	f023 0307 	bic.w	r3, r3, #7
 8004b1a:	b21a      	sxth	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	885b      	ldrh	r3, [r3, #2]
 8004b20:	b21b      	sxth	r3, r3
 8004b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b26:	b21b      	sxth	r3, r3
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	b219      	sxth	r1, r3
 8004b2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	6a3a      	ldr	r2, [r7, #32]
 8004b34:	4413      	add	r3, r2
 8004b36:	b28a      	uxth	r2, r1
 8004b38:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_z */
            idx++;
 8004b3a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_z */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Z, config->ratio_z);
 8004b44:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	6a3a      	ldr	r2, [r7, #32]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b21b      	sxth	r3, r3
 8004b52:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	b21a      	sxth	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	889b      	ldrh	r3, [r3, #4]
 8004b60:	b21b      	sxth	r3, r3
 8004b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b66:	b21b      	sxth	r3, r3
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	b219      	sxth	r1, r3
 8004b6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	6a3a      	ldr	r2, [r7, #32]
 8004b74:	4413      	add	r3, r2
 8004b76:	b28a      	uxth	r2, r1
 8004b78:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8004b7a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - user_gain_config.start_addr;
 8004b84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	7abb      	ldrb	r3, [r7, #10]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b9a:	e015      	b.n	8004bc8 <set_gyro_user_gain_config+0x182>
            {
                feat_config[user_gain_config.start_addr +
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8004b9c:	7abb      	ldrb	r3, [r7, #10]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004ba4:	4413      	add	r3, r2
 8004ba6:	6a3a      	ldr	r2, [r7, #32]
 8004ba8:	441a      	add	r2, r3
                feat_config[user_gain_config.start_addr +
 8004baa:	7abb      	ldrb	r3, [r7, #10]
 8004bac:	4619      	mov	r1, r3
 8004bae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bb2:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	3328      	adds	r3, #40	@ 0x28
 8004bb8:	443b      	add	r3, r7
 8004bba:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8004bbe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004bc8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004bcc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d3e3      	bcc.n	8004b9c <set_gyro_user_gain_config+0x156>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8004bd4:	f107 010c 	add.w	r1, r7, #12
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2210      	movs	r2, #16
 8004bdc:	2030      	movs	r0, #48	@ 0x30
 8004bde:	f7fe ff0a 	bl	80039f6 <bmi2_set_regs>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004be8:	e002      	b.n	8004bf0 <set_gyro_user_gain_config+0x1aa>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8004bea:	23f8      	movs	r3, #248	@ 0xf8
 8004bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8004bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3728      	adds	r7, #40	@ 0x28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <set_aux_interface>:

/*!
 * @brief This internal API enables/disables auxiliary interface.
 */
static int8_t set_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 8004c06:	f107 010e 	add.w	r1, r7, #14
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	206b      	movs	r0, #107	@ 0x6b
 8004c10:	f7fe fe7e 	bl	8003910 <bmi2_get_regs>
 8004c14:	4603      	mov	r3, r0
 8004c16:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d119      	bne.n	8004c54 <set_aux_interface+0x58>
    {
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_IF_EN, config->aux_en);
 8004c20:	7bbb      	ldrb	r3, [r7, #14]
 8004c22:	b25b      	sxtb	r3, r3
 8004c24:	f023 0320 	bic.w	r3, r3, #32
 8004c28:	b25a      	sxtb	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	b25b      	sxtb	r3, r3
 8004c30:	015b      	lsls	r3, r3, #5
 8004c32:	b25b      	sxtb	r3, r3
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	b25b      	sxtb	r3, r3
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	b25b      	sxtb	r3, r3
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	73bb      	strb	r3, [r7, #14]

        /* Enable/Disable auxiliary interface */
        rslt = bmi2_set_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 8004c42:	f107 010e 	add.w	r1, r7, #14
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	206b      	movs	r0, #107	@ 0x6b
 8004c4c:	f7fe fed3 	bl	80039f6 <bmi2_set_regs>
 8004c50:	4603      	mov	r3, r0
 8004c52:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <config_aux_interface>:
 *
 * @note Auxiliary sensor should not be busy when configuring aux_i2c_addr,
 * man_rd_burst_len, aux_rd_burst_len and aux_rd_addr.
 */
static int8_t config_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	81bb      	strh	r3, [r7, #12]

    /* Variable to store status */
    uint8_t status = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	72fb      	strb	r3, [r7, #11]

    /* Variable to define count */
    uint8_t count = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 8004c76:	f107 010c 	add.w	r1, r7, #12
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	204b      	movs	r0, #75	@ 0x4b
 8004c80:	f7fe fe46 	bl	8003910 <bmi2_get_regs>
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f040 80a7 	bne.w	8004de0 <config_aux_interface+0x180>
    {
        /* Set I2C address for AUX sensor */
        reg_data[0] = BMI2_SET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR, config->i2c_device_addr);
 8004c92:	7b3b      	ldrb	r3, [r7, #12]
 8004c94:	b25b      	sxtb	r3, r3
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	b25a      	sxtb	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	79db      	ldrb	r3, [r3, #7]
 8004ca0:	b25b      	sxtb	r3, r3
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	b25b      	sxtb	r3, r3
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b25b      	sxtb	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	733b      	strb	r3, [r7, #12]

        /* Set the AUX IF to either manual or auto mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN, config->manual_en);
 8004cae:	7b7b      	ldrb	r3, [r7, #13]
 8004cb0:	b25b      	sxtb	r3, r3
 8004cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cb6:	b25a      	sxtb	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	b25b      	sxtb	r3, r3
 8004cbe:	01db      	lsls	r3, r3, #7
 8004cc0:	b25b      	sxtb	r3, r3
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	b25b      	sxtb	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	737b      	strb	r3, [r7, #13]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN, config->fcu_write_en);
 8004cca:	7b7b      	ldrb	r3, [r7, #13]
 8004ccc:	b25b      	sxtb	r3, r3
 8004cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cd2:	b25a      	sxtb	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	789b      	ldrb	r3, [r3, #2]
 8004cd8:	b25b      	sxtb	r3, r3
 8004cda:	019b      	lsls	r3, r3, #6
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce2:	b25b      	sxtb	r3, r3
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for manual mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST, config->man_rd_burst);
 8004cec:	7b7b      	ldrb	r3, [r7, #13]
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	f023 030c 	bic.w	r3, r3, #12
 8004cf4:	b25a      	sxtb	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	78db      	ldrb	r3, [r3, #3]
 8004cfa:	b25b      	sxtb	r3, r3
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	b25b      	sxtb	r3, r3
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	b25b      	sxtb	r3, r3
 8004d06:	4313      	orrs	r3, r2
 8004d08:	b25b      	sxtb	r3, r3
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for data mode */
        reg_data[1] = BMI2_SET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST, config->aux_rd_burst);
 8004d0e:	7b7b      	ldrb	r3, [r7, #13]
 8004d10:	b25b      	sxtb	r3, r3
 8004d12:	f023 0303 	bic.w	r3, r3, #3
 8004d16:	b25a      	sxtb	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	791b      	ldrb	r3, [r3, #4]
 8004d1c:	b25b      	sxtb	r3, r3
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	b25b      	sxtb	r3, r3
 8004d24:	4313      	orrs	r3, r2
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	737b      	strb	r3, [r7, #13]
        for (;;)
        {
            /* Check if auxiliary sensor is busy */
            rslt = bmi2_get_status(&status, dev);
 8004d2c:	f107 030b 	add.w	r3, r7, #11
 8004d30:	6839      	ldr	r1, [r7, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fabb 	bl	80042ae <bmi2_get_status>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	73fb      	strb	r3, [r7, #15]
            if ((rslt == BMI2_OK) && (!(status & BMI2_AUX_BUSY)))
 8004d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d13b      	bne.n	8004dbc <config_aux_interface+0x15c>
 8004d44:	7afb      	ldrb	r3, [r7, #11]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d136      	bne.n	8004dbc <config_aux_interface+0x15c>
            {
                /* Set the configurations if AUX is not busy */
                rslt = bmi2_set_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 8004d4e:	f107 010c 	add.w	r1, r7, #12
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2202      	movs	r2, #2
 8004d56:	204b      	movs	r0, #75	@ 0x4b
 8004d58:	f7fe fe4d 	bl	80039f6 <bmi2_set_regs>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(1000, dev->intf_ptr);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	6852      	ldr	r2, [r2, #4]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d6e:	4798      	blx	r3
                if (rslt == BMI2_OK)
 8004d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d132      	bne.n	8004dde <config_aux_interface+0x17e>
                {
                    /* If data mode */
                    if (!config->manual_en)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d115      	bne.n	8004dac <config_aux_interface+0x14c>
                    {
                        /* Disable manual enable flag in device structure */
                        dev->aux_man_en = 0;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2200      	movs	r2, #0
 8004d84:	76da      	strb	r2, [r3, #27]

                        /* Set the read address of the AUX sensor */
                        rslt = bmi2_set_regs(BMI2_AUX_RD_ADDR, (uint8_t *) &config->read_addr, 1, dev);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f103 0108 	add.w	r1, r3, #8
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	204d      	movs	r0, #77	@ 0x4d
 8004d92:	f7fe fe30 	bl	80039f6 <bmi2_set_regs>
 8004d96:	4603      	mov	r3, r0
 8004d98:	73fb      	strb	r3, [r7, #15]
                        dev->delay_us(1000, dev->intf_ptr);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	6852      	ldr	r2, [r2, #4]
 8004da2:	4611      	mov	r1, r2
 8004da4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004da8:	4798      	blx	r3
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
                    }
                }

                /* Break after setting the register */
                break;
 8004daa:	e018      	b.n	8004dde <config_aux_interface+0x17e>
                        dev->aux_man_en = 1;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	76da      	strb	r2, [r3, #27]
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	78da      	ldrb	r2, [r3, #3]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	771a      	strb	r2, [r3, #28]
                break;
 8004dba:	e010      	b.n	8004dde <config_aux_interface+0x17e>
            }

            /* Increment count after every 10 seconds */
            dev->delay_us(10000, dev->intf_ptr);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	6852      	ldr	r2, [r2, #4]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	f242 7010 	movw	r0, #10000	@ 0x2710
 8004dca:	4798      	blx	r3
            count++;
 8004dcc:	7bbb      	ldrb	r3, [r7, #14]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	73bb      	strb	r3, [r7, #14]

            /* Break after 2 seconds if AUX still busy - since slowest ODR is 0.78Hz*/
            if (count > 20)
 8004dd2:	7bbb      	ldrb	r3, [r7, #14]
 8004dd4:	2b14      	cmp	r3, #20
 8004dd6:	d9a9      	bls.n	8004d2c <config_aux_interface+0xcc>
            {
                rslt = BMI2_E_AUX_BUSY;
 8004dd8:	23f1      	movs	r3, #241	@ 0xf1
 8004dda:	73fb      	strb	r3, [r7, #15]
                break;
 8004ddc:	e000      	b.n	8004de0 <config_aux_interface+0x180>
                break;
 8004dde:	bf00      	nop
            }
        }
    }

    return rslt;
 8004de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <config_aux>:
/*!
 * @brief This internal API triggers read out offset and sets ODR of the
 * auxiliary sensor.
 */
static int8_t config_aux(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 8004df6:	f107 010e 	add.w	r1, r7, #14
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	2044      	movs	r0, #68	@ 0x44
 8004e00:	f7fe fd86 	bl	8003910 <bmi2_get_regs>
 8004e04:	4603      	mov	r3, r0
 8004e06:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8004e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d12d      	bne.n	8004e6c <config_aux+0x80>
    {
        /* Trigger read out offset */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT, config->offset);
 8004e10:	7bbb      	ldrb	r3, [r7, #14]
 8004e12:	b25b      	sxtb	r3, r3
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	b25a      	sxtb	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	799b      	ldrb	r3, [r3, #6]
 8004e1e:	b25b      	sxtb	r3, r3
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	b25b      	sxtb	r3, r3
 8004e24:	4313      	orrs	r3, r2
 8004e26:	b25b      	sxtb	r3, r3
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	73bb      	strb	r3, [r7, #14]

        /* Set ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN, config->odr);
 8004e2c:	7bbb      	ldrb	r3, [r7, #14]
 8004e2e:	b25b      	sxtb	r3, r3
 8004e30:	f023 030f 	bic.w	r3, r3, #15
 8004e34:	b25a      	sxtb	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	795b      	ldrb	r3, [r3, #5]
 8004e3a:	b25b      	sxtb	r3, r3
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	b25b      	sxtb	r3, r3
 8004e42:	4313      	orrs	r3, r2
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	73bb      	strb	r3, [r7, #14]

        /* Set auxiliary configuration register */
        rslt = bmi2_set_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 8004e4a:	f107 010e 	add.w	r1, r7, #14
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2201      	movs	r2, #1
 8004e52:	2044      	movs	r0, #68	@ 0x44
 8004e54:	f7fe fdcf 	bl	80039f6 <bmi2_set_regs>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(1000, dev->intf_ptr);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	6852      	ldr	r2, [r2, #4]
 8004e64:	4611      	mov	r1, r2
 8004e66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e6a:	4798      	blx	r3
    }

    return rslt;
 8004e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <validate_aux_config>:

/*!
 * @brief This internal API validates auxiliary configuration set by the user.
 */
static int8_t validate_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate ODR for auxiliary sensor */
    rslt = check_boundary_val(&config->odr, BMI2_AUX_ODR_0_78HZ, BMI2_AUX_ODR_800HZ, dev);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	1d58      	adds	r0, r3, #5
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	220b      	movs	r2, #11
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	f000 fa82 	bl	8005394 <check_boundary_val>
 8004e90:	4603      	mov	r3, r0
 8004e92:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8004e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t get_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8004eaa:	2300      	movs	r3, #0
 8004eac:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004eae:	6838      	ldr	r0, [r7, #0]
 8004eb0:	f000 fba4 	bl	80055fc <null_ptr_check>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 8004eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d129      	bne.n	8004f14 <get_accel_config+0x74>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d026      	beq.n	8004f14 <get_accel_config+0x74>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 8004ec6:	f107 010c 	add.w	r1, r7, #12
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	2040      	movs	r0, #64	@ 0x40
 8004ed0:	f7fe fd1e 	bl	8003910 <bmi2_get_regs>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8004ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d11b      	bne.n	8004f18 <get_accel_config+0x78>
        {
            /* Get accelerometer performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE);
 8004ee0:	7b3b      	ldrb	r3, [r7, #12]
 8004ee2:	09db      	lsrs	r3, r3, #7
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	709a      	strb	r2, [r3, #2]

            /* Get accelerometer bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_ACC_BW_PARAM);
 8004eea:	7b3b      	ldrb	r3, [r7, #12]
 8004eec:	111b      	asrs	r3, r3, #4
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	705a      	strb	r2, [r3, #1]

            /* Get accelerometer ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_ACC_ODR);
 8004efa:	7b3b      	ldrb	r3, [r7, #12]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_ACC_RANGE);
 8004f06:	7b7b      	ldrb	r3, [r7, #13]
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	70da      	strb	r2, [r3, #3]
        if (rslt == BMI2_OK)
 8004f12:	e001      	b.n	8004f18 <get_accel_config+0x78>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004f14:	23ff      	movs	r3, #255	@ 0xff
 8004f16:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range.
 */
static int8_t get_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8004f2e:	2300      	movs	r3, #0
 8004f30:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004f32:	6838      	ldr	r0, [r7, #0]
 8004f34:	f000 fb62 	bl	80055fc <null_ptr_check>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 8004f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d139      	bne.n	8004fb8 <get_gyro_config+0x94>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d036      	beq.n	8004fb8 <get_gyro_config+0x94>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 8004f4a:	f107 010c 	add.w	r1, r7, #12
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2202      	movs	r2, #2
 8004f52:	2042      	movs	r0, #66	@ 0x42
 8004f54:	f7fe fcdc 	bl	8003910 <bmi2_get_regs>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8004f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d12b      	bne.n	8004fbc <get_gyro_config+0x98>
        {
            /* Get gyroscope performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE);
 8004f64:	7b3b      	ldrb	r3, [r7, #12]
 8004f66:	09db      	lsrs	r3, r3, #7
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	709a      	strb	r2, [r3, #2]

            /* Get gyroscope noise performance mode */
            config->noise_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_NOISE_PERF_MODE);
 8004f6e:	7b3b      	ldrb	r3, [r7, #12]
 8004f70:	119b      	asrs	r3, r3, #6
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	715a      	strb	r2, [r3, #5]

            /* Get gyroscope bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_GYR_BW_PARAM);
 8004f7e:	7b3b      	ldrb	r3, [r7, #12]
 8004f80:	111b      	asrs	r3, r3, #4
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	705a      	strb	r2, [r3, #1]

            /* Get gyroscope ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_GYR_ODR);
 8004f8e:	7b3b      	ldrb	r3, [r7, #12]
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	701a      	strb	r2, [r3, #0]

            /* Get gyroscope OIS range */
            config->ois_range = BMI2_GET_BITS(data_array[1], BMI2_GYR_OIS_RANGE);
 8004f9a:	7b7b      	ldrb	r3, [r7, #13]
 8004f9c:	10db      	asrs	r3, r3, #3
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	70da      	strb	r2, [r3, #3]

            /* Get gyroscope range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_GYR_RANGE);
 8004faa:	7b7b      	ldrb	r3, [r7, #13]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	711a      	strb	r2, [r3, #4]
        if (rslt == BMI2_OK)
 8004fb6:	e001      	b.n	8004fbc <get_gyro_config+0x98>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004fb8:	23ff      	movs	r3, #255	@ 0xff
 8004fba:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <get_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3) Gets ODR and offset.
 */
static int8_t get_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004fd2:	6838      	ldr	r0, [r7, #0]
 8004fd4:	f000 fb12 	bl	80055fc <null_ptr_check>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 8004fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11d      	bne.n	8005020 <get_aux_config+0x58>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01a      	beq.n	8005020 <get_aux_config+0x58>
    {
        /* Get enable status of auxiliary interface */
        rslt = get_aux_interface(config, dev);
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f8c0 	bl	8005172 <get_aux_interface>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8004ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d113      	bne.n	8005026 <get_aux_config+0x5e>
        {
            /* Get the auxiliary interface configurations */
            rslt = get_aux_interface_config(config, dev);
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f8d6 	bl	80051b2 <get_aux_interface_config>
 8005006:	4603      	mov	r3, r0
 8005008:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 800500a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <get_aux_config+0x5e>
            {
                /* Get read out offset and ODR */
                rslt = get_aux_cfg(config, dev);
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f914 	bl	8005242 <get_aux_cfg>
 800501a:	4603      	mov	r3, r0
 800501c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800501e:	e002      	b.n	8005026 <get_aux_config+0x5e>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005020:	23ff      	movs	r3, #255	@ 0xff
 8005022:	73fb      	strb	r3, [r7, #15]
 8005024:	e000      	b.n	8005028 <get_aux_config+0x60>
        if (rslt == BMI2_OK)
 8005026:	bf00      	nop
    }

    return rslt;
 8005028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <get_gyro_gain_update_config>:
/*!
 * @brief This internal API gets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t get_gyro_gain_update_config(struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	@ 0x28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800503e:	f107 030c 	add.w	r3, r7, #12
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	605a      	str	r2, [r3, #4]
 8005048:	609a      	str	r2, [r3, #8]
 800504a:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 800505e:	2300      	movs	r3, #0
 8005060:	723b      	strb	r3, [r7, #8]
 8005062:	2300      	movs	r3, #0
 8005064:	727b      	strb	r3, [r7, #9]
 8005066:	2300      	movs	r3, #0
 8005068:	72bb      	strb	r3, [r7, #10]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 800506a:	f107 0308 	add.w	r3, r7, #8
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	2109      	movs	r1, #9
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff fa89 	bl	800458a <bmi2_extract_input_feat_config>
 8005078:	4603      	mov	r3, r0
 800507a:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 800507c:	7ffb      	ldrb	r3, [r7, #31]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d06e      	beq.n	8005160 <get_gyro_gain_update_config+0x12c>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 8005082:	7a7b      	ldrb	r3, [r7, #9]
 8005084:	f107 010c 	add.w	r1, r7, #12
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff f9eb 	bl	8004466 <bmi2_get_feat_config>
 8005090:	4603      	mov	r3, r0
 8005092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8005096:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800509a:	2b00      	cmp	r3, #0
 800509c:	d163      	bne.n	8005166 <get_gyro_gain_update_config+0x132>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 800509e:	7abb      	ldrb	r3, [r7, #10]
 80050a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate ratio_x */
            lsb = (uint16_t) feat_config[idx++];
 80050a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80050ae:	3328      	adds	r3, #40	@ 0x28
 80050b0:	443b      	add	r3, r7
 80050b2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80050b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 80050b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80050c2:	3328      	adds	r3, #40	@ 0x28
 80050c4:	443b      	add	r3, r7
 80050c6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 80050ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80050d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050d2:	4313      	orrs	r3, r2
 80050d4:	843b      	strh	r3, [r7, #32]

            /* Get ratio_x */
            config->ratio_x = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_X_MASK;
 80050d6:	8c3b      	ldrh	r3, [r7, #32]
 80050d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050dc:	b29a      	uxth	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	801a      	strh	r2, [r3, #0]

            /* Get word to calculate ratio_y */
            lsb = (uint16_t) feat_config[idx++];
 80050e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80050ec:	3328      	adds	r3, #40	@ 0x28
 80050ee:	443b      	add	r3, r7
 80050f0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80050f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 80050f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8005100:	3328      	adds	r3, #40	@ 0x28
 8005102:	443b      	add	r3, r7
 8005104:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 800510c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800510e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005110:	4313      	orrs	r3, r2
 8005112:	843b      	strh	r3, [r7, #32]

            /* Get ratio_y */
            config->ratio_y = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Y_MASK;
 8005114:	8c3b      	ldrh	r3, [r7, #32]
 8005116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800511a:	b29a      	uxth	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	805a      	strh	r2, [r3, #2]

            /* Get word to calculate ratio_z */
            lsb = (uint16_t) feat_config[idx++];
 8005120:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800512a:	3328      	adds	r3, #40	@ 0x28
 800512c:	443b      	add	r3, r7
 800512e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005132:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8005134:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800513e:	3328      	adds	r3, #40	@ 0x28
 8005140:	443b      	add	r3, r7
 8005142:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 800514a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800514c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800514e:	4313      	orrs	r3, r2
 8005150:	843b      	strh	r3, [r7, #32]

            /* Get ratio_z */
            config->ratio_z = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Z_MASK;
 8005152:	8c3b      	ldrh	r3, [r7, #32]
 8005154:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005158:	b29a      	uxth	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	809a      	strh	r2, [r3, #4]
 800515e:	e002      	b.n	8005166 <get_gyro_gain_update_config+0x132>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8005160:	23f8      	movs	r3, #248	@ 0xf8
 8005162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8005166:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800516a:	4618      	mov	r0, r3
 800516c:	3728      	adds	r7, #40	@ 0x28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <get_aux_interface>:

/*!
 * @brief This internal API gets the enable status of auxiliary interface.
 */
static int8_t get_aux_interface(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get the enable status of auxiliary interface */
    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 800517c:	f107 010e 	add.w	r1, r7, #14
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2201      	movs	r2, #1
 8005184:	206b      	movs	r0, #107	@ 0x6b
 8005186:	f7fe fbc3 	bl	8003910 <bmi2_get_regs>
 800518a:	4603      	mov	r3, r0
 800518c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800518e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d107      	bne.n	80051a6 <get_aux_interface+0x34>
    {
        config->aux_en = BMI2_GET_BITS(reg_data, BMI2_AUX_IF_EN);
 8005196:	7bbb      	ldrb	r3, [r7, #14]
 8005198:	115b      	asrs	r3, r3, #5
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80051a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <get_aux_interface_config>:
/*!
 * @brief This internal API gets auxiliary configurations like manual/auto mode
 * FCU write command enable and read burst length for both data and manual mode.
 */
static int8_t get_aux_interface_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 80051bc:	2300      	movs	r3, #0
 80051be:	81bb      	strh	r3, [r7, #12]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 80051c0:	f107 010c 	add.w	r1, r7, #12
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2202      	movs	r2, #2
 80051c8:	204b      	movs	r0, #75	@ 0x4b
 80051ca:	f7fe fba1 	bl	8003910 <bmi2_get_regs>
 80051ce:	4603      	mov	r3, r0
 80051d0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80051d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d12d      	bne.n	8005236 <get_aux_interface_config+0x84>
    {
        /* Get I2C address for auxiliary sensor */
        config->i2c_device_addr = BMI2_GET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR);
 80051da:	7b3b      	ldrb	r3, [r7, #12]
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	71da      	strb	r2, [r3, #7]

        /* Get the AUX IF to either manual or auto mode */
        config->manual_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN);
 80051e4:	7b7b      	ldrb	r3, [r7, #13]
 80051e6:	09db      	lsrs	r3, r3, #7
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	705a      	strb	r2, [r3, #1]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        config->fcu_write_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN);
 80051ee:	7b7b      	ldrb	r3, [r7, #13]
 80051f0:	119b      	asrs	r3, r3, #6
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	709a      	strb	r2, [r3, #2]

        /* Get the burst read length for manual mode */
        config->man_rd_burst = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST);
 80051fe:	7b7b      	ldrb	r3, [r7, #13]
 8005200:	109b      	asrs	r3, r3, #2
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	b2da      	uxtb	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	70da      	strb	r2, [r3, #3]

        /* Get the burst read length for data mode */
        config->aux_rd_burst = BMI2_GET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST);
 800520e:	7b7b      	ldrb	r3, [r7, #13]
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	b2da      	uxtb	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	711a      	strb	r2, [r3, #4]

        /* If data mode, get the read address of the auxiliary sensor from where data is to be read */
        if (!config->manual_en)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <get_aux_interface_config+0x84>
        {
            rslt = bmi2_get_regs(BMI2_AUX_RD_ADDR, &config->read_addr, 1, dev);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f103 0108 	add.w	r1, r3, #8
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2201      	movs	r2, #1
 800522c:	204d      	movs	r0, #77	@ 0x4d
 800522e:	f7fe fb6f 	bl	8003910 <bmi2_get_regs>
 8005232:	4603      	mov	r3, r0
 8005234:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <get_aux_cfg>:
/*!
 * @brief This internal API gets read out offset and ODR of the auxiliary
 * sensor.
 */
static int8_t get_aux_cfg(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 800524c:	f107 010e 	add.w	r1, r7, #14
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2201      	movs	r2, #1
 8005254:	2044      	movs	r0, #68	@ 0x44
 8005256:	f7fe fb5b 	bl	8003910 <bmi2_get_regs>
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800525e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <get_aux_cfg+0x3a>
    {
        /* Get read out offset */
        config->offset = BMI2_GET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT);
 8005266:	7bbb      	ldrb	r3, [r7, #14]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	b2da      	uxtb	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	719a      	strb	r2, [r3, #6]

        /* Get ODR */
        config->odr = BMI2_GET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN);
 8005270:	7bbb      	ldrb	r3, [r7, #14]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	b2da      	uxtb	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	715a      	strb	r2, [r3, #5]
    }

    return rslt;
 800527c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <map_feat_int>:
/*!
 * @brief This internal API maps/un-maps feature interrupts to that of interrupt
 * pins.
 */
static int8_t map_feat_int(uint8_t *reg_data_array, enum bmi2_hw_int_pin int_pin, uint8_t int_mask)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	70fb      	strb	r3, [r7, #3]
 8005294:	4613      	mov	r3, r2
 8005296:	70bb      	strb	r3, [r7, #2]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	73fb      	strb	r3, [r7, #15]

    /* Check for NULL error */
    if (reg_data_array != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d06b      	beq.n	800537a <map_feat_int+0xf2>
    {
        /* Check validity on interrupt pin selection */
        if (int_pin < BMI2_INT_PIN_MAX)
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d865      	bhi.n	8005374 <map_feat_int+0xec>
        {
            switch (int_pin)
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d868      	bhi.n	8005380 <map_feat_int+0xf8>
 80052ae:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <map_feat_int+0x2c>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	080052c5 	.word	0x080052c5
 80052b8:	080052fb 	.word	0x080052fb
 80052bc:	08005327 	.word	0x08005327
 80052c0:	08005353 	.word	0x08005353
            {
                case BMI2_INT_NONE:

                    /* Un-Map the corresponding feature interrupt to interrupt pin 1 and 2 */
                    reg_data_array[0] &= ~(int_mask);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	b25a      	sxtb	r2, r3
 80052ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052ce:	43db      	mvns	r3, r3
 80052d0:	b25b      	sxtb	r3, r3
 80052d2:	4013      	ands	r3, r2
 80052d4:	b25b      	sxtb	r3, r3
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	701a      	strb	r2, [r3, #0]
                    reg_data_array[1] &= ~(int_mask);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3301      	adds	r3, #1
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b25a      	sxtb	r2, r3
 80052e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	b25b      	sxtb	r3, r3
 80052ec:	4013      	ands	r3, r2
 80052ee:	b25a      	sxtb	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3301      	adds	r3, #1
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	701a      	strb	r2, [r3, #0]
                    break;
 80052f8:	e043      	b.n	8005382 <map_feat_int+0xfa>
                case BMI2_INT1:

                    /* Map the corresponding feature interrupt to interrupt pin 1 */
                    reg_data_array[0] |= int_mask;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	781a      	ldrb	r2, [r3, #0]
 80052fe:	78bb      	ldrb	r3, [r7, #2]
 8005300:	4313      	orrs	r3, r2
 8005302:	b2da      	uxtb	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	701a      	strb	r2, [r3, #0]

                    /* Un-map the corresponding feature interrupt to interrupt pin 2 */
                    reg_data_array[1] &= ~(int_mask);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3301      	adds	r3, #1
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	b25a      	sxtb	r2, r3
 8005310:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005314:	43db      	mvns	r3, r3
 8005316:	b25b      	sxtb	r3, r3
 8005318:	4013      	ands	r3, r2
 800531a:	b25a      	sxtb	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3301      	adds	r3, #1
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]
                    break;
 8005324:	e02d      	b.n	8005382 <map_feat_int+0xfa>
                case BMI2_INT2:

                    /* Map the corresponding feature interrupt to interrupt pin 2 */
                    reg_data_array[1] |= int_mask;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3301      	adds	r3, #1
 800532a:	7819      	ldrb	r1, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3301      	adds	r3, #1
 8005330:	78ba      	ldrb	r2, [r7, #2]
 8005332:	430a      	orrs	r2, r1
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	701a      	strb	r2, [r3, #0]

                    /* Un-map the corresponding feature interrupt to interrupt pin 1 */
                    reg_data_array[0] &= ~(int_mask);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	b25a      	sxtb	r2, r3
 800533e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005342:	43db      	mvns	r3, r3
 8005344:	b25b      	sxtb	r3, r3
 8005346:	4013      	ands	r3, r2
 8005348:	b25b      	sxtb	r3, r3
 800534a:	b2da      	uxtb	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	701a      	strb	r2, [r3, #0]
                    break;
 8005350:	e017      	b.n	8005382 <map_feat_int+0xfa>
                case BMI2_INT_BOTH:

                    /* Map the corresponding feature interrupt to interrupt pin 1 and 2 */
                    reg_data_array[0] |= int_mask;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	781a      	ldrb	r2, [r3, #0]
 8005356:	78bb      	ldrb	r3, [r7, #2]
 8005358:	4313      	orrs	r3, r2
 800535a:	b2da      	uxtb	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	701a      	strb	r2, [r3, #0]
                    reg_data_array[1] |= int_mask;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3301      	adds	r3, #1
 8005364:	7819      	ldrb	r1, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3301      	adds	r3, #1
 800536a:	78ba      	ldrb	r2, [r7, #2]
 800536c:	430a      	orrs	r2, r1
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]
                    break;
 8005372:	e006      	b.n	8005382 <map_feat_int+0xfa>
            }
        }
        else
        {
            /* Return error if invalid pin selection */
            rslt = BMI2_E_INVALID_INT_PIN;
 8005374:	23f4      	movs	r3, #244	@ 0xf4
 8005376:	73fb      	strb	r3, [r7, #15]
 8005378:	e003      	b.n	8005382 <map_feat_int+0xfa>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800537a:	23ff      	movs	r3, #255	@ 0xff
 800537c:	73fb      	strb	r3, [r7, #15]
 800537e:	e000      	b.n	8005382 <map_feat_int+0xfa>
                    break;
 8005380:	bf00      	nop
    }

    return rslt;
 8005382:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop

08005394 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi2_dev *dev)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	72fb      	strb	r3, [r7, #11]
 80053a2:	4613      	mov	r3, r2
 80053a4:	72bb      	strb	r3, [r7, #10]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	75fb      	strb	r3, [r7, #23]

    if (val != NULL)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01e      	beq.n	80053ee <check_boundary_val+0x5a>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	7afa      	ldrb	r2, [r7, #11]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d909      	bls.n	80053ce <check_boundary_val+0x3a>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	7afa      	ldrb	r2, [r7, #11]
 80053be:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MIN_VALUE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7a1b      	ldrb	r3, [r3, #8]
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	7aba      	ldrb	r2, [r7, #10]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d20c      	bcs.n	80053f2 <check_boundary_val+0x5e>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	7aba      	ldrb	r2, [r7, #10]
 80053dc:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MAX_VALUE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	7a1b      	ldrb	r3, [r3, #8]
 80053e2:	f043 0302 	orr.w	r3, r3, #2
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	721a      	strb	r2, [r3, #8]
 80053ec:	e001      	b.n	80053f2 <check_boundary_val+0x5e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80053ee:	23ff      	movs	r3, #255	@ 0xff
 80053f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80053f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t set_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
    uint8_t reg_data;

    /* Array to store the default value of accelerometer configuration
     * reserved registers
     */
    uint8_t data_array[2] = { 0 };
 800540c:	2300      	movs	r3, #0
 800540e:	81bb      	strh	r3, [r7, #12]

    /* Validate bandwidth and performance mode */
    rslt = validate_bw_perf_mode(&config->bwp, &config->filter_perf, dev);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	1c58      	adds	r0, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3302      	adds	r3, #2
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	4619      	mov	r1, r3
 800541c:	f7ff fa08 	bl	8004830 <validate_bw_perf_mode>
 8005420:	4603      	mov	r3, r0
 8005422:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8005424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d15b      	bne.n	80054e4 <set_accel_config+0xe2>
    {
        /* Validate ODR and range */
        rslt = validate_odr_range(&config->odr, &config->range, dev);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3303      	adds	r3, #3
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	4619      	mov	r1, r3
 8005436:	f7ff fa28 	bl	800488a <validate_odr_range>
 800543a:	4603      	mov	r3, r0
 800543c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800543e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d14e      	bne.n	80054e4 <set_accel_config+0xe2>
        {
            /* Set accelerometer performance mode */
            reg_data = BMI2_SET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE, config->filter_perf);
 8005446:	7b3b      	ldrb	r3, [r7, #12]
 8005448:	b25b      	sxtb	r3, r3
 800544a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800544e:	b25a      	sxtb	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	789b      	ldrb	r3, [r3, #2]
 8005454:	b25b      	sxtb	r3, r3
 8005456:	01db      	lsls	r3, r3, #7
 8005458:	b25b      	sxtb	r3, r3
 800545a:	4313      	orrs	r3, r2
 800545c:	b25b      	sxtb	r3, r3
 800545e:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer bandwidth */
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_BW_PARAM, config->bwp);
 8005460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005468:	b25a      	sxtb	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	b25b      	sxtb	r3, r3
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	b25b      	sxtb	r3, r3
 8005474:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005478:	b25b      	sxtb	r3, r3
 800547a:	4313      	orrs	r3, r2
 800547c:	b25b      	sxtb	r3, r3
 800547e:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer ODR */
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ACC_ODR, config->odr);
 8005480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005484:	f023 030f 	bic.w	r3, r3, #15
 8005488:	b25a      	sxtb	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	b25b      	sxtb	r3, r3
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	b25b      	sxtb	r3, r3
 8005496:	4313      	orrs	r3, r2
 8005498:	b25b      	sxtb	r3, r3
 800549a:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[0] = reg_data;
 800549c:	7bbb      	ldrb	r3, [r7, #14]
 800549e:	733b      	strb	r3, [r7, #12]

            /* Set accelerometer range */
            reg_data = BMI2_SET_BIT_POS0(data_array[1], BMI2_ACC_RANGE, config->range);
 80054a0:	7b7b      	ldrb	r3, [r7, #13]
 80054a2:	b25b      	sxtb	r3, r3
 80054a4:	f023 0303 	bic.w	r3, r3, #3
 80054a8:	b25a      	sxtb	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	78db      	ldrb	r3, [r3, #3]
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	b25b      	sxtb	r3, r3
 80054b6:	4313      	orrs	r3, r2
 80054b8:	b25b      	sxtb	r3, r3
 80054ba:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[1] = reg_data;
 80054bc:	7bbb      	ldrb	r3, [r7, #14]
 80054be:	737b      	strb	r3, [r7, #13]

            /* Write accelerometer configuration to ACC_CONFand
             * ACC_RANGE registers simultaneously as they lie in consecutive places
             */
            rslt = bmi2_set_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 80054c0:	f107 010c 	add.w	r1, r7, #12
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2202      	movs	r2, #2
 80054c8:	2040      	movs	r0, #64	@ 0x40
 80054ca:	f7fe fa94 	bl	80039f6 <bmi2_set_regs>
 80054ce:	4603      	mov	r3, r0
 80054d0:	73fb      	strb	r3, [r7, #15]

            /* Get error status to check for invalid configurations */
            if (rslt == BMI2_OK)
 80054d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <set_accel_config+0xe2>
            {
                rslt = cfg_error_status(dev);
 80054da:	6838      	ldr	r0, [r7, #0]
 80054dc:	f7ff fa4a 	bl	8004974 <cfg_error_status>
 80054e0:	4603      	mov	r3, r0
 80054e2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80054e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <set_gyro_config>:
 * @brief This internal API sets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range. It also
 * maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Array to store the default value of gyroscope configuration reserved registers  */
    uint8_t data_array[2] = { 0 };
 80054fa:	2300      	movs	r3, #0
 80054fc:	81bb      	strh	r3, [r7, #12]

    /* Validate gyroscope configurations */
    rslt = validate_gyro_config(config, dev);
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff f9e2 	bl	80048ca <validate_gyro_config>
 8005506:	4603      	mov	r3, r0
 8005508:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800550a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d16e      	bne.n	80055f0 <set_gyro_config+0x100>
    {
        /* Set gyroscope performance mode */
        reg_data = BMI2_SET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE, config->filter_perf);
 8005512:	7b3b      	ldrb	r3, [r7, #12]
 8005514:	b25b      	sxtb	r3, r3
 8005516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800551a:	b25a      	sxtb	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	789b      	ldrb	r3, [r3, #2]
 8005520:	b25b      	sxtb	r3, r3
 8005522:	01db      	lsls	r3, r3, #7
 8005524:	b25b      	sxtb	r3, r3
 8005526:	4313      	orrs	r3, r2
 8005528:	b25b      	sxtb	r3, r3
 800552a:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope noise performance mode */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_NOISE_PERF_MODE, config->noise_perf);
 800552c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005534:	b25a      	sxtb	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	795b      	ldrb	r3, [r3, #5]
 800553a:	b25b      	sxtb	r3, r3
 800553c:	019b      	lsls	r3, r3, #6
 800553e:	b25b      	sxtb	r3, r3
 8005540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005544:	b25b      	sxtb	r3, r3
 8005546:	4313      	orrs	r3, r2
 8005548:	b25b      	sxtb	r3, r3
 800554a:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope bandwidth */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_BW_PARAM, config->bwp);
 800554c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005550:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005554:	b25a      	sxtb	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	b25b      	sxtb	r3, r3
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	b25b      	sxtb	r3, r3
 8005560:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005564:	b25b      	sxtb	r3, r3
 8005566:	4313      	orrs	r3, r2
 8005568:	b25b      	sxtb	r3, r3
 800556a:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_ODR, config->odr);
 800556c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005570:	f023 030f 	bic.w	r3, r3, #15
 8005574:	b25a      	sxtb	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	b25b      	sxtb	r3, r3
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	b25b      	sxtb	r3, r3
 8005582:	4313      	orrs	r3, r2
 8005584:	b25b      	sxtb	r3, r3
 8005586:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[0] = reg_data;
 8005588:	7bbb      	ldrb	r3, [r7, #14]
 800558a:	733b      	strb	r3, [r7, #12]

        /* Set gyroscope OIS range */
        reg_data = BMI2_SET_BITS(data_array[1], BMI2_GYR_OIS_RANGE, config->ois_range);
 800558c:	7b7b      	ldrb	r3, [r7, #13]
 800558e:	b25b      	sxtb	r3, r3
 8005590:	f023 0308 	bic.w	r3, r3, #8
 8005594:	b25a      	sxtb	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	78db      	ldrb	r3, [r3, #3]
 800559a:	b25b      	sxtb	r3, r3
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	b25b      	sxtb	r3, r3
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	4313      	orrs	r3, r2
 80055a8:	b25b      	sxtb	r3, r3
 80055aa:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope range */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_RANGE, config->range);
 80055ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055b0:	f023 0307 	bic.w	r3, r3, #7
 80055b4:	b25a      	sxtb	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	791b      	ldrb	r3, [r3, #4]
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	b25b      	sxtb	r3, r3
 80055c2:	4313      	orrs	r3, r2
 80055c4:	b25b      	sxtb	r3, r3
 80055c6:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[1] = reg_data;
 80055c8:	7bbb      	ldrb	r3, [r7, #14]
 80055ca:	737b      	strb	r3, [r7, #13]

        /* Write accelerometer configuration to GYR_CONF and GYR_RANGE
         * registers simultaneously as they lie in consecutive places
         */
        rslt = bmi2_set_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 80055cc:	f107 010c 	add.w	r1, r7, #12
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2202      	movs	r2, #2
 80055d4:	2042      	movs	r0, #66	@ 0x42
 80055d6:	f7fe fa0e 	bl	80039f6 <bmi2_set_regs>
 80055da:	4603      	mov	r3, r0
 80055dc:	73fb      	strb	r3, [r7, #15]

        /* Get error status to check for invalid configurations */
        if (rslt == BMI2_OK)
 80055de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d104      	bne.n	80055f0 <set_gyro_config+0x100>
        {
            rslt = cfg_error_status(dev);
 80055e6:	6838      	ldr	r0, [r7, #0]
 80055e8:	f7ff f9c4 	bl	8004974 <cfg_error_status>
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80055f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI2_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <null_ptr_check+0x2a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <null_ptr_check+0x2a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <null_ptr_check+0x2a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 8005626:	23ff      	movs	r3, #255	@ 0xff
 8005628:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800562a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <extract_feat_int_map>:

/*!
 *@brief This internal API is used to map the interrupts to the sensor.
 */
static void extract_feat_int_map(struct bmi2_map_int *map_int, uint8_t type, const struct bmi2_dev *dev)
{
 800563a:	b480      	push	{r7}
 800563c:	b087      	sub	sp, #28
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	460b      	mov	r3, r1
 8005644:	607a      	str	r2, [r7, #4]
 8005646:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	75fb      	strb	r3, [r7, #23]

    /* Search for the interrupts from the input configuration array */
    while (loop < dev->sens_int_map)
 800564c:	e014      	b.n	8005678 <extract_feat_int_map+0x3e>
    {
        if (dev->map_int[loop].type == type)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4413      	add	r3, r2
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	7afa      	ldrb	r2, [r7, #11]
 800565c:	429a      	cmp	r2, r3
 800565e:	d108      	bne.n	8005672 <extract_feat_int_map+0x38>
        {
            *map_int = dev->map_int[loop];
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	4413      	add	r3, r2
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	8013      	strh	r3, [r2, #0]
            break;
 8005670:	e009      	b.n	8005686 <extract_feat_int_map+0x4c>
        }

        loop++;
 8005672:	7dfb      	ldrb	r3, [r7, #23]
 8005674:	3301      	adds	r3, #1
 8005676:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->sens_int_map)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800567e:	7dfa      	ldrb	r2, [r7, #23]
 8005680:	429a      	cmp	r2, r3
 8005682:	d3e4      	bcc.n	800564e <extract_feat_int_map+0x14>
    }
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <get_gyro_gain_update_status>:
/*!
 * @brief This internal API gets the saturation status for the gyroscope user
 * gain update.
 */
static int8_t get_gyro_gain_update_status(struct bmi2_gyr_user_gain_status *user_gain_stat, struct bmi2_dev *dev)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b088      	sub	sp, #32
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800569c:	f107 030c 	add.w	r3, r7, #12
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	605a      	str	r2, [r3, #4]
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	60da      	str	r2, [r3, #12]

    /* Variables to define index */
    uint8_t idx = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature output for gyroscope user gain status */
    struct bmi2_feature_config user_gain_cfg = { 0, 0, 0 };
 80056ae:	2300      	movs	r3, #0
 80056b0:	723b      	strb	r3, [r7, #8]
 80056b2:	2300      	movs	r3, #0
 80056b4:	727b      	strb	r3, [r7, #9]
 80056b6:	2300      	movs	r3, #0
 80056b8:	72bb      	strb	r3, [r7, #10]

    /* Search for gyroscope user gain status output feature and extract its
     * configuration details
     */
    feat_found = extract_output_feat_config(&user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	2109      	movs	r1, #9
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 f84b 	bl	800575e <extract_output_feat_config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 80056cc:	7f7b      	ldrb	r3, [r7, #29]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d03d      	beq.n	800574e <get_gyro_gain_update_status+0xbc>
    {
        /* Get the feature output configuration for gyroscope user gain  status */
        rslt = bmi2_get_feat_config(user_gain_cfg.page, feat_config, dev);
 80056d2:	7a7b      	ldrb	r3, [r7, #9]
 80056d4:	f107 010c 	add.w	r1, r7, #12
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fec3 	bl	8004466 <bmi2_get_feat_config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80056e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d132      	bne.n	8005752 <get_gyro_gain_update_status+0xc0>
        {
            /* Define the offset in bytes for gyroscope user gain status */
            idx = user_gain_cfg.start_addr;
 80056ec:	7abb      	ldrb	r3, [r7, #10]
 80056ee:	77bb      	strb	r3, [r7, #30]

            /* Get the saturation status for x-axis */
            user_gain_stat->sat_x = BMI2_GET_BIT_POS0(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_X);
 80056f0:	7fbb      	ldrb	r3, [r7, #30]
 80056f2:	3320      	adds	r3, #32
 80056f4:	443b      	add	r3, r7
 80056f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	701a      	strb	r2, [r3, #0]

            /* Get the saturation status for y-axis */
            user_gain_stat->sat_y = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Y);
 8005704:	7fbb      	ldrb	r3, [r7, #30]
 8005706:	3320      	adds	r3, #32
 8005708:	443b      	add	r3, r7
 800570a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800570e:	105b      	asrs	r3, r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	705a      	strb	r2, [r3, #1]

            /* Get the saturation status for z-axis */
            user_gain_stat->sat_z = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Z);
 800571c:	7fbb      	ldrb	r3, [r7, #30]
 800571e:	3320      	adds	r3, #32
 8005720:	443b      	add	r3, r7
 8005722:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005726:	109b      	asrs	r3, r3, #2
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	b2da      	uxtb	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	709a      	strb	r2, [r3, #2]

            /* Get g trigger status */
            user_gain_stat->g_trigger_status = BMI2_GET_BITS(feat_config[idx], BMI2_G_TRIGGER_STAT);
 8005734:	7fbb      	ldrb	r3, [r7, #30]
 8005736:	3320      	adds	r3, #32
 8005738:	443b      	add	r3, r7
 800573a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800573e:	10db      	asrs	r3, r3, #3
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	b2da      	uxtb	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	70da      	strb	r2, [r3, #3]
 800574c:	e001      	b.n	8005752 <get_gyro_gain_update_status+0xc0>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800574e:	23f8      	movs	r3, #248	@ 0xf8
 8005750:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005752:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <extract_output_feat_config>:
 * details from the look-up table.
 */
static uint8_t extract_output_feat_config(struct bmi2_feature_config *feat_output,
                                          uint8_t type,
                                          const struct bmi2_dev *dev)
{
 800575e:	b480      	push	{r7}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	460b      	mov	r3, r1
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8005770:	2300      	movs	r3, #0
 8005772:	75bb      	strb	r3, [r7, #22]

    /* Search for the output feature from the output configuration array */
    while (loop < dev->out_sens)
 8005774:	e01c      	b.n	80057b0 <extract_output_feat_config+0x52>
    {
        if (dev->feat_output[loop].type == type)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800577a:	7dfa      	ldrb	r2, [r7, #23]
 800577c:	4613      	mov	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4413      	add	r3, r2
 8005782:	440b      	add	r3, r1
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	7afa      	ldrb	r2, [r7, #11]
 8005788:	429a      	cmp	r2, r3
 800578a:	d10e      	bne.n	80057aa <extract_output_feat_config+0x4c>
        {
            *feat_output = dev->feat_output[loop];
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005790:	7dfa      	ldrb	r2, [r7, #23]
 8005792:	4613      	mov	r3, r2
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	4413      	add	r3, r2
 8005798:	18ca      	adds	r2, r1, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8811      	ldrh	r1, [r2, #0]
 800579e:	7892      	ldrb	r2, [r2, #2]
 80057a0:	8019      	strh	r1, [r3, #0]
 80057a2:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	75bb      	strb	r3, [r7, #22]
            break;
 80057a8:	e007      	b.n	80057ba <extract_output_feat_config+0x5c>
        }

        loop++;
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	3301      	adds	r3, #1
 80057ae:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->out_sens)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	7e9b      	ldrb	r3, [r3, #26]
 80057b4:	7dfa      	ldrb	r2, [r7, #23]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d3dd      	bcc.n	8005776 <extract_output_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 80057ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <get_gyro_cross_sense>:
/*!
 * @brief This internal API gets the cross sensitivity coefficient between
 * gyroscope's X and Z axes.
 */
static int8_t get_gyro_cross_sense(int16_t *cross_sense, struct bmi2_dev *dev)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80057d2:	f107 030c 	add.w	r3, r7, #12
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	605a      	str	r2, [r3, #4]
 80057dc:	609a      	str	r2, [r3, #8]
 80057de:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t idx = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	77bb      	strb	r3, [r7, #30]
    uint8_t feat_found;

    uint8_t corr_fact_zx;

    /* Initialize feature output for gyroscope cross sensitivity */
    struct bmi2_feature_config cross_sense_out_config = { 0, 0, 0 };
 80057e4:	2300      	movs	r3, #0
 80057e6:	723b      	strb	r3, [r7, #8]
 80057e8:	2300      	movs	r3, #0
 80057ea:	727b      	strb	r3, [r7, #9]
 80057ec:	2300      	movs	r3, #0
 80057ee:	72bb      	strb	r3, [r7, #10]

    if (dev->variant_feature & BMI2_MAXIMUM_FIFO_VARIANT)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01d      	beq.n	800583a <get_gyro_cross_sense+0x72>
    {
        /* For maximum_fifo variant fetch the correction factor from GPIO0 */
        rslt = bmi2_get_regs(BMI2_GYR_CAS_GPIO0_ADDR, &corr_fact_zx, 1, dev);
 80057fe:	f107 010b 	add.w	r1, r7, #11
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2201      	movs	r2, #1
 8005806:	201e      	movs	r0, #30
 8005808:	f7fe f882 	bl	8003910 <bmi2_get_regs>
 800580c:	4603      	mov	r3, r0
 800580e:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005810:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d157      	bne.n	80058c8 <get_gyro_cross_sense+0x100>
        {
            /* Get the gyroscope cross sensitivity coefficient */
            if (corr_fact_zx & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8005818:	7afb      	ldrb	r3, [r7, #11]
 800581a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d006      	beq.n	8005830 <get_gyro_cross_sense+0x68>
            {
                *cross_sense = (int16_t)(((int16_t)corr_fact_zx) - 128);
 8005822:	7afb      	ldrb	r3, [r7, #11]
 8005824:	3b80      	subs	r3, #128	@ 0x80
 8005826:	b29b      	uxth	r3, r3
 8005828:	b21a      	sxth	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	801a      	strh	r2, [r3, #0]
 800582e:	e04b      	b.n	80058c8 <get_gyro_cross_sense+0x100>
            }
            else
            {
                *cross_sense = (int16_t)(corr_fact_zx);
 8005830:	7afb      	ldrb	r3, [r7, #11]
 8005832:	b21a      	sxth	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	801a      	strh	r2, [r3, #0]
 8005838:	e046      	b.n	80058c8 <get_gyro_cross_sense+0x100>
        }
    }
    else
    {
        /* Search for gyroscope cross sensitivity feature and extract its configuration details */
        feat_found = extract_output_feat_config(&cross_sense_out_config, BMI2_GYRO_CROSS_SENSE, dev);
 800583a:	f107 0308 	add.w	r3, r7, #8
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	2129      	movs	r1, #41	@ 0x29
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff ff8b 	bl	800575e <extract_output_feat_config>
 8005848:	4603      	mov	r3, r0
 800584a:	777b      	strb	r3, [r7, #29]
        if (feat_found)
 800584c:	7f7b      	ldrb	r3, [r7, #29]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d038      	beq.n	80058c4 <get_gyro_cross_sense+0xfc>
        {
            /* Get the feature output configuration for gyroscope cross sensitivity
             * feature */
            rslt = bmi2_get_feat_config(cross_sense_out_config.page, feat_config, dev);
 8005852:	7a7b      	ldrb	r3, [r7, #9]
 8005854:	f107 010c 	add.w	r1, r7, #12
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fe03 	bl	8004466 <bmi2_get_feat_config>
 8005860:	4603      	mov	r3, r0
 8005862:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8005864:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d12d      	bne.n	80058c8 <get_gyro_cross_sense+0x100>
            {
                /* Define the offset in bytes for gyroscope cross sensitivity output */
                idx = cross_sense_out_config.start_addr;
 800586c:	7abb      	ldrb	r3, [r7, #10]
 800586e:	77bb      	strb	r3, [r7, #30]

                /* discard the MSB as GYR_CAS is of only 7 bit */
                feat_config[idx] = feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_MASK;
 8005870:	7fbb      	ldrb	r3, [r7, #30]
 8005872:	3320      	adds	r3, #32
 8005874:	443b      	add	r3, r7
 8005876:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800587a:	7fbb      	ldrb	r3, [r7, #30]
 800587c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	3320      	adds	r3, #32
 8005884:	443b      	add	r3, r7
 8005886:	f803 2c14 	strb.w	r2, [r3, #-20]

                /* Get the gyroscope cross sensitivity coefficient */
                if (feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 800588a:	7fbb      	ldrb	r3, [r7, #30]
 800588c:	3320      	adds	r3, #32
 800588e:	443b      	add	r3, r7
 8005890:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <get_gyro_cross_sense+0xea>
                {
                    *cross_sense = (int16_t)(((int16_t)feat_config[idx]) - 128);
 800589c:	7fbb      	ldrb	r3, [r7, #30]
 800589e:	3320      	adds	r3, #32
 80058a0:	443b      	add	r3, r7
 80058a2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80058a6:	3b80      	subs	r3, #128	@ 0x80
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	b21a      	sxth	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	801a      	strh	r2, [r3, #0]
 80058b0:	e00a      	b.n	80058c8 <get_gyro_cross_sense+0x100>
                }
                else
                {
                    *cross_sense = (int16_t)(feat_config[idx]);
 80058b2:	7fbb      	ldrb	r3, [r7, #30]
 80058b4:	3320      	adds	r3, #32
 80058b6:	443b      	add	r3, r7
 80058b8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80058bc:	b21a      	sxth	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	801a      	strh	r2, [r3, #0]
 80058c2:	e001      	b.n	80058c8 <get_gyro_cross_sense+0x100>
                }
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_SENSOR;
 80058c4:	23f8      	movs	r3, #248	@ 0xf8
 80058c6:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80058c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3720      	adds	r7, #32
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <bmi270_init>:
 *  3) Writes the configuration file.
 *  4) Updates the feature offset parameters in the device structure.
 *  5) Updates the maximum number of pages, in the device structure.
 */
int8_t bmi270_init(struct bmi2_dev *dev)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f9f7 	bl	8005cd0 <null_ptr_check>
 80058e2:	4603      	mov	r3, r0
 80058e4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80058e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d141      	bne.n	8005972 <bmi270_init+0x9e>
    {
        /* Assign chip id of BMI270 */
        dev->chip_id = BMI270_CHIP_ID;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2224      	movs	r2, #36	@ 0x24
 80058f2:	701a      	strb	r2, [r3, #0]

        /* get the size of config array */
        dev->config_size = sizeof(bmi270_config_file);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058fa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

        /* Enable the variant specific features if any */
        dev->variant_feature = BMI2_GYRO_CROSS_SENS_ENABLE | BMI2_CRT_RTOSK_ENABLE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2203      	movs	r2, #3
 8005902:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI2_SPI_INTF)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	7a5b      	ldrb	r3, [r3, #9]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <bmi270_init+0x42>
        {
            dev->dummy_byte = 1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	72da      	strb	r2, [r3, #11]
 8005914:	e002      	b.n	800591c <bmi270_init+0x48>
        }
        else
        {
            dev->dummy_byte = 0;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	72da      	strb	r2, [r3, #11]
        }

        /* If configuration file pointer is not assigned any address */
        if (!dev->config_file_ptr)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <bmi270_init+0x56>
        {
            /* Give the address of the configuration file array to
             * the device pointer
             */
            dev->config_file_ptr = bmi270_config_file;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a16      	ldr	r2, [pc, #88]	@ (8005980 <bmi270_init+0xac>)
 8005928:	615a      	str	r2, [r3, #20]
        }

        /* Initialize BMI2 sensor */
        rslt = bmi2_sec_init(dev);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fd ff90 	bl	8003850 <bmi2_sec_init>
 8005930:	4603      	mov	r3, r0
 8005932:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8005934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d11a      	bne.n	8005972 <bmi270_init+0x9e>
        {
            /* Assign the offsets of the feature input
             * configuration to the device structure
             */
            dev->feat_config = bmi270_feat_in;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a11      	ldr	r2, [pc, #68]	@ (8005984 <bmi270_init+0xb0>)
 8005940:	621a      	str	r2, [r3, #32]

            /* Assign the offsets of the feature output to
             * the device structure
             */
            dev->feat_output = bmi270_feat_out;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a10      	ldr	r2, [pc, #64]	@ (8005988 <bmi270_init+0xb4>)
 8005946:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Assign the maximum number of pages to the
             * device structure
             */
            dev->page_max = BMI270_MAX_PAGE_NUM;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2208      	movs	r2, #8
 800594c:	761a      	strb	r2, [r3, #24]

            /* Assign maximum number of input sensors/
             * features to device structure
             */
            dev->input_sens = BMI270_MAX_FEAT_IN;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2211      	movs	r2, #17
 8005952:	765a      	strb	r2, [r3, #25]

            /* Assign maximum number of output sensors/
             * features to device structure
             */
            dev->out_sens = BMI270_MAX_FEAT_OUT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2207      	movs	r2, #7
 8005958:	769a      	strb	r2, [r3, #26]

            /* Assign the offsets of the feature interrupt
             * to the device structure
             */
            dev->map_int = bmi270_map_int;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a0b      	ldr	r2, [pc, #44]	@ (800598c <bmi270_init+0xb8>)
 800595e:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Assign maximum number of feature interrupts
             * to device structure
             */
            dev->sens_int_map = BMI270_MAX_INT_MAP;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2208      	movs	r2, #8
 8005964:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            /* Get the gyroscope cross axis sensitivity */
            rslt = bmi2_get_gyro_cross_sense(dev);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fe fd1c 	bl	80043a6 <bmi2_get_gyro_cross_sense>
 800596e:	4603      	mov	r3, r0
 8005970:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	080161ac 	.word	0x080161ac
 8005984:	080181ac 	.word	0x080181ac
 8005988:	080181e0 	.word	0x080181e0
 800598c:	20000078 	.word	0x20000078

08005990 <bmi270_sensor_enable>:

/*!
 * @brief This API selects the sensors/features to be enabled.
 */
int8_t bmi270_sensor_enable(const uint8_t *sens_list, uint8_t n_sens, struct bmi2_dev *dev)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	460b      	mov	r3, r1
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to select sensor */
    uint64_t sensor_sel = 0;
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f990 	bl	8005cd0 <null_ptr_check>
 80059b0:	4603      	mov	r3, r0
 80059b2:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMI2_OK) && (sens_list != NULL))
 80059b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d117      	bne.n	80059ec <bmi270_sensor_enable+0x5c>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d014      	beq.n	80059ec <bmi270_sensor_enable+0x5c>
    {
        /* Get the selected sensors */
        rslt = select_sensor(sens_list, n_sens, &sensor_sel);
 80059c2:	f107 0210 	add.w	r2, r7, #16
 80059c6:	7afb      	ldrb	r3, [r7, #11]
 80059c8:	4619      	mov	r1, r3
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f9a0 	bl	8005d10 <select_sensor>
 80059d0:	4603      	mov	r3, r0
 80059d2:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80059d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <bmi270_sensor_enable+0x60>
        {
            /* Enable the selected sensors */
            rslt = sensor_enable(sensor_sel, dev);
 80059dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	f000 fabd 	bl	8005f60 <sensor_enable>
 80059e6:	4603      	mov	r3, r0
 80059e8:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80059ea:	e001      	b.n	80059f0 <bmi270_sensor_enable+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80059ec:	23ff      	movs	r3, #255	@ 0xff
 80059ee:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80059f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3720      	adds	r7, #32
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <bmi270_sensor_disable>:

/*!
 * @brief This API selects the sensors/features to be disabled.
 */
int8_t bmi270_sensor_disable(const uint8_t *sens_list, uint8_t n_sens, struct bmi2_dev *dev)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	460b      	mov	r3, r1
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to select sensor */
    uint64_t sensor_sel = 0;
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f95a 	bl	8005cd0 <null_ptr_check>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMI2_OK) && (sens_list != NULL))
 8005a20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d117      	bne.n	8005a58 <bmi270_sensor_disable+0x5c>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d014      	beq.n	8005a58 <bmi270_sensor_disable+0x5c>
    {
        /* Get the selected sensors */
        rslt = select_sensor(sens_list, n_sens, &sensor_sel);
 8005a2e:	f107 0210 	add.w	r2, r7, #16
 8005a32:	7afb      	ldrb	r3, [r7, #11]
 8005a34:	4619      	mov	r1, r3
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f96a 	bl	8005d10 <select_sensor>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005a40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <bmi270_sensor_disable+0x60>
        {
            /* Disable the selected sensors */
            rslt = sensor_disable(sensor_sel, dev);
 8005a48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	f000 face 	bl	8005fee <sensor_disable>
 8005a52:	4603      	mov	r3, r0
 8005a54:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8005a56:	e001      	b.n	8005a5c <bmi270_sensor_disable+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005a58:	23ff      	movs	r3, #255	@ 0xff
 8005a5a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005a5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <bmi270_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi270_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	460b      	mov	r3, r1
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f928 	bl	8005cd0 <null_ptr_check>
 8005a80:	4603      	mov	r3, r0
 8005a82:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8005a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d171      	bne.n	8005b70 <bmi270_set_sensor_config+0x108>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d06e      	beq.n	8005b70 <bmi270_set_sensor_config+0x108>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005a98:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75bb      	strb	r3, [r7, #22]
 8005a9e:	e053      	b.n	8005b48 <bmi270_set_sensor_config+0xe0>
        {
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8005aa0:	7dba      	ldrb	r2, [r7, #22]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d020      	beq.n	8005af8 <bmi270_set_sensor_config+0x90>
 8005ab6:	7dba      	ldrb	r2, [r7, #22]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d015      	beq.n	8005af8 <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8005acc:	7dba      	ldrb	r2, [r7, #22]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	781b      	ldrb	r3, [r3, #0]
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d00a      	beq.n	8005af8 <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8005ae2:	7dba      	ldrb	r2, [r7, #22]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	1a9b      	subs	r3, r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	461a      	mov	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b09      	cmp	r3, #9
 8005af6:	d10f      	bne.n	8005b18 <bmi270_set_sensor_config+0xb0>
            {
                rslt = bmi2_set_sensor_config(&sens_cfg[loop], 1, dev);
 8005af8:	7dba      	ldrb	r2, [r7, #22]
 8005afa:	4613      	mov	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	461a      	mov	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fe f9d3 	bl	8003eb8 <bmi2_set_sensor_config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	75fb      	strb	r3, [r7, #23]
 8005b16:	e014      	b.n	8005b42 <bmi270_set_sensor_config+0xda>
            else
            {
                /* Disable Advance power save if enabled for auxiliary
                 * and feature configurations
                 */
                if (aps_stat == BMI2_ENABLE)
 8005b18:	7d7b      	ldrb	r3, [r7, #21]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d105      	bne.n	8005b2a <bmi270_set_sensor_config+0xc2>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	2000      	movs	r0, #0
 8005b22:	f7fe f83c 	bl	8003b9e <bmi2_set_adv_power_save>
 8005b26:	4603      	mov	r3, r0
 8005b28:	75fb      	strb	r3, [r7, #23]
                }

                if (rslt == BMI2_OK)
 8005b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10f      	bne.n	8005b52 <bmi270_set_sensor_config+0xea>
                {
                    rslt = set_feat_config(sens_cfg, loop, dev);
 8005b32:	7dbb      	ldrb	r3, [r7, #22]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	4619      	mov	r1, r3
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f002 f89f 	bl	8007c7c <set_feat_config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 8005b42:	7dbb      	ldrb	r3, [r7, #22]
 8005b44:	3301      	adds	r3, #1
 8005b46:	75bb      	strb	r3, [r7, #22]
 8005b48:	7dba      	ldrb	r2, [r7, #22]
 8005b4a:	7afb      	ldrb	r3, [r7, #11]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d3a7      	bcc.n	8005aa0 <bmi270_set_sensor_config+0x38>
 8005b50:	e000      	b.n	8005b54 <bmi270_set_sensor_config+0xec>
                }
                /* Return error if any of the set configurations fail */
                else
                {
                    break;
 8005b52:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8005b54:	7d7b      	ldrb	r3, [r7, #21]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d10d      	bne.n	8005b76 <bmi270_set_sensor_config+0x10e>
 8005b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <bmi270_set_sensor_config+0x10e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	2001      	movs	r0, #1
 8005b66:	f7fe f81a 	bl	8003b9e <bmi2_set_adv_power_save>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8005b6e:	e002      	b.n	8005b76 <bmi270_set_sensor_config+0x10e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005b70:	23ff      	movs	r3, #255	@ 0xff
 8005b72:	75fb      	strb	r3, [r7, #23]
 8005b74:	e000      	b.n	8005b78 <bmi270_set_sensor_config+0x110>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8005b76:	bf00      	nop
    }

    return rslt;
 8005b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <bmi270_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi270_get_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f89a 	bl	8005cd0 <null_ptr_check>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8005ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f040 8089 	bne.w	8005cbc <bmi270_get_sensor_config+0x138>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 8085 	beq.w	8005cbc <bmi270_get_sensor_config+0x138>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005bb8:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75bb      	strb	r3, [r7, #22]
 8005bbe:	e069      	b.n	8005c94 <bmi270_get_sensor_config+0x110>
        {
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8005bc0:	7dba      	ldrb	r2, [r7, #22]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d020      	beq.n	8005c18 <bmi270_get_sensor_config+0x94>
 8005bd6:	7dba      	ldrb	r2, [r7, #22]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	461a      	mov	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d015      	beq.n	8005c18 <bmi270_get_sensor_config+0x94>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8005bec:	7dba      	ldrb	r2, [r7, #22]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	781b      	ldrb	r3, [r3, #0]
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d00a      	beq.n	8005c18 <bmi270_get_sensor_config+0x94>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8005c02:	7dba      	ldrb	r2, [r7, #22]
 8005c04:	4613      	mov	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	1a9b      	subs	r3, r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b09      	cmp	r3, #9
 8005c16:	d10f      	bne.n	8005c38 <bmi270_get_sensor_config+0xb4>
            {
                rslt = bmi2_get_sensor_config(&sens_cfg[loop], 1, dev);
 8005c18:	7dba      	ldrb	r2, [r7, #22]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	1a9b      	subs	r3, r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	461a      	mov	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fe f9f9 	bl	8004024 <bmi2_get_sensor_config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]
 8005c36:	e02a      	b.n	8005c8e <bmi270_get_sensor_config+0x10a>
            else
            {
                /* Disable Advance power save if enabled for auxiliary
                 * and feature configurations
                 */
                if ((sens_cfg[loop].type >= BMI2_MAIN_SENS_MAX_NUM) || (sens_cfg[loop].type == BMI2_AUX))
 8005c38:	7dba      	ldrb	r2, [r7, #22]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	461a      	mov	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d80a      	bhi.n	8005c64 <bmi270_get_sensor_config+0xe0>
 8005c4e:	7dba      	ldrb	r2, [r7, #22]
 8005c50:	4613      	mov	r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d108      	bne.n	8005c76 <bmi270_get_sensor_config+0xf2>
                {

                    if (aps_stat == BMI2_ENABLE)
 8005c64:	7d7b      	ldrb	r3, [r7, #21]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d105      	bne.n	8005c76 <bmi270_get_sensor_config+0xf2>
                    {
                        /* Disable advance power save if
                         * enabled
                         */
                        rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	f7fd ff96 	bl	8003b9e <bmi2_set_adv_power_save>
 8005c72:	4603      	mov	r3, r0
 8005c74:	75fb      	strb	r3, [r7, #23]
                    }
                }

                if (rslt == BMI2_OK)
 8005c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10f      	bne.n	8005c9e <bmi270_get_sensor_config+0x11a>
                {
                    rslt = get_feat_config(sens_cfg, loop, dev);
 8005c7e:	7dbb      	ldrb	r3, [r7, #22]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4619      	mov	r1, r3
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f002 f8c1 	bl	8007e0c <get_feat_config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 8005c8e:	7dbb      	ldrb	r3, [r7, #22]
 8005c90:	3301      	adds	r3, #1
 8005c92:	75bb      	strb	r3, [r7, #22]
 8005c94:	7dba      	ldrb	r2, [r7, #22]
 8005c96:	7afb      	ldrb	r3, [r7, #11]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d391      	bcc.n	8005bc0 <bmi270_get_sensor_config+0x3c>
 8005c9c:	e000      	b.n	8005ca0 <bmi270_get_sensor_config+0x11c>
                }
                /* Return error if any of the get configurations fail */
                else
                {
                    break;
 8005c9e:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8005ca0:	7d7b      	ldrb	r3, [r7, #21]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d10d      	bne.n	8005cc2 <bmi270_get_sensor_config+0x13e>
 8005ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <bmi270_get_sensor_config+0x13e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f7fd ff74 	bl	8003b9e <bmi2_set_adv_power_save>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8005cba:	e002      	b.n	8005cc2 <bmi270_get_sensor_config+0x13e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8005cbc:	23ff      	movs	r3, #255	@ 0xff
 8005cbe:	75fb      	strb	r3, [r7, #23]
 8005cc0:	e000      	b.n	8005cc4 <bmi270_get_sensor_config+0x140>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8005cc2:	bf00      	nop
    }

    return rslt;
 8005cc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <null_ptr_check+0x2a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d007      	beq.n	8005cfa <null_ptr_check+0x2a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <null_ptr_check+0x2a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 8005cfa:	23ff      	movs	r3, #255	@ 0xff
 8005cfc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <select_sensor>:
/*!
 * @brief This internal API selects the sensor/features to be enabled or
 * disabled.
 */
static int8_t select_sensor(const uint8_t *sens_list, uint8_t n_sens, uint64_t *sensor_sel)
{
 8005d10:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005d14:	b09d      	sub	sp, #116	@ 0x74
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6678      	str	r0, [r7, #100]	@ 0x64
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005d1e:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    /* Variable to define loop */
    uint8_t count;

    for (count = 0; count < n_sens; count++)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8005d2e:	e107      	b.n	8005f40 <select_sensor+0x230>
    {
        switch (sens_list[count])
 8005d30:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8005d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d36:	4413      	add	r3, r2
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b22      	cmp	r3, #34	@ 0x22
 8005d3c:	f200 80f7 	bhi.w	8005f2e <select_sensor+0x21e>
 8005d40:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <select_sensor+0x38>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005dd5 	.word	0x08005dd5
 8005d4c:	08005de9 	.word	0x08005de9
 8005d50:	08005dfd 	.word	0x08005dfd
 8005d54:	08005e2b 	.word	0x08005e2b
 8005d58:	08005e45 	.word	0x08005e45
 8005d5c:	08005e5f 	.word	0x08005e5f
 8005d60:	08005e79 	.word	0x08005e79
 8005d64:	08005e93 	.word	0x08005e93
 8005d68:	08005ead 	.word	0x08005ead
 8005d6c:	08005ec7 	.word	0x08005ec7
 8005d70:	08005f2f 	.word	0x08005f2f
 8005d74:	08005f2f 	.word	0x08005f2f
 8005d78:	08005f2f 	.word	0x08005f2f
 8005d7c:	08005f2f 	.word	0x08005f2f
 8005d80:	08005f2f 	.word	0x08005f2f
 8005d84:	08005f2f 	.word	0x08005f2f
 8005d88:	08005f2f 	.word	0x08005f2f
 8005d8c:	08005f2f 	.word	0x08005f2f
 8005d90:	08005f2f 	.word	0x08005f2f
 8005d94:	08005efb 	.word	0x08005efb
 8005d98:	08005f15 	.word	0x08005f15
 8005d9c:	08005f2f 	.word	0x08005f2f
 8005da0:	08005f2f 	.word	0x08005f2f
 8005da4:	08005f2f 	.word	0x08005f2f
 8005da8:	08005f2f 	.word	0x08005f2f
 8005dac:	08005f2f 	.word	0x08005f2f
 8005db0:	08005f2f 	.word	0x08005f2f
 8005db4:	08005f2f 	.word	0x08005f2f
 8005db8:	08005f2f 	.word	0x08005f2f
 8005dbc:	08005f2f 	.word	0x08005f2f
 8005dc0:	08005f2f 	.word	0x08005f2f
 8005dc4:	08005f2f 	.word	0x08005f2f
 8005dc8:	08005e11 	.word	0x08005e11
 8005dcc:	08005f2f 	.word	0x08005f2f
 8005dd0:	08005ee1 	.word	0x08005ee1
        {
            case BMI2_ACCEL:
                *sensor_sel |= BMI2_ACCEL_SENS_SEL;
 8005dd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f042 0401 	orr.w	r4, r2, #1
 8005dde:	461d      	mov	r5, r3
 8005de0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005de2:	e9c3 4500 	strd	r4, r5, [r3]
                break;
 8005de6:	e0a6      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_GYRO:
                *sensor_sel |= BMI2_GYRO_SENS_SEL;
 8005de8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f042 0802 	orr.w	r8, r2, #2
 8005df2:	4699      	mov	r9, r3
 8005df4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005df6:	e9c3 8900 	strd	r8, r9, [r3]
                break;
 8005dfa:	e09c      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_AUX:
                *sensor_sel |= BMI2_AUX_SENS_SEL;
 8005dfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f042 0a04 	orr.w	sl, r2, #4
 8005e06:	469b      	mov	fp, r3
 8005e08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e0a:	e9c3 ab00 	strd	sl, fp, [r3]
                break;
 8005e0e:	e092      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_TEMP:
                *sensor_sel |= BMI2_TEMP_SENS_SEL;
 8005e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	653a      	str	r2, [r7, #80]	@ 0x50
 8005e18:	f043 0301 	orr.w	r3, r3, #1
 8005e1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e20:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005e24:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005e28:	e085      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_SIG_MOTION:
                *sensor_sel |= BMI2_SIG_MOTION_SEL;
 8005e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f042 0108 	orr.w	r1, r2, #8
 8005e34:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e3a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005e3e:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005e42:	e078      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_ANY_MOTION:
                *sensor_sel |= BMI2_ANY_MOT_SEL;
 8005e44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f042 0110 	orr.w	r1, r2, #16
 8005e4e:	6439      	str	r1, [r7, #64]	@ 0x40
 8005e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005e58:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005e5c:	e06b      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_NO_MOTION:
                *sensor_sel |= BMI2_NO_MOT_SEL;
 8005e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f042 0120 	orr.w	r1, r2, #32
 8005e68:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005e72:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005e76:	e05e      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_STEP_DETECTOR:
                *sensor_sel |= BMI2_STEP_DETECT_SEL;
 8005e78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f042 0140 	orr.w	r1, r2, #64	@ 0x40
 8005e82:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e88:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e8c:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005e90:	e051      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_STEP_COUNTER:
                *sensor_sel |= BMI2_STEP_COUNT_SEL;
 8005e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f042 0180 	orr.w	r1, r2, #128	@ 0x80
 8005e9c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ea2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005ea6:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005eaa:	e044      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_STEP_ACTIVITY:
                *sensor_sel |= BMI2_STEP_ACT_SEL;
 8005eac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f442 7180 	orr.w	r1, r2, #256	@ 0x100
 8005eb6:	6239      	str	r1, [r7, #32]
 8005eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ebc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ec0:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005ec4:	e037      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_GYRO_GAIN_UPDATE:
                *sensor_sel |= BMI2_GYRO_GAIN_UPDATE_SEL;
 8005ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f442 7100 	orr.w	r1, r2, #512	@ 0x200
 8005ed0:	61b9      	str	r1, [r7, #24]
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ed6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005eda:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005ede:	e02a      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_GYRO_SELF_OFF:
                *sensor_sel |= BMI2_GYRO_SELF_OFF_SEL;
 8005ee0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	613a      	str	r2, [r7, #16]
 8005ee8:	f043 0304 	orr.w	r3, r3, #4
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ef0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ef4:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005ef8:	e01d      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_WRIST_GESTURE:
                *sensor_sel |= BMI2_WRIST_GEST_SEL;
 8005efa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f442 2100 	orr.w	r1, r2, #524288	@ 0x80000
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f0a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f0e:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005f12:	e010      	b.n	8005f36 <select_sensor+0x226>
            case BMI2_WRIST_WEAR_WAKE_UP:
                *sensor_sel |= BMI2_WRIST_WEAR_WAKE_UP_SEL;
 8005f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f442 1180 	orr.w	r1, r2, #1048576	@ 0x100000
 8005f1e:	6039      	str	r1, [r7, #0]
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f28:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8005f2c:	e003      	b.n	8005f36 <select_sensor+0x226>
            default:
                rslt = BMI2_E_INVALID_SENSOR;
 8005f2e:	23f8      	movs	r3, #248	@ 0xf8
 8005f30:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                break;
 8005f34:	bf00      	nop
    for (count = 0; count < n_sens; count++)
 8005f36:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8005f40:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8005f44:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	f4ff aef1 	bcc.w	8005d30 <select_sensor+0x20>
        }
    }

    return rslt;
 8005f4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3774      	adds	r7, #116	@ 0x74
 8005f56:	46bd      	mov	sp, r7
 8005f58:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop

08005f60 <sensor_enable>:

/*!
 * @brief This internal API enables the selected sensor/features.
 */
static int8_t sensor_enable(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8005f60:	b5b0      	push	{r4, r5, r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	75bb      	strb	r3, [r7, #22]

    rslt = enable_main_sensors(sensor_sel, dev);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f76:	f002 f811 	bl	8007f9c <enable_main_sensors>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI2_OK) && (sensor_sel & ~(BMI2_MAIN_SENSORS)))
 8005f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d12d      	bne.n	8005fe2 <sensor_enable+0x82>
 8005f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f8a:	f022 0407 	bic.w	r4, r2, #7
 8005f8e:	f023 0501 	bic.w	r5, r3, #1
 8005f92:	ea54 0305 	orrs.w	r3, r4, r5
 8005f96:	d024      	beq.n	8005fe2 <sensor_enable+0x82>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005f9e:	75bb      	strb	r3, [r7, #22]
        if (aps_stat == BMI2_ENABLE)
 8005fa0:	7dbb      	ldrb	r3, [r7, #22]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d105      	bne.n	8005fb2 <sensor_enable+0x52>
        {
            /* Disable advance power save if enabled */
            rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	2000      	movs	r0, #0
 8005faa:	f7fd fdf8 	bl	8003b9e <bmi2_set_adv_power_save>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI2_OK)
 8005fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d113      	bne.n	8005fe2 <sensor_enable+0x82>
        {
            rslt = enable_sensor_features(sensor_sel, dev);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fc0:	f002 f861 	bl	8008086 <enable_sensor_features>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	75fb      	strb	r3, [r7, #23]

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8005fc8:	7dbb      	ldrb	r3, [r7, #22]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d109      	bne.n	8005fe2 <sensor_enable+0x82>
 8005fce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d105      	bne.n	8005fe2 <sensor_enable+0x82>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	2001      	movs	r0, #1
 8005fda:	f7fd fde0 	bl	8003b9e <bmi2_set_adv_power_save>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8005fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bdb0      	pop	{r4, r5, r7, pc}

08005fee <sensor_disable>:

/*!
 * @brief This internal API disables the selected sensors/features.
 */
static int8_t sensor_disable(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8005fee:	b5b0      	push	{r4, r5, r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	75bb      	strb	r3, [r7, #22]

    rslt = disable_main_sensors(sensor_sel, dev);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006004:	f002 f904 	bl	8008210 <disable_main_sensors>
 8006008:	4603      	mov	r3, r0
 800600a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI2_OK) && (sensor_sel & ~(BMI2_MAIN_SENSORS)))
 800600c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d12d      	bne.n	8006070 <sensor_disable+0x82>
 8006014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006018:	f022 0407 	bic.w	r4, r2, #7
 800601c:	f023 0501 	bic.w	r5, r3, #1
 8006020:	ea54 0305 	orrs.w	r3, r4, r5
 8006024:	d024      	beq.n	8006070 <sensor_disable+0x82>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800602c:	75bb      	strb	r3, [r7, #22]
        if (aps_stat == BMI2_ENABLE)
 800602e:	7dbb      	ldrb	r3, [r7, #22]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d105      	bne.n	8006040 <sensor_disable+0x52>
        {
            /* Disable advance power save if enabled */
            rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	2000      	movs	r0, #0
 8006038:	f7fd fdb1 	bl	8003b9e <bmi2_set_adv_power_save>
 800603c:	4603      	mov	r3, r0
 800603e:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI2_OK)
 8006040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d113      	bne.n	8006070 <sensor_disable+0x82>
        {
            rslt = disable_sensor_features(sensor_sel, dev);
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800604e:	f002 f954 	bl	80082fa <disable_sensor_features>
 8006052:	4603      	mov	r3, r0
 8006054:	75fb      	strb	r3, [r7, #23]

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8006056:	7dbb      	ldrb	r3, [r7, #22]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d109      	bne.n	8006070 <sensor_disable+0x82>
 800605c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <sensor_disable+0x82>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	2001      	movs	r0, #1
 8006068:	f7fd fd99 	bl	8003b9e <bmi2_set_adv_power_save>
 800606c:	4603      	mov	r3, r0
 800606e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8006070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bdb0      	pop	{r4, r5, r7, pc}

0800607c <set_any_motion>:

/*!
 * @brief This internal API is used to enable/disable any motion feature.
 */
static int8_t set_any_motion(uint8_t enable, struct bmi2_dev *dev)
{
 800607c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006080:	b088      	sub	sp, #32
 8006082:	af00      	add	r7, sp, #0
 8006084:	4603      	mov	r3, r0
 8006086:	6039      	str	r1, [r7, #0]
 8006088:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800608a:	f107 030c 	add.w	r3, r7, #12
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	605a      	str	r2, [r3, #4]
 8006094:	609a      	str	r2, [r3, #8]
 8006096:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any-motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 800609c:	2300      	movs	r3, #0
 800609e:	723b      	strb	r3, [r7, #8]
 80060a0:	2300      	movs	r3, #0
 80060a2:	727b      	strb	r3, [r7, #9]
 80060a4:	2300      	movs	r3, #0
 80060a6:	72bb      	strb	r3, [r7, #10]

    /* Search for any-motion feature and extract its configurations details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 80060a8:	f107 0308 	add.w	r3, r7, #8
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	2104      	movs	r1, #4
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe fa6a 	bl	800458a <bmi2_extract_input_feat_config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 80060ba:	7f7b      	ldrb	r3, [r7, #29]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d048      	beq.n	8006152 <set_any_motion+0xd6>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 80060c0:	7a7b      	ldrb	r3, [r7, #9]
 80060c2:	f107 010c 	add.w	r1, r7, #12
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fe f9cc 	bl	8004466 <bmi2_get_feat_config>
 80060ce:	4603      	mov	r3, r0
 80060d0:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80060d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d13d      	bne.n	8006156 <set_any_motion+0xda>
        {
            /* Define the offset for enable/disable of any-motion axes */
            idx = any_mot_config.start_addr + BMI2_ANY_MOT_FEAT_EN_OFFSET;
 80060da:	7abb      	ldrb	r3, [r7, #10]
 80060dc:	3303      	adds	r3, #3
 80060de:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_ANY_NO_MOT_EN, enable);
 80060e0:	7fbb      	ldrb	r3, [r7, #30]
 80060e2:	3320      	adds	r3, #32
 80060e4:	443b      	add	r3, r7
 80060e6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80060ea:	b25b      	sxtb	r3, r3
 80060ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060f0:	b25a      	sxtb	r2, r3
 80060f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f6:	01db      	lsls	r3, r3, #7
 80060f8:	b25b      	sxtb	r3, r3
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b25a      	sxtb	r2, r3
 80060fe:	7fbb      	ldrb	r3, [r7, #30]
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	3320      	adds	r3, #32
 8006104:	443b      	add	r3, r7
 8006106:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800610a:	f107 010c 	add.w	r1, r7, #12
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2210      	movs	r2, #16
 8006112:	2030      	movs	r0, #48	@ 0x30
 8006114:	f7fd fc6f 	bl	80039f6 <bmi2_set_regs>
 8006118:	4603      	mov	r3, r0
 800611a:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 800611c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10c      	bne.n	800613e <set_any_motion+0xc2>
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d109      	bne.n	800613e <set_any_motion+0xc2>
            {
                dev->sens_en_stat |= BMI2_ANY_MOT_SEL;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006130:	f042 0810 	orr.w	r8, r2, #16
 8006134:	4699      	mov	r9, r3
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 800613c:	e00b      	b.n	8006156 <set_any_motion+0xda>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_ANY_MOT_SEL;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006144:	f022 0410 	bic.w	r4, r2, #16
 8006148:	461d      	mov	r5, r3
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006150:	e001      	b.n	8006156 <set_any_motion+0xda>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006152:	23f8      	movs	r3, #248	@ 0xf8
 8006154:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006156:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006164 <set_no_motion>:

/*!
 * @brief This internal API is used to enable/disable no-motion feature.
 */
static int8_t set_no_motion(uint8_t enable, struct bmi2_dev *dev)
{
 8006164:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006168:	b088      	sub	sp, #32
 800616a:	af00      	add	r7, sp, #0
 800616c:	4603      	mov	r3, r0
 800616e:	6039      	str	r1, [r7, #0]
 8006170:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006172:	f107 030c 	add.w	r3, r7, #12
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	609a      	str	r2, [r3, #8]
 800617e:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006180:	2300      	movs	r3, #0
 8006182:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 8006184:	2300      	movs	r3, #0
 8006186:	723b      	strb	r3, [r7, #8]
 8006188:	2300      	movs	r3, #0
 800618a:	727b      	strb	r3, [r7, #9]
 800618c:	2300      	movs	r3, #0
 800618e:	72bb      	strb	r3, [r7, #10]

    /* Search for no-motion feature and extract its configurations details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 8006190:	f107 0308 	add.w	r3, r7, #8
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	2105      	movs	r1, #5
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe f9f6 	bl	800458a <bmi2_extract_input_feat_config>
 800619e:	4603      	mov	r3, r0
 80061a0:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 80061a2:	7f7b      	ldrb	r3, [r7, #29]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d048      	beq.n	800623a <set_no_motion+0xd6>
    {
        /* Get the configuration from the page where any/no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 80061a8:	7a7b      	ldrb	r3, [r7, #9]
 80061aa:	f107 010c 	add.w	r1, r7, #12
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe f958 	bl	8004466 <bmi2_get_feat_config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80061ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d13d      	bne.n	800623e <set_no_motion+0xda>
        {
            /* Define the offset for enable/disable of no-motion axes */
            idx = no_mot_config.start_addr + BMI2_NO_MOT_FEAT_EN_OFFSET;
 80061c2:	7abb      	ldrb	r3, [r7, #10]
 80061c4:	3303      	adds	r3, #3
 80061c6:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_ANY_NO_MOT_EN, enable);
 80061c8:	7fbb      	ldrb	r3, [r7, #30]
 80061ca:	3320      	adds	r3, #32
 80061cc:	443b      	add	r3, r7
 80061ce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80061d2:	b25b      	sxtb	r3, r3
 80061d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061d8:	b25a      	sxtb	r2, r3
 80061da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061de:	01db      	lsls	r3, r3, #7
 80061e0:	b25b      	sxtb	r3, r3
 80061e2:	4313      	orrs	r3, r2
 80061e4:	b25a      	sxtb	r2, r3
 80061e6:	7fbb      	ldrb	r3, [r7, #30]
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	3320      	adds	r3, #32
 80061ec:	443b      	add	r3, r7
 80061ee:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80061f2:	f107 010c 	add.w	r1, r7, #12
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2210      	movs	r2, #16
 80061fa:	2030      	movs	r0, #48	@ 0x30
 80061fc:	f7fd fbfb 	bl	80039f6 <bmi2_set_regs>
 8006200:	4603      	mov	r3, r0
 8006202:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10c      	bne.n	8006226 <set_no_motion+0xc2>
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d109      	bne.n	8006226 <set_no_motion+0xc2>
            {
                dev->sens_en_stat |= BMI2_NO_MOT_SEL;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006218:	f042 0820 	orr.w	r8, r2, #32
 800621c:	4699      	mov	r9, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006224:	e00b      	b.n	800623e <set_no_motion+0xda>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_NO_MOT_SEL;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800622c:	f022 0420 	bic.w	r4, r2, #32
 8006230:	461d      	mov	r5, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006238:	e001      	b.n	800623e <set_no_motion+0xda>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800623a:	23f8      	movs	r3, #248	@ 0xf8
 800623c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800623e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800624c <set_step_detector>:

/*!
 * @brief This internal API is used to enable/disable step detector feature.
 */
static int8_t set_step_detector(uint8_t enable, struct bmi2_dev *dev)
{
 800624c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006250:	b088      	sub	sp, #32
 8006252:	af00      	add	r7, sp, #0
 8006254:	4603      	mov	r3, r0
 8006256:	6039      	str	r1, [r7, #0]
 8006258:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800625a:	f107 030c 	add.w	r3, r7, #12
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	605a      	str	r2, [r3, #4]
 8006264:	609a      	str	r2, [r3, #8]
 8006266:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step detector */
    struct bmi2_feature_config step_det_config = { 0, 0, 0 };
 800626c:	2300      	movs	r3, #0
 800626e:	723b      	strb	r3, [r7, #8]
 8006270:	2300      	movs	r3, #0
 8006272:	727b      	strb	r3, [r7, #9]
 8006274:	2300      	movs	r3, #0
 8006276:	72bb      	strb	r3, [r7, #10]

    /* Search for step detector feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_det_config, BMI2_STEP_DETECTOR, dev);
 8006278:	f107 0308 	add.w	r3, r7, #8
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	2106      	movs	r1, #6
 8006280:	4618      	mov	r0, r3
 8006282:	f7fe f982 	bl	800458a <bmi2_extract_input_feat_config>
 8006286:	4603      	mov	r3, r0
 8006288:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 800628a:	7f7b      	ldrb	r3, [r7, #29]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d04b      	beq.n	8006328 <set_step_detector+0xdc>
    {
        /* Get the configuration from the page where step detector feature resides */
        rslt = bmi2_get_feat_config(step_det_config.page, feat_config, dev);
 8006290:	7a7b      	ldrb	r3, [r7, #9]
 8006292:	f107 010c 	add.w	r1, r7, #12
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f7fe f8e4 	bl	8004466 <bmi2_get_feat_config>
 800629e:	4603      	mov	r3, r0
 80062a0:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80062a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d140      	bne.n	800632c <set_step_detector+0xe0>
        {
            /* Define the offset for enable/disable of step detector */
            idx = step_det_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 80062aa:	7abb      	ldrb	r3, [r7, #10]
 80062ac:	3301      	adds	r3, #1
 80062ae:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_DET_FEAT_EN, enable);
 80062b0:	7fbb      	ldrb	r3, [r7, #30]
 80062b2:	3320      	adds	r3, #32
 80062b4:	443b      	add	r3, r7
 80062b6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80062ba:	b25b      	sxtb	r3, r3
 80062bc:	f023 0308 	bic.w	r3, r3, #8
 80062c0:	b25a      	sxtb	r2, r3
 80062c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	b25b      	sxtb	r3, r3
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	4313      	orrs	r3, r2
 80062d2:	b25a      	sxtb	r2, r3
 80062d4:	7fbb      	ldrb	r3, [r7, #30]
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	3320      	adds	r3, #32
 80062da:	443b      	add	r3, r7
 80062dc:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80062e0:	f107 010c 	add.w	r1, r7, #12
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2210      	movs	r2, #16
 80062e8:	2030      	movs	r0, #48	@ 0x30
 80062ea:	f7fd fb84 	bl	80039f6 <bmi2_set_regs>
 80062ee:	4603      	mov	r3, r0
 80062f0:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80062f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10c      	bne.n	8006314 <set_step_detector+0xc8>
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d109      	bne.n	8006314 <set_step_detector+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_DETECT_SEL;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006306:	f042 0840 	orr.w	r8, r2, #64	@ 0x40
 800630a:	4699      	mov	r9, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006312:	e00b      	b.n	800632c <set_step_detector+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_DETECT_SEL;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800631a:	f022 0440 	bic.w	r4, r2, #64	@ 0x40
 800631e:	461d      	mov	r5, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006326:	e001      	b.n	800632c <set_step_detector+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006328:	23f8      	movs	r3, #248	@ 0xf8
 800632a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800632c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800633a <set_step_counter>:

/*!
 * @brief This internal API is used to enable/disable step counter feature.
 */
static int8_t set_step_counter(uint8_t enable, struct bmi2_dev *dev)
{
 800633a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	6039      	str	r1, [r7, #0]
 8006346:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006348:	f107 030c 	add.w	r3, r7, #12
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	609a      	str	r2, [r3, #8]
 8006354:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 800635a:	2300      	movs	r3, #0
 800635c:	723b      	strb	r3, [r7, #8]
 800635e:	2300      	movs	r3, #0
 8006360:	727b      	strb	r3, [r7, #9]
 8006362:	2300      	movs	r3, #0
 8006364:	72bb      	strb	r3, [r7, #10]

    /* Search for step counter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 8006366:	f107 0308 	add.w	r3, r7, #8
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	2107      	movs	r1, #7
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe f90b 	bl	800458a <bmi2_extract_input_feat_config>
 8006374:	4603      	mov	r3, r0
 8006376:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006378:	7f7b      	ldrb	r3, [r7, #29]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d04b      	beq.n	8006416 <set_step_counter+0xdc>
    {
        /* Get the configuration from the page where step-counter feature resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 800637e:	7a7b      	ldrb	r3, [r7, #9]
 8006380:	f107 010c 	add.w	r1, r7, #12
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe f86d 	bl	8004466 <bmi2_get_feat_config>
 800638c:	4603      	mov	r3, r0
 800638e:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006390:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d140      	bne.n	800641a <set_step_counter+0xe0>
        {
            /* Define the offset for enable/disable of step counter */
            idx = step_count_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 8006398:	7abb      	ldrb	r3, [r7, #10]
 800639a:	3301      	adds	r3, #1
 800639c:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_COUNT_FEAT_EN, enable);
 800639e:	7fbb      	ldrb	r3, [r7, #30]
 80063a0:	3320      	adds	r3, #32
 80063a2:	443b      	add	r3, r7
 80063a4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80063a8:	b25b      	sxtb	r3, r3
 80063aa:	f023 0310 	bic.w	r3, r3, #16
 80063ae:	b25a      	sxtb	r2, r3
 80063b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	b25b      	sxtb	r3, r3
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	b25b      	sxtb	r3, r3
 80063be:	4313      	orrs	r3, r2
 80063c0:	b25a      	sxtb	r2, r3
 80063c2:	7fbb      	ldrb	r3, [r7, #30]
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	3320      	adds	r3, #32
 80063c8:	443b      	add	r3, r7
 80063ca:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80063ce:	f107 010c 	add.w	r1, r7, #12
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2210      	movs	r2, #16
 80063d6:	2030      	movs	r0, #48	@ 0x30
 80063d8:	f7fd fb0d 	bl	80039f6 <bmi2_set_regs>
 80063dc:	4603      	mov	r3, r0
 80063de:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80063e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10c      	bne.n	8006402 <set_step_counter+0xc8>
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d109      	bne.n	8006402 <set_step_counter+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_COUNT_SEL;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80063f4:	f042 0880 	orr.w	r8, r2, #128	@ 0x80
 80063f8:	4699      	mov	r9, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 8006400:	e00b      	b.n	800641a <set_step_counter+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_COUNT_SEL;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006408:	f022 0480 	bic.w	r4, r2, #128	@ 0x80
 800640c:	461d      	mov	r5, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 8006414:	e001      	b.n	800641a <set_step_counter+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006416:	23f8      	movs	r3, #248	@ 0xf8
 8006418:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800641a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3720      	adds	r7, #32
 8006422:	46bd      	mov	sp, r7
 8006424:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006428 <set_sig_motion>:

/*!
 * @brief This internal API is used to enable/disable sig-motion feature.
 */
static int8_t set_sig_motion(uint8_t enable, struct bmi2_dev *dev)
{
 8006428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800642c:	b088      	sub	sp, #32
 800642e:	af00      	add	r7, sp, #0
 8006430:	4603      	mov	r3, r0
 8006432:	6039      	str	r1, [r7, #0]
 8006434:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006436:	f107 030c 	add.w	r3, r7, #12
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	605a      	str	r2, [r3, #4]
 8006440:	609a      	str	r2, [r3, #8]
 8006442:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 8006448:	2300      	movs	r3, #0
 800644a:	723b      	strb	r3, [r7, #8]
 800644c:	2300      	movs	r3, #0
 800644e:	727b      	strb	r3, [r7, #9]
 8006450:	2300      	movs	r3, #0
 8006452:	72bb      	strb	r3, [r7, #10]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 8006454:	f107 0308 	add.w	r3, r7, #8
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	2103      	movs	r1, #3
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe f894 	bl	800458a <bmi2_extract_input_feat_config>
 8006462:	4603      	mov	r3, r0
 8006464:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006466:	7f7b      	ldrb	r3, [r7, #29]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d049      	beq.n	8006500 <set_sig_motion+0xd8>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 800646c:	7a7b      	ldrb	r3, [r7, #9]
 800646e:	f107 010c 	add.w	r1, r7, #12
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	f7fd fff6 	bl	8004466 <bmi2_get_feat_config>
 800647a:	4603      	mov	r3, r0
 800647c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800647e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d13e      	bne.n	8006504 <set_sig_motion+0xdc>
        {
            /* Define the offset for enable/disable of sig-motion */
            idx = sig_mot_config.start_addr + BMI2_SIG_MOT_FEAT_EN_OFFSET;
 8006486:	7abb      	ldrb	r3, [r7, #10]
 8006488:	330a      	adds	r3, #10
 800648a:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BIT_POS0(feat_config[idx], BMI2_SIG_MOT_FEAT_EN, enable);
 800648c:	7fbb      	ldrb	r3, [r7, #30]
 800648e:	3320      	adds	r3, #32
 8006490:	443b      	add	r3, r7
 8006492:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006496:	b25b      	sxtb	r3, r3
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	b25a      	sxtb	r2, r3
 800649e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	b25b      	sxtb	r3, r3
 80064a8:	4313      	orrs	r3, r2
 80064aa:	b25a      	sxtb	r2, r3
 80064ac:	7fbb      	ldrb	r3, [r7, #30]
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	3320      	adds	r3, #32
 80064b2:	443b      	add	r3, r7
 80064b4:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80064b8:	f107 010c 	add.w	r1, r7, #12
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2210      	movs	r2, #16
 80064c0:	2030      	movs	r0, #48	@ 0x30
 80064c2:	f7fd fa98 	bl	80039f6 <bmi2_set_regs>
 80064c6:	4603      	mov	r3, r0
 80064c8:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80064ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10c      	bne.n	80064ec <set_sig_motion+0xc4>
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d109      	bne.n	80064ec <set_sig_motion+0xc4>
            {
                dev->sens_en_stat |= BMI2_SIG_MOTION_SEL;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80064de:	f042 0808 	orr.w	r8, r2, #8
 80064e2:	4699      	mov	r9, r3
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 80064ea:	e00b      	b.n	8006504 <set_sig_motion+0xdc>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_SIG_MOTION_SEL;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80064f2:	f022 0408 	bic.w	r4, r2, #8
 80064f6:	461d      	mov	r5, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 80064fe:	e001      	b.n	8006504 <set_sig_motion+0xdc>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006500:	23f8      	movs	r3, #248	@ 0xf8
 8006502:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006504:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006512 <set_step_activity>:

/*!
 * @brief This internal API is used to enable/disable step activity detection.
 */
static int8_t set_step_activity(uint8_t enable, struct bmi2_dev *dev)
{
 8006512:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	6039      	str	r1, [r7, #0]
 800651e:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006520:	f107 030c 	add.w	r3, r7, #12
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	609a      	str	r2, [r3, #8]
 800652c:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step activity */
    struct bmi2_feature_config step_act_config = { 0, 0, 0 };
 8006532:	2300      	movs	r3, #0
 8006534:	723b      	strb	r3, [r7, #8]
 8006536:	2300      	movs	r3, #0
 8006538:	727b      	strb	r3, [r7, #9]
 800653a:	2300      	movs	r3, #0
 800653c:	72bb      	strb	r3, [r7, #10]

    /* Search for step activity feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_act_config, BMI2_STEP_ACTIVITY, dev);
 800653e:	f107 0308 	add.w	r3, r7, #8
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	2108      	movs	r1, #8
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe f81f 	bl	800458a <bmi2_extract_input_feat_config>
 800654c:	4603      	mov	r3, r0
 800654e:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006550:	7f7b      	ldrb	r3, [r7, #29]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d04b      	beq.n	80065ee <set_step_activity+0xdc>
    {
        /* Get the configuration from the page where step-activity
         * feature resides
         */
        rslt = bmi2_get_feat_config(step_act_config.page, feat_config, dev);
 8006556:	7a7b      	ldrb	r3, [r7, #9]
 8006558:	f107 010c 	add.w	r1, r7, #12
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f7fd ff81 	bl	8004466 <bmi2_get_feat_config>
 8006564:	4603      	mov	r3, r0
 8006566:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006568:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d140      	bne.n	80065f2 <set_step_activity+0xe0>
        {
            /* Define the offset for enable/disable of step activity */
            idx = step_act_config.start_addr + BMI2_STEP_COUNT_FEAT_EN_OFFSET;
 8006570:	7abb      	ldrb	r3, [r7, #10]
 8006572:	3301      	adds	r3, #1
 8006574:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_STEP_ACT_FEAT_EN, enable);
 8006576:	7fbb      	ldrb	r3, [r7, #30]
 8006578:	3320      	adds	r3, #32
 800657a:	443b      	add	r3, r7
 800657c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006580:	b25b      	sxtb	r3, r3
 8006582:	f023 0320 	bic.w	r3, r3, #32
 8006586:	b25a      	sxtb	r2, r3
 8006588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800658c:	015b      	lsls	r3, r3, #5
 800658e:	b25b      	sxtb	r3, r3
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	b25b      	sxtb	r3, r3
 8006596:	4313      	orrs	r3, r2
 8006598:	b25a      	sxtb	r2, r3
 800659a:	7fbb      	ldrb	r3, [r7, #30]
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	3320      	adds	r3, #32
 80065a0:	443b      	add	r3, r7
 80065a2:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80065a6:	f107 010c 	add.w	r1, r7, #12
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2210      	movs	r2, #16
 80065ae:	2030      	movs	r0, #48	@ 0x30
 80065b0:	f7fd fa21 	bl	80039f6 <bmi2_set_regs>
 80065b4:	4603      	mov	r3, r0
 80065b6:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80065b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10c      	bne.n	80065da <set_step_activity+0xc8>
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d109      	bne.n	80065da <set_step_activity+0xc8>
            {
                dev->sens_en_stat |= BMI2_STEP_ACT_SEL;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80065cc:	f442 7880 	orr.w	r8, r2, #256	@ 0x100
 80065d0:	4699      	mov	r9, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 80065d8:	e00b      	b.n	80065f2 <set_step_activity+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_STEP_ACT_SEL;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80065e0:	f422 7480 	bic.w	r4, r2, #256	@ 0x100
 80065e4:	461d      	mov	r5, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 80065ec:	e001      	b.n	80065f2 <set_step_activity+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80065ee:	23f8      	movs	r3, #248	@ 0xf8
 80065f0:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80065f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3720      	adds	r7, #32
 80065fa:	46bd      	mov	sp, r7
 80065fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006600 <set_gyro_self_offset_corr>:
/*!
 * @brief This internal API gives an option to enable self-offset correction
 * feature of gyroscope, either internally or by the host.
 */
static int8_t set_gyro_self_offset_corr(uint8_t enable, struct bmi2_dev *dev)
{
 8006600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006604:	b088      	sub	sp, #32
 8006606:	af00      	add	r7, sp, #0
 8006608:	4603      	mov	r3, r0
 800660a:	6039      	str	r1, [r7, #0]
 800660c:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800660e:	f107 030c 	add.w	r3, r7, #12
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	605a      	str	r2, [r3, #4]
 8006618:	609a      	str	r2, [r3, #8]
 800661a:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for self-offset correction */
    struct bmi2_feature_config self_off_corr_cfg = { 0, 0, 0 };
 8006620:	2300      	movs	r3, #0
 8006622:	723b      	strb	r3, [r7, #8]
 8006624:	2300      	movs	r3, #0
 8006626:	727b      	strb	r3, [r7, #9]
 8006628:	2300      	movs	r3, #0
 800662a:	72bb      	strb	r3, [r7, #10]

    /* Search for self-offset correction and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&self_off_corr_cfg, BMI2_GYRO_SELF_OFF, dev);
 800662c:	f107 0308 	add.w	r3, r7, #8
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	2122      	movs	r1, #34	@ 0x22
 8006634:	4618      	mov	r0, r3
 8006636:	f7fd ffa8 	bl	800458a <bmi2_extract_input_feat_config>
 800663a:	4603      	mov	r3, r0
 800663c:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 800663e:	7f7b      	ldrb	r3, [r7, #29]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d04a      	beq.n	80066da <set_gyro_self_offset_corr+0xda>
    {
        /* Get the configuration from the page where self-offset
         * correction feature resides
         */
        rslt = bmi2_get_feat_config(self_off_corr_cfg.page, feat_config, dev);
 8006644:	7a7b      	ldrb	r3, [r7, #9]
 8006646:	f107 010c 	add.w	r1, r7, #12
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f7fd ff0a 	bl	8004466 <bmi2_get_feat_config>
 8006652:	4603      	mov	r3, r0
 8006654:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006656:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d13f      	bne.n	80066de <set_gyro_self_offset_corr+0xde>
        {
            /* Define the offset for enable/disable of self-offset correction */
            idx = self_off_corr_cfg.start_addr;
 800665e:	7abb      	ldrb	r3, [r7, #10]
 8006660:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_GYR_SELF_OFF_CORR_FEAT_EN, enable);
 8006662:	7fbb      	ldrb	r3, [r7, #30]
 8006664:	3320      	adds	r3, #32
 8006666:	443b      	add	r3, r7
 8006668:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800666c:	b25b      	sxtb	r3, r3
 800666e:	f023 0302 	bic.w	r3, r3, #2
 8006672:	b25a      	sxtb	r2, r3
 8006674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	b25b      	sxtb	r3, r3
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	b25b      	sxtb	r3, r3
 8006682:	4313      	orrs	r3, r2
 8006684:	b25a      	sxtb	r2, r3
 8006686:	7fbb      	ldrb	r3, [r7, #30]
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	3320      	adds	r3, #32
 800668c:	443b      	add	r3, r7
 800668e:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006692:	f107 010c 	add.w	r1, r7, #12
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2210      	movs	r2, #16
 800669a:	2030      	movs	r0, #48	@ 0x30
 800669c:	f7fd f9ab 	bl	80039f6 <bmi2_set_regs>
 80066a0:	4603      	mov	r3, r0
 80066a2:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 80066a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10c      	bne.n	80066c6 <set_gyro_self_offset_corr+0xc6>
 80066ac:	79fb      	ldrb	r3, [r7, #7]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d109      	bne.n	80066c6 <set_gyro_self_offset_corr+0xc6>
            {
                dev->sens_en_stat |= BMI2_GYRO_SELF_OFF_SEL;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80066b8:	4690      	mov	r8, r2
 80066ba:	f043 0904 	orr.w	r9, r3, #4
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 80066c4:	e00b      	b.n	80066de <set_gyro_self_offset_corr+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_GYRO_SELF_OFF_SEL;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80066cc:	4614      	mov	r4, r2
 80066ce:	f023 0504 	bic.w	r5, r3, #4
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 80066d8:	e001      	b.n	80066de <set_gyro_self_offset_corr+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80066da:	23f8      	movs	r3, #248	@ 0xf8
 80066dc:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80066de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080066ec <set_wrist_gesture>:

/*!
 * @brief This internal API enables the wrist gesture feature.
 */
static int8_t set_wrist_gesture(uint8_t enable, struct bmi2_dev *dev)
{
 80066ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80066f0:	b088      	sub	sp, #32
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	4603      	mov	r3, r0
 80066f6:	6039      	str	r1, [r7, #0]
 80066f8:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80066fa:	f107 030c 	add.w	r3, r7, #12
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	605a      	str	r2, [r3, #4]
 8006704:	609a      	str	r2, [r3, #8]
 8006706:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_cfg = { 0, 0, 0 };
 800670c:	2300      	movs	r3, #0
 800670e:	723b      	strb	r3, [r7, #8]
 8006710:	2300      	movs	r3, #0
 8006712:	727b      	strb	r3, [r7, #9]
 8006714:	2300      	movs	r3, #0
 8006716:	72bb      	strb	r3, [r7, #10]

    /* Search for wrist gesture and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_cfg, BMI2_WRIST_GESTURE, dev);
 8006718:	f107 0308 	add.w	r3, r7, #8
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	2113      	movs	r1, #19
 8006720:	4618      	mov	r0, r3
 8006722:	f7fd ff32 	bl	800458a <bmi2_extract_input_feat_config>
 8006726:	4603      	mov	r3, r0
 8006728:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 800672a:	7f7b      	ldrb	r3, [r7, #29]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d04a      	beq.n	80067c6 <set_wrist_gesture+0xda>
    {
        /* Get the configuration from the page where wrist gesture feature resides */
        rslt = bmi2_get_feat_config(wrist_gest_cfg.page, feat_config, dev);
 8006730:	7a7b      	ldrb	r3, [r7, #9]
 8006732:	f107 010c 	add.w	r1, r7, #12
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	4618      	mov	r0, r3
 800673a:	f7fd fe94 	bl	8004466 <bmi2_get_feat_config>
 800673e:	4603      	mov	r3, r0
 8006740:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8006742:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d13f      	bne.n	80067ca <set_wrist_gesture+0xde>
        {
            /* Define the offset for enable/disable of wrist gesture */
            idx = wrist_gest_cfg.start_addr;
 800674a:	7abb      	ldrb	r3, [r7, #10]
 800674c:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_WRIST_GEST_FEAT_EN, enable);
 800674e:	7fbb      	ldrb	r3, [r7, #30]
 8006750:	3320      	adds	r3, #32
 8006752:	443b      	add	r3, r7
 8006754:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006758:	b25b      	sxtb	r3, r3
 800675a:	f023 0320 	bic.w	r3, r3, #32
 800675e:	b25a      	sxtb	r2, r3
 8006760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006764:	015b      	lsls	r3, r3, #5
 8006766:	b25b      	sxtb	r3, r3
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	b25b      	sxtb	r3, r3
 800676e:	4313      	orrs	r3, r2
 8006770:	b25a      	sxtb	r2, r3
 8006772:	7fbb      	ldrb	r3, [r7, #30]
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	3320      	adds	r3, #32
 8006778:	443b      	add	r3, r7
 800677a:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800677e:	f107 010c 	add.w	r1, r7, #12
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2210      	movs	r2, #16
 8006786:	2030      	movs	r0, #48	@ 0x30
 8006788:	f7fd f935 	bl	80039f6 <bmi2_set_regs>
 800678c:	4603      	mov	r3, r0
 800678e:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 8006790:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10c      	bne.n	80067b2 <set_wrist_gesture+0xc6>
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d109      	bne.n	80067b2 <set_wrist_gesture+0xc6>
            {
                dev->sens_en_stat |= BMI2_WRIST_GEST_SEL;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80067a4:	f442 2800 	orr.w	r8, r2, #524288	@ 0x80000
 80067a8:	4699      	mov	r9, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 80067b0:	e00b      	b.n	80067ca <set_wrist_gesture+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_WRIST_GEST_SEL;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80067b8:	f422 2400 	bic.w	r4, r2, #524288	@ 0x80000
 80067bc:	461d      	mov	r5, r3
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 80067c4:	e001      	b.n	80067ca <set_wrist_gesture+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80067c6:	23f8      	movs	r3, #248	@ 0xf8
 80067c8:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80067ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080067d8 <set_wrist_wear_wake_up>:

/*!
 * @brief This internal API enables the wrist wear wake up feature.
 */
static int8_t set_wrist_wear_wake_up(uint8_t enable, struct bmi2_dev *dev)
{
 80067d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80067dc:	b088      	sub	sp, #32
 80067de:	af00      	add	r7, sp, #0
 80067e0:	4603      	mov	r3, r0
 80067e2:	6039      	str	r1, [r7, #0]
 80067e4:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80067e6:	f107 030c 	add.w	r3, r7, #12
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	609a      	str	r2, [r3, #8]
 80067f2:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake up */
    struct bmi2_feature_config wrist_wake_up_cfg = { 0, 0, 0 };
 80067f8:	2300      	movs	r3, #0
 80067fa:	723b      	strb	r3, [r7, #8]
 80067fc:	2300      	movs	r3, #0
 80067fe:	727b      	strb	r3, [r7, #9]
 8006800:	2300      	movs	r3, #0
 8006802:	72bb      	strb	r3, [r7, #10]

    /* Search for wrist wear wake up and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_cfg, BMI2_WRIST_WEAR_WAKE_UP, dev);
 8006804:	f107 0308 	add.w	r3, r7, #8
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	2114      	movs	r1, #20
 800680c:	4618      	mov	r0, r3
 800680e:	f7fd febc 	bl	800458a <bmi2_extract_input_feat_config>
 8006812:	4603      	mov	r3, r0
 8006814:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006816:	7f7b      	ldrb	r3, [r7, #29]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d04a      	beq.n	80068b2 <set_wrist_wear_wake_up+0xda>
    {
        /* Get the configuration from the page where wrist wear wake up
         * feature resides
         */
        rslt = bmi2_get_feat_config(wrist_wake_up_cfg.page, feat_config, dev);
 800681c:	7a7b      	ldrb	r3, [r7, #9]
 800681e:	f107 010c 	add.w	r1, r7, #12
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f7fd fe1e 	bl	8004466 <bmi2_get_feat_config>
 800682a:	4603      	mov	r3, r0
 800682c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800682e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d13f      	bne.n	80068b6 <set_wrist_wear_wake_up+0xde>
        {
            /* Define the offset for enable/disable of wrist wear wake up */
            idx = wrist_wake_up_cfg.start_addr;
 8006836:	7abb      	ldrb	r3, [r7, #10]
 8006838:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_WRIST_WEAR_WAKE_UP_FEAT_EN, enable);
 800683a:	7fbb      	ldrb	r3, [r7, #30]
 800683c:	3320      	adds	r3, #32
 800683e:	443b      	add	r3, r7
 8006840:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006844:	b25b      	sxtb	r3, r3
 8006846:	f023 0310 	bic.w	r3, r3, #16
 800684a:	b25a      	sxtb	r2, r3
 800684c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006850:	011b      	lsls	r3, r3, #4
 8006852:	b25b      	sxtb	r3, r3
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	b25b      	sxtb	r3, r3
 800685a:	4313      	orrs	r3, r2
 800685c:	b25a      	sxtb	r2, r3
 800685e:	7fbb      	ldrb	r3, [r7, #30]
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	3320      	adds	r3, #32
 8006864:	443b      	add	r3, r7
 8006866:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800686a:	f107 010c 	add.w	r1, r7, #12
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2210      	movs	r2, #16
 8006872:	2030      	movs	r0, #48	@ 0x30
 8006874:	f7fd f8bf 	bl	80039f6 <bmi2_set_regs>
 8006878:	4603      	mov	r3, r0
 800687a:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 800687c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10c      	bne.n	800689e <set_wrist_wear_wake_up+0xc6>
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d109      	bne.n	800689e <set_wrist_wear_wake_up+0xc6>
            {
                dev->sens_en_stat |= BMI2_WRIST_WEAR_WAKE_UP_SEL;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006890:	f442 1880 	orr.w	r8, r2, #1048576	@ 0x100000
 8006894:	4699      	mov	r9, r3
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 800689c:	e00b      	b.n	80068b6 <set_wrist_wear_wake_up+0xde>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_WRIST_WEAR_WAKE_UP_SEL;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80068a4:	f422 1480 	bic.w	r4, r2, #1048576	@ 0x100000
 80068a8:	461d      	mov	r5, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 80068b0:	e001      	b.n	80068b6 <set_wrist_wear_wake_up+0xde>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80068b2:	23f8      	movs	r3, #248	@ 0xf8
 80068b4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80068b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080068c4 <set_gyro_user_gain>:
/*!
 * @brief This internal API is used to enable/disable gyroscope user gain
 * feature.
 */
static int8_t set_gyro_user_gain(uint8_t enable, struct bmi2_dev *dev)
{
 80068c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80068c8:	b088      	sub	sp, #32
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	4603      	mov	r3, r0
 80068ce:	6039      	str	r1, [r7, #0]
 80068d0:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80068d2:	f107 030c 	add.w	r3, r7, #12
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	605a      	str	r2, [r3, #4]
 80068dc:	609a      	str	r2, [r3, #8]
 80068de:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for gyroscope user gain */
    struct bmi2_feature_config gyr_user_gain_cfg = { 0, 0, 0 };
 80068e4:	2300      	movs	r3, #0
 80068e6:	723b      	strb	r3, [r7, #8]
 80068e8:	2300      	movs	r3, #0
 80068ea:	727b      	strb	r3, [r7, #9]
 80068ec:	2300      	movs	r3, #0
 80068ee:	72bb      	strb	r3, [r7, #10]

    /* Search for user gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&gyr_user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 80068f0:	f107 0308 	add.w	r3, r7, #8
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	2109      	movs	r1, #9
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fd fe46 	bl	800458a <bmi2_extract_input_feat_config>
 80068fe:	4603      	mov	r3, r0
 8006900:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8006902:	7f7b      	ldrb	r3, [r7, #29]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d04b      	beq.n	80069a0 <set_gyro_user_gain+0xdc>
    {
        /* Get the configuration from the page where user gain feature resides */
        rslt = bmi2_get_feat_config(gyr_user_gain_cfg.page, feat_config, dev);
 8006908:	7a7b      	ldrb	r3, [r7, #9]
 800690a:	f107 010c 	add.w	r1, r7, #12
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f7fd fda8 	bl	8004466 <bmi2_get_feat_config>
 8006916:	4603      	mov	r3, r0
 8006918:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800691a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d140      	bne.n	80069a4 <set_gyro_user_gain+0xe0>
        {
            /* Define the offset for enable/disable of user gain */
            idx = gyr_user_gain_cfg.start_addr + BMI2_GYR_USER_GAIN_FEAT_EN_OFFSET;
 8006922:	7abb      	ldrb	r3, [r7, #10]
 8006924:	3305      	adds	r3, #5
 8006926:	77bb      	strb	r3, [r7, #30]

            /* Set the feature enable bit */
            feat_config[idx] = BMI2_SET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_FEAT_EN, enable);
 8006928:	7fbb      	ldrb	r3, [r7, #30]
 800692a:	3320      	adds	r3, #32
 800692c:	443b      	add	r3, r7
 800692e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006932:	b25b      	sxtb	r3, r3
 8006934:	f023 0308 	bic.w	r3, r3, #8
 8006938:	b25a      	sxtb	r2, r3
 800693a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	b25b      	sxtb	r3, r3
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	b25b      	sxtb	r3, r3
 8006948:	4313      	orrs	r3, r2
 800694a:	b25a      	sxtb	r2, r3
 800694c:	7fbb      	ldrb	r3, [r7, #30]
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	3320      	adds	r3, #32
 8006952:	443b      	add	r3, r7
 8006954:	f803 2c14 	strb.w	r2, [r3, #-20]

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006958:	f107 010c 	add.w	r1, r7, #12
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2210      	movs	r2, #16
 8006960:	2030      	movs	r0, #48	@ 0x30
 8006962:	f7fd f848 	bl	80039f6 <bmi2_set_regs>
 8006966:	4603      	mov	r3, r0
 8006968:	77fb      	strb	r3, [r7, #31]

            if ((rslt == BMI2_OK) && (enable == BMI2_ENABLE))
 800696a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10c      	bne.n	800698c <set_gyro_user_gain+0xc8>
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d109      	bne.n	800698c <set_gyro_user_gain+0xc8>
            {
                dev->sens_en_stat |= BMI2_GYRO_GAIN_UPDATE_SEL;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800697e:	f442 7800 	orr.w	r8, r2, #512	@ 0x200
 8006982:	4699      	mov	r9, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
 800698a:	e00b      	b.n	80069a4 <set_gyro_user_gain+0xe0>
            }
            else
            {
                dev->sens_en_stat &= ~BMI2_GYRO_GAIN_UPDATE_SEL;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006992:	f422 7400 	bic.w	r4, r2, #512	@ 0x200
 8006996:	461d      	mov	r5, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
 800699e:	e001      	b.n	80069a4 <set_gyro_user_gain+0xe0>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80069a0:	23f8      	movs	r3, #248	@ 0xf8
 80069a2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80069a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3720      	adds	r7, #32
 80069ac:	46bd      	mov	sp, r7
 80069ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080069b2 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_any_motion_config(const struct bmi2_any_motion_config *config, struct bmi2_dev *dev)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b08a      	sub	sp, #40	@ 0x28
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80069bc:	f107 030c 	add.w	r3, r7, #12
 80069c0:	2200      	movs	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	605a      	str	r2, [r3, #4]
 80069c6:	609a      	str	r2, [r3, #8]
 80069c8:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 80069d6:	2300      	movs	r3, #0
 80069d8:	723b      	strb	r3, [r7, #8]
 80069da:	2300      	movs	r3, #0
 80069dc:	727b      	strb	r3, [r7, #9]
 80069de:	2300      	movs	r3, #0
 80069e0:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80069e2:	f107 030c 	add.w	r3, r7, #12
 80069e6:	623b      	str	r3, [r7, #32]

    /* Search for any-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 80069e8:	f107 0308 	add.w	r3, r7, #8
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	2104      	movs	r1, #4
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fd fdca 	bl	800458a <bmi2_extract_input_feat_config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80069fa:	7ffb      	ldrb	r3, [r7, #31]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 80d8 	beq.w	8006bb2 <set_any_motion_config+0x200>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 8006a02:	7a7b      	ldrb	r3, [r7, #9]
 8006a04:	f107 010c 	add.w	r1, r7, #12
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fd fd2b 	bl	8004466 <bmi2_get_feat_config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8006a16:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f040 80cc 	bne.w	8006bb8 <set_any_motion_config+0x206>
        {
            /* Define the offset in bytes for any-motion select */
            idx = any_mot_config.start_addr;
 8006a20:	7abb      	ldrb	r3, [r7, #10]
 8006a22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8006a26:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 8006a30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	6a3a      	ldr	r2, [r7, #32]
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b21b      	sxth	r3, r3
 8006a3e:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006a42:	f023 031f 	bic.w	r3, r3, #31
 8006a46:	b21a      	sxth	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b21b      	sxth	r3, r3
 8006a4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a52:	b21b      	sxth	r3, r3
 8006a54:	4313      	orrs	r3, r2
 8006a56:	b219      	sxth	r1, r3
 8006a58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	6a3a      	ldr	r2, [r7, #32]
 8006a60:	4413      	add	r3, r2
 8006a62:	b28a      	uxth	r2, r1
 8006a64:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 8006a66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	6a3a      	ldr	r2, [r7, #32]
 8006a6e:	4413      	add	r3, r2
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b21b      	sxth	r3, r3
 8006a74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a78:	b21a      	sxth	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	889b      	ldrh	r3, [r3, #4]
 8006a7e:	b21b      	sxth	r3, r3
 8006a80:	035b      	lsls	r3, r3, #13
 8006a82:	b21b      	sxth	r3, r3
 8006a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a88:	b21b      	sxth	r3, r3
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	b219      	sxth	r1, r3
 8006a8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	6a3a      	ldr	r2, [r7, #32]
 8006a96:	4413      	add	r3, r2
 8006a98:	b28a      	uxth	r2, r1
 8006a9a:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 8006a9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	6a3a      	ldr	r2, [r7, #32]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b21b      	sxth	r3, r3
 8006aaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aae:	b21a      	sxth	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	88db      	ldrh	r3, [r3, #6]
 8006ab4:	b21b      	sxth	r3, r3
 8006ab6:	039b      	lsls	r3, r3, #14
 8006ab8:	b21b      	sxth	r3, r3
 8006aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006abe:	b21b      	sxth	r3, r3
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	b219      	sxth	r1, r3
 8006ac4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	6a3a      	ldr	r2, [r7, #32]
 8006acc:	4413      	add	r3, r2
 8006ace:	b28a      	uxth	r2, r1
 8006ad0:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 8006ad2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	6a3a      	ldr	r2, [r7, #32]
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b21b      	sxth	r3, r3
 8006ae0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006ae4:	b21a      	sxth	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	891b      	ldrh	r3, [r3, #8]
 8006aea:	b21b      	sxth	r3, r3
 8006aec:	03db      	lsls	r3, r3, #15
 8006aee:	b21b      	sxth	r3, r3
 8006af0:	4313      	orrs	r3, r2
 8006af2:	b219      	sxth	r1, r3
 8006af4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	6a3a      	ldr	r2, [r7, #32]
 8006afc:	4413      	add	r3, r2
 8006afe:	b28a      	uxth	r2, r1
 8006b00:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 8006b02:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b06:	3301      	adds	r3, #1
 8006b08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 8006b0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	6a3a      	ldr	r2, [r7, #32]
 8006b14:	4413      	add	r3, r2
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b21b      	sxth	r3, r3
 8006b1a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b1e:	f023 0307 	bic.w	r3, r3, #7
 8006b22:	b21a      	sxth	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	885b      	ldrh	r3, [r3, #2]
 8006b28:	b21b      	sxth	r3, r3
 8006b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b2e:	b21b      	sxth	r3, r3
 8006b30:	4313      	orrs	r3, r2
 8006b32:	b219      	sxth	r1, r3
 8006b34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	6a3a      	ldr	r2, [r7, #32]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	b28a      	uxth	r2, r1
 8006b40:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8006b42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b46:	3301      	adds	r3, #1
 8006b48:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - any_mot_config.start_addr;
 8006b4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	7abb      	ldrb	r3, [r7, #10]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006b62:	e015      	b.n	8006b90 <set_any_motion_config+0x1de>
            {
                feat_config[any_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 8006b64:	7abb      	ldrb	r3, [r7, #10]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b6c:	4413      	add	r3, r2
 8006b6e:	6a3a      	ldr	r2, [r7, #32]
 8006b70:	441a      	add	r2, r3
                feat_config[any_mot_config.start_addr +
 8006b72:	7abb      	ldrb	r3, [r7, #10]
 8006b74:	4619      	mov	r1, r3
 8006b76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b7a:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 8006b7c:	7812      	ldrb	r2, [r2, #0]
 8006b7e:	3328      	adds	r3, #40	@ 0x28
 8006b80:	443b      	add	r3, r7
 8006b82:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8006b86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006b90:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006b94:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d3e3      	bcc.n	8006b64 <set_any_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006b9c:	f107 010c 	add.w	r1, r7, #12
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2210      	movs	r2, #16
 8006ba4:	2030      	movs	r0, #48	@ 0x30
 8006ba6:	f7fc ff26 	bl	80039f6 <bmi2_set_regs>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006bb0:	e002      	b.n	8006bb8 <set_any_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006bb2:	23f8      	movs	r3, #248	@ 0xf8
 8006bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8006bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3728      	adds	r7, #40	@ 0x28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_no_motion_config(const struct bmi2_no_motion_config *config, struct bmi2_dev *dev)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	@ 0x28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006bce:	f107 030c 	add.w	r3, r7, #12
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	605a      	str	r2, [r3, #4]
 8006bd8:	609a      	str	r2, [r3, #8]
 8006bda:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 8006be8:	2300      	movs	r3, #0
 8006bea:	723b      	strb	r3, [r7, #8]
 8006bec:	2300      	movs	r3, #0
 8006bee:	727b      	strb	r3, [r7, #9]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8006bf4:	f107 030c 	add.w	r3, r7, #12
 8006bf8:	623b      	str	r3, [r7, #32]

    /* Search for no-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 8006bfa:	f107 0308 	add.w	r3, r7, #8
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	2105      	movs	r1, #5
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fd fcc1 	bl	800458a <bmi2_extract_input_feat_config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8006c0c:	7ffb      	ldrb	r3, [r7, #31]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80d8 	beq.w	8006dc4 <set_no_motion_config+0x200>
    {
        /* Get the configuration from the page where no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 8006c14:	7a7b      	ldrb	r3, [r7, #9]
 8006c16:	f107 010c 	add.w	r1, r7, #12
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fd fc22 	bl	8004466 <bmi2_get_feat_config>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8006c28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f040 80cc 	bne.w	8006dca <set_no_motion_config+0x206>
        {
            /* Define the offset in bytes for no-motion select */
            idx = no_mot_config.start_addr;
 8006c32:	7abb      	ldrb	r3, [r7, #10]
 8006c34:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8006c38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c3c:	085b      	lsrs	r3, r3, #1
 8006c3e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 8006c42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	b21b      	sxth	r3, r3
 8006c50:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006c54:	f023 031f 	bic.w	r3, r3, #31
 8006c58:	b21a      	sxth	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b21b      	sxth	r3, r3
 8006c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c64:	b21b      	sxth	r3, r3
 8006c66:	4313      	orrs	r3, r2
 8006c68:	b219      	sxth	r1, r3
 8006c6a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	6a3a      	ldr	r2, [r7, #32]
 8006c72:	4413      	add	r3, r2
 8006c74:	b28a      	uxth	r2, r1
 8006c76:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 8006c78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	6a3a      	ldr	r2, [r7, #32]
 8006c80:	4413      	add	r3, r2
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b21b      	sxth	r3, r3
 8006c86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c8a:	b21a      	sxth	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	889b      	ldrh	r3, [r3, #4]
 8006c90:	b21b      	sxth	r3, r3
 8006c92:	035b      	lsls	r3, r3, #13
 8006c94:	b21b      	sxth	r3, r3
 8006c96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c9a:	b21b      	sxth	r3, r3
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	b219      	sxth	r1, r3
 8006ca0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	6a3a      	ldr	r2, [r7, #32]
 8006ca8:	4413      	add	r3, r2
 8006caa:	b28a      	uxth	r2, r1
 8006cac:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 8006cae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	6a3a      	ldr	r2, [r7, #32]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b21b      	sxth	r3, r3
 8006cbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cc0:	b21a      	sxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	88db      	ldrh	r3, [r3, #6]
 8006cc6:	b21b      	sxth	r3, r3
 8006cc8:	039b      	lsls	r3, r3, #14
 8006cca:	b21b      	sxth	r3, r3
 8006ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cd0:	b21b      	sxth	r3, r3
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	b219      	sxth	r1, r3
 8006cd6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	6a3a      	ldr	r2, [r7, #32]
 8006cde:	4413      	add	r3, r2
 8006ce0:	b28a      	uxth	r2, r1
 8006ce2:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 8006ce4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	6a3a      	ldr	r2, [r7, #32]
 8006cec:	4413      	add	r3, r2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b21b      	sxth	r3, r3
 8006cf2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006cf6:	b21a      	sxth	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	891b      	ldrh	r3, [r3, #8]
 8006cfc:	b21b      	sxth	r3, r3
 8006cfe:	03db      	lsls	r3, r3, #15
 8006d00:	b21b      	sxth	r3, r3
 8006d02:	4313      	orrs	r3, r2
 8006d04:	b219      	sxth	r1, r3
 8006d06:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	6a3a      	ldr	r2, [r7, #32]
 8006d0e:	4413      	add	r3, r2
 8006d10:	b28a      	uxth	r2, r1
 8006d12:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 8006d14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 8006d1e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	6a3a      	ldr	r2, [r7, #32]
 8006d26:	4413      	add	r3, r2
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b21b      	sxth	r3, r3
 8006d2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d30:	f023 0307 	bic.w	r3, r3, #7
 8006d34:	b21a      	sxth	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	885b      	ldrh	r3, [r3, #2]
 8006d3a:	b21b      	sxth	r3, r3
 8006d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d40:	b21b      	sxth	r3, r3
 8006d42:	4313      	orrs	r3, r2
 8006d44:	b219      	sxth	r1, r3
 8006d46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	6a3a      	ldr	r2, [r7, #32]
 8006d4e:	4413      	add	r3, r2
 8006d50:	b28a      	uxth	r2, r1
 8006d52:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8006d54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d58:	3301      	adds	r3, #1
 8006d5a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - no_mot_config.start_addr;
 8006d5e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	7abb      	ldrb	r3, [r7, #10]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006d74:	e015      	b.n	8006da2 <set_no_motion_config+0x1de>
            {
                feat_config[no_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 8006d76:	7abb      	ldrb	r3, [r7, #10]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d7e:	4413      	add	r3, r2
 8006d80:	6a3a      	ldr	r2, [r7, #32]
 8006d82:	441a      	add	r2, r3
                feat_config[no_mot_config.start_addr +
 8006d84:	7abb      	ldrb	r3, [r7, #10]
 8006d86:	4619      	mov	r1, r3
 8006d88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d8c:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	3328      	adds	r3, #40	@ 0x28
 8006d92:	443b      	add	r3, r7
 8006d94:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8006d98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006da2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006da6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d3e3      	bcc.n	8006d76 <set_no_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006dae:	f107 010c 	add.w	r1, r7, #12
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2210      	movs	r2, #16
 8006db6:	2030      	movs	r0, #48	@ 0x30
 8006db8:	f7fc fe1d 	bl	80039f6 <bmi2_set_regs>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006dc2:	e002      	b.n	8006dca <set_no_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006dc4:	23f8      	movs	r3, #248	@ 0xf8
 8006dc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8006dca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3728      	adds	r7, #40	@ 0x28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block-size,
 * output-configuration and other parameters.
 */
static int8_t set_sig_motion_config(const struct bmi2_sig_motion_config *config, struct bmi2_dev *dev)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b08a      	sub	sp, #40	@ 0x28
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006de0:	f107 030c 	add.w	r3, r7, #12
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	605a      	str	r2, [r3, #4]
 8006dea:	609a      	str	r2, [r3, #8]
 8006dec:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	723b      	strb	r3, [r7, #8]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	727b      	strb	r3, [r7, #9]
 8006e02:	2300      	movs	r3, #0
 8006e04:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8006e06:	f107 030c 	add.w	r3, r7, #12
 8006e0a:	623b      	str	r3, [r7, #32]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 8006e0c:	f107 0308 	add.w	r3, r7, #8
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	2103      	movs	r1, #3
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fd fbb8 	bl	800458a <bmi2_extract_input_feat_config>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8006e1e:	7ffb      	ldrb	r3, [r7, #31]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d055      	beq.n	8006ed0 <set_sig_motion_config+0xfa>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 8006e24:	7a7b      	ldrb	r3, [r7, #9]
 8006e26:	f107 010c 	add.w	r1, r7, #12
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fd fb1a 	bl	8004466 <bmi2_get_feat_config>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8006e38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d14a      	bne.n	8006ed6 <set_sig_motion_config+0x100>
        {
            /* Define the offset in bytes for sig-motion select */
            idx = sig_mot_config.start_addr;
 8006e40:	7abb      	ldrb	r3, [r7, #10]
 8006e42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8006e46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set parameter 1 */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_SIG_MOT_PARAM_1, config->block_size);
 8006e50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	6a3a      	ldr	r2, [r7, #32]
 8006e58:	4413      	add	r3, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	8812      	ldrh	r2, [r2, #0]
 8006e5e:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8006e60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e64:	3301      	adds	r3, #1
 8006e66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - sig_mot_config.start_addr;
 8006e6a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	7abb      	ldrb	r3, [r7, #10]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006e80:	e015      	b.n	8006eae <set_sig_motion_config+0xd8>
            {
                feat_config[sig_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 8006e82:	7abb      	ldrb	r3, [r7, #10]
 8006e84:	461a      	mov	r2, r3
 8006e86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e8a:	4413      	add	r3, r2
 8006e8c:	6a3a      	ldr	r2, [r7, #32]
 8006e8e:	441a      	add	r2, r3
                feat_config[sig_mot_config.start_addr +
 8006e90:	7abb      	ldrb	r3, [r7, #10]
 8006e92:	4619      	mov	r1, r3
 8006e94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e98:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 8006e9a:	7812      	ldrb	r2, [r2, #0]
 8006e9c:	3328      	adds	r3, #40	@ 0x28
 8006e9e:	443b      	add	r3, r7
 8006ea0:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8006ea4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006eae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006eb2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d3e3      	bcc.n	8006e82 <set_sig_motion_config+0xac>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8006eba:	f107 010c 	add.w	r1, r7, #12
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2210      	movs	r2, #16
 8006ec2:	2030      	movs	r0, #48	@ 0x30
 8006ec4:	f7fc fd97 	bl	80039f6 <bmi2_set_regs>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006ece:	e002      	b.n	8006ed6 <set_sig_motion_config+0x100>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8006ed0:	23f8      	movs	r3, #248	@ 0xf8
 8006ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8006ed6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3728      	adds	r7, #40	@ 0x28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <set_step_count_params_config>:

/*!
 * @brief This internal API sets step counter parameter configurations.
 */
static int8_t set_step_count_params_config(const uint16_t *step_count_params, struct bmi2_dev *dev)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b08c      	sub	sp, #48	@ 0x30
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8006ef2:	f107 030c 	add.w	r3, r7, #12
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	605a      	str	r2, [r3, #4]
 8006efc:	609a      	str	r2, [r3, #8]
 8006efe:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t index = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter parameters */
    struct bmi2_feature_config step_params_config = { 0, 0, 0 };
 8006f06:	2300      	movs	r3, #0
 8006f08:	723b      	strb	r3, [r7, #8]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	727b      	strb	r3, [r7, #9]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	72bb      	strb	r3, [r7, #10]

    /* Variable to define start address of the parameters */
    uint8_t start_addr;

    /* Variable to define number of bytes */
    uint8_t n_bytes = (BMI2_STEP_CNT_N_PARAMS * 2);
 8006f12:	2332      	movs	r3, #50	@ 0x32
 8006f14:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    /* Variable to store number of pages */
    uint8_t n_pages = (n_bytes / 16);
 8006f18:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Variable to define the remaining bytes to be read */
    uint8_t remain_len;

    /* Variable to define the maximum words(16 bytes or 8 words) to be read in a page */
    uint8_t max_len = 8;
 8006f22:	2308      	movs	r3, #8
 8006f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    /* Variable index bytes in a page */
    uint8_t page_byte_idx;

    /* Variable to index the parameters */
    uint8_t param_idx = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8006f2e:	f107 030c 	add.w	r3, r7, #12
 8006f32:	623b      	str	r3, [r7, #32]

    /* Search for step counter parameter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_params_config, BMI2_STEP_COUNTER_PARAMS, dev);
 8006f34:	f107 0308 	add.w	r3, r7, #8
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	211d      	movs	r1, #29
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fd fb24 	bl	800458a <bmi2_extract_input_feat_config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8006f46:	7ffb      	ldrb	r3, [r7, #31]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 8099 	beq.w	8007080 <set_step_count_params_config+0x19e>
    {
        /* Get the start page for the step counter parameters */
        start_page = step_params_config.page;
 8006f4e:	7a7b      	ldrb	r3, [r7, #9]
 8006f50:	77bb      	strb	r3, [r7, #30]

        /* Get the end page for the step counter parameters */
        end_page = start_page + n_pages;
 8006f52:	7fba      	ldrb	r2, [r7, #30]
 8006f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f58:	4413      	add	r3, r2
 8006f5a:	777b      	strb	r3, [r7, #29]

        /* Get the start address for the step counter parameters */
        start_addr = step_params_config.start_addr;
 8006f5c:	7abb      	ldrb	r3, [r7, #10]
 8006f5e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Get the remaining length of bytes to be read */
        remain_len = (uint8_t)((n_bytes - (n_pages * 16)) + start_addr);
 8006f62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006f76:	4413      	add	r3, r2
 8006f78:	773b      	strb	r3, [r7, #28]
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 8006f7a:	7fbb      	ldrb	r3, [r7, #30]
 8006f7c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8006f80:	e078      	b.n	8007074 <set_step_count_params_config+0x192>
        {
            /* Get the configuration from the respective page */
            rslt = bmi2_get_feat_config(page_idx, feat_config, dev);
 8006f82:	f107 010c 	add.w	r1, r7, #12
 8006f86:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fd fa6a 	bl	8004466 <bmi2_get_feat_config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMI2_OK)
 8006f98:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d164      	bne.n	800706a <set_step_count_params_config+0x188>
            {
                /* Start from address 0x00 when switched to next page */
                if (page_idx > start_page)
 8006fa0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8006fa4:	7fbb      	ldrb	r3, [r7, #30]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d902      	bls.n	8006fb0 <set_step_count_params_config+0xce>
                {
                    start_addr = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                /* Remaining number of words to be read in the page  */
                if (page_idx == end_page)
 8006fb0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8006fb4:	7f7b      	ldrb	r3, [r7, #29]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d103      	bne.n	8006fc2 <set_step_count_params_config+0xe0>
                {
                    max_len = (remain_len / 2);
 8006fba:	7f3b      	ldrb	r3, [r7, #28]
 8006fbc:	085b      	lsrs	r3, r3, #1
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* Get offset in words since all the features are set in words length */
                page_byte_idx = start_addr / 2;
 8006fc2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                for (; page_byte_idx < max_len;)
 8006fcc:	e015      	b.n	8006ffa <set_step_count_params_config+0x118>
                {
                    /* Set parameters 1 to 25 */
                    *(data_p + page_byte_idx) = BMI2_SET_BIT_POS0(*(data_p + page_byte_idx),
 8006fce:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	441a      	add	r2, r3
 8006fd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	6a39      	ldr	r1, [r7, #32]
 8006fe0:	440b      	add	r3, r1
 8006fe2:	8812      	ldrh	r2, [r2, #0]
 8006fe4:	801a      	strh	r2, [r3, #0]
                                                                  BMI2_STEP_COUNT_PARAMS,
                                                                  step_count_params[param_idx]);

                    /* Increment offset by 1 word to set to the next parameter */
                    page_byte_idx++;
 8006fe6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006fea:	3301      	adds	r3, #1
 8006fec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                    /* Increment to next parameter */
                    param_idx++;
 8006ff0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                for (; page_byte_idx < max_len;)
 8006ffa:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8006ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007002:	429a      	cmp	r2, r3
 8007004:	d3e3      	bcc.n	8006fce <set_step_count_params_config+0xec>
                }

                /* Get total length in bytes to copy from local pointer to the array */
                page_byte_idx = (uint8_t)(page_byte_idx * 2) - step_params_config.start_addr;
 8007006:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	b2da      	uxtb	r2, r3
 800700e:	7abb      	ldrb	r3, [r7, #10]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                /* Copy the bytes to be set back to the array */
                for (index = 0; index < page_byte_idx; index++)
 8007016:	2300      	movs	r3, #0
 8007018:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800701c:	e015      	b.n	800704a <set_step_count_params_config+0x168>
                {
                    feat_config[step_params_config.start_addr +
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 800701e:	7abb      	ldrb	r3, [r7, #10]
 8007020:	461a      	mov	r2, r3
 8007022:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007026:	4413      	add	r3, r2
 8007028:	6a3a      	ldr	r2, [r7, #32]
 800702a:	441a      	add	r2, r3
                    feat_config[step_params_config.start_addr +
 800702c:	7abb      	ldrb	r3, [r7, #10]
 800702e:	4619      	mov	r1, r3
 8007030:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007034:	440b      	add	r3, r1
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	3330      	adds	r3, #48	@ 0x30
 800703a:	443b      	add	r3, r7
 800703c:	f803 2c24 	strb.w	r2, [r3, #-36]
                for (index = 0; index < page_byte_idx; index++)
 8007040:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007044:	3301      	adds	r3, #1
 8007046:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800704a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800704e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007052:	429a      	cmp	r2, r3
 8007054:	d3e3      	bcc.n	800701e <set_step_count_params_config+0x13c>
                }

                /* Set the configuration back to the page */
                rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8007056:	f107 010c 	add.w	r1, r7, #12
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2210      	movs	r2, #16
 800705e:	2030      	movs	r0, #48	@ 0x30
 8007060:	f7fc fcc9 	bl	80039f6 <bmi2_set_regs>
 8007064:	4603      	mov	r3, r0
 8007066:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 800706a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800706e:	3301      	adds	r3, #1
 8007070:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8007074:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007078:	7f7b      	ldrb	r3, [r7, #29]
 800707a:	429a      	cmp	r2, r3
 800707c:	d981      	bls.n	8006f82 <set_step_count_params_config+0xa0>
 800707e:	e002      	b.n	8007086 <set_step_count_params_config+0x1a4>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007080:	23f8      	movs	r3, #248	@ 0xf8
 8007082:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8007086:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800708a:	4618      	mov	r0, r3
 800708c:	3730      	adds	r7, #48	@ 0x30
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <set_step_config>:

/* @brief This internal API sets step counter configurations like water-mark
 * level, reset-counter and output-configuration step detector and activity.
 */
static int8_t set_step_config(const struct bmi2_step_config *config, struct bmi2_dev *dev)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b08a      	sub	sp, #40	@ 0x28
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800709c:	f107 030c 	add.w	r3, r7, #12
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	605a      	str	r2, [r3, #4]
 80070a6:	609a      	str	r2, [r3, #8]
 80070a8:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter 4 */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 80070b6:	2300      	movs	r3, #0
 80070b8:	723b      	strb	r3, [r7, #8]
 80070ba:	2300      	movs	r3, #0
 80070bc:	727b      	strb	r3, [r7, #9]
 80070be:	2300      	movs	r3, #0
 80070c0:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80070c2:	f107 030c 	add.w	r3, r7, #12
 80070c6:	623b      	str	r3, [r7, #32]

    /* Search for step counter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 80070c8:	f107 0308 	add.w	r3, r7, #8
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	2107      	movs	r1, #7
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fd fa5a 	bl	800458a <bmi2_extract_input_feat_config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80070da:	7ffb      	ldrb	r3, [r7, #31]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8084 	beq.w	80071ea <set_step_config+0x158>
    {
        /* Get the configuration from the page where step counter resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 80070e2:	7a7b      	ldrb	r3, [r7, #9]
 80070e4:	f107 010c 	add.w	r1, r7, #12
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fd f9bb 	bl	8004466 <bmi2_get_feat_config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80070f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d178      	bne.n	80071f0 <set_step_config+0x15e>
        {
            /* Define the offset in bytes */
            idx = step_count_config.start_addr;
 80070fe:	7abb      	ldrb	r3, [r7, #10]
 8007100:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8007104:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007108:	085b      	lsrs	r3, r3, #1
 800710a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set water-mark level */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_STEP_COUNT_WM_LEVEL, config->watermark_level);
 800710e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	6a3a      	ldr	r2, [r7, #32]
 8007116:	4413      	add	r3, r2
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b21b      	sxth	r3, r3
 800711c:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007120:	f023 0303 	bic.w	r3, r3, #3
 8007124:	b21a      	sxth	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b21b      	sxth	r3, r3
 800712c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007130:	b21b      	sxth	r3, r3
 8007132:	4313      	orrs	r3, r2
 8007134:	b219      	sxth	r1, r3
 8007136:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	6a3a      	ldr	r2, [r7, #32]
 800713e:	4413      	add	r3, r2
 8007140:	b28a      	uxth	r2, r1
 8007142:	801a      	strh	r2, [r3, #0]

            /* Set reset-counter */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_STEP_COUNT_RST_CNT, config->reset_counter);
 8007144:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	6a3a      	ldr	r2, [r7, #32]
 800714c:	4413      	add	r3, r2
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b21b      	sxth	r3, r3
 8007152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007156:	b21a      	sxth	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	885b      	ldrh	r3, [r3, #2]
 800715c:	b21b      	sxth	r3, r3
 800715e:	029b      	lsls	r3, r3, #10
 8007160:	b21b      	sxth	r3, r3
 8007162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007166:	b21b      	sxth	r3, r3
 8007168:	4313      	orrs	r3, r2
 800716a:	b219      	sxth	r1, r3
 800716c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	6a3a      	ldr	r2, [r7, #32]
 8007174:	4413      	add	r3, r2
 8007176:	b28a      	uxth	r2, r1
 8007178:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word  to set output
             * configuration of step detector and step activity
             */
            idx++;
 800717a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800717e:	3301      	adds	r3, #1
 8007180:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - step_count_config.start_addr;
 8007184:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	b2da      	uxtb	r2, r3
 800718c:	7abb      	ldrb	r3, [r7, #10]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8007194:	2300      	movs	r3, #0
 8007196:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800719a:	e015      	b.n	80071c8 <set_step_config+0x136>
            {
                feat_config[step_count_config.start_addr +
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 800719c:	7abb      	ldrb	r3, [r7, #10]
 800719e:	461a      	mov	r2, r3
 80071a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071a4:	4413      	add	r3, r2
 80071a6:	6a3a      	ldr	r2, [r7, #32]
 80071a8:	441a      	add	r2, r3
                feat_config[step_count_config.start_addr +
 80071aa:	7abb      	ldrb	r3, [r7, #10]
 80071ac:	4619      	mov	r1, r3
 80071ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071b2:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 80071b4:	7812      	ldrb	r2, [r2, #0]
 80071b6:	3328      	adds	r3, #40	@ 0x28
 80071b8:	443b      	add	r3, r7
 80071ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 80071be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071c2:	3301      	adds	r3, #1
 80071c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80071c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80071cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d3e3      	bcc.n	800719c <set_step_config+0x10a>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80071d4:	f107 010c 	add.w	r1, r7, #12
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2210      	movs	r2, #16
 80071dc:	2030      	movs	r0, #48	@ 0x30
 80071de:	f7fc fc0a 	bl	80039f6 <bmi2_set_regs>
 80071e2:	4603      	mov	r3, r0
 80071e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80071e8:	e002      	b.n	80071f0 <set_step_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80071ea:	23f8      	movs	r3, #248	@ 0xf8
 80071ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80071f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3728      	adds	r7, #40	@ 0x28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <set_wrist_gest_config>:
/*!
 * @brief This internal API sets wrist gesture configurations like wearable-arm,
 * and output-configuration.
 */
static int8_t set_wrist_gest_config(const struct bmi2_wrist_gest_config *config, struct bmi2_dev *dev)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08a      	sub	sp, #40	@ 0x28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007206:	f107 030c 	add.w	r3, r7, #12
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	605a      	str	r2, [r3, #4]
 8007210:	609a      	str	r2, [r3, #8]
 8007212:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_config = { 0, 0, 0 };
 8007220:	2300      	movs	r3, #0
 8007222:	723b      	strb	r3, [r7, #8]
 8007224:	2300      	movs	r3, #0
 8007226:	727b      	strb	r3, [r7, #9]
 8007228:	2300      	movs	r3, #0
 800722a:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 800722c:	f107 030c 	add.w	r3, r7, #12
 8007230:	623b      	str	r3, [r7, #32]

    /* Search for wrist gesture feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_config, BMI2_WRIST_GESTURE, dev);
 8007232:	f107 0308 	add.w	r3, r7, #8
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	2113      	movs	r1, #19
 800723a:	4618      	mov	r0, r3
 800723c:	f7fd f9a5 	bl	800458a <bmi2_extract_input_feat_config>
 8007240:	4603      	mov	r3, r0
 8007242:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007244:	7ffb      	ldrb	r3, [r7, #31]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 8091 	beq.w	800736e <set_wrist_gest_config+0x172>
    {
        /* Get the configuration from the page where wrist gesture feature resides */
        rslt = bmi2_get_feat_config(wrist_gest_config.page, feat_config, dev);
 800724c:	7a7b      	ldrb	r3, [r7, #9]
 800724e:	f107 010c 	add.w	r1, r7, #12
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f7fd f906 	bl	8004466 <bmi2_get_feat_config>
 800725a:	4603      	mov	r3, r0
 800725c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007260:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007264:	2b00      	cmp	r3, #0
 8007266:	f040 8085 	bne.w	8007374 <set_wrist_gest_config+0x178>
        {
            /* Define the offset in bytes for gesture select */
            idx = wrist_gest_config.start_addr;
 800726a:	7abb      	ldrb	r3, [r7, #10]
 800726c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8007270:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007274:	085b      	lsrs	r3, r3, #1
 8007276:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set wearable arm */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_WRIST_GEST_WEAR_ARM, config->wearable_arm);
 800727a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	6a3a      	ldr	r2, [r7, #32]
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	b21b      	sxth	r3, r3
 8007288:	f023 0310 	bic.w	r3, r3, #16
 800728c:	b21a      	sxth	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b21b      	sxth	r3, r3
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	b21b      	sxth	r3, r3
 8007298:	f003 0310 	and.w	r3, r3, #16
 800729c:	b21b      	sxth	r3, r3
 800729e:	4313      	orrs	r3, r2
 80072a0:	b219      	sxth	r1, r3
 80072a2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	6a3a      	ldr	r2, [r7, #32]
 80072aa:	4413      	add	r3, r2
 80072ac:	b28a      	uxth	r2, r1
 80072ae:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set minimum tilt angle (min_flick_peak) */
            idx++;
 80072b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072b4:	3301      	adds	r3, #1
 80072b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_peak;
 80072ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	6a3a      	ldr	r2, [r7, #32]
 80072c2:	4413      	add	r3, r2
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	8852      	ldrh	r2, [r2, #2]
 80072c8:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_flick_samples */
            idx++;
 80072ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072ce:	3301      	adds	r3, #1
 80072d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_samples;
 80072d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	6a3a      	ldr	r2, [r7, #32]
 80072dc:	4413      	add	r3, r2
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	8892      	ldrh	r2, [r2, #4]
 80072e2:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max time within gesture moment has to be completed */
            idx++;
 80072e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072e8:	3301      	adds	r3, #1
 80072ea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_duration;
 80072ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	6a3a      	ldr	r2, [r7, #32]
 80072f6:	4413      	add	r3, r2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	88d2      	ldrh	r2, [r2, #6]
 80072fc:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80072fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007302:	3301      	adds	r3, #1
 8007304:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_gest_config.start_addr;
 8007308:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	b2da      	uxtb	r2, r3
 8007310:	7abb      	ldrb	r3, [r7, #10]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8007318:	2300      	movs	r3, #0
 800731a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800731e:	e015      	b.n	800734c <set_wrist_gest_config+0x150>
            {
                feat_config[wrist_gest_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 8007320:	7abb      	ldrb	r3, [r7, #10]
 8007322:	461a      	mov	r2, r3
 8007324:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007328:	4413      	add	r3, r2
 800732a:	6a3a      	ldr	r2, [r7, #32]
 800732c:	441a      	add	r2, r3
                feat_config[wrist_gest_config.start_addr +
 800732e:	7abb      	ldrb	r3, [r7, #10]
 8007330:	4619      	mov	r1, r3
 8007332:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007336:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 8007338:	7812      	ldrb	r2, [r2, #0]
 800733a:	3328      	adds	r3, #40	@ 0x28
 800733c:	443b      	add	r3, r7
 800733e:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8007342:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007346:	3301      	adds	r3, #1
 8007348:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800734c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007350:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007354:	429a      	cmp	r2, r3
 8007356:	d3e3      	bcc.n	8007320 <set_wrist_gest_config+0x124>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8007358:	f107 010c 	add.w	r1, r7, #12
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2210      	movs	r2, #16
 8007360:	2030      	movs	r0, #48	@ 0x30
 8007362:	f7fc fb48 	bl	80039f6 <bmi2_set_regs>
 8007366:	4603      	mov	r3, r0
 8007368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800736c:	e002      	b.n	8007374 <set_wrist_gest_config+0x178>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800736e:	23f8      	movs	r3, #248	@ 0xf8
 8007370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007374:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007378:	4618      	mov	r0, r3
 800737a:	3728      	adds	r7, #40	@ 0x28
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <set_wrist_wear_wake_up_config>:
/*!
 * @brief This internal API sets wrist wear wake-up configurations like
 * output-configuration.
 */
static int8_t set_wrist_wear_wake_up_config(const struct bmi2_wrist_wear_wake_up_config *config, struct bmi2_dev *dev)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	@ 0x28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800738a:	f107 030c 	add.w	r3, r7, #12
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	605a      	str	r2, [r3, #4]
 8007394:	609a      	str	r2, [r3, #8]
 8007396:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake-up */
    struct bmi2_feature_config wrist_wake_up_config = { 0, 0, 0 };
 80073a4:	2300      	movs	r3, #0
 80073a6:	723b      	strb	r3, [r7, #8]
 80073a8:	2300      	movs	r3, #0
 80073aa:	727b      	strb	r3, [r7, #9]
 80073ac:	2300      	movs	r3, #0
 80073ae:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80073b0:	f107 030c 	add.w	r3, r7, #12
 80073b4:	623b      	str	r3, [r7, #32]

    /* Search for wrist wear wake-up feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_config, BMI2_WRIST_WEAR_WAKE_UP, dev);
 80073b6:	f107 0308 	add.w	r3, r7, #8
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	2114      	movs	r1, #20
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fd f8e3 	bl	800458a <bmi2_extract_input_feat_config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80073c8:	7ffb      	ldrb	r3, [r7, #31]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 809d 	beq.w	800750a <set_wrist_wear_wake_up_config+0x18a>
    {
        /* Get the configuration from the page where wrist wear wake-up feature resides */
        rslt = bmi2_get_feat_config(wrist_wake_up_config.page, feat_config, dev);
 80073d0:	7a7b      	ldrb	r3, [r7, #9]
 80073d2:	f107 010c 	add.w	r1, r7, #12
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fd f844 	bl	8004466 <bmi2_get_feat_config>
 80073de:	4603      	mov	r3, r0
 80073e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80073e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f040 8091 	bne.w	8007510 <set_wrist_wear_wake_up_config+0x190>
        {
            /* Define the offset in bytes for wrist wear wake-up select */
            idx = wrist_wake_up_config.start_addr;
 80073ee:	7abb      	ldrb	r3, [r7, #10]
 80073f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80073f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80073f8:	085b      	lsrs	r3, r3, #1
 80073fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Increment offset by 1 more word to set min_angle_focus */
            idx++;
 80073fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007402:	3301      	adds	r3, #1
 8007404:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            *(data_p + idx) = config->min_angle_focus;
 8007408:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	6a3a      	ldr	r2, [r7, #32]
 8007410:	4413      	add	r3, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	8812      	ldrh	r2, [r2, #0]
 8007416:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_angle_nonfocus */
            idx++;
 8007418:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800741c:	3301      	adds	r3, #1
 800741e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_angle_nonfocus;
 8007422:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	6a3a      	ldr	r2, [r7, #32]
 800742a:	4413      	add	r3, r2
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	8852      	ldrh	r2, [r2, #2]
 8007430:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_lr */
            idx++;
 8007432:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007436:	3301      	adds	r3, #1
 8007438:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_lr;
 800743c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	6a3a      	ldr	r2, [r7, #32]
 8007444:	4413      	add	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	8892      	ldrh	r2, [r2, #4]
 800744a:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_ll */
            idx++;
 800744c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007450:	3301      	adds	r3, #1
 8007452:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_ll;
 8007456:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	6a3a      	ldr	r2, [r7, #32]
 800745e:	4413      	add	r3, r2
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	88d2      	ldrh	r2, [r2, #6]
 8007464:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pd */
            idx++;
 8007466:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800746a:	3301      	adds	r3, #1
 800746c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pd;
 8007470:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	6a3a      	ldr	r2, [r7, #32]
 8007478:	4413      	add	r3, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	8912      	ldrh	r2, [r2, #8]
 800747e:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pu */
            idx++;
 8007480:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007484:	3301      	adds	r3, #1
 8007486:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pu;
 800748a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	6a3a      	ldr	r2, [r7, #32]
 8007492:	4413      	add	r3, r2
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	8952      	ldrh	r2, [r2, #10]
 8007498:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 800749a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800749e:	3301      	adds	r3, #1
 80074a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_wake_up_config.start_addr;
 80074a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	7abb      	ldrb	r3, [r7, #10]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80074ba:	e015      	b.n	80074e8 <set_wrist_wear_wake_up_config+0x168>
            {
                feat_config[wrist_wake_up_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 80074bc:	7abb      	ldrb	r3, [r7, #10]
 80074be:	461a      	mov	r2, r3
 80074c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074c4:	4413      	add	r3, r2
 80074c6:	6a3a      	ldr	r2, [r7, #32]
 80074c8:	441a      	add	r2, r3
                feat_config[wrist_wake_up_config.start_addr +
 80074ca:	7abb      	ldrb	r3, [r7, #10]
 80074cc:	4619      	mov	r1, r3
 80074ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074d2:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 80074d4:	7812      	ldrb	r2, [r2, #0]
 80074d6:	3328      	adds	r3, #40	@ 0x28
 80074d8:	443b      	add	r3, r7
 80074da:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 80074de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074e2:	3301      	adds	r3, #1
 80074e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80074e8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80074ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d3e3      	bcc.n	80074bc <set_wrist_wear_wake_up_config+0x13c>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80074f4:	f107 010c 	add.w	r1, r7, #12
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2210      	movs	r2, #16
 80074fc:	2030      	movs	r0, #48	@ 0x30
 80074fe:	f7fc fa7a 	bl	80039f6 <bmi2_set_regs>
 8007502:	4603      	mov	r3, r0
 8007504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007508:	e002      	b.n	8007510 <set_wrist_wear_wake_up_config+0x190>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800750a:	23f8      	movs	r3, #248	@ 0xf8
 800750c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007510:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007514:	4618      	mov	r0, r3
 8007516:	3728      	adds	r7, #40	@ 0x28
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <get_any_motion_config>:
/*!
 * @brief This internal API gets any-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t get_any_motion_config(struct bmi2_any_motion_config *config, struct bmi2_dev *dev)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	@ 0x28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007526:	f107 030c 	add.w	r3, r7, #12
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	605a      	str	r2, [r3, #4]
 8007530:	609a      	str	r2, [r3, #8]
 8007532:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any-motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 800753a:	2300      	movs	r3, #0
 800753c:	723b      	strb	r3, [r7, #8]
 800753e:	2300      	movs	r3, #0
 8007540:	727b      	strb	r3, [r7, #9]
 8007542:	2300      	movs	r3, #0
 8007544:	72bb      	strb	r3, [r7, #10]

    /* Search for any-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 8007546:	f107 0308 	add.w	r3, r7, #8
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	2104      	movs	r1, #4
 800754e:	4618      	mov	r0, r3
 8007550:	f7fd f81b 	bl	800458a <bmi2_extract_input_feat_config>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (feat_found)
 800755a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800755e:	2b00      	cmp	r3, #0
 8007560:	d064      	beq.n	800762c <get_any_motion_config+0x110>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 8007562:	7a7b      	ldrb	r3, [r7, #9]
 8007564:	f107 010c 	add.w	r1, r7, #12
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	4618      	mov	r0, r3
 800756c:	f7fc ff7b 	bl	8004466 <bmi2_get_feat_config>
 8007570:	4603      	mov	r3, r0
 8007572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007576:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800757a:	2b00      	cmp	r3, #0
 800757c:	d159      	bne.n	8007632 <get_any_motion_config+0x116>
        {
            /* Define the offset for feature enable for any-motion */
            idx = any_mot_config.start_addr;
 800757e:	7abb      	ldrb	r3, [r7, #10]
 8007580:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate duration, x, y and z select */
            lsb = (uint16_t) feat_config[idx++];
 8007584:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800758e:	3328      	adds	r3, #40	@ 0x28
 8007590:	443b      	add	r3, r7
 8007592:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007596:	847b      	strh	r3, [r7, #34]	@ 0x22
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007598:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80075a2:	3328      	adds	r3, #40	@ 0x28
 80075a4:	443b      	add	r3, r7
 80075a6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	843b      	strh	r3, [r7, #32]
            lsb_msb = lsb | msb;
 80075ae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80075b0:	8c3b      	ldrh	r3, [r7, #32]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	83fb      	strh	r3, [r7, #30]

            /* Get duration */
            config->duration = lsb_msb & BMI2_ANY_NO_MOT_DUR_MASK;
 80075b6:	8bfb      	ldrh	r3, [r7, #30]
 80075b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075bc:	b29a      	uxth	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	801a      	strh	r2, [r3, #0]

            /* Get x-select */
            config->select_x = (lsb_msb & BMI2_ANY_NO_MOT_X_SEL_MASK) >> BMI2_ANY_NO_MOT_X_SEL_POS;
 80075c2:	8bfb      	ldrh	r3, [r7, #30]
 80075c4:	135b      	asrs	r3, r3, #13
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	809a      	strh	r2, [r3, #4]

            /* Get y-select */
            config->select_y = (lsb_msb & BMI2_ANY_NO_MOT_Y_SEL_MASK) >> BMI2_ANY_NO_MOT_Y_SEL_POS;
 80075d2:	8bfb      	ldrh	r3, [r7, #30]
 80075d4:	139b      	asrs	r3, r3, #14
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	b29a      	uxth	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	80da      	strh	r2, [r3, #6]

            /* Get z-select */
            config->select_z = (lsb_msb & BMI2_ANY_NO_MOT_Z_SEL_MASK) >> BMI2_ANY_NO_MOT_Z_SEL_POS;
 80075e2:	8bfb      	ldrh	r3, [r7, #30]
 80075e4:	0bdb      	lsrs	r3, r3, #15
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	811a      	strh	r2, [r3, #8]

            /* Get word to calculate threshold, output configuration from the same word */
            lsb = (uint16_t) feat_config[idx++];
 80075ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80075f6:	3328      	adds	r3, #40	@ 0x28
 80075f8:	443b      	add	r3, r7
 80075fa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80075fe:	847b      	strh	r3, [r7, #34]	@ 0x22
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007600:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800760a:	3328      	adds	r3, #40	@ 0x28
 800760c:	443b      	add	r3, r7
 800760e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	843b      	strh	r3, [r7, #32]
            lsb_msb = lsb | msb;
 8007616:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007618:	8c3b      	ldrh	r3, [r7, #32]
 800761a:	4313      	orrs	r3, r2
 800761c:	83fb      	strh	r3, [r7, #30]

            /* Get threshold */
            config->threshold = lsb_msb & BMI2_ANY_NO_MOT_THRES_MASK;
 800761e:	8bfb      	ldrh	r3, [r7, #30]
 8007620:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007624:	b29a      	uxth	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	805a      	strh	r2, [r3, #2]
 800762a:	e002      	b.n	8007632 <get_any_motion_config+0x116>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800762c:	23f8      	movs	r3, #248	@ 0xf8
 800762e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007632:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007636:	4618      	mov	r0, r3
 8007638:	3728      	adds	r7, #40	@ 0x28
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <get_no_motion_config>:
/*!
 * @brief This internal API gets no-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t get_no_motion_config(struct bmi2_no_motion_config *config, struct bmi2_dev *dev)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b08a      	sub	sp, #40	@ 0x28
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007648:	f107 030c 	add.w	r3, r7, #12
 800764c:	2200      	movs	r2, #0
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	605a      	str	r2, [r3, #4]
 8007652:	609a      	str	r2, [r3, #8]
 8007654:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 8007664:	2300      	movs	r3, #0
 8007666:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 8007668:	2300      	movs	r3, #0
 800766a:	723b      	strb	r3, [r7, #8]
 800766c:	2300      	movs	r3, #0
 800766e:	727b      	strb	r3, [r7, #9]
 8007670:	2300      	movs	r3, #0
 8007672:	72bb      	strb	r3, [r7, #10]

    /* Search for no-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 8007674:	f107 0308 	add.w	r3, r7, #8
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	2105      	movs	r1, #5
 800767c:	4618      	mov	r0, r3
 800767e:	f7fc ff84 	bl	800458a <bmi2_extract_input_feat_config>
 8007682:	4603      	mov	r3, r0
 8007684:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007686:	7ffb      	ldrb	r3, [r7, #31]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d064      	beq.n	8007756 <get_no_motion_config+0x118>
    {
        /* Get the configuration from the page where no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 800768c:	7a7b      	ldrb	r3, [r7, #9]
 800768e:	f107 010c 	add.w	r1, r7, #12
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	4618      	mov	r0, r3
 8007696:	f7fc fee6 	bl	8004466 <bmi2_get_feat_config>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80076a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d159      	bne.n	800775c <get_no_motion_config+0x11e>
        {
            /* Define the offset for feature enable for no-motion */
            idx = no_mot_config.start_addr;
 80076a8:	7abb      	ldrb	r3, [r7, #10]
 80076aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate duration, x, y and z select */
            lsb = (uint16_t) feat_config[idx++];
 80076ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80076b8:	3328      	adds	r3, #40	@ 0x28
 80076ba:	443b      	add	r3, r7
 80076bc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80076c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 80076c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80076cc:	3328      	adds	r3, #40	@ 0x28
 80076ce:	443b      	add	r3, r7
 80076d0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80076d4:	021b      	lsls	r3, r3, #8
 80076d6:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 80076d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80076da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076dc:	4313      	orrs	r3, r2
 80076de:	843b      	strh	r3, [r7, #32]

            /* Get duration */
            config->duration = lsb_msb & BMI2_ANY_NO_MOT_DUR_MASK;
 80076e0:	8c3b      	ldrh	r3, [r7, #32]
 80076e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	801a      	strh	r2, [r3, #0]

            /* Get x-select */
            config->select_x = (lsb_msb & BMI2_ANY_NO_MOT_X_SEL_MASK) >> BMI2_ANY_NO_MOT_X_SEL_POS;
 80076ec:	8c3b      	ldrh	r3, [r7, #32]
 80076ee:	135b      	asrs	r3, r3, #13
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	809a      	strh	r2, [r3, #4]

            /* Get y-select */
            config->select_y = (lsb_msb & BMI2_ANY_NO_MOT_Y_SEL_MASK) >> BMI2_ANY_NO_MOT_Y_SEL_POS;
 80076fc:	8c3b      	ldrh	r3, [r7, #32]
 80076fe:	139b      	asrs	r3, r3, #14
 8007700:	b29b      	uxth	r3, r3
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	80da      	strh	r2, [r3, #6]

            /* Get z-select */
            config->select_z = (lsb_msb & BMI2_ANY_NO_MOT_Z_SEL_MASK) >> BMI2_ANY_NO_MOT_Z_SEL_POS;
 800770c:	8c3b      	ldrh	r3, [r7, #32]
 800770e:	0bdb      	lsrs	r3, r3, #15
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	811a      	strh	r2, [r3, #8]

            /* Get word to calculate threshold, output configuration from the same word */
            lsb = (uint16_t) feat_config[idx++];
 8007716:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007720:	3328      	adds	r3, #40	@ 0x28
 8007722:	443b      	add	r3, r7
 8007724:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007728:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 800772a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007734:	3328      	adds	r3, #40	@ 0x28
 8007736:	443b      	add	r3, r7
 8007738:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8007740:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007742:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007744:	4313      	orrs	r3, r2
 8007746:	843b      	strh	r3, [r7, #32]

            /* Get threshold */
            config->threshold = lsb_msb & BMI2_ANY_NO_MOT_THRES_MASK;
 8007748:	8c3b      	ldrh	r3, [r7, #32]
 800774a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	805a      	strh	r2, [r3, #2]
 8007754:	e002      	b.n	800775c <get_no_motion_config+0x11e>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007756:	23f8      	movs	r3, #248	@ 0xf8
 8007758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800775c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007760:	4618      	mov	r0, r3
 8007762:	3728      	adds	r7, #40	@ 0x28
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <get_sig_motion_config>:
/*!
 * @brief This internal API gets sig-motion configurations like block-size,
 * output-configuration and other parameters.
 */
static int8_t get_sig_motion_config(struct bmi2_sig_motion_config *config, struct bmi2_dev *dev)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08a      	sub	sp, #40	@ 0x28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007772:	f107 030c 	add.w	r3, r7, #12
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	605a      	str	r2, [r3, #4]
 800777c:	609a      	str	r2, [r3, #8]
 800777e:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 8007792:	2300      	movs	r3, #0
 8007794:	723b      	strb	r3, [r7, #8]
 8007796:	2300      	movs	r3, #0
 8007798:	727b      	strb	r3, [r7, #9]
 800779a:	2300      	movs	r3, #0
 800779c:	72bb      	strb	r3, [r7, #10]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 800779e:	f107 0308 	add.w	r3, r7, #8
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	2103      	movs	r1, #3
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fc feef 	bl	800458a <bmi2_extract_input_feat_config>
 80077ac:	4603      	mov	r3, r0
 80077ae:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80077b0:	7ffb      	ldrb	r3, [r7, #31]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d02d      	beq.n	8007812 <get_sig_motion_config+0xaa>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 80077b6:	7a7b      	ldrb	r3, [r7, #9]
 80077b8:	f107 010c 	add.w	r1, r7, #12
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fc fe51 	bl	8004466 <bmi2_get_feat_config>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80077ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d122      	bne.n	8007818 <get_sig_motion_config+0xb0>
        {
            /* Define the offset for feature enable for sig-motion */
            idx = sig_mot_config.start_addr;
 80077d2:	7abb      	ldrb	r3, [r7, #10]
 80077d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate parameter 1 */
            lsb = (uint16_t) feat_config[idx++];
 80077d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80077e2:	3328      	adds	r3, #40	@ 0x28
 80077e4:	443b      	add	r3, r7
 80077e6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80077ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 80077ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80077f6:	3328      	adds	r3, #40	@ 0x28
 80077f8:	443b      	add	r3, r7
 80077fa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80077fe:	021b      	lsls	r3, r3, #8
 8007800:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8007802:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007804:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007806:	4313      	orrs	r3, r2
 8007808:	843b      	strh	r3, [r7, #32]

            /* Get parameter 1  */
            config->block_size = lsb_msb & BMI2_SIG_MOT_PARAM_1_MASK;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	8c3a      	ldrh	r2, [r7, #32]
 800780e:	801a      	strh	r2, [r3, #0]
 8007810:	e002      	b.n	8007818 <get_sig_motion_config+0xb0>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007812:	23f8      	movs	r3, #248	@ 0xf8
 8007814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007818:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800781c:	4618      	mov	r0, r3
 800781e:	3728      	adds	r7, #40	@ 0x28
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <get_step_count_params_config>:

/*!
 * @brief This internal API gets step counter parameter configurations.
 */
static int8_t get_step_count_params_config(uint16_t *step_count_params, struct bmi2_dev *dev)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08c      	sub	sp, #48	@ 0x30
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007834:	f107 030c 	add.w	r3, r7, #12
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	605a      	str	r2, [r3, #4]
 800783e:	609a      	str	r2, [r3, #8]
 8007840:	60da      	str	r2, [r3, #12]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8007842:	2300      	movs	r3, #0
 8007844:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Initialize feature configuration for step counter 1 */
    struct bmi2_feature_config step_params_config = { 0, 0, 0 };
 800784e:	2300      	movs	r3, #0
 8007850:	723b      	strb	r3, [r7, #8]
 8007852:	2300      	movs	r3, #0
 8007854:	727b      	strb	r3, [r7, #9]
 8007856:	2300      	movs	r3, #0
 8007858:	72bb      	strb	r3, [r7, #10]

    /* Variable to define start address of the parameters */
    uint8_t start_addr;

    /* Variable to define number of bytes */
    uint8_t n_bytes = (BMI2_STEP_CNT_N_PARAMS * 2);
 800785a:	2332      	movs	r3, #50	@ 0x32
 800785c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    /* Variable to store number of pages */
    uint8_t n_pages = (n_bytes / 16);
 8007860:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007864:	091b      	lsrs	r3, r3, #4
 8007866:	f887 3020 	strb.w	r3, [r7, #32]

    /* Variable to define the remaining bytes to be read */
    uint8_t remain_len;

    /* Variable to define the maximum words to be read in a page */
    uint8_t max_len = BMI2_FEAT_SIZE_IN_BYTES;
 800786a:	2310      	movs	r3, #16
 800786c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Variable index bytes in a page */
    uint8_t page_byte_idx;

    /* Variable to index the parameters */
    uint8_t param_idx = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Search for step counter parameter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_params_config, BMI2_STEP_COUNTER_PARAMS, dev);
 8007876:	f107 0308 	add.w	r3, r7, #8
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	211d      	movs	r1, #29
 800787e:	4618      	mov	r0, r3
 8007880:	f7fc fe83 	bl	800458a <bmi2_extract_input_feat_config>
 8007884:	4603      	mov	r3, r0
 8007886:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007888:	7ffb      	ldrb	r3, [r7, #31]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d079      	beq.n	8007982 <get_step_count_params_config+0x15e>
    {
        /* Get the start page for the step counter parameters */
        start_page = step_params_config.page;
 800788e:	7a7b      	ldrb	r3, [r7, #9]
 8007890:	77bb      	strb	r3, [r7, #30]

        /* Get the end page for the step counter parameters */
        end_page = start_page + n_pages;
 8007892:	7fba      	ldrb	r2, [r7, #30]
 8007894:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007898:	4413      	add	r3, r2
 800789a:	777b      	strb	r3, [r7, #29]

        /* Get the start address for the step counter parameters */
        start_addr = step_params_config.start_addr;
 800789c:	7abb      	ldrb	r3, [r7, #10]
 800789e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        /* Get the remaining length of bytes to be read */
        remain_len = (uint8_t)((n_bytes - (n_pages * 16)) + start_addr);
 80078a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80078b6:	4413      	add	r3, r2
 80078b8:	773b      	strb	r3, [r7, #28]
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 80078ba:	7fbb      	ldrb	r3, [r7, #30]
 80078bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078c0:	e059      	b.n	8007976 <get_step_count_params_config+0x152>
        {
            /* Get the configuration from the respective page */
            rslt = bmi2_get_feat_config(page_idx, feat_config, dev);
 80078c2:	f107 010c 	add.w	r1, r7, #12
 80078c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fc fdca 	bl	8004466 <bmi2_get_feat_config>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMI2_OK)
 80078d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d145      	bne.n	800796c <get_step_count_params_config+0x148>
            {
                /* Start from address 0x00 when switched to next page */
                if (page_idx > start_page)
 80078e0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80078e4:	7fbb      	ldrb	r3, [r7, #30]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d902      	bls.n	80078f0 <get_step_count_params_config+0xcc>
                {
                    start_addr = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                }

                /* Remaining number of bytes to be read in the page  */
                if (page_idx == end_page)
 80078f0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80078f4:	7f7b      	ldrb	r3, [r7, #29]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d102      	bne.n	8007900 <get_step_count_params_config+0xdc>
                {
                    max_len = remain_len;
 80078fa:	7f3b      	ldrb	r3, [r7, #28]
 80078fc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                }

                /* Get the offset */
                page_byte_idx = start_addr;
 8007900:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007904:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                while (page_byte_idx < max_len)
 8007908:	e02a      	b.n	8007960 <get_step_count_params_config+0x13c>
                {
                    /* Get word to calculate the parameter*/
                    lsb = (uint16_t) feat_config[page_byte_idx++];
 800790a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
 8007914:	3330      	adds	r3, #48	@ 0x30
 8007916:	443b      	add	r3, r7
 8007918:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800791c:	84bb      	strh	r3, [r7, #36]	@ 0x24
                    if (page_byte_idx < max_len)
 800791e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007922:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007926:	429a      	cmp	r2, r3
 8007928:	d20a      	bcs.n	8007940 <get_step_count_params_config+0x11c>
                    {
                        msb = ((uint16_t) feat_config[page_byte_idx++] << 8);
 800792a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
 8007934:	3330      	adds	r3, #48	@ 0x30
 8007936:	443b      	add	r3, r7
 8007938:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    }

                    lsb_msb = lsb | msb;
 8007940:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007942:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007944:	4313      	orrs	r3, r2
 8007946:	847b      	strh	r3, [r7, #34]	@ 0x22

                    /* Get parameters 1 to 25 */
                    step_count_params[param_idx] = lsb_msb & BMI2_STEP_COUNT_PARAMS_MASK;
 8007948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	4413      	add	r3, r2
 8007952:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007954:	801a      	strh	r2, [r3, #0]

                    /* Increment to next parameter */
                    param_idx++;
 8007956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800795a:	3301      	adds	r3, #1
 800795c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                while (page_byte_idx < max_len)
 8007960:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007964:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007968:	429a      	cmp	r2, r3
 800796a:	d3ce      	bcc.n	800790a <get_step_count_params_config+0xe6>
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 800796c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007970:	3301      	adds	r3, #1
 8007972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007976:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800797a:	7f7b      	ldrb	r3, [r7, #29]
 800797c:	429a      	cmp	r2, r3
 800797e:	d9a0      	bls.n	80078c2 <get_step_count_params_config+0x9e>
 8007980:	e002      	b.n	8007988 <get_step_count_params_config+0x164>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007982:	23f8      	movs	r3, #248	@ 0xf8
 8007984:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8007988:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800798c:	4618      	mov	r0, r3
 800798e:	3730      	adds	r7, #48	@ 0x30
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <get_step_config>:

/*!
 * @brief This internal API gets step counter/detector/activity configurations.
 */
static int8_t get_step_config(struct bmi2_step_config *config, struct bmi2_dev *dev)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	@ 0x28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800799e:	f107 030c 	add.w	r3, r7, #12
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	605a      	str	r2, [r3, #4]
 80079a8:	609a      	str	r2, [r3, #8]
 80079aa:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 80079be:	2300      	movs	r3, #0
 80079c0:	723b      	strb	r3, [r7, #8]
 80079c2:	2300      	movs	r3, #0
 80079c4:	727b      	strb	r3, [r7, #9]
 80079c6:	2300      	movs	r3, #0
 80079c8:	72bb      	strb	r3, [r7, #10]

    /* Search for step counter 4 feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 80079ca:	f107 0308 	add.w	r3, r7, #8
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	2107      	movs	r1, #7
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fc fdd9 	bl	800458a <bmi2_extract_input_feat_config>
 80079d8:	4603      	mov	r3, r0
 80079da:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80079dc:	7ffb      	ldrb	r3, [r7, #31]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d038      	beq.n	8007a54 <get_step_config+0xc0>
    {
        /* Get the configuration from the page where step counter 4 parameter resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 80079e2:	7a7b      	ldrb	r3, [r7, #9]
 80079e4:	f107 010c 	add.w	r1, r7, #12
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fc fd3b 	bl	8004466 <bmi2_get_feat_config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80079f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d12d      	bne.n	8007a5a <get_step_config+0xc6>
        {
            /* Define the offset for feature enable for step counter/detector/activity */
            idx = step_count_config.start_addr;
 80079fe:	7abb      	ldrb	r3, [r7, #10]
 8007a00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate water-mark level and reset counter */
            lsb = (uint16_t) feat_config[idx++];
 8007a04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007a0e:	3328      	adds	r3, #40	@ 0x28
 8007a10:	443b      	add	r3, r7
 8007a12:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007a16:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8007a18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8007a22:	3328      	adds	r3, #40	@ 0x28
 8007a24:	443b      	add	r3, r7
 8007a26:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8007a2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007a32:	4313      	orrs	r3, r2
 8007a34:	843b      	strh	r3, [r7, #32]

            /* Get water-mark level */
            config->watermark_level = lsb_msb & BMI2_STEP_COUNT_WM_LEVEL_MASK;
 8007a36:	8c3b      	ldrh	r3, [r7, #32]
 8007a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	801a      	strh	r2, [r3, #0]

            /* Get reset counter */
            config->reset_counter = (lsb_msb & BMI2_STEP_COUNT_RST_CNT_MASK) >> BMI2_STEP_COUNT_RST_CNT_POS;
 8007a42:	8c3b      	ldrh	r3, [r7, #32]
 8007a44:	129b      	asrs	r3, r3, #10
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	805a      	strh	r2, [r3, #2]
 8007a52:	e002      	b.n	8007a5a <get_step_config+0xc6>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007a54:	23f8      	movs	r3, #248	@ 0xf8
 8007a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007a5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3728      	adds	r7, #40	@ 0x28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <get_wrist_gest_config>:
/*!
 * @brief This internal API gets wrist gesture configurations like wearable-arm,
 * and output-configuration.
 */
static int8_t get_wrist_gest_config(struct bmi2_wrist_gest_config *config, struct bmi2_dev *dev)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b08a      	sub	sp, #40	@ 0x28
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007a70:	f107 030c 	add.w	r3, r7, #12
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	605a      	str	r2, [r3, #4]
 8007a7a:	609a      	str	r2, [r3, #8]
 8007a7c:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_config = { 0, 0, 0 };
 8007a84:	2300      	movs	r3, #0
 8007a86:	723b      	strb	r3, [r7, #8]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	727b      	strb	r3, [r7, #9]
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8007a90:	f107 030c 	add.w	r3, r7, #12
 8007a94:	623b      	str	r3, [r7, #32]

    /* Search for wrist gesture feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_config, BMI2_WRIST_GESTURE, dev);
 8007a96:	f107 0308 	add.w	r3, r7, #8
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	2113      	movs	r1, #19
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fc fd73 	bl	800458a <bmi2_extract_input_feat_config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007aa8:	7ffb      	ldrb	r3, [r7, #31]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d04a      	beq.n	8007b44 <get_wrist_gest_config+0xde>
    {
        /* Get the configuration from the page where wrist gesture feature  resides */
        rslt = bmi2_get_feat_config(wrist_gest_config.page, feat_config, dev);
 8007aae:	7a7b      	ldrb	r3, [r7, #9]
 8007ab0:	f107 010c 	add.w	r1, r7, #12
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fc fcd5 	bl	8004466 <bmi2_get_feat_config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007ac2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d13f      	bne.n	8007b4a <get_wrist_gest_config+0xe4>
        {
            /* Define the offset in bytes for wrist gesture select */
            idx = wrist_gest_config.start_addr;
 8007aca:	7abb      	ldrb	r3, [r7, #10]
 8007acc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8007ad0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ad4:	085b      	lsrs	r3, r3, #1
 8007ad6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get wearable arm */
            config->wearable_arm = (*(data_p + idx) & BMI2_WRIST_GEST_WEAR_ARM_MASK) >> BMI2_WRIST_GEST_WEAR_ARM_POS;
 8007ada:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	6a3a      	ldr	r2, [r7, #32]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	111b      	asrs	r3, r3, #4
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	801a      	strh	r2, [r3, #0]

            /* Increment the offset by 1 word to get min_flick_peak */
            idx++;
 8007af4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007af8:	3301      	adds	r3, #1
 8007afa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->min_flick_peak = *(data_p + idx);
 8007afe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	6a3a      	ldr	r2, [r7, #32]
 8007b06:	4413      	add	r3, r2
 8007b08:	881a      	ldrh	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	805a      	strh	r2, [r3, #2]

            /* Increment the offset by 1 word to get min_flick_samples */
            idx++;
 8007b0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b12:	3301      	adds	r3, #1
 8007b14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->min_flick_samples = *(data_p + idx);
 8007b18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	6a3a      	ldr	r2, [r7, #32]
 8007b20:	4413      	add	r3, r2
 8007b22:	881a      	ldrh	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	809a      	strh	r2, [r3, #4]

            /* Increment the offset by 1 word to get max_duration */
            idx++;
 8007b28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_duration = *(data_p + idx);
 8007b32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	6a3a      	ldr	r2, [r7, #32]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	881a      	ldrh	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	80da      	strh	r2, [r3, #6]
 8007b42:	e002      	b.n	8007b4a <get_wrist_gest_config+0xe4>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007b44:	23f8      	movs	r3, #248	@ 0xf8
 8007b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007b4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3728      	adds	r7, #40	@ 0x28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <get_wrist_wear_wake_up_config>:
/*!
 * @brief This internal API gets wrist wear wake-up configurations like
 * output-configuration.
 */
static int8_t get_wrist_wear_wake_up_config(struct bmi2_wrist_wear_wake_up_config *config, struct bmi2_dev *dev)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b08a      	sub	sp, #40	@ 0x28
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8007b60:	f107 030c 	add.w	r3, r7, #12
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	605a      	str	r2, [r3, #4]
 8007b6a:	609a      	str	r2, [r3, #8]
 8007b6c:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake-up */
    struct bmi2_feature_config wrist_wake_up_config = { 0, 0, 0 };
 8007b74:	2300      	movs	r3, #0
 8007b76:	723b      	strb	r3, [r7, #8]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	727b      	strb	r3, [r7, #9]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8007b80:	f107 030c 	add.w	r3, r7, #12
 8007b84:	623b      	str	r3, [r7, #32]

    /* Search for wrist wear wake-up feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_config, BMI2_WRIST_WEAR_WAKE_UP, dev);
 8007b86:	f107 0308 	add.w	r3, r7, #8
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	2114      	movs	r1, #20
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fc fcfb 	bl	800458a <bmi2_extract_input_feat_config>
 8007b94:	4603      	mov	r3, r0
 8007b96:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8007b98:	7ffb      	ldrb	r3, [r7, #31]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d064      	beq.n	8007c68 <get_wrist_wear_wake_up_config+0x112>
    {
        /* Get the configuration from the page where wrist wear wake-up feature  resides */
        rslt = bmi2_get_feat_config(wrist_wake_up_config.page, feat_config, dev);
 8007b9e:	7a7b      	ldrb	r3, [r7, #9]
 8007ba0:	f107 010c 	add.w	r1, r7, #12
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fc fc5d 	bl	8004466 <bmi2_get_feat_config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8007bb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d159      	bne.n	8007c6e <get_wrist_wear_wake_up_config+0x118>
        {
            /* Define the offset in bytes for wrist wear wake-up select */
            idx = wrist_wake_up_config.start_addr;
 8007bba:	7abb      	ldrb	r3, [r7, #10]
 8007bbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8007bc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bc4:	085b      	lsrs	r3, r3, #1
 8007bc6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Increment the offset value by 1 word to get min_angle_focus */
            idx++;
 8007bca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bce:	3301      	adds	r3, #1
 8007bd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            config->min_angle_focus = *(data_p + idx);
 8007bd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	6a3a      	ldr	r2, [r7, #32]
 8007bdc:	4413      	add	r3, r2
 8007bde:	881a      	ldrh	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	801a      	strh	r2, [r3, #0]

            /* Increment the offset value by 1 word to get min_angle_nonfocus */
            idx++;
 8007be4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007be8:	3301      	adds	r3, #1
 8007bea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->min_angle_nonfocus = *(data_p + idx);
 8007bee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	6a3a      	ldr	r2, [r7, #32]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	881a      	ldrh	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	805a      	strh	r2, [r3, #2]

            /* Increment the offset value by 1 word to get max_tilt_lr */
            idx++;
 8007bfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c02:	3301      	adds	r3, #1
 8007c04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_lr = *(data_p + idx);
 8007c08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	6a3a      	ldr	r2, [r7, #32]
 8007c10:	4413      	add	r3, r2
 8007c12:	881a      	ldrh	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	809a      	strh	r2, [r3, #4]

            /* Increment the offset value by 1 word to get max_tilt_ll */
            idx++;
 8007c18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_ll = *(data_p + idx);
 8007c22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	6a3a      	ldr	r2, [r7, #32]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	881a      	ldrh	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	80da      	strh	r2, [r3, #6]

            /* Increment the offset value by 1 word to get max_tilt_pd */
            idx++;
 8007c32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c36:	3301      	adds	r3, #1
 8007c38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_pd = *(data_p + idx);
 8007c3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	6a3a      	ldr	r2, [r7, #32]
 8007c44:	4413      	add	r3, r2
 8007c46:	881a      	ldrh	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	811a      	strh	r2, [r3, #8]

            /* Increment the offset value by 1 word to get max_tilt_pu */
            idx++;
 8007c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c50:	3301      	adds	r3, #1
 8007c52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            config->max_tilt_pu = *(data_p + idx);
 8007c56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	6a3a      	ldr	r2, [r7, #32]
 8007c5e:	4413      	add	r3, r2
 8007c60:	881a      	ldrh	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	815a      	strh	r2, [r3, #10]
 8007c66:	e002      	b.n	8007c6e <get_wrist_wear_wake_up_config+0x118>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8007c68:	23f8      	movs	r3, #248	@ 0xf8
 8007c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8007c6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3728      	adds	r7, #40	@ 0x28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <set_feat_config>:

/*!
 * @brief This internal API sets feature configuration to the sensor.
 */
static int8_t set_feat_config(const struct bmi2_sens_config *sens_cfg, uint8_t loop, struct bmi2_dev *dev)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	460b      	mov	r3, r1
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    switch (sens_cfg[loop].type)
 8007c8a:	7afa      	ldrb	r2, [r7, #11]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	1a9b      	subs	r3, r3, r2
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	461a      	mov	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4413      	add	r3, r2
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	3b03      	subs	r3, #3
 8007c9e:	2b1a      	cmp	r3, #26
 8007ca0:	f200 80aa 	bhi.w	8007df8 <set_feat_config+0x17c>
 8007ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cac <set_feat_config+0x30>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007d59 	.word	0x08007d59
 8007cb0:	08007d19 	.word	0x08007d19
 8007cb4:	08007d39 	.word	0x08007d39
 8007cb8:	08007d99 	.word	0x08007d99
 8007cbc:	08007d99 	.word	0x08007d99
 8007cc0:	08007d99 	.word	0x08007d99
 8007cc4:	08007df9 	.word	0x08007df9
 8007cc8:	08007df9 	.word	0x08007df9
 8007ccc:	08007df9 	.word	0x08007df9
 8007cd0:	08007df9 	.word	0x08007df9
 8007cd4:	08007df9 	.word	0x08007df9
 8007cd8:	08007df9 	.word	0x08007df9
 8007cdc:	08007df9 	.word	0x08007df9
 8007ce0:	08007df9 	.word	0x08007df9
 8007ce4:	08007df9 	.word	0x08007df9
 8007ce8:	08007df9 	.word	0x08007df9
 8007cec:	08007db9 	.word	0x08007db9
 8007cf0:	08007dd9 	.word	0x08007dd9
 8007cf4:	08007df9 	.word	0x08007df9
 8007cf8:	08007df9 	.word	0x08007df9
 8007cfc:	08007df9 	.word	0x08007df9
 8007d00:	08007df9 	.word	0x08007df9
 8007d04:	08007df9 	.word	0x08007df9
 8007d08:	08007df9 	.word	0x08007df9
 8007d0c:	08007df9 	.word	0x08007df9
 8007d10:	08007df9 	.word	0x08007df9
 8007d14:	08007d79 	.word	0x08007d79
    {
        /* Set any motion configuration */
        case BMI2_ANY_MOTION:
            rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8007d18:	7afa      	ldrb	r2, [r7, #11]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	1a9b      	subs	r3, r3, r2
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	461a      	mov	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	3304      	adds	r3, #4
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe fe40 	bl	80069b2 <set_any_motion_config>
 8007d32:	4603      	mov	r3, r0
 8007d34:	75fb      	strb	r3, [r7, #23]
            break;
 8007d36:	e062      	b.n	8007dfe <set_feat_config+0x182>

        /* Set no motion configuration */
        case BMI2_NO_MOTION:
            rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8007d38:	7afa      	ldrb	r2, [r7, #11]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	1a9b      	subs	r3, r3, r2
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	461a      	mov	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4413      	add	r3, r2
 8007d48:	3304      	adds	r3, #4
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe ff39 	bl	8006bc4 <set_no_motion_config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]
            break;
 8007d56:	e052      	b.n	8007dfe <set_feat_config+0x182>

        /* Set sig-motion configuration */
        case BMI2_SIG_MOTION:
            rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 8007d58:	7afa      	ldrb	r2, [r7, #11]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	461a      	mov	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	3304      	adds	r3, #4
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7ff f832 	bl	8006dd6 <set_sig_motion_config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	75fb      	strb	r3, [r7, #23]
            break;
 8007d76:	e042      	b.n	8007dfe <set_feat_config+0x182>

        /* Set the step counter parameters */
        case BMI2_STEP_COUNTER_PARAMS:
            rslt = set_step_count_params_config(sens_cfg[loop].cfg.step_counter_params, dev);
 8007d78:	7afa      	ldrb	r2, [r7, #11]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	1a9b      	subs	r3, r3, r2
 8007d80:	00db      	lsls	r3, r3, #3
 8007d82:	461a      	mov	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	3304      	adds	r3, #4
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff f8a8 	bl	8006ee2 <set_step_count_params_config>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]
            break;
 8007d96:	e032      	b.n	8007dfe <set_feat_config+0x182>

        /* Set step counter/detector/activity configuration */
        case BMI2_STEP_DETECTOR:
        case BMI2_STEP_COUNTER:
        case BMI2_STEP_ACTIVITY:
            rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8007d98:	7afa      	ldrb	r2, [r7, #11]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	00db      	lsls	r3, r3, #3
 8007d9e:	1a9b      	subs	r3, r3, r2
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	461a      	mov	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	3304      	adds	r3, #4
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff f970 	bl	8007092 <set_step_config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]
            break;
 8007db6:	e022      	b.n	8007dfe <set_feat_config+0x182>

        /* Set the wrist gesture configuration */
        case BMI2_WRIST_GESTURE:
            rslt = set_wrist_gest_config(&sens_cfg[loop].cfg.wrist_gest, dev);
 8007db8:	7afa      	ldrb	r2, [r7, #11]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	00db      	lsls	r3, r3, #3
 8007dbe:	1a9b      	subs	r3, r3, r2
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	3304      	adds	r3, #4
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff fa15 	bl	80071fc <set_wrist_gest_config>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75fb      	strb	r3, [r7, #23]
            break;
 8007dd6:	e012      	b.n	8007dfe <set_feat_config+0x182>

        /* Set the wrist wear wake-up configuration */
        case BMI2_WRIST_WEAR_WAKE_UP:
            rslt = set_wrist_wear_wake_up_config(&sens_cfg[loop].cfg.wrist_wear_wake_up, dev);
 8007dd8:	7afa      	ldrb	r2, [r7, #11]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	1a9b      	subs	r3, r3, r2
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	461a      	mov	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4413      	add	r3, r2
 8007de8:	3304      	adds	r3, #4
 8007dea:	6879      	ldr	r1, [r7, #4]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff fac7 	bl	8007380 <set_wrist_wear_wake_up_config>
 8007df2:	4603      	mov	r3, r0
 8007df4:	75fb      	strb	r3, [r7, #23]
            break;
 8007df6:	e002      	b.n	8007dfe <set_feat_config+0x182>

        default:
            rslt = BMI2_E_INVALID_SENSOR;
 8007df8:	23f8      	movs	r3, #248	@ 0xf8
 8007dfa:	75fb      	strb	r3, [r7, #23]
            break;
 8007dfc:	bf00      	nop
    }

    return rslt;
 8007dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop

08007e0c <get_feat_config>:

/*!
 * @brief This internal API gets feature configuration from the sensor.
 */
static int8_t get_feat_config(struct bmi2_sens_config *sens_cfg, uint8_t loop, struct bmi2_dev *dev)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	460b      	mov	r3, r1
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    switch (sens_cfg[loop].type)
 8007e1a:	7afa      	ldrb	r2, [r7, #11]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	1a9b      	subs	r3, r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	461a      	mov	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	3b03      	subs	r3, #3
 8007e2e:	2b1a      	cmp	r3, #26
 8007e30:	f200 80aa 	bhi.w	8007f88 <get_feat_config+0x17c>
 8007e34:	a201      	add	r2, pc, #4	@ (adr r2, 8007e3c <get_feat_config+0x30>)
 8007e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3a:	bf00      	nop
 8007e3c:	08007ea9 	.word	0x08007ea9
 8007e40:	08007ec9 	.word	0x08007ec9
 8007e44:	08007ee9 	.word	0x08007ee9
 8007e48:	08007f29 	.word	0x08007f29
 8007e4c:	08007f29 	.word	0x08007f29
 8007e50:	08007f29 	.word	0x08007f29
 8007e54:	08007f89 	.word	0x08007f89
 8007e58:	08007f89 	.word	0x08007f89
 8007e5c:	08007f89 	.word	0x08007f89
 8007e60:	08007f89 	.word	0x08007f89
 8007e64:	08007f89 	.word	0x08007f89
 8007e68:	08007f89 	.word	0x08007f89
 8007e6c:	08007f89 	.word	0x08007f89
 8007e70:	08007f89 	.word	0x08007f89
 8007e74:	08007f89 	.word	0x08007f89
 8007e78:	08007f89 	.word	0x08007f89
 8007e7c:	08007f49 	.word	0x08007f49
 8007e80:	08007f69 	.word	0x08007f69
 8007e84:	08007f89 	.word	0x08007f89
 8007e88:	08007f89 	.word	0x08007f89
 8007e8c:	08007f89 	.word	0x08007f89
 8007e90:	08007f89 	.word	0x08007f89
 8007e94:	08007f89 	.word	0x08007f89
 8007e98:	08007f89 	.word	0x08007f89
 8007e9c:	08007f89 	.word	0x08007f89
 8007ea0:	08007f89 	.word	0x08007f89
 8007ea4:	08007f09 	.word	0x08007f09
    {
        /* Get sig-motion configuration */
        case BMI2_SIG_MOTION:
            rslt = get_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 8007ea8:	7afa      	ldrb	r2, [r7, #11]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	00db      	lsls	r3, r3, #3
 8007eae:	1a9b      	subs	r3, r3, r2
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3304      	adds	r3, #4
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff fc53 	bl	8007768 <get_sig_motion_config>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75fb      	strb	r3, [r7, #23]
            break;
 8007ec6:	e062      	b.n	8007f8e <get_feat_config+0x182>

        /* Get any motion configuration */
        case BMI2_ANY_MOTION:
            rslt = get_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8007ec8:	7afa      	ldrb	r2, [r7, #11]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	00db      	lsls	r3, r3, #3
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	3304      	adds	r3, #4
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff fb1d 	bl	800751c <get_any_motion_config>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	75fb      	strb	r3, [r7, #23]
            break;
 8007ee6:	e052      	b.n	8007f8e <get_feat_config+0x182>

        /* Get no motion configuration */
        case BMI2_NO_MOTION:
            rslt = get_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8007ee8:	7afa      	ldrb	r2, [r7, #11]
 8007eea:	4613      	mov	r3, r2
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	1a9b      	subs	r3, r3, r2
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	3304      	adds	r3, #4
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff fb9e 	bl	800763e <get_no_motion_config>
 8007f02:	4603      	mov	r3, r0
 8007f04:	75fb      	strb	r3, [r7, #23]
            break;
 8007f06:	e042      	b.n	8007f8e <get_feat_config+0x182>

        /* Set the step counter parameters */
        case BMI2_STEP_COUNTER_PARAMS:
            rslt = get_step_count_params_config(sens_cfg[loop].cfg.step_counter_params, dev);
 8007f08:	7afa      	ldrb	r2, [r7, #11]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	00db      	lsls	r3, r3, #3
 8007f0e:	1a9b      	subs	r3, r3, r2
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	461a      	mov	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4413      	add	r3, r2
 8007f18:	3304      	adds	r3, #4
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff fc81 	bl	8007824 <get_step_count_params_config>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]
            break;
 8007f26:	e032      	b.n	8007f8e <get_feat_config+0x182>

        /* Get step counter/detector/activity configuration */
        case BMI2_STEP_DETECTOR:
        case BMI2_STEP_COUNTER:
        case BMI2_STEP_ACTIVITY:
            rslt = get_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8007f28:	7afa      	ldrb	r2, [r7, #11]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	1a9b      	subs	r3, r3, r2
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	461a      	mov	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	3304      	adds	r3, #4
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff fd29 	bl	8007994 <get_step_config>
 8007f42:	4603      	mov	r3, r0
 8007f44:	75fb      	strb	r3, [r7, #23]
            break;
 8007f46:	e022      	b.n	8007f8e <get_feat_config+0x182>

        /* Get the wrist gesture configuration */
        case BMI2_WRIST_GESTURE:
            rslt = get_wrist_gest_config(&sens_cfg[loop].cfg.wrist_gest, dev);
 8007f48:	7afa      	ldrb	r2, [r7, #11]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	1a9b      	subs	r3, r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	461a      	mov	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4413      	add	r3, r2
 8007f58:	3304      	adds	r3, #4
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7ff fd82 	bl	8007a66 <get_wrist_gest_config>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]
            break;
 8007f66:	e012      	b.n	8007f8e <get_feat_config+0x182>

        /* Get the wrist wear wake-up configuration */
        case BMI2_WRIST_WEAR_WAKE_UP:
            rslt = get_wrist_wear_wake_up_config(&sens_cfg[loop].cfg.wrist_wear_wake_up, dev);
 8007f68:	7afa      	ldrb	r2, [r7, #11]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	1a9b      	subs	r3, r3, r2
 8007f70:	00db      	lsls	r3, r3, #3
 8007f72:	461a      	mov	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	3304      	adds	r3, #4
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff fdea 	bl	8007b56 <get_wrist_wear_wake_up_config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]
            break;
 8007f86:	e002      	b.n	8007f8e <get_feat_config+0x182>

        default:
            rslt = BMI2_E_INVALID_SENSOR;
 8007f88:	23f8      	movs	r3, #248	@ 0xf8
 8007f8a:	75fb      	strb	r3, [r7, #23]
            break;
 8007f8c:	bf00      	nop
    }

    return rslt;
 8007f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop

08007f9c <enable_main_sensors>:

/*!
 * @brief This internal API is used to enable main sensors like accel, gyro, aux and temperature.
 */
static int8_t enable_main_sensors(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8007f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fa0:	b08a      	sub	sp, #40	@ 0x28
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8007fa8:	617a      	str	r2, [r7, #20]
    int8_t rslt;

    /* Variable to store register values */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8007faa:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	207d      	movs	r0, #125	@ 0x7d
 8007fb4:	f7fb fcac 	bl	8003910 <bmi2_get_regs>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMI2_OK)
 8007fbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d158      	bne.n	8008078 <enable_main_sensors+0xdc>
    {
        /* Enable accelerometer */
        if (sensor_sel & BMI2_ACCEL_SENS_SEL)
 8007fc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fca:	f002 0301 	and.w	r3, r2, #1
 8007fce:	60bb      	str	r3, [r7, #8]
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	d006      	beq.n	8007fec <enable_main_sensors+0x50>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_EN, BMI2_ENABLE);
 8007fde:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fe2:	f043 0304 	orr.w	r3, r3, #4
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable gyroscope */
        if (sensor_sel & BMI2_GYRO_SENS_SEL)
 8007fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ff0:	f002 0302 	and.w	r3, r2, #2
 8007ff4:	603b      	str	r3, [r7, #0]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	607b      	str	r3, [r7, #4]
 8007ffa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007ffe:	460b      	mov	r3, r1
 8008000:	4313      	orrs	r3, r2
 8008002:	d006      	beq.n	8008012 <enable_main_sensors+0x76>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_EN, BMI2_ENABLE);
 8008004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008008:	f043 0302 	orr.w	r3, r3, #2
 800800c:	b2db      	uxtb	r3, r3
 800800e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable auxiliary sensor */
        if (sensor_sel & BMI2_AUX_SENS_SEL)
 8008012:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008016:	f002 0a04 	and.w	sl, r2, #4
 800801a:	f04f 0b00 	mov.w	fp, #0
 800801e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008022:	d006      	beq.n	8008032 <enable_main_sensors+0x96>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_EN, BMI2_ENABLE);
 8008024:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008028:	f043 0301 	orr.w	r3, r3, #1
 800802c:	b2db      	uxtb	r3, r3
 800802e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable temperature sensor */
        if (sensor_sel & BMI2_TEMP_SENS_SEL)
 8008032:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008036:	f04f 0800 	mov.w	r8, #0
 800803a:	f003 0901 	and.w	r9, r3, #1
 800803e:	ea58 0309 	orrs.w	r3, r8, r9
 8008042:	d006      	beq.n	8008052 <enable_main_sensors+0xb6>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_TEMP_EN, BMI2_ENABLE);
 8008044:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008048:	f043 0308 	orr.w	r3, r3, #8
 800804c:	b2db      	uxtb	r3, r3
 800804e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable the sensors that are set in the power control register */
        if (sensor_sel & BMI2_MAIN_SENSORS)
 8008052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008056:	f002 0407 	and.w	r4, r2, #7
 800805a:	f003 0501 	and.w	r5, r3, #1
 800805e:	ea54 0305 	orrs.w	r3, r4, r5
 8008062:	d009      	beq.n	8008078 <enable_main_sensors+0xdc>
        {
            rslt = bmi2_set_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8008064:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2201      	movs	r2, #1
 800806c:	207d      	movs	r0, #125	@ 0x7d
 800806e:	f7fb fcc2 	bl	80039f6 <bmi2_set_regs>
 8008072:	4603      	mov	r3, r0
 8008074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 8008078:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800807c:	4618      	mov	r0, r3
 800807e:	3728      	adds	r7, #40	@ 0x28
 8008080:	46bd      	mov	sp, r7
 8008082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008086 <enable_sensor_features>:

/*!
 * @brief This internal API is used to enable sensor features.
 */
static int8_t enable_sensor_features(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8008086:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800808a:	b094      	sub	sp, #80	@ 0x50
 800808c:	af00      	add	r7, sp, #0
 800808e:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8008092:	63fa      	str	r2, [r7, #60]	@ 0x3c
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    /* Enable sig-motion feature */
    if (sensor_sel & BMI2_SIG_MOTION_SEL)
 800809a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800809e:	f002 0408 	and.w	r4, r2, #8
 80080a2:	2500      	movs	r5, #0
 80080a4:	ea54 0305 	orrs.w	r3, r4, r5
 80080a8:	d006      	beq.n	80080b8 <enable_sensor_features+0x32>
    {
        rslt = set_sig_motion(BMI2_ENABLE, dev);
 80080aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080ac:	2001      	movs	r0, #1
 80080ae:	f7fe f9bb 	bl	8006428 <set_sig_motion>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable any motion feature */
    if (sensor_sel & BMI2_ANY_MOT_SEL)
 80080b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080bc:	f002 0810 	and.w	r8, r2, #16
 80080c0:	f04f 0900 	mov.w	r9, #0
 80080c4:	ea58 0309 	orrs.w	r3, r8, r9
 80080c8:	d006      	beq.n	80080d8 <enable_sensor_features+0x52>
    {
        rslt = set_any_motion(BMI2_ENABLE, dev);
 80080ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080cc:	2001      	movs	r0, #1
 80080ce:	f7fd ffd5 	bl	800607c <set_any_motion>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable no motion feature */
    if (sensor_sel & BMI2_NO_MOT_SEL)
 80080d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080dc:	f002 0a20 	and.w	sl, r2, #32
 80080e0:	f04f 0b00 	mov.w	fp, #0
 80080e4:	ea5a 030b 	orrs.w	r3, sl, fp
 80080e8:	d006      	beq.n	80080f8 <enable_sensor_features+0x72>
    {
        rslt = set_no_motion(BMI2_ENABLE, dev);
 80080ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080ec:	2001      	movs	r0, #1
 80080ee:	f7fe f839 	bl	8006164 <set_no_motion>
 80080f2:	4603      	mov	r3, r0
 80080f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step detector feature */
    if (sensor_sel & BMI2_STEP_DETECT_SEL)
 80080f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080fc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008100:	633b      	str	r3, [r7, #48]	@ 0x30
 8008102:	2300      	movs	r3, #0
 8008104:	637b      	str	r3, [r7, #52]	@ 0x34
 8008106:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800810a:	460b      	mov	r3, r1
 800810c:	4313      	orrs	r3, r2
 800810e:	d006      	beq.n	800811e <enable_sensor_features+0x98>
    {
        rslt = set_step_detector(BMI2_ENABLE, dev);
 8008110:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008112:	2001      	movs	r0, #1
 8008114:	f7fe f89a 	bl	800624c <set_step_detector>
 8008118:	4603      	mov	r3, r0
 800811a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step counter feature */
    if (sensor_sel & BMI2_STEP_COUNT_SEL)
 800811e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008122:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008126:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008128:	2300      	movs	r3, #0
 800812a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800812c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008130:	460b      	mov	r3, r1
 8008132:	4313      	orrs	r3, r2
 8008134:	d006      	beq.n	8008144 <enable_sensor_features+0xbe>
    {
        rslt = set_step_counter(BMI2_ENABLE, dev);
 8008136:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008138:	2001      	movs	r0, #1
 800813a:	f7fe f8fe 	bl	800633a <set_step_counter>
 800813e:	4603      	mov	r3, r0
 8008140:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable step activity feature */
    if (sensor_sel & BMI2_STEP_ACT_SEL)
 8008144:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008148:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800814c:	623b      	str	r3, [r7, #32]
 800814e:	2300      	movs	r3, #0
 8008150:	627b      	str	r3, [r7, #36]	@ 0x24
 8008152:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008156:	460b      	mov	r3, r1
 8008158:	4313      	orrs	r3, r2
 800815a:	d006      	beq.n	800816a <enable_sensor_features+0xe4>
    {
        rslt = set_step_activity(BMI2_ENABLE, dev);
 800815c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800815e:	2001      	movs	r0, #1
 8008160:	f7fe f9d7 	bl	8006512 <set_step_activity>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable gyroscope user gain */
    if (sensor_sel & BMI2_GYRO_GAIN_UPDATE_SEL)
 800816a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800816e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8008172:	61bb      	str	r3, [r7, #24]
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]
 8008178:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800817c:	460b      	mov	r3, r1
 800817e:	4313      	orrs	r3, r2
 8008180:	d006      	beq.n	8008190 <enable_sensor_features+0x10a>
    {
        rslt = set_gyro_user_gain(BMI2_ENABLE, dev);
 8008182:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008184:	2001      	movs	r0, #1
 8008186:	f7fe fb9d 	bl	80068c4 <set_gyro_user_gain>
 800818a:	4603      	mov	r3, r0
 800818c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable gyroscope self-offset correction feature */
    if (sensor_sel & BMI2_GYRO_SELF_OFF_SEL)
 8008190:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008194:	2100      	movs	r1, #0
 8008196:	6139      	str	r1, [r7, #16]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	617b      	str	r3, [r7, #20]
 800819e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80081a2:	460b      	mov	r3, r1
 80081a4:	4313      	orrs	r3, r2
 80081a6:	d006      	beq.n	80081b6 <enable_sensor_features+0x130>
    {
        rslt = set_gyro_self_offset_corr(BMI2_ENABLE, dev);
 80081a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081aa:	2001      	movs	r0, #1
 80081ac:	f7fe fa28 	bl	8006600 <set_gyro_self_offset_corr>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable wrist gesture feature for wearable variant */
    if (sensor_sel & BMI2_WRIST_GEST_SEL)
 80081b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80081ba:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80081be:	60bb      	str	r3, [r7, #8]
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80081c8:	460b      	mov	r3, r1
 80081ca:	4313      	orrs	r3, r2
 80081cc:	d006      	beq.n	80081dc <enable_sensor_features+0x156>
    {
        rslt = set_wrist_gesture(BMI2_ENABLE, dev);
 80081ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081d0:	2001      	movs	r0, #1
 80081d2:	f7fe fa8b 	bl	80066ec <set_wrist_gesture>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable wrist wear wake-up feature */
    if (sensor_sel & BMI2_WRIST_WEAR_WAKE_UP_SEL)
 80081dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80081e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80081e4:	603b      	str	r3, [r7, #0]
 80081e6:	2300      	movs	r3, #0
 80081e8:	607b      	str	r3, [r7, #4]
 80081ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081ee:	460b      	mov	r3, r1
 80081f0:	4313      	orrs	r3, r2
 80081f2:	d006      	beq.n	8008202 <enable_sensor_features+0x17c>
    {
        rslt = set_wrist_wear_wake_up(BMI2_ENABLE, dev);
 80081f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081f6:	2001      	movs	r0, #1
 80081f8:	f7fe faee 	bl	80067d8 <set_wrist_wear_wake_up>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    return rslt;
 8008202:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 8008206:	4618      	mov	r0, r3
 8008208:	3750      	adds	r7, #80	@ 0x50
 800820a:	46bd      	mov	sp, r7
 800820c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008210 <disable_main_sensors>:

/*!
 * @brief This internal API is used to disable main sensors like accel, gyro, aux and temperature.
 */
static int8_t disable_main_sensors(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8008210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008214:	b08a      	sub	sp, #40	@ 0x28
 8008216:	af00      	add	r7, sp, #0
 8008218:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800821c:	617a      	str	r2, [r7, #20]
    int8_t rslt;

    /* Variable to store register values */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 800821e:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2201      	movs	r2, #1
 8008226:	207d      	movs	r0, #125	@ 0x7d
 8008228:	f7fb fb72 	bl	8003910 <bmi2_get_regs>
 800822c:	4603      	mov	r3, r0
 800822e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMI2_OK)
 8008232:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008236:	2b00      	cmp	r3, #0
 8008238:	d158      	bne.n	80082ec <disable_main_sensors+0xdc>
    {
        /* Disable accelerometer */
        if (sensor_sel & BMI2_ACCEL_SENS_SEL)
 800823a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800823e:	f002 0301 	and.w	r3, r2, #1
 8008242:	60bb      	str	r3, [r7, #8]
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800824c:	460b      	mov	r3, r1
 800824e:	4313      	orrs	r3, r2
 8008250:	d006      	beq.n	8008260 <disable_main_sensors+0x50>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_ACC_EN);
 8008252:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008256:	f023 0304 	bic.w	r3, r3, #4
 800825a:	b2db      	uxtb	r3, r3
 800825c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable gyroscope */
        if (sensor_sel & BMI2_GYRO_SENS_SEL)
 8008260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008264:	f002 0302 	and.w	r3, r2, #2
 8008268:	603b      	str	r3, [r7, #0]
 800826a:	2300      	movs	r3, #0
 800826c:	607b      	str	r3, [r7, #4]
 800826e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008272:	460b      	mov	r3, r1
 8008274:	4313      	orrs	r3, r2
 8008276:	d006      	beq.n	8008286 <disable_main_sensors+0x76>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_GYR_EN);
 8008278:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800827c:	f023 0302 	bic.w	r3, r3, #2
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable auxiliary sensor */
        if (sensor_sel & BMI2_AUX_SENS_SEL)
 8008286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800828a:	f002 0a04 	and.w	sl, r2, #4
 800828e:	f04f 0b00 	mov.w	fp, #0
 8008292:	ea5a 030b 	orrs.w	r3, sl, fp
 8008296:	d006      	beq.n	80082a6 <disable_main_sensors+0x96>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_AUX_EN);
 8008298:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800829c:	f023 0301 	bic.w	r3, r3, #1
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable temperature sensor */
        if (sensor_sel & BMI2_TEMP_SENS_SEL)
 80082a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	f003 0901 	and.w	r9, r3, #1
 80082b2:	ea58 0309 	orrs.w	r3, r8, r9
 80082b6:	d006      	beq.n	80082c6 <disable_main_sensors+0xb6>
        {
            reg_data = BMI2_SET_BIT_VAL0(reg_data, BMI2_TEMP_EN);
 80082b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082bc:	f023 0308 	bic.w	r3, r3, #8
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Disable the sensors that are set in the power control register */
        if (sensor_sel & BMI2_MAIN_SENSORS)
 80082c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082ca:	f002 0407 	and.w	r4, r2, #7
 80082ce:	f003 0501 	and.w	r5, r3, #1
 80082d2:	ea54 0305 	orrs.w	r3, r4, r5
 80082d6:	d009      	beq.n	80082ec <disable_main_sensors+0xdc>
        {
            rslt = bmi2_set_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 80082d8:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2201      	movs	r2, #1
 80082e0:	207d      	movs	r0, #125	@ 0x7d
 80082e2:	f7fb fb88 	bl	80039f6 <bmi2_set_regs>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 80082ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3728      	adds	r7, #40	@ 0x28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080082fa <disable_sensor_features>:

/*!
 * @brief This internal API is used to disable sensor features.
 */
static int8_t disable_sensor_features(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 80082fa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082fe:	b094      	sub	sp, #80	@ 0x50
 8008300:	af00      	add	r7, sp, #0
 8008302:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8008306:	63fa      	str	r2, [r7, #60]	@ 0x3c
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    /* Disable sig-motion feature */
    if (sensor_sel & BMI2_SIG_MOTION_SEL)
 800830e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008312:	f002 0408 	and.w	r4, r2, #8
 8008316:	2500      	movs	r5, #0
 8008318:	ea54 0305 	orrs.w	r3, r4, r5
 800831c:	d006      	beq.n	800832c <disable_sensor_features+0x32>
    {
        rslt = set_sig_motion(BMI2_DISABLE, dev);
 800831e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008320:	2000      	movs	r0, #0
 8008322:	f7fe f881 	bl	8006428 <set_sig_motion>
 8008326:	4603      	mov	r3, r0
 8008328:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable any-motion feature */
    if (sensor_sel & BMI2_ANY_MOT_SEL)
 800832c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008330:	f002 0810 	and.w	r8, r2, #16
 8008334:	f04f 0900 	mov.w	r9, #0
 8008338:	ea58 0309 	orrs.w	r3, r8, r9
 800833c:	d006      	beq.n	800834c <disable_sensor_features+0x52>
    {
        rslt = set_any_motion(BMI2_DISABLE, dev);
 800833e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008340:	2000      	movs	r0, #0
 8008342:	f7fd fe9b 	bl	800607c <set_any_motion>
 8008346:	4603      	mov	r3, r0
 8008348:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable no-motion feature */
    if (sensor_sel & BMI2_NO_MOT_SEL)
 800834c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008350:	f002 0a20 	and.w	sl, r2, #32
 8008354:	f04f 0b00 	mov.w	fp, #0
 8008358:	ea5a 030b 	orrs.w	r3, sl, fp
 800835c:	d006      	beq.n	800836c <disable_sensor_features+0x72>
    {
        rslt = set_no_motion(BMI2_DISABLE, dev);
 800835e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008360:	2000      	movs	r0, #0
 8008362:	f7fd feff 	bl	8006164 <set_no_motion>
 8008366:	4603      	mov	r3, r0
 8008368:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable step detector feature */
    if (sensor_sel & BMI2_STEP_DETECT_SEL)
 800836c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008370:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008374:	633b      	str	r3, [r7, #48]	@ 0x30
 8008376:	2300      	movs	r3, #0
 8008378:	637b      	str	r3, [r7, #52]	@ 0x34
 800837a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800837e:	460b      	mov	r3, r1
 8008380:	4313      	orrs	r3, r2
 8008382:	d006      	beq.n	8008392 <disable_sensor_features+0x98>
    {
        rslt = set_step_detector(BMI2_DISABLE, dev);
 8008384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008386:	2000      	movs	r0, #0
 8008388:	f7fd ff60 	bl	800624c <set_step_detector>
 800838c:	4603      	mov	r3, r0
 800838e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable step counter feature */
    if (sensor_sel & BMI2_STEP_COUNT_SEL)
 8008392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008396:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800839a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800839c:	2300      	movs	r3, #0
 800839e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80083a4:	460b      	mov	r3, r1
 80083a6:	4313      	orrs	r3, r2
 80083a8:	d006      	beq.n	80083b8 <disable_sensor_features+0xbe>
    {
        rslt = set_step_counter(BMI2_DISABLE, dev);
 80083aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083ac:	2000      	movs	r0, #0
 80083ae:	f7fd ffc4 	bl	800633a <set_step_counter>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable step activity feature */
    if (sensor_sel & BMI2_STEP_ACT_SEL)
 80083b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80083bc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80083c0:	623b      	str	r3, [r7, #32]
 80083c2:	2300      	movs	r3, #0
 80083c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80083c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80083ca:	460b      	mov	r3, r1
 80083cc:	4313      	orrs	r3, r2
 80083ce:	d006      	beq.n	80083de <disable_sensor_features+0xe4>
    {
        rslt = set_step_activity(BMI2_DISABLE, dev);
 80083d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083d2:	2000      	movs	r0, #0
 80083d4:	f7fe f89d 	bl	8006512 <set_step_activity>
 80083d8:	4603      	mov	r3, r0
 80083da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable gyroscope user gain */
    if (sensor_sel & BMI2_GYRO_GAIN_UPDATE_SEL)
 80083de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80083e2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80083e6:	61bb      	str	r3, [r7, #24]
 80083e8:	2300      	movs	r3, #0
 80083ea:	61fb      	str	r3, [r7, #28]
 80083ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80083f0:	460b      	mov	r3, r1
 80083f2:	4313      	orrs	r3, r2
 80083f4:	d006      	beq.n	8008404 <disable_sensor_features+0x10a>
    {
        rslt = set_gyro_user_gain(BMI2_DISABLE, dev);
 80083f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083f8:	2000      	movs	r0, #0
 80083fa:	f7fe fa63 	bl	80068c4 <set_gyro_user_gain>
 80083fe:	4603      	mov	r3, r0
 8008400:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable gyroscope self-offset correction feature */
    if (sensor_sel & BMI2_GYRO_SELF_OFF_SEL)
 8008404:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008408:	2100      	movs	r1, #0
 800840a:	6139      	str	r1, [r7, #16]
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008416:	460b      	mov	r3, r1
 8008418:	4313      	orrs	r3, r2
 800841a:	d006      	beq.n	800842a <disable_sensor_features+0x130>
    {
        rslt = set_gyro_self_offset_corr(BMI2_DISABLE, dev);
 800841c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800841e:	2000      	movs	r0, #0
 8008420:	f7fe f8ee 	bl	8006600 <set_gyro_self_offset_corr>
 8008424:	4603      	mov	r3, r0
 8008426:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Disable wrist gesture feature for wearable variant*/
    if (sensor_sel & BMI2_WRIST_GEST_SEL)
 800842a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800842e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008432:	60bb      	str	r3, [r7, #8]
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800843c:	460b      	mov	r3, r1
 800843e:	4313      	orrs	r3, r2
 8008440:	d006      	beq.n	8008450 <disable_sensor_features+0x156>
    {
        rslt = set_wrist_gesture(BMI2_DISABLE, dev);
 8008442:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008444:	2000      	movs	r0, #0
 8008446:	f7fe f951 	bl	80066ec <set_wrist_gesture>
 800844a:	4603      	mov	r3, r0
 800844c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    /* Enable wrist wear wake-up feature */
    if (sensor_sel & BMI2_WRIST_WEAR_WAKE_UP_SEL)
 8008450:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008454:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008458:	603b      	str	r3, [r7, #0]
 800845a:	2300      	movs	r3, #0
 800845c:	607b      	str	r3, [r7, #4]
 800845e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008462:	460b      	mov	r3, r1
 8008464:	4313      	orrs	r3, r2
 8008466:	d006      	beq.n	8008476 <disable_sensor_features+0x17c>
    {
        rslt = set_wrist_wear_wake_up(BMI2_DISABLE, dev);
 8008468:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800846a:	2000      	movs	r0, #0
 800846c:	f7fe f9b4 	bl	80067d8 <set_wrist_wear_wake_up>
 8008470:	4603      	mov	r3, r0
 8008472:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    return rslt;
 8008476:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800847a:	4618      	mov	r0, r3
 800847c:	3750      	adds	r7, #80	@ 0x50
 800847e:	46bd      	mov	sp, r7
 8008480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008484 <bmi2_set_i2c_handle>:
#include "i2c.h" // Assuming your I2C_HandleTypeDef hi2c3 is declared here or in main.h

// Static pointer to the I2C handle for BMI270
static I2C_HandleTypeDef* bmi2_i2c_hal_handle = NULL;

void bmi2_set_i2c_handle(I2C_HandleTypeDef* hi2c_bmi) {
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
    bmi2_i2c_hal_handle = hi2c_bmi;
 800848c:	4a04      	ldr	r2, [pc, #16]	@ (80084a0 <bmi2_set_i2c_handle+0x1c>)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6013      	str	r3, [r2, #0]
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	200006cc 	.word	0x200006cc

080084a4 <bmi2_i2c_read>:

BMI2_INTF_RETURN_TYPE bmi2_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b088      	sub	sp, #32
 80084a8:	af04      	add	r7, sp, #16
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	4603      	mov	r3, r0
 80084b2:	73fb      	strb	r3, [r7, #15]
    (void)intf_ptr; // intf_ptr is the I2C handle passed via bmi2_dev structure, we use the static one

    if (bmi2_i2c_hal_handle == NULL) {
 80084b4:	4b10      	ldr	r3, [pc, #64]	@ (80084f8 <bmi2_i2c_read+0x54>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d102      	bne.n	80084c2 <bmi2_i2c_read+0x1e>
        return BMI2_E_NULL_PTR; // Or a specific error for uninitialized handle
 80084bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084c0:	e016      	b.n	80084f0 <bmi2_i2c_read+0x4c>
    }

    // STM32 HAL I2C read function typically requires the device address to be shifted left by 1
    // The HAL_I2C_Mem_Read function is suitable here.
    if (HAL_I2C_Mem_Read(bmi2_i2c_hal_handle, (uint16_t)(BMI270_I2C_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) == HAL_OK) {
 80084c2:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <bmi2_i2c_read+0x54>)
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80084d2:	9102      	str	r1, [sp, #8]
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	2301      	movs	r3, #1
 80084dc:	21d0      	movs	r1, #208	@ 0xd0
 80084de:	f004 fbb3 	bl	800cc48 <HAL_I2C_Mem_Read>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <bmi2_i2c_read+0x48>
        return BMI2_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	e001      	b.n	80084f0 <bmi2_i2c_read+0x4c>
    } else {
        return BMI2_E_COM_FAIL;
 80084ec:	f06f 0301 	mvn.w	r3, #1
    }
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	200006cc 	.word	0x200006cc

080084fc <bmi2_i2c_write>:

BMI2_INTF_RETURN_TYPE bmi2_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af04      	add	r7, sp, #16
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	607a      	str	r2, [r7, #4]
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]
    (void)intf_ptr; // intf_ptr is the I2C handle passed via bmi2_dev structure, we use the static one

    if (bmi2_i2c_hal_handle == NULL) {
 800850c:	4b10      	ldr	r3, [pc, #64]	@ (8008550 <bmi2_i2c_write+0x54>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <bmi2_i2c_write+0x1e>
        return BMI2_E_NULL_PTR; // Or a specific error for uninitialized handle
 8008514:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008518:	e016      	b.n	8008548 <bmi2_i2c_write+0x4c>
    }
    
    // STM32 HAL I2C write function
    // The HAL_I2C_Mem_Write function is suitable here.
    if (HAL_I2C_Mem_Write(bmi2_i2c_hal_handle, (uint16_t)(BMI270_I2C_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)reg_data, len, HAL_MAX_DELAY) == HAL_OK) {
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <bmi2_i2c_write+0x54>)
 800851c:	6818      	ldr	r0, [r3, #0]
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	b29a      	uxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	b29b      	uxth	r3, r3
 8008526:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800852a:	9102      	str	r1, [sp, #8]
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	2301      	movs	r3, #1
 8008534:	21d0      	movs	r1, #208	@ 0xd0
 8008536:	f004 fa73 	bl	800ca20 <HAL_I2C_Mem_Write>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <bmi2_i2c_write+0x48>
        return BMI2_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	e001      	b.n	8008548 <bmi2_i2c_write+0x4c>
    } else {
        return BMI2_E_COM_FAIL;
 8008544:	f06f 0301 	mvn.w	r3, #1
    }
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	200006cc 	.word	0x200006cc

08008554 <bmi2_delay_us>:

void bmi2_delay_us(uint32_t period_us, void *intf_ptr) {
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
    (void)intf_ptr; // Not used in this simple implementation
    
    // HAL_Delay is in milliseconds. For microsecond delay, a more precise timer is needed.
    // For initial testing, if period_us is large enough:
    if (period_us >= 1000) {
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008564:	d308      	bcc.n	8008578 <bmi2_delay_us+0x24>
        HAL_Delay(period_us / 1000);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a18      	ldr	r2, [pc, #96]	@ (80085cc <bmi2_delay_us+0x78>)
 800856a:	fba2 2303 	umull	r2, r3, r2, r3
 800856e:	099b      	lsrs	r3, r3, #6
 8008570:	4618      	mov	r0, r3
 8008572:	f001 fdb1 	bl	800a0d8 <HAL_Delay>
             for (i = 0; i < 10; ++i) { // minimal delay
                __NOP();
             }
        }
    }
 8008576:	e024      	b.n	80085c2 <bmi2_delay_us+0x6e>
        uint32_t delay_cycles = period_us * (SystemCoreClock / 1000000U / 5U); // Approximate factor
 8008578:	4b15      	ldr	r3, [pc, #84]	@ (80085d0 <bmi2_delay_us+0x7c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a15      	ldr	r2, [pc, #84]	@ (80085d4 <bmi2_delay_us+0x80>)
 800857e:	fba2 2303 	umull	r2, r3, r2, r3
 8008582:	0d5a      	lsrs	r2, r3, #21
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	fb02 f303 	mul.w	r3, r2, r3
 800858a:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < delay_cycles; ++i) {
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	e003      	b.n	800859a <bmi2_delay_us+0x46>
            __NOP();
 8008592:	bf00      	nop
        for (i = 0; i < delay_cycles; ++i) {
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	3301      	adds	r3, #1
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d3f7      	bcc.n	8008592 <bmi2_delay_us+0x3e>
        if (period_us > 0 && delay_cycles == 0) { // ensure at least minimal delay for very small period_us
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00c      	beq.n	80085c2 <bmi2_delay_us+0x6e>
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d109      	bne.n	80085c2 <bmi2_delay_us+0x6e>
             for (i = 0; i < 10; ++i) { // minimal delay
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	e003      	b.n	80085bc <bmi2_delay_us+0x68>
                __NOP();
 80085b4:	bf00      	nop
             for (i = 0; i < 10; ++i) { // minimal delay
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b09      	cmp	r3, #9
 80085c0:	d9f8      	bls.n	80085b4 <bmi2_delay_us+0x60>
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	10624dd3 	.word	0x10624dd3
 80085d0:	20000074 	.word	0x20000074
 80085d4:	6b5fca6b 	.word	0x6b5fca6b

080085d8 <_ZN7DRV82144initERK14DRV8214_Config>:
 */

#include "drv8214.h"

// Initialize the motor driver with default settings
uint8_t DRV8214::init(const DRV8214_Config& cfg) {
 80085d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]

    // Store the configuration settings
    config = cfg;
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	f102 000c 	add.w	r0, r2, #12
 80085ea:	f103 0420 	add.w	r4, r3, #32
 80085ee:	4602      	mov	r2, r0
 80085f0:	4619      	mov	r1, r3
 80085f2:	f8d1 c000 	ldr.w	ip, [r1]
 80085f6:	684e      	ldr	r6, [r1, #4]
 80085f8:	688d      	ldr	r5, [r1, #8]
 80085fa:	68c9      	ldr	r1, [r1, #12]
 80085fc:	f8c2 c000 	str.w	ip, [r2]
 8008600:	6056      	str	r6, [r2, #4]
 8008602:	6095      	str	r5, [r2, #8]
 8008604:	60d1      	str	r1, [r2, #12]
 8008606:	3310      	adds	r3, #16
 8008608:	3010      	adds	r0, #16
 800860a:	42a3      	cmp	r3, r4
 800860c:	d1ef      	bne.n	80085ee <_ZN7DRV82144initERK14DRV8214_Config+0x16>
 800860e:	4602      	mov	r2, r0
 8008610:	6818      	ldr	r0, [r3, #0]
 8008612:	6859      	ldr	r1, [r3, #4]
 8008614:	6010      	str	r0, [r2, #0]
 8008616:	6051      	str	r1, [r2, #4]
 8008618:	8919      	ldrh	r1, [r3, #8]
 800861a:	7a9b      	ldrb	r3, [r3, #10]
 800861c:	8111      	strh	r1, [r2, #8]
 800861e:	7293      	strb	r3, [r2, #10]

    disableHbridge(); // Disable H-bridge to be able to configure the driver
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f99a 	bl	800895a <_ZN7DRV821414disableHbridgeEv>
    setControlMode(config.control_mode, config.I2CControlled); // Default to PWM control with I2C enabled
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	7b59      	ldrb	r1, [r3, #13]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	7b1b      	ldrb	r3, [r3, #12]
 800862e:	461a      	mov	r2, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 ffb4 	bl	800959e <_ZN7DRV821414setControlModeE11ControlModeb>
    setRegulationMode(config.regulation_mode); // Default to SPEED regulation
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	7b9b      	ldrb	r3, [r3, #14]
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 ffd1 	bl	80095e4 <_ZN7DRV821417setRegulationModeE14RegulationMode>
    setVoltageRange(config.voltage_range);  // Default to 0 V - 3.92 V range
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	7bdb      	ldrb	r3, [r3, #15]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f9a9 	bl	80089a0 <_ZN7DRV821415setVoltageRangeEb>
    setOvervoltageProtection(config.ovp_enabled); // Default to overvoltage protection enabled
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	7d5b      	ldrb	r3, [r3, #21]
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f9b7 	bl	80089c8 <_ZN7DRV821424setOvervoltageProtectionEb>
    setCurrentRegMode(config.current_reg_mode); // Default to no current regulation
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7e1b      	ldrb	r3, [r3, #24]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fa05 	bl	8008a70 <_ZN7DRV821417setCurrentRegModeEh>
    setStallDetection(config.stall_enabled); // Default to stall detection enabled
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7d1b      	ldrb	r3, [r3, #20]
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f983 	bl	8008978 <_ZN7DRV821417setStallDetectionEb>
    setStallBehavior(config.stall_behavior); // Default to outputs disabled on stall
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	7d9b      	ldrb	r3, [r3, #22]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fa37 	bl	8008aec <_ZN7DRV821416setStallBehaviorEb>
    enableStallInterrupt(); // Default to enable stall interrupt
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 faa1 	bl	8008bc6 <_ZN7DRV821420enableStallInterruptEv>
    enableCountThresholdInterrupt(); // Default to enable count threshold interrupt
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 faad 	bl	8008be4 <_ZN7DRV821429enableCountThresholdInterruptEv>
    setBridgeBehaviorThresholdReached(config.bridge_behavior_thr_reached); // Default to H-bridge stays enabled when RC_CNT exceeds threshold
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	7ddb      	ldrb	r3, [r3, #23]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fab6 	bl	8008c02 <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>
    setInternalVoltageReference(0); // Default to internal voltage reference of 500mV
 8008696:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8008718 <_ZN7DRV82144initERK14DRV8214_Config+0x140>
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fa3a 	bl	8008b14 <_ZN7DRV821427setInternalVoltageReferenceEf>
    setSoftStartStop(config.soft_start_stop_enabled); // Default to soft start/stop disbaled
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fabe 	bl	8008c2a <_ZN7DRV821416setSoftStartStopEb>
    setInrushDuration(config.inrush_duration); // Default to 500 ms
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f9bf 	bl	8008a38 <_ZN7DRV821417setInrushDurationEt>
    setResistanceRelatedParameters(); // configure the INV_R and INV_R_SCALE values
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fee0 	bl	8009480 <_ZN7DRV821430setResistanceRelatedParametersEv>
    enableRippleCount(); // Default to enable ripple counting
 80086c0:	2101      	movs	r1, #1
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fd94 	bl	80091f0 <_ZN7DRV821417enableRippleCountEb>
    resetRippleCounter(); // Default to reset ripple counter
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f991 	bl	80089f0 <_ZN7DRV821418resetRippleCounterEv>
    setKMC(config.kmc); // Default to KMC = 30
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 ff50 	bl	800957c <_ZN7DRV82146setKMCEh>
    setKMCScale(config.kmc_scale); // Default to KMC scale factor = 24 x 2^13
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fe91 	bl	800940c <_ZN7DRV821411setKMCScaleEh>
    brakeMotor(true); // Default to brake motor
 80086ea:	2101      	movs	r1, #1
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 f879 	bl	80097e4 <_ZN7DRV821410brakeMotorEb>
    enableErrorCorrection(false); // Default to disable error correction
 80086f2:	2100      	movs	r1, #0
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fd8c 	bl	8009212 <_ZN7DRV821421enableErrorCorrectionEb>
    if (config.verbose) {printMotorConfig(true);}
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <_ZN7DRV82144initERK14DRV8214_Config+0x134>
 8008704:	2101      	movs	r1, #1
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 f8ea 	bl	80098e0 <_ZN7DRV821416printMotorConfigEb>

    return DRV8214_OK; // Return success code
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008716:	bf00      	nop
	...

08008720 <_ZN7DRV821416getMotorSpeedRPMEv>:

uint8_t DRV8214::getFaultStatus() {
    return drv8214_i2c_read_register(address, DRV8214_FAULT);
}

uint32_t DRV8214::getMotorSpeedRPM() {
 8008720:	b5b0      	push	{r4, r5, r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
    return ((drv8214_i2c_read_register(address, DRV8214_RC_STATUS1) * config.w_scale * 60) / (2 * M_PI * ripples_per_revolution));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2101      	movs	r1, #1
 800872e:	4618      	mov	r0, r3
 8008730:	f001 fba4 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 8008734:	4603      	mov	r3, r0
 8008736:	461a      	mov	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800873e:	fb03 f202 	mul.w	r2, r3, r2
 8008742:	4613      	mov	r3, r2
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4618      	mov	r0, r3
 800874c:	f7f7 fec2 	bl	80004d4 <__aeabi_i2d>
 8008750:	4604      	mov	r4, r0
 8008752:	460d      	mov	r5, r1
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	889b      	ldrh	r3, [r3, #4]
 8008758:	4618      	mov	r0, r3
 800875a:	f7f7 febb 	bl	80004d4 <__aeabi_i2d>
 800875e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008790 <_ZN7DRV821416getMotorSpeedRPMEv+0x70>)
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	f7f7 ff20 	bl	80005a8 <__aeabi_dmul>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4620      	mov	r0, r4
 800876e:	4629      	mov	r1, r5
 8008770:	f7f8 f844 	bl	80007fc <__aeabi_ddiv>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4610      	mov	r0, r2
 800877a:	4619      	mov	r1, r3
 800877c:	f7f8 f9ec 	bl	8000b58 <__aeabi_d2uiz>
 8008780:	4603      	mov	r3, r0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bdb0      	pop	{r4, r5, r7, pc}
 800878a:	bf00      	nop
 800878c:	f3af 8000 	nop.w
 8008790:	54442d18 	.word	0x54442d18
 8008794:	401921fb 	.word	0x401921fb

08008798 <_ZN7DRV821414getRippleCountEv>:

uint8_t DRV8214::getMotorSpeedRegister() {
    return drv8214_i2c_read_register(address, DRV8214_RC_STATUS1);
}

uint16_t DRV8214::getRippleCount() {
 8008798:	b590      	push	{r4, r7, lr}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
    return (drv8214_i2c_read_register(address, DRV8214_RC_STATUS3) << 8) | drv8214_i2c_read_register(address, DRV8214_RC_STATUS2);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	2103      	movs	r1, #3
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fb68 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 80087ac:	4603      	mov	r3, r0
 80087ae:	b21b      	sxth	r3, r3
 80087b0:	021b      	lsls	r3, r3, #8
 80087b2:	b21c      	sxth	r4, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2102      	movs	r1, #2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f001 fb5e 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 80087c0:	4603      	mov	r3, r0
 80087c2:	b21b      	sxth	r3, r3
 80087c4:	4323      	orrs	r3, r4
 80087c6:	b21b      	sxth	r3, r3
 80087c8:	b29b      	uxth	r3, r3
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd90      	pop	{r4, r7, pc}
	...

080087d4 <_ZN7DRV821415getMotorVoltageEv>:

float DRV8214::getMotorVoltage() {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
    if (config.voltage_range) {
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	7bdb      	ldrb	r3, [r3, #15]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d016      	beq.n	8008812 <_ZN7DRV821415getMotorVoltageEv+0x3e>
        float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 255.0f) * 3.92f;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2104      	movs	r1, #4
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 fb46 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 80087f0:	4603      	mov	r3, r0
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087fa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80088a4 <_ZN7DRV821415getMotorVoltageEv+0xd0>
 80087fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008802:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80088a8 <_ZN7DRV821415getMotorVoltageEv+0xd4>
 8008806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800880a:	edc7 7a03 	vstr	s15, [r7, #12]
        return voltage;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	e040      	b.n	8008894 <_ZN7DRV821415getMotorVoltageEv+0xc0>
    } else {
        if (config.ovp_enabled) {
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	7d5b      	ldrb	r3, [r3, #21]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d026      	beq.n	8008868 <_ZN7DRV821415getMotorVoltageEv+0x94>
            // If OVP is enabled, the maximum voltage is 11 V
            if (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) > 0xB0) {
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2104      	movs	r1, #4
 8008820:	4618      	mov	r0, r3
 8008822:	f001 fb2b 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 8008826:	4603      	mov	r3, r0
 8008828:	2bb0      	cmp	r3, #176	@ 0xb0
 800882a:	bf8c      	ite	hi
 800882c:	2301      	movhi	r3, #1
 800882e:	2300      	movls	r3, #0
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <_ZN7DRV821415getMotorVoltageEv+0x66>
                return 11.0f;
 8008836:	4b1d      	ldr	r3, [pc, #116]	@ (80088ac <_ZN7DRV821415getMotorVoltageEv+0xd8>)
 8008838:	e02c      	b.n	8008894 <_ZN7DRV821415getMotorVoltageEv+0xc0>
            } else {     // 00h corresponds to 0 V and B0h corresponds to 11 V.
                float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 176.0f) * 11.0f;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2104      	movs	r1, #4
 8008840:	4618      	mov	r0, r3
 8008842:	f001 fb1b 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 8008846:	4603      	mov	r3, r0
 8008848:	ee07 3a90 	vmov	s15, r3
 800884c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008850:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80088b0 <_ZN7DRV821415getMotorVoltageEv+0xdc>
 8008854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008858:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 800885c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008860:	edc7 7a04 	vstr	s15, [r7, #16]
                return voltage;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	e015      	b.n	8008894 <_ZN7DRV821415getMotorVoltageEv+0xc0>
            }
        } else {
            float voltage = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS1) / 255.0f) * 15.7f;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2104      	movs	r1, #4
 800886e:	4618      	mov	r0, r3
 8008870:	f001 fb04 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 8008874:	4603      	mov	r3, r0
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800887e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80088a4 <_ZN7DRV821415getMotorVoltageEv+0xd0>
 8008882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008886:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80088b4 <_ZN7DRV821415getMotorVoltageEv+0xe0>
 800888a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800888e:	edc7 7a05 	vstr	s15, [r7, #20]
            return voltage;
 8008892:	697b      	ldr	r3, [r7, #20]
        }
    }
}
 8008894:	ee07 3a90 	vmov	s15, r3
 8008898:	eeb0 0a67 	vmov.f32	s0, s15
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	437f0000 	.word	0x437f0000
 80088a8:	407ae148 	.word	0x407ae148
 80088ac:	41300000 	.word	0x41300000
 80088b0:	43300000 	.word	0x43300000
 80088b4:	417b3333 	.word	0x417b3333

080088b8 <_ZN7DRV821415getMotorCurrentEv>:

uint8_t DRV8214::getMotorVoltageRegister() {
    return drv8214_i2c_read_register(address, DRV8214_REG_STATUS1);
}

float DRV8214::getMotorCurrent() {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
    // 00h corresponds to 0 A and C0h corresponds to the maximum value set by the CS_GAIN_SEL bit
    float current = (drv8214_i2c_read_register(address, DRV8214_REG_STATUS2) / 192.0f) * config.MaxCurrent;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2105      	movs	r1, #5
 80088c6:	4618      	mov	r0, r3
 80088c8:	f001 fad8 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 80088cc:	4603      	mov	r3, r0
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088d6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80088fc <_ZN7DRV821415getMotorCurrentEv+0x44>
 80088da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80088e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e8:	edc7 7a03 	vstr	s15, [r7, #12]
    return current;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	ee07 3a90 	vmov	s15, r3
}
 80088f2:	eeb0 0a67 	vmov.f32	s0, s15
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	43400000 	.word	0x43400000

08008900 <_ZN7DRV821412getREG_CTRL1Ev>:

uint8_t DRV8214::getREG_CTRL0() {
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL0);
}

uint8_t DRV8214::getREG_CTRL1() {
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	210f      	movs	r1, #15
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fab4 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 8008914:	4603      	mov	r3, r0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <_ZN7DRV821412getREG_CTRL2Ev>:

uint8_t DRV8214::getREG_CTRL2() {
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
    return drv8214_i2c_read_register(address, DRV8214_REG_CTRL2);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2110      	movs	r1, #16
 800892c:	4618      	mov	r0, r3
 800892e:	f001 faa5 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 8008932:	4603      	mov	r3, r0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <_ZN7DRV821413enableHbridgeEv>:
uint8_t DRV8214::getRC_CTRL8() {
    return drv8214_i2c_read_register(address, DRV8214_RC_CTRL8);
}

// --- Control Functions ---
void DRV8214::enableHbridge() {
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OUT, true);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	7818      	ldrb	r0, [r3, #0]
 8008948:	2301      	movs	r3, #1
 800894a:	2280      	movs	r2, #128	@ 0x80
 800894c:	2109      	movs	r1, #9
 800894e:	f001 fad9 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <_ZN7DRV821414disableHbridgeEv>:

void DRV8214::disableHbridge() {
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OUT, false);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7818      	ldrb	r0, [r3, #0]
 8008966:	2300      	movs	r3, #0
 8008968:	2280      	movs	r2, #128	@ 0x80
 800896a:	2109      	movs	r1, #9
 800896c:	f001 faca 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <_ZN7DRV821417setStallDetectionEb>:

void DRV8214::setStallDetection(bool stall_en) {
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
    config.stall_enabled = stall_en;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	78fa      	ldrb	r2, [r7, #3]
 8008988:	751a      	strb	r2, [r3, #20]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG0_EN_STALL, stall_en);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	7818      	ldrb	r0, [r3, #0]
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	2220      	movs	r2, #32
 8008992:	210c      	movs	r1, #12
 8008994:	f001 fab6 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <_ZN7DRV821415setVoltageRangeEb>:

void DRV8214::setVoltageRange(bool range) {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	70fb      	strb	r3, [r7, #3]
    config.voltage_range = range;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	78fa      	ldrb	r2, [r7, #3]
 80089b0:	73da      	strb	r2, [r3, #15]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_VM_GAIN_SEL, range);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	7818      	ldrb	r0, [r3, #0]
 80089b6:	78fb      	ldrb	r3, [r7, #3]
 80089b8:	2208      	movs	r2, #8
 80089ba:	2109      	movs	r1, #9
 80089bc:	f001 faa2 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <_ZN7DRV821424setOvervoltageProtectionEb>:

void DRV8214::setOvervoltageProtection(bool OVP) {
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	70fb      	strb	r3, [r7, #3]
    config.ovp_enabled = OVP;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	755a      	strb	r2, [r3, #21]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_EN_OVP, true);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	7818      	ldrb	r0, [r3, #0]
 80089de:	2301      	movs	r3, #1
 80089e0:	2240      	movs	r2, #64	@ 0x40
 80089e2:	2109      	movs	r1, #9
 80089e4:	f001 fa8e 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <_ZN7DRV821418resetRippleCounterEv>:

void DRV8214::resetRippleCounter() {
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_CLR_CNT, true);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	7818      	ldrb	r0, [r3, #0]
 80089fc:	2301      	movs	r3, #1
 80089fe:	2204      	movs	r2, #4
 8008a00:	2109      	movs	r1, #9
 8008a02:	f001 fa7f 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008a06:	bf00      	nop
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <_ZN7DRV821415resetFaultFlagsEv>:

void DRV8214::resetFaultFlags() {
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
    disableHbridge();
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff ff9f 	bl	800895a <_ZN7DRV821414disableHbridgeEv>
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_CLR_FLT, true);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	7818      	ldrb	r0, [r3, #0]
 8008a20:	2301      	movs	r3, #1
 8008a22:	2202      	movs	r2, #2
 8008a24:	2109      	movs	r1, #9
 8008a26:	f001 fa6d 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
    enableHbridge();
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff ff86 	bl	800893c <_ZN7DRV821413enableHbridgeEv>
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <_ZN7DRV821417setInrushDurationEt>:

void DRV8214::disableDutyCycleControl() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG0, CONFIG0_DUTY_CTRL, false);
}

void DRV8214::setInrushDuration(uint16_t threshold) {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	807b      	strh	r3, [r7, #2]
    drv8214_i2c_write_register(address, DRV8214_CONFIG1, (threshold >> 8) & 0xFF);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	7818      	ldrb	r0, [r3, #0]
 8008a48:	887b      	ldrh	r3, [r7, #2]
 8008a4a:	0a1b      	lsrs	r3, r3, #8
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	461a      	mov	r2, r3
 8008a52:	210a      	movs	r1, #10
 8008a54:	f001 f9ec 	bl	8009e30 <_Z26drv8214_i2c_write_registerhhh>
    drv8214_i2c_write_register(address, DRV8214_CONFIG2, threshold & 0xFF);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	887a      	ldrh	r2, [r7, #2]
 8008a5e:	b2d2      	uxtb	r2, r2
 8008a60:	210b      	movs	r1, #11
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 f9e4 	bl	8009e30 <_Z26drv8214_i2c_write_registerhhh>
}
 8008a68:	bf00      	nop
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <_ZN7DRV821417setCurrentRegModeEh>:

void DRV8214::setCurrentRegMode(uint8_t mode) {
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]

    if (mode > 3) { mode = 3; } // Cap mode to 3
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d901      	bls.n	8008a86 <_ZN7DRV821417setCurrentRegModeEh+0x16>
 8008a82:	2303      	movs	r3, #3
 8008a84:	70fb      	strb	r3, [r7, #3]
    switch (mode){
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d823      	bhi.n	8008ad4 <_ZN7DRV821417setCurrentRegModeEh+0x64>
 8008a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a94 <_ZN7DRV821417setCurrentRegModeEh+0x24>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008aa5 	.word	0x08008aa5
 8008a98:	08008ab1 	.word	0x08008ab1
 8008a9c:	08008abd 	.word	0x08008abd
 8008aa0:	08008ac9 	.word	0x08008ac9
    case 0: // 0b00
        mode = 0x00; // No current regulation at anytime
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 0;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	761a      	strb	r2, [r3, #24]
        break;
 8008aae:	e012      	b.n	8008ad6 <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 1: // 0b01
        mode = 0x40; // Current regulation at all time if stall detection is desabled
 8008ab0:	2340      	movs	r3, #64	@ 0x40
 8008ab2:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 1; // Current regulation during tinrush only if stall detection is enabled
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	761a      	strb	r2, [r3, #24]
        break;       
 8008aba:	e00c      	b.n	8008ad6 <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 2: // 0b10
        mode = 0x80; // Current regulation at all time
 8008abc:	2380      	movs	r3, #128	@ 0x80
 8008abe:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 2;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	761a      	strb	r2, [r3, #24]
        break;
 8008ac6:	e006      	b.n	8008ad6 <_ZN7DRV821417setCurrentRegModeEh+0x66>
    case 3: // 0b11
        mode = 0xC0; // Current regulation at all time
 8008ac8:	23c0      	movs	r3, #192	@ 0xc0
 8008aca:	70fb      	strb	r3, [r7, #3]
        config.current_reg_mode = 3;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2203      	movs	r2, #3
 8008ad0:	761a      	strb	r2, [r3, #24]
        break;
 8008ad2:	e000      	b.n	8008ad6 <_ZN7DRV821417setCurrentRegModeEh+0x66>
    default:
        break;
 8008ad4:	bf00      	nop
    }
    drv8214_i2c_modify_register_bits(address, DRV8214_CONFIG3, CONFIG3_IMODE, mode);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	7818      	ldrb	r0, [r3, #0]
 8008ada:	78fb      	ldrb	r3, [r7, #3]
 8008adc:	22c0      	movs	r2, #192	@ 0xc0
 8008ade:	210c      	movs	r1, #12
 8008ae0:	f001 fa42 	bl	8009f68 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <_ZN7DRV821416setStallBehaviorEb>:

void DRV8214::setStallBehavior(bool behavior) {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
    // The SMODE bit programs the device's response to a stall condition. 
    // When SMODE = 0b, the STALL bit becomes 1b, the outputs are disabled
    // When SMODE = 1b, the STALL bit becomes 1b, but the outputs continue to drive current into the motor
    config.stall_behavior = behavior;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	78fa      	ldrb	r2, [r7, #3]
 8008afc:	759a      	strb	r2, [r3, #22]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_SMODE, behavior);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	7818      	ldrb	r0, [r3, #0]
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	2220      	movs	r2, #32
 8008b06:	210c      	movs	r1, #12
 8008b08:	f001 f9fc 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <_ZN7DRV821427setInternalVoltageReferenceEf>:

void DRV8214::setInternalVoltageReference(float reference_voltage) {
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	ed87 0a00 	vstr	s0, [r7]
    // VVREF must be lower than VVM by at least 1.25 V. The maximum recommended value of VVREF is 3.3 V. 
    // If INT_VREF bit is set to 1b, VVREF is internally selected with a fixed value of 500 mV.
    if (reference_voltage == 0) { 
 8008b20:	edd7 7a00 	vldr	s15, [r7]
 8008b24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b2c:	d10b      	bne.n	8008b46 <_ZN7DRV821427setInternalVoltageReferenceEf+0x32>
        config.Vref = 0.5f; // Default
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8008b34:	611a      	str	r2, [r3, #16]
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, true);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	7818      	ldrb	r0, [r3, #0]
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	2210      	movs	r2, #16
 8008b3e:	210c      	movs	r1, #12
 8008b40:	f001 f9e0 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
    } else { 
        config.Vref = reference_voltage;
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, false);
    }
}
 8008b44:	e009      	b.n	8008b5a <_ZN7DRV821427setInternalVoltageReferenceEf+0x46>
        config.Vref = reference_voltage;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	611a      	str	r2, [r3, #16]
        drv8214_i2c_modify_register(address, DRV8214_CONFIG3, CONFIG3_INT_VREF, false);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	7818      	ldrb	r0, [r3, #0]
 8008b50:	2300      	movs	r3, #0
 8008b52:	2210      	movs	r2, #16
 8008b54:	210c      	movs	r1, #12
 8008b56:	f001 f9d5 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008b5a:	bf00      	nop
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <_ZN7DRV821413setI2CControlEb>:

void DRV8214::configureConfig3(uint8_t config3) {
    drv8214_i2c_write_register(address, DRV8214_CONFIG3, config3);
}

void DRV8214::setI2CControl(bool I2CControl) {
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	70fb      	strb	r3, [r7, #3]
    config.I2CControlled = I2CControl;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	78fa      	ldrb	r2, [r7, #3]
 8008b72:	731a      	strb	r2, [r3, #12]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_BC, I2CControl);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7818      	ldrb	r0, [r3, #0]
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	2204      	movs	r2, #4
 8008b7c:	210d      	movs	r1, #13
 8008b7e:	f001 f9c1 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <_ZN7DRV821416enablePWMControlEv>:

void DRV8214::enablePWMControl() {
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_PMODE, true);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	7818      	ldrb	r0, [r3, #0]
 8008b96:	2301      	movs	r3, #1
 8008b98:	2208      	movs	r2, #8
 8008b9a:	210d      	movs	r1, #13
 8008b9c:	f001 f9b2 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <_ZN7DRV821417enablePHENControlEv>:

void DRV8214::enablePHENControl() {
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_PMODE, false);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7818      	ldrb	r0, [r3, #0]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	2208      	movs	r2, #8
 8008bb8:	210d      	movs	r1, #13
 8008bba:	f001 f9a3 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008bbe:	bf00      	nop
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <_ZN7DRV821420enableStallInterruptEv>:

void DRV8214::enableStallInterrupt() {
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_STALL_REP, true);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	7818      	ldrb	r0, [r3, #0]
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	210d      	movs	r1, #13
 8008bd8:	f001 f994 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <_ZN7DRV821429enableCountThresholdInterruptEv>:

void DRV8214::disableStallInterrupt() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_STALL_REP, false);
}

void DRV8214::enableCountThresholdInterrupt() {
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
    drv8214_i2c_modify_register_bits(address, DRV8214_CONFIG4, CONFIG4_RC_REP, 0b10000000);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	7818      	ldrb	r0, [r3, #0]
 8008bf0:	2380      	movs	r3, #128	@ 0x80
 8008bf2:	22c0      	movs	r2, #192	@ 0xc0
 8008bf4:	210d      	movs	r1, #13
 8008bf6:	f001 f9b7 	bl	8009f68 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8008bfa:	bf00      	nop
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>:

void DRV8214::disableCountThresholdInterrupt() {
    drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_RC_REP, false);
}

void DRV8214::setBridgeBehaviorThresholdReached(bool stops) {
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	70fb      	strb	r3, [r7, #3]
    // stops = 0b: H-bridge stays enabled when RC_CNT exceeds threshold
    // stops = 1b: H-bridge is disabled (High-Z) when RC_CNT exceeds threshold
    config.bridge_behavior_thr_reached = stops; 
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	78fa      	ldrb	r2, [r7, #3]
 8008c12:	75da      	strb	r2, [r3, #23]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_RC_HIZ, stops);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	7818      	ldrb	r0, [r3, #0]
 8008c18:	78fb      	ldrb	r3, [r7, #3]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	2111      	movs	r1, #17
 8008c1e:	f001 f971 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <_ZN7DRV821416setSoftStartStopEb>:

void DRV8214::setSoftStartStop(bool enable) {
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	460b      	mov	r3, r1
 8008c34:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_REG_CTRL0, REG_CTRL0_EN_SS, enable);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	7818      	ldrb	r0, [r3, #0]
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	210e      	movs	r1, #14
 8008c40:	f001 f960 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8008c44:	bf00      	nop
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <_ZN7DRV821428setRegulationAndStallCurrentEf>:

void DRV8214::configureControl0(uint8_t control0) {
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL0, control0);
}

void DRV8214::setRegulationAndStallCurrent(float requested_current) {
 8008c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c50:	b0cd      	sub	sp, #308	@ 0x134
 8008c52:	af08      	add	r7, sp, #32
 8008c54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c58:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c5c:	6018      	str	r0, [r3, #0]
 8008c5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c62:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008c66:	ed83 0a00 	vstr	s0, [r3]
    //   1X1b => 5560 μA/A, max current 0.125 A

    uint8_t cs_gain_sel;

    // Clamp very low currents (<0.125 A) to the lowest recommended setting:
    if (requested_current < 0.125f) {
 8008c6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c6e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008c72:	edd3 7a00 	vldr	s15, [r3]
 8008c76:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8008c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c82:	d512      	bpl.n	8008caa <_ZN7DRV821428setRegulationAndStallCurrentEf+0x5e>
        cs_gain_sel = 0b111; // 5560 μA/A, max current 0.125 A
 8008c84:	2307      	movs	r3, #7
 8008c86:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 5560e-6; // Convert μA/A to A/A
 8008c8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a89      	ldr	r2, [pc, #548]	@ (8008ebc <_ZN7DRV821428setRegulationAndStallCurrentEf+0x270>)
 8008c96:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.125f;
 8008c98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 8008ca6:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ca8:	e091      	b.n	8008dce <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 0.25f) {
 8008caa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008cb2:	edd3 7a00 	vldr	s15, [r3]
 8008cb6:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8008cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc2:	d512      	bpl.n	8008cea <_ZN7DRV821428setRegulationAndStallCurrentEf+0x9e>
        cs_gain_sel = 0b110; // 5560 μA/A, max current 0.25 A
 8008cc4:	2306      	movs	r3, #6
 8008cc6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 5560e-6;
 8008cca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a79      	ldr	r2, [pc, #484]	@ (8008ebc <_ZN7DRV821428setRegulationAndStallCurrentEf+0x270>)
 8008cd6:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.25f;
 8008cd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cdc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8008ce6:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ce8:	e071      	b.n	8008dce <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 0.5f) {
 8008cea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008cf2:	edd3 7a00 	vldr	s15, [r3]
 8008cf6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d02:	d512      	bpl.n	8008d2a <_ZN7DRV821428setRegulationAndStallCurrentEf+0xde>
        cs_gain_sel = 0b011; // 1125 μA/A, max current 0.5 A
 8008d04:	2303      	movs	r3, #3
 8008d06:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 1125e-6;
 8008d0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a6a      	ldr	r2, [pc, #424]	@ (8008ec0 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x274>)
 8008d16:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 0.5f;
 8008d18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8008d26:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d28:	e051      	b.n	8008dce <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 1.0f) {
 8008d2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d2e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d32:	edd3 7a00 	vldr	s15, [r3]
 8008d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d42:	d512      	bpl.n	8008d6a <_ZN7DRV821428setRegulationAndStallCurrentEf+0x11e>
        cs_gain_sel = 0b010; // 1125 μA/A, max current 1 A
 8008d44:	2302      	movs	r3, #2
 8008d46:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 1125e-6;
 8008d4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a5a      	ldr	r2, [pc, #360]	@ (8008ec0 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x274>)
 8008d56:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 1.0f;
 8008d58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008d66:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d68:	e031      	b.n	8008dce <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else if (requested_current < 2.0f) {
 8008d6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d6e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d72:	edd3 7a00 	vldr	s15, [r3]
 8008d76:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8008d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d82:	d512      	bpl.n	8008daa <_ZN7DRV821428setRegulationAndStallCurrentEf+0x15e>
        cs_gain_sel = 0b001; // 225 μA/A, max current 2 A
 8008d84:	2301      	movs	r3, #1
 8008d86:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 225e-6;
 8008d8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a4b      	ldr	r2, [pc, #300]	@ (8008ec4 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x278>)
 8008d96:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 2.0f;
 8008d98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008da6:	625a      	str	r2, [r3, #36]	@ 0x24
 8008da8:	e011      	b.n	8008dce <_ZN7DRV821428setRegulationAndStallCurrentEf+0x182>
    }
    else {
        // For >= 2.0 A, recommended setting is 000b (max current 4 A).
        // Also clamp above 4 A to the same setting (since 4 A is the top of the recommended range).
        cs_gain_sel = 0b000; // 225 μA/A, max current 4 A
 8008daa:	2300      	movs	r3, #0
 8008dac:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        config.Aipropri = 225e-6;
 8008db0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008db4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a42      	ldr	r2, [pc, #264]	@ (8008ec4 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x278>)
 8008dbc:	61da      	str	r2, [r3, #28]
        config.MaxCurrent = 4.0f;
 8008dbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8008dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL0, RC_CTRL0_CS_GAIN_SEL, cs_gain_sel);
 8008dce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	7818      	ldrb	r0, [r3, #0]
 8008dda:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008dde:	2207      	movs	r2, #7
 8008de0:	2111      	movs	r1, #17
 8008de2:	f001 f8c1 	bl	8009f68 <_Z32drv8214_i2c_modify_register_bitshhhh>

    // Update Itrip calculation with the new scale
    config.Itrip = config.Vref / (Ripropri * config.Aipropri);
 8008de6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	edd3 6a04 	vldr	s13, [r3, #16]
 8008df4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008df8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	885b      	ldrh	r3, [r3, #2]
 8008e00:	ee07 3a90 	vmov	s15, r3
 8008e04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	edd3 7a07 	vldr	s15, [r3, #28]
 8008e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	edc3 7a08 	vstr	s15, [r3, #32]

    if (config.verbose) {
 8008e2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d038      	beq.n	8008eb0 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x264>
        char buffer[256];
        snprintf(buffer, sizeof(buffer), "Requested Itrip = %f A => Chosen CS_GAIN_SEL: 0b%d => Aipropri = %f uA/A => Actual Itrip = %f A\n", requested_current, cs_gain_sel, config.Aipropri, config.Itrip);
 8008e3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e42:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	f7f7 fb56 	bl	80004f8 <__aeabi_f2d>
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	460d      	mov	r5, r1
 8008e50:	f897 610f 	ldrb.w	r6, [r7, #271]	@ 0x10f
 8008e54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e58:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f7 fb49 	bl	80004f8 <__aeabi_f2d>
 8008e66:	4680      	mov	r8, r0
 8008e68:	4689      	mov	r9, r1
 8008e6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7f7 fb3e 	bl	80004f8 <__aeabi_f2d>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	f107 000c 	add.w	r0, r7, #12
 8008e84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e88:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8008e8c:	9602      	str	r6, [sp, #8]
 8008e8e:	e9cd 4500 	strd	r4, r5, [sp]
 8008e92:	4a0d      	ldr	r2, [pc, #52]	@ (8008ec8 <_ZN7DRV821428setRegulationAndStallCurrentEf+0x27c>)
 8008e94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008e98:	f009 ff46 	bl	8012d28 <sniprintf>
        drvPrint(buffer);
 8008e9c:	f107 020c 	add.w	r2, r7, #12
 8008ea0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ea4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	6818      	ldr	r0, [r3, #0]
 8008eac:	f000 fef4 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    }
}
 8008eb0:	bf00      	nop
 8008eb2:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ebc:	3bb630a9 	.word	0x3bb630a9
 8008ec0:	3a9374bc 	.word	0x3a9374bc
 8008ec4:	396bedfa 	.word	0x396bedfa
 8008ec8:	08015b44 	.word	0x08015b44
 8008ecc:	00000000 	.word	0x00000000

08008ed0 <_ZN7DRV821414setRippleSpeedEt>:

void DRV8214::setRippleSpeed(uint16_t speed) {
 8008ed0:	b5b0      	push	{r4, r5, r7, lr}
 8008ed2:	b0d2      	sub	sp, #328	@ 0x148
 8008ed4:	af04      	add	r7, sp, #16
 8008ed6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008eda:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008ede:	6018      	str	r0, [r3, #0]
 8008ee0:	460a      	mov	r2, r1
 8008ee2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ee6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8008eea:	801a      	strh	r2, [r3, #0]
    if (speed > motor_max_rpm) { speed = motor_max_rpm; } // Cap speed to the maximum RPM of the motor
 8008eec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ef0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	891b      	ldrh	r3, [r3, #8]
 8008ef8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008efc:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8008f00:	8812      	ldrh	r2, [r2, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d90a      	bls.n	8008f1c <_ZN7DRV821414setRippleSpeedEt+0x4c>
 8008f06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f0a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8008f0e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008f12:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008f16:	6812      	ldr	r2, [r2, #0]
 8008f18:	8912      	ldrh	r2, [r2, #8]
 8008f1a:	801a      	strh	r2, [r3, #0]

    // Find the corresponding ripples frequency (Hz) value
    uint32_t ripple_speed = (speed * motor_reduction_ratio * ripples_per_revolution * 2 * M_PI) / 60;
 8008f1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f20:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008f2a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008f2e:	6812      	ldr	r2, [r2, #0]
 8008f30:	79d2      	ldrb	r2, [r2, #7]
 8008f32:	fb02 f303 	mul.w	r3, r2, r3
 8008f36:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008f3a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008f3e:	6812      	ldr	r2, [r2, #0]
 8008f40:	8892      	ldrh	r2, [r2, #4]
 8008f42:	fb02 f303 	mul.w	r3, r2, r3
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7f7 fac3 	bl	80004d4 <__aeabi_i2d>
 8008f4e:	a36d      	add	r3, pc, #436	@ (adr r3, 8009104 <_ZN7DRV821414setRippleSpeedEt+0x234>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f7f7 fb28 	bl	80005a8 <__aeabi_dmul>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4619      	mov	r1, r3
 8008f60:	f04f 0200 	mov.w	r2, #0
 8008f64:	4b64      	ldr	r3, [pc, #400]	@ (80090f8 <_ZN7DRV821414setRippleSpeedEt+0x228>)
 8008f66:	f7f7 fc49 	bl	80007fc <__aeabi_ddiv>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	f7f7 fdf1 	bl	8000b58 <__aeabi_d2uiz>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    // Define max feasible ripple speed based on 8-bit WSET_VSET and max scaling factor (128)
    const uint16_t MAX_SPEED = 32640; // 255 * 128 = 32640 rad/s
 8008f7c:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 8008f80:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    
    // Cap threshold to the maximum feasible value
    if (ripple_speed > MAX_SPEED) { ripple_speed = MAX_SPEED; }
 8008f84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f88:	f5b3 4fff 	cmp.w	r3, #32640	@ 0x7f80
 8008f8c:	d903      	bls.n	8008f96 <_ZN7DRV821414setRippleSpeedEt+0xc6>
 8008f8e:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 8008f92:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    struct ScaleOption {
        uint16_t scale;
        uint8_t bits;
    };

    ScaleOption scaleOptions[] = {
 8008f96:	4b59      	ldr	r3, [pc, #356]	@ (80090fc <_ZN7DRV821414setRippleSpeedEt+0x22c>)
 8008f98:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 8008f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {64, 0b10},
        {128, 0b11}
    };

    // Find the optimal scaling factor and 10-bit value
    uint16_t WSET_VSET = ripple_speed;
 8008fa2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008fa6:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    uint8_t W_SCALE = 0b00;
 8008faa:	2300      	movs	r3, #0
 8008fac:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131

    for (const auto &option : scaleOptions) {
 8008fb0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8008fb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8008fb8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8008fbc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008fc0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8008fc4:	3310      	adds	r3, #16
 8008fc6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8008fca:	e024      	b.n	8009016 <_ZN7DRV821414setRippleSpeedEt+0x146>
 8008fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fd0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        if (ripple_speed >= option.scale) {
 8008fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d313      	bcc.n	800900c <_ZN7DRV821414setRippleSpeedEt+0x13c>
            WSET_VSET = ripple_speed / option.scale;
 8008fe4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ff4:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
            if (WSET_VSET <= 255) { // Ensure WSET_VSET fits within 8 bits
 8008ff8:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8008ffc:	2bff      	cmp	r3, #255	@ 0xff
 8008ffe:	d805      	bhi.n	800900c <_ZN7DRV821414setRippleSpeedEt+0x13c>
                W_SCALE = option.bits;
 8009000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009004:	789b      	ldrb	r3, [r3, #2]
 8009006:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
                break;
 800900a:	e00a      	b.n	8009022 <_ZN7DRV821414setRippleSpeedEt+0x152>
    for (const auto &option : scaleOptions) {
 800900c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009010:	3304      	adds	r3, #4
 8009012:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8009016:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800901a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800901e:	429a      	cmp	r2, r3
 8009020:	d1d4      	bne.n	8008fcc <_ZN7DRV821414setRippleSpeedEt+0xfc>
            }
        }
    }
    config.w_scale = scaleOptions[W_SCALE].scale;
 8009022:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800902c:	443b      	add	r3, r7
 800902e:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8009032:	b2da      	uxtb	r2, r3
 8009034:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009038:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    WSET_VSET = WSET_VSET & 0xFF; // Ensure WSET_VSET fits within 8 bits
 8009042:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132

    if (config.verbose) {
 800904c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009050:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800905a:	2b00      	cmp	r3, #0
 800905c:	d02b      	beq.n	80090b6 <_ZN7DRV821414setRippleSpeedEt+0x1e6>
        char buffer[256];  // Adjust the buffer size as needed
        snprintf(buffer, sizeof(buffer), "WSET_VSET: %d | W_SCALE: %d or 0b%d | Effective Target Speed: %d rad/s\n", WSET_VSET, config.w_scale, W_SCALE, WSET_VSET * config.w_scale);
 800905e:	f8b7 4132 	ldrh.w	r4, [r7, #306]	@ 0x132
 8009062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009066:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009070:	461d      	mov	r5, r3
 8009072:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 8009076:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 800907a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800907e:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8009082:	6809      	ldr	r1, [r1, #0]
 8009084:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 8009088:	fb01 f202 	mul.w	r2, r1, r2
 800908c:	f107 000c 	add.w	r0, r7, #12
 8009090:	9202      	str	r2, [sp, #8]
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	9500      	str	r5, [sp, #0]
 8009096:	4623      	mov	r3, r4
 8009098:	4a19      	ldr	r2, [pc, #100]	@ (8009100 <_ZN7DRV821414setRippleSpeedEt+0x230>)
 800909a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800909e:	f009 fe43 	bl	8012d28 <sniprintf>
        drvPrint(buffer);
 80090a2:	f107 020c 	add.w	r2, r7, #12
 80090a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80090ae:	4611      	mov	r1, r2
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	f000 fdf1 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    }
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, WSET_VSET);
 80090b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	210f      	movs	r1, #15
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 feb0 	bl	8009e30 <_Z26drv8214_i2c_write_registerhhh>
    drv8214_i2c_modify_register_bits(address, DRV8214_REG_CTRL0, REG_CTRL0_W_SCALE, W_SCALE);
 80090d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	7818      	ldrb	r0, [r3, #0]
 80090dc:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 80090e0:	2203      	movs	r2, #3
 80090e2:	210e      	movs	r1, #14
 80090e4:	f000 ff40 	bl	8009f68 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 80090e8:	bf00      	nop
 80090ea:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bdb0      	pop	{r4, r5, r7, pc}
 80090f2:	bf00      	nop
 80090f4:	f3af 8000 	nop.w
 80090f8:	404e0000 	.word	0x404e0000
 80090fc:	08015bf0 	.word	0x08015bf0
 8009100:	08015ba8 	.word	0x08015ba8
 8009104:	54442d18 	.word	0x54442d18
 8009108:	400921fb 	.word	0x400921fb

0800910c <_ZN7DRV821415setVoltageSpeedEf>:

void DRV8214::setVoltageSpeed(float voltage) {
 800910c:	b580      	push	{r7, lr}
 800910e:	b088      	sub	sp, #32
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	ed87 0a02 	vstr	s0, [r7, #8]
    if (voltage < 0.0f) { voltage = 0.0f; } // Ensure voltage is non-negative
 8009118:	edd7 7a02 	vldr	s15, [r7, #8]
 800911c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009124:	d502      	bpl.n	800912c <_ZN7DRV821415setVoltageSpeedEf+0x20>
 8009126:	f04f 0300 	mov.w	r3, #0
 800912a:	60bb      	str	r3, [r7, #8]

    // Depending on the VM_GAIN_SEL bit (voltage_range), clamp and scale accordingly
    if (config.voltage_range) {
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	7bdb      	ldrb	r3, [r3, #15]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d026      	beq.n	8009182 <_ZN7DRV821415setVoltageSpeedEf+0x76>
        // VM_GAIN_SEL = 1 → Range: 0 to 3.92 V
        if (voltage > 3.92f) { voltage = 3.92f; }
 8009134:	edd7 7a02 	vldr	s15, [r7, #8]
 8009138:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80091d8 <_ZN7DRV821415setVoltageSpeedEf+0xcc>
 800913c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009144:	dd01      	ble.n	800914a <_ZN7DRV821415setVoltageSpeedEf+0x3e>
 8009146:	4b25      	ldr	r3, [pc, #148]	@ (80091dc <_ZN7DRV821415setVoltageSpeedEf+0xd0>)
 8009148:	60bb      	str	r3, [r7, #8]
        // Apply formula from table 8-23: WSET_VSET = voltage * (255 / 3.92)
        float scaled = voltage * (255.0f / 3.92f);
 800914a:	edd7 7a02 	vldr	s15, [r7, #8]
 800914e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80091e0 <_ZN7DRV821415setVoltageSpeedEf+0xd4>
 8009152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009156:	edc7 7a05 	vstr	s15, [r7, #20]
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
 800915a:	edd7 7a05 	vldr	s15, [r7, #20]
 800915e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800916a:	edc7 7a01 	vstr	s15, [r7, #4]
 800916e:	793b      	ldrb	r3, [r7, #4]
 8009170:	74fb      	strb	r3, [r7, #19]
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	7cfa      	ldrb	r2, [r7, #19]
 8009178:	210f      	movs	r1, #15
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fe58 	bl	8009e30 <_Z26drv8214_i2c_write_registerhhh>
        // Apply formula from table 8-23: WSET_VSET = voltage * (255 / 15.7)
        float scaled = voltage * (255.0f / 15.7f);
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
    }
}
 8009180:	e025      	b.n	80091ce <_ZN7DRV821415setVoltageSpeedEf+0xc2>
        if (voltage > 15.7f) { voltage = 11.0f; } // Cap voltage to 11 V because of Overvoltage Protection
 8009182:	edd7 7a02 	vldr	s15, [r7, #8]
 8009186:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80091e4 <_ZN7DRV821415setVoltageSpeedEf+0xd8>
 800918a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800918e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009192:	dd01      	ble.n	8009198 <_ZN7DRV821415setVoltageSpeedEf+0x8c>
 8009194:	4b14      	ldr	r3, [pc, #80]	@ (80091e8 <_ZN7DRV821415setVoltageSpeedEf+0xdc>)
 8009196:	60bb      	str	r3, [r7, #8]
        float scaled = voltage * (255.0f / 15.7f);
 8009198:	edd7 7a02 	vldr	s15, [r7, #8]
 800919c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80091ec <_ZN7DRV821415setVoltageSpeedEf+0xe0>
 80091a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091a4:	edc7 7a07 	vstr	s15, [r7, #28]
        uint8_t regVal = static_cast<uint8_t>(scaled + 0.5f); // Round to nearest integer
 80091a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80091ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80091b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80091bc:	793b      	ldrb	r3, [r7, #4]
 80091be:	76fb      	strb	r3, [r7, #27]
        drv8214_i2c_write_register(address, DRV8214_REG_CTRL1, regVal);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	7efa      	ldrb	r2, [r7, #27]
 80091c6:	210f      	movs	r1, #15
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fe31 	bl	8009e30 <_Z26drv8214_i2c_write_registerhhh>
}
 80091ce:	bf00      	nop
 80091d0:	3720      	adds	r7, #32
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	407ae148 	.word	0x407ae148
 80091dc:	407ae148 	.word	0x407ae148
 80091e0:	42821a1f 	.word	0x42821a1f
 80091e4:	417b3333 	.word	0x417b3333
 80091e8:	41300000 	.word	0x41300000
 80091ec:	4181efb2 	.word	0x4181efb2

080091f0 <_ZN7DRV821417enableRippleCountEb>:

void DRV8214::configureControl2(uint8_t control2) {
    drv8214_i2c_write_register(address, DRV8214_REG_CTRL2, control2);
}

void DRV8214::enableRippleCount(bool enable) {
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_EN_RC, enable);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7818      	ldrb	r0, [r3, #0]
 8009200:	78fb      	ldrb	r3, [r7, #3]
 8009202:	2280      	movs	r2, #128	@ 0x80
 8009204:	2111      	movs	r1, #17
 8009206:	f000 fe7d 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 800920a:	bf00      	nop
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <_ZN7DRV821421enableErrorCorrectionEb>:

void DRV8214::enableErrorCorrection(bool enable) {
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	460b      	mov	r3, r1
 800921c:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register(address, DRV8214_RC_CTRL0, RC_CTRL0_DIS_EC, !enable);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	7818      	ldrb	r0, [r3, #0]
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	f083 0301 	eor.w	r3, r3, #1
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2240      	movs	r2, #64	@ 0x40
 800922c:	2111      	movs	r1, #17
 800922e:	f000 fe69 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
}
 8009232:	bf00      	nop
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <_ZN7DRV821423setRippleCountThresholdEt>:

void DRV8214::configureRippleCount0(uint8_t ripple0) {
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL0, ripple0);
}

void DRV8214::setRippleCountThreshold(uint16_t threshold) {
 800923c:	b590      	push	{r4, r7, lr}
 800923e:	b0d1      	sub	sp, #324	@ 0x144
 8009240:	af02      	add	r7, sp, #8
 8009242:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009246:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800924a:	6018      	str	r0, [r3, #0]
 800924c:	460a      	mov	r2, r1
 800924e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009252:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009256:	801a      	strh	r2, [r3, #0]
    // Define max feasible threshold based on 10-bit RC_THR and max scaling factor (64)
    const uint16_t MAX_THRESHOLD = 65535; // 1024 * 64 = 65536
 8009258:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800925c:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    struct ScaleOption {
        uint16_t scale;
        uint8_t bits;
    };

    ScaleOption scaleOptions[] = {
 8009260:	4b5c      	ldr	r3, [pc, #368]	@ (80093d4 <_ZN7DRV821423setRippleCountThresholdEt+0x198>)
 8009262:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 8009266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {16, 0b10},
        {64, 0b11}
    };
    
    // Find the optimal scaling factor and 10-bit value
    uint16_t rc_thr = threshold;
 800926c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009270:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009274:	881b      	ldrh	r3, [r3, #0]
 8009276:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    uint8_t rc_thr_scale_bits = 0b00;
 800927a:	2300      	movs	r3, #0
 800927c:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135

    for (const auto &option : scaleOptions) {
 8009280:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8009284:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8009288:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800928c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009290:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009294:	3310      	adds	r3, #16
 8009296:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800929a:	e029      	b.n	80092f0 <_ZN7DRV821423setRippleCountThresholdEt+0xb4>
 800929c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80092a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        if (threshold >= option.scale) {
 80092a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80092ae:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80092b2:	8812      	ldrh	r2, [r2, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d316      	bcc.n	80092e6 <_ZN7DRV821423setRippleCountThresholdEt+0xaa>
            rc_thr = threshold / option.scale;
 80092b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80092c2:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80092c6:	8812      	ldrh	r2, [r2, #0]
 80092c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092cc:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
            if (rc_thr < 1024) { // Ensure it fits in 10 bits
 80092d0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80092d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092d8:	d205      	bcs.n	80092e6 <_ZN7DRV821423setRippleCountThresholdEt+0xaa>
                rc_thr_scale_bits = option.bits;
 80092da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80092de:	789b      	ldrb	r3, [r3, #2]
 80092e0:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
                break;
 80092e4:	e00a      	b.n	80092fc <_ZN7DRV821423setRippleCountThresholdEt+0xc0>
    for (const auto &option : scaleOptions) {
 80092e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80092ea:	3304      	adds	r3, #4
 80092ec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80092f0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80092f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d1cf      	bne.n	800929c <_ZN7DRV821423setRippleCountThresholdEt+0x60>
            }
        }
    }
    if (config.verbose) {
 80092fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009300:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800930a:	2b00      	cmp	r3, #0
 800930c:	d016      	beq.n	800933c <_ZN7DRV821423setRippleCountThresholdEt+0x100>
        char buffer[256];  // Adjust the buffer size as needed
        snprintf(buffer, sizeof(buffer), "RC_THR: %d | RC_THR_SCALE: %d ", rc_thr, rc_thr_scale_bits);
 800930e:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8009312:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8009316:	f107 000c 	add.w	r0, r7, #12
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	4613      	mov	r3, r2
 800931e:	4a2e      	ldr	r2, [pc, #184]	@ (80093d8 <_ZN7DRV821423setRippleCountThresholdEt+0x19c>)
 8009320:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009324:	f009 fd00 	bl	8012d28 <sniprintf>
        drvPrint(buffer);
 8009328:	f107 020c 	add.w	r2, r7, #12
 800932c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009330:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009334:	4611      	mov	r1, r2
 8009336:	6818      	ldr	r0, [r3, #0]
 8009338:	f000 fcae 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    }
    config.ripple_threshold = rc_thr;
 800933c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009340:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 800934a:	869a      	strh	r2, [r3, #52]	@ 0x34
    config.ripple_threshold_scale = rc_thr_scale_bits;
 800934c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009350:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 800935a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    // Ensure rc_thr fits within 10 bits
    rc_thr = rc_thr & 0x3FF;
 800935e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009366:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    
    // Split into lower 8 bits and upper 2 bits
    uint8_t rc_thr_low  = rc_thr & 0xFF;         // bits 7..0
 800936a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800936e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    uint8_t rc_thr_high = (rc_thr >> 8) & 0x03;  // bits 9..8
 8009372:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009376:	0a1b      	lsrs	r3, r3, #8
 8009378:	b29b      	uxth	r3, r3
 800937a:	b2db      	uxtb	r3, r3
 800937c:	f003 0303 	and.w	r3, r3, #3
 8009380:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL1, rc_thr_low);
 8009384:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009388:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8009394:	2112      	movs	r1, #18
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fd4a 	bl	8009e30 <_Z26drv8214_i2c_write_registerhhh>
    setRippleThresholdScale(rc_thr_scale_bits);
 800939c:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 80093a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093a4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80093a8:	4611      	mov	r1, r2
 80093aa:	6818      	ldr	r0, [r3, #0]
 80093ac:	f000 f816 	bl	80093dc <_ZN7DRV821423setRippleThresholdScaleEh>
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_RC_THR_HIGH, rc_thr_high);
 80093b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	7818      	ldrb	r0, [r3, #0]
 80093bc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80093c0:	2203      	movs	r2, #3
 80093c2:	2113      	movs	r1, #19
 80093c4:	f000 fdd0 	bl	8009f68 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 80093c8:	bf00      	nop
 80093ca:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd90      	pop	{r4, r7, pc}
 80093d2:	bf00      	nop
 80093d4:	08015c20 	.word	0x08015c20
 80093d8:	08015c00 	.word	0x08015c00

080093dc <_ZN7DRV821423setRippleThresholdScaleEh>:

void DRV8214::setRippleThresholdScale(uint8_t scale) {
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	70fb      	strb	r3, [r7, #3]
    scale = scale & 0x03;
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	70fb      	strb	r3, [r7, #3]
    scale = scale << 2; //make sure the 2 bits of scale are placed on bit 2 and 3
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_RC_THR_SCALE, scale);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	7818      	ldrb	r0, [r3, #0]
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	220c      	movs	r2, #12
 80093fe:	2113      	movs	r1, #19
 8009400:	f000 fdb2 	bl	8009f68 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <_ZN7DRV821411setKMCScaleEh>:

void DRV8214::setKMCScale(uint8_t scale) {
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
    scale = scale << 4; //make sure the 2 bits of scale are placed on bit 4 and 5
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	011b      	lsls	r3, r3, #4
 800941c:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_KMC_SCALE, scale);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	7818      	ldrb	r0, [r3, #0]
 8009422:	78fb      	ldrb	r3, [r7, #3]
 8009424:	2230      	movs	r2, #48	@ 0x30
 8009426:	2113      	movs	r1, #19
 8009428:	f000 fd9e 	bl	8009f68 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 800942c:	bf00      	nop
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <_ZN7DRV821425setMotorInverseResistanceEh>:

void DRV8214::setMotorInverseResistance(uint8_t resistance) {
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL3, resistance);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	78fa      	ldrb	r2, [r7, #3]
 8009446:	2114      	movs	r1, #20
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fcf1 	bl	8009e30 <_Z26drv8214_i2c_write_registerhhh>
}
 800944e:	bf00      	nop
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <_ZN7DRV821430setMotorInverseResistanceScaleEh>:

void DRV8214::setMotorInverseResistanceScale(uint8_t scale) {
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
    scale = scale << 6; //make sure the 2 bits of scale are placed on bit 6 and 7
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	019b      	lsls	r3, r3, #6
 8009466:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_modify_register_bits(address, DRV8214_RC_CTRL2, RC_CTRL2_INV_R_SCALE, scale);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	7818      	ldrb	r0, [r3, #0]
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	22c0      	movs	r2, #192	@ 0xc0
 8009470:	2113      	movs	r1, #19
 8009472:	f000 fd79 	bl	8009f68 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <_ZN7DRV821430setResistanceRelatedParametersEv>:

void DRV8214::setResistanceRelatedParameters() {
 8009480:	b580      	push	{r7, lr}
 8009482:	b08a      	sub	sp, #40	@ 0x28
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
    // Possible values of INV_R_SCALE and corresponding register bit settings
    const uint16_t scaleValues[4] = {2, 64, 1024, 8192};
 8009488:	4a39      	ldr	r2, [pc, #228]	@ (8009570 <_ZN7DRV821430setResistanceRelatedParametersEv+0xf0>)
 800948a:	f107 0310 	add.w	r3, r7, #16
 800948e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009492:	e883 0003 	stmia.w	r3, {r0, r1}
    const uint8_t scaleBits[4] = {0b00, 0b01, 0b10, 0b11};
 8009496:	4b37      	ldr	r3, [pc, #220]	@ (8009574 <_ZN7DRV821430setResistanceRelatedParametersEv+0xf4>)
 8009498:	60fb      	str	r3, [r7, #12]

    // Default values (minimum valid values)
    uint8_t bestScaleBits = 0b00;  // Default to scale 2
 800949a:	2300      	movs	r3, #0
 800949c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t bestInvR = 1;          // Minimum valid INV_R
 80094a0:	2301      	movs	r3, #1
 80094a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    // Iterate from largest scale to smallest for best resolution
    for (int i = 3; i >= 0; --i)
 80094a6:	2303      	movs	r3, #3
 80094a8:	623b      	str	r3, [r7, #32]
 80094aa:	e03f      	b.n	800952c <_ZN7DRV821430setResistanceRelatedParametersEv+0xac>
    {
        float candidate = scaleValues[i] / motor_internal_resistance;
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	3328      	adds	r3, #40	@ 0x28
 80094b2:	443b      	add	r3, r7
 80094b4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80094b8:	461a      	mov	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	799b      	ldrb	r3, [r3, #6]
 80094be:	fb92 f3f3 	sdiv	r3, r2, r3
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094ca:	edc7 7a06 	vstr	s15, [r7, #24]
        float rounded = roundf(candidate);
 80094ce:	ed97 0a06 	vldr	s0, [r7, #24]
 80094d2:	f008 ffaf 	bl	8012434 <roundf>
 80094d6:	ed87 0a07 	vstr	s0, [r7, #28]

        // Ensure the value is at least 1
        if (rounded < 1.0f) {
 80094da:	edd7 7a07 	vldr	s15, [r7, #28]
 80094de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ea:	d502      	bpl.n	80094f2 <_ZN7DRV821430setResistanceRelatedParametersEv+0x72>
            rounded = 1.0f;
 80094ec:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80094f0:	61fb      	str	r3, [r7, #28]
        }

        // If within valid range, select this scale and break
        if (rounded <= 255.0f)
 80094f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80094f6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8009578 <_ZN7DRV821430setResistanceRelatedParametersEv+0xf8>
 80094fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009502:	d810      	bhi.n	8009526 <_ZN7DRV821430setResistanceRelatedParametersEv+0xa6>
        {
            bestScaleBits = scaleBits[i];
 8009504:	f107 020c 	add.w	r2, r7, #12
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	4413      	add	r3, r2
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            bestInvR = static_cast<uint8_t>(rounded);
 8009512:	edd7 7a07 	vldr	s15, [r7, #28]
 8009516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800951a:	edc7 7a00 	vstr	s15, [r7]
 800951e:	783b      	ldrb	r3, [r7, #0]
 8009520:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            break;
 8009524:	e005      	b.n	8009532 <_ZN7DRV821430setResistanceRelatedParametersEv+0xb2>
    for (int i = 3; i >= 0; --i)
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	3b01      	subs	r3, #1
 800952a:	623b      	str	r3, [r7, #32]
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	2b00      	cmp	r3, #0
 8009530:	dabc      	bge.n	80094ac <_ZN7DRV821430setResistanceRelatedParametersEv+0x2c>
        }
    }
    config.inv_r = bestInvR;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009538:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    config.inv_r_scale = scaleValues[bestScaleBits];
 800953c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009540:	005b      	lsls	r3, r3, #1
 8009542:	3328      	adds	r3, #40	@ 0x28
 8009544:	443b      	add	r3, r7
 8009546:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    // Set the selected INV_R and INV_R_SCALE
    setMotorInverseResistanceScale(bestScaleBits);
 800954e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7ff ff7e 	bl	8009456 <_ZN7DRV821430setMotorInverseResistanceScaleEh>
    setMotorInverseResistance(bestInvR);
 800955a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7ff ff67 	bl	8009434 <_ZN7DRV821425setMotorInverseResistanceEh>
}
 8009566:	bf00      	nop
 8009568:	3728      	adds	r7, #40	@ 0x28
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	08015c30 	.word	0x08015c30
 8009574:	03020100 	.word	0x03020100
 8009578:	437f0000 	.word	0x437f0000

0800957c <_ZN7DRV82146setKMCEh>:

void DRV8214::setKMC(uint8_t factor) {
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	70fb      	strb	r3, [r7, #3]
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL4, factor);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	2115      	movs	r1, #21
 8009590:	4618      	mov	r0, r3
 8009592:	f000 fc4d 	bl	8009e30 <_Z26drv8214_i2c_write_registerhhh>
}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <_ZN7DRV821414setControlModeE11ControlModeb>:
void DRV8214::configureRippleCount8(uint8_t ripple8) {
    drv8214_i2c_write_register(address, DRV8214_RC_CTRL8, ripple8);
}

// --- Motor Control Functions ---
void DRV8214::setControlMode(ControlMode mode, bool I2CControl) {
 800959e:	b580      	push	{r7, lr}
 80095a0:	b082      	sub	sp, #8
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	460b      	mov	r3, r1
 80095a8:	70fb      	strb	r3, [r7, #3]
 80095aa:	4613      	mov	r3, r2
 80095ac:	70bb      	strb	r3, [r7, #2]
    config.control_mode = mode;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	78fa      	ldrb	r2, [r7, #3]
 80095b2:	735a      	strb	r2, [r3, #13]
    setI2CControl(I2CControl);
 80095b4:	78bb      	ldrb	r3, [r7, #2]
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7ff fad2 	bl	8008b62 <_ZN7DRV821413setI2CControlEb>
    switch (mode) {
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <_ZN7DRV821414setControlModeE11ControlModeb+0x2c>
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d004      	beq.n	80095d2 <_ZN7DRV821414setControlModeE11ControlModeb+0x34>
            break;
        case PH_EN:
            enablePHENControl();
            break;
    }
}
 80095c8:	e007      	b.n	80095da <_ZN7DRV821414setControlModeE11ControlModeb+0x3c>
            enablePWMControl();
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fadd 	bl	8008b8a <_ZN7DRV821416enablePWMControlEv>
            break;
 80095d0:	e003      	b.n	80095da <_ZN7DRV821414setControlModeE11ControlModeb+0x3c>
            enablePHENControl();
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7ff fae8 	bl	8008ba8 <_ZN7DRV821417enablePHENControlEv>
            break;
 80095d8:	bf00      	nop
}
 80095da:	bf00      	nop
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <_ZN7DRV821417setRegulationModeE14RegulationMode>:

void DRV8214::setRegulationMode(RegulationMode regulation) {
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	70fb      	strb	r3, [r7, #3]
    uint8_t reg_ctrl = 0;  // Default value
 80095f0:	2300      	movs	r3, #0
 80095f2:	73fb      	strb	r3, [r7, #15]
    switch (regulation) {
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d81a      	bhi.n	8009630 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
 80095fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009600 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x1c>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009611 	.word	0x08009611
 8009604:	08009617 	.word	0x08009617
 8009608:	0800961d 	.word	0x0800961d
 800960c:	0800962b 	.word	0x0800962b
        case CURRENT_FIXED:
            reg_ctrl = (0b00 << 3);  // Fixed Off-Time Current Regulation
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
            break;
 8009614:	e00c      	b.n	8009630 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case CURRENT_CYCLES:
            reg_ctrl = (0b01 << 3);  // Cycle-By-Cycle Current Regulation
 8009616:	2308      	movs	r3, #8
 8009618:	73fb      	strb	r3, [r7, #15]
            break;
 800961a:	e009      	b.n	8009630 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case SPEED:
            reg_ctrl = (0b10 << 3);  // Speed Regulation
 800961c:	2310      	movs	r3, #16
 800961e:	73fb      	strb	r3, [r7, #15]
            enableRippleCount();
 8009620:	2101      	movs	r1, #1
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7ff fde4 	bl	80091f0 <_ZN7DRV821417enableRippleCountEb>
            break;
 8009628:	e002      	b.n	8009630 <_ZN7DRV821417setRegulationModeE14RegulationMode+0x4c>
        case VOLTAGE:
            reg_ctrl = (0b11 << 3);  // Voltage Regulation
 800962a:	2318      	movs	r3, #24
 800962c:	73fb      	strb	r3, [r7, #15]
            break;
 800962e:	bf00      	nop
    }
    config.regulation_mode = regulation;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	739a      	strb	r2, [r3, #14]
    drv8214_i2c_modify_register_bits(address, DRV8214_REG_CTRL0, REG_CTRL0_REG_CTRL, reg_ctrl);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	7818      	ldrb	r0, [r3, #0]
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	2218      	movs	r2, #24
 800963e:	210e      	movs	r1, #14
 8009640:	f000 fc92 	bl	8009f68 <_Z32drv8214_i2c_modify_register_bitshhhh>
}
 8009644:	bf00      	nop
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <_ZN7DRV821411turnForwardEtff>:

void DRV8214::turnForward(uint16_t speed, float voltage, float requested_current) {
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	460b      	mov	r3, r1
 8009656:	ed87 0a01 	vstr	s0, [r7, #4]
 800965a:	edc7 0a00 	vstr	s1, [r7]
 800965e:	817b      	strh	r3, [r7, #10]
    disableHbridge();
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f7ff f97a 	bl	800895a <_ZN7DRV821414disableHbridgeEv>
    switch (config.regulation_mode) {
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	7b9b      	ldrb	r3, [r3, #14]
 800966a:	2b03      	cmp	r3, #3
 800966c:	d822      	bhi.n	80096b4 <_ZN7DRV821411turnForwardEtff+0x68>
 800966e:	a201      	add	r2, pc, #4	@ (adr r2, 8009674 <_ZN7DRV821411turnForwardEtff+0x28>)
 8009670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009674:	08009685 	.word	0x08009685
 8009678:	08009691 	.word	0x08009691
 800967c:	0800969d 	.word	0x0800969d
 8009680:	080096a9 	.word	0x080096a9
        case CURRENT_FIXED: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 8009684:	ed97 0a00 	vldr	s0, [r7]
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7ff fadf 	bl	8008c4c <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 800968e:	e011      	b.n	80096b4 <_ZN7DRV821411turnForwardEtff+0x68>
        case CURRENT_CYCLES: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 8009690:	ed97 0a00 	vldr	s0, [r7]
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f7ff fad9 	bl	8008c4c <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 800969a:	e00b      	b.n	80096b4 <_ZN7DRV821411turnForwardEtff+0x68>
        case SPEED: 
            setRippleSpeed(speed);
 800969c:	897b      	ldrh	r3, [r7, #10]
 800969e:	4619      	mov	r1, r3
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f7ff fc15 	bl	8008ed0 <_ZN7DRV821414setRippleSpeedEt>
            break;
 80096a6:	e005      	b.n	80096b4 <_ZN7DRV821411turnForwardEtff+0x68>
        case VOLTAGE:
            setVoltageSpeed(voltage);
 80096a8:	ed97 0a01 	vldr	s0, [r7, #4]
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f7ff fd2d 	bl	800910c <_ZN7DRV821415setVoltageSpeedEf>
            break;
 80096b2:	bf00      	nop
    }
    
    if (config.control_mode == PWM) {
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	7b5b      	ldrb	r3, [r3, #13]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10e      	bne.n	80096da <_ZN7DRV821411turnForwardEtff+0x8e>
        // Table 8-5 => Forward => Input1=1, Input2=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);  // Input1=1
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	7818      	ldrb	r0, [r3, #0]
 80096c0:	2301      	movs	r3, #1
 80096c2:	2202      	movs	r2, #2
 80096c4:	210d      	movs	r1, #13
 80096c6:	f000 fc1d 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false); // Input2=0
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	7818      	ldrb	r0, [r3, #0]
 80096ce:	2300      	movs	r3, #0
 80096d0:	2201      	movs	r2, #1
 80096d2:	210d      	movs	r1, #13
 80096d4:	f000 fc16 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
 80096d8:	e00d      	b.n	80096f6 <_ZN7DRV821411turnForwardEtff+0xaa>
    } 
    else { // PH/EN mode
        // Table 8-4 => Forward => EN=1, PH=1
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true); // EN=1
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	7818      	ldrb	r0, [r3, #0]
 80096de:	2301      	movs	r3, #1
 80096e0:	2202      	movs	r2, #2
 80096e2:	210d      	movs	r1, #13
 80096e4:	f000 fc0e 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true); // PH=1
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	7818      	ldrb	r0, [r3, #0]
 80096ec:	2301      	movs	r3, #1
 80096ee:	2201      	movs	r2, #1
 80096f0:	210d      	movs	r1, #13
 80096f2:	f000 fc07 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
    }
    enableHbridge();
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f7ff f920 	bl	800893c <_ZN7DRV821413enableHbridgeEv>
    if (config.verbose) { drvPrint("Turning Forward\n"); }
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009702:	2b00      	cmp	r3, #0
 8009704:	d003      	beq.n	800970e <_ZN7DRV821411turnForwardEtff+0xc2>
 8009706:	4904      	ldr	r1, [pc, #16]	@ (8009718 <_ZN7DRV821411turnForwardEtff+0xcc>)
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 fac5 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	08015c38 	.word	0x08015c38

0800971c <_ZN7DRV821411turnReverseEtff>:

void DRV8214::turnReverse(uint16_t speed, float voltage, float requested_current) {
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	460b      	mov	r3, r1
 8009726:	ed87 0a01 	vstr	s0, [r7, #4]
 800972a:	edc7 0a00 	vstr	s1, [r7]
 800972e:	817b      	strh	r3, [r7, #10]
    enableHbridge();
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f7ff f903 	bl	800893c <_ZN7DRV821413enableHbridgeEv>
    switch (config.regulation_mode) {
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	7b9b      	ldrb	r3, [r3, #14]
 800973a:	2b03      	cmp	r3, #3
 800973c:	d822      	bhi.n	8009784 <_ZN7DRV821411turnReverseEtff+0x68>
 800973e:	a201      	add	r2, pc, #4	@ (adr r2, 8009744 <_ZN7DRV821411turnReverseEtff+0x28>)
 8009740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009744:	08009755 	.word	0x08009755
 8009748:	08009761 	.word	0x08009761
 800974c:	0800976d 	.word	0x0800976d
 8009750:	08009779 	.word	0x08009779
        case CURRENT_FIXED: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 8009754:	ed97 0a00 	vldr	s0, [r7]
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7ff fa77 	bl	8008c4c <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 800975e:	e011      	b.n	8009784 <_ZN7DRV821411turnReverseEtff+0x68>
        case CURRENT_CYCLES: // No speed control if using I2C (will applied full tension to motor)
            setRegulationAndStallCurrent(requested_current);
 8009760:	ed97 0a00 	vldr	s0, [r7]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f7ff fa71 	bl	8008c4c <_ZN7DRV821428setRegulationAndStallCurrentEf>
            break;
 800976a:	e00b      	b.n	8009784 <_ZN7DRV821411turnReverseEtff+0x68>
        case SPEED: 
            setRippleSpeed(speed);
 800976c:	897b      	ldrh	r3, [r7, #10]
 800976e:	4619      	mov	r1, r3
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff fbad 	bl	8008ed0 <_ZN7DRV821414setRippleSpeedEt>
            break;
 8009776:	e005      	b.n	8009784 <_ZN7DRV821411turnReverseEtff+0x68>
        case VOLTAGE:
            setVoltageSpeed(voltage);
 8009778:	ed97 0a01 	vldr	s0, [r7, #4]
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f7ff fcc5 	bl	800910c <_ZN7DRV821415setVoltageSpeedEf>
            break;
 8009782:	bf00      	nop
    }
    if (config.control_mode == PWM) {
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	7b5b      	ldrb	r3, [r3, #13]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10e      	bne.n	80097aa <_ZN7DRV821411turnReverseEtff+0x8e>
        // Table 8-5 => Reverse => Input1=0, Input2=1
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, false);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	7818      	ldrb	r0, [r3, #0]
 8009790:	2300      	movs	r3, #0
 8009792:	2202      	movs	r2, #2
 8009794:	210d      	movs	r1, #13
 8009796:	f000 fbb5 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	7818      	ldrb	r0, [r3, #0]
 800979e:	2301      	movs	r3, #1
 80097a0:	2201      	movs	r2, #1
 80097a2:	210d      	movs	r1, #13
 80097a4:	f000 fbae 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
 80097a8:	e00d      	b.n	80097c6 <_ZN7DRV821411turnReverseEtff+0xaa>
    } 
    else { // PH/EN mode
        // Table 8-4 => Reverse => EN=1, PH=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	7818      	ldrb	r0, [r3, #0]
 80097ae:	2301      	movs	r3, #1
 80097b0:	2202      	movs	r2, #2
 80097b2:	210d      	movs	r1, #13
 80097b4:	f000 fba6 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	7818      	ldrb	r0, [r3, #0]
 80097bc:	2300      	movs	r3, #0
 80097be:	2201      	movs	r2, #1
 80097c0:	210d      	movs	r1, #13
 80097c2:	f000 fb9f 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
    }
    if (config.verbose) { drvPrint("Turning Reverse\n"); }
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <_ZN7DRV821411turnReverseEtff+0xbc>
 80097d0:	4903      	ldr	r1, [pc, #12]	@ (80097e0 <_ZN7DRV821411turnReverseEtff+0xc4>)
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fa60 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
}
 80097d8:	bf00      	nop
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	08015c4c 	.word	0x08015c4c

080097e4 <_ZN7DRV821410brakeMotorEb>:

void DRV8214::brakeMotor(bool initial_config) {
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	70fb      	strb	r3, [r7, #3]
    enableHbridge();
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff f8a3 	bl	800893c <_ZN7DRV821413enableHbridgeEv>
    if (config.control_mode == PWM) {
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	7b5b      	ldrb	r3, [r3, #13]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10e      	bne.n	800981c <_ZN7DRV821410brakeMotorEb+0x38>
        // Table 8-5 => Brake => Input1=1, Input2=1 => both outputs low
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, true);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7818      	ldrb	r0, [r3, #0]
 8009802:	2301      	movs	r3, #1
 8009804:	2202      	movs	r2, #2
 8009806:	210d      	movs	r1, #13
 8009808:	f000 fb7c 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, true);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	7818      	ldrb	r0, [r3, #0]
 8009810:	2301      	movs	r3, #1
 8009812:	2201      	movs	r2, #1
 8009814:	210d      	movs	r1, #13
 8009816:	f000 fb75 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
 800981a:	e00d      	b.n	8009838 <_ZN7DRV821410brakeMotorEb+0x54>
    }
    else { // PH/EN mode
        // Table 8-4 => Brake => EN=0 => outputs go low
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_EN_IN1, false);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	7818      	ldrb	r0, [r3, #0]
 8009820:	2300      	movs	r3, #0
 8009822:	2202      	movs	r2, #2
 8009824:	210d      	movs	r1, #13
 8009826:	f000 fb6d 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
        // PH can be 0 or 1, the datasheet shows "X" => still brake with EN=0
        drv8214_i2c_modify_register(address, DRV8214_CONFIG4, CONFIG4_I2C_PH_IN2, false);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	7818      	ldrb	r0, [r3, #0]
 800982e:	2300      	movs	r3, #0
 8009830:	2201      	movs	r2, #1
 8009832:	210d      	movs	r1, #13
 8009834:	f000 fb66 	bl	8009f04 <_Z27drv8214_i2c_modify_registerhhhh>
    }
    if (config.verbose & !initial_config) { drvPrint("Braking Motor\n"); }
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800983e:	461a      	mov	r2, r3
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	f083 0301 	eor.w	r3, r3, #1
 8009846:	b2db      	uxtb	r3, r3
 8009848:	4013      	ands	r3, r2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <_ZN7DRV821410brakeMotorEb+0x72>
 800984e:	4904      	ldr	r1, [pc, #16]	@ (8009860 <_ZN7DRV821410brakeMotorEb+0x7c>)
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fa21 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
}
 8009856:	bf00      	nop
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	08015c60 	.word	0x08015c60

08009864 <_ZN7DRV821412turnXRipplesEtbbtff>:
        drvPrint("PH/EN mode does not support coast (High-Z) while awake.");
    }
    if (config.verbose) { drvPrint("Coasting Motor\n"); }
}

void DRV8214::turnXRipples(uint16_t ripples_target, bool stops, bool direction, uint16_t speed, float voltage, float requested_current) {
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	4608      	mov	r0, r1
 800986e:	4611      	mov	r1, r2
 8009870:	461a      	mov	r2, r3
 8009872:	ed87 0a01 	vstr	s0, [r7, #4]
 8009876:	edc7 0a00 	vstr	s1, [r7]
 800987a:	4603      	mov	r3, r0
 800987c:	817b      	strh	r3, [r7, #10]
 800987e:	460b      	mov	r3, r1
 8009880:	727b      	strb	r3, [r7, #9]
 8009882:	4613      	mov	r3, r2
 8009884:	723b      	strb	r3, [r7, #8]
    setRippleCountThreshold(ripples_target);
 8009886:	897b      	ldrh	r3, [r7, #10]
 8009888:	4619      	mov	r1, r3
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f7ff fcd6 	bl	800923c <_ZN7DRV821423setRippleCountThresholdEt>
    resetRippleCounter();
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f7ff f8ad 	bl	80089f0 <_ZN7DRV821418resetRippleCounterEv>
    if (stops != config.bridge_behavior_thr_reached) { setBridgeBehaviorThresholdReached(stops); } // Set bridge behavior if different
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	7ddb      	ldrb	r3, [r3, #23]
 800989a:	7a7a      	ldrb	r2, [r7, #9]
 800989c:	429a      	cmp	r2, r3
 800989e:	d004      	beq.n	80098aa <_ZN7DRV821412turnXRipplesEtbbtff+0x46>
 80098a0:	7a7b      	ldrb	r3, [r7, #9]
 80098a2:	4619      	mov	r1, r3
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f7ff f9ac 	bl	8008c02 <_ZN7DRV821433setBridgeBehaviorThresholdReachedEb>
    if (direction) { turnForward(speed, voltage, requested_current); } else { turnReverse(speed, voltage, requested_current); }
 80098aa:	7a3b      	ldrb	r3, [r7, #8]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d009      	beq.n	80098c4 <_ZN7DRV821412turnXRipplesEtbbtff+0x60>
 80098b0:	8b3b      	ldrh	r3, [r7, #24]
 80098b2:	edd7 0a00 	vldr	s1, [r7]
 80098b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80098ba:	4619      	mov	r1, r3
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff fec5 	bl	800964c <_ZN7DRV821411turnForwardEtff>
}
 80098c2:	e008      	b.n	80098d6 <_ZN7DRV821412turnXRipplesEtbbtff+0x72>
    if (direction) { turnForward(speed, voltage, requested_current); } else { turnReverse(speed, voltage, requested_current); }
 80098c4:	8b3b      	ldrh	r3, [r7, #24]
 80098c6:	edd7 0a00 	vldr	s1, [r7]
 80098ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80098ce:	4619      	mov	r1, r3
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f7ff ff23 	bl	800971c <_ZN7DRV821411turnReverseEtff>
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <_ZN7DRV821416printMotorConfigEb>:

    uint8_t ripples_target = revolutions_target * ripples_per_revolution * motor_reduction_ratio;
    turnXRipples(ripples_target, stops, direction, speed, voltage, requested_current);
}

void DRV8214::printMotorConfig(bool initial_config) {
 80098e0:	b590      	push	{r4, r7, lr}
 80098e2:	b0c7      	sub	sp, #284	@ 0x11c
 80098e4:	af04      	add	r7, sp, #16
 80098e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098ee:	6018      	str	r0, [r3, #0]
 80098f0:	460a      	mov	r2, r1
 80098f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f6:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80098fa:	701a      	strb	r2, [r3, #0]
    char buffer[256];  // Adjust the buffer size as needed
    
    if (initial_config) {
 80098fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009900:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d017      	beq.n	800993a <_ZN7DRV821416printMotorConfigEb+0x5a>
        // Using snprintf to safely format the string
        snprintf(buffer, sizeof(buffer), "----- Finished initialized driver %d -----\n", driver_ID);
 800990a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800990e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	785b      	ldrb	r3, [r3, #1]
 8009916:	f107 0008 	add.w	r0, r7, #8
 800991a:	4a94      	ldr	r2, [pc, #592]	@ (8009b6c <_ZN7DRV821416printMotorConfigEb+0x28c>)
 800991c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009920:	f009 fa02 	bl	8012d28 <sniprintf>
        drvPrint(buffer);
 8009924:	f107 0208 	add.w	r2, r7, #8
 8009928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800992c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009930:	4611      	mov	r1, r2
 8009932:	6818      	ldr	r0, [r3, #0]
 8009934:	f000 f9b0 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
 8009938:	e016      	b.n	8009968 <_ZN7DRV821416printMotorConfigEb+0x88>
    } else {
        snprintf(buffer, sizeof(buffer), "DRV8214 Driver %d", driver_ID);
 800993a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800993e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	785b      	ldrb	r3, [r3, #1]
 8009946:	f107 0008 	add.w	r0, r7, #8
 800994a:	4a89      	ldr	r2, [pc, #548]	@ (8009b70 <_ZN7DRV821416printMotorConfigEb+0x290>)
 800994c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009950:	f009 f9ea 	bl	8012d28 <sniprintf>
        drvPrint(buffer);
 8009954:	f107 0208 	add.w	r2, r7, #8
 8009958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800995c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009960:	4611      	mov	r1, r2
 8009962:	6818      	ldr	r0, [r3, #0]
 8009964:	f000 f998 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    }
    snprintf(buffer, sizeof(buffer),
        "Address: 0x%02X | Sense Resistor: %d Ohms | Ripples per Rotor Revolution: %d | Ripples per Shaft Revolution: %d\n",
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 8009968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer),
 8009974:	461c      	mov	r4, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 8009976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	885b      	ldrh	r3, [r3, #2]
    snprintf(buffer, sizeof(buffer),
 8009982:	461a      	mov	r2, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 8009984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009988:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	889b      	ldrh	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer),
 8009990:	4619      	mov	r1, r3
        address, Ripropri, ripples_per_revolution, ripples_per_revolution * motor_reduction_ratio);
 8009992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009996:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	889b      	ldrh	r3, [r3, #4]
 800999e:	4618      	mov	r0, r3
 80099a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	79db      	ldrb	r3, [r3, #7]
    snprintf(buffer, sizeof(buffer),
 80099ac:	fb00 f303 	mul.w	r3, r0, r3
 80099b0:	f107 0008 	add.w	r0, r7, #8
 80099b4:	9302      	str	r3, [sp, #8]
 80099b6:	9101      	str	r1, [sp, #4]
 80099b8:	9200      	str	r2, [sp, #0]
 80099ba:	4623      	mov	r3, r4
 80099bc:	4a6d      	ldr	r2, [pc, #436]	@ (8009b74 <_ZN7DRV821416printMotorConfigEb+0x294>)
 80099be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80099c2:	f009 f9b1 	bl	8012d28 <sniprintf>
    drvPrint(buffer);
 80099c6:	f107 0208 	add.w	r2, r7, #8
 80099ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099d2:	4611      	mov	r1, r2
 80099d4:	6818      	ldr	r0, [r3, #0]
 80099d6:	f000 f95f 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
        config.voltage_range ? "Enabled" : "Disabled",
 80099da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	7bdb      	ldrb	r3, [r3, #15]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <_ZN7DRV821416printMotorConfigEb+0x10e>
 80099ea:	4c63      	ldr	r4, [pc, #396]	@ (8009b78 <_ZN7DRV821416printMotorConfigEb+0x298>)
 80099ec:	e000      	b.n	80099f0 <_ZN7DRV821416printMotorConfigEb+0x110>
 80099ee:	4c63      	ldr	r4, [pc, #396]	@ (8009b7c <_ZN7DRV821416printMotorConfigEb+0x29c>)
        config.stall_enabled ? "Enabled" : "Disabled",
 80099f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	7d1b      	ldrb	r3, [r3, #20]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <_ZN7DRV821416printMotorConfigEb+0x124>
 8009a00:	4b5d      	ldr	r3, [pc, #372]	@ (8009b78 <_ZN7DRV821416printMotorConfigEb+0x298>)
 8009a02:	e000      	b.n	8009a06 <_ZN7DRV821416printMotorConfigEb+0x126>
 8009a04:	4b5d      	ldr	r3, [pc, #372]	@ (8009b7c <_ZN7DRV821416printMotorConfigEb+0x29c>)
        config.I2CControlled ? "Yes" : "No",
 8009a06:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8009a0a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8009a0e:	6812      	ldr	r2, [r2, #0]
 8009a10:	7b12      	ldrb	r2, [r2, #12]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 8009a12:	2a00      	cmp	r2, #0
 8009a14:	d001      	beq.n	8009a1a <_ZN7DRV821416printMotorConfigEb+0x13a>
 8009a16:	4a5a      	ldr	r2, [pc, #360]	@ (8009b80 <_ZN7DRV821416printMotorConfigEb+0x2a0>)
 8009a18:	e000      	b.n	8009a1c <_ZN7DRV821416printMotorConfigEb+0x13c>
 8009a1a:	4a5a      	ldr	r2, [pc, #360]	@ (8009b84 <_ZN7DRV821416printMotorConfigEb+0x2a4>)
        (config.control_mode == PWM) ? "PWM" : "PH_EN");
 8009a1c:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8009a20:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 8009a24:	6809      	ldr	r1, [r1, #0]
 8009a26:	7b49      	ldrb	r1, [r1, #13]
    snprintf(buffer, sizeof(buffer), "Configuration: OVP: %s | STALL detect: %s | I2C controlled: %s | Mode: %s",
 8009a28:	2900      	cmp	r1, #0
 8009a2a:	d101      	bne.n	8009a30 <_ZN7DRV821416printMotorConfigEb+0x150>
 8009a2c:	4956      	ldr	r1, [pc, #344]	@ (8009b88 <_ZN7DRV821416printMotorConfigEb+0x2a8>)
 8009a2e:	e000      	b.n	8009a32 <_ZN7DRV821416printMotorConfigEb+0x152>
 8009a30:	4956      	ldr	r1, [pc, #344]	@ (8009b8c <_ZN7DRV821416printMotorConfigEb+0x2ac>)
 8009a32:	f107 0008 	add.w	r0, r7, #8
 8009a36:	9102      	str	r1, [sp, #8]
 8009a38:	9201      	str	r2, [sp, #4]
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	4623      	mov	r3, r4
 8009a3e:	4a54      	ldr	r2, [pc, #336]	@ (8009b90 <_ZN7DRV821416printMotorConfigEb+0x2b0>)
 8009a40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009a44:	f009 f970 	bl	8012d28 <sniprintf>
    drvPrint(buffer);
 8009a48:	f107 0208 	add.w	r2, r7, #8
 8009a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a54:	4611      	mov	r1, r2
 8009a56:	6818      	ldr	r0, [r3, #0]
 8009a58:	f000 f91e 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    
    // Regulation mode details
    drvPrint(" | Regulation: ");
 8009a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a64:	494b      	ldr	r1, [pc, #300]	@ (8009b94 <_ZN7DRV821416printMotorConfigEb+0x2b4>)
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	f000 f916 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    switch (config.regulation_mode) {
 8009a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	7b9b      	ldrb	r3, [r3, #14]
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d82f      	bhi.n	8009adc <_ZN7DRV821416printMotorConfigEb+0x1fc>
 8009a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a84 <_ZN7DRV821416printMotorConfigEb+0x1a4>)
 8009a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a82:	bf00      	nop
 8009a84:	08009a95 	.word	0x08009a95
 8009a88:	08009aa7 	.word	0x08009aa7
 8009a8c:	08009ab9 	.word	0x08009ab9
 8009a90:	08009acb 	.word	0x08009acb
        case CURRENT_FIXED:   drvPrint("CURRENT_FIXED\n"); break;
 8009a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a9c:	493e      	ldr	r1, [pc, #248]	@ (8009b98 <_ZN7DRV821416printMotorConfigEb+0x2b8>)
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	f000 f8fa 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
 8009aa4:	e01a      	b.n	8009adc <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case CURRENT_CYCLES:  drvPrint("CURRENT_CYCLES\n"); break;
 8009aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aae:	493b      	ldr	r1, [pc, #236]	@ (8009b9c <_ZN7DRV821416printMotorConfigEb+0x2bc>)
 8009ab0:	6818      	ldr	r0, [r3, #0]
 8009ab2:	f000 f8f1 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
 8009ab6:	e011      	b.n	8009adc <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case SPEED:           drvPrint("SPEED\n"); break;
 8009ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ac0:	4937      	ldr	r1, [pc, #220]	@ (8009ba0 <_ZN7DRV821416printMotorConfigEb+0x2c0>)
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	f000 f8e8 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
 8009ac8:	e008      	b.n	8009adc <_ZN7DRV821416printMotorConfigEb+0x1fc>
        case VOLTAGE:         drvPrint("VOLTAGE\n"); break;
 8009aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ad2:	4934      	ldr	r1, [pc, #208]	@ (8009ba4 <_ZN7DRV821416printMotorConfigEb+0x2c4>)
 8009ad4:	6818      	ldr	r0, [r3, #0]
 8009ad6:	f000 f8df 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
 8009ada:	bf00      	nop
    }
    
    snprintf(buffer, sizeof(buffer),
        "Vref: %.3f | Current Reg. Mode: %d | VRange: %s \n",
            config.Vref, config.current_reg_mode,
 8009adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	691b      	ldr	r3, [r3, #16]
    snprintf(buffer, sizeof(buffer),
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7f6 fd05 	bl	80004f8 <__aeabi_f2d>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
            config.Vref, config.current_reg_mode,
 8009af2:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8009af6:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 8009afa:	6809      	ldr	r1, [r1, #0]
 8009afc:	7e09      	ldrb	r1, [r1, #24]
    snprintf(buffer, sizeof(buffer),
 8009afe:	460c      	mov	r4, r1
            config.voltage_range ? "0V-3.92V" : "0V-15.7V");
 8009b00:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8009b04:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 8009b08:	6809      	ldr	r1, [r1, #0]
 8009b0a:	7bc9      	ldrb	r1, [r1, #15]
    snprintf(buffer, sizeof(buffer),
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	d001      	beq.n	8009b14 <_ZN7DRV821416printMotorConfigEb+0x234>
 8009b10:	4925      	ldr	r1, [pc, #148]	@ (8009ba8 <_ZN7DRV821416printMotorConfigEb+0x2c8>)
 8009b12:	e000      	b.n	8009b16 <_ZN7DRV821416printMotorConfigEb+0x236>
 8009b14:	4925      	ldr	r1, [pc, #148]	@ (8009bac <_ZN7DRV821416printMotorConfigEb+0x2cc>)
 8009b16:	f107 0008 	add.w	r0, r7, #8
 8009b1a:	9103      	str	r1, [sp, #12]
 8009b1c:	9402      	str	r4, [sp, #8]
 8009b1e:	e9cd 2300 	strd	r2, r3, [sp]
 8009b22:	4a23      	ldr	r2, [pc, #140]	@ (8009bb0 <_ZN7DRV821416printMotorConfigEb+0x2d0>)
 8009b24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009b28:	f009 f8fe 	bl	8012d28 <sniprintf>
    drvPrint(buffer);
 8009b2c:	f107 0208 	add.w	r2, r7, #8
 8009b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b38:	4611      	mov	r1, r2
 8009b3a:	6818      	ldr	r0, [r3, #0]
 8009b3c:	f000 f8ac 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "Stall Behavior: %s | Bridge Behavior Thr. reached: %s\n",
        config.stall_behavior ? "Drive current" : "Disable outputs",
 8009b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	7d9b      	ldrb	r3, [r3, #22]
    snprintf(buffer, sizeof(buffer),
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <_ZN7DRV821416printMotorConfigEb+0x274>
 8009b50:	4a18      	ldr	r2, [pc, #96]	@ (8009bb4 <_ZN7DRV821416printMotorConfigEb+0x2d4>)
 8009b52:	e000      	b.n	8009b56 <_ZN7DRV821416printMotorConfigEb+0x276>
 8009b54:	4a18      	ldr	r2, [pc, #96]	@ (8009bb8 <_ZN7DRV821416printMotorConfigEb+0x2d8>)
        config.bridge_behavior_thr_reached ? "H-bridge disabled" : "H-bridge stays enabled");
 8009b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	7ddb      	ldrb	r3, [r3, #23]
    snprintf(buffer, sizeof(buffer),
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d02c      	beq.n	8009bc0 <_ZN7DRV821416printMotorConfigEb+0x2e0>
 8009b66:	4b15      	ldr	r3, [pc, #84]	@ (8009bbc <_ZN7DRV821416printMotorConfigEb+0x2dc>)
 8009b68:	e02b      	b.n	8009bc2 <_ZN7DRV821416printMotorConfigEb+0x2e2>
 8009b6a:	bf00      	nop
 8009b6c:	08015cb8 	.word	0x08015cb8
 8009b70:	08015ce4 	.word	0x08015ce4
 8009b74:	08015cf8 	.word	0x08015cf8
 8009b78:	08015d6c 	.word	0x08015d6c
 8009b7c:	08015d74 	.word	0x08015d74
 8009b80:	08015d80 	.word	0x08015d80
 8009b84:	08015d84 	.word	0x08015d84
 8009b88:	08015d88 	.word	0x08015d88
 8009b8c:	08015d8c 	.word	0x08015d8c
 8009b90:	08015d94 	.word	0x08015d94
 8009b94:	08015de0 	.word	0x08015de0
 8009b98:	08015df0 	.word	0x08015df0
 8009b9c:	08015e00 	.word	0x08015e00
 8009ba0:	08015e10 	.word	0x08015e10
 8009ba4:	08015e18 	.word	0x08015e18
 8009ba8:	08015e24 	.word	0x08015e24
 8009bac:	08015e30 	.word	0x08015e30
 8009bb0:	08015e3c 	.word	0x08015e3c
 8009bb4:	08015e70 	.word	0x08015e70
 8009bb8:	08015e80 	.word	0x08015e80
 8009bbc:	08015e90 	.word	0x08015e90
 8009bc0:	4b31      	ldr	r3, [pc, #196]	@ (8009c88 <_ZN7DRV821416printMotorConfigEb+0x3a8>)
 8009bc2:	f107 0008 	add.w	r0, r7, #8
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	4a30      	ldr	r2, [pc, #192]	@ (8009c8c <_ZN7DRV821416printMotorConfigEb+0x3ac>)
 8009bcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009bd0:	f009 f8aa 	bl	8012d28 <sniprintf>
    drvPrint(buffer);
 8009bd4:	f107 0208 	add.w	r2, r7, #8
 8009bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009be0:	4611      	mov	r1, r2
 8009be2:	6818      	ldr	r0, [r3, #0]
 8009be4:	f000 f858 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "Inrush Duration: %d ms | INV_R: %d | INV_R_SCALE: %d\n",
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 8009be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
    snprintf(buffer, sizeof(buffer),
 8009bf4:	4619      	mov	r1, r3
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 8009bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    snprintf(buffer, sizeof(buffer),
 8009c04:	461a      	mov	r2, r3
        config.inrush_duration, config.inv_r, config.inv_r_scale);
 8009c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
    snprintf(buffer, sizeof(buffer),
 8009c12:	f107 0008 	add.w	r0, r7, #8
 8009c16:	9301      	str	r3, [sp, #4]
 8009c18:	9200      	str	r2, [sp, #0]
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8009c90 <_ZN7DRV821416printMotorConfigEb+0x3b0>)
 8009c1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009c22:	f009 f881 	bl	8012d28 <sniprintf>
    drvPrint(buffer);
 8009c26:	f107 0208 	add.w	r2, r7, #8
 8009c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c32:	4611      	mov	r1, r2
 8009c34:	6818      	ldr	r0, [r3, #0]
 8009c36:	f000 f82f 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>

    snprintf(buffer, sizeof(buffer),
        "KMC: %d | KMCScale: %d\n",
        config.kmc, config.kmc_scale);
 8009c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
    snprintf(buffer, sizeof(buffer),
 8009c48:	461a      	mov	r2, r3
        config.kmc, config.kmc_scale);
 8009c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
    snprintf(buffer, sizeof(buffer),
 8009c58:	f107 0008 	add.w	r0, r7, #8
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	4a0c      	ldr	r2, [pc, #48]	@ (8009c94 <_ZN7DRV821416printMotorConfigEb+0x3b4>)
 8009c62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009c66:	f009 f85f 	bl	8012d28 <sniprintf>
    drvPrint(buffer);
 8009c6a:	f107 0208 	add.w	r2, r7, #8
 8009c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c76:	4611      	mov	r1, r2
 8009c78:	6818      	ldr	r0, [r3, #0]
 8009c7a:	f000 f80d 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
}
 8009c7e:	bf00      	nop
 8009c80:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd90      	pop	{r4, r7, pc}
 8009c88:	08015ea4 	.word	0x08015ea4
 8009c8c:	08015ebc 	.word	0x08015ebc
 8009c90:	08015ef4 	.word	0x08015ef4
 8009c94:	08015f2c 	.word	0x08015f2c

08009c98 <_ZN7DRV82148drvPrintEPKc>:

void DRV8214::drvPrint(const char* msg) {
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
    #elif defined(DRV8214_PLATFORM_STM32)
        // Option 1: Using HAL_UART_Transmit directly
        // HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    
        // Option 2: If you have retargeted printf to UART, you could simply use:
        printf("%s", msg);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	4803      	ldr	r0, [pc, #12]	@ (8009cb4 <_ZN7DRV82148drvPrintEPKc+0x1c>)
 8009ca6:	f009 f937 	bl	8012f18 <iprintf>
    #endif
}
 8009caa:	bf00      	nop
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	08015f44 	.word	0x08015f44

08009cb8 <_ZN7DRV821416printFaultStatusEv>:

void DRV8214::printFaultStatus() {
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b0c4      	sub	sp, #272	@ 0x110
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009cc6:	6018      	str	r0, [r3, #0]
    char buffer[256];  // Buffer for formatted output
    uint8_t faultReg = drv8214_i2c_read_register(address, DRV8214_FAULT);
 8009cc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ccc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 f8d0 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

    snprintf(buffer, sizeof(buffer), "DRV8214 Driver %d - FAULT Register Status:\n", driver_ID);
 8009ce2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ce6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	785b      	ldrb	r3, [r3, #1]
 8009cee:	f107 000c 	add.w	r0, r7, #12
 8009cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8009dec <_ZN7DRV821416printFaultStatusEv+0x134>)
 8009cf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009cf8:	f009 f816 	bl	8012d28 <sniprintf>
    drvPrint(buffer);
 8009cfc:	f107 020c 	add.w	r2, r7, #12
 8009d00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d08:	4611      	mov	r1, r2
 8009d0a:	6818      	ldr	r0, [r3, #0]
 8009d0c:	f7ff ffc4 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>

    if (faultReg & (1 << 7)) {
 8009d10:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	da08      	bge.n	8009d2a <_ZN7DRV821416printFaultStatusEv+0x72>
        drvPrint(" - FAULT: General fault detected.\n");
 8009d18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d20:	4933      	ldr	r1, [pc, #204]	@ (8009df0 <_ZN7DRV821416printFaultStatusEv+0x138>)
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	f7ff ffb8 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
 8009d28:	e007      	b.n	8009d3a <_ZN7DRV821416printFaultStatusEv+0x82>
    } else {
        drvPrint(" - FAULT: No faults detected.\n");
 8009d2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d32:	4930      	ldr	r1, [pc, #192]	@ (8009df4 <_ZN7DRV821416printFaultStatusEv+0x13c>)
 8009d34:	6818      	ldr	r0, [r3, #0]
 8009d36:	f7ff ffaf 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 5)) {
 8009d3a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8009d3e:	f003 0320 	and.w	r3, r3, #32
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d007      	beq.n	8009d56 <_ZN7DRV821416printFaultStatusEv+0x9e>
        drvPrint(" - STALL: Motor stall detected.\n");
 8009d46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d4e:	492a      	ldr	r1, [pc, #168]	@ (8009df8 <_ZN7DRV821416printFaultStatusEv+0x140>)
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	f7ff ffa1 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 4)) {
 8009d56:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8009d5a:	f003 0310 	and.w	r3, r3, #16
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d007      	beq.n	8009d72 <_ZN7DRV821416printFaultStatusEv+0xba>
        drvPrint(" - OCP: Overcurrent protection (OCP) event occurred.\n");
 8009d62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d6a:	4924      	ldr	r1, [pc, #144]	@ (8009dfc <_ZN7DRV821416printFaultStatusEv+0x144>)
 8009d6c:	6818      	ldr	r0, [r3, #0]
 8009d6e:	f7ff ff93 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 3)) {
 8009d72:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8009d76:	f003 0308 	and.w	r3, r3, #8
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d007      	beq.n	8009d8e <_ZN7DRV821416printFaultStatusEv+0xd6>
        drvPrint(" - OVP: Overvoltage protection (OVP) event occurred.\n");
 8009d7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d86:	491e      	ldr	r1, [pc, #120]	@ (8009e00 <_ZN7DRV821416printFaultStatusEv+0x148>)
 8009d88:	6818      	ldr	r0, [r3, #0]
 8009d8a:	f7ff ff85 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 2)) {
 8009d8e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8009d92:	f003 0304 	and.w	r3, r3, #4
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d007      	beq.n	8009daa <_ZN7DRV821416printFaultStatusEv+0xf2>
        drvPrint(" - TSD: Thermal shutdown (TSD) event occurred.\n");
 8009d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009da2:	4918      	ldr	r1, [pc, #96]	@ (8009e04 <_ZN7DRV821416printFaultStatusEv+0x14c>)
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f7ff ff77 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 1)) {
 8009daa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8009dae:	f003 0302 	and.w	r3, r3, #2
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d007      	beq.n	8009dc6 <_ZN7DRV821416printFaultStatusEv+0x10e>
        drvPrint(" - NPOR: Device is in power-on reset (NPOR).\n");
 8009db6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009dbe:	4912      	ldr	r1, [pc, #72]	@ (8009e08 <_ZN7DRV821416printFaultStatusEv+0x150>)
 8009dc0:	6818      	ldr	r0, [r3, #0]
 8009dc2:	f7ff ff69 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    }

    if (faultReg & (1 << 0)) {
 8009dc6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d007      	beq.n	8009de2 <_ZN7DRV821416printFaultStatusEv+0x12a>
        drvPrint(" - CNT_DONE: Ripple counting threshold exceeded.\n");
 8009dd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009dda:	490c      	ldr	r1, [pc, #48]	@ (8009e0c <_ZN7DRV821416printFaultStatusEv+0x154>)
 8009ddc:	6818      	ldr	r0, [r3, #0]
 8009dde:	f7ff ff5b 	bl	8009c98 <_ZN7DRV82148drvPrintEPKc>
    }
}
 8009de2:	bf00      	nop
 8009de4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	08015f48 	.word	0x08015f48
 8009df0:	08015f74 	.word	0x08015f74
 8009df4:	08015f98 	.word	0x08015f98
 8009df8:	08015fb8 	.word	0x08015fb8
 8009dfc:	08015fdc 	.word	0x08015fdc
 8009e00:	08016014 	.word	0x08016014
 8009e04:	0801604c 	.word	0x0801604c
 8009e08:	0801607c 	.word	0x0801607c
 8009e0c:	080160ac 	.word	0x080160ac

08009e10 <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef>:
#include "drv8214_platform_i2c.h"

#ifdef DRV8214_PLATFORM_STM32
    static I2C_HandleTypeDef* drv_i2c_handle = NULL; // Static pointer to the I2C handle

    void drv8214_i2c_set_handle(I2C_HandleTypeDef* hi2c) {
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
        drv_i2c_handle = hi2c;
 8009e18:	4a04      	ldr	r2, [pc, #16]	@ (8009e2c <_Z22drv8214_i2c_set_handleP19__I2C_HandleTypeDef+0x1c>)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6013      	str	r3, [r2, #0]
    }
 8009e1e:	bf00      	nop
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	200006d0 	.word	0x200006d0

08009e30 <_Z26drv8214_i2c_write_registerhhh>:
#endif

void drv8214_i2c_write_register(uint8_t device_address, uint8_t reg, uint8_t value) {
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	4603      	mov	r3, r0
 8009e38:	71fb      	strb	r3, [r7, #7]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	71bb      	strb	r3, [r7, #6]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	717b      	strb	r3, [r7, #5]
    if (drv_i2c_handle == NULL) {
 8009e42:	4b0d      	ldr	r3, [pc, #52]	@ (8009e78 <_Z26drv8214_i2c_write_registerhhh+0x48>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d012      	beq.n	8009e70 <_Z26drv8214_i2c_write_registerhhh+0x40>
    Wire.beginTransmission(device_address);
    Wire.write(reg);
    Wire.write(value);
    Wire.endTransmission();
#elif defined(DRV8214_PLATFORM_STM32)
    uint8_t data[2] = { reg, value };
 8009e4a:	79bb      	ldrb	r3, [r7, #6]
 8009e4c:	733b      	strb	r3, [r7, #12]
 8009e4e:	797b      	ldrb	r3, [r7, #5]
 8009e50:	737b      	strb	r3, [r7, #13]
    // STM32 HAL expects the 7-bit address to be shifted left by 1
    HAL_I2C_Master_Transmit(drv_i2c_handle, (uint16_t)(device_address << 1), data, 2, HAL_MAX_DELAY);
 8009e52:	4b09      	ldr	r3, [pc, #36]	@ (8009e78 <_Z26drv8214_i2c_write_registerhhh+0x48>)
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	79fb      	ldrb	r3, [r7, #7]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	b299      	uxth	r1, r3
 8009e5e:	f107 020c 	add.w	r2, r7, #12
 8009e62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	2302      	movs	r3, #2
 8009e6a:	f002 fbcb 	bl	800c604 <HAL_I2C_Master_Transmit>
 8009e6e:	e000      	b.n	8009e72 <_Z26drv8214_i2c_write_registerhhh+0x42>
        return;
 8009e70:	bf00      	nop
    // Add error handling for HAL_StatusTypeDef if needed
#endif
}
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	200006d0 	.word	0x200006d0

08009e7c <_Z25drv8214_i2c_read_registerhh>:

uint8_t drv8214_i2c_read_register(uint8_t device_address, uint8_t reg) {
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af02      	add	r7, sp, #8
 8009e82:	4603      	mov	r3, r0
 8009e84:	460a      	mov	r2, r1
 8009e86:	71fb      	strb	r3, [r7, #7]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	71bb      	strb	r3, [r7, #6]
    if (drv_i2c_handle == NULL) {
 8009e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8009f00 <_Z25drv8214_i2c_read_registerhh+0x84>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <_Z25drv8214_i2c_read_registerhh+0x1c>
         // Handle error: I2C handle not set
        return 0;
 8009e94:	2300      	movs	r3, #0
 8009e96:	e02f      	b.n	8009ef8 <_Z25drv8214_i2c_read_registerhh+0x7c>
    if (Wire.available()) {
        return Wire.read();
    }
    return 0; // Error or no data
#elif defined(DRV8214_PLATFORM_STM32)
    uint8_t data = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73fb      	strb	r3, [r7, #15]
    // STM32 HAL I2C typically uses separate Transmit then Receive for this,
    // or HAL_I2C_Mem_Read for register-based reads.
    // Your Arduino code pattern translates better to separate Transmit/Receive.
    if (HAL_I2C_Master_Transmit(drv_i2c_handle, (uint16_t)(device_address << 1), &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 8009e9c:	4b18      	ldr	r3, [pc, #96]	@ (8009f00 <_Z25drv8214_i2c_read_registerhh+0x84>)
 8009e9e:	6818      	ldr	r0, [r3, #0]
 8009ea0:	79fb      	ldrb	r3, [r7, #7]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	b299      	uxth	r1, r3
 8009ea8:	1dba      	adds	r2, r7, #6
 8009eaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	f002 fba7 	bl	800c604 <HAL_I2C_Master_Transmit>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bf0c      	ite	eq
 8009ebc:	2301      	moveq	r3, #1
 8009ebe:	2300      	movne	r3, #0
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d017      	beq.n	8009ef6 <_Z25drv8214_i2c_read_registerhh+0x7a>
        if (HAL_I2C_Master_Receive(drv_i2c_handle, (uint16_t)(device_address << 1), &data, 1, HAL_MAX_DELAY) == HAL_OK) {
 8009ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8009f00 <_Z25drv8214_i2c_read_registerhh+0x84>)
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	005b      	lsls	r3, r3, #1
 8009ed0:	b299      	uxth	r1, r3
 8009ed2:	f107 020f 	add.w	r2, r7, #15
 8009ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	2301      	movs	r3, #1
 8009ede:	f002 fca9 	bl	800c834 <HAL_I2C_Master_Receive>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	bf0c      	ite	eq
 8009ee8:	2301      	moveq	r3, #1
 8009eea:	2300      	movne	r3, #0
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <_Z25drv8214_i2c_read_registerhh+0x7a>
            return data;
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	e000      	b.n	8009ef8 <_Z25drv8214_i2c_read_registerhh+0x7c>
        }
    }
    // Consider using HAL_I2C_Mem_Read for more robustness:
    // HAL_I2C_Mem_Read(drv_i2c_handle, (uint16_t)(device_address << 1), reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
    return 0; // Error
 8009ef6:	2300      	movs	r3, #0
#endif
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	200006d0 	.word	0x200006d0

08009f04 <_Z27drv8214_i2c_modify_registerhhhh>:

void drv8214_i2c_modify_register(uint8_t device_address, uint8_t reg, uint8_t mask, uint8_t enable_bits) {
 8009f04:	b590      	push	{r4, r7, lr}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	4611      	mov	r1, r2
 8009f10:	461a      	mov	r2, r3
 8009f12:	4623      	mov	r3, r4
 8009f14:	71fb      	strb	r3, [r7, #7]
 8009f16:	4603      	mov	r3, r0
 8009f18:	71bb      	strb	r3, [r7, #6]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	717b      	strb	r3, [r7, #5]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	713b      	strb	r3, [r7, #4]
    uint8_t current_value = drv8214_i2c_read_register(device_address, reg);
 8009f22:	79ba      	ldrb	r2, [r7, #6]
 8009f24:	79fb      	ldrb	r3, [r7, #7]
 8009f26:	4611      	mov	r1, r2
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7ff ffa7 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	73fb      	strb	r3, [r7, #15]
    if (enable_bits) {
 8009f32:	793b      	ldrb	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d004      	beq.n	8009f42 <_Z27drv8214_i2c_modify_registerhhhh+0x3e>
        current_value |= mask;  // Set bits
 8009f38:	7bfa      	ldrb	r2, [r7, #15]
 8009f3a:	797b      	ldrb	r3, [r7, #5]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	73fb      	strb	r3, [r7, #15]
 8009f40:	e008      	b.n	8009f54 <_Z27drv8214_i2c_modify_registerhhhh+0x50>
    } else {
        current_value &= ~mask; // Clear bits
 8009f42:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009f46:	43db      	mvns	r3, r3
 8009f48:	b25a      	sxtb	r2, r3
 8009f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f4e:	4013      	ands	r3, r2
 8009f50:	b25b      	sxtb	r3, r3
 8009f52:	73fb      	strb	r3, [r7, #15]
    }
    drv8214_i2c_write_register(device_address, reg, current_value);
 8009f54:	7bfa      	ldrb	r2, [r7, #15]
 8009f56:	79b9      	ldrb	r1, [r7, #6]
 8009f58:	79fb      	ldrb	r3, [r7, #7]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff ff68 	bl	8009e30 <_Z26drv8214_i2c_write_registerhhh>
}
 8009f60:	bf00      	nop
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd90      	pop	{r4, r7, pc}

08009f68 <_Z32drv8214_i2c_modify_register_bitshhhh>:

void drv8214_i2c_modify_register_bits(uint8_t device_address, uint8_t reg, uint8_t mask, uint8_t new_value) {
 8009f68:	b590      	push	{r4, r7, lr}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4604      	mov	r4, r0
 8009f70:	4608      	mov	r0, r1
 8009f72:	4611      	mov	r1, r2
 8009f74:	461a      	mov	r2, r3
 8009f76:	4623      	mov	r3, r4
 8009f78:	71fb      	strb	r3, [r7, #7]
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	71bb      	strb	r3, [r7, #6]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	717b      	strb	r3, [r7, #5]
 8009f82:	4613      	mov	r3, r2
 8009f84:	713b      	strb	r3, [r7, #4]
    uint8_t current_value = drv8214_i2c_read_register(device_address, reg);
 8009f86:	79ba      	ldrb	r2, [r7, #6]
 8009f88:	79fb      	ldrb	r3, [r7, #7]
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7ff ff75 	bl	8009e7c <_Z25drv8214_i2c_read_registerhh>
 8009f92:	4603      	mov	r3, r0
 8009f94:	73fb      	strb	r3, [r7, #15]
    current_value = (current_value & ~mask) | (new_value & mask); // Apply new value only to masked bits
 8009f96:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009f9a:	43db      	mvns	r3, r3
 8009f9c:	b25a      	sxtb	r2, r3
 8009f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	b25a      	sxtb	r2, r3
 8009fa6:	7939      	ldrb	r1, [r7, #4]
 8009fa8:	797b      	ldrb	r3, [r7, #5]
 8009faa:	400b      	ands	r3, r1
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	b25b      	sxtb	r3, r3
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	b25b      	sxtb	r3, r3
 8009fb4:	73fb      	strb	r3, [r7, #15]
    drv8214_i2c_write_register(device_address, reg, current_value);
 8009fb6:	7bfa      	ldrb	r2, [r7, #15]
 8009fb8:	79b9      	ldrb	r1, [r7, #6]
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7ff ff37 	bl	8009e30 <_Z26drv8214_i2c_write_registerhhh>
 8009fc2:	bf00      	nop
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd90      	pop	{r4, r7, pc}
	...

08009fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009fd6:	4b0c      	ldr	r3, [pc, #48]	@ (800a008 <HAL_Init+0x3c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a0b      	ldr	r2, [pc, #44]	@ (800a008 <HAL_Init+0x3c>)
 8009fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fe0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009fe2:	2003      	movs	r0, #3
 8009fe4:	f001 fcc2 	bl	800b96c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009fe8:	200f      	movs	r0, #15
 8009fea:	f000 f80f 	bl	800a00c <HAL_InitTick>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	71fb      	strb	r3, [r7, #7]
 8009ff8:	e001      	b.n	8009ffe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009ffa:	f7f9 f80c 	bl	8003016 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	58004000 	.word	0x58004000

0800a00c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800a018:	4b17      	ldr	r3, [pc, #92]	@ (800a078 <HAL_InitTick+0x6c>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d024      	beq.n	800a06a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a020:	f004 ff2e 	bl	800ee80 <HAL_RCC_GetHCLKFreq>
 800a024:	4602      	mov	r2, r0
 800a026:	4b14      	ldr	r3, [pc, #80]	@ (800a078 <HAL_InitTick+0x6c>)
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	4619      	mov	r1, r3
 800a02c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a030:	fbb3 f3f1 	udiv	r3, r3, r1
 800a034:	fbb2 f3f3 	udiv	r3, r2, r3
 800a038:	4618      	mov	r0, r3
 800a03a:	f001 fcd8 	bl	800b9ee <HAL_SYSTICK_Config>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10f      	bne.n	800a064 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b0f      	cmp	r3, #15
 800a048:	d809      	bhi.n	800a05e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a04a:	2200      	movs	r2, #0
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a052:	f001 fc96 	bl	800b982 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a056:	4a09      	ldr	r2, [pc, #36]	@ (800a07c <HAL_InitTick+0x70>)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	e007      	b.n	800a06e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	73fb      	strb	r3, [r7, #15]
 800a062:	e004      	b.n	800a06e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]
 800a068:	e001      	b.n	800a06e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	2000008c 	.word	0x2000008c
 800a07c:	20000088 	.word	0x20000088

0800a080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a080:	b480      	push	{r7}
 800a082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a084:	4b06      	ldr	r3, [pc, #24]	@ (800a0a0 <HAL_IncTick+0x20>)
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	4b06      	ldr	r3, [pc, #24]	@ (800a0a4 <HAL_IncTick+0x24>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4413      	add	r3, r2
 800a090:	4a04      	ldr	r2, [pc, #16]	@ (800a0a4 <HAL_IncTick+0x24>)
 800a092:	6013      	str	r3, [r2, #0]
}
 800a094:	bf00      	nop
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	2000008c 	.word	0x2000008c
 800a0a4:	200006d4 	.word	0x200006d4

0800a0a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	af00      	add	r7, sp, #0
  return uwTick;
 800a0ac:	4b03      	ldr	r3, [pc, #12]	@ (800a0bc <HAL_GetTick+0x14>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	200006d4 	.word	0x200006d4

0800a0c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800a0c4:	4b03      	ldr	r3, [pc, #12]	@ (800a0d4 <HAL_GetTickPrio+0x14>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20000088 	.word	0x20000088

0800a0d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a0e0:	f7ff ffe2 	bl	800a0a8 <HAL_GetTick>
 800a0e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0f0:	d005      	beq.n	800a0fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a11c <HAL_Delay+0x44>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a0fe:	bf00      	nop
 800a100:	f7ff ffd2 	bl	800a0a8 <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d8f7      	bhi.n	800a100 <HAL_Delay+0x28>
  {
  }
}
 800a110:	bf00      	nop
 800a112:	bf00      	nop
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	2000008c 	.word	0x2000008c

0800a120 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800a120:	b480      	push	{r7}
 800a122:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800a124:	4b05      	ldr	r3, [pc, #20]	@ (800a13c <HAL_SuspendTick+0x1c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a04      	ldr	r2, [pc, #16]	@ (800a13c <HAL_SuspendTick+0x1c>)
 800a12a:	f023 0302 	bic.w	r3, r3, #2
 800a12e:	6013      	str	r3, [r2, #0]
}
 800a130:	bf00      	nop
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	e000e010 	.word	0xe000e010

0800a140 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800a144:	4b05      	ldr	r3, [pc, #20]	@ (800a15c <HAL_ResumeTick+0x1c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a04      	ldr	r2, [pc, #16]	@ (800a15c <HAL_ResumeTick+0x1c>)
 800a14a:	f043 0302 	orr.w	r3, r3, #2
 800a14e:	6013      	str	r3, [r2, #0]
}
 800a150:	bf00      	nop
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	e000e010 	.word	0xe000e010

0800a160 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	431a      	orrs	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800a17a:	bf00      	nop
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a186:	b480      	push	{r7}
 800a188:	b083      	sub	sp, #12
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	431a      	orrs	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	609a      	str	r2, [r3, #8]
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
 800a1d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3360      	adds	r3, #96	@ 0x60
 800a1da:	461a      	mov	r2, r3
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	4b08      	ldr	r3, [pc, #32]	@ (800a20c <LL_ADC_SetOffset+0x44>)
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	430a      	orrs	r2, r1
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a200:	bf00      	nop
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	03fff000 	.word	0x03fff000

0800a210 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	3360      	adds	r3, #96	@ 0x60
 800a21e:	461a      	mov	r2, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	3360      	adds	r3, #96	@ 0x60
 800a24c:	461a      	mov	r2, r3
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	431a      	orrs	r2, r3
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a266:	bf00      	nop
 800a268:	371c      	adds	r7, #28
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a272:	b480      	push	{r7}
 800a274:	b083      	sub	sp, #12
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a282:	2b00      	cmp	r3, #0
 800a284:	d101      	bne.n	800a28a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a286:	2301      	movs	r3, #1
 800a288:	e000      	b.n	800a28c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a28a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a298:	b480      	push	{r7}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	3330      	adds	r3, #48	@ 0x30
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	0a1b      	lsrs	r3, r3, #8
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	f003 030c 	and.w	r3, r3, #12
 800a2b4:	4413      	add	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	f003 031f 	and.w	r3, r3, #31
 800a2c2:	211f      	movs	r1, #31
 800a2c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2c8:	43db      	mvns	r3, r3
 800a2ca:	401a      	ands	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	0e9b      	lsrs	r3, r3, #26
 800a2d0:	f003 011f 	and.w	r1, r3, #31
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f003 031f 	and.w	r3, r3, #31
 800a2da:	fa01 f303 	lsl.w	r3, r1, r3
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800a2e4:	bf00      	nop
 800a2e6:	371c      	adds	r7, #28
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	3314      	adds	r3, #20
 800a300:	461a      	mov	r2, r3
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	0e5b      	lsrs	r3, r3, #25
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	4413      	add	r3, r2
 800a30e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	0d1b      	lsrs	r3, r3, #20
 800a318:	f003 031f 	and.w	r3, r3, #31
 800a31c:	2107      	movs	r1, #7
 800a31e:	fa01 f303 	lsl.w	r3, r1, r3
 800a322:	43db      	mvns	r3, r3
 800a324:	401a      	ands	r2, r3
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	0d1b      	lsrs	r3, r3, #20
 800a32a:	f003 031f 	and.w	r3, r3, #31
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	fa01 f303 	lsl.w	r3, r1, r3
 800a334:	431a      	orrs	r2, r3
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800a33a:	bf00      	nop
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a360:	43db      	mvns	r3, r3
 800a362:	401a      	ands	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f003 0318 	and.w	r3, r3, #24
 800a36a:	4908      	ldr	r1, [pc, #32]	@ (800a38c <LL_ADC_SetChannelSingleDiff+0x44>)
 800a36c:	40d9      	lsrs	r1, r3
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	400b      	ands	r3, r1
 800a372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a376:	431a      	orrs	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a37e:	bf00      	nop
 800a380:	3714      	adds	r7, #20
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	0007ffff 	.word	0x0007ffff

0800a390 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a3a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	6093      	str	r3, [r2, #8]
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3c8:	d101      	bne.n	800a3ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e000      	b.n	800a3d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800a3ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a3f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a414:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a418:	d101      	bne.n	800a41e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e000      	b.n	800a420 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a43c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a440:	f043 0201 	orr.w	r2, r3, #1
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a464:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a468:	f043 0202 	orr.w	r2, r3, #2
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d101      	bne.n	800a494 <LL_ADC_IsEnabled+0x18>
 800a490:	2301      	movs	r3, #1
 800a492:	e000      	b.n	800a496 <LL_ADC_IsEnabled+0x1a>
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f003 0302 	and.w	r3, r3, #2
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d101      	bne.n	800a4ba <LL_ADC_IsDisableOngoing+0x18>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e000      	b.n	800a4bc <LL_ADC_IsDisableOngoing+0x1a>
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a4dc:	f043 0204 	orr.w	r2, r3, #4
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a500:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a504:	f043 0210 	orr.w	r2, r3, #16
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	f003 0304 	and.w	r3, r3, #4
 800a528:	2b04      	cmp	r3, #4
 800a52a:	d101      	bne.n	800a530 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a52c:	2301      	movs	r3, #1
 800a52e:	e000      	b.n	800a532 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a54e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a552:	f043 0220 	orr.w	r2, r3, #32
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	f003 0308 	and.w	r3, r3, #8
 800a576:	2b08      	cmp	r3, #8
 800a578:	d101      	bne.n	800a57e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e000      	b.n	800a580 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b088      	sub	sp, #32
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800a598:	2300      	movs	r3, #0
 800a59a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e12e      	b.n	800a808 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d109      	bne.n	800a5cc <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7f6 fdc5 	bl	8001148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7ff feef 	bl	800a3b4 <LL_ADC_IsDeepPowerDownEnabled>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d004      	beq.n	800a5e6 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff fed5 	bl	800a390 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7ff ff0a 	bl	800a404 <LL_ADC_IsInternalRegulatorEnabled>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d115      	bne.n	800a622 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff feee 	bl	800a3dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a600:	4b83      	ldr	r3, [pc, #524]	@ (800a810 <HAL_ADC_Init+0x284>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	099b      	lsrs	r3, r3, #6
 800a606:	4a83      	ldr	r2, [pc, #524]	@ (800a814 <HAL_ADC_Init+0x288>)
 800a608:	fba2 2303 	umull	r2, r3, r2, r3
 800a60c:	099b      	lsrs	r3, r3, #6
 800a60e:	3301      	adds	r3, #1
 800a610:	005b      	lsls	r3, r3, #1
 800a612:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a614:	e002      	b.n	800a61c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	3b01      	subs	r3, #1
 800a61a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1f9      	bne.n	800a616 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff feec 	bl	800a404 <LL_ADC_IsInternalRegulatorEnabled>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10d      	bne.n	800a64e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a636:	f043 0210 	orr.w	r2, r3, #16
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a642:	f043 0201 	orr.w	r2, r3, #1
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff ff60 	bl	800a518 <LL_ADC_REG_IsConversionOngoing>
 800a658:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a65e:	f003 0310 	and.w	r3, r3, #16
 800a662:	2b00      	cmp	r3, #0
 800a664:	f040 80c7 	bne.w	800a7f6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f040 80c3 	bne.w	800a7f6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a674:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a678:	f043 0202 	orr.w	r2, r3, #2
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4618      	mov	r0, r3
 800a686:	f7ff fef9 	bl	800a47c <LL_ADC_IsEnabled>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10b      	bne.n	800a6a8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a690:	4861      	ldr	r0, [pc, #388]	@ (800a818 <HAL_ADC_Init+0x28c>)
 800a692:	f7ff fef3 	bl	800a47c <LL_ADC_IsEnabled>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d105      	bne.n	800a6a8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	485e      	ldr	r0, [pc, #376]	@ (800a81c <HAL_ADC_Init+0x290>)
 800a6a4:	f7ff fd5c 	bl	800a160 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	7e5b      	ldrb	r3, [r3, #25]
 800a6ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a6b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800a6b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800a6be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6c6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800a6c8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d106      	bne.n	800a6e8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	045b      	lsls	r3, r3, #17
 800a6e2:	69ba      	ldr	r2, [r7, #24]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d009      	beq.n	800a704 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	4313      	orrs	r3, r2
 800a702:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68da      	ldr	r2, [r3, #12]
 800a70a:	4b45      	ldr	r3, [pc, #276]	@ (800a820 <HAL_ADC_Init+0x294>)
 800a70c:	4013      	ands	r3, r2
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	69b9      	ldr	r1, [r7, #24]
 800a714:	430b      	orrs	r3, r1
 800a716:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff fefb 	bl	800a518 <LL_ADC_REG_IsConversionOngoing>
 800a722:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4618      	mov	r0, r3
 800a72a:	f7ff ff1c 	bl	800a566 <LL_ADC_INJ_IsConversionOngoing>
 800a72e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d13d      	bne.n	800a7b2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d13a      	bne.n	800a7b2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800a740:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a748:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800a74a:	4313      	orrs	r3, r2
 800a74c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a758:	f023 0302 	bic.w	r3, r3, #2
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	6812      	ldr	r2, [r2, #0]
 800a760:	69b9      	ldr	r1, [r7, #24]
 800a762:	430b      	orrs	r3, r1
 800a764:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d118      	bne.n	800a7a2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a77a:	f023 0304 	bic.w	r3, r3, #4
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a786:	4311      	orrs	r1, r2
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a78c:	4311      	orrs	r1, r2
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a792:	430a      	orrs	r2, r1
 800a794:	431a      	orrs	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f042 0201 	orr.w	r2, r2, #1
 800a79e:	611a      	str	r2, [r3, #16]
 800a7a0:	e007      	b.n	800a7b2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	691a      	ldr	r2, [r3, #16]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 0201 	bic.w	r2, r2, #1
 800a7b0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d10c      	bne.n	800a7d4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7c0:	f023 010f 	bic.w	r1, r3, #15
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	1e5a      	subs	r2, r3, #1
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800a7d2:	e007      	b.n	800a7e4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f022 020f 	bic.w	r2, r2, #15
 800a7e2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e8:	f023 0303 	bic.w	r3, r3, #3
 800a7ec:	f043 0201 	orr.w	r2, r3, #1
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	655a      	str	r2, [r3, #84]	@ 0x54
 800a7f4:	e007      	b.n	800a806 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7fa:	f043 0210 	orr.w	r2, r3, #16
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a806:	7ffb      	ldrb	r3, [r7, #31]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3720      	adds	r7, #32
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20000074 	.word	0x20000074
 800a814:	053e2d63 	.word	0x053e2d63
 800a818:	50040000 	.word	0x50040000
 800a81c:	50040300 	.word	0x50040300
 800a820:	fff0c007 	.word	0xfff0c007

0800a824 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e118      	b.n	800aa68 <HAL_ADC_DeInit+0x244>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a83a:	f043 0202 	orr.w	r2, r3, #2
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
#if  defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800a842:	2103      	movs	r1, #3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fe07 	bl	800b458 <ADC_ConversionStop>
 800a84a:	4603      	mov	r3, r0
 800a84c:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68da      	ldr	r2, [r3, #12]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800a85c:	60da      	str	r2, [r3, #12]
#endif

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10a      	bne.n	800a87a <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 ff2d 	bl	800b6c4 <ADC_Disable>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d102      	bne.n	800a87a <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Reset register IER */
#if defined(ADC_SUPPORT_2_5_MSPS)
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
                              ADC_IT_EOCAL | ADC_IT_CCRDY));
#else
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	685a      	ldr	r2, [r3, #4]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 800a888:	605a      	str	r2, [r3, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC | ADC_IT_JQOVF));
#endif /* ADC_SUPPORT_2_5_MSPS */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOS   | ADC_IT_EOC  | ADC_IT_OVR   |
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f022 021f 	bic.w	r2, r2, #31
 800a898:	605a      	str	r2, [r3, #4]
  /* Reset register ISR */
#if defined(ADC_SUPPORT_2_5_MSPS)
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
                              ADC_FLAG_EOCAL | ADC_FLAG_CCRDY));
#else
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800a8a2:	601a      	str	r2, [r3, #0]
                              ADC_FLAG_JEOS  | ADC_FLAG_JEOC | ADC_FLAG_JQOVF));
#endif /* ADC_SUPPORT_2_5_MSPS */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOS   | ADC_FLAG_EOC  | ADC_FLAG_OVR  |
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	221f      	movs	r2, #31
 800a8aa:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689a      	ldr	r2, [r3, #8]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 800a8ba:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689a      	ldr	r2, [r3, #8]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800a8ca:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68d9      	ldr	r1, [r3, #12]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	4b66      	ldr	r3, [pc, #408]	@ (800aa70 <HAL_ADC_DeInit+0x24c>)
 800a8d8:	400b      	ands	r3, r1
 800a8da:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68da      	ldr	r2, [r3, #12]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a8ea:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	6812      	ldr	r2, [r2, #0]
 800a8f6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a8fa:	f023 0307 	bic.w	r3, r3, #7
 800a8fe:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	695a      	ldr	r2, [r3, #20]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 800a90e:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 800a91e:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6a1a      	ldr	r2, [r3, #32]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800a92e:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 800a93e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 800a94e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	4b46      	ldr	r3, [pc, #280]	@ (800aa74 <HAL_ADC_DeInit+0x250>)
 800a95c:	400b      	ands	r3, r1
 800a95e:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	4b43      	ldr	r3, [pc, #268]	@ (800aa78 <HAL_ADC_DeInit+0x254>)
 800a96c:	400b      	ands	r3, r1
 800a96e:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	4b3f      	ldr	r3, [pc, #252]	@ (800aa78 <HAL_ADC_DeInit+0x254>)
 800a97c:	400b      	ands	r3, r1
 800a97e:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	6812      	ldr	r2, [r2, #0]
 800a98a:	f423 63fb 	bic.w	r3, r3, #2008	@ 0x7d8
 800a98e:	f023 0307 	bic.w	r3, r3, #7
 800a992:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	4b37      	ldr	r3, [pc, #220]	@ (800aa7c <HAL_ADC_DeInit+0x258>)
 800a9a0:	400b      	ands	r3, r1
 800a9a2:	6613      	str	r3, [r2, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	4b33      	ldr	r3, [pc, #204]	@ (800aa7c <HAL_ADC_DeInit+0x258>)
 800a9b0:	400b      	ands	r3, r1
 800a9b2:	6653      	str	r3, [r2, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	4b2f      	ldr	r3, [pc, #188]	@ (800aa7c <HAL_ADC_DeInit+0x258>)
 800a9c0:	400b      	ands	r3, r1
 800a9c2:	6693      	str	r3, [r2, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	4b2b      	ldr	r3, [pc, #172]	@ (800aa7c <HAL_ADC_DeInit+0x258>)
 800a9d0:	400b      	ands	r3, r1
 800a9d2:	66d3      	str	r3, [r2, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	6812      	ldr	r2, [r2, #0]
 800a9e0:	0cdb      	lsrs	r3, r3, #19
 800a9e2:	04db      	lsls	r3, r3, #19
 800a9e4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	6812      	ldr	r2, [r2, #0]
 800a9f4:	0cdb      	lsrs	r3, r3, #19
 800a9f6:	04db      	lsls	r3, r3, #19
 800a9f8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	6812      	ldr	r2, [r2, #0]
 800aa08:	0cdb      	lsrs	r3, r3, #19
 800aa0a:	04db      	lsls	r3, r3, #19
 800aa0c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f022 127f 	bic.w	r2, r2, #8323199	@ 0x7f007f
 800aa20:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800aa24:	4816      	ldr	r0, [pc, #88]	@ (800aa80 <HAL_ADC_DeInit+0x25c>)
 800aa26:	f7ff fd29 	bl	800a47c <LL_ADC_IsEnabled>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d107      	bne.n	800aa40 <HAL_ADC_DeInit+0x21c>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 800aa30:	4b14      	ldr	r3, [pc, #80]	@ (800aa84 <HAL_ADC_DeInit+0x260>)
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	4a13      	ldr	r2, [pc, #76]	@ (800aa84 <HAL_ADC_DeInit+0x260>)
 800aa36:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800aa3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa3e:	6093      	str	r3, [r2, #8]

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7f6 fbd1 	bl	80011e8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	659a      	str	r2, [r3, #88]	@ 0x58
#if  defined(ADC_SUPPORT_2_5_MSPS)
  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
#else
  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	80008004 	.word	0x80008004
 800aa74:	e0820830 	.word	0xe0820830
 800aa78:	e0820820 	.word	0xe0820820
 800aa7c:	03fff000 	.word	0x03fff000
 800aa80:	50040000 	.word	0x50040000
 800aa84:	50040300 	.word	0x50040300

0800aa88 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7ff fd3f 	bl	800a518 <LL_ADC_REG_IsConversionOngoing>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d140      	bne.n	800ab22 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d101      	bne.n	800aaae <HAL_ADC_Start+0x26>
 800aaaa:	2302      	movs	r3, #2
 800aaac:	e03c      	b.n	800ab28 <HAL_ADC_Start+0xa0>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fd8a 	bl	800b5d0 <ADC_Enable>
 800aabc:	4603      	mov	r3, r0
 800aabe:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d128      	bne.n	800ab18 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800aace:	f023 0301 	bic.w	r3, r3, #1
 800aad2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aade:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aae6:	d106      	bne.n	800aaf6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaec:	f023 0206 	bic.w	r2, r3, #6
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	659a      	str	r2, [r3, #88]	@ 0x58
 800aaf4:	e002      	b.n	800aafc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	221c      	movs	r2, #28
 800ab02:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7ff fcd9 	bl	800a4c8 <LL_ADC_REG_StartConversion>
 800ab16:	e006      	b.n	800ab26 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800ab20:	e001      	b.n	800ab26 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800ab22:	2302      	movs	r3, #2
 800ab24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d101      	bne.n	800ab46 <HAL_ADC_Stop+0x16>
 800ab42:	2302      	movs	r3, #2
 800ab44:	e023      	b.n	800ab8e <HAL_ADC_Stop+0x5e>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800ab4e:	2103      	movs	r1, #3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fc81 	bl	800b458 <ADC_ConversionStop>
 800ab56:	4603      	mov	r3, r0
 800ab58:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d111      	bne.n	800ab84 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fdaf 	bl	800b6c4 <ADC_Disable>
 800ab66:	4603      	mov	r3, r0
 800ab68:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d109      	bne.n	800ab84 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab74:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800ab78:	f023 0301 	bic.w	r3, r3, #1
 800ab7c:	f043 0201 	orr.w	r2, r3, #1
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	2b08      	cmp	r3, #8
 800aba6:	d102      	bne.n	800abae <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800aba8:	2308      	movs	r3, #8
 800abaa:	60fb      	str	r3, [r7, #12]
 800abac:	e010      	b.n	800abd0 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d007      	beq.n	800abcc <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abc0:	f043 0220 	orr.w	r2, r3, #32
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e06d      	b.n	800aca8 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800abcc:	2304      	movs	r3, #4
 800abce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800abd0:	f7ff fa6a 	bl	800a0a8 <HAL_GetTick>
 800abd4:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800abd6:	e021      	b.n	800ac1c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abde:	d01d      	beq.n	800ac1c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800abe0:	f7ff fa62 	bl	800a0a8 <HAL_GetTick>
 800abe4:	4602      	mov	r2, r0
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d302      	bcc.n	800abf6 <HAL_ADC_PollForConversion+0x60>
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d112      	bne.n	800ac1c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4013      	ands	r3, r2
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10b      	bne.n	800ac1c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac08:	f043 0204 	orr.w	r2, r3, #4
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e045      	b.n	800aca8 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	4013      	ands	r3, r2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d0d6      	beq.n	800abd8 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac2e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7ff fb19 	bl	800a272 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d01c      	beq.n	800ac80 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	7e5b      	ldrb	r3, [r3, #25]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d118      	bne.n	800ac80 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 0308 	and.w	r3, r3, #8
 800ac58:	2b08      	cmp	r3, #8
 800ac5a:	d111      	bne.n	800ac80 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d105      	bne.n	800ac80 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac78:	f043 0201 	orr.w	r2, r3, #1
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b08      	cmp	r3, #8
 800ac84:	d104      	bne.n	800ac90 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2208      	movs	r2, #8
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	e00a      	b.n	800aca6 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d103      	bne.n	800aca6 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	220c      	movs	r2, #12
 800aca4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
	...

0800accc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b0b6      	sub	sp, #216	@ 0xd8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d101      	bne.n	800acee <HAL_ADC_ConfigChannel+0x22>
 800acea:	2302      	movs	r3, #2
 800acec:	e39f      	b.n	800b42e <HAL_ADC_ConfigChannel+0x762>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2201      	movs	r2, #1
 800acf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff fc0c 	bl	800a518 <LL_ADC_REG_IsConversionOngoing>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f040 8384 	bne.w	800b410 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6818      	ldr	r0, [r3, #0]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	6859      	ldr	r1, [r3, #4]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	461a      	mov	r2, r3
 800ad16:	f7ff fabf 	bl	800a298 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff fbfa 	bl	800a518 <LL_ADC_REG_IsConversionOngoing>
 800ad24:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7ff fc1a 	bl	800a566 <LL_ADC_INJ_IsConversionOngoing>
 800ad32:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ad36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f040 81a6 	bne.w	800b08c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ad40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f040 81a1 	bne.w	800b08c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	6819      	ldr	r1, [r3, #0]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	461a      	mov	r2, r3
 800ad58:	f7ff faca 	bl	800a2f0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	695a      	ldr	r2, [r3, #20]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	08db      	lsrs	r3, r3, #3
 800ad68:	f003 0303 	and.w	r3, r3, #3
 800ad6c:	005b      	lsls	r3, r3, #1
 800ad6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	2b04      	cmp	r3, #4
 800ad7c:	d00a      	beq.n	800ad94 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	6919      	ldr	r1, [r3, #16]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ad8e:	f7ff fa1b 	bl	800a1c8 <LL_ADC_SetOffset>
 800ad92:	e17b      	b.n	800b08c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2100      	movs	r1, #0
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7ff fa38 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800ada0:	4603      	mov	r3, r0
 800ada2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10a      	bne.n	800adc0 <HAL_ADC_ConfigChannel+0xf4>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2100      	movs	r1, #0
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7ff fa2d 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800adb6:	4603      	mov	r3, r0
 800adb8:	0e9b      	lsrs	r3, r3, #26
 800adba:	f003 021f 	and.w	r2, r3, #31
 800adbe:	e01e      	b.n	800adfe <HAL_ADC_ConfigChannel+0x132>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2100      	movs	r1, #0
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7ff fa22 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800adcc:	4603      	mov	r3, r0
 800adce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800add2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800add6:	fa93 f3a3 	rbit	r3, r3
 800adda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800adde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ade2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ade6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800adea:	2b00      	cmp	r3, #0
 800adec:	d101      	bne.n	800adf2 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800adee:	2320      	movs	r3, #32
 800adf0:	e004      	b.n	800adfc <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800adf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800adf6:	fab3 f383 	clz	r3, r3
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	461a      	mov	r2, r3
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d105      	bne.n	800ae16 <HAL_ADC_ConfigChannel+0x14a>
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	0e9b      	lsrs	r3, r3, #26
 800ae10:	f003 031f 	and.w	r3, r3, #31
 800ae14:	e018      	b.n	800ae48 <HAL_ADC_ConfigChannel+0x17c>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ae22:	fa93 f3a3 	rbit	r3, r3
 800ae26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800ae2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800ae32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d101      	bne.n	800ae3e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800ae3a:	2320      	movs	r3, #32
 800ae3c:	e004      	b.n	800ae48 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800ae3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae42:	fab3 f383 	clz	r3, r3
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d106      	bne.n	800ae5a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2200      	movs	r2, #0
 800ae52:	2100      	movs	r1, #0
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7ff f9f1 	bl	800a23c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2101      	movs	r1, #1
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff f9d5 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800ae66:	4603      	mov	r3, r0
 800ae68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10a      	bne.n	800ae86 <HAL_ADC_ConfigChannel+0x1ba>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2101      	movs	r1, #1
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7ff f9ca 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	0e9b      	lsrs	r3, r3, #26
 800ae80:	f003 021f 	and.w	r2, r3, #31
 800ae84:	e01e      	b.n	800aec4 <HAL_ADC_ConfigChannel+0x1f8>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7ff f9bf 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800ae92:	4603      	mov	r3, r0
 800ae94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ae9c:	fa93 f3a3 	rbit	r3, r3
 800aea0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800aea4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aea8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800aeac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800aeb4:	2320      	movs	r3, #32
 800aeb6:	e004      	b.n	800aec2 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800aeb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aebc:	fab3 f383 	clz	r3, r3
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	461a      	mov	r2, r3
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d105      	bne.n	800aedc <HAL_ADC_ConfigChannel+0x210>
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	0e9b      	lsrs	r3, r3, #26
 800aed6:	f003 031f 	and.w	r3, r3, #31
 800aeda:	e018      	b.n	800af0e <HAL_ADC_ConfigChannel+0x242>
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aee8:	fa93 f3a3 	rbit	r3, r3
 800aeec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800aef0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aef4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800aef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d101      	bne.n	800af04 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800af00:	2320      	movs	r3, #32
 800af02:	e004      	b.n	800af0e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800af04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af08:	fab3 f383 	clz	r3, r3
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	429a      	cmp	r2, r3
 800af10:	d106      	bne.n	800af20 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	2101      	movs	r1, #1
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7ff f98e 	bl	800a23c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2102      	movs	r1, #2
 800af26:	4618      	mov	r0, r3
 800af28:	f7ff f972 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800af2c:	4603      	mov	r3, r0
 800af2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10a      	bne.n	800af4c <HAL_ADC_ConfigChannel+0x280>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2102      	movs	r1, #2
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7ff f967 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800af42:	4603      	mov	r3, r0
 800af44:	0e9b      	lsrs	r3, r3, #26
 800af46:	f003 021f 	and.w	r2, r3, #31
 800af4a:	e01e      	b.n	800af8a <HAL_ADC_ConfigChannel+0x2be>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2102      	movs	r1, #2
 800af52:	4618      	mov	r0, r3
 800af54:	f7ff f95c 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800af58:	4603      	mov	r3, r0
 800af5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af62:	fa93 f3a3 	rbit	r3, r3
 800af66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800af6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800af72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800af76:	2b00      	cmp	r3, #0
 800af78:	d101      	bne.n	800af7e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800af7a:	2320      	movs	r3, #32
 800af7c:	e004      	b.n	800af88 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800af7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800af82:	fab3 f383 	clz	r3, r3
 800af86:	b2db      	uxtb	r3, r3
 800af88:	461a      	mov	r2, r3
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af92:	2b00      	cmp	r3, #0
 800af94:	d105      	bne.n	800afa2 <HAL_ADC_ConfigChannel+0x2d6>
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	0e9b      	lsrs	r3, r3, #26
 800af9c:	f003 031f 	and.w	r3, r3, #31
 800afa0:	e016      	b.n	800afd0 <HAL_ADC_ConfigChannel+0x304>
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800afae:	fa93 f3a3 	rbit	r3, r3
 800afb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800afb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800afb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800afba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800afc2:	2320      	movs	r3, #32
 800afc4:	e004      	b.n	800afd0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800afc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afca:	fab3 f383 	clz	r3, r3
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d106      	bne.n	800afe2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2200      	movs	r2, #0
 800afda:	2102      	movs	r1, #2
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff f92d 	bl	800a23c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2103      	movs	r1, #3
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff f911 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800afee:	4603      	mov	r3, r0
 800aff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10a      	bne.n	800b00e <HAL_ADC_ConfigChannel+0x342>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2103      	movs	r1, #3
 800affe:	4618      	mov	r0, r3
 800b000:	f7ff f906 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800b004:	4603      	mov	r3, r0
 800b006:	0e9b      	lsrs	r3, r3, #26
 800b008:	f003 021f 	and.w	r2, r3, #31
 800b00c:	e017      	b.n	800b03e <HAL_ADC_ConfigChannel+0x372>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2103      	movs	r1, #3
 800b014:	4618      	mov	r0, r3
 800b016:	f7ff f8fb 	bl	800a210 <LL_ADC_GetOffsetChannel>
 800b01a:	4603      	mov	r3, r0
 800b01c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b01e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b020:	fa93 f3a3 	rbit	r3, r3
 800b024:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800b026:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b028:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800b02a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800b030:	2320      	movs	r3, #32
 800b032:	e003      	b.n	800b03c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800b034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b036:	fab3 f383 	clz	r3, r3
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	461a      	mov	r2, r3
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b046:	2b00      	cmp	r3, #0
 800b048:	d105      	bne.n	800b056 <HAL_ADC_ConfigChannel+0x38a>
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	0e9b      	lsrs	r3, r3, #26
 800b050:	f003 031f 	and.w	r3, r3, #31
 800b054:	e011      	b.n	800b07a <HAL_ADC_ConfigChannel+0x3ae>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b05c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b05e:	fa93 f3a3 	rbit	r3, r3
 800b062:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800b064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b066:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800b068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800b06e:	2320      	movs	r3, #32
 800b070:	e003      	b.n	800b07a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800b072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b074:	fab3 f383 	clz	r3, r3
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d106      	bne.n	800b08c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2200      	movs	r2, #0
 800b084:	2103      	movs	r1, #3
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff f8d8 	bl	800a23c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff f9f3 	bl	800a47c <LL_ADC_IsEnabled>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f040 81c2 	bne.w	800b422 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6818      	ldr	r0, [r3, #0]
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	6819      	ldr	r1, [r3, #0]
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	f7ff f94c 	bl	800a348 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	4a8e      	ldr	r2, [pc, #568]	@ (800b2f0 <HAL_ADC_ConfigChannel+0x624>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	f040 8130 	bne.w	800b31c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10b      	bne.n	800b0e4 <HAL_ADC_ConfigChannel+0x418>
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	0e9b      	lsrs	r3, r3, #26
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	f003 031f 	and.w	r3, r3, #31
 800b0d8:	2b09      	cmp	r3, #9
 800b0da:	bf94      	ite	ls
 800b0dc:	2301      	movls	r3, #1
 800b0de:	2300      	movhi	r3, #0
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	e019      	b.n	800b118 <HAL_ADC_ConfigChannel+0x44c>
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0ec:	fa93 f3a3 	rbit	r3, r3
 800b0f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800b0f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0f4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800b0f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800b0fc:	2320      	movs	r3, #32
 800b0fe:	e003      	b.n	800b108 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800b100:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b102:	fab3 f383 	clz	r3, r3
 800b106:	b2db      	uxtb	r3, r3
 800b108:	3301      	adds	r3, #1
 800b10a:	f003 031f 	and.w	r3, r3, #31
 800b10e:	2b09      	cmp	r3, #9
 800b110:	bf94      	ite	ls
 800b112:	2301      	movls	r3, #1
 800b114:	2300      	movhi	r3, #0
 800b116:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d079      	beq.n	800b210 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b124:	2b00      	cmp	r3, #0
 800b126:	d107      	bne.n	800b138 <HAL_ADC_ConfigChannel+0x46c>
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	0e9b      	lsrs	r3, r3, #26
 800b12e:	3301      	adds	r3, #1
 800b130:	069b      	lsls	r3, r3, #26
 800b132:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b136:	e015      	b.n	800b164 <HAL_ADC_ConfigChannel+0x498>
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b13e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b140:	fa93 f3a3 	rbit	r3, r3
 800b144:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800b146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b148:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800b14a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800b150:	2320      	movs	r3, #32
 800b152:	e003      	b.n	800b15c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800b154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b156:	fab3 f383 	clz	r3, r3
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	3301      	adds	r3, #1
 800b15e:	069b      	lsls	r3, r3, #26
 800b160:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d109      	bne.n	800b184 <HAL_ADC_ConfigChannel+0x4b8>
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	0e9b      	lsrs	r3, r3, #26
 800b176:	3301      	adds	r3, #1
 800b178:	f003 031f 	and.w	r3, r3, #31
 800b17c:	2101      	movs	r1, #1
 800b17e:	fa01 f303 	lsl.w	r3, r1, r3
 800b182:	e017      	b.n	800b1b4 <HAL_ADC_ConfigChannel+0x4e8>
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b18a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b18c:	fa93 f3a3 	rbit	r3, r3
 800b190:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800b192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b194:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800b196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800b19c:	2320      	movs	r3, #32
 800b19e:	e003      	b.n	800b1a8 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800b1a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1a2:	fab3 f383 	clz	r3, r3
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	f003 031f 	and.w	r3, r3, #31
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b4:	ea42 0103 	orr.w	r1, r2, r3
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <HAL_ADC_ConfigChannel+0x50e>
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	0e9b      	lsrs	r3, r3, #26
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	f003 021f 	and.w	r2, r3, #31
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	005b      	lsls	r3, r3, #1
 800b1d4:	4413      	add	r3, r2
 800b1d6:	051b      	lsls	r3, r3, #20
 800b1d8:	e018      	b.n	800b20c <HAL_ADC_ConfigChannel+0x540>
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e2:	fa93 f3a3 	rbit	r3, r3
 800b1e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800b1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800b1f2:	2320      	movs	r3, #32
 800b1f4:	e003      	b.n	800b1fe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800b1f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1f8:	fab3 f383 	clz	r3, r3
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	3301      	adds	r3, #1
 800b200:	f003 021f 	and.w	r2, r3, #31
 800b204:	4613      	mov	r3, r2
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	4413      	add	r3, r2
 800b20a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b20c:	430b      	orrs	r3, r1
 800b20e:	e080      	b.n	800b312 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d107      	bne.n	800b22c <HAL_ADC_ConfigChannel+0x560>
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	0e9b      	lsrs	r3, r3, #26
 800b222:	3301      	adds	r3, #1
 800b224:	069b      	lsls	r3, r3, #26
 800b226:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b22a:	e015      	b.n	800b258 <HAL_ADC_ConfigChannel+0x58c>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b234:	fa93 f3a3 	rbit	r3, r3
 800b238:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800b23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800b23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b240:	2b00      	cmp	r3, #0
 800b242:	d101      	bne.n	800b248 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800b244:	2320      	movs	r3, #32
 800b246:	e003      	b.n	800b250 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800b248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24a:	fab3 f383 	clz	r3, r3
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	3301      	adds	r3, #1
 800b252:	069b      	lsls	r3, r3, #26
 800b254:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b260:	2b00      	cmp	r3, #0
 800b262:	d109      	bne.n	800b278 <HAL_ADC_ConfigChannel+0x5ac>
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	0e9b      	lsrs	r3, r3, #26
 800b26a:	3301      	adds	r3, #1
 800b26c:	f003 031f 	and.w	r3, r3, #31
 800b270:	2101      	movs	r1, #1
 800b272:	fa01 f303 	lsl.w	r3, r1, r3
 800b276:	e017      	b.n	800b2a8 <HAL_ADC_ConfigChannel+0x5dc>
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	fa93 f3a3 	rbit	r3, r3
 800b284:	61fb      	str	r3, [r7, #28]
  return result;
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800b290:	2320      	movs	r3, #32
 800b292:	e003      	b.n	800b29c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800b294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b296:	fab3 f383 	clz	r3, r3
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	3301      	adds	r3, #1
 800b29e:	f003 031f 	and.w	r3, r3, #31
 800b2a2:	2101      	movs	r1, #1
 800b2a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b2a8:	ea42 0103 	orr.w	r1, r2, r3
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10d      	bne.n	800b2d4 <HAL_ADC_ConfigChannel+0x608>
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	0e9b      	lsrs	r3, r3, #26
 800b2be:	3301      	adds	r3, #1
 800b2c0:	f003 021f 	and.w	r2, r3, #31
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	4413      	add	r3, r2
 800b2ca:	3b1e      	subs	r3, #30
 800b2cc:	051b      	lsls	r3, r3, #20
 800b2ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b2d2:	e01d      	b.n	800b310 <HAL_ADC_ConfigChannel+0x644>
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	fa93 f3a3 	rbit	r3, r3
 800b2e0:	613b      	str	r3, [r7, #16]
  return result;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d103      	bne.n	800b2f4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800b2ec:	2320      	movs	r3, #32
 800b2ee:	e005      	b.n	800b2fc <HAL_ADC_ConfigChannel+0x630>
 800b2f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	fab3 f383 	clz	r3, r3
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	f003 021f 	and.w	r2, r3, #31
 800b302:	4613      	mov	r3, r2
 800b304:	005b      	lsls	r3, r3, #1
 800b306:	4413      	add	r3, r2
 800b308:	3b1e      	subs	r3, #30
 800b30a:	051b      	lsls	r3, r3, #20
 800b30c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b310:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b316:	4619      	mov	r1, r3
 800b318:	f7fe ffea 	bl	800a2f0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	4b45      	ldr	r3, [pc, #276]	@ (800b438 <HAL_ADC_ConfigChannel+0x76c>)
 800b322:	4013      	ands	r3, r2
 800b324:	2b00      	cmp	r3, #0
 800b326:	d07c      	beq.n	800b422 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b328:	4844      	ldr	r0, [pc, #272]	@ (800b43c <HAL_ADC_ConfigChannel+0x770>)
 800b32a:	f7fe ff3f 	bl	800a1ac <LL_ADC_GetCommonPathInternalCh>
 800b32e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b332:	4843      	ldr	r0, [pc, #268]	@ (800b440 <HAL_ADC_ConfigChannel+0x774>)
 800b334:	f7ff f8a2 	bl	800a47c <LL_ADC_IsEnabled>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d15e      	bne.n	800b3fc <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a40      	ldr	r2, [pc, #256]	@ (800b444 <HAL_ADC_ConfigChannel+0x778>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d127      	bne.n	800b398 <HAL_ADC_ConfigChannel+0x6cc>
 800b348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b34c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d121      	bne.n	800b398 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a39      	ldr	r2, [pc, #228]	@ (800b440 <HAL_ADC_ConfigChannel+0x774>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d161      	bne.n	800b422 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800b35e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b362:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b366:	4619      	mov	r1, r3
 800b368:	4834      	ldr	r0, [pc, #208]	@ (800b43c <HAL_ADC_ConfigChannel+0x770>)
 800b36a:	f7fe ff0c 	bl	800a186 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b36e:	4b36      	ldr	r3, [pc, #216]	@ (800b448 <HAL_ADC_ConfigChannel+0x77c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	099b      	lsrs	r3, r3, #6
 800b374:	4a35      	ldr	r2, [pc, #212]	@ (800b44c <HAL_ADC_ConfigChannel+0x780>)
 800b376:	fba2 2303 	umull	r2, r3, r2, r3
 800b37a:	099b      	lsrs	r3, r3, #6
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	4613      	mov	r3, r2
 800b380:	005b      	lsls	r3, r3, #1
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800b388:	e002      	b.n	800b390 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	3b01      	subs	r3, #1
 800b38e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1f9      	bne.n	800b38a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b396:	e044      	b.n	800b422 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a2c      	ldr	r2, [pc, #176]	@ (800b450 <HAL_ADC_ConfigChannel+0x784>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d113      	bne.n	800b3ca <HAL_ADC_ConfigChannel+0x6fe>
 800b3a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b3a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d10d      	bne.n	800b3ca <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a23      	ldr	r2, [pc, #140]	@ (800b440 <HAL_ADC_ConfigChannel+0x774>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d134      	bne.n	800b422 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800b3b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b3bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	481e      	ldr	r0, [pc, #120]	@ (800b43c <HAL_ADC_ConfigChannel+0x770>)
 800b3c4:	f7fe fedf 	bl	800a186 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b3c8:	e02b      	b.n	800b422 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a21      	ldr	r2, [pc, #132]	@ (800b454 <HAL_ADC_ConfigChannel+0x788>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d126      	bne.n	800b422 <HAL_ADC_ConfigChannel+0x756>
 800b3d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b3d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d120      	bne.n	800b422 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a16      	ldr	r2, [pc, #88]	@ (800b440 <HAL_ADC_ConfigChannel+0x774>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d11b      	bne.n	800b422 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800b3ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b3ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	4811      	ldr	r0, [pc, #68]	@ (800b43c <HAL_ADC_ConfigChannel+0x770>)
 800b3f6:	f7fe fec6 	bl	800a186 <LL_ADC_SetCommonPathInternalCh>
 800b3fa:	e012      	b.n	800b422 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b400:	f043 0220 	orr.w	r2, r3, #32
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800b40e:	e008      	b.n	800b422 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b414:	f043 0220 	orr.w	r2, r3, #32
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800b42a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800b42e:	4618      	mov	r0, r3
 800b430:	37d8      	adds	r7, #216	@ 0xd8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	80080000 	.word	0x80080000
 800b43c:	50040300 	.word	0x50040300
 800b440:	50040000 	.word	0x50040000
 800b444:	c7520000 	.word	0xc7520000
 800b448:	20000074 	.word	0x20000074
 800b44c:	053e2d63 	.word	0x053e2d63
 800b450:	cb840000 	.word	0xcb840000
 800b454:	80000001 	.word	0x80000001

0800b458 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800b462:	2300      	movs	r3, #0
 800b464:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4618      	mov	r0, r3
 800b470:	f7ff f852 	bl	800a518 <LL_ADC_REG_IsConversionOngoing>
 800b474:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7ff f873 	bl	800a566 <LL_ADC_INJ_IsConversionOngoing>
 800b480:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d103      	bne.n	800b490 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f000 8098 	beq.w	800b5c0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d02a      	beq.n	800b4f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	7e5b      	ldrb	r3, [r3, #25]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d126      	bne.n	800b4f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	7e1b      	ldrb	r3, [r3, #24]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d122      	bne.n	800b4f4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b4b2:	e014      	b.n	800b4de <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	4a45      	ldr	r2, [pc, #276]	@ (800b5cc <ADC_ConversionStop+0x174>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d90d      	bls.n	800b4d8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4c0:	f043 0210 	orr.w	r2, r3, #16
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4cc:	f043 0201 	orr.w	r2, r3, #1
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e074      	b.n	800b5c2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4e8:	2b40      	cmp	r3, #64	@ 0x40
 800b4ea:	d1e3      	bne.n	800b4b4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2240      	movs	r2, #64	@ 0x40
 800b4f2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d014      	beq.n	800b524 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7ff f80a 	bl	800a518 <LL_ADC_REG_IsConversionOngoing>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00c      	beq.n	800b524 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fe ffc7 	bl	800a4a2 <LL_ADC_IsDisableOngoing>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d104      	bne.n	800b524 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fe ffe6 	bl	800a4f0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d014      	beq.n	800b554 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4618      	mov	r0, r3
 800b530:	f7ff f819 	bl	800a566 <LL_ADC_INJ_IsConversionOngoing>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00c      	beq.n	800b554 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fe ffaf 	bl	800a4a2 <LL_ADC_IsDisableOngoing>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d104      	bne.n	800b554 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe fff5 	bl	800a53e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	2b02      	cmp	r3, #2
 800b558:	d005      	beq.n	800b566 <ADC_ConversionStop+0x10e>
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	d105      	bne.n	800b56c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800b560:	230c      	movs	r3, #12
 800b562:	617b      	str	r3, [r7, #20]
        break;
 800b564:	e005      	b.n	800b572 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800b566:	2308      	movs	r3, #8
 800b568:	617b      	str	r3, [r7, #20]
        break;
 800b56a:	e002      	b.n	800b572 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800b56c:	2304      	movs	r3, #4
 800b56e:	617b      	str	r3, [r7, #20]
        break;
 800b570:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800b572:	f7fe fd99 	bl	800a0a8 <HAL_GetTick>
 800b576:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b578:	e01b      	b.n	800b5b2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800b57a:	f7fe fd95 	bl	800a0a8 <HAL_GetTick>
 800b57e:	4602      	mov	r2, r0
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	1ad3      	subs	r3, r2, r3
 800b584:	2b05      	cmp	r3, #5
 800b586:	d914      	bls.n	800b5b2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	689a      	ldr	r2, [r3, #8]
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	4013      	ands	r3, r2
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00d      	beq.n	800b5b2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b59a:	f043 0210 	orr.w	r2, r3, #16
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5a6:	f043 0201 	orr.w	r2, r3, #1
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e007      	b.n	800b5c2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	689a      	ldr	r2, [r3, #8]
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1dc      	bne.n	800b57a <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3720      	adds	r7, #32
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	a33fffff 	.word	0xa33fffff

0800b5d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fe ff4b 	bl	800a47c <LL_ADC_IsEnabled>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d15e      	bne.n	800b6aa <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	689a      	ldr	r2, [r3, #8]
 800b5f2:	4b30      	ldr	r3, [pc, #192]	@ (800b6b4 <ADC_Enable+0xe4>)
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00d      	beq.n	800b616 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5fe:	f043 0210 	orr.w	r2, r3, #16
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b60a:	f043 0201 	orr.w	r2, r3, #1
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e04a      	b.n	800b6ac <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe ff06 	bl	800a42c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b620:	4825      	ldr	r0, [pc, #148]	@ (800b6b8 <ADC_Enable+0xe8>)
 800b622:	f7fe fdc3 	bl	800a1ac <LL_ADC_GetCommonPathInternalCh>
 800b626:	4603      	mov	r3, r0
 800b628:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00f      	beq.n	800b650 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b630:	4b22      	ldr	r3, [pc, #136]	@ (800b6bc <ADC_Enable+0xec>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	099b      	lsrs	r3, r3, #6
 800b636:	4a22      	ldr	r2, [pc, #136]	@ (800b6c0 <ADC_Enable+0xf0>)
 800b638:	fba2 2303 	umull	r2, r3, r2, r3
 800b63c:	099b      	lsrs	r3, r3, #6
 800b63e:	3301      	adds	r3, #1
 800b640:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800b642:	e002      	b.n	800b64a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	3b01      	subs	r3, #1
 800b648:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1f9      	bne.n	800b644 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800b650:	f7fe fd2a 	bl	800a0a8 <HAL_GetTick>
 800b654:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b656:	e021      	b.n	800b69c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe ff0d 	bl	800a47c <LL_ADC_IsEnabled>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d104      	bne.n	800b672 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fe fedd 	bl	800a42c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b672:	f7fe fd19 	bl	800a0a8 <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d90d      	bls.n	800b69c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b684:	f043 0210 	orr.w	r2, r3, #16
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b690:	f043 0201 	orr.w	r2, r3, #1
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	e007      	b.n	800b6ac <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d1d6      	bne.n	800b658 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	8000003f 	.word	0x8000003f
 800b6b8:	50040300 	.word	0x50040300
 800b6bc:	20000074 	.word	0x20000074
 800b6c0:	053e2d63 	.word	0x053e2d63

0800b6c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7fe fee6 	bl	800a4a2 <LL_ADC_IsDisableOngoing>
 800b6d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fe fecd 	bl	800a47c <LL_ADC_IsEnabled>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d047      	beq.n	800b778 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d144      	bne.n	800b778 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	f003 030d 	and.w	r3, r3, #13
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d10c      	bne.n	800b716 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4618      	mov	r0, r3
 800b702:	f7fe fea7 	bl	800a454 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2203      	movs	r2, #3
 800b70c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b70e:	f7fe fccb 	bl	800a0a8 <HAL_GetTick>
 800b712:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b714:	e029      	b.n	800b76a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b71a:	f043 0210 	orr.w	r2, r3, #16
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b726:	f043 0201 	orr.w	r2, r3, #1
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	e023      	b.n	800b77a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b732:	f7fe fcb9 	bl	800a0a8 <HAL_GetTick>
 800b736:	4602      	mov	r2, r0
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d914      	bls.n	800b76a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f003 0301 	and.w	r3, r3, #1
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00d      	beq.n	800b76a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b752:	f043 0210 	orr.w	r2, r3, #16
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b75e:	f043 0201 	orr.w	r2, r3, #1
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e007      	b.n	800b77a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	f003 0301 	and.w	r3, r3, #1
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1dc      	bne.n	800b732 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
	...

0800b784 <__NVIC_SetPriorityGrouping>:
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f003 0307 	and.w	r3, r3, #7
 800b792:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b794:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c8 <__NVIC_SetPriorityGrouping+0x44>)
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b7ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b7b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b7b6:	4a04      	ldr	r2, [pc, #16]	@ (800b7c8 <__NVIC_SetPriorityGrouping+0x44>)
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	60d3      	str	r3, [r2, #12]
}
 800b7bc:	bf00      	nop
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	e000ed00 	.word	0xe000ed00

0800b7cc <__NVIC_GetPriorityGrouping>:
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b7d0:	4b04      	ldr	r3, [pc, #16]	@ (800b7e4 <__NVIC_GetPriorityGrouping+0x18>)
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	0a1b      	lsrs	r3, r3, #8
 800b7d6:	f003 0307 	and.w	r3, r3, #7
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	e000ed00 	.word	0xe000ed00

0800b7e8 <__NVIC_EnableIRQ>:
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	db0b      	blt.n	800b812 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b7fa:	79fb      	ldrb	r3, [r7, #7]
 800b7fc:	f003 021f 	and.w	r2, r3, #31
 800b800:	4907      	ldr	r1, [pc, #28]	@ (800b820 <__NVIC_EnableIRQ+0x38>)
 800b802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b806:	095b      	lsrs	r3, r3, #5
 800b808:	2001      	movs	r0, #1
 800b80a:	fa00 f202 	lsl.w	r2, r0, r2
 800b80e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b812:	bf00      	nop
 800b814:	370c      	adds	r7, #12
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	e000e100 	.word	0xe000e100

0800b824 <__NVIC_DisableIRQ>:
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	4603      	mov	r3, r0
 800b82c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b82e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b832:	2b00      	cmp	r3, #0
 800b834:	db12      	blt.n	800b85c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	f003 021f 	and.w	r2, r3, #31
 800b83c:	490a      	ldr	r1, [pc, #40]	@ (800b868 <__NVIC_DisableIRQ+0x44>)
 800b83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b842:	095b      	lsrs	r3, r3, #5
 800b844:	2001      	movs	r0, #1
 800b846:	fa00 f202 	lsl.w	r2, r0, r2
 800b84a:	3320      	adds	r3, #32
 800b84c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b850:	f3bf 8f4f 	dsb	sy
}
 800b854:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b856:	f3bf 8f6f 	isb	sy
}
 800b85a:	bf00      	nop
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	e000e100 	.word	0xe000e100

0800b86c <__NVIC_SetPriority>:
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	6039      	str	r1, [r7, #0]
 800b876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	db0a      	blt.n	800b896 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	b2da      	uxtb	r2, r3
 800b884:	490c      	ldr	r1, [pc, #48]	@ (800b8b8 <__NVIC_SetPriority+0x4c>)
 800b886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b88a:	0112      	lsls	r2, r2, #4
 800b88c:	b2d2      	uxtb	r2, r2
 800b88e:	440b      	add	r3, r1
 800b890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b894:	e00a      	b.n	800b8ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	4908      	ldr	r1, [pc, #32]	@ (800b8bc <__NVIC_SetPriority+0x50>)
 800b89c:	79fb      	ldrb	r3, [r7, #7]
 800b89e:	f003 030f 	and.w	r3, r3, #15
 800b8a2:	3b04      	subs	r3, #4
 800b8a4:	0112      	lsls	r2, r2, #4
 800b8a6:	b2d2      	uxtb	r2, r2
 800b8a8:	440b      	add	r3, r1
 800b8aa:	761a      	strb	r2, [r3, #24]
}
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	e000e100 	.word	0xe000e100
 800b8bc:	e000ed00 	.word	0xe000ed00

0800b8c0 <NVIC_EncodePriority>:
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b089      	sub	sp, #36	@ 0x24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f003 0307 	and.w	r3, r3, #7
 800b8d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	f1c3 0307 	rsb	r3, r3, #7
 800b8da:	2b04      	cmp	r3, #4
 800b8dc:	bf28      	it	cs
 800b8de:	2304      	movcs	r3, #4
 800b8e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	2b06      	cmp	r3, #6
 800b8e8:	d902      	bls.n	800b8f0 <NVIC_EncodePriority+0x30>
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	3b03      	subs	r3, #3
 800b8ee:	e000      	b.n	800b8f2 <NVIC_EncodePriority+0x32>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b8fe:	43da      	mvns	r2, r3
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	401a      	ands	r2, r3
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b908:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	fa01 f303 	lsl.w	r3, r1, r3
 800b912:	43d9      	mvns	r1, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b918:	4313      	orrs	r3, r2
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3724      	adds	r7, #36	@ 0x24
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
	...

0800b928 <SysTick_Config>:
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	3b01      	subs	r3, #1
 800b934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b938:	d301      	bcc.n	800b93e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800b93a:	2301      	movs	r3, #1
 800b93c:	e00f      	b.n	800b95e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b93e:	4a0a      	ldr	r2, [pc, #40]	@ (800b968 <SysTick_Config+0x40>)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	3b01      	subs	r3, #1
 800b944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b946:	210f      	movs	r1, #15
 800b948:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b94c:	f7ff ff8e 	bl	800b86c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b950:	4b05      	ldr	r3, [pc, #20]	@ (800b968 <SysTick_Config+0x40>)
 800b952:	2200      	movs	r2, #0
 800b954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b956:	4b04      	ldr	r3, [pc, #16]	@ (800b968 <SysTick_Config+0x40>)
 800b958:	2207      	movs	r2, #7
 800b95a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	e000e010 	.word	0xe000e010

0800b96c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff ff05 	bl	800b784 <__NVIC_SetPriorityGrouping>
}
 800b97a:	bf00      	nop
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b086      	sub	sp, #24
 800b986:	af00      	add	r7, sp, #0
 800b988:	4603      	mov	r3, r0
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	607a      	str	r2, [r7, #4]
 800b98e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b990:	f7ff ff1c 	bl	800b7cc <__NVIC_GetPriorityGrouping>
 800b994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	68b9      	ldr	r1, [r7, #8]
 800b99a:	6978      	ldr	r0, [r7, #20]
 800b99c:	f7ff ff90 	bl	800b8c0 <NVIC_EncodePriority>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7ff ff5f 	bl	800b86c <__NVIC_SetPriority>
}
 800b9ae:	bf00      	nop
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	4603      	mov	r3, r0
 800b9be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b9c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7ff ff0f 	bl	800b7e8 <__NVIC_EnableIRQ>
}
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b082      	sub	sp, #8
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	4603      	mov	r3, r0
 800b9da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b9dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7ff ff1f 	bl	800b824 <__NVIC_DisableIRQ>
}
 800b9e6:	bf00      	nop
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b082      	sub	sp, #8
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff ff96 	bl	800b928 <SysTick_Config>
 800b9fc:	4603      	mov	r3, r0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
	...

0800ba08 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d101      	bne.n	800ba1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e08e      	b.n	800bb38 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	4b47      	ldr	r3, [pc, #284]	@ (800bb40 <HAL_DMA_Init+0x138>)
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d80f      	bhi.n	800ba46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	4b45      	ldr	r3, [pc, #276]	@ (800bb44 <HAL_DMA_Init+0x13c>)
 800ba2e:	4413      	add	r3, r2
 800ba30:	4a45      	ldr	r2, [pc, #276]	@ (800bb48 <HAL_DMA_Init+0x140>)
 800ba32:	fba2 2303 	umull	r2, r3, r2, r3
 800ba36:	091b      	lsrs	r3, r3, #4
 800ba38:	009a      	lsls	r2, r3, #2
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a42      	ldr	r2, [pc, #264]	@ (800bb4c <HAL_DMA_Init+0x144>)
 800ba42:	641a      	str	r2, [r3, #64]	@ 0x40
 800ba44:	e00e      	b.n	800ba64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	4b40      	ldr	r3, [pc, #256]	@ (800bb50 <HAL_DMA_Init+0x148>)
 800ba4e:	4413      	add	r3, r2
 800ba50:	4a3d      	ldr	r2, [pc, #244]	@ (800bb48 <HAL_DMA_Init+0x140>)
 800ba52:	fba2 2303 	umull	r2, r3, r2, r3
 800ba56:	091b      	lsrs	r3, r3, #4
 800ba58:	009a      	lsls	r2, r3, #2
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a3c      	ldr	r2, [pc, #240]	@ (800bb54 <HAL_DMA_Init+0x14c>)
 800ba62:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2202      	movs	r2, #2
 800ba68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800ba7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ba88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	699b      	ldr	r3, [r3, #24]
 800ba9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800baa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a1b      	ldr	r3, [r3, #32]
 800baa6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	4313      	orrs	r3, r2
 800baac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f9bc 	bl	800be34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bac4:	d102      	bne.n	800bacc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bad4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bad8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bae2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d010      	beq.n	800bb0e <HAL_DMA_Init+0x106>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	d80c      	bhi.n	800bb0e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 f9db 	bl	800beb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bafe:	2200      	movs	r2, #0
 800bb00:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bb0a:	605a      	str	r2, [r3, #4]
 800bb0c:	e008      	b.n	800bb20 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3710      	adds	r7, #16
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	40020407 	.word	0x40020407
 800bb44:	bffdfff8 	.word	0xbffdfff8
 800bb48:	cccccccd 	.word	0xcccccccd
 800bb4c:	40020000 	.word	0x40020000
 800bb50:	bffdfbf8 	.word	0xbffdfbf8
 800bb54:	40020400 	.word	0x40020400

0800bb58 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e04f      	b.n	800bc0a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d008      	beq.n	800bb88 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2204      	movs	r2, #4
 800bb7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e040      	b.n	800bc0a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f022 020e 	bic.w	r2, r2, #14
 800bb96:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bba2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bba6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f022 0201 	bic.w	r2, r2, #1
 800bbb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbbc:	f003 021c 	and.w	r2, r3, #28
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	fa01 f202 	lsl.w	r2, r1, r2
 800bbca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bbd4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00c      	beq.n	800bbf8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbe8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bbec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bbf6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b084      	sub	sp, #16
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d005      	beq.n	800bc3a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2204      	movs	r2, #4
 800bc32:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	73fb      	strb	r3, [r7, #15]
 800bc38:	e047      	b.n	800bcca <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f022 020e 	bic.w	r2, r2, #14
 800bc48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f022 0201 	bic.w	r2, r2, #1
 800bc58:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bc68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc6e:	f003 021c 	and.w	r2, r3, #28
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc76:	2101      	movs	r1, #1
 800bc78:	fa01 f202 	lsl.w	r2, r1, r2
 800bc7c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bc86:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00c      	beq.n	800bcaa <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bc9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bca8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	4798      	blx	r3
    }
  }
  return status;
 800bcca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcf0:	f003 031c 	and.w	r3, r3, #28
 800bcf4:	2204      	movs	r2, #4
 800bcf6:	409a      	lsls	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d026      	beq.n	800bd4e <HAL_DMA_IRQHandler+0x7a>
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	f003 0304 	and.w	r3, r3, #4
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d021      	beq.n	800bd4e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 0320 	and.w	r3, r3, #32
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d107      	bne.n	800bd28 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f022 0204 	bic.w	r2, r2, #4
 800bd26:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd2c:	f003 021c 	and.w	r2, r3, #28
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd34:	2104      	movs	r1, #4
 800bd36:	fa01 f202 	lsl.w	r2, r1, r2
 800bd3a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d071      	beq.n	800be28 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bd4c:	e06c      	b.n	800be28 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd52:	f003 031c 	and.w	r3, r3, #28
 800bd56:	2202      	movs	r2, #2
 800bd58:	409a      	lsls	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d02e      	beq.n	800bdc0 <HAL_DMA_IRQHandler+0xec>
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	f003 0302 	and.w	r3, r3, #2
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d029      	beq.n	800bdc0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 0320 	and.w	r3, r3, #32
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10b      	bne.n	800bd92 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f022 020a 	bic.w	r2, r2, #10
 800bd88:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd96:	f003 021c 	and.w	r2, r3, #28
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd9e:	2102      	movs	r1, #2
 800bda0:	fa01 f202 	lsl.w	r2, r1, r2
 800bda4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d038      	beq.n	800be28 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bdbe:	e033      	b.n	800be28 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdc4:	f003 031c 	and.w	r3, r3, #28
 800bdc8:	2208      	movs	r2, #8
 800bdca:	409a      	lsls	r2, r3
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4013      	ands	r3, r2
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d02a      	beq.n	800be2a <HAL_DMA_IRQHandler+0x156>
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	f003 0308 	and.w	r3, r3, #8
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d025      	beq.n	800be2a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f022 020e 	bic.w	r2, r2, #14
 800bdec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdf2:	f003 021c 	and.w	r2, r3, #28
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	fa01 f202 	lsl.w	r2, r1, r2
 800be00:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d004      	beq.n	800be2a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800be28:	bf00      	nop
 800be2a:	bf00      	nop
}
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
	...

0800be34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	461a      	mov	r2, r3
 800be42:	4b17      	ldr	r3, [pc, #92]	@ (800bea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800be44:	429a      	cmp	r2, r3
 800be46:	d80a      	bhi.n	800be5e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be4c:	089b      	lsrs	r3, r3, #2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be54:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	6493      	str	r3, [r2, #72]	@ 0x48
 800be5c:	e007      	b.n	800be6e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be62:	089b      	lsrs	r3, r3, #2
 800be64:	009a      	lsls	r2, r3, #2
 800be66:	4b0f      	ldr	r3, [pc, #60]	@ (800bea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800be68:	4413      	add	r3, r2
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	3b08      	subs	r3, #8
 800be76:	4a0c      	ldr	r2, [pc, #48]	@ (800bea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800be78:	fba2 2303 	umull	r2, r3, r2, r3
 800be7c:	091b      	lsrs	r3, r3, #4
 800be7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a0a      	ldr	r2, [pc, #40]	@ (800beac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800be84:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f003 031f 	and.w	r3, r3, #31
 800be8c:	2201      	movs	r2, #1
 800be8e:	409a      	lsls	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800be94:	bf00      	nop
 800be96:	3714      	adds	r7, #20
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	40020407 	.word	0x40020407
 800bea4:	4002081c 	.word	0x4002081c
 800bea8:	cccccccd 	.word	0xcccccccd
 800beac:	40020880 	.word	0x40020880

0800beb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bec0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	4b0b      	ldr	r3, [pc, #44]	@ (800bef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bec6:	4413      	add	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	461a      	mov	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a09      	ldr	r2, [pc, #36]	@ (800bef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800bed4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3b01      	subs	r3, #1
 800beda:	f003 0303 	and.w	r3, r3, #3
 800bede:	2201      	movs	r2, #1
 800bee0:	409a      	lsls	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800bee6:	bf00      	nop
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	1000823f 	.word	0x1000823f
 800bef8:	40020940 	.word	0x40020940

0800befc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800befc:	b480      	push	{r7}
 800befe:	b087      	sub	sp, #28
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bf06:	2300      	movs	r3, #0
 800bf08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bf0a:	e14c      	b.n	800c1a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	2101      	movs	r1, #1
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	fa01 f303 	lsl.w	r3, r1, r3
 800bf18:	4013      	ands	r3, r2
 800bf1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f000 813e 	beq.w	800c1a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	f003 0303 	and.w	r3, r3, #3
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d005      	beq.n	800bf3c <HAL_GPIO_Init+0x40>
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	f003 0303 	and.w	r3, r3, #3
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d130      	bne.n	800bf9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	2203      	movs	r2, #3
 800bf48:	fa02 f303 	lsl.w	r3, r2, r3
 800bf4c:	43db      	mvns	r3, r3
 800bf4e:	693a      	ldr	r2, [r7, #16]
 800bf50:	4013      	ands	r3, r2
 800bf52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	68da      	ldr	r2, [r3, #12]
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	693a      	ldr	r2, [r7, #16]
 800bf6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bf72:	2201      	movs	r2, #1
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	fa02 f303 	lsl.w	r3, r2, r3
 800bf7a:	43db      	mvns	r3, r3
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	4013      	ands	r3, r2
 800bf80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	091b      	lsrs	r3, r3, #4
 800bf88:	f003 0201 	and.w	r2, r3, #1
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf92:	693a      	ldr	r2, [r7, #16]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f003 0303 	and.w	r3, r3, #3
 800bfa6:	2b03      	cmp	r3, #3
 800bfa8:	d017      	beq.n	800bfda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	005b      	lsls	r3, r3, #1
 800bfb4:	2203      	movs	r2, #3
 800bfb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfba:	43db      	mvns	r3, r3
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	4013      	ands	r3, r2
 800bfc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	689a      	ldr	r2, [r3, #8]
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	fa02 f303 	lsl.w	r3, r2, r3
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	693a      	ldr	r2, [r7, #16]
 800bfd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	f003 0303 	and.w	r3, r3, #3
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d123      	bne.n	800c02e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	08da      	lsrs	r2, r3, #3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3208      	adds	r2, #8
 800bfee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	f003 0307 	and.w	r3, r3, #7
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	220f      	movs	r2, #15
 800bffe:	fa02 f303 	lsl.w	r3, r2, r3
 800c002:	43db      	mvns	r3, r3
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	4013      	ands	r3, r2
 800c008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	691a      	ldr	r2, [r3, #16]
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	f003 0307 	and.w	r3, r3, #7
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	fa02 f303 	lsl.w	r3, r2, r3
 800c01a:	693a      	ldr	r2, [r7, #16]
 800c01c:	4313      	orrs	r3, r2
 800c01e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	08da      	lsrs	r2, r3, #3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3208      	adds	r2, #8
 800c028:	6939      	ldr	r1, [r7, #16]
 800c02a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	2203      	movs	r2, #3
 800c03a:	fa02 f303 	lsl.w	r3, r2, r3
 800c03e:	43db      	mvns	r3, r3
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	4013      	ands	r3, r2
 800c044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	f003 0203 	and.w	r2, r3, #3
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	005b      	lsls	r3, r3, #1
 800c052:	fa02 f303 	lsl.w	r3, r2, r3
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	4313      	orrs	r3, r2
 800c05a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 8098 	beq.w	800c1a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800c070:	4a54      	ldr	r2, [pc, #336]	@ (800c1c4 <HAL_GPIO_Init+0x2c8>)
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	089b      	lsrs	r3, r3, #2
 800c076:	3302      	adds	r3, #2
 800c078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c07c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	f003 0303 	and.w	r3, r3, #3
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	220f      	movs	r2, #15
 800c088:	fa02 f303 	lsl.w	r3, r2, r3
 800c08c:	43db      	mvns	r3, r3
 800c08e:	693a      	ldr	r2, [r7, #16]
 800c090:	4013      	ands	r3, r2
 800c092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c09a:	d019      	beq.n	800c0d0 <HAL_GPIO_Init+0x1d4>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	4a4a      	ldr	r2, [pc, #296]	@ (800c1c8 <HAL_GPIO_Init+0x2cc>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d013      	beq.n	800c0cc <HAL_GPIO_Init+0x1d0>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	4a49      	ldr	r2, [pc, #292]	@ (800c1cc <HAL_GPIO_Init+0x2d0>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d00d      	beq.n	800c0c8 <HAL_GPIO_Init+0x1cc>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	4a48      	ldr	r2, [pc, #288]	@ (800c1d0 <HAL_GPIO_Init+0x2d4>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d007      	beq.n	800c0c4 <HAL_GPIO_Init+0x1c8>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4a47      	ldr	r2, [pc, #284]	@ (800c1d4 <HAL_GPIO_Init+0x2d8>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d101      	bne.n	800c0c0 <HAL_GPIO_Init+0x1c4>
 800c0bc:	2304      	movs	r3, #4
 800c0be:	e008      	b.n	800c0d2 <HAL_GPIO_Init+0x1d6>
 800c0c0:	2307      	movs	r3, #7
 800c0c2:	e006      	b.n	800c0d2 <HAL_GPIO_Init+0x1d6>
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	e004      	b.n	800c0d2 <HAL_GPIO_Init+0x1d6>
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	e002      	b.n	800c0d2 <HAL_GPIO_Init+0x1d6>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e000      	b.n	800c0d2 <HAL_GPIO_Init+0x1d6>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	f002 0203 	and.w	r2, r2, #3
 800c0d8:	0092      	lsls	r2, r2, #2
 800c0da:	4093      	lsls	r3, r2
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c0e2:	4938      	ldr	r1, [pc, #224]	@ (800c1c4 <HAL_GPIO_Init+0x2c8>)
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	089b      	lsrs	r3, r3, #2
 800c0e8:	3302      	adds	r3, #2
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c0f0:	4b39      	ldr	r3, [pc, #228]	@ (800c1d8 <HAL_GPIO_Init+0x2dc>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	43db      	mvns	r3, r3
 800c0fa:	693a      	ldr	r2, [r7, #16]
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d003      	beq.n	800c114 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800c10c:	693a      	ldr	r2, [r7, #16]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	4313      	orrs	r3, r2
 800c112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c114:	4a30      	ldr	r2, [pc, #192]	@ (800c1d8 <HAL_GPIO_Init+0x2dc>)
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c11a:	4b2f      	ldr	r3, [pc, #188]	@ (800c1d8 <HAL_GPIO_Init+0x2dc>)
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	43db      	mvns	r3, r3
 800c124:	693a      	ldr	r2, [r7, #16]
 800c126:	4013      	ands	r3, r2
 800c128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c13e:	4a26      	ldr	r2, [pc, #152]	@ (800c1d8 <HAL_GPIO_Init+0x2dc>)
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c144:	4b24      	ldr	r3, [pc, #144]	@ (800c1d8 <HAL_GPIO_Init+0x2dc>)
 800c146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c14a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	43db      	mvns	r3, r3
 800c150:	693a      	ldr	r2, [r7, #16]
 800c152:	4013      	ands	r3, r2
 800c154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d003      	beq.n	800c16a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800c162:	693a      	ldr	r2, [r7, #16]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	4313      	orrs	r3, r2
 800c168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c16a:	4a1b      	ldr	r2, [pc, #108]	@ (800c1d8 <HAL_GPIO_Init+0x2dc>)
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800c172:	4b19      	ldr	r3, [pc, #100]	@ (800c1d8 <HAL_GPIO_Init+0x2dc>)
 800c174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	43db      	mvns	r3, r3
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	4013      	ands	r3, r2
 800c182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d003      	beq.n	800c198 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800c190:	693a      	ldr	r2, [r7, #16]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	4313      	orrs	r3, r2
 800c196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c198:	4a0f      	ldr	r2, [pc, #60]	@ (800c1d8 <HAL_GPIO_Init+0x2dc>)
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f47f aeab 	bne.w	800bf0c <HAL_GPIO_Init+0x10>
  }
}
 800c1b6:	bf00      	nop
 800c1b8:	bf00      	nop
 800c1ba:	371c      	adds	r7, #28
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr
 800c1c4:	40010000 	.word	0x40010000
 800c1c8:	48000400 	.word	0x48000400
 800c1cc:	48000800 	.word	0x48000800
 800c1d0:	48000c00 	.word	0x48000c00
 800c1d4:	48001000 	.word	0x48001000
 800c1d8:	58000800 	.word	0x58000800

0800c1dc <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b087      	sub	sp, #28
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800c1ea:	e0bb      	b.n	800c364 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f4:	683a      	ldr	r2, [r7, #0]
 800c1f6:	4013      	ands	r3, r2
 800c1f8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f000 80ae 	beq.w	800c35e <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800c202:	4a5f      	ldr	r2, [pc, #380]	@ (800c380 <HAL_GPIO_DeInit+0x1a4>)
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	089b      	lsrs	r3, r3, #2
 800c208:	3302      	adds	r3, #2
 800c20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c20e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	f003 0303 	and.w	r3, r3, #3
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	220f      	movs	r2, #15
 800c21a:	fa02 f303 	lsl.w	r3, r2, r3
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	4013      	ands	r3, r2
 800c222:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c22a:	d019      	beq.n	800c260 <HAL_GPIO_DeInit+0x84>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a55      	ldr	r2, [pc, #340]	@ (800c384 <HAL_GPIO_DeInit+0x1a8>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d013      	beq.n	800c25c <HAL_GPIO_DeInit+0x80>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a54      	ldr	r2, [pc, #336]	@ (800c388 <HAL_GPIO_DeInit+0x1ac>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d00d      	beq.n	800c258 <HAL_GPIO_DeInit+0x7c>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a53      	ldr	r2, [pc, #332]	@ (800c38c <HAL_GPIO_DeInit+0x1b0>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d007      	beq.n	800c254 <HAL_GPIO_DeInit+0x78>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a52      	ldr	r2, [pc, #328]	@ (800c390 <HAL_GPIO_DeInit+0x1b4>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d101      	bne.n	800c250 <HAL_GPIO_DeInit+0x74>
 800c24c:	2304      	movs	r3, #4
 800c24e:	e008      	b.n	800c262 <HAL_GPIO_DeInit+0x86>
 800c250:	2307      	movs	r3, #7
 800c252:	e006      	b.n	800c262 <HAL_GPIO_DeInit+0x86>
 800c254:	2303      	movs	r3, #3
 800c256:	e004      	b.n	800c262 <HAL_GPIO_DeInit+0x86>
 800c258:	2302      	movs	r3, #2
 800c25a:	e002      	b.n	800c262 <HAL_GPIO_DeInit+0x86>
 800c25c:	2301      	movs	r3, #1
 800c25e:	e000      	b.n	800c262 <HAL_GPIO_DeInit+0x86>
 800c260:	2300      	movs	r3, #0
 800c262:	697a      	ldr	r2, [r7, #20]
 800c264:	f002 0203 	and.w	r2, r2, #3
 800c268:	0092      	lsls	r2, r2, #2
 800c26a:	4093      	lsls	r3, r2
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d136      	bne.n	800c2e0 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c272:	4b48      	ldr	r3, [pc, #288]	@ (800c394 <HAL_GPIO_DeInit+0x1b8>)
 800c274:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	43db      	mvns	r3, r3
 800c27c:	4945      	ldr	r1, [pc, #276]	@ (800c394 <HAL_GPIO_DeInit+0x1b8>)
 800c27e:	4013      	ands	r3, r2
 800c280:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800c284:	4b43      	ldr	r3, [pc, #268]	@ (800c394 <HAL_GPIO_DeInit+0x1b8>)
 800c286:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	43db      	mvns	r3, r3
 800c28e:	4941      	ldr	r1, [pc, #260]	@ (800c394 <HAL_GPIO_DeInit+0x1b8>)
 800c290:	4013      	ands	r3, r2
 800c292:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c296:	4b3f      	ldr	r3, [pc, #252]	@ (800c394 <HAL_GPIO_DeInit+0x1b8>)
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	43db      	mvns	r3, r3
 800c29e:	493d      	ldr	r1, [pc, #244]	@ (800c394 <HAL_GPIO_DeInit+0x1b8>)
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800c2a4:	4b3b      	ldr	r3, [pc, #236]	@ (800c394 <HAL_GPIO_DeInit+0x1b8>)
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	43db      	mvns	r3, r3
 800c2ac:	4939      	ldr	r1, [pc, #228]	@ (800c394 <HAL_GPIO_DeInit+0x1b8>)
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f003 0303 	and.w	r3, r3, #3
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	220f      	movs	r2, #15
 800c2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c2c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800c2c2:	4a2f      	ldr	r2, [pc, #188]	@ (800c380 <HAL_GPIO_DeInit+0x1a4>)
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	089b      	lsrs	r3, r3, #2
 800c2c8:	3302      	adds	r3, #2
 800c2ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	43da      	mvns	r2, r3
 800c2d2:	482b      	ldr	r0, [pc, #172]	@ (800c380 <HAL_GPIO_DeInit+0x1a4>)
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	089b      	lsrs	r3, r3, #2
 800c2d8:	400a      	ands	r2, r1
 800c2da:	3302      	adds	r3, #2
 800c2dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	005b      	lsls	r3, r3, #1
 800c2e8:	2103      	movs	r1, #3
 800c2ea:	fa01 f303 	lsl.w	r3, r1, r3
 800c2ee:	431a      	orrs	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	08da      	lsrs	r2, r3, #3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	3208      	adds	r2, #8
 800c2fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	f003 0307 	and.w	r3, r3, #7
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	220f      	movs	r2, #15
 800c30a:	fa02 f303 	lsl.w	r3, r2, r3
 800c30e:	43db      	mvns	r3, r3
 800c310:	697a      	ldr	r2, [r7, #20]
 800c312:	08d2      	lsrs	r2, r2, #3
 800c314:	4019      	ands	r1, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	3208      	adds	r2, #8
 800c31a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	68da      	ldr	r2, [r3, #12]
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	2103      	movs	r1, #3
 800c328:	fa01 f303 	lsl.w	r3, r1, r3
 800c32c:	43db      	mvns	r3, r3
 800c32e:	401a      	ands	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	2101      	movs	r1, #1
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	fa01 f303 	lsl.w	r3, r1, r3
 800c340:	43db      	mvns	r3, r3
 800c342:	401a      	ands	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	689a      	ldr	r2, [r3, #8]
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	2103      	movs	r1, #3
 800c352:	fa01 f303 	lsl.w	r3, r1, r3
 800c356:	43db      	mvns	r3, r3
 800c358:	401a      	ands	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	3301      	adds	r3, #1
 800c362:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800c364:	683a      	ldr	r2, [r7, #0]
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	fa22 f303 	lsr.w	r3, r2, r3
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f47f af3d 	bne.w	800c1ec <HAL_GPIO_DeInit+0x10>
  }
}
 800c372:	bf00      	nop
 800c374:	bf00      	nop
 800c376:	371c      	adds	r7, #28
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	40010000 	.word	0x40010000
 800c384:	48000400 	.word	0x48000400
 800c388:	48000800 	.word	0x48000800
 800c38c:	48000c00 	.word	0x48000c00
 800c390:	48001000 	.word	0x48001000
 800c394:	58000800 	.word	0x58000800

0800c398 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	691a      	ldr	r2, [r3, #16]
 800c3a8:	887b      	ldrh	r3, [r7, #2]
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	73fb      	strb	r3, [r7, #15]
 800c3b4:	e001      	b.n	800c3ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	807b      	strh	r3, [r7, #2]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c3d8:	787b      	ldrb	r3, [r7, #1]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d003      	beq.n	800c3e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c3de:	887a      	ldrh	r2, [r7, #2]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c3e4:	e002      	b.n	800c3ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c3e6:	887a      	ldrh	r2, [r7, #2]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c3ec:	bf00      	nop
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	4603      	mov	r3, r0
 800c400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c402:	4b08      	ldr	r3, [pc, #32]	@ (800c424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c404:	68da      	ldr	r2, [r3, #12]
 800c406:	88fb      	ldrh	r3, [r7, #6]
 800c408:	4013      	ands	r3, r2
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d006      	beq.n	800c41c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c40e:	4a05      	ldr	r2, [pc, #20]	@ (800c424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c410:	88fb      	ldrh	r3, [r7, #6]
 800c412:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	4618      	mov	r0, r3
 800c418:	f7f6 fbb0 	bl	8002b7c <HAL_GPIO_EXTI_Callback>
  }
}
 800c41c:	bf00      	nop
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	58000800 	.word	0x58000800

0800c428 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800c42e:	4b0a      	ldr	r3, [pc, #40]	@ (800c458 <HAL_HSEM_IRQHandler+0x30>)
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800c434:	4b08      	ldr	r3, [pc, #32]	@ (800c458 <HAL_HSEM_IRQHandler+0x30>)
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	43db      	mvns	r3, r3
 800c43c:	4906      	ldr	r1, [pc, #24]	@ (800c458 <HAL_HSEM_IRQHandler+0x30>)
 800c43e:	4013      	ands	r3, r2
 800c440:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800c442:	4a05      	ldr	r2, [pc, #20]	@ (800c458 <HAL_HSEM_IRQHandler+0x30>)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 f807 	bl	800c45c <HAL_HSEM_FreeCallback>
}
 800c44e:	bf00      	nop
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	58001500 	.word	0x58001500

0800c45c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800c464:	bf00      	nop
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d101      	bne.n	800c482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c47e:	2301      	movs	r3, #1
 800c480:	e08d      	b.n	800c59e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d106      	bne.n	800c49c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7f6 f982 	bl	80027a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2224      	movs	r2, #36	@ 0x24
 800c4a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f022 0201 	bic.w	r2, r2, #1
 800c4b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c4c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	689a      	ldr	r2, [r3, #8]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c4d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d107      	bne.n	800c4ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	689a      	ldr	r2, [r3, #8]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c4e6:	609a      	str	r2, [r3, #8]
 800c4e8:	e006      	b.n	800c4f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	689a      	ldr	r2, [r3, #8]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800c4f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d108      	bne.n	800c512 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c50e:	605a      	str	r2, [r3, #4]
 800c510:	e007      	b.n	800c522 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	685a      	ldr	r2, [r3, #4]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c520:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	6812      	ldr	r2, [r2, #0]
 800c52c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c534:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	68da      	ldr	r2, [r3, #12]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c544:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	691a      	ldr	r2, [r3, #16]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	695b      	ldr	r3, [r3, #20]
 800c54e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	430a      	orrs	r2, r1
 800c55e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	69d9      	ldr	r1, [r3, #28]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a1a      	ldr	r2, [r3, #32]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	430a      	orrs	r2, r1
 800c56e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f042 0201 	orr.w	r2, r2, #1
 800c57e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2220      	movs	r2, #32
 800c58a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b082      	sub	sp, #8
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d101      	bne.n	800c5b8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e021      	b.n	800c5fc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2224      	movs	r2, #36	@ 0x24
 800c5bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f022 0201 	bic.w	r2, r2, #1
 800c5ce:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7f6 f95d 	bl	8002890 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af02      	add	r7, sp, #8
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	607a      	str	r2, [r7, #4]
 800c60e:	461a      	mov	r2, r3
 800c610:	460b      	mov	r3, r1
 800c612:	817b      	strh	r3, [r7, #10]
 800c614:	4613      	mov	r3, r2
 800c616:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	2b20      	cmp	r3, #32
 800c622:	f040 80fd 	bne.w	800c820 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d101      	bne.n	800c634 <HAL_I2C_Master_Transmit+0x30>
 800c630:	2302      	movs	r3, #2
 800c632:	e0f6      	b.n	800c822 <HAL_I2C_Master_Transmit+0x21e>
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c63c:	f7fd fd34 	bl	800a0a8 <HAL_GetTick>
 800c640:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	2319      	movs	r3, #25
 800c648:	2201      	movs	r2, #1
 800c64a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f000 fdcc 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	e0e1      	b.n	800c822 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2221      	movs	r2, #33	@ 0x21
 800c662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2210      	movs	r2, #16
 800c66a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	893a      	ldrh	r2, [r7, #8]
 800c67e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2200      	movs	r2, #0
 800c684:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	2bff      	cmp	r3, #255	@ 0xff
 800c68e:	d906      	bls.n	800c69e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	22ff      	movs	r2, #255	@ 0xff
 800c694:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800c696:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c69a:	617b      	str	r3, [r7, #20]
 800c69c:	e007      	b.n	800c6ae <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800c6a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c6ac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d024      	beq.n	800c700 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6ba:	781a      	ldrb	r2, [r3, #0]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c6:	1c5a      	adds	r2, r3, #1
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6de:	3b01      	subs	r3, #1
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	8979      	ldrh	r1, [r7, #10]
 800c6f2:	4b4e      	ldr	r3, [pc, #312]	@ (800c82c <HAL_I2C_Master_Transmit+0x228>)
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f000 ffc7 	bl	800d68c <I2C_TransferConfig>
 800c6fe:	e066      	b.n	800c7ce <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c704:	b2da      	uxtb	r2, r3
 800c706:	8979      	ldrh	r1, [r7, #10]
 800c708:	4b48      	ldr	r3, [pc, #288]	@ (800c82c <HAL_I2C_Master_Transmit+0x228>)
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f000 ffbc 	bl	800d68c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800c714:	e05b      	b.n	800c7ce <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c716:	693a      	ldr	r2, [r7, #16]
 800c718:	6a39      	ldr	r1, [r7, #32]
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f000 fdbf 	bl	800d29e <I2C_WaitOnTXISFlagUntilTimeout>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	e07b      	b.n	800c822 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c72e:	781a      	ldrb	r2, [r3, #0]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c73a:	1c5a      	adds	r2, r3, #1
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c744:	b29b      	uxth	r3, r3
 800c746:	3b01      	subs	r3, #1
 800c748:	b29a      	uxth	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c752:	3b01      	subs	r3, #1
 800c754:	b29a      	uxth	r2, r3
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c75e:	b29b      	uxth	r3, r3
 800c760:	2b00      	cmp	r3, #0
 800c762:	d034      	beq.n	800c7ce <HAL_I2C_Master_Transmit+0x1ca>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d130      	bne.n	800c7ce <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	6a3b      	ldr	r3, [r7, #32]
 800c772:	2200      	movs	r2, #0
 800c774:	2180      	movs	r1, #128	@ 0x80
 800c776:	68f8      	ldr	r0, [r7, #12]
 800c778:	f000 fd38 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	e04d      	b.n	800c822 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	2bff      	cmp	r3, #255	@ 0xff
 800c78e:	d90e      	bls.n	800c7ae <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	22ff      	movs	r2, #255	@ 0xff
 800c794:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	8979      	ldrh	r1, [r7, #10]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	f000 ff70 	bl	800d68c <I2C_TransferConfig>
 800c7ac:	e00f      	b.n	800c7ce <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	8979      	ldrh	r1, [r7, #10]
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f000 ff5f 	bl	800d68c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d19e      	bne.n	800c716 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c7d8:	693a      	ldr	r2, [r7, #16]
 800c7da:	6a39      	ldr	r1, [r7, #32]
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 fda5 	bl	800d32c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d001      	beq.n	800c7ec <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e01a      	b.n	800c822 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2220      	movs	r2, #32
 800c7f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6859      	ldr	r1, [r3, #4]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c830 <HAL_I2C_Master_Transmit+0x22c>)
 800c800:	400b      	ands	r3, r1
 800c802:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2220      	movs	r2, #32
 800c808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2200      	movs	r2, #0
 800c810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c81c:	2300      	movs	r3, #0
 800c81e:	e000      	b.n	800c822 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800c820:	2302      	movs	r3, #2
  }
}
 800c822:	4618      	mov	r0, r3
 800c824:	3718      	adds	r7, #24
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	80002000 	.word	0x80002000
 800c830:	fe00e800 	.word	0xfe00e800

0800c834 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b088      	sub	sp, #32
 800c838:	af02      	add	r7, sp, #8
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	607a      	str	r2, [r7, #4]
 800c83e:	461a      	mov	r2, r3
 800c840:	460b      	mov	r3, r1
 800c842:	817b      	strh	r3, [r7, #10]
 800c844:	4613      	mov	r3, r2
 800c846:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	2b20      	cmp	r3, #32
 800c852:	f040 80db 	bne.w	800ca0c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d101      	bne.n	800c864 <HAL_I2C_Master_Receive+0x30>
 800c860:	2302      	movs	r3, #2
 800c862:	e0d4      	b.n	800ca0e <HAL_I2C_Master_Receive+0x1da>
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c86c:	f7fd fc1c 	bl	800a0a8 <HAL_GetTick>
 800c870:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	2319      	movs	r3, #25
 800c878:	2201      	movs	r2, #1
 800c87a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f000 fcb4 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e0bf      	b.n	800ca0e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2222      	movs	r2, #34	@ 0x22
 800c892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2210      	movs	r2, #16
 800c89a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	893a      	ldrh	r2, [r7, #8]
 800c8ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	2bff      	cmp	r3, #255	@ 0xff
 800c8be:	d90e      	bls.n	800c8de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	22ff      	movs	r2, #255	@ 0xff
 800c8c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	8979      	ldrh	r1, [r7, #10]
 800c8ce:	4b52      	ldr	r3, [pc, #328]	@ (800ca18 <HAL_I2C_Master_Receive+0x1e4>)
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f000 fed8 	bl	800d68c <I2C_TransferConfig>
 800c8dc:	e06d      	b.n	800c9ba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	8979      	ldrh	r1, [r7, #10]
 800c8f0:	4b49      	ldr	r3, [pc, #292]	@ (800ca18 <HAL_I2C_Master_Receive+0x1e4>)
 800c8f2:	9300      	str	r3, [sp, #0]
 800c8f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f000 fec7 	bl	800d68c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800c8fe:	e05c      	b.n	800c9ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c900:	697a      	ldr	r2, [r7, #20]
 800c902:	6a39      	ldr	r1, [r7, #32]
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	f000 fd55 	bl	800d3b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	e07c      	b.n	800ca0e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c91e:	b2d2      	uxtb	r2, r2
 800c920:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c930:	3b01      	subs	r3, #1
 800c932:	b29a      	uxth	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	3b01      	subs	r3, #1
 800c940:	b29a      	uxth	r2, r3
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d034      	beq.n	800c9ba <HAL_I2C_Master_Receive+0x186>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c954:	2b00      	cmp	r3, #0
 800c956:	d130      	bne.n	800c9ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	6a3b      	ldr	r3, [r7, #32]
 800c95e:	2200      	movs	r2, #0
 800c960:	2180      	movs	r1, #128	@ 0x80
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f000 fc42 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d001      	beq.n	800c972 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800c96e:	2301      	movs	r3, #1
 800c970:	e04d      	b.n	800ca0e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c976:	b29b      	uxth	r3, r3
 800c978:	2bff      	cmp	r3, #255	@ 0xff
 800c97a:	d90e      	bls.n	800c99a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	22ff      	movs	r2, #255	@ 0xff
 800c980:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c986:	b2da      	uxtb	r2, r3
 800c988:	8979      	ldrh	r1, [r7, #10]
 800c98a:	2300      	movs	r3, #0
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f000 fe7a 	bl	800d68c <I2C_TransferConfig>
 800c998:	e00f      	b.n	800c9ba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	8979      	ldrh	r1, [r7, #10]
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	f000 fe69 	bl	800d68c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d19d      	bne.n	800c900 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c9c4:	697a      	ldr	r2, [r7, #20]
 800c9c6:	6a39      	ldr	r1, [r7, #32]
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f000 fcaf 	bl	800d32c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e01a      	b.n	800ca0e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2220      	movs	r2, #32
 800c9de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	6859      	ldr	r1, [r3, #4]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	4b0c      	ldr	r3, [pc, #48]	@ (800ca1c <HAL_I2C_Master_Receive+0x1e8>)
 800c9ec:	400b      	ands	r3, r1
 800c9ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2220      	movs	r2, #32
 800c9f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	e000      	b.n	800ca0e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800ca0c:	2302      	movs	r3, #2
  }
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3718      	adds	r7, #24
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	80002400 	.word	0x80002400
 800ca1c:	fe00e800 	.word	0xfe00e800

0800ca20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b088      	sub	sp, #32
 800ca24:	af02      	add	r7, sp, #8
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	4608      	mov	r0, r1
 800ca2a:	4611      	mov	r1, r2
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	4603      	mov	r3, r0
 800ca30:	817b      	strh	r3, [r7, #10]
 800ca32:	460b      	mov	r3, r1
 800ca34:	813b      	strh	r3, [r7, #8]
 800ca36:	4613      	mov	r3, r2
 800ca38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	2b20      	cmp	r3, #32
 800ca44:	f040 80f9 	bne.w	800cc3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca48:	6a3b      	ldr	r3, [r7, #32]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d002      	beq.n	800ca54 <HAL_I2C_Mem_Write+0x34>
 800ca4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d105      	bne.n	800ca60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca5a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e0ed      	b.n	800cc3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d101      	bne.n	800ca6e <HAL_I2C_Mem_Write+0x4e>
 800ca6a:	2302      	movs	r3, #2
 800ca6c:	e0e6      	b.n	800cc3c <HAL_I2C_Mem_Write+0x21c>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ca76:	f7fd fb17 	bl	800a0a8 <HAL_GetTick>
 800ca7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	2319      	movs	r3, #25
 800ca82:	2201      	movs	r2, #1
 800ca84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f000 fbaf 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	e0d1      	b.n	800cc3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2221      	movs	r2, #33	@ 0x21
 800ca9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2240      	movs	r2, #64	@ 0x40
 800caa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6a3a      	ldr	r2, [r7, #32]
 800cab2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cac0:	88f8      	ldrh	r0, [r7, #6]
 800cac2:	893a      	ldrh	r2, [r7, #8]
 800cac4:	8979      	ldrh	r1, [r7, #10]
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	9301      	str	r3, [sp, #4]
 800caca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	4603      	mov	r3, r0
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f000 fabf 	bl	800d054 <I2C_RequestMemoryWrite>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d005      	beq.n	800cae8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	e0a9      	b.n	800cc3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800caec:	b29b      	uxth	r3, r3
 800caee:	2bff      	cmp	r3, #255	@ 0xff
 800caf0:	d90e      	bls.n	800cb10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	22ff      	movs	r2, #255	@ 0xff
 800caf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cafc:	b2da      	uxtb	r2, r3
 800cafe:	8979      	ldrh	r1, [r7, #10]
 800cb00:	2300      	movs	r3, #0
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f000 fdbf 	bl	800d68c <I2C_TransferConfig>
 800cb0e:	e00f      	b.n	800cb30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	8979      	ldrh	r1, [r7, #10]
 800cb22:	2300      	movs	r3, #0
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f000 fdae 	bl	800d68c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cb30:	697a      	ldr	r2, [r7, #20]
 800cb32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 fbb2 	bl	800d29e <I2C_WaitOnTXISFlagUntilTimeout>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	e07b      	b.n	800cc3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb48:	781a      	ldrb	r2, [r3, #0]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb54:	1c5a      	adds	r2, r3, #1
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	3b01      	subs	r3, #1
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d034      	beq.n	800cbe8 <HAL_I2C_Mem_Write+0x1c8>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d130      	bne.n	800cbe8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2180      	movs	r1, #128	@ 0x80
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f000 fb2b 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d001      	beq.n	800cba0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e04d      	b.n	800cc3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	2bff      	cmp	r3, #255	@ 0xff
 800cba8:	d90e      	bls.n	800cbc8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	22ff      	movs	r2, #255	@ 0xff
 800cbae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbb4:	b2da      	uxtb	r2, r3
 800cbb6:	8979      	ldrh	r1, [r7, #10]
 800cbb8:	2300      	movs	r3, #0
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f000 fd63 	bl	800d68c <I2C_TransferConfig>
 800cbc6:	e00f      	b.n	800cbe8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	8979      	ldrh	r1, [r7, #10]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f000 fd52 	bl	800d68c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d19e      	bne.n	800cb30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	f000 fb98 	bl	800d32c <I2C_WaitOnSTOPFlagUntilTimeout>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d001      	beq.n	800cc06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e01a      	b.n	800cc3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2220      	movs	r2, #32
 800cc0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	6859      	ldr	r1, [r3, #4]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	4b0a      	ldr	r3, [pc, #40]	@ (800cc44 <HAL_I2C_Mem_Write+0x224>)
 800cc1a:	400b      	ands	r3, r1
 800cc1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2220      	movs	r2, #32
 800cc22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	e000      	b.n	800cc3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800cc3a:	2302      	movs	r3, #2
  }
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3718      	adds	r7, #24
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	fe00e800 	.word	0xfe00e800

0800cc48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b088      	sub	sp, #32
 800cc4c:	af02      	add	r7, sp, #8
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	4608      	mov	r0, r1
 800cc52:	4611      	mov	r1, r2
 800cc54:	461a      	mov	r2, r3
 800cc56:	4603      	mov	r3, r0
 800cc58:	817b      	strh	r3, [r7, #10]
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	813b      	strh	r3, [r7, #8]
 800cc5e:	4613      	mov	r3, r2
 800cc60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	2b20      	cmp	r3, #32
 800cc6c:	f040 80fd 	bne.w	800ce6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc70:	6a3b      	ldr	r3, [r7, #32]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d002      	beq.n	800cc7c <HAL_I2C_Mem_Read+0x34>
 800cc76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d105      	bne.n	800cc88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	e0f1      	b.n	800ce6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d101      	bne.n	800cc96 <HAL_I2C_Mem_Read+0x4e>
 800cc92:	2302      	movs	r3, #2
 800cc94:	e0ea      	b.n	800ce6c <HAL_I2C_Mem_Read+0x224>
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cc9e:	f7fd fa03 	bl	800a0a8 <HAL_GetTick>
 800cca2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	9300      	str	r3, [sp, #0]
 800cca8:	2319      	movs	r3, #25
 800ccaa:	2201      	movs	r2, #1
 800ccac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f000 fa9b 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d001      	beq.n	800ccc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e0d5      	b.n	800ce6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2222      	movs	r2, #34	@ 0x22
 800ccc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2240      	movs	r2, #64	@ 0x40
 800cccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6a3a      	ldr	r2, [r7, #32]
 800ccda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2200      	movs	r2, #0
 800cce6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cce8:	88f8      	ldrh	r0, [r7, #6]
 800ccea:	893a      	ldrh	r2, [r7, #8]
 800ccec:	8979      	ldrh	r1, [r7, #10]
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	9301      	str	r3, [sp, #4]
 800ccf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f000 f9ff 	bl	800d0fc <I2C_RequestMemoryRead>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d005      	beq.n	800cd10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e0ad      	b.n	800ce6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	2bff      	cmp	r3, #255	@ 0xff
 800cd18:	d90e      	bls.n	800cd38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	22ff      	movs	r2, #255	@ 0xff
 800cd1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd24:	b2da      	uxtb	r2, r3
 800cd26:	8979      	ldrh	r1, [r7, #10]
 800cd28:	4b52      	ldr	r3, [pc, #328]	@ (800ce74 <HAL_I2C_Mem_Read+0x22c>)
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f000 fcab 	bl	800d68c <I2C_TransferConfig>
 800cd36:	e00f      	b.n	800cd58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	8979      	ldrh	r1, [r7, #10]
 800cd4a:	4b4a      	ldr	r3, [pc, #296]	@ (800ce74 <HAL_I2C_Mem_Read+0x22c>)
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f000 fc9a 	bl	800d68c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd5e:	2200      	movs	r2, #0
 800cd60:	2104      	movs	r1, #4
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f000 fa42 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d001      	beq.n	800cd72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e07c      	b.n	800ce6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd7c:	b2d2      	uxtb	r2, r2
 800cd7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd84:	1c5a      	adds	r2, r3, #1
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d034      	beq.n	800ce18 <HAL_I2C_Mem_Read+0x1d0>
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d130      	bne.n	800ce18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	2180      	movs	r1, #128	@ 0x80
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f000 fa13 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d001      	beq.n	800cdd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e04d      	b.n	800ce6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	2bff      	cmp	r3, #255	@ 0xff
 800cdd8:	d90e      	bls.n	800cdf8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	22ff      	movs	r2, #255	@ 0xff
 800cdde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	8979      	ldrh	r1, [r7, #10]
 800cde8:	2300      	movs	r3, #0
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f000 fc4b 	bl	800d68c <I2C_TransferConfig>
 800cdf6:	e00f      	b.n	800ce18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	8979      	ldrh	r1, [r7, #10]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	9300      	str	r3, [sp, #0]
 800ce0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ce12:	68f8      	ldr	r0, [r7, #12]
 800ce14:	f000 fc3a 	bl	800d68c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d19a      	bne.n	800cd58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce22:	697a      	ldr	r2, [r7, #20]
 800ce24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f000 fa80 	bl	800d32c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ce32:	2301      	movs	r3, #1
 800ce34:	e01a      	b.n	800ce6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2220      	movs	r2, #32
 800ce3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	6859      	ldr	r1, [r3, #4]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	4b0b      	ldr	r3, [pc, #44]	@ (800ce78 <HAL_I2C_Mem_Read+0x230>)
 800ce4a:	400b      	ands	r3, r1
 800ce4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2220      	movs	r2, #32
 800ce52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ce66:	2300      	movs	r3, #0
 800ce68:	e000      	b.n	800ce6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ce6a:	2302      	movs	r3, #2
  }
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	80002400 	.word	0x80002400
 800ce78:	fe00e800 	.word	0xfe00e800

0800ce7c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b08a      	sub	sp, #40	@ 0x28
 800ce80:	af02      	add	r7, sp, #8
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	607a      	str	r2, [r7, #4]
 800ce86:	603b      	str	r3, [r7, #0]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	2b20      	cmp	r3, #32
 800ce9a:	f040 80d6 	bne.w	800d04a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ceac:	d101      	bne.n	800ceb2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800ceae:	2302      	movs	r3, #2
 800ceb0:	e0cc      	b.n	800d04c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d101      	bne.n	800cec0 <HAL_I2C_IsDeviceReady+0x44>
 800cebc:	2302      	movs	r3, #2
 800cebe:	e0c5      	b.n	800d04c <HAL_I2C_IsDeviceReady+0x1d0>
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2201      	movs	r2, #1
 800cec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2224      	movs	r2, #36	@ 0x24
 800cecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2200      	movs	r2, #0
 800ced4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d107      	bne.n	800ceee <HAL_I2C_IsDeviceReady+0x72>
 800cede:	897b      	ldrh	r3, [r7, #10]
 800cee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cee4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800cee8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ceec:	e006      	b.n	800cefc <HAL_I2C_IsDeviceReady+0x80>
 800ceee:	897b      	ldrh	r3, [r7, #10]
 800cef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cef4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800cef8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	6812      	ldr	r2, [r2, #0]
 800cf00:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800cf02:	f7fd f8d1 	bl	800a0a8 <HAL_GetTick>
 800cf06:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	699b      	ldr	r3, [r3, #24]
 800cf0e:	f003 0320 	and.w	r3, r3, #32
 800cf12:	2b20      	cmp	r3, #32
 800cf14:	bf0c      	ite	eq
 800cf16:	2301      	moveq	r3, #1
 800cf18:	2300      	movne	r3, #0
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	f003 0310 	and.w	r3, r3, #16
 800cf28:	2b10      	cmp	r3, #16
 800cf2a:	bf0c      	ite	eq
 800cf2c:	2301      	moveq	r3, #1
 800cf2e:	2300      	movne	r3, #0
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800cf34:	e034      	b.n	800cfa0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf3c:	d01a      	beq.n	800cf74 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cf3e:	f7fd f8b3 	bl	800a0a8 <HAL_GetTick>
 800cf42:	4602      	mov	r2, r0
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	1ad3      	subs	r3, r2, r3
 800cf48:	683a      	ldr	r2, [r7, #0]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d302      	bcc.n	800cf54 <HAL_I2C_IsDeviceReady+0xd8>
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d10f      	bne.n	800cf74 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2220      	movs	r2, #32
 800cf58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf60:	f043 0220 	orr.w	r2, r3, #32
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e06b      	b.n	800d04c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	699b      	ldr	r3, [r3, #24]
 800cf7a:	f003 0320 	and.w	r3, r3, #32
 800cf7e:	2b20      	cmp	r3, #32
 800cf80:	bf0c      	ite	eq
 800cf82:	2301      	moveq	r3, #1
 800cf84:	2300      	movne	r3, #0
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	699b      	ldr	r3, [r3, #24]
 800cf90:	f003 0310 	and.w	r3, r3, #16
 800cf94:	2b10      	cmp	r3, #16
 800cf96:	bf0c      	ite	eq
 800cf98:	2301      	moveq	r3, #1
 800cf9a:	2300      	movne	r3, #0
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800cfa0:	7ffb      	ldrb	r3, [r7, #31]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d102      	bne.n	800cfac <HAL_I2C_IsDeviceReady+0x130>
 800cfa6:	7fbb      	ldrb	r3, [r7, #30]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d0c4      	beq.n	800cf36 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	f003 0310 	and.w	r3, r3, #16
 800cfb6:	2b10      	cmp	r3, #16
 800cfb8:	d01a      	beq.n	800cff0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	2120      	movs	r1, #32
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f000 f911 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d001      	beq.n	800cfd4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e03b      	b.n	800d04c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2220      	movs	r2, #32
 800cfe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800cfec:	2300      	movs	r3, #0
 800cfee:	e02d      	b.n	800d04c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	2200      	movs	r2, #0
 800cff8:	2120      	movs	r1, #32
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f000 f8f6 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d001      	beq.n	800d00a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e020      	b.n	800d04c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2210      	movs	r2, #16
 800d010:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2220      	movs	r2, #32
 800d018:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	3301      	adds	r3, #1
 800d01e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	429a      	cmp	r2, r3
 800d026:	f63f af56 	bhi.w	800ced6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2220      	movs	r2, #32
 800d02e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d036:	f043 0220 	orr.w	r2, r3, #32
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2200      	movs	r2, #0
 800d042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	e000      	b.n	800d04c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800d04a:	2302      	movs	r3, #2
  }
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3720      	adds	r7, #32
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b086      	sub	sp, #24
 800d058:	af02      	add	r7, sp, #8
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	4608      	mov	r0, r1
 800d05e:	4611      	mov	r1, r2
 800d060:	461a      	mov	r2, r3
 800d062:	4603      	mov	r3, r0
 800d064:	817b      	strh	r3, [r7, #10]
 800d066:	460b      	mov	r3, r1
 800d068:	813b      	strh	r3, [r7, #8]
 800d06a:	4613      	mov	r3, r2
 800d06c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d06e:	88fb      	ldrh	r3, [r7, #6]
 800d070:	b2da      	uxtb	r2, r3
 800d072:	8979      	ldrh	r1, [r7, #10]
 800d074:	4b20      	ldr	r3, [pc, #128]	@ (800d0f8 <I2C_RequestMemoryWrite+0xa4>)
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d07c:	68f8      	ldr	r0, [r7, #12]
 800d07e:	f000 fb05 	bl	800d68c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d082:	69fa      	ldr	r2, [r7, #28]
 800d084:	69b9      	ldr	r1, [r7, #24]
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f000 f909 	bl	800d29e <I2C_WaitOnTXISFlagUntilTimeout>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d092:	2301      	movs	r3, #1
 800d094:	e02c      	b.n	800d0f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d096:	88fb      	ldrh	r3, [r7, #6]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d105      	bne.n	800d0a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d09c:	893b      	ldrh	r3, [r7, #8]
 800d09e:	b2da      	uxtb	r2, r3
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	629a      	str	r2, [r3, #40]	@ 0x28
 800d0a6:	e015      	b.n	800d0d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d0a8:	893b      	ldrh	r3, [r7, #8]
 800d0aa:	0a1b      	lsrs	r3, r3, #8
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	b2da      	uxtb	r2, r3
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0b6:	69fa      	ldr	r2, [r7, #28]
 800d0b8:	69b9      	ldr	r1, [r7, #24]
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f000 f8ef 	bl	800d29e <I2C_WaitOnTXISFlagUntilTimeout>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d001      	beq.n	800d0ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e012      	b.n	800d0f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d0ca:	893b      	ldrh	r3, [r7, #8]
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	9300      	str	r3, [sp, #0]
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	2180      	movs	r1, #128	@ 0x80
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f000 f884 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d001      	beq.n	800d0ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e000      	b.n	800d0f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3710      	adds	r7, #16
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	80002000 	.word	0x80002000

0800d0fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af02      	add	r7, sp, #8
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	4608      	mov	r0, r1
 800d106:	4611      	mov	r1, r2
 800d108:	461a      	mov	r2, r3
 800d10a:	4603      	mov	r3, r0
 800d10c:	817b      	strh	r3, [r7, #10]
 800d10e:	460b      	mov	r3, r1
 800d110:	813b      	strh	r3, [r7, #8]
 800d112:	4613      	mov	r3, r2
 800d114:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d116:	88fb      	ldrh	r3, [r7, #6]
 800d118:	b2da      	uxtb	r2, r3
 800d11a:	8979      	ldrh	r1, [r7, #10]
 800d11c:	4b20      	ldr	r3, [pc, #128]	@ (800d1a0 <I2C_RequestMemoryRead+0xa4>)
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	2300      	movs	r3, #0
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f000 fab2 	bl	800d68c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d128:	69fa      	ldr	r2, [r7, #28]
 800d12a:	69b9      	ldr	r1, [r7, #24]
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f000 f8b6 	bl	800d29e <I2C_WaitOnTXISFlagUntilTimeout>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d001      	beq.n	800d13c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d138:	2301      	movs	r3, #1
 800d13a:	e02c      	b.n	800d196 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d13c:	88fb      	ldrh	r3, [r7, #6]
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d105      	bne.n	800d14e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d142:	893b      	ldrh	r3, [r7, #8]
 800d144:	b2da      	uxtb	r2, r3
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	629a      	str	r2, [r3, #40]	@ 0x28
 800d14c:	e015      	b.n	800d17a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d14e:	893b      	ldrh	r3, [r7, #8]
 800d150:	0a1b      	lsrs	r3, r3, #8
 800d152:	b29b      	uxth	r3, r3
 800d154:	b2da      	uxtb	r2, r3
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d15c:	69fa      	ldr	r2, [r7, #28]
 800d15e:	69b9      	ldr	r1, [r7, #24]
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f000 f89c 	bl	800d29e <I2C_WaitOnTXISFlagUntilTimeout>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d001      	beq.n	800d170 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	e012      	b.n	800d196 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d170:	893b      	ldrh	r3, [r7, #8]
 800d172:	b2da      	uxtb	r2, r3
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	2200      	movs	r2, #0
 800d182:	2140      	movs	r1, #64	@ 0x40
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f000 f831 	bl	800d1ec <I2C_WaitOnFlagUntilTimeout>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	e000      	b.n	800d196 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	80002000 	.word	0x80002000

0800d1a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	699b      	ldr	r3, [r3, #24]
 800d1b2:	f003 0302 	and.w	r3, r3, #2
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	d103      	bne.n	800d1c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	f003 0301 	and.w	r3, r3, #1
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d007      	beq.n	800d1e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	699a      	ldr	r2, [r3, #24]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f042 0201 	orr.w	r2, r2, #1
 800d1de:	619a      	str	r2, [r3, #24]
  }
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	603b      	str	r3, [r7, #0]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d1fc:	e03b      	b.n	800d276 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1fe:	69ba      	ldr	r2, [r7, #24]
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f000 f962 	bl	800d4cc <I2C_IsErrorOccurred>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d001      	beq.n	800d212 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800d20e:	2301      	movs	r3, #1
 800d210:	e041      	b.n	800d296 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d218:	d02d      	beq.n	800d276 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d21a:	f7fc ff45 	bl	800a0a8 <HAL_GetTick>
 800d21e:	4602      	mov	r2, r0
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	1ad3      	subs	r3, r2, r3
 800d224:	683a      	ldr	r2, [r7, #0]
 800d226:	429a      	cmp	r2, r3
 800d228:	d302      	bcc.n	800d230 <I2C_WaitOnFlagUntilTimeout+0x44>
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d122      	bne.n	800d276 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	699a      	ldr	r2, [r3, #24]
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	4013      	ands	r3, r2
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	bf0c      	ite	eq
 800d240:	2301      	moveq	r3, #1
 800d242:	2300      	movne	r3, #0
 800d244:	b2db      	uxtb	r3, r3
 800d246:	461a      	mov	r2, r3
 800d248:	79fb      	ldrb	r3, [r7, #7]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d113      	bne.n	800d276 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d252:	f043 0220 	orr.w	r2, r3, #32
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2220      	movs	r2, #32
 800d25e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2200      	movs	r2, #0
 800d266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	e00f      	b.n	800d296 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	699a      	ldr	r2, [r3, #24]
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	4013      	ands	r3, r2
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	429a      	cmp	r2, r3
 800d284:	bf0c      	ite	eq
 800d286:	2301      	moveq	r3, #1
 800d288:	2300      	movne	r3, #0
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	461a      	mov	r2, r3
 800d28e:	79fb      	ldrb	r3, [r7, #7]
 800d290:	429a      	cmp	r2, r3
 800d292:	d0b4      	beq.n	800d1fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3710      	adds	r7, #16
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b084      	sub	sp, #16
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	60b9      	str	r1, [r7, #8]
 800d2a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d2aa:	e033      	b.n	800d314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	68b9      	ldr	r1, [r7, #8]
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f000 f90b 	bl	800d4cc <I2C_IsErrorOccurred>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d001      	beq.n	800d2c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e031      	b.n	800d324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d2c6:	d025      	beq.n	800d314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2c8:	f7fc feee 	bl	800a0a8 <HAL_GetTick>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	68ba      	ldr	r2, [r7, #8]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d302      	bcc.n	800d2de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d11a      	bne.n	800d314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	699b      	ldr	r3, [r3, #24]
 800d2e4:	f003 0302 	and.w	r3, r3, #2
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d013      	beq.n	800d314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2f0:	f043 0220 	orr.w	r2, r3, #32
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2220      	movs	r2, #32
 800d2fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2200      	movs	r2, #0
 800d304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	e007      	b.n	800d324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	699b      	ldr	r3, [r3, #24]
 800d31a:	f003 0302 	and.w	r3, r3, #2
 800d31e:	2b02      	cmp	r3, #2
 800d320:	d1c4      	bne.n	800d2ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d338:	e02f      	b.n	800d39a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	68b9      	ldr	r1, [r7, #8]
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f000 f8c4 	bl	800d4cc <I2C_IsErrorOccurred>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d34a:	2301      	movs	r3, #1
 800d34c:	e02d      	b.n	800d3aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d34e:	f7fc feab 	bl	800a0a8 <HAL_GetTick>
 800d352:	4602      	mov	r2, r0
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	1ad3      	subs	r3, r2, r3
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d302      	bcc.n	800d364 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d11a      	bne.n	800d39a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	699b      	ldr	r3, [r3, #24]
 800d36a:	f003 0320 	and.w	r3, r3, #32
 800d36e:	2b20      	cmp	r3, #32
 800d370:	d013      	beq.n	800d39a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d376:	f043 0220 	orr.w	r2, r3, #32
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2220      	movs	r2, #32
 800d382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2200      	movs	r2, #0
 800d392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	e007      	b.n	800d3aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	f003 0320 	and.w	r3, r3, #32
 800d3a4:	2b20      	cmp	r3, #32
 800d3a6:	d1c8      	bne.n	800d33a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
	...

0800d3b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d3c4:	e071      	b.n	800d4aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	68b9      	ldr	r1, [r7, #8]
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f000 f87e 	bl	800d4cc <I2C_IsErrorOccurred>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d001      	beq.n	800d3da <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	699b      	ldr	r3, [r3, #24]
 800d3e0:	f003 0320 	and.w	r3, r3, #32
 800d3e4:	2b20      	cmp	r3, #32
 800d3e6:	d13b      	bne.n	800d460 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800d3e8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d138      	bne.n	800d460 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	699b      	ldr	r3, [r3, #24]
 800d3f4:	f003 0304 	and.w	r3, r3, #4
 800d3f8:	2b04      	cmp	r3, #4
 800d3fa:	d105      	bne.n	800d408 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800d404:	2300      	movs	r3, #0
 800d406:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	699b      	ldr	r3, [r3, #24]
 800d40e:	f003 0310 	and.w	r3, r3, #16
 800d412:	2b10      	cmp	r3, #16
 800d414:	d121      	bne.n	800d45a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2210      	movs	r2, #16
 800d41c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2204      	movs	r2, #4
 800d422:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2220      	movs	r2, #32
 800d42a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	6859      	ldr	r1, [r3, #4]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	4b24      	ldr	r3, [pc, #144]	@ (800d4c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800d438:	400b      	ands	r3, r1
 800d43a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2220      	movs	r2, #32
 800d440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2200      	movs	r2, #0
 800d448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2200      	movs	r2, #0
 800d450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800d454:	2301      	movs	r3, #1
 800d456:	75fb      	strb	r3, [r7, #23]
 800d458:	e002      	b.n	800d460 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2200      	movs	r2, #0
 800d45e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800d460:	f7fc fe22 	bl	800a0a8 <HAL_GetTick>
 800d464:	4602      	mov	r2, r0
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	1ad3      	subs	r3, r2, r3
 800d46a:	68ba      	ldr	r2, [r7, #8]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d302      	bcc.n	800d476 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d119      	bne.n	800d4aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800d476:	7dfb      	ldrb	r3, [r7, #23]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d116      	bne.n	800d4aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	699b      	ldr	r3, [r3, #24]
 800d482:	f003 0304 	and.w	r3, r3, #4
 800d486:	2b04      	cmp	r3, #4
 800d488:	d00f      	beq.n	800d4aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d48e:	f043 0220 	orr.w	r2, r3, #32
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2220      	movs	r2, #32
 800d49a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	699b      	ldr	r3, [r3, #24]
 800d4b0:	f003 0304 	and.w	r3, r3, #4
 800d4b4:	2b04      	cmp	r3, #4
 800d4b6:	d002      	beq.n	800d4be <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800d4b8:	7dfb      	ldrb	r3, [r7, #23]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d083      	beq.n	800d3c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800d4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3718      	adds	r7, #24
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	fe00e800 	.word	0xfe00e800

0800d4cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b08a      	sub	sp, #40	@ 0x28
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	699b      	ldr	r3, [r3, #24]
 800d4e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d4ee:	69bb      	ldr	r3, [r7, #24]
 800d4f0:	f003 0310 	and.w	r3, r3, #16
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d068      	beq.n	800d5ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2210      	movs	r2, #16
 800d4fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d500:	e049      	b.n	800d596 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d508:	d045      	beq.n	800d596 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d50a:	f7fc fdcd 	bl	800a0a8 <HAL_GetTick>
 800d50e:	4602      	mov	r2, r0
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	1ad3      	subs	r3, r2, r3
 800d514:	68ba      	ldr	r2, [r7, #8]
 800d516:	429a      	cmp	r2, r3
 800d518:	d302      	bcc.n	800d520 <I2C_IsErrorOccurred+0x54>
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d13a      	bne.n	800d596 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d52a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d532:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	699b      	ldr	r3, [r3, #24]
 800d53a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d53e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d542:	d121      	bne.n	800d588 <I2C_IsErrorOccurred+0xbc>
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d54a:	d01d      	beq.n	800d588 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d54c:	7cfb      	ldrb	r3, [r7, #19]
 800d54e:	2b20      	cmp	r3, #32
 800d550:	d01a      	beq.n	800d588 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	685a      	ldr	r2, [r3, #4]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d560:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d562:	f7fc fda1 	bl	800a0a8 <HAL_GetTick>
 800d566:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d568:	e00e      	b.n	800d588 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d56a:	f7fc fd9d 	bl	800a0a8 <HAL_GetTick>
 800d56e:	4602      	mov	r2, r0
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	2b19      	cmp	r3, #25
 800d576:	d907      	bls.n	800d588 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d578:	6a3b      	ldr	r3, [r7, #32]
 800d57a:	f043 0320 	orr.w	r3, r3, #32
 800d57e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800d586:	e006      	b.n	800d596 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	699b      	ldr	r3, [r3, #24]
 800d58e:	f003 0320 	and.w	r3, r3, #32
 800d592:	2b20      	cmp	r3, #32
 800d594:	d1e9      	bne.n	800d56a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	699b      	ldr	r3, [r3, #24]
 800d59c:	f003 0320 	and.w	r3, r3, #32
 800d5a0:	2b20      	cmp	r3, #32
 800d5a2:	d003      	beq.n	800d5ac <I2C_IsErrorOccurred+0xe0>
 800d5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d0aa      	beq.n	800d502 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d103      	bne.n	800d5bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2220      	movs	r2, #32
 800d5ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	f043 0304 	orr.w	r3, r3, #4
 800d5c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	699b      	ldr	r3, [r3, #24]
 800d5d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00b      	beq.n	800d5f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d5dc:	6a3b      	ldr	r3, [r7, #32]
 800d5de:	f043 0301 	orr.w	r3, r3, #1
 800d5e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d5ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00b      	beq.n	800d616 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d5fe:	6a3b      	ldr	r3, [r7, #32]
 800d600:	f043 0308 	orr.w	r3, r3, #8
 800d604:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d60e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00b      	beq.n	800d638 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d620:	6a3b      	ldr	r3, [r7, #32]
 800d622:	f043 0302 	orr.w	r3, r3, #2
 800d626:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d630:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d632:	2301      	movs	r3, #1
 800d634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800d638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d01c      	beq.n	800d67a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7ff fdaf 	bl	800d1a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6859      	ldr	r1, [r3, #4]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	4b0d      	ldr	r3, [pc, #52]	@ (800d688 <I2C_IsErrorOccurred+0x1bc>)
 800d652:	400b      	ands	r3, r1
 800d654:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d65a:	6a3b      	ldr	r3, [r7, #32]
 800d65c:	431a      	orrs	r2, r3
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2220      	movs	r2, #32
 800d666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2200      	movs	r2, #0
 800d676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800d67a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3728      	adds	r7, #40	@ 0x28
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	fe00e800 	.word	0xfe00e800

0800d68c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b087      	sub	sp, #28
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	607b      	str	r3, [r7, #4]
 800d696:	460b      	mov	r3, r1
 800d698:	817b      	strh	r3, [r7, #10]
 800d69a:	4613      	mov	r3, r2
 800d69c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d69e:	897b      	ldrh	r3, [r7, #10]
 800d6a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d6a4:	7a7b      	ldrb	r3, [r7, #9]
 800d6a6:	041b      	lsls	r3, r3, #16
 800d6a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6b2:	6a3b      	ldr	r3, [r7, #32]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d6ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	685a      	ldr	r2, [r3, #4]
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	0d5b      	lsrs	r3, r3, #21
 800d6c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800d6ca:	4b08      	ldr	r3, [pc, #32]	@ (800d6ec <I2C_TransferConfig+0x60>)
 800d6cc:	430b      	orrs	r3, r1
 800d6ce:	43db      	mvns	r3, r3
 800d6d0:	ea02 0103 	and.w	r1, r2, r3
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	697a      	ldr	r2, [r7, #20]
 800d6da:	430a      	orrs	r2, r1
 800d6dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d6de:	bf00      	nop
 800d6e0:	371c      	adds	r7, #28
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	03ff63ff 	.word	0x03ff63ff

0800d6f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d700:	b2db      	uxtb	r3, r3
 800d702:	2b20      	cmp	r3, #32
 800d704:	d138      	bne.n	800d778 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d101      	bne.n	800d714 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d710:	2302      	movs	r3, #2
 800d712:	e032      	b.n	800d77a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2201      	movs	r2, #1
 800d718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2224      	movs	r2, #36	@ 0x24
 800d720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f022 0201 	bic.w	r2, r2, #1
 800d732:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d742:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	6819      	ldr	r1, [r3, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	683a      	ldr	r2, [r7, #0]
 800d750:	430a      	orrs	r2, r1
 800d752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f042 0201 	orr.w	r2, r2, #1
 800d762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2220      	movs	r2, #32
 800d768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d774:	2300      	movs	r3, #0
 800d776:	e000      	b.n	800d77a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d778:	2302      	movs	r3, #2
  }
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	370c      	adds	r7, #12
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr

0800d786 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d786:	b480      	push	{r7}
 800d788:	b085      	sub	sp, #20
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
 800d78e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d796:	b2db      	uxtb	r3, r3
 800d798:	2b20      	cmp	r3, #32
 800d79a:	d139      	bne.n	800d810 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d101      	bne.n	800d7aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d7a6:	2302      	movs	r3, #2
 800d7a8:	e033      	b.n	800d812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2224      	movs	r2, #36	@ 0x24
 800d7b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f022 0201 	bic.w	r2, r2, #1
 800d7c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d7d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	021b      	lsls	r3, r3, #8
 800d7de:	68fa      	ldr	r2, [r7, #12]
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f042 0201 	orr.w	r2, r2, #1
 800d7fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2220      	movs	r2, #32
 800d800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	e000      	b.n	800d812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d810:	2302      	movs	r3, #2
  }
}
 800d812:	4618      	mov	r0, r3
 800d814:	3714      	adds	r7, #20
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
	...

0800d820 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800d828:	2300      	movs	r3, #0
 800d82a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d01e      	beq.n	800d870 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800d832:	4b13      	ldr	r3, [pc, #76]	@ (800d880 <HAL_IPCC_Init+0x60>)
 800d834:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d102      	bne.n	800d848 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7f5 f888 	bl	8002958 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800d848:	68b8      	ldr	r0, [r7, #8]
 800d84a:	f000 f8f5 	bl	800da38 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f8c6 	bl	800d9ec <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2200      	movs	r2, #0
 800d864:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2201      	movs	r2, #1
 800d86a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800d86e:	e001      	b.n	800d874 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800d870:	2301      	movs	r3, #1
 800d872:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800d874:	7bfb      	ldrb	r3, [r7, #15]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	58000c00 	.word	0x58000c00

0800d884 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b086      	sub	sp, #24
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800d88c:	2300      	movs	r3, #0
 800d88e:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800d890:	4b22      	ldr	r3, [pc, #136]	@ (800d91c <HAL_IPCC_TX_IRQHandler+0x98>)
 800d892:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	43db      	mvns	r3, r3
 800d89a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800d89e:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	041b      	lsls	r3, r3, #16
 800d8a6:	43db      	mvns	r3, r3
 800d8a8:	697a      	ldr	r2, [r7, #20]
 800d8aa:	4013      	ands	r3, r2
 800d8ac:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800d8ae:	e02c      	b.n	800d90a <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	f003 030f 	and.w	r3, r3, #15
 800d8b6:	3310      	adds	r3, #16
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d8be:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d01c      	beq.n	800d904 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	685a      	ldr	r2, [r3, #4]
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	431a      	orrs	r2, r3
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	3306      	adds	r3, #6
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	4413      	add	r3, r2
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d009      	beq.n	800d8fa <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	3306      	adds	r3, #6
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	4413      	add	r3, r2
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	6939      	ldr	r1, [r7, #16]
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	43db      	mvns	r3, r3
 800d8fe:	697a      	ldr	r2, [r7, #20]
 800d900:	4013      	ands	r3, r2
 800d902:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	3301      	adds	r3, #1
 800d908:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1cf      	bne.n	800d8b0 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 800d910:	bf00      	nop
 800d912:	bf00      	nop
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	58000c00 	.word	0x58000c00

0800d920 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b088      	sub	sp, #32
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800d928:	2300      	movs	r3, #0
 800d92a:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800d92c:	4b20      	ldr	r3, [pc, #128]	@ (800d9b0 <HAL_IPCC_RX_IRQHandler+0x90>)
 800d92e:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 800d930:	4b20      	ldr	r3, [pc, #128]	@ (800d9b4 <HAL_IPCC_RX_IRQHandler+0x94>)
 800d932:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	43db      	mvns	r3, r3
 800d93a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d93e:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	69fa      	ldr	r2, [r7, #28]
 800d946:	4013      	ands	r3, r2
 800d948:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800d94a:	e029      	b.n	800d9a0 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	f003 030f 	and.w	r3, r3, #15
 800d952:	2201      	movs	r2, #1
 800d954:	fa02 f303 	lsl.w	r3, r2, r3
 800d958:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 800d95a:	69fa      	ldr	r2, [r7, #28]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	4013      	ands	r3, r2
 800d960:	2b00      	cmp	r3, #0
 800d962:	d01a      	beq.n	800d99a <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	685a      	ldr	r2, [r3, #4]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	431a      	orrs	r2, r3
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4413      	add	r3, r2
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d008      	beq.n	800d990 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	2201      	movs	r2, #1
 800d98a:	69b9      	ldr	r1, [r7, #24]
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	43db      	mvns	r3, r3
 800d994:	69fa      	ldr	r2, [r7, #28]
 800d996:	4013      	ands	r3, r2
 800d998:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	3301      	adds	r3, #1
 800d99e:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d1d2      	bne.n	800d94c <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 800d9a6:	bf00      	nop
 800d9a8:	bf00      	nop
 800d9aa:	3720      	adds	r7, #32
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	58000c00 	.word	0x58000c00
 800d9b4:	58000c10 	.word	0x58000c10

0800d9b8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800d9c6:	bf00      	nop
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr

0800d9d2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800d9d2:	b480      	push	{r7}
 800d9d4:	b085      	sub	sp, #20
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	60f8      	str	r0, [r7, #12]
 800d9da:	60b9      	str	r1, [r7, #8]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800d9e0:	bf00      	nop
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b085      	sub	sp, #20
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	60fb      	str	r3, [r7, #12]
 800d9f8:	e00f      	b.n	800da1a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	4413      	add	r3, r2
 800da02:	4a0b      	ldr	r2, [pc, #44]	@ (800da30 <IPCC_SetDefaultCallbacks+0x44>)
 800da04:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	3306      	adds	r3, #6
 800da0c:	009b      	lsls	r3, r3, #2
 800da0e:	4413      	add	r3, r2
 800da10:	4a08      	ldr	r2, [pc, #32]	@ (800da34 <IPCC_SetDefaultCallbacks+0x48>)
 800da12:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	3301      	adds	r3, #1
 800da18:	60fb      	str	r3, [r7, #12]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2b05      	cmp	r3, #5
 800da1e:	d9ec      	bls.n	800d9fa <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800da20:	bf00      	nop
 800da22:	bf00      	nop
 800da24:	3714      	adds	r7, #20
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	0800d9b9 	.word	0x0800d9b9
 800da34:	0800d9d3 	.word	0x0800d9d3

0800da38 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800da4c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	223f      	movs	r2, #63	@ 0x3f
 800da52:	609a      	str	r2, [r3, #8]
}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800da68:	4b06      	ldr	r3, [pc, #24]	@ (800da84 <LL_EXTI_EnableIT_0_31+0x24>)
 800da6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800da6e:	4905      	ldr	r1, [pc, #20]	@ (800da84 <LL_EXTI_EnableIT_0_31+0x24>)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4313      	orrs	r3, r2
 800da74:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	58000800 	.word	0x58000800

0800da88 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800da90:	4b07      	ldr	r3, [pc, #28]	@ (800dab0 <LL_EXTI_DisableIT_0_31+0x28>)
 800da92:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	43db      	mvns	r3, r3
 800da9a:	4905      	ldr	r1, [pc, #20]	@ (800dab0 <LL_EXTI_DisableIT_0_31+0x28>)
 800da9c:	4013      	ands	r3, r2
 800da9e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800daa2:	bf00      	nop
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	58000800 	.word	0x58000800

0800dab4 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 800dabc:	4b07      	ldr	r3, [pc, #28]	@ (800dadc <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800dabe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	43db      	mvns	r3, r3
 800dac6:	4905      	ldr	r1, [pc, #20]	@ (800dadc <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800dac8:	4013      	ands	r3, r2
 800daca:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
}
 800dace:	bf00      	nop
 800dad0:	370c      	adds	r7, #12
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	58000800 	.word	0x58000800

0800dae0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800dae8:	4b05      	ldr	r3, [pc, #20]	@ (800db00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	4904      	ldr	r1, [pc, #16]	@ (800db00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	600b      	str	r3, [r1, #0]

}
 800daf4:	bf00      	nop
 800daf6:	370c      	adds	r7, #12
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr
 800db00:	58000800 	.word	0x58000800

0800db04 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800db0c:	4b06      	ldr	r3, [pc, #24]	@ (800db28 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	43db      	mvns	r3, r3
 800db14:	4904      	ldr	r1, [pc, #16]	@ (800db28 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800db16:	4013      	ands	r3, r2
 800db18:	600b      	str	r3, [r1, #0]

}
 800db1a:	bf00      	nop
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	58000800 	.word	0x58000800

0800db2c <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800db34:	4b05      	ldr	r3, [pc, #20]	@ (800db4c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800db36:	685a      	ldr	r2, [r3, #4]
 800db38:	4904      	ldr	r1, [pc, #16]	@ (800db4c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	604b      	str	r3, [r1, #4]
}
 800db40:	bf00      	nop
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr
 800db4c:	58000800 	.word	0x58000800

0800db50 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800db58:	4b06      	ldr	r3, [pc, #24]	@ (800db74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800db5a:	685a      	ldr	r2, [r3, #4]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	43db      	mvns	r3, r3
 800db60:	4904      	ldr	r1, [pc, #16]	@ (800db74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800db62:	4013      	ands	r3, r2
 800db64:	604b      	str	r3, [r1, #4]
}
 800db66:	bf00      	nop
 800db68:	370c      	adds	r7, #12
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	58000800 	.word	0x58000800

0800db78 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800db78:	b480      	push	{r7}
 800db7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800db7c:	4b05      	ldr	r3, [pc, #20]	@ (800db94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a04      	ldr	r2, [pc, #16]	@ (800db94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800db82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db86:	6013      	str	r3, [r2, #0]
}
 800db88:	bf00      	nop
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr
 800db92:	bf00      	nop
 800db94:	58000400 	.word	0x58000400

0800db98 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800dba0:	4b1d      	ldr	r3, [pc, #116]	@ (800dc18 <HAL_PWR_ConfigPVD+0x80>)
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	f023 020e 	bic.w	r2, r3, #14
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	491a      	ldr	r1, [pc, #104]	@ (800dc18 <HAL_PWR_ConfigPVD+0x80>)
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 800dbb2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800dbb6:	f7ff ff67 	bl	800da88 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 800dbba:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800dbbe:	f7ff ff79 	bl	800dab4 <LL_C2_EXTI_DisableIT_0_31>

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800dbc2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800dbc6:	f7ff ffc3 	bl	800db50 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800dbca:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800dbce:	f7ff ff99 	bl	800db04 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d003      	beq.n	800dbe6 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800dbde:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800dbe2:	f7ff ff3d 	bl	800da60 <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d003      	beq.n	800dbfa <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800dbf2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800dbf6:	f7ff ff73 	bl	800dae0 <LL_EXTI_EnableRisingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	f003 0302 	and.w	r3, r3, #2
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d003      	beq.n	800dc0e <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800dc06:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800dc0a:	f7ff ff8f 	bl	800db2c <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800dc0e:	2300      	movs	r3, #0
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	58000400 	.word	0x58000400

0800dc1c <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800dc20:	4b05      	ldr	r3, [pc, #20]	@ (800dc38 <HAL_PWR_EnablePVD+0x1c>)
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	4a04      	ldr	r2, [pc, #16]	@ (800dc38 <HAL_PWR_EnablePVD+0x1c>)
 800dc26:	f043 0301 	orr.w	r3, r3, #1
 800dc2a:	6053      	str	r3, [r2, #4]
}
 800dc2c:	bf00      	nop
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	58000400 	.word	0x58000400

0800dc3c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 800dc44:	4b0c      	ldr	r3, [pc, #48]	@ (800dc78 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800dc46:	68da      	ldr	r2, [r3, #12]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f003 031f 	and.w	r3, r3, #31
 800dc4e:	43db      	mvns	r3, r3
 800dc50:	401a      	ands	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	095b      	lsrs	r3, r3, #5
 800dc56:	4908      	ldr	r1, [pc, #32]	@ (800dc78 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800dc5c:	4b06      	ldr	r3, [pc, #24]	@ (800dc78 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800dc5e:	689a      	ldr	r2, [r3, #8]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f003 031f 	and.w	r3, r3, #31
 800dc66:	4904      	ldr	r1, [pc, #16]	@ (800dc78 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	608b      	str	r3, [r1, #8]
}
 800dc6c:	bf00      	nop
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr
 800dc78:	58000400 	.word	0x58000400

0800dc7c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN4: An event on PA2   PIN wakes-up the system from Standby mode.
  *           @arg PWR_WAKEUP_PIN5: An event on PC5   PIN wakes-up the system from Standby mode.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 800dc84:	4b07      	ldr	r3, [pc, #28]	@ (800dca4 <HAL_PWR_DisableWakeUpPin+0x28>)
 800dc86:	689a      	ldr	r2, [r3, #8]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f003 031f 	and.w	r3, r3, #31
 800dc8e:	43db      	mvns	r3, r3
 800dc90:	4904      	ldr	r1, [pc, #16]	@ (800dca4 <HAL_PWR_DisableWakeUpPin+0x28>)
 800dc92:	4013      	ands	r3, r2
 800dc94:	608b      	str	r3, [r1, #8]
}
 800dc96:	bf00      	nop
 800dc98:	370c      	adds	r7, #12
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop
 800dca4:	58000400 	.word	0x58000400

0800dca8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800dcac:	4b04      	ldr	r3, [pc, #16]	@ (800dcc0 <HAL_PWREx_GetVoltageRange+0x18>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	58000400 	.word	0x58000400

0800dcc4 <HAL_PWREx_EnableFlashPowerDown>:
  *           @arg @ref PWR_FLASHPD_LPRUN
  *           @arg @ref PWR_FLASHPD_LPSLEEP
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(uint32_t PowerMode)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_FLASH_POWERDOWN(PowerMode));

  if ((PowerMode & PWR_FLASHPD_LPRUN) != 0U)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f003 0310 	and.w	r3, r3, #16
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d003      	beq.n	800dcde <HAL_PWREx_EnableFlashPowerDown+0x1a>
  {
    /* Unlock bit FPDR */
    WRITE_REG(PWR->CR1, 0x0000C1B0UL);
 800dcd6:	4b08      	ldr	r3, [pc, #32]	@ (800dcf8 <HAL_PWREx_EnableFlashPowerDown+0x34>)
 800dcd8:	f24c 12b0 	movw	r2, #49584	@ 0xc1b0
 800dcdc:	601a      	str	r2, [r3, #0]
  }

  /* Set flash power down mode */
  SET_BIT(PWR->CR1, PowerMode);
 800dcde:	4b06      	ldr	r3, [pc, #24]	@ (800dcf8 <HAL_PWREx_EnableFlashPowerDown+0x34>)
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	4905      	ldr	r1, [pc, #20]	@ (800dcf8 <HAL_PWREx_EnableFlashPowerDown+0x34>)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	600b      	str	r3, [r1, #0]
}
 800dcea:	bf00      	nop
 800dcec:	370c      	adds	r7, #12
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	58000400 	.word	0x58000400

0800dcfc <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	4603      	mov	r3, r0
 800dd04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800dd06:	4b11      	ldr	r3, [pc, #68]	@ (800dd4c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f023 0307 	bic.w	r3, r3, #7
 800dd0e:	4a0f      	ldr	r2, [pc, #60]	@ (800dd4c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800dd10:	f043 0302 	orr.w	r3, r3, #2
 800dd14:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800dd16:	4b0e      	ldr	r3, [pc, #56]	@ (800dd50 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800dd18:	691b      	ldr	r3, [r3, #16]
 800dd1a:	4a0d      	ldr	r2, [pc, #52]	@ (800dd50 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800dd1c:	f043 0304 	orr.w	r3, r3, #4
 800dd20:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800dd22:	79fb      	ldrb	r3, [r7, #7]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d101      	bne.n	800dd2c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800dd28:	bf30      	wfi
 800dd2a:	e002      	b.n	800dd32 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800dd2c:	bf40      	sev
    __WFE();
 800dd2e:	bf20      	wfe
    __WFE();
 800dd30:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800dd32:	4b07      	ldr	r3, [pc, #28]	@ (800dd50 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800dd34:	691b      	ldr	r3, [r3, #16]
 800dd36:	4a06      	ldr	r2, [pc, #24]	@ (800dd50 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800dd38:	f023 0304 	bic.w	r3, r3, #4
 800dd3c:	6113      	str	r3, [r2, #16]
}
 800dd3e:	bf00      	nop
 800dd40:	370c      	adds	r7, #12
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop
 800dd4c:	58000400 	.word	0x58000400
 800dd50:	e000ed00 	.word	0xe000ed00

0800dd54 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800dd54:	b480      	push	{r7}
 800dd56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800dd58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dd62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd66:	d101      	bne.n	800dd6c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e000      	b.n	800dd6e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <LL_RCC_HSE_Enable>:
{
 800dd78:	b480      	push	{r7}
 800dd7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800dd7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dd86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd8a:	6013      	str	r3, [r2, #0]
}
 800dd8c:	bf00      	nop
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr

0800dd96 <LL_RCC_HSE_Disable>:
{
 800dd96:	b480      	push	{r7}
 800dd98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800dd9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dda4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dda8:	6013      	str	r3, [r2, #0]
}
 800ddaa:	bf00      	nop
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr

0800ddb4 <LL_RCC_HSE_IsReady>:
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ddb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ddc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ddc6:	d101      	bne.n	800ddcc <LL_RCC_HSE_IsReady+0x18>
 800ddc8:	2301      	movs	r3, #1
 800ddca:	e000      	b.n	800ddce <LL_RCC_HSE_IsReady+0x1a>
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <LL_RCC_HSI_Enable>:
{
 800ddd8:	b480      	push	{r7}
 800ddda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800dddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dde6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ddea:	6013      	str	r3, [r2, #0]
}
 800ddec:	bf00      	nop
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr

0800ddf6 <LL_RCC_HSI_Disable>:
{
 800ddf6:	b480      	push	{r7}
 800ddf8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800ddfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800de04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de08:	6013      	str	r3, [r2, #0]
}
 800de0a:	bf00      	nop
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <LL_RCC_HSI_IsReady>:
{
 800de14:	b480      	push	{r7}
 800de16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800de18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de26:	d101      	bne.n	800de2c <LL_RCC_HSI_IsReady+0x18>
 800de28:	2301      	movs	r3, #1
 800de2a:	e000      	b.n	800de2e <LL_RCC_HSI_IsReady+0x1a>
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr

0800de38 <LL_RCC_HSI_SetCalibTrimming>:
{
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800de40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	061b      	lsls	r3, r3, #24
 800de4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800de52:	4313      	orrs	r3, r2
 800de54:	604b      	str	r3, [r1, #4]
}
 800de56:	bf00      	nop
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr

0800de62 <LL_RCC_HSI48_Enable>:
{
 800de62:	b480      	push	{r7}
 800de64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800de66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800de6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800de72:	f043 0301 	orr.w	r3, r3, #1
 800de76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800de7a:	bf00      	nop
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <LL_RCC_HSI48_Disable>:
{
 800de84:	b480      	push	{r7}
 800de86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800de88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800de90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800de94:	f023 0301 	bic.w	r3, r3, #1
 800de98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800de9c:	bf00      	nop
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <LL_RCC_HSI48_IsReady>:
{
 800dea6:	b480      	push	{r7}
 800dea8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800deaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800deae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800deb2:	f003 0302 	and.w	r3, r3, #2
 800deb6:	2b02      	cmp	r3, #2
 800deb8:	d101      	bne.n	800debe <LL_RCC_HSI48_IsReady+0x18>
 800deba:	2301      	movs	r3, #1
 800debc:	e000      	b.n	800dec0 <LL_RCC_HSI48_IsReady+0x1a>
 800debe:	2300      	movs	r3, #0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr

0800deca <LL_RCC_LSE_Enable>:
{
 800deca:	b480      	push	{r7}
 800decc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800dece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ded2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ded6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800deda:	f043 0301 	orr.w	r3, r3, #1
 800dede:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800dee2:	bf00      	nop
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <LL_RCC_LSE_Disable>:
{
 800deec:	b480      	push	{r7}
 800deee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800def0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800def4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800def8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800defc:	f023 0301 	bic.w	r3, r3, #1
 800df00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800df04:	bf00      	nop
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr

0800df0e <LL_RCC_LSE_EnableBypass>:
{
 800df0e:	b480      	push	{r7}
 800df10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800df12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800df1e:	f043 0304 	orr.w	r3, r3, #4
 800df22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800df26:	bf00      	nop
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <LL_RCC_LSE_DisableBypass>:
{
 800df30:	b480      	push	{r7}
 800df32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800df34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800df40:	f023 0304 	bic.w	r3, r3, #4
 800df44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800df48:	bf00      	nop
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr

0800df52 <LL_RCC_LSE_IsReady>:
{
 800df52:	b480      	push	{r7}
 800df54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800df56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df5e:	f003 0302 	and.w	r3, r3, #2
 800df62:	2b02      	cmp	r3, #2
 800df64:	d101      	bne.n	800df6a <LL_RCC_LSE_IsReady+0x18>
 800df66:	2301      	movs	r3, #1
 800df68:	e000      	b.n	800df6c <LL_RCC_LSE_IsReady+0x1a>
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <LL_RCC_LSI1_Enable>:
{
 800df76:	b480      	push	{r7}
 800df78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800df7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800df82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800df86:	f043 0301 	orr.w	r3, r3, #1
 800df8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800df8e:	bf00      	nop
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <LL_RCC_LSI1_Disable>:
{
 800df98:	b480      	push	{r7}
 800df9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800df9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dfa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dfa8:	f023 0301 	bic.w	r3, r3, #1
 800dfac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800dfb0:	bf00      	nop
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr

0800dfba <LL_RCC_LSI1_IsReady>:
{
 800dfba:	b480      	push	{r7}
 800dfbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800dfbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dfc6:	f003 0302 	and.w	r3, r3, #2
 800dfca:	2b02      	cmp	r3, #2
 800dfcc:	d101      	bne.n	800dfd2 <LL_RCC_LSI1_IsReady+0x18>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e000      	b.n	800dfd4 <LL_RCC_LSI1_IsReady+0x1a>
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr

0800dfde <LL_RCC_LSI2_Enable>:
{
 800dfde:	b480      	push	{r7}
 800dfe0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800dfe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dfea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dfee:	f043 0304 	orr.w	r3, r3, #4
 800dff2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800dff6:	bf00      	nop
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <LL_RCC_LSI2_Disable>:
{
 800e000:	b480      	push	{r7}
 800e002:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e00c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e010:	f023 0304 	bic.w	r3, r3, #4
 800e014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e018:	bf00      	nop
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr

0800e022 <LL_RCC_LSI2_IsReady>:
{
 800e022:	b480      	push	{r7}
 800e024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e02a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e02e:	f003 0308 	and.w	r3, r3, #8
 800e032:	2b08      	cmp	r3, #8
 800e034:	d101      	bne.n	800e03a <LL_RCC_LSI2_IsReady+0x18>
 800e036:	2301      	movs	r3, #1
 800e038:	e000      	b.n	800e03c <LL_RCC_LSI2_IsReady+0x1a>
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr

0800e046 <LL_RCC_LSI2_SetTrimming>:
{
 800e046:	b480      	push	{r7}
 800e048:	b083      	sub	sp, #12
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800e04e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e056:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	021b      	lsls	r3, r3, #8
 800e05e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e062:	4313      	orrs	r3, r2
 800e064:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <LL_RCC_MSI_Enable>:
{
 800e074:	b480      	push	{r7}
 800e076:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800e078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e082:	f043 0301 	orr.w	r3, r3, #1
 800e086:	6013      	str	r3, [r2, #0]
}
 800e088:	bf00      	nop
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <LL_RCC_MSI_Disable>:
{
 800e092:	b480      	push	{r7}
 800e094:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800e096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e0a0:	f023 0301 	bic.w	r3, r3, #1
 800e0a4:	6013      	str	r3, [r2, #0]
}
 800e0a6:	bf00      	nop
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <LL_RCC_MSI_IsReady>:
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e0b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f003 0302 	and.w	r3, r3, #2
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	d101      	bne.n	800e0c6 <LL_RCC_MSI_IsReady+0x16>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e000      	b.n	800e0c8 <LL_RCC_MSI_IsReady+0x18>
 800e0c6:	2300      	movs	r3, #0
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr

0800e0d2 <LL_RCC_MSI_SetRange>:
{
 800e0d2:	b480      	push	{r7}
 800e0d4:	b083      	sub	sp, #12
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800e0da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e0e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	600b      	str	r3, [r1, #0]
}
 800e0ee:	bf00      	nop
 800e0f0:	370c      	adds	r7, #12
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr

0800e0fa <LL_RCC_MSI_GetRange>:
{
 800e0fa:	b480      	push	{r7}
 800e0fc:	b083      	sub	sp, #12
 800e0fe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800e100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e10a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2bb0      	cmp	r3, #176	@ 0xb0
 800e110:	d901      	bls.n	800e116 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800e112:	23b0      	movs	r3, #176	@ 0xb0
 800e114:	607b      	str	r3, [r7, #4]
  return msiRange;
 800e116:	687b      	ldr	r3, [r7, #4]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <LL_RCC_MSI_SetCalibTrimming>:
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800e12c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	021b      	lsls	r3, r3, #8
 800e13a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e13e:	4313      	orrs	r3, r2
 800e140:	604b      	str	r3, [r1, #4]
}
 800e142:	bf00      	nop
 800e144:	370c      	adds	r7, #12
 800e146:	46bd      	mov	sp, r7
 800e148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14c:	4770      	bx	lr

0800e14e <LL_RCC_SetSysClkSource>:
{
 800e14e:	b480      	push	{r7}
 800e150:	b083      	sub	sp, #12
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800e156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	f023 0203 	bic.w	r2, r3, #3
 800e160:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4313      	orrs	r3, r2
 800e168:	608b      	str	r3, [r1, #8]
}
 800e16a:	bf00      	nop
 800e16c:	370c      	adds	r7, #12
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr

0800e176 <LL_RCC_GetSysClkSource>:
{
 800e176:	b480      	push	{r7}
 800e178:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e17a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e17e:	689b      	ldr	r3, [r3, #8]
 800e180:	f003 030c 	and.w	r3, r3, #12
}
 800e184:	4618      	mov	r0, r3
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr

0800e18e <LL_RCC_SetAHBPrescaler>:
{
 800e18e:	b480      	push	{r7}
 800e190:	b083      	sub	sp, #12
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800e196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e1a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	608b      	str	r3, [r1, #8]
}
 800e1aa:	bf00      	nop
 800e1ac:	370c      	adds	r7, #12
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr

0800e1b6 <LL_C2_RCC_SetAHBPrescaler>:
{
 800e1b6:	b480      	push	{r7}
 800e1b8:	b083      	sub	sp, #12
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800e1be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e1c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e1c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e1ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e1d6:	bf00      	nop
 800e1d8:	370c      	adds	r7, #12
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr

0800e1e2 <LL_RCC_SetAHB4Prescaler>:
{
 800e1e2:	b480      	push	{r7}
 800e1e4:	b083      	sub	sp, #12
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800e1ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e1ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e1f2:	f023 020f 	bic.w	r2, r3, #15
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	091b      	lsrs	r3, r3, #4
 800e1fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e1fe:	4313      	orrs	r3, r2
 800e200:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e204:	bf00      	nop
 800e206:	370c      	adds	r7, #12
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <LL_RCC_SetAPB1Prescaler>:
{
 800e210:	b480      	push	{r7}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800e218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e21c:	689b      	ldr	r3, [r3, #8]
 800e21e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e222:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4313      	orrs	r3, r2
 800e22a:	608b      	str	r3, [r1, #8]
}
 800e22c:	bf00      	nop
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <LL_RCC_SetAPB2Prescaler>:
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800e240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e24a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	4313      	orrs	r3, r2
 800e252:	608b      	str	r3, [r1, #8]
}
 800e254:	bf00      	nop
 800e256:	370c      	adds	r7, #12
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <LL_RCC_GetAHBPrescaler>:
{
 800e260:	b480      	push	{r7}
 800e262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <LL_RCC_GetAHB4Prescaler>:
{
 800e278:	b480      	push	{r7}
 800e27a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800e27c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e280:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e284:	011b      	lsls	r3, r3, #4
 800e286:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <LL_RCC_GetAPB1Prescaler>:
{
 800e294:	b480      	push	{r7}
 800e296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800e298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e29c:	689b      	ldr	r3, [r3, #8]
 800e29e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <LL_RCC_GetAPB2Prescaler>:
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800e2b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800e2c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e2d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e2d6:	6013      	str	r3, [r2, #0]
}
 800e2d8:	bf00      	nop
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr

0800e2e2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800e2e2:	b480      	push	{r7}
 800e2e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800e2e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e2f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e2f4:	6013      	str	r3, [r2, #0]
}
 800e2f6:	bf00      	nop
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800e300:	b480      	push	{r7}
 800e302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800e304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e30e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e312:	d101      	bne.n	800e318 <LL_RCC_PLL_IsReady+0x18>
 800e314:	2301      	movs	r3, #1
 800e316:	e000      	b.n	800e31a <LL_RCC_PLL_IsReady+0x1a>
 800e318:	2300      	movs	r3, #0
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e324:	b480      	push	{r7}
 800e326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	0a1b      	lsrs	r3, r3, #8
 800e330:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800e334:	4618      	mov	r0, r3
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr

0800e33e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e33e:	b480      	push	{r7}
 800e340:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr

0800e356 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e356:	b480      	push	{r7}
 800e358:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e35a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800e364:	4618      	mov	r0, r3
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr

0800e36e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e36e:	b480      	push	{r7}
 800e370:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	f003 0303 	and.w	r3, r3, #3
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	46bd      	mov	sp, r7
 800e380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e384:	4770      	bx	lr

0800e386 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800e386:	b480      	push	{r7}
 800e388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800e38a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e38e:	689b      	ldr	r3, [r3, #8]
 800e390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e398:	d101      	bne.n	800e39e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800e39a:	2301      	movs	r3, #1
 800e39c:	e000      	b.n	800e3a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr

0800e3aa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800e3aa:	b480      	push	{r7}
 800e3ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800e3ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e3b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e3be:	d101      	bne.n	800e3c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e000      	b.n	800e3c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800e3c4:	2300      	movs	r3, #0
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800e3d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e3dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e3e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3e4:	d101      	bne.n	800e3ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e000      	b.n	800e3ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr

0800e3f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800e3f6:	b480      	push	{r7}
 800e3f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800e3fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3fe:	689b      	ldr	r3, [r3, #8]
 800e400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e408:	d101      	bne.n	800e40e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800e40a:	2301      	movs	r3, #1
 800e40c:	e000      	b.n	800e410 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800e40e:	2300      	movs	r3, #0
}
 800e410:	4618      	mov	r0, r3
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800e41a:	b480      	push	{r7}
 800e41c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800e41e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e428:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e42c:	d101      	bne.n	800e432 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800e42e:	2301      	movs	r3, #1
 800e430:	e000      	b.n	800e434 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800e432:	2300      	movs	r3, #0
}
 800e434:	4618      	mov	r0, r3
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr
	...

0800e440 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e440:	b590      	push	{r4, r7, lr}
 800e442:	b08d      	sub	sp, #52	@ 0x34
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d101      	bne.n	800e452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e44e:	2301      	movs	r3, #1
 800e450:	e363      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f003 0320 	and.w	r3, r3, #32
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f000 808d 	beq.w	800e57a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e460:	f7ff fe89 	bl	800e176 <LL_RCC_GetSysClkSource>
 800e464:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e466:	f7ff ff82 	bl	800e36e <LL_RCC_PLL_GetMainSource>
 800e46a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800e46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d005      	beq.n	800e47e <HAL_RCC_OscConfig+0x3e>
 800e472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e474:	2b0c      	cmp	r3, #12
 800e476:	d147      	bne.n	800e508 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800e478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d144      	bne.n	800e508 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	69db      	ldr	r3, [r3, #28]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e347      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e48e:	f7ff fe34 	bl	800e0fa <LL_RCC_MSI_GetRange>
 800e492:	4603      	mov	r3, r0
 800e494:	429c      	cmp	r4, r3
 800e496:	d914      	bls.n	800e4c2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e49c:	4618      	mov	r0, r3
 800e49e:	f000 fd2f 	bl	800ef00 <RCC_SetFlashLatencyFromMSIRange>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d001      	beq.n	800e4ac <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	e336      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7ff fe0e 	bl	800e0d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6a1b      	ldr	r3, [r3, #32]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7ff fe32 	bl	800e124 <LL_RCC_MSI_SetCalibTrimming>
 800e4c0:	e013      	b.n	800e4ea <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7ff fe03 	bl	800e0d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6a1b      	ldr	r3, [r3, #32]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7ff fe27 	bl	800e124 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f000 fd10 	bl	800ef00 <RCC_SetFlashLatencyFromMSIRange>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d001      	beq.n	800e4ea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	e317      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e4ea:	f000 fcc9 	bl	800ee80 <HAL_RCC_GetHCLKFreq>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	4aa4      	ldr	r2, [pc, #656]	@ (800e784 <HAL_RCC_OscConfig+0x344>)
 800e4f2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e4f4:	4ba4      	ldr	r3, [pc, #656]	@ (800e788 <HAL_RCC_OscConfig+0x348>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fb fd87 	bl	800a00c <HAL_InitTick>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d039      	beq.n	800e578 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800e504:	2301      	movs	r3, #1
 800e506:	e308      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	69db      	ldr	r3, [r3, #28]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d01e      	beq.n	800e54e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e510:	f7ff fdb0 	bl	800e074 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e514:	f7fb fdc8 	bl	800a0a8 <HAL_GetTick>
 800e518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800e51a:	e008      	b.n	800e52e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e51c:	f7fb fdc4 	bl	800a0a8 <HAL_GetTick>
 800e520:	4602      	mov	r2, r0
 800e522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e524:	1ad3      	subs	r3, r2, r3
 800e526:	2b02      	cmp	r3, #2
 800e528:	d901      	bls.n	800e52e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e52a:	2303      	movs	r3, #3
 800e52c:	e2f5      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800e52e:	f7ff fdbf 	bl	800e0b0 <LL_RCC_MSI_IsReady>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d0f1      	beq.n	800e51c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7ff fdc8 	bl	800e0d2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6a1b      	ldr	r3, [r3, #32]
 800e546:	4618      	mov	r0, r3
 800e548:	f7ff fdec 	bl	800e124 <LL_RCC_MSI_SetCalibTrimming>
 800e54c:	e015      	b.n	800e57a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e54e:	f7ff fda0 	bl	800e092 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e552:	f7fb fda9 	bl	800a0a8 <HAL_GetTick>
 800e556:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800e558:	e008      	b.n	800e56c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e55a:	f7fb fda5 	bl	800a0a8 <HAL_GetTick>
 800e55e:	4602      	mov	r2, r0
 800e560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e562:	1ad3      	subs	r3, r2, r3
 800e564:	2b02      	cmp	r3, #2
 800e566:	d901      	bls.n	800e56c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800e568:	2303      	movs	r3, #3
 800e56a:	e2d6      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800e56c:	f7ff fda0 	bl	800e0b0 <LL_RCC_MSI_IsReady>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d1f1      	bne.n	800e55a <HAL_RCC_OscConfig+0x11a>
 800e576:	e000      	b.n	800e57a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e578:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f003 0301 	and.w	r3, r3, #1
 800e582:	2b00      	cmp	r3, #0
 800e584:	d047      	beq.n	800e616 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e586:	f7ff fdf6 	bl	800e176 <LL_RCC_GetSysClkSource>
 800e58a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e58c:	f7ff feef 	bl	800e36e <LL_RCC_PLL_GetMainSource>
 800e590:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800e592:	6a3b      	ldr	r3, [r7, #32]
 800e594:	2b08      	cmp	r3, #8
 800e596:	d005      	beq.n	800e5a4 <HAL_RCC_OscConfig+0x164>
 800e598:	6a3b      	ldr	r3, [r7, #32]
 800e59a:	2b0c      	cmp	r3, #12
 800e59c:	d108      	bne.n	800e5b0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800e59e:	69fb      	ldr	r3, [r7, #28]
 800e5a0:	2b03      	cmp	r3, #3
 800e5a2:	d105      	bne.n	800e5b0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d134      	bne.n	800e616 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	e2b4      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5b8:	d102      	bne.n	800e5c0 <HAL_RCC_OscConfig+0x180>
 800e5ba:	f7ff fbdd 	bl	800dd78 <LL_RCC_HSE_Enable>
 800e5be:	e001      	b.n	800e5c4 <HAL_RCC_OscConfig+0x184>
 800e5c0:	f7ff fbe9 	bl	800dd96 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d012      	beq.n	800e5f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5cc:	f7fb fd6c 	bl	800a0a8 <HAL_GetTick>
 800e5d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800e5d2:	e008      	b.n	800e5e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e5d4:	f7fb fd68 	bl	800a0a8 <HAL_GetTick>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5dc:	1ad3      	subs	r3, r2, r3
 800e5de:	2b64      	cmp	r3, #100	@ 0x64
 800e5e0:	d901      	bls.n	800e5e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800e5e2:	2303      	movs	r3, #3
 800e5e4:	e299      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800e5e6:	f7ff fbe5 	bl	800ddb4 <LL_RCC_HSE_IsReady>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d0f1      	beq.n	800e5d4 <HAL_RCC_OscConfig+0x194>
 800e5f0:	e011      	b.n	800e616 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5f2:	f7fb fd59 	bl	800a0a8 <HAL_GetTick>
 800e5f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800e5f8:	e008      	b.n	800e60c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e5fa:	f7fb fd55 	bl	800a0a8 <HAL_GetTick>
 800e5fe:	4602      	mov	r2, r0
 800e600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e602:	1ad3      	subs	r3, r2, r3
 800e604:	2b64      	cmp	r3, #100	@ 0x64
 800e606:	d901      	bls.n	800e60c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800e608:	2303      	movs	r3, #3
 800e60a:	e286      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800e60c:	f7ff fbd2 	bl	800ddb4 <LL_RCC_HSE_IsReady>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d1f1      	bne.n	800e5fa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f003 0302 	and.w	r3, r3, #2
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d04c      	beq.n	800e6bc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e622:	f7ff fda8 	bl	800e176 <LL_RCC_GetSysClkSource>
 800e626:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e628:	f7ff fea1 	bl	800e36e <LL_RCC_PLL_GetMainSource>
 800e62c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	2b04      	cmp	r3, #4
 800e632:	d005      	beq.n	800e640 <HAL_RCC_OscConfig+0x200>
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	2b0c      	cmp	r3, #12
 800e638:	d10e      	bne.n	800e658 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	d10b      	bne.n	800e658 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d101      	bne.n	800e64c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800e648:	2301      	movs	r3, #1
 800e64a:	e266      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	4618      	mov	r0, r3
 800e652:	f7ff fbf1 	bl	800de38 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e656:	e031      	b.n	800e6bc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d019      	beq.n	800e694 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e660:	f7ff fbba 	bl	800ddd8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e664:	f7fb fd20 	bl	800a0a8 <HAL_GetTick>
 800e668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800e66a:	e008      	b.n	800e67e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e66c:	f7fb fd1c 	bl	800a0a8 <HAL_GetTick>
 800e670:	4602      	mov	r2, r0
 800e672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e674:	1ad3      	subs	r3, r2, r3
 800e676:	2b02      	cmp	r3, #2
 800e678:	d901      	bls.n	800e67e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e67a:	2303      	movs	r3, #3
 800e67c:	e24d      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800e67e:	f7ff fbc9 	bl	800de14 <LL_RCC_HSI_IsReady>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d0f1      	beq.n	800e66c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	691b      	ldr	r3, [r3, #16]
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7ff fbd3 	bl	800de38 <LL_RCC_HSI_SetCalibTrimming>
 800e692:	e013      	b.n	800e6bc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e694:	f7ff fbaf 	bl	800ddf6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e698:	f7fb fd06 	bl	800a0a8 <HAL_GetTick>
 800e69c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800e69e:	e008      	b.n	800e6b2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e6a0:	f7fb fd02 	bl	800a0a8 <HAL_GetTick>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a8:	1ad3      	subs	r3, r2, r3
 800e6aa:	2b02      	cmp	r3, #2
 800e6ac:	d901      	bls.n	800e6b2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800e6ae:	2303      	movs	r3, #3
 800e6b0:	e233      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800e6b2:	f7ff fbaf 	bl	800de14 <LL_RCC_HSI_IsReady>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1f1      	bne.n	800e6a0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f003 0308 	and.w	r3, r3, #8
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d106      	bne.n	800e6d6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	f000 80a3 	beq.w	800e81c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	695b      	ldr	r3, [r3, #20]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d076      	beq.n	800e7cc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f003 0310 	and.w	r3, r3, #16
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d046      	beq.n	800e778 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800e6ea:	f7ff fc66 	bl	800dfba <LL_RCC_LSI1_IsReady>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d113      	bne.n	800e71c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800e6f4:	f7ff fc3f 	bl	800df76 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e6f8:	f7fb fcd6 	bl	800a0a8 <HAL_GetTick>
 800e6fc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e6fe:	e008      	b.n	800e712 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e700:	f7fb fcd2 	bl	800a0a8 <HAL_GetTick>
 800e704:	4602      	mov	r2, r0
 800e706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d901      	bls.n	800e712 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800e70e:	2303      	movs	r3, #3
 800e710:	e203      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e712:	f7ff fc52 	bl	800dfba <LL_RCC_LSI1_IsReady>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d0f1      	beq.n	800e700 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800e71c:	f7ff fc5f 	bl	800dfde <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e720:	f7fb fcc2 	bl	800a0a8 <HAL_GetTick>
 800e724:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e726:	e008      	b.n	800e73a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e728:	f7fb fcbe 	bl	800a0a8 <HAL_GetTick>
 800e72c:	4602      	mov	r2, r0
 800e72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	2b03      	cmp	r3, #3
 800e734:	d901      	bls.n	800e73a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800e736:	2303      	movs	r3, #3
 800e738:	e1ef      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e73a:	f7ff fc72 	bl	800e022 <LL_RCC_LSI2_IsReady>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d0f1      	beq.n	800e728 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	699b      	ldr	r3, [r3, #24]
 800e748:	4618      	mov	r0, r3
 800e74a:	f7ff fc7c 	bl	800e046 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800e74e:	f7ff fc23 	bl	800df98 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e752:	f7fb fca9 	bl	800a0a8 <HAL_GetTick>
 800e756:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e758:	e008      	b.n	800e76c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e75a:	f7fb fca5 	bl	800a0a8 <HAL_GetTick>
 800e75e:	4602      	mov	r2, r0
 800e760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e762:	1ad3      	subs	r3, r2, r3
 800e764:	2b02      	cmp	r3, #2
 800e766:	d901      	bls.n	800e76c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800e768:	2303      	movs	r3, #3
 800e76a:	e1d6      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e76c:	f7ff fc25 	bl	800dfba <LL_RCC_LSI1_IsReady>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d1f1      	bne.n	800e75a <HAL_RCC_OscConfig+0x31a>
 800e776:	e051      	b.n	800e81c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800e778:	f7ff fbfd 	bl	800df76 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e77c:	f7fb fc94 	bl	800a0a8 <HAL_GetTick>
 800e780:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e782:	e00c      	b.n	800e79e <HAL_RCC_OscConfig+0x35e>
 800e784:	20000074 	.word	0x20000074
 800e788:	20000088 	.word	0x20000088
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e78c:	f7fb fc8c 	bl	800a0a8 <HAL_GetTick>
 800e790:	4602      	mov	r2, r0
 800e792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e794:	1ad3      	subs	r3, r2, r3
 800e796:	2b02      	cmp	r3, #2
 800e798:	d901      	bls.n	800e79e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800e79a:	2303      	movs	r3, #3
 800e79c:	e1bd      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e79e:	f7ff fc0c 	bl	800dfba <LL_RCC_LSI1_IsReady>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d0f1      	beq.n	800e78c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800e7a8:	f7ff fc2a 	bl	800e000 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e7ac:	e008      	b.n	800e7c0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e7ae:	f7fb fc7b 	bl	800a0a8 <HAL_GetTick>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	2b03      	cmp	r3, #3
 800e7ba:	d901      	bls.n	800e7c0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800e7bc:	2303      	movs	r3, #3
 800e7be:	e1ac      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e7c0:	f7ff fc2f 	bl	800e022 <LL_RCC_LSI2_IsReady>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d1f1      	bne.n	800e7ae <HAL_RCC_OscConfig+0x36e>
 800e7ca:	e027      	b.n	800e81c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800e7cc:	f7ff fc18 	bl	800e000 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7d0:	f7fb fc6a 	bl	800a0a8 <HAL_GetTick>
 800e7d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e7d6:	e008      	b.n	800e7ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e7d8:	f7fb fc66 	bl	800a0a8 <HAL_GetTick>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	2b03      	cmp	r3, #3
 800e7e4:	d901      	bls.n	800e7ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	e197      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e7ea:	f7ff fc1a 	bl	800e022 <LL_RCC_LSI2_IsReady>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d1f1      	bne.n	800e7d8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800e7f4:	f7ff fbd0 	bl	800df98 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7f8:	f7fb fc56 	bl	800a0a8 <HAL_GetTick>
 800e7fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800e7fe:	e008      	b.n	800e812 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e800:	f7fb fc52 	bl	800a0a8 <HAL_GetTick>
 800e804:	4602      	mov	r2, r0
 800e806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e808:	1ad3      	subs	r3, r2, r3
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	d901      	bls.n	800e812 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800e80e:	2303      	movs	r3, #3
 800e810:	e183      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800e812:	f7ff fbd2 	bl	800dfba <LL_RCC_LSI1_IsReady>
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d1f1      	bne.n	800e800 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f003 0304 	and.w	r3, r3, #4
 800e824:	2b00      	cmp	r3, #0
 800e826:	d05b      	beq.n	800e8e0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e828:	4ba7      	ldr	r3, [pc, #668]	@ (800eac8 <HAL_RCC_OscConfig+0x688>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e830:	2b00      	cmp	r3, #0
 800e832:	d114      	bne.n	800e85e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e834:	f7ff f9a0 	bl	800db78 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e838:	f7fb fc36 	bl	800a0a8 <HAL_GetTick>
 800e83c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e83e:	e008      	b.n	800e852 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e840:	f7fb fc32 	bl	800a0a8 <HAL_GetTick>
 800e844:	4602      	mov	r2, r0
 800e846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	2b02      	cmp	r3, #2
 800e84c:	d901      	bls.n	800e852 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800e84e:	2303      	movs	r3, #3
 800e850:	e163      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e852:	4b9d      	ldr	r3, [pc, #628]	@ (800eac8 <HAL_RCC_OscConfig+0x688>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d0f0      	beq.n	800e840 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	689b      	ldr	r3, [r3, #8]
 800e862:	2b01      	cmp	r3, #1
 800e864:	d102      	bne.n	800e86c <HAL_RCC_OscConfig+0x42c>
 800e866:	f7ff fb30 	bl	800deca <LL_RCC_LSE_Enable>
 800e86a:	e00c      	b.n	800e886 <HAL_RCC_OscConfig+0x446>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	2b05      	cmp	r3, #5
 800e872:	d104      	bne.n	800e87e <HAL_RCC_OscConfig+0x43e>
 800e874:	f7ff fb4b 	bl	800df0e <LL_RCC_LSE_EnableBypass>
 800e878:	f7ff fb27 	bl	800deca <LL_RCC_LSE_Enable>
 800e87c:	e003      	b.n	800e886 <HAL_RCC_OscConfig+0x446>
 800e87e:	f7ff fb35 	bl	800deec <LL_RCC_LSE_Disable>
 800e882:	f7ff fb55 	bl	800df30 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d014      	beq.n	800e8b8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e88e:	f7fb fc0b 	bl	800a0a8 <HAL_GetTick>
 800e892:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800e894:	e00a      	b.n	800e8ac <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e896:	f7fb fc07 	bl	800a0a8 <HAL_GetTick>
 800e89a:	4602      	mov	r2, r0
 800e89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d901      	bls.n	800e8ac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800e8a8:	2303      	movs	r3, #3
 800e8aa:	e136      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800e8ac:	f7ff fb51 	bl	800df52 <LL_RCC_LSE_IsReady>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d0ef      	beq.n	800e896 <HAL_RCC_OscConfig+0x456>
 800e8b6:	e013      	b.n	800e8e0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e8b8:	f7fb fbf6 	bl	800a0a8 <HAL_GetTick>
 800e8bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800e8be:	e00a      	b.n	800e8d6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e8c0:	f7fb fbf2 	bl	800a0a8 <HAL_GetTick>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8c8:	1ad3      	subs	r3, r2, r3
 800e8ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d901      	bls.n	800e8d6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800e8d2:	2303      	movs	r3, #3
 800e8d4:	e121      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800e8d6:	f7ff fb3c 	bl	800df52 <LL_RCC_LSE_IsReady>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d1ef      	bne.n	800e8c0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d02c      	beq.n	800e946 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d014      	beq.n	800e91e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e8f4:	f7ff fab5 	bl	800de62 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e8f8:	f7fb fbd6 	bl	800a0a8 <HAL_GetTick>
 800e8fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800e8fe:	e008      	b.n	800e912 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e900:	f7fb fbd2 	bl	800a0a8 <HAL_GetTick>
 800e904:	4602      	mov	r2, r0
 800e906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e908:	1ad3      	subs	r3, r2, r3
 800e90a:	2b02      	cmp	r3, #2
 800e90c:	d901      	bls.n	800e912 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800e90e:	2303      	movs	r3, #3
 800e910:	e103      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800e912:	f7ff fac8 	bl	800dea6 <LL_RCC_HSI48_IsReady>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d0f1      	beq.n	800e900 <HAL_RCC_OscConfig+0x4c0>
 800e91c:	e013      	b.n	800e946 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e91e:	f7ff fab1 	bl	800de84 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e922:	f7fb fbc1 	bl	800a0a8 <HAL_GetTick>
 800e926:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800e928:	e008      	b.n	800e93c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e92a:	f7fb fbbd 	bl	800a0a8 <HAL_GetTick>
 800e92e:	4602      	mov	r2, r0
 800e930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e932:	1ad3      	subs	r3, r2, r3
 800e934:	2b02      	cmp	r3, #2
 800e936:	d901      	bls.n	800e93c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800e938:	2303      	movs	r3, #3
 800e93a:	e0ee      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800e93c:	f7ff fab3 	bl	800dea6 <LL_RCC_HSI48_IsReady>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1f1      	bne.n	800e92a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	f000 80e4 	beq.w	800eb18 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e950:	f7ff fc11 	bl	800e176 <LL_RCC_GetSysClkSource>
 800e954:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800e956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e962:	2b02      	cmp	r3, #2
 800e964:	f040 80b4 	bne.w	800ead0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f003 0203 	and.w	r2, r3, #3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e972:	429a      	cmp	r2, r3
 800e974:	d123      	bne.n	800e9be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e980:	429a      	cmp	r2, r3
 800e982:	d11c      	bne.n	800e9be <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	0a1b      	lsrs	r3, r3, #8
 800e988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e990:	429a      	cmp	r2, r3
 800e992:	d114      	bne.n	800e9be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d10d      	bne.n	800e9be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d106      	bne.n	800e9be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d05d      	beq.n	800ea7a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	2b0c      	cmp	r3, #12
 800e9c2:	d058      	beq.n	800ea76 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800e9c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d001      	beq.n	800e9d6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e0a1      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800e9d6:	f7ff fc84 	bl	800e2e2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e9da:	f7fb fb65 	bl	800a0a8 <HAL_GetTick>
 800e9de:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e9e0:	e008      	b.n	800e9f4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e9e2:	f7fb fb61 	bl	800a0a8 <HAL_GetTick>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ea:	1ad3      	subs	r3, r2, r3
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	d901      	bls.n	800e9f4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800e9f0:	2303      	movs	r3, #3
 800e9f2:	e092      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e9f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d1ef      	bne.n	800e9e2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ea02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea06:	68da      	ldr	r2, [r3, #12]
 800ea08:	4b30      	ldr	r3, [pc, #192]	@ (800eacc <HAL_RCC_OscConfig+0x68c>)
 800ea0a:	4013      	ands	r3, r2
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ea14:	4311      	orrs	r1, r2
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ea1a:	0212      	lsls	r2, r2, #8
 800ea1c:	4311      	orrs	r1, r2
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ea22:	4311      	orrs	r1, r2
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ea28:	4311      	orrs	r1, r2
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ea2e:	430a      	orrs	r2, r1
 800ea30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ea34:	4313      	orrs	r3, r2
 800ea36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ea38:	f7ff fc44 	bl	800e2c4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ea3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ea46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ea4c:	f7fb fb2c 	bl	800a0a8 <HAL_GetTick>
 800ea50:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ea52:	e008      	b.n	800ea66 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ea54:	f7fb fb28 	bl	800a0a8 <HAL_GetTick>
 800ea58:	4602      	mov	r2, r0
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea5c:	1ad3      	subs	r3, r2, r3
 800ea5e:	2b02      	cmp	r3, #2
 800ea60:	d901      	bls.n	800ea66 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800ea62:	2303      	movs	r3, #3
 800ea64:	e059      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ea66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d0ef      	beq.n	800ea54 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ea74:	e050      	b.n	800eb18 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ea76:	2301      	movs	r3, #1
 800ea78:	e04f      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ea7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d147      	bne.n	800eb18 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ea88:	f7ff fc1c 	bl	800e2c4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ea8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ea96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ea9c:	f7fb fb04 	bl	800a0a8 <HAL_GetTick>
 800eaa0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eaa2:	e008      	b.n	800eab6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eaa4:	f7fb fb00 	bl	800a0a8 <HAL_GetTick>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	2b02      	cmp	r3, #2
 800eab0:	d901      	bls.n	800eab6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800eab2:	2303      	movs	r3, #3
 800eab4:	e031      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d0ef      	beq.n	800eaa4 <HAL_RCC_OscConfig+0x664>
 800eac4:	e028      	b.n	800eb18 <HAL_RCC_OscConfig+0x6d8>
 800eac6:	bf00      	nop
 800eac8:	58000400 	.word	0x58000400
 800eacc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	2b0c      	cmp	r3, #12
 800ead4:	d01e      	beq.n	800eb14 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ead6:	f7ff fc04 	bl	800e2e2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eada:	f7fb fae5 	bl	800a0a8 <HAL_GetTick>
 800eade:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eae0:	e008      	b.n	800eaf4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eae2:	f7fb fae1 	bl	800a0a8 <HAL_GetTick>
 800eae6:	4602      	mov	r2, r0
 800eae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaea:	1ad3      	subs	r3, r2, r3
 800eaec:	2b02      	cmp	r3, #2
 800eaee:	d901      	bls.n	800eaf4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800eaf0:	2303      	movs	r3, #3
 800eaf2:	e012      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eaf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d1ef      	bne.n	800eae2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800eb02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eb06:	68da      	ldr	r2, [r3, #12]
 800eb08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800eb0c:	4b05      	ldr	r3, [pc, #20]	@ (800eb24 <HAL_RCC_OscConfig+0x6e4>)
 800eb0e:	4013      	ands	r3, r2
 800eb10:	60cb      	str	r3, [r1, #12]
 800eb12:	e001      	b.n	800eb18 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800eb14:	2301      	movs	r3, #1
 800eb16:	e000      	b.n	800eb1a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3734      	adds	r7, #52	@ 0x34
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd90      	pop	{r4, r7, pc}
 800eb22:	bf00      	nop
 800eb24:	eefefffc 	.word	0xeefefffc

0800eb28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d101      	bne.n	800eb3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e12d      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800eb3c:	4b98      	ldr	r3, [pc, #608]	@ (800eda0 <HAL_RCC_ClockConfig+0x278>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f003 0307 	and.w	r3, r3, #7
 800eb44:	683a      	ldr	r2, [r7, #0]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d91b      	bls.n	800eb82 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eb4a:	4b95      	ldr	r3, [pc, #596]	@ (800eda0 <HAL_RCC_ClockConfig+0x278>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f023 0207 	bic.w	r2, r3, #7
 800eb52:	4993      	ldr	r1, [pc, #588]	@ (800eda0 <HAL_RCC_ClockConfig+0x278>)
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	4313      	orrs	r3, r2
 800eb58:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb5a:	f7fb faa5 	bl	800a0a8 <HAL_GetTick>
 800eb5e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb60:	e008      	b.n	800eb74 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800eb62:	f7fb faa1 	bl	800a0a8 <HAL_GetTick>
 800eb66:	4602      	mov	r2, r0
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	1ad3      	subs	r3, r2, r3
 800eb6c:	2b02      	cmp	r3, #2
 800eb6e:	d901      	bls.n	800eb74 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800eb70:	2303      	movs	r3, #3
 800eb72:	e111      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb74:	4b8a      	ldr	r3, [pc, #552]	@ (800eda0 <HAL_RCC_ClockConfig+0x278>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f003 0307 	and.w	r3, r3, #7
 800eb7c:	683a      	ldr	r2, [r7, #0]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d1ef      	bne.n	800eb62 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f003 0302 	and.w	r3, r3, #2
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d016      	beq.n	800ebbc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	689b      	ldr	r3, [r3, #8]
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff fafb 	bl	800e18e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800eb98:	f7fb fa86 	bl	800a0a8 <HAL_GetTick>
 800eb9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800eb9e:	e008      	b.n	800ebb2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800eba0:	f7fb fa82 	bl	800a0a8 <HAL_GetTick>
 800eba4:	4602      	mov	r2, r0
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	2b02      	cmp	r3, #2
 800ebac:	d901      	bls.n	800ebb2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800ebae:	2303      	movs	r3, #3
 800ebb0:	e0f2      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ebb2:	f7ff fbe8 	bl	800e386 <LL_RCC_IsActiveFlag_HPRE>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d0f1      	beq.n	800eba0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f003 0320 	and.w	r3, r3, #32
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d016      	beq.n	800ebf6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	695b      	ldr	r3, [r3, #20]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7ff faf2 	bl	800e1b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ebd2:	f7fb fa69 	bl	800a0a8 <HAL_GetTick>
 800ebd6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ebd8:	e008      	b.n	800ebec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ebda:	f7fb fa65 	bl	800a0a8 <HAL_GetTick>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d901      	bls.n	800ebec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800ebe8:	2303      	movs	r3, #3
 800ebea:	e0d5      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ebec:	f7ff fbdd 	bl	800e3aa <LL_RCC_IsActiveFlag_C2HPRE>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d0f1      	beq.n	800ebda <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d016      	beq.n	800ec30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	699b      	ldr	r3, [r3, #24]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7ff faeb 	bl	800e1e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ec0c:	f7fb fa4c 	bl	800a0a8 <HAL_GetTick>
 800ec10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ec12:	e008      	b.n	800ec26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ec14:	f7fb fa48 	bl	800a0a8 <HAL_GetTick>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	1ad3      	subs	r3, r2, r3
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d901      	bls.n	800ec26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800ec22:	2303      	movs	r3, #3
 800ec24:	e0b8      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ec26:	f7ff fbd3 	bl	800e3d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d0f1      	beq.n	800ec14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f003 0304 	and.w	r3, r3, #4
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d016      	beq.n	800ec6a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7ff fae5 	bl	800e210 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ec46:	f7fb fa2f 	bl	800a0a8 <HAL_GetTick>
 800ec4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ec4c:	e008      	b.n	800ec60 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ec4e:	f7fb fa2b 	bl	800a0a8 <HAL_GetTick>
 800ec52:	4602      	mov	r2, r0
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	1ad3      	subs	r3, r2, r3
 800ec58:	2b02      	cmp	r3, #2
 800ec5a:	d901      	bls.n	800ec60 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800ec5c:	2303      	movs	r3, #3
 800ec5e:	e09b      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ec60:	f7ff fbc9 	bl	800e3f6 <LL_RCC_IsActiveFlag_PPRE1>
 800ec64:	4603      	mov	r3, r0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d0f1      	beq.n	800ec4e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f003 0308 	and.w	r3, r3, #8
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d017      	beq.n	800eca6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	691b      	ldr	r3, [r3, #16]
 800ec7a:	00db      	lsls	r3, r3, #3
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7ff fadb 	bl	800e238 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ec82:	f7fb fa11 	bl	800a0a8 <HAL_GetTick>
 800ec86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ec88:	e008      	b.n	800ec9c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ec8a:	f7fb fa0d 	bl	800a0a8 <HAL_GetTick>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	1ad3      	subs	r3, r2, r3
 800ec94:	2b02      	cmp	r3, #2
 800ec96:	d901      	bls.n	800ec9c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800ec98:	2303      	movs	r3, #3
 800ec9a:	e07d      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ec9c:	f7ff fbbd 	bl	800e41a <LL_RCC_IsActiveFlag_PPRE2>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d0f1      	beq.n	800ec8a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f003 0301 	and.w	r3, r3, #1
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d043      	beq.n	800ed3a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	d106      	bne.n	800ecc8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800ecba:	f7ff f87b 	bl	800ddb4 <LL_RCC_HSE_IsReady>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d11e      	bne.n	800ed02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	e067      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	2b03      	cmp	r3, #3
 800ecce:	d106      	bne.n	800ecde <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800ecd0:	f7ff fb16 	bl	800e300 <LL_RCC_PLL_IsReady>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d113      	bne.n	800ed02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ecda:	2301      	movs	r3, #1
 800ecdc:	e05c      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d106      	bne.n	800ecf4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800ece6:	f7ff f9e3 	bl	800e0b0 <LL_RCC_MSI_IsReady>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d108      	bne.n	800ed02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	e051      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800ecf4:	f7ff f88e 	bl	800de14 <LL_RCC_HSI_IsReady>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d101      	bne.n	800ed02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	e04a      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7ff fa21 	bl	800e14e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed0c:	f7fb f9cc 	bl	800a0a8 <HAL_GetTick>
 800ed10:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed12:	e00a      	b.n	800ed2a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed14:	f7fb f9c8 	bl	800a0a8 <HAL_GetTick>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d901      	bls.n	800ed2a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800ed26:	2303      	movs	r3, #3
 800ed28:	e036      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed2a:	f7ff fa24 	bl	800e176 <LL_RCC_GetSysClkSource>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d1ec      	bne.n	800ed14 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ed3a:	4b19      	ldr	r3, [pc, #100]	@ (800eda0 <HAL_RCC_ClockConfig+0x278>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f003 0307 	and.w	r3, r3, #7
 800ed42:	683a      	ldr	r2, [r7, #0]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d21b      	bcs.n	800ed80 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed48:	4b15      	ldr	r3, [pc, #84]	@ (800eda0 <HAL_RCC_ClockConfig+0x278>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f023 0207 	bic.w	r2, r3, #7
 800ed50:	4913      	ldr	r1, [pc, #76]	@ (800eda0 <HAL_RCC_ClockConfig+0x278>)
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	4313      	orrs	r3, r2
 800ed56:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed58:	f7fb f9a6 	bl	800a0a8 <HAL_GetTick>
 800ed5c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed5e:	e008      	b.n	800ed72 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ed60:	f7fb f9a2 	bl	800a0a8 <HAL_GetTick>
 800ed64:	4602      	mov	r2, r0
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	1ad3      	subs	r3, r2, r3
 800ed6a:	2b02      	cmp	r3, #2
 800ed6c:	d901      	bls.n	800ed72 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800ed6e:	2303      	movs	r3, #3
 800ed70:	e012      	b.n	800ed98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed72:	4b0b      	ldr	r3, [pc, #44]	@ (800eda0 <HAL_RCC_ClockConfig+0x278>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f003 0307 	and.w	r3, r3, #7
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d1ef      	bne.n	800ed60 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800ed80:	f000 f87e 	bl	800ee80 <HAL_RCC_GetHCLKFreq>
 800ed84:	4603      	mov	r3, r0
 800ed86:	4a07      	ldr	r2, [pc, #28]	@ (800eda4 <HAL_RCC_ClockConfig+0x27c>)
 800ed88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800ed8a:	f7fb f999 	bl	800a0c0 <HAL_GetTickPrio>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7fb f93b 	bl	800a00c <HAL_InitTick>
 800ed96:	4603      	mov	r3, r0
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	58004000 	.word	0x58004000
 800eda4:	20000074 	.word	0x20000074

0800eda8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eda8:	b590      	push	{r4, r7, lr}
 800edaa:	b085      	sub	sp, #20
 800edac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800edae:	f7ff f9e2 	bl	800e176 <LL_RCC_GetSysClkSource>
 800edb2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d10a      	bne.n	800edd0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800edba:	f7ff f99e 	bl	800e0fa <LL_RCC_MSI_GetRange>
 800edbe:	4603      	mov	r3, r0
 800edc0:	091b      	lsrs	r3, r3, #4
 800edc2:	f003 030f 	and.w	r3, r3, #15
 800edc6:	4a2b      	ldr	r2, [pc, #172]	@ (800ee74 <HAL_RCC_GetSysClockFreq+0xcc>)
 800edc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edcc:	60fb      	str	r3, [r7, #12]
 800edce:	e04b      	b.n	800ee68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b04      	cmp	r3, #4
 800edd4:	d102      	bne.n	800eddc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800edd6:	4b28      	ldr	r3, [pc, #160]	@ (800ee78 <HAL_RCC_GetSysClockFreq+0xd0>)
 800edd8:	60fb      	str	r3, [r7, #12]
 800edda:	e045      	b.n	800ee68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2b08      	cmp	r3, #8
 800ede0:	d10a      	bne.n	800edf8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ede2:	f7fe ffb7 	bl	800dd54 <LL_RCC_HSE_IsEnabledDiv2>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d102      	bne.n	800edf2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800edec:	4b22      	ldr	r3, [pc, #136]	@ (800ee78 <HAL_RCC_GetSysClockFreq+0xd0>)
 800edee:	60fb      	str	r3, [r7, #12]
 800edf0:	e03a      	b.n	800ee68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800edf2:	4b22      	ldr	r3, [pc, #136]	@ (800ee7c <HAL_RCC_GetSysClockFreq+0xd4>)
 800edf4:	60fb      	str	r3, [r7, #12]
 800edf6:	e037      	b.n	800ee68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800edf8:	f7ff fab9 	bl	800e36e <LL_RCC_PLL_GetMainSource>
 800edfc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	d003      	beq.n	800ee0c <HAL_RCC_GetSysClockFreq+0x64>
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	d003      	beq.n	800ee12 <HAL_RCC_GetSysClockFreq+0x6a>
 800ee0a:	e00d      	b.n	800ee28 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800ee0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ee78 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ee0e:	60bb      	str	r3, [r7, #8]
        break;
 800ee10:	e015      	b.n	800ee3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ee12:	f7fe ff9f 	bl	800dd54 <LL_RCC_HSE_IsEnabledDiv2>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d102      	bne.n	800ee22 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800ee1c:	4b16      	ldr	r3, [pc, #88]	@ (800ee78 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ee1e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800ee20:	e00d      	b.n	800ee3e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800ee22:	4b16      	ldr	r3, [pc, #88]	@ (800ee7c <HAL_RCC_GetSysClockFreq+0xd4>)
 800ee24:	60bb      	str	r3, [r7, #8]
        break;
 800ee26:	e00a      	b.n	800ee3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ee28:	f7ff f967 	bl	800e0fa <LL_RCC_MSI_GetRange>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	091b      	lsrs	r3, r3, #4
 800ee30:	f003 030f 	and.w	r3, r3, #15
 800ee34:	4a0f      	ldr	r2, [pc, #60]	@ (800ee74 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ee36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee3a:	60bb      	str	r3, [r7, #8]
        break;
 800ee3c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800ee3e:	f7ff fa71 	bl	800e324 <LL_RCC_PLL_GetN>
 800ee42:	4602      	mov	r2, r0
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	fb03 f402 	mul.w	r4, r3, r2
 800ee4a:	f7ff fa84 	bl	800e356 <LL_RCC_PLL_GetDivider>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	091b      	lsrs	r3, r3, #4
 800ee52:	3301      	adds	r3, #1
 800ee54:	fbb4 f4f3 	udiv	r4, r4, r3
 800ee58:	f7ff fa71 	bl	800e33e <LL_RCC_PLL_GetR>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	0f5b      	lsrs	r3, r3, #29
 800ee60:	3301      	adds	r3, #1
 800ee62:	fbb4 f3f3 	udiv	r3, r4, r3
 800ee66:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800ee68:	68fb      	ldr	r3, [r7, #12]
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3714      	adds	r7, #20
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd90      	pop	{r4, r7, pc}
 800ee72:	bf00      	nop
 800ee74:	0801616c 	.word	0x0801616c
 800ee78:	00f42400 	.word	0x00f42400
 800ee7c:	01e84800 	.word	0x01e84800

0800ee80 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ee80:	b598      	push	{r3, r4, r7, lr}
 800ee82:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ee84:	f7ff ff90 	bl	800eda8 <HAL_RCC_GetSysClockFreq>
 800ee88:	4604      	mov	r4, r0
 800ee8a:	f7ff f9e9 	bl	800e260 <LL_RCC_GetAHBPrescaler>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	091b      	lsrs	r3, r3, #4
 800ee92:	f003 030f 	and.w	r3, r3, #15
 800ee96:	4a03      	ldr	r2, [pc, #12]	@ (800eea4 <HAL_RCC_GetHCLKFreq+0x24>)
 800ee98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee9c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	bd98      	pop	{r3, r4, r7, pc}
 800eea4:	0801610c 	.word	0x0801610c

0800eea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eea8:	b598      	push	{r3, r4, r7, lr}
 800eeaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800eeac:	f7ff ffe8 	bl	800ee80 <HAL_RCC_GetHCLKFreq>
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	f7ff f9ef 	bl	800e294 <LL_RCC_GetAPB1Prescaler>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	0a1b      	lsrs	r3, r3, #8
 800eeba:	f003 0307 	and.w	r3, r3, #7
 800eebe:	4a04      	ldr	r2, [pc, #16]	@ (800eed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800eec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eec4:	f003 031f 	and.w	r3, r3, #31
 800eec8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800eecc:	4618      	mov	r0, r3
 800eece:	bd98      	pop	{r3, r4, r7, pc}
 800eed0:	0801614c 	.word	0x0801614c

0800eed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800eed4:	b598      	push	{r3, r4, r7, lr}
 800eed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800eed8:	f7ff ffd2 	bl	800ee80 <HAL_RCC_GetHCLKFreq>
 800eedc:	4604      	mov	r4, r0
 800eede:	f7ff f9e5 	bl	800e2ac <LL_RCC_GetAPB2Prescaler>
 800eee2:	4603      	mov	r3, r0
 800eee4:	0adb      	lsrs	r3, r3, #11
 800eee6:	f003 0307 	and.w	r3, r3, #7
 800eeea:	4a04      	ldr	r2, [pc, #16]	@ (800eefc <HAL_RCC_GetPCLK2Freq+0x28>)
 800eeec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eef0:	f003 031f 	and.w	r3, r3, #31
 800eef4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	bd98      	pop	{r3, r4, r7, pc}
 800eefc:	0801614c 	.word	0x0801614c

0800ef00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ef00:	b590      	push	{r4, r7, lr}
 800ef02:	b085      	sub	sp, #20
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2bb0      	cmp	r3, #176	@ 0xb0
 800ef0c:	d903      	bls.n	800ef16 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ef0e:	4b15      	ldr	r3, [pc, #84]	@ (800ef64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ef10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef12:	60fb      	str	r3, [r7, #12]
 800ef14:	e007      	b.n	800ef26 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	091b      	lsrs	r3, r3, #4
 800ef1a:	f003 030f 	and.w	r3, r3, #15
 800ef1e:	4a11      	ldr	r2, [pc, #68]	@ (800ef64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ef20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef24:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ef26:	f7ff f9a7 	bl	800e278 <LL_RCC_GetAHB4Prescaler>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	091b      	lsrs	r3, r3, #4
 800ef2e:	f003 030f 	and.w	r3, r3, #15
 800ef32:	4a0d      	ldr	r2, [pc, #52]	@ (800ef68 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800ef34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef38:	68fa      	ldr	r2, [r7, #12]
 800ef3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef3e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	4a0a      	ldr	r2, [pc, #40]	@ (800ef6c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ef44:	fba2 2303 	umull	r2, r3, r2, r3
 800ef48:	0c9c      	lsrs	r4, r3, #18
 800ef4a:	f7fe fead 	bl	800dca8 <HAL_PWREx_GetVoltageRange>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	4619      	mov	r1, r3
 800ef52:	4620      	mov	r0, r4
 800ef54:	f000 f80c 	bl	800ef70 <RCC_SetFlashLatency>
 800ef58:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3714      	adds	r7, #20
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd90      	pop	{r4, r7, pc}
 800ef62:	bf00      	nop
 800ef64:	0801616c 	.word	0x0801616c
 800ef68:	0801610c 	.word	0x0801610c
 800ef6c:	431bde83 	.word	0x431bde83

0800ef70 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ef70:	b590      	push	{r4, r7, lr}
 800ef72:	b093      	sub	sp, #76	@ 0x4c
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800ef7a:	4b37      	ldr	r3, [pc, #220]	@ (800f058 <RCC_SetFlashLatency+0xe8>)
 800ef7c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800ef80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ef82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800ef86:	4a35      	ldr	r2, [pc, #212]	@ (800f05c <RCC_SetFlashLatency+0xec>)
 800ef88:	f107 031c 	add.w	r3, r7, #28
 800ef8c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ef8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ef92:	4b33      	ldr	r3, [pc, #204]	@ (800f060 <RCC_SetFlashLatency+0xf0>)
 800ef94:	f107 040c 	add.w	r4, r7, #12
 800ef98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ef9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ef9e:	2300      	movs	r3, #0
 800efa0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800efa8:	d11a      	bne.n	800efe0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800efaa:	2300      	movs	r3, #0
 800efac:	643b      	str	r3, [r7, #64]	@ 0x40
 800efae:	e013      	b.n	800efd8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800efb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	3348      	adds	r3, #72	@ 0x48
 800efb6:	443b      	add	r3, r7
 800efb8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d807      	bhi.n	800efd2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800efc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	3348      	adds	r3, #72	@ 0x48
 800efc8:	443b      	add	r3, r7
 800efca:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800efce:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800efd0:	e020      	b.n	800f014 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800efd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efd4:	3301      	adds	r3, #1
 800efd6:	643b      	str	r3, [r7, #64]	@ 0x40
 800efd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efda:	2b03      	cmp	r3, #3
 800efdc:	d9e8      	bls.n	800efb0 <RCC_SetFlashLatency+0x40>
 800efde:	e019      	b.n	800f014 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800efe0:	2300      	movs	r3, #0
 800efe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efe4:	e013      	b.n	800f00e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800efe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efe8:	009b      	lsls	r3, r3, #2
 800efea:	3348      	adds	r3, #72	@ 0x48
 800efec:	443b      	add	r3, r7
 800efee:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800eff2:	687a      	ldr	r2, [r7, #4]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d807      	bhi.n	800f008 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800eff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800effa:	009b      	lsls	r3, r3, #2
 800effc:	3348      	adds	r3, #72	@ 0x48
 800effe:	443b      	add	r3, r7
 800f000:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f004:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f006:	e005      	b.n	800f014 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f00a:	3301      	adds	r3, #1
 800f00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f010:	2b02      	cmp	r3, #2
 800f012:	d9e8      	bls.n	800efe6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800f014:	4b13      	ldr	r3, [pc, #76]	@ (800f064 <RCC_SetFlashLatency+0xf4>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f023 0207 	bic.w	r2, r3, #7
 800f01c:	4911      	ldr	r1, [pc, #68]	@ (800f064 <RCC_SetFlashLatency+0xf4>)
 800f01e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f020:	4313      	orrs	r3, r2
 800f022:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f024:	f7fb f840 	bl	800a0a8 <HAL_GetTick>
 800f028:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f02a:	e008      	b.n	800f03e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f02c:	f7fb f83c 	bl	800a0a8 <HAL_GetTick>
 800f030:	4602      	mov	r2, r0
 800f032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	2b02      	cmp	r3, #2
 800f038:	d901      	bls.n	800f03e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800f03a:	2303      	movs	r3, #3
 800f03c:	e007      	b.n	800f04e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f03e:	4b09      	ldr	r3, [pc, #36]	@ (800f064 <RCC_SetFlashLatency+0xf4>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f003 0307 	and.w	r3, r3, #7
 800f046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f048:	429a      	cmp	r2, r3
 800f04a:	d1ef      	bne.n	800f02c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800f04c:	2300      	movs	r3, #0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	374c      	adds	r7, #76	@ 0x4c
 800f052:	46bd      	mov	sp, r7
 800f054:	bd90      	pop	{r4, r7, pc}
 800f056:	bf00      	nop
 800f058:	080160e0 	.word	0x080160e0
 800f05c:	080160f0 	.word	0x080160f0
 800f060:	080160fc 	.word	0x080160fc
 800f064:	58004000 	.word	0x58004000

0800f068 <LL_RCC_LSE_IsEnabled>:
{
 800f068:	b480      	push	{r7}
 800f06a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800f06c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f074:	f003 0301 	and.w	r3, r3, #1
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d101      	bne.n	800f080 <LL_RCC_LSE_IsEnabled+0x18>
 800f07c:	2301      	movs	r3, #1
 800f07e:	e000      	b.n	800f082 <LL_RCC_LSE_IsEnabled+0x1a>
 800f080:	2300      	movs	r3, #0
}
 800f082:	4618      	mov	r0, r3
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr

0800f08c <LL_RCC_LSE_IsReady>:
{
 800f08c:	b480      	push	{r7}
 800f08e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f098:	f003 0302 	and.w	r3, r3, #2
 800f09c:	2b02      	cmp	r3, #2
 800f09e:	d101      	bne.n	800f0a4 <LL_RCC_LSE_IsReady+0x18>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e000      	b.n	800f0a6 <LL_RCC_LSE_IsReady+0x1a>
 800f0a4:	2300      	movs	r3, #0
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <LL_RCC_SetRFWKPClockSource>:
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800f0b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f0c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800f0c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800f0d0:	bf00      	nop
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <LL_RCC_SetSMPSClockSource>:
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800f0e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0ea:	f023 0203 	bic.w	r2, r3, #3
 800f0ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f0f8:	bf00      	nop
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr

0800f104 <LL_RCC_SetSMPSPrescaler>:
{
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800f10c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f112:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800f116:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4313      	orrs	r3, r2
 800f11e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f120:	bf00      	nop
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <LL_RCC_SetUSARTClockSource>:
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800f134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f13c:	f023 0203 	bic.w	r2, r3, #3
 800f140:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4313      	orrs	r3, r2
 800f148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f14c:	bf00      	nop
 800f14e:	370c      	adds	r7, #12
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr

0800f158 <LL_RCC_SetLPUARTClockSource>:
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800f160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f168:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f16c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	4313      	orrs	r3, r2
 800f174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <LL_RCC_SetI2CClockSource>:
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800f18c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f190:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	091b      	lsrs	r3, r3, #4
 800f198:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f19c:	43db      	mvns	r3, r3
 800f19e:	401a      	ands	r2, r3
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	011b      	lsls	r3, r3, #4
 800f1a4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f1a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f1b2:	bf00      	nop
 800f1b4:	370c      	adds	r7, #12
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr

0800f1be <LL_RCC_SetLPTIMClockSource>:
{
 800f1be:	b480      	push	{r7}
 800f1c0:	b083      	sub	sp, #12
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800f1c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f1ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	0c1b      	lsrs	r3, r3, #16
 800f1d2:	041b      	lsls	r3, r3, #16
 800f1d4:	43db      	mvns	r3, r3
 800f1d6:	401a      	ands	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	041b      	lsls	r3, r3, #16
 800f1dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f1e6:	bf00      	nop
 800f1e8:	370c      	adds	r7, #12
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr

0800f1f2 <LL_RCC_SetSAIClockSource>:
{
 800f1f2:	b480      	push	{r7}
 800f1f4:	b083      	sub	sp, #12
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800f1fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f202:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800f206:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4313      	orrs	r3, r2
 800f20e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f212:	bf00      	nop
 800f214:	370c      	adds	r7, #12
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr

0800f21e <LL_RCC_SetRNGClockSource>:
{
 800f21e:	b480      	push	{r7}
 800f220:	b083      	sub	sp, #12
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800f226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f22e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800f232:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4313      	orrs	r3, r2
 800f23a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f23e:	bf00      	nop
 800f240:	370c      	adds	r7, #12
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <LL_RCC_SetCLK48ClockSource>:
{
 800f24a:	b480      	push	{r7}
 800f24c:	b083      	sub	sp, #12
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800f252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f25a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f25e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	4313      	orrs	r3, r2
 800f266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f26a:	bf00      	nop
 800f26c:	370c      	adds	r7, #12
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <LL_RCC_SetUSBClockSource>:
{
 800f276:	b580      	push	{r7, lr}
 800f278:	b082      	sub	sp, #8
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f7ff ffe3 	bl	800f24a <LL_RCC_SetCLK48ClockSource>
}
 800f284:	bf00      	nop
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <LL_RCC_SetADCClockSource>:
{
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800f294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f29c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800f2a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f2ac:	bf00      	nop
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr

0800f2b8 <LL_RCC_SetRTCClockSource>:
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800f2c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f2cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800f2d8:	bf00      	nop
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <LL_RCC_GetRTCClockSource>:
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800f2e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr

0800f2fe <LL_RCC_ForceBackupDomainReset>:
{
 800f2fe:	b480      	push	{r7}
 800f300:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f30a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f30e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f312:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f316:	bf00      	nop
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <LL_RCC_ReleaseBackupDomainReset>:
{
 800f320:	b480      	push	{r7}
 800f322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f32c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f338:	bf00      	nop
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr

0800f342 <LL_RCC_PLLSAI1_Enable>:
{
 800f342:	b480      	push	{r7}
 800f344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f350:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f354:	6013      	str	r3, [r2, #0]
}
 800f356:	bf00      	nop
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr

0800f360 <LL_RCC_PLLSAI1_Disable>:
{
 800f360:	b480      	push	{r7}
 800f362:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f36e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f372:	6013      	str	r3, [r2, #0]
}
 800f374:	bf00      	nop
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr

0800f37e <LL_RCC_PLLSAI1_IsReady>:
{
 800f37e:	b480      	push	{r7}
 800f380:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800f382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f38c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f390:	d101      	bne.n	800f396 <LL_RCC_PLLSAI1_IsReady+0x18>
 800f392:	2301      	movs	r3, #1
 800f394:	e000      	b.n	800f398 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800f396:	2300      	movs	r3, #0
}
 800f398:	4618      	mov	r0, r3
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr

0800f3a2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f3a2:	b580      	push	{r7, lr}
 800f3a4:	b088      	sub	sp, #32
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d034      	beq.n	800f428 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f3c6:	d021      	beq.n	800f40c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800f3c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f3cc:	d81b      	bhi.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f3ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f3d2:	d01d      	beq.n	800f410 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800f3d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f3d8:	d815      	bhi.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00b      	beq.n	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800f3de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f3e2:	d110      	bne.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800f3e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f3ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f3f2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800f3f4:	e00d      	b.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	3304      	adds	r3, #4
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f000 f947 	bl	800f68e <RCCEx_PLLSAI1_ConfigNP>
 800f400:	4603      	mov	r3, r0
 800f402:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f404:	e005      	b.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800f406:	2301      	movs	r3, #1
 800f408:	77fb      	strb	r3, [r7, #31]
        break;
 800f40a:	e002      	b.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f40c:	bf00      	nop
 800f40e:	e000      	b.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f410:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f412:	7ffb      	ldrb	r3, [r7, #31]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d105      	bne.n	800f424 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7ff fee8 	bl	800f1f2 <LL_RCC_SetSAIClockSource>
 800f422:	e001      	b.n	800f428 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f424:	7ffb      	ldrb	r3, [r7, #31]
 800f426:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f430:	2b00      	cmp	r3, #0
 800f432:	d046      	beq.n	800f4c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800f434:	f7ff ff56 	bl	800f2e4 <LL_RCC_GetRTCClockSource>
 800f438:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f43e:	69ba      	ldr	r2, [r7, #24]
 800f440:	429a      	cmp	r2, r3
 800f442:	d03c      	beq.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f444:	f7fe fb98 	bl	800db78 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d105      	bne.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff ff30 	bl	800f2b8 <LL_RCC_SetRTCClockSource>
 800f458:	e02e      	b.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800f45a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f462:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800f464:	f7ff ff4b 	bl	800f2fe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800f468:	f7ff ff5a 	bl	800f320 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f476:	4313      	orrs	r3, r2
 800f478:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800f47a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800f484:	f7ff fdf0 	bl	800f068 <LL_RCC_LSE_IsEnabled>
 800f488:	4603      	mov	r3, r0
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d114      	bne.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f48e:	f7fa fe0b 	bl	800a0a8 <HAL_GetTick>
 800f492:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800f494:	e00b      	b.n	800f4ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f496:	f7fa fe07 	bl	800a0a8 <HAL_GetTick>
 800f49a:	4602      	mov	r2, r0
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	1ad3      	subs	r3, r2, r3
 800f4a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d902      	bls.n	800f4ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800f4a8:	2303      	movs	r3, #3
 800f4aa:	77fb      	strb	r3, [r7, #31]
              break;
 800f4ac:	e004      	b.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800f4ae:	f7ff fded 	bl	800f08c <LL_RCC_LSE_IsReady>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d1ee      	bne.n	800f496 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800f4b8:	7ffb      	ldrb	r3, [r7, #31]
 800f4ba:	77bb      	strb	r3, [r7, #30]
 800f4bc:	e001      	b.n	800f4c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4be:	7ffb      	ldrb	r3, [r7, #31]
 800f4c0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f003 0301 	and.w	r3, r3, #1
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d004      	beq.n	800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	699b      	ldr	r3, [r3, #24]
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7ff fe2a 	bl	800f12c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f003 0302 	and.w	r3, r3, #2
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d004      	beq.n	800f4ee <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	69db      	ldr	r3, [r3, #28]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7ff fe35 	bl	800f158 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f003 0310 	and.w	r3, r3, #16
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d004      	beq.n	800f504 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7ff fe5d 	bl	800f1be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f003 0320 	and.w	r3, r3, #32
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d004      	beq.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f514:	4618      	mov	r0, r3
 800f516:	f7ff fe52 	bl	800f1be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f003 0304 	and.w	r3, r3, #4
 800f522:	2b00      	cmp	r3, #0
 800f524:	d004      	beq.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6a1b      	ldr	r3, [r3, #32]
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7ff fe2a 	bl	800f184 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f003 0308 	and.w	r3, r3, #8
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d004      	beq.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f540:	4618      	mov	r0, r3
 800f542:	f7ff fe1f 	bl	800f184 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d022      	beq.n	800f598 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f556:	4618      	mov	r0, r3
 800f558:	f7ff fe8d 	bl	800f276 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f560:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f564:	d107      	bne.n	800f576 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800f566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f570:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f574:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f57a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f57e:	d10b      	bne.n	800f598 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	3304      	adds	r3, #4
 800f584:	4618      	mov	r0, r3
 800f586:	f000 f8dd 	bl	800f744 <RCCEx_PLLSAI1_ConfigNQ>
 800f58a:	4603      	mov	r3, r0
 800f58c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f58e:	7ffb      	ldrb	r3, [r7, #31]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d001      	beq.n	800f598 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800f594:	7ffb      	ldrb	r3, [r7, #31]
 800f596:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d02b      	beq.n	800f5fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5ac:	d008      	beq.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f5b6:	d003      	beq.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d105      	bne.n	800f5cc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7ff fe2a 	bl	800f21e <LL_RCC_SetRNGClockSource>
 800f5ca:	e00a      	b.n	800f5e2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f5d4:	60fb      	str	r3, [r7, #12]
 800f5d6:	2000      	movs	r0, #0
 800f5d8:	f7ff fe21 	bl	800f21e <LL_RCC_SetRNGClockSource>
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f7ff fe34 	bl	800f24a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5e6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800f5ea:	d107      	bne.n	800f5fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800f5ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5f0:	68db      	ldr	r3, [r3, #12]
 800f5f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f5f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f5fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f604:	2b00      	cmp	r3, #0
 800f606:	d022      	beq.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7ff fe3d 	bl	800f28c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f61a:	d107      	bne.n	800f62c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800f61c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f62a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f634:	d10b      	bne.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	3304      	adds	r3, #4
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 f8dd 	bl	800f7fa <RCCEx_PLLSAI1_ConfigNR>
 800f640:	4603      	mov	r3, r0
 800f642:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f644:	7ffb      	ldrb	r3, [r7, #31]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d001      	beq.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800f64a:	7ffb      	ldrb	r3, [r7, #31]
 800f64c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f656:	2b00      	cmp	r3, #0
 800f658:	d004      	beq.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f65e:	4618      	mov	r0, r3
 800f660:	f7ff fd26 	bl	800f0b0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d009      	beq.n	800f684 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f674:	4618      	mov	r0, r3
 800f676:	f7ff fd45 	bl	800f104 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f67e:	4618      	mov	r0, r3
 800f680:	f7ff fd2c 	bl	800f0dc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800f684:	7fbb      	ldrb	r3, [r7, #30]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3720      	adds	r7, #32
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b084      	sub	sp, #16
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f696:	2300      	movs	r3, #0
 800f698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f69a:	f7ff fe61 	bl	800f360 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f69e:	f7fa fd03 	bl	800a0a8 <HAL_GetTick>
 800f6a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f6a4:	e009      	b.n	800f6ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f6a6:	f7fa fcff 	bl	800a0a8 <HAL_GetTick>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	1ad3      	subs	r3, r2, r3
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d902      	bls.n	800f6ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800f6b4:	2303      	movs	r3, #3
 800f6b6:	73fb      	strb	r3, [r7, #15]
      break;
 800f6b8:	e004      	b.n	800f6c4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f6ba:	f7ff fe60 	bl	800f37e <LL_RCC_PLLSAI1_IsReady>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d1f0      	bne.n	800f6a6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800f6c4:	7bfb      	ldrb	r3, [r7, #15]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d137      	bne.n	800f73a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f6ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6ce:	691b      	ldr	r3, [r3, #16]
 800f6d0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	021b      	lsls	r3, r3, #8
 800f6da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800f6e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6e6:	691b      	ldr	r3, [r3, #16]
 800f6e8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f6f8:	f7ff fe23 	bl	800f342 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f6fc:	f7fa fcd4 	bl	800a0a8 <HAL_GetTick>
 800f700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f702:	e009      	b.n	800f718 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f704:	f7fa fcd0 	bl	800a0a8 <HAL_GetTick>
 800f708:	4602      	mov	r2, r0
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	1ad3      	subs	r3, r2, r3
 800f70e:	2b02      	cmp	r3, #2
 800f710:	d902      	bls.n	800f718 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800f712:	2303      	movs	r3, #3
 800f714:	73fb      	strb	r3, [r7, #15]
        break;
 800f716:	e004      	b.n	800f722 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f718:	f7ff fe31 	bl	800f37e <LL_RCC_PLLSAI1_IsReady>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b01      	cmp	r3, #1
 800f720:	d1f0      	bne.n	800f704 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800f722:	7bfb      	ldrb	r3, [r7, #15]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d108      	bne.n	800f73a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f72c:	691a      	ldr	r2, [r3, #16]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	691b      	ldr	r3, [r3, #16]
 800f732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f736:	4313      	orrs	r3, r2
 800f738:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3710      	adds	r7, #16
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f74c:	2300      	movs	r3, #0
 800f74e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f750:	f7ff fe06 	bl	800f360 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f754:	f7fa fca8 	bl	800a0a8 <HAL_GetTick>
 800f758:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f75a:	e009      	b.n	800f770 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f75c:	f7fa fca4 	bl	800a0a8 <HAL_GetTick>
 800f760:	4602      	mov	r2, r0
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	1ad3      	subs	r3, r2, r3
 800f766:	2b02      	cmp	r3, #2
 800f768:	d902      	bls.n	800f770 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800f76a:	2303      	movs	r3, #3
 800f76c:	73fb      	strb	r3, [r7, #15]
      break;
 800f76e:	e004      	b.n	800f77a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f770:	f7ff fe05 	bl	800f37e <LL_RCC_PLLSAI1_IsReady>
 800f774:	4603      	mov	r3, r0
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1f0      	bne.n	800f75c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800f77a:	7bfb      	ldrb	r3, [r7, #15]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d137      	bne.n	800f7f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f784:	691b      	ldr	r3, [r3, #16]
 800f786:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	021b      	lsls	r3, r3, #8
 800f790:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f794:	4313      	orrs	r3, r2
 800f796:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800f798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f79c:	691b      	ldr	r3, [r3, #16]
 800f79e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	689b      	ldr	r3, [r3, #8]
 800f7a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f7aa:	4313      	orrs	r3, r2
 800f7ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f7ae:	f7ff fdc8 	bl	800f342 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f7b2:	f7fa fc79 	bl	800a0a8 <HAL_GetTick>
 800f7b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f7b8:	e009      	b.n	800f7ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f7ba:	f7fa fc75 	bl	800a0a8 <HAL_GetTick>
 800f7be:	4602      	mov	r2, r0
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	1ad3      	subs	r3, r2, r3
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	d902      	bls.n	800f7ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	73fb      	strb	r3, [r7, #15]
        break;
 800f7cc:	e004      	b.n	800f7d8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f7ce:	f7ff fdd6 	bl	800f37e <LL_RCC_PLLSAI1_IsReady>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d1f0      	bne.n	800f7ba <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800f7d8:	7bfb      	ldrb	r3, [r7, #15]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d108      	bne.n	800f7f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f7de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7e2:	691a      	ldr	r2, [r3, #16]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	691b      	ldr	r3, [r3, #16]
 800f7e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f7ec:	4313      	orrs	r3, r2
 800f7ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}

0800f7fa <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f7fa:	b580      	push	{r7, lr}
 800f7fc:	b084      	sub	sp, #16
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f802:	2300      	movs	r3, #0
 800f804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f806:	f7ff fdab 	bl	800f360 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f80a:	f7fa fc4d 	bl	800a0a8 <HAL_GetTick>
 800f80e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f810:	e009      	b.n	800f826 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f812:	f7fa fc49 	bl	800a0a8 <HAL_GetTick>
 800f816:	4602      	mov	r2, r0
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	1ad3      	subs	r3, r2, r3
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	d902      	bls.n	800f826 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800f820:	2303      	movs	r3, #3
 800f822:	73fb      	strb	r3, [r7, #15]
      break;
 800f824:	e004      	b.n	800f830 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f826:	f7ff fdaa 	bl	800f37e <LL_RCC_PLLSAI1_IsReady>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d1f0      	bne.n	800f812 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800f830:	7bfb      	ldrb	r3, [r7, #15]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d137      	bne.n	800f8a6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f83a:	691b      	ldr	r3, [r3, #16]
 800f83c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	021b      	lsls	r3, r3, #8
 800f846:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f84a:	4313      	orrs	r3, r2
 800f84c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800f84e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f852:	691b      	ldr	r3, [r3, #16]
 800f854:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f860:	4313      	orrs	r3, r2
 800f862:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f864:	f7ff fd6d 	bl	800f342 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f868:	f7fa fc1e 	bl	800a0a8 <HAL_GetTick>
 800f86c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f86e:	e009      	b.n	800f884 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f870:	f7fa fc1a 	bl	800a0a8 <HAL_GetTick>
 800f874:	4602      	mov	r2, r0
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	1ad3      	subs	r3, r2, r3
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	d902      	bls.n	800f884 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800f87e:	2303      	movs	r3, #3
 800f880:	73fb      	strb	r3, [r7, #15]
        break;
 800f882:	e004      	b.n	800f88e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f884:	f7ff fd7b 	bl	800f37e <LL_RCC_PLLSAI1_IsReady>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d1f0      	bne.n	800f870 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800f88e:	7bfb      	ldrb	r3, [r7, #15]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d108      	bne.n	800f8a6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f898:	691a      	ldr	r2, [r3, #16]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	691b      	ldr	r3, [r3, #16]
 800f89e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f8a2:	4313      	orrs	r3, r2
 800f8a4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3710      	adds	r7, #16
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d101      	bne.n	800f8c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e07a      	b.n	800f9bc <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d106      	bne.n	800f8e0 <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7f3 fa60 	bl	8002da0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2202      	movs	r2, #2
 800f8e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	68db      	ldr	r3, [r3, #12]
 800f8ee:	f003 0310 	and.w	r3, r3, #16
 800f8f2:	2b10      	cmp	r3, #16
 800f8f4:	d058      	beq.n	800f9a8 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	22ca      	movs	r2, #202	@ 0xca
 800f8fc:	625a      	str	r2, [r3, #36]	@ 0x24
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	2253      	movs	r2, #83	@ 0x53
 800f904:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 f882 	bl	800fa10 <RTC_EnterInitMode>
 800f90c:	4603      	mov	r3, r0
 800f90e:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800f910:	7bfb      	ldrb	r3, [r7, #15]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d12c      	bne.n	800f970 <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	689b      	ldr	r3, [r3, #8]
 800f91c:	687a      	ldr	r2, [r7, #4]
 800f91e:	6812      	ldr	r2, [r2, #0]
 800f920:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f928:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	6899      	ldr	r1, [r3, #8]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	685a      	ldr	r2, [r3, #4]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	691b      	ldr	r3, [r3, #16]
 800f938:	431a      	orrs	r2, r3
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	699b      	ldr	r3, [r3, #24]
 800f93e:	431a      	orrs	r2, r3
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	430a      	orrs	r2, r1
 800f946:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	68d2      	ldr	r2, [r2, #12]
 800f950:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	6919      	ldr	r1, [r3, #16]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	689b      	ldr	r3, [r3, #8]
 800f95c:	041a      	lsls	r2, r3, #16
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	430a      	orrs	r2, r1
 800f964:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f000 f88a 	bl	800fa80 <RTC_ExitInitMode>
 800f96c:	4603      	mov	r3, r0
 800f96e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800f970:	7bfb      	ldrb	r3, [r7, #15]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d113      	bne.n	800f99e <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f022 0203 	bic.w	r2, r2, #3
 800f984:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	69da      	ldr	r2, [r3, #28]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	695b      	ldr	r3, [r3, #20]
 800f994:	431a      	orrs	r2, r3
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	430a      	orrs	r2, r1
 800f99c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	22ff      	movs	r2, #255	@ 0xff
 800f9a4:	625a      	str	r2, [r3, #36]	@ 0x24
 800f9a6:	e001      	b.n	800f9ac <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800f9ac:	7bfb      	ldrb	r3, [r7, #15]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d103      	bne.n	800f9ba <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800f9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a0d      	ldr	r2, [pc, #52]	@ (800fa0c <HAL_RTC_WaitForSynchro+0x48>)
 800f9d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f9d8:	f7fa fb66 	bl	800a0a8 <HAL_GetTick>
 800f9dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f9de:	e009      	b.n	800f9f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f9e0:	f7fa fb62 	bl	800a0a8 <HAL_GetTick>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	1ad3      	subs	r3, r2, r3
 800f9ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f9ee:	d901      	bls.n	800f9f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800f9f0:	2303      	movs	r3, #3
 800f9f2:	e007      	b.n	800fa04 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	68db      	ldr	r3, [r3, #12]
 800f9fa:	f003 0320 	and.w	r3, r3, #32
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d0ee      	beq.n	800f9e0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800fa02:	2300      	movs	r3, #0
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3710      	adds	r7, #16
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	0001ff5f 	.word	0x0001ff5f

0800fa10 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d123      	bne.n	800fa76 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	68da      	ldr	r2, [r3, #12]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800fa3c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800fa3e:	f7fa fb33 	bl	800a0a8 <HAL_GetTick>
 800fa42:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800fa44:	e00d      	b.n	800fa62 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fa46:	f7fa fb2f 	bl	800a0a8 <HAL_GetTick>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	1ad3      	subs	r3, r2, r3
 800fa50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fa54:	d905      	bls.n	800fa62 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2204      	movs	r2, #4
 800fa5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d102      	bne.n	800fa76 <RTC_EnterInitMode+0x66>
 800fa70:	7bfb      	ldrb	r3, [r7, #15]
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d1e7      	bne.n	800fa46 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800fa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3710      	adds	r7, #16
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	68da      	ldr	r2, [r3, #12]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fa9a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	f003 0320 	and.w	r3, r3, #32
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d10b      	bne.n	800fac2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7ff ff8a 	bl	800f9c4 <HAL_RTC_WaitForSynchro>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d005      	beq.n	800fac2 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2204      	movs	r2, #4
 800faba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800fabe:	2301      	movs	r3, #1
 800fac0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800fac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800facc:	b480      	push	{r7}
 800face:	b087      	sub	sp, #28
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800fad8:	4b5f      	ldr	r3, [pc, #380]	@ (800fc58 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4a5f      	ldr	r2, [pc, #380]	@ (800fc5c <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800fade:	fba2 2303 	umull	r2, r3, r2, r3
 800fae2:	0adb      	lsrs	r3, r3, #11
 800fae4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fae8:	fb02 f303 	mul.w	r3, r2, r3
 800faec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d101      	bne.n	800fafc <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 800faf8:	2302      	movs	r3, #2
 800fafa:	e0a7      	b.n	800fc4c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2201      	movs	r2, #1
 800fb00:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	2202      	movs	r2, #2
 800fb08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	22ca      	movs	r2, #202	@ 0xca
 800fb12:	625a      	str	r2, [r3, #36]	@ 0x24
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2253      	movs	r2, #83	@ 0x53
 800fb1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	689b      	ldr	r3, [r3, #8]
 800fb22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d01a      	beq.n	800fb60 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	3b01      	subs	r3, #1
 800fb2e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d10d      	bne.n	800fb52 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	22ff      	movs	r2, #255	@ 0xff
 800fb3c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2203      	movs	r2, #3
 800fb42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800fb4e:	2303      	movs	r3, #3
 800fb50:	e07c      	b.n	800fc4c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	f003 0304 	and.w	r3, r3, #4
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d1e4      	bne.n	800fb2a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	689a      	ldr	r2, [r3, #8]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fb6e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	b2da      	uxtb	r2, r3
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800fb80:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800fb82:	4b35      	ldr	r3, [pc, #212]	@ (800fc58 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	4a35      	ldr	r2, [pc, #212]	@ (800fc5c <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800fb88:	fba2 2303 	umull	r2, r3, r2, r3
 800fb8c:	0adb      	lsrs	r3, r3, #11
 800fb8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fb92:	fb02 f303 	mul.w	r3, r2, r3
 800fb96:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	3b01      	subs	r3, #1
 800fb9c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10d      	bne.n	800fbc0 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	22ff      	movs	r2, #255	@ 0xff
 800fbaa:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2203      	movs	r2, #3
 800fbb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800fbbc:	2303      	movs	r3, #3
 800fbbe:	e045      	b.n	800fc4c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	f003 0304 	and.w	r3, r3, #4
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d0e4      	beq.n	800fb98 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	689a      	ldr	r2, [r3, #8]
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f022 0207 	bic.w	r2, r2, #7
 800fbdc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	6899      	ldr	r1, [r3, #8]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	687a      	ldr	r2, [r7, #4]
 800fbea:	430a      	orrs	r2, r1
 800fbec:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800fbf6:	4b1a      	ldr	r3, [pc, #104]	@ (800fc60 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800fbf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbfc:	4a18      	ldr	r2, [pc, #96]	@ (800fc60 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800fbfe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fc02:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800fc06:	4b16      	ldr	r3, [pc, #88]	@ (800fc60 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4a15      	ldr	r2, [pc, #84]	@ (800fc60 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800fc0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fc10:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	689a      	ldr	r2, [r3, #8]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fc20:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	689a      	ldr	r2, [r3, #8]
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fc30:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	22ff      	movs	r2, #255	@ 0xff
 800fc38:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800fc4a:	2300      	movs	r3, #0
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	371c      	adds	r7, #28
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr
 800fc58:	20000074 	.word	0x20000074
 800fc5c:	10624dd3 	.word	0x10624dd3
 800fc60:	58000800 	.word	0x58000800

0800fc64 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d101      	bne.n	800fc7e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 800fc7a:	2302      	movs	r3, #2
 800fc7c:	e04d      	b.n	800fd1a <HAL_RTCEx_DeactivateWakeUpTimer+0xb6>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2201      	movs	r2, #1
 800fc82:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2202      	movs	r2, #2
 800fc8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	22ca      	movs	r2, #202	@ 0xca
 800fc94:	625a      	str	r2, [r3, #36]	@ 0x24
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2253      	movs	r2, #83	@ 0x53
 800fc9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	689a      	ldr	r2, [r3, #8]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fcac:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	689a      	ldr	r2, [r3, #8]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fcbc:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800fcbe:	f7fa f9f3 	bl	800a0a8 <HAL_GetTick>
 800fcc2:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800fcc4:	e015      	b.n	800fcf2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fcc6:	f7fa f9ef 	bl	800a0a8 <HAL_GetTick>
 800fcca:	4602      	mov	r2, r0
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fcd4:	d90d      	bls.n	800fcf2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	22ff      	movs	r2, #255	@ 0xff
 800fcdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2203      	movs	r2, #3
 800fce2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2200      	movs	r2, #0
 800fcea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800fcee:	2303      	movs	r3, #3
 800fcf0:	e013      	b.n	800fd1a <HAL_RTCEx_DeactivateWakeUpTimer+0xb6>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	f003 0304 	and.w	r3, r3, #4
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d0e2      	beq.n	800fcc6 <HAL_RTCEx_DeactivateWakeUpTimer+0x62>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	22ff      	movs	r2, #255	@ 0xff
 800fd06:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3710      	adds	r7, #16
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
	...

0800fd24 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800fd2c:	4b0f      	ldr	r3, [pc, #60]	@ (800fd6c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800fd2e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800fd32:	60da      	str	r2, [r3, #12]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00b      	beq.n	800fd5a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	b2da      	uxtb	r2, r3
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800fd52:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 f80b 	bl	800fd70 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800fd62:	bf00      	nop
 800fd64:	3708      	adds	r7, #8
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	58000800 	.word	0x58000800

0800fd70 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800fd78:	bf00      	nop
 800fd7a:	370c      	adds	r7, #12
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d101      	bne.n	800fd96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	e095      	b.n	800fec2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d108      	bne.n	800fdb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fda6:	d009      	beq.n	800fdbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	61da      	str	r2, [r3, #28]
 800fdae:	e005      	b.n	800fdbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d106      	bne.n	800fddc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f7f3 f888 	bl	8002eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2202      	movs	r2, #2
 800fde0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fdf2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800fdfc:	d902      	bls.n	800fe04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	60fb      	str	r3, [r7, #12]
 800fe02:	e002      	b.n	800fe0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fe04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800fe12:	d007      	beq.n	800fe24 <HAL_SPI_Init+0xa0>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800fe1c:	d002      	beq.n	800fe24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2200      	movs	r2, #0
 800fe22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	689b      	ldr	r3, [r3, #8]
 800fe30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800fe34:	431a      	orrs	r2, r3
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	691b      	ldr	r3, [r3, #16]
 800fe3a:	f003 0302 	and.w	r3, r3, #2
 800fe3e:	431a      	orrs	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	695b      	ldr	r3, [r3, #20]
 800fe44:	f003 0301 	and.w	r3, r3, #1
 800fe48:	431a      	orrs	r2, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	699b      	ldr	r3, [r3, #24]
 800fe4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fe52:	431a      	orrs	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	69db      	ldr	r3, [r3, #28]
 800fe58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fe5c:	431a      	orrs	r2, r3
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a1b      	ldr	r3, [r3, #32]
 800fe62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe66:	ea42 0103 	orr.w	r1, r2, r3
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	430a      	orrs	r2, r1
 800fe78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	699b      	ldr	r3, [r3, #24]
 800fe7e:	0c1b      	lsrs	r3, r3, #16
 800fe80:	f003 0204 	and.w	r2, r3, #4
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe88:	f003 0310 	and.w	r3, r3, #16
 800fe8c:	431a      	orrs	r2, r3
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe92:	f003 0308 	and.w	r3, r3, #8
 800fe96:	431a      	orrs	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	68db      	ldr	r3, [r3, #12]
 800fe9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800fea0:	ea42 0103 	orr.w	r1, r2, r3
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	430a      	orrs	r2, r1
 800feb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2200      	movs	r2, #0
 800feb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2201      	movs	r2, #1
 800febc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800fec0:	2300      	movs	r3, #0
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3710      	adds	r7, #16
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}

0800feca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800feca:	b580      	push	{r7, lr}
 800fecc:	b088      	sub	sp, #32
 800fece:	af00      	add	r7, sp, #0
 800fed0:	60f8      	str	r0, [r7, #12]
 800fed2:	60b9      	str	r1, [r7, #8]
 800fed4:	603b      	str	r3, [r7, #0]
 800fed6:	4613      	mov	r3, r2
 800fed8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800feda:	f7fa f8e5 	bl	800a0a8 <HAL_GetTick>
 800fede:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800fee0:	88fb      	ldrh	r3, [r7, #6]
 800fee2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800feea:	b2db      	uxtb	r3, r3
 800feec:	2b01      	cmp	r3, #1
 800feee:	d001      	beq.n	800fef4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800fef0:	2302      	movs	r3, #2
 800fef2:	e15c      	b.n	80101ae <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d002      	beq.n	800ff00 <HAL_SPI_Transmit+0x36>
 800fefa:	88fb      	ldrh	r3, [r7, #6]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d101      	bne.n	800ff04 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800ff00:	2301      	movs	r3, #1
 800ff02:	e154      	b.n	80101ae <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d101      	bne.n	800ff12 <HAL_SPI_Transmit+0x48>
 800ff0e:	2302      	movs	r3, #2
 800ff10:	e14d      	b.n	80101ae <HAL_SPI_Transmit+0x2e4>
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2201      	movs	r2, #1
 800ff16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2203      	movs	r2, #3
 800ff1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	2200      	movs	r2, #0
 800ff26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	68ba      	ldr	r2, [r7, #8]
 800ff2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	88fa      	ldrh	r2, [r7, #6]
 800ff32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	88fa      	ldrh	r2, [r7, #6]
 800ff38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2200      	movs	r2, #0
 800ff44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2200      	movs	r2, #0
 800ff54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	689b      	ldr	r3, [r3, #8]
 800ff60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff64:	d10f      	bne.n	800ff86 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ff74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ff84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff90:	2b40      	cmp	r3, #64	@ 0x40
 800ff92:	d007      	beq.n	800ffa4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	681a      	ldr	r2, [r3, #0]
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ffa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ffac:	d952      	bls.n	8010054 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d002      	beq.n	800ffbc <HAL_SPI_Transmit+0xf2>
 800ffb6:	8b7b      	ldrh	r3, [r7, #26]
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d145      	bne.n	8010048 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffc0:	881a      	ldrh	r2, [r3, #0]
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffcc:	1c9a      	adds	r2, r3, #2
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ffe0:	e032      	b.n	8010048 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	f003 0302 	and.w	r3, r3, #2
 800ffec:	2b02      	cmp	r3, #2
 800ffee:	d112      	bne.n	8010016 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fff4:	881a      	ldrh	r2, [r3, #0]
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010000:	1c9a      	adds	r2, r3, #2
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801000a:	b29b      	uxth	r3, r3
 801000c:	3b01      	subs	r3, #1
 801000e:	b29a      	uxth	r2, r3
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010014:	e018      	b.n	8010048 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010016:	f7fa f847 	bl	800a0a8 <HAL_GetTick>
 801001a:	4602      	mov	r2, r0
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	1ad3      	subs	r3, r2, r3
 8010020:	683a      	ldr	r2, [r7, #0]
 8010022:	429a      	cmp	r2, r3
 8010024:	d803      	bhi.n	801002e <HAL_SPI_Transmit+0x164>
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801002c:	d102      	bne.n	8010034 <HAL_SPI_Transmit+0x16a>
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d109      	bne.n	8010048 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2201      	movs	r2, #1
 8010038:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	2200      	movs	r2, #0
 8010040:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8010044:	2303      	movs	r3, #3
 8010046:	e0b2      	b.n	80101ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801004c:	b29b      	uxth	r3, r3
 801004e:	2b00      	cmp	r3, #0
 8010050:	d1c7      	bne.n	800ffe2 <HAL_SPI_Transmit+0x118>
 8010052:	e083      	b.n	801015c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d002      	beq.n	8010062 <HAL_SPI_Transmit+0x198>
 801005c:	8b7b      	ldrh	r3, [r7, #26]
 801005e:	2b01      	cmp	r3, #1
 8010060:	d177      	bne.n	8010152 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010066:	b29b      	uxth	r3, r3
 8010068:	2b01      	cmp	r3, #1
 801006a:	d912      	bls.n	8010092 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010070:	881a      	ldrh	r2, [r3, #0]
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801007c:	1c9a      	adds	r2, r3, #2
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010086:	b29b      	uxth	r3, r3
 8010088:	3b02      	subs	r3, #2
 801008a:	b29a      	uxth	r2, r3
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010090:	e05f      	b.n	8010152 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	330c      	adds	r3, #12
 801009c:	7812      	ldrb	r2, [r2, #0]
 801009e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100a4:	1c5a      	adds	r2, r3, #1
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	3b01      	subs	r3, #1
 80100b2:	b29a      	uxth	r2, r3
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80100b8:	e04b      	b.n	8010152 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	689b      	ldr	r3, [r3, #8]
 80100c0:	f003 0302 	and.w	r3, r3, #2
 80100c4:	2b02      	cmp	r3, #2
 80100c6:	d12b      	bne.n	8010120 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80100cc:	b29b      	uxth	r3, r3
 80100ce:	2b01      	cmp	r3, #1
 80100d0:	d912      	bls.n	80100f8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100d6:	881a      	ldrh	r2, [r3, #0]
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100e2:	1c9a      	adds	r2, r3, #2
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	3b02      	subs	r3, #2
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80100f6:	e02c      	b.n	8010152 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	330c      	adds	r3, #12
 8010102:	7812      	ldrb	r2, [r2, #0]
 8010104:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801010a:	1c5a      	adds	r2, r3, #1
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010114:	b29b      	uxth	r3, r3
 8010116:	3b01      	subs	r3, #1
 8010118:	b29a      	uxth	r2, r3
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801011e:	e018      	b.n	8010152 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010120:	f7f9 ffc2 	bl	800a0a8 <HAL_GetTick>
 8010124:	4602      	mov	r2, r0
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	1ad3      	subs	r3, r2, r3
 801012a:	683a      	ldr	r2, [r7, #0]
 801012c:	429a      	cmp	r2, r3
 801012e:	d803      	bhi.n	8010138 <HAL_SPI_Transmit+0x26e>
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010136:	d102      	bne.n	801013e <HAL_SPI_Transmit+0x274>
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d109      	bne.n	8010152 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2201      	movs	r2, #1
 8010142:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2200      	movs	r2, #0
 801014a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 801014e:	2303      	movs	r3, #3
 8010150:	e02d      	b.n	80101ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010156:	b29b      	uxth	r3, r3
 8010158:	2b00      	cmp	r3, #0
 801015a:	d1ae      	bne.n	80100ba <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801015c:	69fa      	ldr	r2, [r7, #28]
 801015e:	6839      	ldr	r1, [r7, #0]
 8010160:	68f8      	ldr	r0, [r7, #12]
 8010162:	f000 fa67 	bl	8010634 <SPI_EndRxTxTransaction>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d002      	beq.n	8010172 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2220      	movs	r2, #32
 8010170:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d10a      	bne.n	8010190 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801017a:	2300      	movs	r3, #0
 801017c:	617b      	str	r3, [r7, #20]
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	617b      	str	r3, [r7, #20]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	689b      	ldr	r3, [r3, #8]
 801018c:	617b      	str	r3, [r7, #20]
 801018e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2201      	movs	r2, #1
 8010194:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2200      	movs	r2, #0
 801019c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d001      	beq.n	80101ac <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80101a8:	2301      	movs	r3, #1
 80101aa:	e000      	b.n	80101ae <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80101ac:	2300      	movs	r3, #0
  }
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3720      	adds	r7, #32
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
	...

080101b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b088      	sub	sp, #32
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	689b      	ldr	r3, [r3, #8]
 80101ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	099b      	lsrs	r3, r3, #6
 80101d4:	f003 0301 	and.w	r3, r3, #1
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d10f      	bne.n	80101fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80101dc:	69bb      	ldr	r3, [r7, #24]
 80101de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00a      	beq.n	80101fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	099b      	lsrs	r3, r3, #6
 80101ea:	f003 0301 	and.w	r3, r3, #1
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d004      	beq.n	80101fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	4798      	blx	r3
    return;
 80101fa:	e0d7      	b.n	80103ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	085b      	lsrs	r3, r3, #1
 8010200:	f003 0301 	and.w	r3, r3, #1
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00a      	beq.n	801021e <HAL_SPI_IRQHandler+0x66>
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	09db      	lsrs	r3, r3, #7
 801020c:	f003 0301 	and.w	r3, r3, #1
 8010210:	2b00      	cmp	r3, #0
 8010212:	d004      	beq.n	801021e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	4798      	blx	r3
    return;
 801021c:	e0c6      	b.n	80103ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	095b      	lsrs	r3, r3, #5
 8010222:	f003 0301 	and.w	r3, r3, #1
 8010226:	2b00      	cmp	r3, #0
 8010228:	d10c      	bne.n	8010244 <HAL_SPI_IRQHandler+0x8c>
 801022a:	69bb      	ldr	r3, [r7, #24]
 801022c:	099b      	lsrs	r3, r3, #6
 801022e:	f003 0301 	and.w	r3, r3, #1
 8010232:	2b00      	cmp	r3, #0
 8010234:	d106      	bne.n	8010244 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	0a1b      	lsrs	r3, r3, #8
 801023a:	f003 0301 	and.w	r3, r3, #1
 801023e:	2b00      	cmp	r3, #0
 8010240:	f000 80b4 	beq.w	80103ac <HAL_SPI_IRQHandler+0x1f4>
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	095b      	lsrs	r3, r3, #5
 8010248:	f003 0301 	and.w	r3, r3, #1
 801024c:	2b00      	cmp	r3, #0
 801024e:	f000 80ad 	beq.w	80103ac <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	099b      	lsrs	r3, r3, #6
 8010256:	f003 0301 	and.w	r3, r3, #1
 801025a:	2b00      	cmp	r3, #0
 801025c:	d023      	beq.n	80102a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010264:	b2db      	uxtb	r3, r3
 8010266:	2b03      	cmp	r3, #3
 8010268:	d011      	beq.n	801028e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801026e:	f043 0204 	orr.w	r2, r3, #4
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010276:	2300      	movs	r3, #0
 8010278:	617b      	str	r3, [r7, #20]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	68db      	ldr	r3, [r3, #12]
 8010280:	617b      	str	r3, [r7, #20]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	689b      	ldr	r3, [r3, #8]
 8010288:	617b      	str	r3, [r7, #20]
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	e00b      	b.n	80102a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801028e:	2300      	movs	r3, #0
 8010290:	613b      	str	r3, [r7, #16]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	68db      	ldr	r3, [r3, #12]
 8010298:	613b      	str	r3, [r7, #16]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	613b      	str	r3, [r7, #16]
 80102a2:	693b      	ldr	r3, [r7, #16]
        return;
 80102a4:	e082      	b.n	80103ac <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	095b      	lsrs	r3, r3, #5
 80102aa:	f003 0301 	and.w	r3, r3, #1
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d014      	beq.n	80102dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80102b6:	f043 0201 	orr.w	r2, r3, #1
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80102be:	2300      	movs	r3, #0
 80102c0:	60fb      	str	r3, [r7, #12]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	60fb      	str	r3, [r7, #12]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	681a      	ldr	r2, [r3, #0]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80102d8:	601a      	str	r2, [r3, #0]
 80102da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	0a1b      	lsrs	r3, r3, #8
 80102e0:	f003 0301 	and.w	r3, r3, #1
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d00c      	beq.n	8010302 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80102ec:	f043 0208 	orr.w	r2, r3, #8
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80102f4:	2300      	movs	r3, #0
 80102f6:	60bb      	str	r3, [r7, #8]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	689b      	ldr	r3, [r3, #8]
 80102fe:	60bb      	str	r3, [r7, #8]
 8010300:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010306:	2b00      	cmp	r3, #0
 8010308:	d04f      	beq.n	80103aa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	685a      	ldr	r2, [r3, #4]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010318:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2201      	movs	r2, #1
 801031e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	f003 0302 	and.w	r3, r3, #2
 8010328:	2b00      	cmp	r3, #0
 801032a:	d104      	bne.n	8010336 <HAL_SPI_IRQHandler+0x17e>
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	f003 0301 	and.w	r3, r3, #1
 8010332:	2b00      	cmp	r3, #0
 8010334:	d034      	beq.n	80103a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	685a      	ldr	r2, [r3, #4]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f022 0203 	bic.w	r2, r2, #3
 8010344:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801034a:	2b00      	cmp	r3, #0
 801034c:	d011      	beq.n	8010372 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010352:	4a18      	ldr	r2, [pc, #96]	@ (80103b4 <HAL_SPI_IRQHandler+0x1fc>)
 8010354:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801035a:	4618      	mov	r0, r3
 801035c:	f7fb fc5b 	bl	800bc16 <HAL_DMA_Abort_IT>
 8010360:	4603      	mov	r3, r0
 8010362:	2b00      	cmp	r3, #0
 8010364:	d005      	beq.n	8010372 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801036a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010376:	2b00      	cmp	r3, #0
 8010378:	d016      	beq.n	80103a8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801037e:	4a0d      	ldr	r2, [pc, #52]	@ (80103b4 <HAL_SPI_IRQHandler+0x1fc>)
 8010380:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010386:	4618      	mov	r0, r3
 8010388:	f7fb fc45 	bl	800bc16 <HAL_DMA_Abort_IT>
 801038c:	4603      	mov	r3, r0
 801038e:	2b00      	cmp	r3, #0
 8010390:	d00a      	beq.n	80103a8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010396:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 801039e:	e003      	b.n	80103a8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 f809 	bl	80103b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80103a6:	e000      	b.n	80103aa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80103a8:	bf00      	nop
    return;
 80103aa:	bf00      	nop
  }
}
 80103ac:	3720      	adds	r7, #32
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	080103cd 	.word	0x080103cd

080103b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80103c0:	bf00      	nop
 80103c2:	370c      	adds	r7, #12
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2200      	movs	r2, #0
 80103de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2200      	movs	r2, #0
 80103e6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80103e8:	68f8      	ldr	r0, [r7, #12]
 80103ea:	f7ff ffe5 	bl	80103b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80103ee:	bf00      	nop
 80103f0:	3710      	adds	r7, #16
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
	...

080103f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b088      	sub	sp, #32
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	60f8      	str	r0, [r7, #12]
 8010400:	60b9      	str	r1, [r7, #8]
 8010402:	603b      	str	r3, [r7, #0]
 8010404:	4613      	mov	r3, r2
 8010406:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010408:	f7f9 fe4e 	bl	800a0a8 <HAL_GetTick>
 801040c:	4602      	mov	r2, r0
 801040e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010410:	1a9b      	subs	r3, r3, r2
 8010412:	683a      	ldr	r2, [r7, #0]
 8010414:	4413      	add	r3, r2
 8010416:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010418:	f7f9 fe46 	bl	800a0a8 <HAL_GetTick>
 801041c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801041e:	4b39      	ldr	r3, [pc, #228]	@ (8010504 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	015b      	lsls	r3, r3, #5
 8010424:	0d1b      	lsrs	r3, r3, #20
 8010426:	69fa      	ldr	r2, [r7, #28]
 8010428:	fb02 f303 	mul.w	r3, r2, r3
 801042c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801042e:	e054      	b.n	80104da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010436:	d050      	beq.n	80104da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010438:	f7f9 fe36 	bl	800a0a8 <HAL_GetTick>
 801043c:	4602      	mov	r2, r0
 801043e:	69bb      	ldr	r3, [r7, #24]
 8010440:	1ad3      	subs	r3, r2, r3
 8010442:	69fa      	ldr	r2, [r7, #28]
 8010444:	429a      	cmp	r2, r3
 8010446:	d902      	bls.n	801044e <SPI_WaitFlagStateUntilTimeout+0x56>
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d13d      	bne.n	80104ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	685a      	ldr	r2, [r3, #4]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801045c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010466:	d111      	bne.n	801048c <SPI_WaitFlagStateUntilTimeout+0x94>
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010470:	d004      	beq.n	801047c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	689b      	ldr	r3, [r3, #8]
 8010476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801047a:	d107      	bne.n	801048c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801048a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010494:	d10f      	bne.n	80104b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	681a      	ldr	r2, [r3, #0]
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80104a4:	601a      	str	r2, [r3, #0]
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80104b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2201      	movs	r2, #1
 80104ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2200      	movs	r2, #0
 80104c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80104c6:	2303      	movs	r3, #3
 80104c8:	e017      	b.n	80104fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d101      	bne.n	80104d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80104d0:	2300      	movs	r3, #0
 80104d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	3b01      	subs	r3, #1
 80104d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	689a      	ldr	r2, [r3, #8]
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	4013      	ands	r3, r2
 80104e4:	68ba      	ldr	r2, [r7, #8]
 80104e6:	429a      	cmp	r2, r3
 80104e8:	bf0c      	ite	eq
 80104ea:	2301      	moveq	r3, #1
 80104ec:	2300      	movne	r3, #0
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	461a      	mov	r2, r3
 80104f2:	79fb      	ldrb	r3, [r7, #7]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d19b      	bne.n	8010430 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80104f8:	2300      	movs	r3, #0
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3720      	adds	r7, #32
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	20000074 	.word	0x20000074

08010508 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b08a      	sub	sp, #40	@ 0x28
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
 8010514:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8010516:	2300      	movs	r3, #0
 8010518:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801051a:	f7f9 fdc5 	bl	800a0a8 <HAL_GetTick>
 801051e:	4602      	mov	r2, r0
 8010520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010522:	1a9b      	subs	r3, r3, r2
 8010524:	683a      	ldr	r2, [r7, #0]
 8010526:	4413      	add	r3, r2
 8010528:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 801052a:	f7f9 fdbd 	bl	800a0a8 <HAL_GetTick>
 801052e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	330c      	adds	r3, #12
 8010536:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8010538:	4b3d      	ldr	r3, [pc, #244]	@ (8010630 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	4613      	mov	r3, r2
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	4413      	add	r3, r2
 8010542:	00da      	lsls	r2, r3, #3
 8010544:	1ad3      	subs	r3, r2, r3
 8010546:	0d1b      	lsrs	r3, r3, #20
 8010548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801054a:	fb02 f303 	mul.w	r3, r2, r3
 801054e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8010550:	e060      	b.n	8010614 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8010558:	d107      	bne.n	801056a <SPI_WaitFifoStateUntilTimeout+0x62>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d104      	bne.n	801056a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	b2db      	uxtb	r3, r3
 8010566:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8010568:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010570:	d050      	beq.n	8010614 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010572:	f7f9 fd99 	bl	800a0a8 <HAL_GetTick>
 8010576:	4602      	mov	r2, r0
 8010578:	6a3b      	ldr	r3, [r7, #32]
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801057e:	429a      	cmp	r2, r3
 8010580:	d902      	bls.n	8010588 <SPI_WaitFifoStateUntilTimeout+0x80>
 8010582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010584:	2b00      	cmp	r3, #0
 8010586:	d13d      	bne.n	8010604 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	685a      	ldr	r2, [r3, #4]
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010596:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80105a0:	d111      	bne.n	80105c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80105aa:	d004      	beq.n	80105b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	689b      	ldr	r3, [r3, #8]
 80105b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80105b4:	d107      	bne.n	80105c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80105c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80105ce:	d10f      	bne.n	80105f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80105de:	601a      	str	r2, [r3, #0]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80105ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2201      	movs	r2, #1
 80105f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	2200      	movs	r2, #0
 80105fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8010600:	2303      	movs	r3, #3
 8010602:	e010      	b.n	8010626 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010604:	69bb      	ldr	r3, [r7, #24]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d101      	bne.n	801060e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801060a:	2300      	movs	r3, #0
 801060c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 801060e:	69bb      	ldr	r3, [r7, #24]
 8010610:	3b01      	subs	r3, #1
 8010612:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	689a      	ldr	r2, [r3, #8]
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	4013      	ands	r3, r2
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	429a      	cmp	r2, r3
 8010622:	d196      	bne.n	8010552 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8010624:	2300      	movs	r3, #0
}
 8010626:	4618      	mov	r0, r3
 8010628:	3728      	adds	r7, #40	@ 0x28
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
 801062e:	bf00      	nop
 8010630:	20000074 	.word	0x20000074

08010634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b086      	sub	sp, #24
 8010638:	af02      	add	r7, sp, #8
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	60b9      	str	r1, [r7, #8]
 801063e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	2200      	movs	r2, #0
 8010648:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801064c:	68f8      	ldr	r0, [r7, #12]
 801064e:	f7ff ff5b 	bl	8010508 <SPI_WaitFifoStateUntilTimeout>
 8010652:	4603      	mov	r3, r0
 8010654:	2b00      	cmp	r3, #0
 8010656:	d007      	beq.n	8010668 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801065c:	f043 0220 	orr.w	r2, r3, #32
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8010664:	2303      	movs	r3, #3
 8010666:	e027      	b.n	80106b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	9300      	str	r3, [sp, #0]
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	2200      	movs	r2, #0
 8010670:	2180      	movs	r1, #128	@ 0x80
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f7ff fec0 	bl	80103f8 <SPI_WaitFlagStateUntilTimeout>
 8010678:	4603      	mov	r3, r0
 801067a:	2b00      	cmp	r3, #0
 801067c:	d007      	beq.n	801068e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010682:	f043 0220 	orr.w	r2, r3, #32
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801068a:	2303      	movs	r3, #3
 801068c:	e014      	b.n	80106b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	9300      	str	r3, [sp, #0]
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	2200      	movs	r2, #0
 8010696:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	f7ff ff34 	bl	8010508 <SPI_WaitFifoStateUntilTimeout>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d007      	beq.n	80106b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106aa:	f043 0220 	orr.w	r2, r3, #32
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80106b2:	2303      	movs	r3, #3
 80106b4:	e000      	b.n	80106b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80106b6:	2300      	movs	r3, #0
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3710      	adds	r7, #16
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d101      	bne.n	80106d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80106ce:	2301      	movs	r3, #1
 80106d0:	e049      	b.n	8010766 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d106      	bne.n	80106ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2200      	movs	r2, #0
 80106e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f7f2 ff2e 	bl	8003548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2202      	movs	r2, #2
 80106f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681a      	ldr	r2, [r3, #0]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	3304      	adds	r3, #4
 80106fc:	4619      	mov	r1, r3
 80106fe:	4610      	mov	r0, r2
 8010700:	f000 fb08 	bl	8010d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2201      	movs	r2, #1
 8010708:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2201      	movs	r2, #1
 8010710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2201      	movs	r2, #1
 8010718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2201      	movs	r2, #1
 8010720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2201      	movs	r2, #1
 8010728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2201      	movs	r2, #1
 8010730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2201      	movs	r2, #1
 8010738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2201      	movs	r2, #1
 8010740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2201      	movs	r2, #1
 8010748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2201      	movs	r2, #1
 8010750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2201      	movs	r2, #1
 8010758:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2201      	movs	r2, #1
 8010760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	3708      	adds	r7, #8
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 801076e:	b580      	push	{r7, lr}
 8010770:	b082      	sub	sp, #8
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2202      	movs	r2, #2
 801077a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	6a1b      	ldr	r3, [r3, #32]
 8010784:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 8010788:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 801078c:	2b00      	cmp	r3, #0
 801078e:	d10f      	bne.n	80107b0 <HAL_TIM_Base_DeInit+0x42>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	6a1a      	ldr	r2, [r3, #32]
 8010796:	f240 4344 	movw	r3, #1092	@ 0x444
 801079a:	4013      	ands	r3, r2
 801079c:	2b00      	cmp	r3, #0
 801079e:	d107      	bne.n	80107b0 <HAL_TIM_Base_DeInit+0x42>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f022 0201 	bic.w	r2, r2, #1
 80107ae:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f7f2 fef5 	bl	80035a0 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2200      	movs	r2, #0
 80107c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2200      	movs	r2, #0
 80107ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2200      	movs	r2, #0
 80107d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2200      	movs	r2, #0
 80107e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2200      	movs	r2, #0
 80107ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2200      	movs	r2, #0
 80107fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2200      	movs	r2, #0
 8010802:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2200      	movs	r2, #0
 801080a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801081e:	2300      	movs	r3, #0
}
 8010820:	4618      	mov	r0, r3
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}

08010828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010836:	b2db      	uxtb	r3, r3
 8010838:	2b01      	cmp	r3, #1
 801083a:	d001      	beq.n	8010840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801083c:	2301      	movs	r3, #1
 801083e:	e036      	b.n	80108ae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2202      	movs	r2, #2
 8010844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	68da      	ldr	r2, [r3, #12]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f042 0201 	orr.w	r2, r2, #1
 8010856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a17      	ldr	r2, [pc, #92]	@ (80108bc <HAL_TIM_Base_Start_IT+0x94>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d004      	beq.n	801086c <HAL_TIM_Base_Start_IT+0x44>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801086a:	d115      	bne.n	8010898 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	689a      	ldr	r2, [r3, #8]
 8010872:	4b13      	ldr	r3, [pc, #76]	@ (80108c0 <HAL_TIM_Base_Start_IT+0x98>)
 8010874:	4013      	ands	r3, r2
 8010876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2b06      	cmp	r3, #6
 801087c:	d015      	beq.n	80108aa <HAL_TIM_Base_Start_IT+0x82>
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010884:	d011      	beq.n	80108aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f042 0201 	orr.w	r2, r2, #1
 8010894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010896:	e008      	b.n	80108aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f042 0201 	orr.w	r2, r2, #1
 80108a6:	601a      	str	r2, [r3, #0]
 80108a8:	e000      	b.n	80108ac <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80108ac:	2300      	movs	r3, #0
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3714      	adds	r7, #20
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop
 80108bc:	40012c00 	.word	0x40012c00
 80108c0:	00010007 	.word	0x00010007

080108c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	68da      	ldr	r2, [r3, #12]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f022 0201 	bic.w	r2, r2, #1
 80108da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	6a1b      	ldr	r3, [r3, #32]
 80108e2:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 80108e6:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d10f      	bne.n	801090e <HAL_TIM_Base_Stop_IT+0x4a>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	6a1a      	ldr	r2, [r3, #32]
 80108f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80108f8:	4013      	ands	r3, r2
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d107      	bne.n	801090e <HAL_TIM_Base_Stop_IT+0x4a>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	681a      	ldr	r2, [r3, #0]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f022 0201 	bic.w	r2, r2, #1
 801090c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2201      	movs	r2, #1
 8010912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8010916:	2300      	movs	r3, #0
}
 8010918:	4618      	mov	r0, r3
 801091a:	370c      	adds	r7, #12
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	691b      	ldr	r3, [r3, #16]
 801093a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	f003 0302 	and.w	r3, r3, #2
 8010942:	2b00      	cmp	r3, #0
 8010944:	d020      	beq.n	8010988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	f003 0302 	and.w	r3, r3, #2
 801094c:	2b00      	cmp	r3, #0
 801094e:	d01b      	beq.n	8010988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f06f 0202 	mvn.w	r2, #2
 8010958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2201      	movs	r2, #1
 801095e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	699b      	ldr	r3, [r3, #24]
 8010966:	f003 0303 	and.w	r3, r3, #3
 801096a:	2b00      	cmp	r3, #0
 801096c:	d003      	beq.n	8010976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 f9b2 	bl	8010cd8 <HAL_TIM_IC_CaptureCallback>
 8010974:	e005      	b.n	8010982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f000 f9a4 	bl	8010cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f000 f9b5 	bl	8010cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2200      	movs	r2, #0
 8010986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	f003 0304 	and.w	r3, r3, #4
 801098e:	2b00      	cmp	r3, #0
 8010990:	d020      	beq.n	80109d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f003 0304 	and.w	r3, r3, #4
 8010998:	2b00      	cmp	r3, #0
 801099a:	d01b      	beq.n	80109d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f06f 0204 	mvn.w	r2, #4
 80109a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	2202      	movs	r2, #2
 80109aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	699b      	ldr	r3, [r3, #24]
 80109b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d003      	beq.n	80109c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 f98c 	bl	8010cd8 <HAL_TIM_IC_CaptureCallback>
 80109c0:	e005      	b.n	80109ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 f97e 	bl	8010cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f000 f98f 	bl	8010cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2200      	movs	r2, #0
 80109d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	f003 0308 	and.w	r3, r3, #8
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d020      	beq.n	8010a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f003 0308 	and.w	r3, r3, #8
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d01b      	beq.n	8010a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f06f 0208 	mvn.w	r2, #8
 80109f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2204      	movs	r2, #4
 80109f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	69db      	ldr	r3, [r3, #28]
 80109fe:	f003 0303 	and.w	r3, r3, #3
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d003      	beq.n	8010a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 f966 	bl	8010cd8 <HAL_TIM_IC_CaptureCallback>
 8010a0c:	e005      	b.n	8010a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f000 f958 	bl	8010cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f000 f969 	bl	8010cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	f003 0310 	and.w	r3, r3, #16
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d020      	beq.n	8010a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	f003 0310 	and.w	r3, r3, #16
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d01b      	beq.n	8010a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	f06f 0210 	mvn.w	r2, #16
 8010a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2208      	movs	r2, #8
 8010a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	69db      	ldr	r3, [r3, #28]
 8010a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d003      	beq.n	8010a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 f940 	bl	8010cd8 <HAL_TIM_IC_CaptureCallback>
 8010a58:	e005      	b.n	8010a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 f932 	bl	8010cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f000 f943 	bl	8010cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	f003 0301 	and.w	r3, r3, #1
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d00c      	beq.n	8010a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f003 0301 	and.w	r3, r3, #1
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d007      	beq.n	8010a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f06f 0201 	mvn.w	r2, #1
 8010a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f7f2 f8f8 	bl	8002c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d104      	bne.n	8010aa4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d00c      	beq.n	8010abe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d007      	beq.n	8010abe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8010ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f000 fa9b 	bl	8010ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00c      	beq.n	8010ae2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d007      	beq.n	8010ae2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 fa93 	bl	8011008 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d00c      	beq.n	8010b06 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d007      	beq.n	8010b06 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f000 f8fd 	bl	8010d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	f003 0320 	and.w	r3, r3, #32
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d00c      	beq.n	8010b2a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f003 0320 	and.w	r3, r3, #32
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d007      	beq.n	8010b2a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	f06f 0220 	mvn.w	r2, #32
 8010b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f000 fa5b 	bl	8010fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010b2a:	bf00      	nop
 8010b2c:	3710      	adds	r7, #16
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}

08010b32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010b32:	b580      	push	{r7, lr}
 8010b34:	b084      	sub	sp, #16
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
 8010b3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d101      	bne.n	8010b4e <HAL_TIM_ConfigClockSource+0x1c>
 8010b4a:	2302      	movs	r3, #2
 8010b4c:	e0b6      	b.n	8010cbc <HAL_TIM_ConfigClockSource+0x18a>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2201      	movs	r2, #1
 8010b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2202      	movs	r2, #2
 8010b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	689b      	ldr	r3, [r3, #8]
 8010b64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8010b6c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010b70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010b78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	68ba      	ldr	r2, [r7, #8]
 8010b80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010b8a:	d03e      	beq.n	8010c0a <HAL_TIM_ConfigClockSource+0xd8>
 8010b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010b90:	f200 8087 	bhi.w	8010ca2 <HAL_TIM_ConfigClockSource+0x170>
 8010b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b98:	f000 8086 	beq.w	8010ca8 <HAL_TIM_ConfigClockSource+0x176>
 8010b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ba0:	d87f      	bhi.n	8010ca2 <HAL_TIM_ConfigClockSource+0x170>
 8010ba2:	2b70      	cmp	r3, #112	@ 0x70
 8010ba4:	d01a      	beq.n	8010bdc <HAL_TIM_ConfigClockSource+0xaa>
 8010ba6:	2b70      	cmp	r3, #112	@ 0x70
 8010ba8:	d87b      	bhi.n	8010ca2 <HAL_TIM_ConfigClockSource+0x170>
 8010baa:	2b60      	cmp	r3, #96	@ 0x60
 8010bac:	d050      	beq.n	8010c50 <HAL_TIM_ConfigClockSource+0x11e>
 8010bae:	2b60      	cmp	r3, #96	@ 0x60
 8010bb0:	d877      	bhi.n	8010ca2 <HAL_TIM_ConfigClockSource+0x170>
 8010bb2:	2b50      	cmp	r3, #80	@ 0x50
 8010bb4:	d03c      	beq.n	8010c30 <HAL_TIM_ConfigClockSource+0xfe>
 8010bb6:	2b50      	cmp	r3, #80	@ 0x50
 8010bb8:	d873      	bhi.n	8010ca2 <HAL_TIM_ConfigClockSource+0x170>
 8010bba:	2b40      	cmp	r3, #64	@ 0x40
 8010bbc:	d058      	beq.n	8010c70 <HAL_TIM_ConfigClockSource+0x13e>
 8010bbe:	2b40      	cmp	r3, #64	@ 0x40
 8010bc0:	d86f      	bhi.n	8010ca2 <HAL_TIM_ConfigClockSource+0x170>
 8010bc2:	2b30      	cmp	r3, #48	@ 0x30
 8010bc4:	d064      	beq.n	8010c90 <HAL_TIM_ConfigClockSource+0x15e>
 8010bc6:	2b30      	cmp	r3, #48	@ 0x30
 8010bc8:	d86b      	bhi.n	8010ca2 <HAL_TIM_ConfigClockSource+0x170>
 8010bca:	2b20      	cmp	r3, #32
 8010bcc:	d060      	beq.n	8010c90 <HAL_TIM_ConfigClockSource+0x15e>
 8010bce:	2b20      	cmp	r3, #32
 8010bd0:	d867      	bhi.n	8010ca2 <HAL_TIM_ConfigClockSource+0x170>
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d05c      	beq.n	8010c90 <HAL_TIM_ConfigClockSource+0x15e>
 8010bd6:	2b10      	cmp	r3, #16
 8010bd8:	d05a      	beq.n	8010c90 <HAL_TIM_ConfigClockSource+0x15e>
 8010bda:	e062      	b.n	8010ca2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010bec:	f000 f978 	bl	8010ee0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	689b      	ldr	r3, [r3, #8]
 8010bf6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010bfe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	68ba      	ldr	r2, [r7, #8]
 8010c06:	609a      	str	r2, [r3, #8]
      break;
 8010c08:	e04f      	b.n	8010caa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010c1a:	f000 f961 	bl	8010ee0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	689a      	ldr	r2, [r3, #8]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010c2c:	609a      	str	r2, [r3, #8]
      break;
 8010c2e:	e03c      	b.n	8010caa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	f000 f8d3 	bl	8010de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2150      	movs	r1, #80	@ 0x50
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f000 f92c 	bl	8010ea6 <TIM_ITRx_SetConfig>
      break;
 8010c4e:	e02c      	b.n	8010caa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	f000 f8f2 	bl	8010e46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	2160      	movs	r1, #96	@ 0x60
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f000 f91c 	bl	8010ea6 <TIM_ITRx_SetConfig>
      break;
 8010c6e:	e01c      	b.n	8010caa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	f000 f8b3 	bl	8010de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2140      	movs	r1, #64	@ 0x40
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f000 f90c 	bl	8010ea6 <TIM_ITRx_SetConfig>
      break;
 8010c8e:	e00c      	b.n	8010caa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681a      	ldr	r2, [r3, #0]
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	4619      	mov	r1, r3
 8010c9a:	4610      	mov	r0, r2
 8010c9c:	f000 f903 	bl	8010ea6 <TIM_ITRx_SetConfig>
      break;
 8010ca0:	e003      	b.n	8010caa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8010ca6:	e000      	b.n	8010caa <HAL_TIM_ConfigClockSource+0x178>
      break;
 8010ca8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2201      	movs	r2, #1
 8010cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3710      	adds	r7, #16
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b083      	sub	sp, #12
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010ccc:	bf00      	nop
 8010cce:	370c      	adds	r7, #12
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd6:	4770      	bx	lr

08010cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b083      	sub	sp, #12
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010ce0:	bf00      	nop
 8010ce2:	370c      	adds	r7, #12
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr

08010cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010cf4:	bf00      	nop
 8010cf6:	370c      	adds	r7, #12
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010d08:	bf00      	nop
 8010d0a:	370c      	adds	r7, #12
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b085      	sub	sp, #20
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
 8010d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	4a2d      	ldr	r2, [pc, #180]	@ (8010ddc <TIM_Base_SetConfig+0xc8>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d003      	beq.n	8010d34 <TIM_Base_SetConfig+0x20>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010d32:	d108      	bne.n	8010d46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	68fa      	ldr	r2, [r7, #12]
 8010d42:	4313      	orrs	r3, r2
 8010d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	4a24      	ldr	r2, [pc, #144]	@ (8010ddc <TIM_Base_SetConfig+0xc8>)
 8010d4a:	4293      	cmp	r3, r2
 8010d4c:	d00b      	beq.n	8010d66 <TIM_Base_SetConfig+0x52>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010d54:	d007      	beq.n	8010d66 <TIM_Base_SetConfig+0x52>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	4a21      	ldr	r2, [pc, #132]	@ (8010de0 <TIM_Base_SetConfig+0xcc>)
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d003      	beq.n	8010d66 <TIM_Base_SetConfig+0x52>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	4a20      	ldr	r2, [pc, #128]	@ (8010de4 <TIM_Base_SetConfig+0xd0>)
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d108      	bne.n	8010d78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	4313      	orrs	r3, r2
 8010d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	695b      	ldr	r3, [r3, #20]
 8010d82:	4313      	orrs	r3, r2
 8010d84:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	689a      	ldr	r2, [r3, #8]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	681a      	ldr	r2, [r3, #0]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	4a10      	ldr	r2, [pc, #64]	@ (8010ddc <TIM_Base_SetConfig+0xc8>)
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d007      	beq.n	8010dae <TIM_Base_SetConfig+0x9a>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4a0f      	ldr	r2, [pc, #60]	@ (8010de0 <TIM_Base_SetConfig+0xcc>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d003      	beq.n	8010dae <TIM_Base_SetConfig+0x9a>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	4a0e      	ldr	r2, [pc, #56]	@ (8010de4 <TIM_Base_SetConfig+0xd0>)
 8010daa:	4293      	cmp	r3, r2
 8010dac:	d103      	bne.n	8010db6 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	691a      	ldr	r2, [r3, #16]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f043 0204 	orr.w	r2, r3, #4
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	68fa      	ldr	r2, [r7, #12]
 8010dcc:	601a      	str	r2, [r3, #0]
}
 8010dce:	bf00      	nop
 8010dd0:	3714      	adds	r7, #20
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr
 8010dda:	bf00      	nop
 8010ddc:	40012c00 	.word	0x40012c00
 8010de0:	40014400 	.word	0x40014400
 8010de4:	40014800 	.word	0x40014800

08010de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b087      	sub	sp, #28
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	60f8      	str	r0, [r7, #12]
 8010df0:	60b9      	str	r1, [r7, #8]
 8010df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	6a1b      	ldr	r3, [r3, #32]
 8010df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	6a1b      	ldr	r3, [r3, #32]
 8010dfe:	f023 0201 	bic.w	r2, r3, #1
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	699b      	ldr	r3, [r3, #24]
 8010e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	011b      	lsls	r3, r3, #4
 8010e18:	693a      	ldr	r2, [r7, #16]
 8010e1a:	4313      	orrs	r3, r2
 8010e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	f023 030a 	bic.w	r3, r3, #10
 8010e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010e26:	697a      	ldr	r2, [r7, #20]
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	693a      	ldr	r2, [r7, #16]
 8010e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	697a      	ldr	r2, [r7, #20]
 8010e38:	621a      	str	r2, [r3, #32]
}
 8010e3a:	bf00      	nop
 8010e3c:	371c      	adds	r7, #28
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr

08010e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010e46:	b480      	push	{r7}
 8010e48:	b087      	sub	sp, #28
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	60f8      	str	r0, [r7, #12]
 8010e4e:	60b9      	str	r1, [r7, #8]
 8010e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	6a1b      	ldr	r3, [r3, #32]
 8010e56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	6a1b      	ldr	r3, [r3, #32]
 8010e5c:	f023 0210 	bic.w	r2, r3, #16
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	699b      	ldr	r3, [r3, #24]
 8010e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	031b      	lsls	r3, r3, #12
 8010e76:	693a      	ldr	r2, [r7, #16]
 8010e78:	4313      	orrs	r3, r2
 8010e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010e82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	011b      	lsls	r3, r3, #4
 8010e88:	697a      	ldr	r2, [r7, #20]
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	693a      	ldr	r2, [r7, #16]
 8010e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	697a      	ldr	r2, [r7, #20]
 8010e98:	621a      	str	r2, [r3, #32]
}
 8010e9a:	bf00      	nop
 8010e9c:	371c      	adds	r7, #28
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr

08010ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010ea6:	b480      	push	{r7}
 8010ea8:	b085      	sub	sp, #20
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
 8010eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	689b      	ldr	r3, [r3, #8]
 8010eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010ec2:	683a      	ldr	r2, [r7, #0]
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	4313      	orrs	r3, r2
 8010ec8:	f043 0307 	orr.w	r3, r3, #7
 8010ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	68fa      	ldr	r2, [r7, #12]
 8010ed2:	609a      	str	r2, [r3, #8]
}
 8010ed4:	bf00      	nop
 8010ed6:	3714      	adds	r7, #20
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b087      	sub	sp, #28
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	607a      	str	r2, [r7, #4]
 8010eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	689b      	ldr	r3, [r3, #8]
 8010ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	021a      	lsls	r2, r3, #8
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	431a      	orrs	r2, r3
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	4313      	orrs	r3, r2
 8010f08:	697a      	ldr	r2, [r7, #20]
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	697a      	ldr	r2, [r7, #20]
 8010f12:	609a      	str	r2, [r3, #8]
}
 8010f14:	bf00      	nop
 8010f16:	371c      	adds	r7, #28
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr

08010f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010f20:	b480      	push	{r7}
 8010f22:	b085      	sub	sp, #20
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d101      	bne.n	8010f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010f34:	2302      	movs	r3, #2
 8010f36:	e04a      	b.n	8010fce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2202      	movs	r2, #2
 8010f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	689b      	ldr	r3, [r3, #8]
 8010f56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8010fdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d108      	bne.n	8010f74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010f68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	68fa      	ldr	r2, [r7, #12]
 8010f70:	4313      	orrs	r3, r2
 8010f72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	68fa      	ldr	r2, [r7, #12]
 8010f82:	4313      	orrs	r3, r2
 8010f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	68fa      	ldr	r2, [r7, #12]
 8010f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	4a12      	ldr	r2, [pc, #72]	@ (8010fdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8010f94:	4293      	cmp	r3, r2
 8010f96:	d004      	beq.n	8010fa2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fa0:	d10c      	bne.n	8010fbc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	68ba      	ldr	r2, [r7, #8]
 8010fb0:	4313      	orrs	r3, r2
 8010fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010fcc:	2300      	movs	r3, #0
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3714      	adds	r7, #20
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr
 8010fda:	bf00      	nop
 8010fdc:	40012c00 	.word	0x40012c00

08010fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010fe8:	bf00      	nop
 8010fea:	370c      	adds	r7, #12
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr

08010ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b083      	sub	sp, #12
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010ffc:	bf00      	nop
 8010ffe:	370c      	adds	r7, #12
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr

08011008 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011008:	b480      	push	{r7}
 801100a:	b083      	sub	sp, #12
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011010:	bf00      	nop
 8011012:	370c      	adds	r7, #12
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr

0801101c <LL_RCC_GetUSARTClockSource>:
{
 801101c:	b480      	push	{r7}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8011024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011028:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	4013      	ands	r3, r2
}
 8011030:	4618      	mov	r0, r3
 8011032:	370c      	adds	r7, #12
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr

0801103c <LL_RCC_GetLPUARTClockSource>:
{
 801103c:	b480      	push	{r7}
 801103e:	b083      	sub	sp, #12
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8011044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011048:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	4013      	ands	r3, r2
}
 8011050:	4618      	mov	r0, r3
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr

0801105c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b082      	sub	sp, #8
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d101      	bne.n	801106e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801106a:	2301      	movs	r3, #1
 801106c:	e042      	b.n	80110f4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011074:	2b00      	cmp	r3, #0
 8011076:	d106      	bne.n	8011086 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2200      	movs	r2, #0
 801107c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f7f2 fb41 	bl	8003708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2224      	movs	r2, #36	@ 0x24
 801108a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	681a      	ldr	r2, [r3, #0]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	f022 0201 	bic.w	r2, r2, #1
 801109c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d002      	beq.n	80110ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f000 fdf2 	bl	8011c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f000 fbc7 	bl	8011840 <UART_SetConfig>
 80110b2:	4603      	mov	r3, r0
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d101      	bne.n	80110bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80110b8:	2301      	movs	r3, #1
 80110ba:	e01b      	b.n	80110f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	685a      	ldr	r2, [r3, #4]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80110ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	689a      	ldr	r2, [r3, #8]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80110da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	f042 0201 	orr.w	r2, r2, #1
 80110ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 fe71 	bl	8011dd4 <UART_CheckIdleState>
 80110f2:	4603      	mov	r3, r0
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d101      	bne.n	801110e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 801110a:	2301      	movs	r3, #1
 801110c:	e031      	b.n	8011172 <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2224      	movs	r2, #36	@ 0x24
 8011112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f022 0201 	bic.w	r2, r2, #1
 8011124:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2200      	movs	r2, #0
 801112c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	2200      	movs	r2, #0
 8011134:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	2200      	movs	r2, #0
 801113c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f7f2 fb30 	bl	80037a4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2200      	movs	r2, #0
 8011148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2200      	movs	r2, #0
 8011150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2200      	movs	r2, #0
 8011160:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2200      	movs	r2, #0
 8011166:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2200      	movs	r2, #0
 801116c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011170:	2300      	movs	r3, #0
}
 8011172:	4618      	mov	r0, r3
 8011174:	3708      	adds	r7, #8
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
	...

0801117c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b0ba      	sub	sp, #232	@ 0xe8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	69db      	ldr	r3, [r3, #28]
 801118a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	689b      	ldr	r3, [r3, #8]
 801119e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80111a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80111a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80111aa:	4013      	ands	r3, r2
 80111ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80111b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d11b      	bne.n	80111f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80111b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80111bc:	f003 0320 	and.w	r3, r3, #32
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d015      	beq.n	80111f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80111c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111c8:	f003 0320 	and.w	r3, r3, #32
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d105      	bne.n	80111dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80111d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80111d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d009      	beq.n	80111f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f000 8300 	beq.w	80117e6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	4798      	blx	r3
      }
      return;
 80111ee:	e2fa      	b.n	80117e6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80111f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	f000 8123 	beq.w	8011440 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80111fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80111fe:	4b8d      	ldr	r3, [pc, #564]	@ (8011434 <HAL_UART_IRQHandler+0x2b8>)
 8011200:	4013      	ands	r3, r2
 8011202:	2b00      	cmp	r3, #0
 8011204:	d106      	bne.n	8011214 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011206:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801120a:	4b8b      	ldr	r3, [pc, #556]	@ (8011438 <HAL_UART_IRQHandler+0x2bc>)
 801120c:	4013      	ands	r3, r2
 801120e:	2b00      	cmp	r3, #0
 8011210:	f000 8116 	beq.w	8011440 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011218:	f003 0301 	and.w	r3, r3, #1
 801121c:	2b00      	cmp	r3, #0
 801121e:	d011      	beq.n	8011244 <HAL_UART_IRQHandler+0xc8>
 8011220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011228:	2b00      	cmp	r3, #0
 801122a:	d00b      	beq.n	8011244 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2201      	movs	r2, #1
 8011232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801123a:	f043 0201 	orr.w	r2, r3, #1
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011248:	f003 0302 	and.w	r3, r3, #2
 801124c:	2b00      	cmp	r3, #0
 801124e:	d011      	beq.n	8011274 <HAL_UART_IRQHandler+0xf8>
 8011250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011254:	f003 0301 	and.w	r3, r3, #1
 8011258:	2b00      	cmp	r3, #0
 801125a:	d00b      	beq.n	8011274 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	2202      	movs	r2, #2
 8011262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801126a:	f043 0204 	orr.w	r2, r3, #4
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011278:	f003 0304 	and.w	r3, r3, #4
 801127c:	2b00      	cmp	r3, #0
 801127e:	d011      	beq.n	80112a4 <HAL_UART_IRQHandler+0x128>
 8011280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011284:	f003 0301 	and.w	r3, r3, #1
 8011288:	2b00      	cmp	r3, #0
 801128a:	d00b      	beq.n	80112a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	2204      	movs	r2, #4
 8011292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801129a:	f043 0202 	orr.w	r2, r3, #2
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80112a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80112a8:	f003 0308 	and.w	r3, r3, #8
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d017      	beq.n	80112e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80112b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112b4:	f003 0320 	and.w	r3, r3, #32
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d105      	bne.n	80112c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80112bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80112c0:	4b5c      	ldr	r3, [pc, #368]	@ (8011434 <HAL_UART_IRQHandler+0x2b8>)
 80112c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d00b      	beq.n	80112e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	2208      	movs	r2, #8
 80112ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80112d6:	f043 0208 	orr.w	r2, r3, #8
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80112e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80112e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d012      	beq.n	8011312 <HAL_UART_IRQHandler+0x196>
 80112ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d00c      	beq.n	8011312 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011308:	f043 0220 	orr.w	r2, r3, #32
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011318:	2b00      	cmp	r3, #0
 801131a:	f000 8266 	beq.w	80117ea <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801131e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011322:	f003 0320 	and.w	r3, r3, #32
 8011326:	2b00      	cmp	r3, #0
 8011328:	d013      	beq.n	8011352 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801132a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801132e:	f003 0320 	and.w	r3, r3, #32
 8011332:	2b00      	cmp	r3, #0
 8011334:	d105      	bne.n	8011342 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801133e:	2b00      	cmp	r3, #0
 8011340:	d007      	beq.n	8011352 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011346:	2b00      	cmp	r3, #0
 8011348:	d003      	beq.n	8011352 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011358:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	689b      	ldr	r3, [r3, #8]
 8011362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011366:	2b40      	cmp	r3, #64	@ 0x40
 8011368:	d005      	beq.n	8011376 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801136a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801136e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011372:	2b00      	cmp	r3, #0
 8011374:	d054      	beq.n	8011420 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 fe43 	bl	8012002 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	689b      	ldr	r3, [r3, #8]
 8011382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011386:	2b40      	cmp	r3, #64	@ 0x40
 8011388:	d146      	bne.n	8011418 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	3308      	adds	r3, #8
 8011390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011394:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011398:	e853 3f00 	ldrex	r3, [r3]
 801139c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80113a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80113a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80113a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	3308      	adds	r3, #8
 80113b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80113b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80113ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80113c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80113c6:	e841 2300 	strex	r3, r2, [r1]
 80113ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80113ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d1d9      	bne.n	801138a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d017      	beq.n	8011410 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80113e6:	4a15      	ldr	r2, [pc, #84]	@ (801143c <HAL_UART_IRQHandler+0x2c0>)
 80113e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fa fc10 	bl	800bc16 <HAL_DMA_Abort_IT>
 80113f6:	4603      	mov	r3, r0
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d019      	beq.n	8011430 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801140a:	4610      	mov	r0, r2
 801140c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801140e:	e00f      	b.n	8011430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f000 f9ff 	bl	8011814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011416:	e00b      	b.n	8011430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 f9fb 	bl	8011814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801141e:	e007      	b.n	8011430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f000 f9f7 	bl	8011814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2200      	movs	r2, #0
 801142a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801142e:	e1dc      	b.n	80117ea <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011430:	bf00      	nop
    return;
 8011432:	e1da      	b.n	80117ea <HAL_UART_IRQHandler+0x66e>
 8011434:	10000001 	.word	0x10000001
 8011438:	04000120 	.word	0x04000120
 801143c:	080120cf 	.word	0x080120cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011444:	2b01      	cmp	r3, #1
 8011446:	f040 8170 	bne.w	801172a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801144a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801144e:	f003 0310 	and.w	r3, r3, #16
 8011452:	2b00      	cmp	r3, #0
 8011454:	f000 8169 	beq.w	801172a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801145c:	f003 0310 	and.w	r3, r3, #16
 8011460:	2b00      	cmp	r3, #0
 8011462:	f000 8162 	beq.w	801172a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	2210      	movs	r2, #16
 801146c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	689b      	ldr	r3, [r3, #8]
 8011474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011478:	2b40      	cmp	r3, #64	@ 0x40
 801147a:	f040 80d8 	bne.w	801162e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801148c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011490:	2b00      	cmp	r3, #0
 8011492:	f000 80af 	beq.w	80115f4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801149c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80114a0:	429a      	cmp	r2, r3
 80114a2:	f080 80a7 	bcs.w	80115f4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80114ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f003 0320 	and.w	r3, r3, #32
 80114be:	2b00      	cmp	r3, #0
 80114c0:	f040 8087 	bne.w	80115d2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80114d0:	e853 3f00 	ldrex	r3, [r3]
 80114d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80114d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80114dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80114e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	461a      	mov	r2, r3
 80114ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80114ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80114f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80114fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80114fe:	e841 2300 	strex	r3, r2, [r1]
 8011502:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8011506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801150a:	2b00      	cmp	r3, #0
 801150c:	d1da      	bne.n	80114c4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	3308      	adds	r3, #8
 8011514:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011516:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011518:	e853 3f00 	ldrex	r3, [r3]
 801151c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801151e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011520:	f023 0301 	bic.w	r3, r3, #1
 8011524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	3308      	adds	r3, #8
 801152e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011532:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011536:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011538:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801153a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801153e:	e841 2300 	strex	r3, r2, [r1]
 8011542:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011546:	2b00      	cmp	r3, #0
 8011548:	d1e1      	bne.n	801150e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	3308      	adds	r3, #8
 8011550:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011554:	e853 3f00 	ldrex	r3, [r3]
 8011558:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801155a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801155c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011560:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	3308      	adds	r3, #8
 801156a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801156e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011570:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011572:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011574:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011576:	e841 2300 	strex	r3, r2, [r1]
 801157a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801157c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801157e:	2b00      	cmp	r3, #0
 8011580:	d1e3      	bne.n	801154a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	2220      	movs	r2, #32
 8011586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2200      	movs	r2, #0
 801158e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011598:	e853 3f00 	ldrex	r3, [r3]
 801159c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801159e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115a0:	f023 0310 	bic.w	r3, r3, #16
 80115a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	461a      	mov	r2, r3
 80115ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80115b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80115b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80115ba:	e841 2300 	strex	r3, r2, [r1]
 80115be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80115c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d1e4      	bne.n	8011590 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7fa fac3 	bl	800bb58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2202      	movs	r2, #2
 80115d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	4619      	mov	r1, r3
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f000 f91b 	bl	8011828 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80115f2:	e0fc      	b.n	80117ee <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80115fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80115fe:	429a      	cmp	r2, r3
 8011600:	f040 80f5 	bne.w	80117ee <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	f003 0320 	and.w	r3, r3, #32
 8011612:	2b20      	cmp	r3, #32
 8011614:	f040 80eb 	bne.w	80117ee <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2202      	movs	r2, #2
 801161c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011624:	4619      	mov	r1, r3
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f000 f8fe 	bl	8011828 <HAL_UARTEx_RxEventCallback>
      return;
 801162c:	e0df      	b.n	80117ee <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801163a:	b29b      	uxth	r3, r3
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011648:	b29b      	uxth	r3, r3
 801164a:	2b00      	cmp	r3, #0
 801164c:	f000 80d1 	beq.w	80117f2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8011650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011654:	2b00      	cmp	r3, #0
 8011656:	f000 80cc 	beq.w	80117f2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011662:	e853 3f00 	ldrex	r3, [r3]
 8011666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801166a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801166e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	461a      	mov	r2, r3
 8011678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801167c:	647b      	str	r3, [r7, #68]	@ 0x44
 801167e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011680:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011684:	e841 2300 	strex	r3, r2, [r1]
 8011688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801168a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801168c:	2b00      	cmp	r3, #0
 801168e:	d1e4      	bne.n	801165a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	3308      	adds	r3, #8
 8011696:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801169a:	e853 3f00 	ldrex	r3, [r3]
 801169e:	623b      	str	r3, [r7, #32]
   return(result);
 80116a0:	6a3b      	ldr	r3, [r7, #32]
 80116a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80116a6:	f023 0301 	bic.w	r3, r3, #1
 80116aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	3308      	adds	r3, #8
 80116b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80116b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80116ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80116be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116c0:	e841 2300 	strex	r3, r2, [r1]
 80116c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80116c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d1e1      	bne.n	8011690 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2220      	movs	r2, #32
 80116d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2200      	movs	r2, #0
 80116d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2200      	movs	r2, #0
 80116de:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	e853 3f00 	ldrex	r3, [r3]
 80116ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	f023 0310 	bic.w	r3, r3, #16
 80116f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	461a      	mov	r2, r3
 80116fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011702:	61fb      	str	r3, [r7, #28]
 8011704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011706:	69b9      	ldr	r1, [r7, #24]
 8011708:	69fa      	ldr	r2, [r7, #28]
 801170a:	e841 2300 	strex	r3, r2, [r1]
 801170e:	617b      	str	r3, [r7, #20]
   return(result);
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d1e4      	bne.n	80116e0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2202      	movs	r2, #2
 801171a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801171c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011720:	4619      	mov	r1, r3
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f000 f880 	bl	8011828 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011728:	e063      	b.n	80117f2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801172a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801172e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011732:	2b00      	cmp	r3, #0
 8011734:	d00e      	beq.n	8011754 <HAL_UART_IRQHandler+0x5d8>
 8011736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801173a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801173e:	2b00      	cmp	r3, #0
 8011740:	d008      	beq.n	8011754 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801174a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f000 fcfb 	bl	8012148 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011752:	e051      	b.n	80117f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801175c:	2b00      	cmp	r3, #0
 801175e:	d014      	beq.n	801178a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011768:	2b00      	cmp	r3, #0
 801176a:	d105      	bne.n	8011778 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801176c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011770:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011774:	2b00      	cmp	r3, #0
 8011776:	d008      	beq.n	801178a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801177c:	2b00      	cmp	r3, #0
 801177e:	d03a      	beq.n	80117f6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	4798      	blx	r3
    }
    return;
 8011788:	e035      	b.n	80117f6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801178a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801178e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011792:	2b00      	cmp	r3, #0
 8011794:	d009      	beq.n	80117aa <HAL_UART_IRQHandler+0x62e>
 8011796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801179a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d003      	beq.n	80117aa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f000 fca5 	bl	80120f2 <UART_EndTransmit_IT>
    return;
 80117a8:	e026      	b.n	80117f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80117aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80117ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d009      	beq.n	80117ca <HAL_UART_IRQHandler+0x64e>
 80117b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80117ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d003      	beq.n	80117ca <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f000 fcd4 	bl	8012170 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80117c8:	e016      	b.n	80117f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80117ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80117ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d010      	beq.n	80117f8 <HAL_UART_IRQHandler+0x67c>
 80117d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80117da:	2b00      	cmp	r3, #0
 80117dc:	da0c      	bge.n	80117f8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 fcbc 	bl	801215c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80117e4:	e008      	b.n	80117f8 <HAL_UART_IRQHandler+0x67c>
      return;
 80117e6:	bf00      	nop
 80117e8:	e006      	b.n	80117f8 <HAL_UART_IRQHandler+0x67c>
    return;
 80117ea:	bf00      	nop
 80117ec:	e004      	b.n	80117f8 <HAL_UART_IRQHandler+0x67c>
      return;
 80117ee:	bf00      	nop
 80117f0:	e002      	b.n	80117f8 <HAL_UART_IRQHandler+0x67c>
      return;
 80117f2:	bf00      	nop
 80117f4:	e000      	b.n	80117f8 <HAL_UART_IRQHandler+0x67c>
    return;
 80117f6:	bf00      	nop
  }
}
 80117f8:	37e8      	adds	r7, #232	@ 0xe8
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop

08011800 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011808:	bf00      	nop
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801181c:	bf00      	nop
 801181e:	370c      	adds	r7, #12
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr

08011828 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011828:	b480      	push	{r7}
 801182a:	b083      	sub	sp, #12
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	460b      	mov	r3, r1
 8011832:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011834:	bf00      	nop
 8011836:	370c      	adds	r7, #12
 8011838:	46bd      	mov	sp, r7
 801183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183e:	4770      	bx	lr

08011840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011844:	b08c      	sub	sp, #48	@ 0x30
 8011846:	af00      	add	r7, sp, #0
 8011848:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801184a:	2300      	movs	r3, #0
 801184c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	689a      	ldr	r2, [r3, #8]
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	691b      	ldr	r3, [r3, #16]
 8011858:	431a      	orrs	r2, r3
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	695b      	ldr	r3, [r3, #20]
 801185e:	431a      	orrs	r2, r3
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	69db      	ldr	r3, [r3, #28]
 8011864:	4313      	orrs	r3, r2
 8011866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	681a      	ldr	r2, [r3, #0]
 801186e:	4baf      	ldr	r3, [pc, #700]	@ (8011b2c <UART_SetConfig+0x2ec>)
 8011870:	4013      	ands	r3, r2
 8011872:	697a      	ldr	r2, [r7, #20]
 8011874:	6812      	ldr	r2, [r2, #0]
 8011876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011878:	430b      	orrs	r3, r1
 801187a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	68da      	ldr	r2, [r3, #12]
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	430a      	orrs	r2, r1
 8011890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	699b      	ldr	r3, [r3, #24]
 8011896:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4aa4      	ldr	r2, [pc, #656]	@ (8011b30 <UART_SetConfig+0x2f0>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d004      	beq.n	80118ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	6a1b      	ldr	r3, [r3, #32]
 80118a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118a8:	4313      	orrs	r3, r2
 80118aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	689b      	ldr	r3, [r3, #8]
 80118b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80118b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80118ba:	697a      	ldr	r2, [r7, #20]
 80118bc:	6812      	ldr	r2, [r2, #0]
 80118be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80118c0:	430b      	orrs	r3, r1
 80118c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ca:	f023 010f 	bic.w	r1, r3, #15
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	430a      	orrs	r2, r1
 80118d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	4a95      	ldr	r2, [pc, #596]	@ (8011b34 <UART_SetConfig+0x2f4>)
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d125      	bne.n	8011930 <UART_SetConfig+0xf0>
 80118e4:	2003      	movs	r0, #3
 80118e6:	f7ff fb99 	bl	801101c <LL_RCC_GetUSARTClockSource>
 80118ea:	4603      	mov	r3, r0
 80118ec:	2b03      	cmp	r3, #3
 80118ee:	d81b      	bhi.n	8011928 <UART_SetConfig+0xe8>
 80118f0:	a201      	add	r2, pc, #4	@ (adr r2, 80118f8 <UART_SetConfig+0xb8>)
 80118f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118f6:	bf00      	nop
 80118f8:	08011909 	.word	0x08011909
 80118fc:	08011919 	.word	0x08011919
 8011900:	08011911 	.word	0x08011911
 8011904:	08011921 	.word	0x08011921
 8011908:	2301      	movs	r3, #1
 801190a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801190e:	e042      	b.n	8011996 <UART_SetConfig+0x156>
 8011910:	2302      	movs	r3, #2
 8011912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011916:	e03e      	b.n	8011996 <UART_SetConfig+0x156>
 8011918:	2304      	movs	r3, #4
 801191a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801191e:	e03a      	b.n	8011996 <UART_SetConfig+0x156>
 8011920:	2308      	movs	r3, #8
 8011922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011926:	e036      	b.n	8011996 <UART_SetConfig+0x156>
 8011928:	2310      	movs	r3, #16
 801192a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801192e:	e032      	b.n	8011996 <UART_SetConfig+0x156>
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	4a7e      	ldr	r2, [pc, #504]	@ (8011b30 <UART_SetConfig+0x2f0>)
 8011936:	4293      	cmp	r3, r2
 8011938:	d12a      	bne.n	8011990 <UART_SetConfig+0x150>
 801193a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 801193e:	f7ff fb7d 	bl	801103c <LL_RCC_GetLPUARTClockSource>
 8011942:	4603      	mov	r3, r0
 8011944:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011948:	d01a      	beq.n	8011980 <UART_SetConfig+0x140>
 801194a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801194e:	d81b      	bhi.n	8011988 <UART_SetConfig+0x148>
 8011950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011954:	d00c      	beq.n	8011970 <UART_SetConfig+0x130>
 8011956:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801195a:	d815      	bhi.n	8011988 <UART_SetConfig+0x148>
 801195c:	2b00      	cmp	r3, #0
 801195e:	d003      	beq.n	8011968 <UART_SetConfig+0x128>
 8011960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011964:	d008      	beq.n	8011978 <UART_SetConfig+0x138>
 8011966:	e00f      	b.n	8011988 <UART_SetConfig+0x148>
 8011968:	2300      	movs	r3, #0
 801196a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801196e:	e012      	b.n	8011996 <UART_SetConfig+0x156>
 8011970:	2302      	movs	r3, #2
 8011972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011976:	e00e      	b.n	8011996 <UART_SetConfig+0x156>
 8011978:	2304      	movs	r3, #4
 801197a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801197e:	e00a      	b.n	8011996 <UART_SetConfig+0x156>
 8011980:	2308      	movs	r3, #8
 8011982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011986:	e006      	b.n	8011996 <UART_SetConfig+0x156>
 8011988:	2310      	movs	r3, #16
 801198a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801198e:	e002      	b.n	8011996 <UART_SetConfig+0x156>
 8011990:	2310      	movs	r3, #16
 8011992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	4a65      	ldr	r2, [pc, #404]	@ (8011b30 <UART_SetConfig+0x2f0>)
 801199c:	4293      	cmp	r3, r2
 801199e:	f040 8097 	bne.w	8011ad0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80119a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80119a6:	2b08      	cmp	r3, #8
 80119a8:	d823      	bhi.n	80119f2 <UART_SetConfig+0x1b2>
 80119aa:	a201      	add	r2, pc, #4	@ (adr r2, 80119b0 <UART_SetConfig+0x170>)
 80119ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b0:	080119d5 	.word	0x080119d5
 80119b4:	080119f3 	.word	0x080119f3
 80119b8:	080119dd 	.word	0x080119dd
 80119bc:	080119f3 	.word	0x080119f3
 80119c0:	080119e3 	.word	0x080119e3
 80119c4:	080119f3 	.word	0x080119f3
 80119c8:	080119f3 	.word	0x080119f3
 80119cc:	080119f3 	.word	0x080119f3
 80119d0:	080119eb 	.word	0x080119eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80119d4:	f7fd fa68 	bl	800eea8 <HAL_RCC_GetPCLK1Freq>
 80119d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80119da:	e010      	b.n	80119fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80119dc:	4b56      	ldr	r3, [pc, #344]	@ (8011b38 <UART_SetConfig+0x2f8>)
 80119de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80119e0:	e00d      	b.n	80119fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80119e2:	f7fd f9e1 	bl	800eda8 <HAL_RCC_GetSysClockFreq>
 80119e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80119e8:	e009      	b.n	80119fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80119ea:	f248 0306 	movw	r3, #32774	@ 0x8006
 80119ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80119f0:	e005      	b.n	80119fe <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80119f2:	2300      	movs	r3, #0
 80119f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80119f6:	2301      	movs	r3, #1
 80119f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80119fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80119fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	f000 812b 	beq.w	8011c5c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a0a:	4a4c      	ldr	r2, [pc, #304]	@ (8011b3c <UART_SetConfig+0x2fc>)
 8011a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a10:	461a      	mov	r2, r3
 8011a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	685a      	ldr	r2, [r3, #4]
 8011a1e:	4613      	mov	r3, r2
 8011a20:	005b      	lsls	r3, r3, #1
 8011a22:	4413      	add	r3, r2
 8011a24:	69ba      	ldr	r2, [r7, #24]
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d305      	bcc.n	8011a36 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a30:	69ba      	ldr	r2, [r7, #24]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d903      	bls.n	8011a3e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8011a36:	2301      	movs	r3, #1
 8011a38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011a3c:	e10e      	b.n	8011c5c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a40:	2200      	movs	r2, #0
 8011a42:	60bb      	str	r3, [r7, #8]
 8011a44:	60fa      	str	r2, [r7, #12]
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8011b3c <UART_SetConfig+0x2fc>)
 8011a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	2200      	movs	r2, #0
 8011a54:	603b      	str	r3, [r7, #0]
 8011a56:	607a      	str	r2, [r7, #4]
 8011a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011a60:	f7ef f89a 	bl	8000b98 <__aeabi_uldivmod>
 8011a64:	4602      	mov	r2, r0
 8011a66:	460b      	mov	r3, r1
 8011a68:	4610      	mov	r0, r2
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	f04f 0200 	mov.w	r2, #0
 8011a70:	f04f 0300 	mov.w	r3, #0
 8011a74:	020b      	lsls	r3, r1, #8
 8011a76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011a7a:	0202      	lsls	r2, r0, #8
 8011a7c:	6979      	ldr	r1, [r7, #20]
 8011a7e:	6849      	ldr	r1, [r1, #4]
 8011a80:	0849      	lsrs	r1, r1, #1
 8011a82:	2000      	movs	r0, #0
 8011a84:	460c      	mov	r4, r1
 8011a86:	4605      	mov	r5, r0
 8011a88:	eb12 0804 	adds.w	r8, r2, r4
 8011a8c:	eb43 0905 	adc.w	r9, r3, r5
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	2200      	movs	r2, #0
 8011a96:	469a      	mov	sl, r3
 8011a98:	4693      	mov	fp, r2
 8011a9a:	4652      	mov	r2, sl
 8011a9c:	465b      	mov	r3, fp
 8011a9e:	4640      	mov	r0, r8
 8011aa0:	4649      	mov	r1, r9
 8011aa2:	f7ef f879 	bl	8000b98 <__aeabi_uldivmod>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	4613      	mov	r3, r2
 8011aac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011aae:	6a3b      	ldr	r3, [r7, #32]
 8011ab0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011ab4:	d308      	bcc.n	8011ac8 <UART_SetConfig+0x288>
 8011ab6:	6a3b      	ldr	r3, [r7, #32]
 8011ab8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011abc:	d204      	bcs.n	8011ac8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	6a3a      	ldr	r2, [r7, #32]
 8011ac4:	60da      	str	r2, [r3, #12]
 8011ac6:	e0c9      	b.n	8011c5c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8011ac8:	2301      	movs	r3, #1
 8011aca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011ace:	e0c5      	b.n	8011c5c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	69db      	ldr	r3, [r3, #28]
 8011ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011ad8:	d16d      	bne.n	8011bb6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8011ada:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011ade:	3b01      	subs	r3, #1
 8011ae0:	2b07      	cmp	r3, #7
 8011ae2:	d82d      	bhi.n	8011b40 <UART_SetConfig+0x300>
 8011ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8011aec <UART_SetConfig+0x2ac>)
 8011ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aea:	bf00      	nop
 8011aec:	08011b0d 	.word	0x08011b0d
 8011af0:	08011b15 	.word	0x08011b15
 8011af4:	08011b41 	.word	0x08011b41
 8011af8:	08011b1b 	.word	0x08011b1b
 8011afc:	08011b41 	.word	0x08011b41
 8011b00:	08011b41 	.word	0x08011b41
 8011b04:	08011b41 	.word	0x08011b41
 8011b08:	08011b23 	.word	0x08011b23
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011b0c:	f7fd f9e2 	bl	800eed4 <HAL_RCC_GetPCLK2Freq>
 8011b10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011b12:	e01b      	b.n	8011b4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011b14:	4b08      	ldr	r3, [pc, #32]	@ (8011b38 <UART_SetConfig+0x2f8>)
 8011b16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011b18:	e018      	b.n	8011b4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011b1a:	f7fd f945 	bl	800eda8 <HAL_RCC_GetSysClockFreq>
 8011b1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011b20:	e014      	b.n	8011b4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b22:	f248 0306 	movw	r3, #32774	@ 0x8006
 8011b26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011b28:	e010      	b.n	8011b4c <UART_SetConfig+0x30c>
 8011b2a:	bf00      	nop
 8011b2c:	cfff69f3 	.word	0xcfff69f3
 8011b30:	40008000 	.word	0x40008000
 8011b34:	40013800 	.word	0x40013800
 8011b38:	00f42400 	.word	0x00f42400
 8011b3c:	080181f8 	.word	0x080181f8
      default:
        pclk = 0U;
 8011b40:	2300      	movs	r3, #0
 8011b42:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011b44:	2301      	movs	r3, #1
 8011b46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011b4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	f000 8084 	beq.w	8011c5c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b58:	4a4b      	ldr	r2, [pc, #300]	@ (8011c88 <UART_SetConfig+0x448>)
 8011b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b5e:	461a      	mov	r2, r3
 8011b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b66:	005a      	lsls	r2, r3, #1
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	085b      	lsrs	r3, r3, #1
 8011b6e:	441a      	add	r2, r3
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b78:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011b7a:	6a3b      	ldr	r3, [r7, #32]
 8011b7c:	2b0f      	cmp	r3, #15
 8011b7e:	d916      	bls.n	8011bae <UART_SetConfig+0x36e>
 8011b80:	6a3b      	ldr	r3, [r7, #32]
 8011b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011b86:	d212      	bcs.n	8011bae <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011b88:	6a3b      	ldr	r3, [r7, #32]
 8011b8a:	b29b      	uxth	r3, r3
 8011b8c:	f023 030f 	bic.w	r3, r3, #15
 8011b90:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011b92:	6a3b      	ldr	r3, [r7, #32]
 8011b94:	085b      	lsrs	r3, r3, #1
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	f003 0307 	and.w	r3, r3, #7
 8011b9c:	b29a      	uxth	r2, r3
 8011b9e:	8bfb      	ldrh	r3, [r7, #30]
 8011ba0:	4313      	orrs	r3, r2
 8011ba2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	8bfa      	ldrh	r2, [r7, #30]
 8011baa:	60da      	str	r2, [r3, #12]
 8011bac:	e056      	b.n	8011c5c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8011bae:	2301      	movs	r3, #1
 8011bb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011bb4:	e052      	b.n	8011c5c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011bba:	3b01      	subs	r3, #1
 8011bbc:	2b07      	cmp	r3, #7
 8011bbe:	d822      	bhi.n	8011c06 <UART_SetConfig+0x3c6>
 8011bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8011bc8 <UART_SetConfig+0x388>)
 8011bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc6:	bf00      	nop
 8011bc8:	08011be9 	.word	0x08011be9
 8011bcc:	08011bf1 	.word	0x08011bf1
 8011bd0:	08011c07 	.word	0x08011c07
 8011bd4:	08011bf7 	.word	0x08011bf7
 8011bd8:	08011c07 	.word	0x08011c07
 8011bdc:	08011c07 	.word	0x08011c07
 8011be0:	08011c07 	.word	0x08011c07
 8011be4:	08011bff 	.word	0x08011bff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011be8:	f7fd f974 	bl	800eed4 <HAL_RCC_GetPCLK2Freq>
 8011bec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011bee:	e010      	b.n	8011c12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011bf0:	4b26      	ldr	r3, [pc, #152]	@ (8011c8c <UART_SetConfig+0x44c>)
 8011bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011bf4:	e00d      	b.n	8011c12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011bf6:	f7fd f8d7 	bl	800eda8 <HAL_RCC_GetSysClockFreq>
 8011bfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011bfc:	e009      	b.n	8011c12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011bfe:	f248 0306 	movw	r3, #32774	@ 0x8006
 8011c02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011c04:	e005      	b.n	8011c12 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8011c06:	2300      	movs	r3, #0
 8011c08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011c10:	bf00      	nop
    }

    if (pclk != 0U)
 8011c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d021      	beq.n	8011c5c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8011c88 <UART_SetConfig+0x448>)
 8011c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c22:	461a      	mov	r2, r3
 8011c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	085b      	lsrs	r3, r3, #1
 8011c30:	441a      	add	r2, r3
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c3c:	6a3b      	ldr	r3, [r7, #32]
 8011c3e:	2b0f      	cmp	r3, #15
 8011c40:	d909      	bls.n	8011c56 <UART_SetConfig+0x416>
 8011c42:	6a3b      	ldr	r3, [r7, #32]
 8011c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c48:	d205      	bcs.n	8011c56 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011c4a:	6a3b      	ldr	r3, [r7, #32]
 8011c4c:	b29a      	uxth	r2, r3
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	60da      	str	r2, [r3, #12]
 8011c54:	e002      	b.n	8011c5c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8011c56:	2301      	movs	r3, #1
 8011c58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	2201      	movs	r2, #1
 8011c60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	2201      	movs	r2, #1
 8011c68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	2200      	movs	r2, #0
 8011c76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011c78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3730      	adds	r7, #48	@ 0x30
 8011c80:	46bd      	mov	sp, r7
 8011c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011c86:	bf00      	nop
 8011c88:	080181f8 	.word	0x080181f8
 8011c8c:	00f42400 	.word	0x00f42400

08011c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011c90:	b480      	push	{r7}
 8011c92:	b083      	sub	sp, #12
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c9c:	f003 0308 	and.w	r3, r3, #8
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d00a      	beq.n	8011cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	430a      	orrs	r2, r1
 8011cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cbe:	f003 0301 	and.w	r3, r3, #1
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d00a      	beq.n	8011cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	430a      	orrs	r2, r1
 8011cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ce0:	f003 0302 	and.w	r3, r3, #2
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d00a      	beq.n	8011cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	430a      	orrs	r2, r1
 8011cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d02:	f003 0304 	and.w	r3, r3, #4
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d00a      	beq.n	8011d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	430a      	orrs	r2, r1
 8011d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d24:	f003 0310 	and.w	r3, r3, #16
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d00a      	beq.n	8011d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	689b      	ldr	r3, [r3, #8]
 8011d32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	430a      	orrs	r2, r1
 8011d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d46:	f003 0320 	and.w	r3, r3, #32
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d00a      	beq.n	8011d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	430a      	orrs	r2, r1
 8011d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d01a      	beq.n	8011da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	430a      	orrs	r2, r1
 8011d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011d8e:	d10a      	bne.n	8011da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	430a      	orrs	r2, r1
 8011da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d00a      	beq.n	8011dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	430a      	orrs	r2, r1
 8011dc6:	605a      	str	r2, [r3, #4]
  }
}
 8011dc8:	bf00      	nop
 8011dca:	370c      	adds	r7, #12
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr

08011dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b098      	sub	sp, #96	@ 0x60
 8011dd8:	af02      	add	r7, sp, #8
 8011dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2200      	movs	r2, #0
 8011de0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011de4:	f7f8 f960 	bl	800a0a8 <HAL_GetTick>
 8011de8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	f003 0308 	and.w	r3, r3, #8
 8011df4:	2b08      	cmp	r3, #8
 8011df6:	d12f      	bne.n	8011e58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011df8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011dfc:	9300      	str	r3, [sp, #0]
 8011dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e00:	2200      	movs	r2, #0
 8011e02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f000 f88e 	bl	8011f28 <UART_WaitOnFlagUntilTimeout>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d022      	beq.n	8011e58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e1a:	e853 3f00 	ldrex	r3, [r3]
 8011e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	461a      	mov	r2, r3
 8011e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011e38:	e841 2300 	strex	r3, r2, [r1]
 8011e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d1e6      	bne.n	8011e12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2220      	movs	r2, #32
 8011e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2200      	movs	r2, #0
 8011e50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e54:	2303      	movs	r3, #3
 8011e56:	e063      	b.n	8011f20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	f003 0304 	and.w	r3, r3, #4
 8011e62:	2b04      	cmp	r3, #4
 8011e64:	d149      	bne.n	8011efa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011e6a:	9300      	str	r3, [sp, #0]
 8011e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e6e:	2200      	movs	r2, #0
 8011e70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f000 f857 	bl	8011f28 <UART_WaitOnFlagUntilTimeout>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d03c      	beq.n	8011efa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e88:	e853 3f00 	ldrex	r3, [r3]
 8011e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8011e8e:	6a3b      	ldr	r3, [r7, #32]
 8011e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ea0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ea6:	e841 2300 	strex	r3, r2, [r1]
 8011eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d1e6      	bne.n	8011e80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	3308      	adds	r3, #8
 8011eb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	e853 3f00 	ldrex	r3, [r3]
 8011ec0:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	f023 0301 	bic.w	r3, r3, #1
 8011ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	3308      	adds	r3, #8
 8011ed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011ed2:	61fa      	str	r2, [r7, #28]
 8011ed4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ed6:	69b9      	ldr	r1, [r7, #24]
 8011ed8:	69fa      	ldr	r2, [r7, #28]
 8011eda:	e841 2300 	strex	r3, r2, [r1]
 8011ede:	617b      	str	r3, [r7, #20]
   return(result);
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d1e5      	bne.n	8011eb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2220      	movs	r2, #32
 8011eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011ef6:	2303      	movs	r3, #3
 8011ef8:	e012      	b.n	8011f20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2220      	movs	r2, #32
 8011efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2220      	movs	r2, #32
 8011f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2200      	movs	r2, #0
 8011f14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011f1e:	2300      	movs	r3, #0
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3758      	adds	r7, #88	@ 0x58
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	60f8      	str	r0, [r7, #12]
 8011f30:	60b9      	str	r1, [r7, #8]
 8011f32:	603b      	str	r3, [r7, #0]
 8011f34:	4613      	mov	r3, r2
 8011f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f38:	e04f      	b.n	8011fda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011f3a:	69bb      	ldr	r3, [r7, #24]
 8011f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011f40:	d04b      	beq.n	8011fda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011f42:	f7f8 f8b1 	bl	800a0a8 <HAL_GetTick>
 8011f46:	4602      	mov	r2, r0
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	1ad3      	subs	r3, r2, r3
 8011f4c:	69ba      	ldr	r2, [r7, #24]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d302      	bcc.n	8011f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8011f52:	69bb      	ldr	r3, [r7, #24]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d101      	bne.n	8011f5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011f58:	2303      	movs	r3, #3
 8011f5a:	e04e      	b.n	8011ffa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	f003 0304 	and.w	r3, r3, #4
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d037      	beq.n	8011fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	2b80      	cmp	r3, #128	@ 0x80
 8011f6e:	d034      	beq.n	8011fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	2b40      	cmp	r3, #64	@ 0x40
 8011f74:	d031      	beq.n	8011fda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	69db      	ldr	r3, [r3, #28]
 8011f7c:	f003 0308 	and.w	r3, r3, #8
 8011f80:	2b08      	cmp	r3, #8
 8011f82:	d110      	bne.n	8011fa6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	2208      	movs	r2, #8
 8011f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011f8c:	68f8      	ldr	r0, [r7, #12]
 8011f8e:	f000 f838 	bl	8012002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2208      	movs	r2, #8
 8011f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	e029      	b.n	8011ffa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	69db      	ldr	r3, [r3, #28]
 8011fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011fb4:	d111      	bne.n	8011fda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011fc0:	68f8      	ldr	r0, [r7, #12]
 8011fc2:	f000 f81e 	bl	8012002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	2220      	movs	r2, #32
 8011fca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011fd6:	2303      	movs	r3, #3
 8011fd8:	e00f      	b.n	8011ffa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	69da      	ldr	r2, [r3, #28]
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	4013      	ands	r3, r2
 8011fe4:	68ba      	ldr	r2, [r7, #8]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	bf0c      	ite	eq
 8011fea:	2301      	moveq	r3, #1
 8011fec:	2300      	movne	r3, #0
 8011fee:	b2db      	uxtb	r3, r3
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	79fb      	ldrb	r3, [r7, #7]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d0a0      	beq.n	8011f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011ff8:	2300      	movs	r3, #0
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3710      	adds	r7, #16
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}

08012002 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012002:	b480      	push	{r7}
 8012004:	b095      	sub	sp, #84	@ 0x54
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012012:	e853 3f00 	ldrex	r3, [r3]
 8012016:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801201a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801201e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	461a      	mov	r2, r3
 8012026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012028:	643b      	str	r3, [r7, #64]	@ 0x40
 801202a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801202c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801202e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012030:	e841 2300 	strex	r3, r2, [r1]
 8012034:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1e6      	bne.n	801200a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	3308      	adds	r3, #8
 8012042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012044:	6a3b      	ldr	r3, [r7, #32]
 8012046:	e853 3f00 	ldrex	r3, [r3]
 801204a:	61fb      	str	r3, [r7, #28]
   return(result);
 801204c:	69fb      	ldr	r3, [r7, #28]
 801204e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012052:	f023 0301 	bic.w	r3, r3, #1
 8012056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	3308      	adds	r3, #8
 801205e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012068:	e841 2300 	strex	r3, r2, [r1]
 801206c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012070:	2b00      	cmp	r3, #0
 8012072:	d1e3      	bne.n	801203c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012078:	2b01      	cmp	r3, #1
 801207a:	d118      	bne.n	80120ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	e853 3f00 	ldrex	r3, [r3]
 8012088:	60bb      	str	r3, [r7, #8]
   return(result);
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	f023 0310 	bic.w	r3, r3, #16
 8012090:	647b      	str	r3, [r7, #68]	@ 0x44
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	461a      	mov	r2, r3
 8012098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801209a:	61bb      	str	r3, [r7, #24]
 801209c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801209e:	6979      	ldr	r1, [r7, #20]
 80120a0:	69ba      	ldr	r2, [r7, #24]
 80120a2:	e841 2300 	strex	r3, r2, [r1]
 80120a6:	613b      	str	r3, [r7, #16]
   return(result);
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d1e6      	bne.n	801207c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2220      	movs	r2, #32
 80120b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2200      	movs	r2, #0
 80120ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2200      	movs	r2, #0
 80120c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80120c2:	bf00      	nop
 80120c4:	3754      	adds	r7, #84	@ 0x54
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr

080120ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80120ce:	b580      	push	{r7, lr}
 80120d0:	b084      	sub	sp, #16
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2200      	movs	r2, #0
 80120e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80120e4:	68f8      	ldr	r0, [r7, #12]
 80120e6:	f7ff fb95 	bl	8011814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120ea:	bf00      	nop
 80120ec:	3710      	adds	r7, #16
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80120f2:	b580      	push	{r7, lr}
 80120f4:	b088      	sub	sp, #32
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	e853 3f00 	ldrex	r3, [r3]
 8012106:	60bb      	str	r3, [r7, #8]
   return(result);
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801210e:	61fb      	str	r3, [r7, #28]
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	461a      	mov	r2, r3
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	61bb      	str	r3, [r7, #24]
 801211a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801211c:	6979      	ldr	r1, [r7, #20]
 801211e:	69ba      	ldr	r2, [r7, #24]
 8012120:	e841 2300 	strex	r3, r2, [r1]
 8012124:	613b      	str	r3, [r7, #16]
   return(result);
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1e6      	bne.n	80120fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2220      	movs	r2, #32
 8012130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2200      	movs	r2, #0
 8012138:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f7ff fb60 	bl	8011800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012140:	bf00      	nop
 8012142:	3720      	adds	r7, #32
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012148:	b480      	push	{r7}
 801214a:	b083      	sub	sp, #12
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012150:	bf00      	nop
 8012152:	370c      	adds	r7, #12
 8012154:	46bd      	mov	sp, r7
 8012156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215a:	4770      	bx	lr

0801215c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801215c:	b480      	push	{r7}
 801215e:	b083      	sub	sp, #12
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012164:	bf00      	nop
 8012166:	370c      	adds	r7, #12
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr

08012170 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012170:	b480      	push	{r7}
 8012172:	b083      	sub	sp, #12
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012178:	bf00      	nop
 801217a:	370c      	adds	r7, #12
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr

08012184 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012184:	b480      	push	{r7}
 8012186:	b085      	sub	sp, #20
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012192:	2b01      	cmp	r3, #1
 8012194:	d101      	bne.n	801219a <HAL_UARTEx_DisableFifoMode+0x16>
 8012196:	2302      	movs	r3, #2
 8012198:	e027      	b.n	80121ea <HAL_UARTEx_DisableFifoMode+0x66>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2201      	movs	r2, #1
 801219e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2224      	movs	r2, #36	@ 0x24
 80121a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	681a      	ldr	r2, [r3, #0]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	f022 0201 	bic.w	r2, r2, #1
 80121c0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80121c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2200      	movs	r2, #0
 80121ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	68fa      	ldr	r2, [r7, #12]
 80121d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2220      	movs	r2, #32
 80121dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2200      	movs	r2, #0
 80121e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80121e8:	2300      	movs	r3, #0
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3714      	adds	r7, #20
 80121ee:	46bd      	mov	sp, r7
 80121f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f4:	4770      	bx	lr

080121f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80121f6:	b580      	push	{r7, lr}
 80121f8:	b084      	sub	sp, #16
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	6078      	str	r0, [r7, #4]
 80121fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012206:	2b01      	cmp	r3, #1
 8012208:	d101      	bne.n	801220e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801220a:	2302      	movs	r3, #2
 801220c:	e02d      	b.n	801226a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2201      	movs	r2, #1
 8012212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2224      	movs	r2, #36	@ 0x24
 801221a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f022 0201 	bic.w	r2, r2, #1
 8012234:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	689b      	ldr	r3, [r3, #8]
 801223c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	683a      	ldr	r2, [r7, #0]
 8012246:	430a      	orrs	r2, r1
 8012248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f000 f850 	bl	80122f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	68fa      	ldr	r2, [r7, #12]
 8012256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2220      	movs	r2, #32
 801225c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2200      	movs	r2, #0
 8012264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012268:	2300      	movs	r3, #0
}
 801226a:	4618      	mov	r0, r3
 801226c:	3710      	adds	r7, #16
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}

08012272 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012272:	b580      	push	{r7, lr}
 8012274:	b084      	sub	sp, #16
 8012276:	af00      	add	r7, sp, #0
 8012278:	6078      	str	r0, [r7, #4]
 801227a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012282:	2b01      	cmp	r3, #1
 8012284:	d101      	bne.n	801228a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012286:	2302      	movs	r3, #2
 8012288:	e02d      	b.n	80122e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	2201      	movs	r2, #1
 801228e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2224      	movs	r2, #36	@ 0x24
 8012296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	681a      	ldr	r2, [r3, #0]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f022 0201 	bic.w	r2, r2, #1
 80122b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	689b      	ldr	r3, [r3, #8]
 80122b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	683a      	ldr	r2, [r7, #0]
 80122c2:	430a      	orrs	r2, r1
 80122c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 f812 	bl	80122f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	68fa      	ldr	r2, [r7, #12]
 80122d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2220      	movs	r2, #32
 80122d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2200      	movs	r2, #0
 80122e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80122e4:	2300      	movs	r3, #0
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3710      	adds	r7, #16
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
	...

080122f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80122f0:	b480      	push	{r7}
 80122f2:	b085      	sub	sp, #20
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d108      	bne.n	8012312 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2201      	movs	r2, #1
 8012304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2201      	movs	r2, #1
 801230c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012310:	e031      	b.n	8012376 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012312:	2308      	movs	r3, #8
 8012314:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012316:	2308      	movs	r3, #8
 8012318:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	689b      	ldr	r3, [r3, #8]
 8012320:	0e5b      	lsrs	r3, r3, #25
 8012322:	b2db      	uxtb	r3, r3
 8012324:	f003 0307 	and.w	r3, r3, #7
 8012328:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	689b      	ldr	r3, [r3, #8]
 8012330:	0f5b      	lsrs	r3, r3, #29
 8012332:	b2db      	uxtb	r3, r3
 8012334:	f003 0307 	and.w	r3, r3, #7
 8012338:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801233a:	7bbb      	ldrb	r3, [r7, #14]
 801233c:	7b3a      	ldrb	r2, [r7, #12]
 801233e:	4911      	ldr	r1, [pc, #68]	@ (8012384 <UARTEx_SetNbDataToProcess+0x94>)
 8012340:	5c8a      	ldrb	r2, [r1, r2]
 8012342:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012346:	7b3a      	ldrb	r2, [r7, #12]
 8012348:	490f      	ldr	r1, [pc, #60]	@ (8012388 <UARTEx_SetNbDataToProcess+0x98>)
 801234a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801234c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012350:	b29a      	uxth	r2, r3
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012358:	7bfb      	ldrb	r3, [r7, #15]
 801235a:	7b7a      	ldrb	r2, [r7, #13]
 801235c:	4909      	ldr	r1, [pc, #36]	@ (8012384 <UARTEx_SetNbDataToProcess+0x94>)
 801235e:	5c8a      	ldrb	r2, [r1, r2]
 8012360:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012364:	7b7a      	ldrb	r2, [r7, #13]
 8012366:	4908      	ldr	r1, [pc, #32]	@ (8012388 <UARTEx_SetNbDataToProcess+0x98>)
 8012368:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801236a:	fb93 f3f2 	sdiv	r3, r3, r2
 801236e:	b29a      	uxth	r2, r3
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012376:	bf00      	nop
 8012378:	3714      	adds	r7, #20
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr
 8012382:	bf00      	nop
 8012384:	08018210 	.word	0x08018210
 8012388:	08018218 	.word	0x08018218

0801238c <_Z14i2c_mux_selectP7i2c_muxi>:

	// Ensure all channels are disabled by default
	return i2c_mux_select_multi(mux, 0);
}

int i2c_mux_select(i2c_mux_t* mux, int ch) {
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6039      	str	r1, [r7, #0]

	// If ch is in range 0-7 then one channel is enabled, else all are disabled
	uint8_t mask = 1 << ch;
 8012396:	2201      	movs	r2, #1
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	fa02 f303 	lsl.w	r3, r2, r3
 801239e:	73fb      	strb	r3, [r7, #15]
	return i2c_mux_select_multi(mux, mask);
 80123a0:	7bfb      	ldrb	r3, [r7, #15]
 80123a2:	4619      	mov	r1, r3
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f000 f805 	bl	80123b4 <_Z20i2c_mux_select_multiP7i2c_muxh>
 80123aa:	4603      	mov	r3, r0
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3710      	adds	r7, #16
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <_Z20i2c_mux_select_multiP7i2c_muxh>:

int i2c_mux_select_multi(i2c_mux_t* mux, uint8_t mask) {
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b086      	sub	sp, #24
 80123b8:	af02      	add	r7, sp, #8
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	460b      	mov	r3, r1
 80123be:	70fb      	strb	r3, [r7, #3]
	if (mux->hi2c == NULL) return 1;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d101      	bne.n	80123cc <_Z20i2c_mux_select_multiP7i2c_muxh+0x18>
 80123c8:	2301      	movs	r3, #1
 80123ca:	e02f      	b.n	801242c <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>

	// Transmit bitmask to multiplexer
	uint8_t addr = (I2C_MUX_BASE_ADDR + mux->addr_offset) << 1;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	7a9b      	ldrb	r3, [r3, #10]
 80123d0:	3370      	adds	r3, #112	@ 0x70
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	005b      	lsls	r3, r3, #1
 80123d6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(mux->hi2c, addr, &mask, 1, I2C_MUX_TIMEOUT);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6818      	ldr	r0, [r3, #0]
 80123dc:	7bfb      	ldrb	r3, [r7, #15]
 80123de:	b299      	uxth	r1, r3
 80123e0:	1cfa      	adds	r2, r7, #3
 80123e2:	2301      	movs	r3, #1
 80123e4:	9300      	str	r3, [sp, #0]
 80123e6:	2301      	movs	r3, #1
 80123e8:	f7fa f90c 	bl	800c604 <HAL_I2C_Master_Transmit>
 80123ec:	4603      	mov	r3, r0
 80123ee:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK) return 1;
 80123f0:	7bbb      	ldrb	r3, [r7, #14]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d001      	beq.n	80123fa <_Z20i2c_mux_select_multiP7i2c_muxh+0x46>
 80123f6:	2301      	movs	r3, #1
 80123f8:	e018      	b.n	801242c <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>

	// Read back bitmask from multiplexer to verify
	uint8_t mask_check = 0;
 80123fa:	2300      	movs	r3, #0
 80123fc:	737b      	strb	r3, [r7, #13]
	res = HAL_I2C_Master_Receive(mux->hi2c, addr, &mask_check, 1, I2C_MUX_TIMEOUT);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6818      	ldr	r0, [r3, #0]
 8012402:	7bfb      	ldrb	r3, [r7, #15]
 8012404:	b299      	uxth	r1, r3
 8012406:	f107 020d 	add.w	r2, r7, #13
 801240a:	2301      	movs	r3, #1
 801240c:	9300      	str	r3, [sp, #0]
 801240e:	2301      	movs	r3, #1
 8012410:	f7fa fa10 	bl	800c834 <HAL_I2C_Master_Receive>
 8012414:	4603      	mov	r3, r0
 8012416:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK || mask_check != mask) return 1;
 8012418:	7bbb      	ldrb	r3, [r7, #14]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d103      	bne.n	8012426 <_Z20i2c_mux_select_multiP7i2c_muxh+0x72>
 801241e:	7b7a      	ldrb	r2, [r7, #13]
 8012420:	78fb      	ldrb	r3, [r7, #3]
 8012422:	429a      	cmp	r2, r3
 8012424:	d001      	beq.n	801242a <_Z20i2c_mux_select_multiP7i2c_muxh+0x76>
 8012426:	2301      	movs	r3, #1
 8012428:	e000      	b.n	801242c <_Z20i2c_mux_select_multiP7i2c_muxh+0x78>
	return 0;
 801242a:	2300      	movs	r3, #0
}
 801242c:	4618      	mov	r0, r3
 801242e:	3710      	adds	r7, #16
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <roundf>:
 8012434:	ee10 0a10 	vmov	r0, s0
 8012438:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801243c:	3a7f      	subs	r2, #127	@ 0x7f
 801243e:	2a16      	cmp	r2, #22
 8012440:	dc15      	bgt.n	801246e <roundf+0x3a>
 8012442:	2a00      	cmp	r2, #0
 8012444:	da08      	bge.n	8012458 <roundf+0x24>
 8012446:	3201      	adds	r2, #1
 8012448:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 801244c:	d101      	bne.n	8012452 <roundf+0x1e>
 801244e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8012452:	ee00 3a10 	vmov	s0, r3
 8012456:	4770      	bx	lr
 8012458:	4907      	ldr	r1, [pc, #28]	@ (8012478 <roundf+0x44>)
 801245a:	4111      	asrs	r1, r2
 801245c:	4201      	tst	r1, r0
 801245e:	d0fa      	beq.n	8012456 <roundf+0x22>
 8012460:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8012464:	4113      	asrs	r3, r2
 8012466:	4403      	add	r3, r0
 8012468:	ea23 0301 	bic.w	r3, r3, r1
 801246c:	e7f1      	b.n	8012452 <roundf+0x1e>
 801246e:	2a80      	cmp	r2, #128	@ 0x80
 8012470:	d1f1      	bne.n	8012456 <roundf+0x22>
 8012472:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012476:	4770      	bx	lr
 8012478:	007fffff 	.word	0x007fffff

0801247c <__cvt>:
 801247c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012480:	ec57 6b10 	vmov	r6, r7, d0
 8012484:	2f00      	cmp	r7, #0
 8012486:	460c      	mov	r4, r1
 8012488:	4619      	mov	r1, r3
 801248a:	463b      	mov	r3, r7
 801248c:	bfbb      	ittet	lt
 801248e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012492:	461f      	movlt	r7, r3
 8012494:	2300      	movge	r3, #0
 8012496:	232d      	movlt	r3, #45	@ 0x2d
 8012498:	700b      	strb	r3, [r1, #0]
 801249a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801249c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80124a0:	4691      	mov	r9, r2
 80124a2:	f023 0820 	bic.w	r8, r3, #32
 80124a6:	bfbc      	itt	lt
 80124a8:	4632      	movlt	r2, r6
 80124aa:	4616      	movlt	r6, r2
 80124ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80124b0:	d005      	beq.n	80124be <__cvt+0x42>
 80124b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80124b6:	d100      	bne.n	80124ba <__cvt+0x3e>
 80124b8:	3401      	adds	r4, #1
 80124ba:	2102      	movs	r1, #2
 80124bc:	e000      	b.n	80124c0 <__cvt+0x44>
 80124be:	2103      	movs	r1, #3
 80124c0:	ab03      	add	r3, sp, #12
 80124c2:	9301      	str	r3, [sp, #4]
 80124c4:	ab02      	add	r3, sp, #8
 80124c6:	9300      	str	r3, [sp, #0]
 80124c8:	ec47 6b10 	vmov	d0, r6, r7
 80124cc:	4653      	mov	r3, sl
 80124ce:	4622      	mov	r2, r4
 80124d0:	f000 fe5e 	bl	8013190 <_dtoa_r>
 80124d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80124d8:	4605      	mov	r5, r0
 80124da:	d119      	bne.n	8012510 <__cvt+0x94>
 80124dc:	f019 0f01 	tst.w	r9, #1
 80124e0:	d00e      	beq.n	8012500 <__cvt+0x84>
 80124e2:	eb00 0904 	add.w	r9, r0, r4
 80124e6:	2200      	movs	r2, #0
 80124e8:	2300      	movs	r3, #0
 80124ea:	4630      	mov	r0, r6
 80124ec:	4639      	mov	r1, r7
 80124ee:	f7ee fac3 	bl	8000a78 <__aeabi_dcmpeq>
 80124f2:	b108      	cbz	r0, 80124f8 <__cvt+0x7c>
 80124f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80124f8:	2230      	movs	r2, #48	@ 0x30
 80124fa:	9b03      	ldr	r3, [sp, #12]
 80124fc:	454b      	cmp	r3, r9
 80124fe:	d31e      	bcc.n	801253e <__cvt+0xc2>
 8012500:	9b03      	ldr	r3, [sp, #12]
 8012502:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012504:	1b5b      	subs	r3, r3, r5
 8012506:	4628      	mov	r0, r5
 8012508:	6013      	str	r3, [r2, #0]
 801250a:	b004      	add	sp, #16
 801250c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012510:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012514:	eb00 0904 	add.w	r9, r0, r4
 8012518:	d1e5      	bne.n	80124e6 <__cvt+0x6a>
 801251a:	7803      	ldrb	r3, [r0, #0]
 801251c:	2b30      	cmp	r3, #48	@ 0x30
 801251e:	d10a      	bne.n	8012536 <__cvt+0xba>
 8012520:	2200      	movs	r2, #0
 8012522:	2300      	movs	r3, #0
 8012524:	4630      	mov	r0, r6
 8012526:	4639      	mov	r1, r7
 8012528:	f7ee faa6 	bl	8000a78 <__aeabi_dcmpeq>
 801252c:	b918      	cbnz	r0, 8012536 <__cvt+0xba>
 801252e:	f1c4 0401 	rsb	r4, r4, #1
 8012532:	f8ca 4000 	str.w	r4, [sl]
 8012536:	f8da 3000 	ldr.w	r3, [sl]
 801253a:	4499      	add	r9, r3
 801253c:	e7d3      	b.n	80124e6 <__cvt+0x6a>
 801253e:	1c59      	adds	r1, r3, #1
 8012540:	9103      	str	r1, [sp, #12]
 8012542:	701a      	strb	r2, [r3, #0]
 8012544:	e7d9      	b.n	80124fa <__cvt+0x7e>

08012546 <__exponent>:
 8012546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012548:	2900      	cmp	r1, #0
 801254a:	bfba      	itte	lt
 801254c:	4249      	neglt	r1, r1
 801254e:	232d      	movlt	r3, #45	@ 0x2d
 8012550:	232b      	movge	r3, #43	@ 0x2b
 8012552:	2909      	cmp	r1, #9
 8012554:	7002      	strb	r2, [r0, #0]
 8012556:	7043      	strb	r3, [r0, #1]
 8012558:	dd29      	ble.n	80125ae <__exponent+0x68>
 801255a:	f10d 0307 	add.w	r3, sp, #7
 801255e:	461d      	mov	r5, r3
 8012560:	270a      	movs	r7, #10
 8012562:	461a      	mov	r2, r3
 8012564:	fbb1 f6f7 	udiv	r6, r1, r7
 8012568:	fb07 1416 	mls	r4, r7, r6, r1
 801256c:	3430      	adds	r4, #48	@ 0x30
 801256e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012572:	460c      	mov	r4, r1
 8012574:	2c63      	cmp	r4, #99	@ 0x63
 8012576:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801257a:	4631      	mov	r1, r6
 801257c:	dcf1      	bgt.n	8012562 <__exponent+0x1c>
 801257e:	3130      	adds	r1, #48	@ 0x30
 8012580:	1e94      	subs	r4, r2, #2
 8012582:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012586:	1c41      	adds	r1, r0, #1
 8012588:	4623      	mov	r3, r4
 801258a:	42ab      	cmp	r3, r5
 801258c:	d30a      	bcc.n	80125a4 <__exponent+0x5e>
 801258e:	f10d 0309 	add.w	r3, sp, #9
 8012592:	1a9b      	subs	r3, r3, r2
 8012594:	42ac      	cmp	r4, r5
 8012596:	bf88      	it	hi
 8012598:	2300      	movhi	r3, #0
 801259a:	3302      	adds	r3, #2
 801259c:	4403      	add	r3, r0
 801259e:	1a18      	subs	r0, r3, r0
 80125a0:	b003      	add	sp, #12
 80125a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80125a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80125ac:	e7ed      	b.n	801258a <__exponent+0x44>
 80125ae:	2330      	movs	r3, #48	@ 0x30
 80125b0:	3130      	adds	r1, #48	@ 0x30
 80125b2:	7083      	strb	r3, [r0, #2]
 80125b4:	70c1      	strb	r1, [r0, #3]
 80125b6:	1d03      	adds	r3, r0, #4
 80125b8:	e7f1      	b.n	801259e <__exponent+0x58>
	...

080125bc <_printf_float>:
 80125bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c0:	b08d      	sub	sp, #52	@ 0x34
 80125c2:	460c      	mov	r4, r1
 80125c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80125c8:	4616      	mov	r6, r2
 80125ca:	461f      	mov	r7, r3
 80125cc:	4605      	mov	r5, r0
 80125ce:	f000 fd51 	bl	8013074 <_localeconv_r>
 80125d2:	6803      	ldr	r3, [r0, #0]
 80125d4:	9304      	str	r3, [sp, #16]
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7ed fe22 	bl	8000220 <strlen>
 80125dc:	2300      	movs	r3, #0
 80125de:	930a      	str	r3, [sp, #40]	@ 0x28
 80125e0:	f8d8 3000 	ldr.w	r3, [r8]
 80125e4:	9005      	str	r0, [sp, #20]
 80125e6:	3307      	adds	r3, #7
 80125e8:	f023 0307 	bic.w	r3, r3, #7
 80125ec:	f103 0208 	add.w	r2, r3, #8
 80125f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80125f4:	f8d4 b000 	ldr.w	fp, [r4]
 80125f8:	f8c8 2000 	str.w	r2, [r8]
 80125fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012600:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012604:	9307      	str	r3, [sp, #28]
 8012606:	f8cd 8018 	str.w	r8, [sp, #24]
 801260a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801260e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012612:	4b9c      	ldr	r3, [pc, #624]	@ (8012884 <_printf_float+0x2c8>)
 8012614:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012618:	f7ee fa60 	bl	8000adc <__aeabi_dcmpun>
 801261c:	bb70      	cbnz	r0, 801267c <_printf_float+0xc0>
 801261e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012622:	4b98      	ldr	r3, [pc, #608]	@ (8012884 <_printf_float+0x2c8>)
 8012624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012628:	f7ee fa3a 	bl	8000aa0 <__aeabi_dcmple>
 801262c:	bb30      	cbnz	r0, 801267c <_printf_float+0xc0>
 801262e:	2200      	movs	r2, #0
 8012630:	2300      	movs	r3, #0
 8012632:	4640      	mov	r0, r8
 8012634:	4649      	mov	r1, r9
 8012636:	f7ee fa29 	bl	8000a8c <__aeabi_dcmplt>
 801263a:	b110      	cbz	r0, 8012642 <_printf_float+0x86>
 801263c:	232d      	movs	r3, #45	@ 0x2d
 801263e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012642:	4a91      	ldr	r2, [pc, #580]	@ (8012888 <_printf_float+0x2cc>)
 8012644:	4b91      	ldr	r3, [pc, #580]	@ (801288c <_printf_float+0x2d0>)
 8012646:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801264a:	bf8c      	ite	hi
 801264c:	4690      	movhi	r8, r2
 801264e:	4698      	movls	r8, r3
 8012650:	2303      	movs	r3, #3
 8012652:	6123      	str	r3, [r4, #16]
 8012654:	f02b 0304 	bic.w	r3, fp, #4
 8012658:	6023      	str	r3, [r4, #0]
 801265a:	f04f 0900 	mov.w	r9, #0
 801265e:	9700      	str	r7, [sp, #0]
 8012660:	4633      	mov	r3, r6
 8012662:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012664:	4621      	mov	r1, r4
 8012666:	4628      	mov	r0, r5
 8012668:	f000 f9d2 	bl	8012a10 <_printf_common>
 801266c:	3001      	adds	r0, #1
 801266e:	f040 808d 	bne.w	801278c <_printf_float+0x1d0>
 8012672:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012676:	b00d      	add	sp, #52	@ 0x34
 8012678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801267c:	4642      	mov	r2, r8
 801267e:	464b      	mov	r3, r9
 8012680:	4640      	mov	r0, r8
 8012682:	4649      	mov	r1, r9
 8012684:	f7ee fa2a 	bl	8000adc <__aeabi_dcmpun>
 8012688:	b140      	cbz	r0, 801269c <_printf_float+0xe0>
 801268a:	464b      	mov	r3, r9
 801268c:	2b00      	cmp	r3, #0
 801268e:	bfbc      	itt	lt
 8012690:	232d      	movlt	r3, #45	@ 0x2d
 8012692:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012696:	4a7e      	ldr	r2, [pc, #504]	@ (8012890 <_printf_float+0x2d4>)
 8012698:	4b7e      	ldr	r3, [pc, #504]	@ (8012894 <_printf_float+0x2d8>)
 801269a:	e7d4      	b.n	8012646 <_printf_float+0x8a>
 801269c:	6863      	ldr	r3, [r4, #4]
 801269e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80126a2:	9206      	str	r2, [sp, #24]
 80126a4:	1c5a      	adds	r2, r3, #1
 80126a6:	d13b      	bne.n	8012720 <_printf_float+0x164>
 80126a8:	2306      	movs	r3, #6
 80126aa:	6063      	str	r3, [r4, #4]
 80126ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80126b0:	2300      	movs	r3, #0
 80126b2:	6022      	str	r2, [r4, #0]
 80126b4:	9303      	str	r3, [sp, #12]
 80126b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80126b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80126bc:	ab09      	add	r3, sp, #36	@ 0x24
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	6861      	ldr	r1, [r4, #4]
 80126c2:	ec49 8b10 	vmov	d0, r8, r9
 80126c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80126ca:	4628      	mov	r0, r5
 80126cc:	f7ff fed6 	bl	801247c <__cvt>
 80126d0:	9b06      	ldr	r3, [sp, #24]
 80126d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80126d4:	2b47      	cmp	r3, #71	@ 0x47
 80126d6:	4680      	mov	r8, r0
 80126d8:	d129      	bne.n	801272e <_printf_float+0x172>
 80126da:	1cc8      	adds	r0, r1, #3
 80126dc:	db02      	blt.n	80126e4 <_printf_float+0x128>
 80126de:	6863      	ldr	r3, [r4, #4]
 80126e0:	4299      	cmp	r1, r3
 80126e2:	dd41      	ble.n	8012768 <_printf_float+0x1ac>
 80126e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80126e8:	fa5f fa8a 	uxtb.w	sl, sl
 80126ec:	3901      	subs	r1, #1
 80126ee:	4652      	mov	r2, sl
 80126f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80126f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80126f6:	f7ff ff26 	bl	8012546 <__exponent>
 80126fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80126fc:	1813      	adds	r3, r2, r0
 80126fe:	2a01      	cmp	r2, #1
 8012700:	4681      	mov	r9, r0
 8012702:	6123      	str	r3, [r4, #16]
 8012704:	dc02      	bgt.n	801270c <_printf_float+0x150>
 8012706:	6822      	ldr	r2, [r4, #0]
 8012708:	07d2      	lsls	r2, r2, #31
 801270a:	d501      	bpl.n	8012710 <_printf_float+0x154>
 801270c:	3301      	adds	r3, #1
 801270e:	6123      	str	r3, [r4, #16]
 8012710:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012714:	2b00      	cmp	r3, #0
 8012716:	d0a2      	beq.n	801265e <_printf_float+0xa2>
 8012718:	232d      	movs	r3, #45	@ 0x2d
 801271a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801271e:	e79e      	b.n	801265e <_printf_float+0xa2>
 8012720:	9a06      	ldr	r2, [sp, #24]
 8012722:	2a47      	cmp	r2, #71	@ 0x47
 8012724:	d1c2      	bne.n	80126ac <_printf_float+0xf0>
 8012726:	2b00      	cmp	r3, #0
 8012728:	d1c0      	bne.n	80126ac <_printf_float+0xf0>
 801272a:	2301      	movs	r3, #1
 801272c:	e7bd      	b.n	80126aa <_printf_float+0xee>
 801272e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012732:	d9db      	bls.n	80126ec <_printf_float+0x130>
 8012734:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012738:	d118      	bne.n	801276c <_printf_float+0x1b0>
 801273a:	2900      	cmp	r1, #0
 801273c:	6863      	ldr	r3, [r4, #4]
 801273e:	dd0b      	ble.n	8012758 <_printf_float+0x19c>
 8012740:	6121      	str	r1, [r4, #16]
 8012742:	b913      	cbnz	r3, 801274a <_printf_float+0x18e>
 8012744:	6822      	ldr	r2, [r4, #0]
 8012746:	07d0      	lsls	r0, r2, #31
 8012748:	d502      	bpl.n	8012750 <_printf_float+0x194>
 801274a:	3301      	adds	r3, #1
 801274c:	440b      	add	r3, r1
 801274e:	6123      	str	r3, [r4, #16]
 8012750:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012752:	f04f 0900 	mov.w	r9, #0
 8012756:	e7db      	b.n	8012710 <_printf_float+0x154>
 8012758:	b913      	cbnz	r3, 8012760 <_printf_float+0x1a4>
 801275a:	6822      	ldr	r2, [r4, #0]
 801275c:	07d2      	lsls	r2, r2, #31
 801275e:	d501      	bpl.n	8012764 <_printf_float+0x1a8>
 8012760:	3302      	adds	r3, #2
 8012762:	e7f4      	b.n	801274e <_printf_float+0x192>
 8012764:	2301      	movs	r3, #1
 8012766:	e7f2      	b.n	801274e <_printf_float+0x192>
 8012768:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801276c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801276e:	4299      	cmp	r1, r3
 8012770:	db05      	blt.n	801277e <_printf_float+0x1c2>
 8012772:	6823      	ldr	r3, [r4, #0]
 8012774:	6121      	str	r1, [r4, #16]
 8012776:	07d8      	lsls	r0, r3, #31
 8012778:	d5ea      	bpl.n	8012750 <_printf_float+0x194>
 801277a:	1c4b      	adds	r3, r1, #1
 801277c:	e7e7      	b.n	801274e <_printf_float+0x192>
 801277e:	2900      	cmp	r1, #0
 8012780:	bfd4      	ite	le
 8012782:	f1c1 0202 	rsble	r2, r1, #2
 8012786:	2201      	movgt	r2, #1
 8012788:	4413      	add	r3, r2
 801278a:	e7e0      	b.n	801274e <_printf_float+0x192>
 801278c:	6823      	ldr	r3, [r4, #0]
 801278e:	055a      	lsls	r2, r3, #21
 8012790:	d407      	bmi.n	80127a2 <_printf_float+0x1e6>
 8012792:	6923      	ldr	r3, [r4, #16]
 8012794:	4642      	mov	r2, r8
 8012796:	4631      	mov	r1, r6
 8012798:	4628      	mov	r0, r5
 801279a:	47b8      	blx	r7
 801279c:	3001      	adds	r0, #1
 801279e:	d12b      	bne.n	80127f8 <_printf_float+0x23c>
 80127a0:	e767      	b.n	8012672 <_printf_float+0xb6>
 80127a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80127a6:	f240 80dd 	bls.w	8012964 <_printf_float+0x3a8>
 80127aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80127ae:	2200      	movs	r2, #0
 80127b0:	2300      	movs	r3, #0
 80127b2:	f7ee f961 	bl	8000a78 <__aeabi_dcmpeq>
 80127b6:	2800      	cmp	r0, #0
 80127b8:	d033      	beq.n	8012822 <_printf_float+0x266>
 80127ba:	4a37      	ldr	r2, [pc, #220]	@ (8012898 <_printf_float+0x2dc>)
 80127bc:	2301      	movs	r3, #1
 80127be:	4631      	mov	r1, r6
 80127c0:	4628      	mov	r0, r5
 80127c2:	47b8      	blx	r7
 80127c4:	3001      	adds	r0, #1
 80127c6:	f43f af54 	beq.w	8012672 <_printf_float+0xb6>
 80127ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80127ce:	4543      	cmp	r3, r8
 80127d0:	db02      	blt.n	80127d8 <_printf_float+0x21c>
 80127d2:	6823      	ldr	r3, [r4, #0]
 80127d4:	07d8      	lsls	r0, r3, #31
 80127d6:	d50f      	bpl.n	80127f8 <_printf_float+0x23c>
 80127d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127dc:	4631      	mov	r1, r6
 80127de:	4628      	mov	r0, r5
 80127e0:	47b8      	blx	r7
 80127e2:	3001      	adds	r0, #1
 80127e4:	f43f af45 	beq.w	8012672 <_printf_float+0xb6>
 80127e8:	f04f 0900 	mov.w	r9, #0
 80127ec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80127f0:	f104 0a1a 	add.w	sl, r4, #26
 80127f4:	45c8      	cmp	r8, r9
 80127f6:	dc09      	bgt.n	801280c <_printf_float+0x250>
 80127f8:	6823      	ldr	r3, [r4, #0]
 80127fa:	079b      	lsls	r3, r3, #30
 80127fc:	f100 8103 	bmi.w	8012a06 <_printf_float+0x44a>
 8012800:	68e0      	ldr	r0, [r4, #12]
 8012802:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012804:	4298      	cmp	r0, r3
 8012806:	bfb8      	it	lt
 8012808:	4618      	movlt	r0, r3
 801280a:	e734      	b.n	8012676 <_printf_float+0xba>
 801280c:	2301      	movs	r3, #1
 801280e:	4652      	mov	r2, sl
 8012810:	4631      	mov	r1, r6
 8012812:	4628      	mov	r0, r5
 8012814:	47b8      	blx	r7
 8012816:	3001      	adds	r0, #1
 8012818:	f43f af2b 	beq.w	8012672 <_printf_float+0xb6>
 801281c:	f109 0901 	add.w	r9, r9, #1
 8012820:	e7e8      	b.n	80127f4 <_printf_float+0x238>
 8012822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012824:	2b00      	cmp	r3, #0
 8012826:	dc39      	bgt.n	801289c <_printf_float+0x2e0>
 8012828:	4a1b      	ldr	r2, [pc, #108]	@ (8012898 <_printf_float+0x2dc>)
 801282a:	2301      	movs	r3, #1
 801282c:	4631      	mov	r1, r6
 801282e:	4628      	mov	r0, r5
 8012830:	47b8      	blx	r7
 8012832:	3001      	adds	r0, #1
 8012834:	f43f af1d 	beq.w	8012672 <_printf_float+0xb6>
 8012838:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801283c:	ea59 0303 	orrs.w	r3, r9, r3
 8012840:	d102      	bne.n	8012848 <_printf_float+0x28c>
 8012842:	6823      	ldr	r3, [r4, #0]
 8012844:	07d9      	lsls	r1, r3, #31
 8012846:	d5d7      	bpl.n	80127f8 <_printf_float+0x23c>
 8012848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801284c:	4631      	mov	r1, r6
 801284e:	4628      	mov	r0, r5
 8012850:	47b8      	blx	r7
 8012852:	3001      	adds	r0, #1
 8012854:	f43f af0d 	beq.w	8012672 <_printf_float+0xb6>
 8012858:	f04f 0a00 	mov.w	sl, #0
 801285c:	f104 0b1a 	add.w	fp, r4, #26
 8012860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012862:	425b      	negs	r3, r3
 8012864:	4553      	cmp	r3, sl
 8012866:	dc01      	bgt.n	801286c <_printf_float+0x2b0>
 8012868:	464b      	mov	r3, r9
 801286a:	e793      	b.n	8012794 <_printf_float+0x1d8>
 801286c:	2301      	movs	r3, #1
 801286e:	465a      	mov	r2, fp
 8012870:	4631      	mov	r1, r6
 8012872:	4628      	mov	r0, r5
 8012874:	47b8      	blx	r7
 8012876:	3001      	adds	r0, #1
 8012878:	f43f aefb 	beq.w	8012672 <_printf_float+0xb6>
 801287c:	f10a 0a01 	add.w	sl, sl, #1
 8012880:	e7ee      	b.n	8012860 <_printf_float+0x2a4>
 8012882:	bf00      	nop
 8012884:	7fefffff 	.word	0x7fefffff
 8012888:	08018224 	.word	0x08018224
 801288c:	08018220 	.word	0x08018220
 8012890:	0801822c 	.word	0x0801822c
 8012894:	08018228 	.word	0x08018228
 8012898:	08018230 	.word	0x08018230
 801289c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801289e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80128a2:	4553      	cmp	r3, sl
 80128a4:	bfa8      	it	ge
 80128a6:	4653      	movge	r3, sl
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	4699      	mov	r9, r3
 80128ac:	dc36      	bgt.n	801291c <_printf_float+0x360>
 80128ae:	f04f 0b00 	mov.w	fp, #0
 80128b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80128b6:	f104 021a 	add.w	r2, r4, #26
 80128ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80128bc:	9306      	str	r3, [sp, #24]
 80128be:	eba3 0309 	sub.w	r3, r3, r9
 80128c2:	455b      	cmp	r3, fp
 80128c4:	dc31      	bgt.n	801292a <_printf_float+0x36e>
 80128c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128c8:	459a      	cmp	sl, r3
 80128ca:	dc3a      	bgt.n	8012942 <_printf_float+0x386>
 80128cc:	6823      	ldr	r3, [r4, #0]
 80128ce:	07da      	lsls	r2, r3, #31
 80128d0:	d437      	bmi.n	8012942 <_printf_float+0x386>
 80128d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128d4:	ebaa 0903 	sub.w	r9, sl, r3
 80128d8:	9b06      	ldr	r3, [sp, #24]
 80128da:	ebaa 0303 	sub.w	r3, sl, r3
 80128de:	4599      	cmp	r9, r3
 80128e0:	bfa8      	it	ge
 80128e2:	4699      	movge	r9, r3
 80128e4:	f1b9 0f00 	cmp.w	r9, #0
 80128e8:	dc33      	bgt.n	8012952 <_printf_float+0x396>
 80128ea:	f04f 0800 	mov.w	r8, #0
 80128ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80128f2:	f104 0b1a 	add.w	fp, r4, #26
 80128f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128f8:	ebaa 0303 	sub.w	r3, sl, r3
 80128fc:	eba3 0309 	sub.w	r3, r3, r9
 8012900:	4543      	cmp	r3, r8
 8012902:	f77f af79 	ble.w	80127f8 <_printf_float+0x23c>
 8012906:	2301      	movs	r3, #1
 8012908:	465a      	mov	r2, fp
 801290a:	4631      	mov	r1, r6
 801290c:	4628      	mov	r0, r5
 801290e:	47b8      	blx	r7
 8012910:	3001      	adds	r0, #1
 8012912:	f43f aeae 	beq.w	8012672 <_printf_float+0xb6>
 8012916:	f108 0801 	add.w	r8, r8, #1
 801291a:	e7ec      	b.n	80128f6 <_printf_float+0x33a>
 801291c:	4642      	mov	r2, r8
 801291e:	4631      	mov	r1, r6
 8012920:	4628      	mov	r0, r5
 8012922:	47b8      	blx	r7
 8012924:	3001      	adds	r0, #1
 8012926:	d1c2      	bne.n	80128ae <_printf_float+0x2f2>
 8012928:	e6a3      	b.n	8012672 <_printf_float+0xb6>
 801292a:	2301      	movs	r3, #1
 801292c:	4631      	mov	r1, r6
 801292e:	4628      	mov	r0, r5
 8012930:	9206      	str	r2, [sp, #24]
 8012932:	47b8      	blx	r7
 8012934:	3001      	adds	r0, #1
 8012936:	f43f ae9c 	beq.w	8012672 <_printf_float+0xb6>
 801293a:	9a06      	ldr	r2, [sp, #24]
 801293c:	f10b 0b01 	add.w	fp, fp, #1
 8012940:	e7bb      	b.n	80128ba <_printf_float+0x2fe>
 8012942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012946:	4631      	mov	r1, r6
 8012948:	4628      	mov	r0, r5
 801294a:	47b8      	blx	r7
 801294c:	3001      	adds	r0, #1
 801294e:	d1c0      	bne.n	80128d2 <_printf_float+0x316>
 8012950:	e68f      	b.n	8012672 <_printf_float+0xb6>
 8012952:	9a06      	ldr	r2, [sp, #24]
 8012954:	464b      	mov	r3, r9
 8012956:	4442      	add	r2, r8
 8012958:	4631      	mov	r1, r6
 801295a:	4628      	mov	r0, r5
 801295c:	47b8      	blx	r7
 801295e:	3001      	adds	r0, #1
 8012960:	d1c3      	bne.n	80128ea <_printf_float+0x32e>
 8012962:	e686      	b.n	8012672 <_printf_float+0xb6>
 8012964:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012968:	f1ba 0f01 	cmp.w	sl, #1
 801296c:	dc01      	bgt.n	8012972 <_printf_float+0x3b6>
 801296e:	07db      	lsls	r3, r3, #31
 8012970:	d536      	bpl.n	80129e0 <_printf_float+0x424>
 8012972:	2301      	movs	r3, #1
 8012974:	4642      	mov	r2, r8
 8012976:	4631      	mov	r1, r6
 8012978:	4628      	mov	r0, r5
 801297a:	47b8      	blx	r7
 801297c:	3001      	adds	r0, #1
 801297e:	f43f ae78 	beq.w	8012672 <_printf_float+0xb6>
 8012982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012986:	4631      	mov	r1, r6
 8012988:	4628      	mov	r0, r5
 801298a:	47b8      	blx	r7
 801298c:	3001      	adds	r0, #1
 801298e:	f43f ae70 	beq.w	8012672 <_printf_float+0xb6>
 8012992:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012996:	2200      	movs	r2, #0
 8012998:	2300      	movs	r3, #0
 801299a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801299e:	f7ee f86b 	bl	8000a78 <__aeabi_dcmpeq>
 80129a2:	b9c0      	cbnz	r0, 80129d6 <_printf_float+0x41a>
 80129a4:	4653      	mov	r3, sl
 80129a6:	f108 0201 	add.w	r2, r8, #1
 80129aa:	4631      	mov	r1, r6
 80129ac:	4628      	mov	r0, r5
 80129ae:	47b8      	blx	r7
 80129b0:	3001      	adds	r0, #1
 80129b2:	d10c      	bne.n	80129ce <_printf_float+0x412>
 80129b4:	e65d      	b.n	8012672 <_printf_float+0xb6>
 80129b6:	2301      	movs	r3, #1
 80129b8:	465a      	mov	r2, fp
 80129ba:	4631      	mov	r1, r6
 80129bc:	4628      	mov	r0, r5
 80129be:	47b8      	blx	r7
 80129c0:	3001      	adds	r0, #1
 80129c2:	f43f ae56 	beq.w	8012672 <_printf_float+0xb6>
 80129c6:	f108 0801 	add.w	r8, r8, #1
 80129ca:	45d0      	cmp	r8, sl
 80129cc:	dbf3      	blt.n	80129b6 <_printf_float+0x3fa>
 80129ce:	464b      	mov	r3, r9
 80129d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80129d4:	e6df      	b.n	8012796 <_printf_float+0x1da>
 80129d6:	f04f 0800 	mov.w	r8, #0
 80129da:	f104 0b1a 	add.w	fp, r4, #26
 80129de:	e7f4      	b.n	80129ca <_printf_float+0x40e>
 80129e0:	2301      	movs	r3, #1
 80129e2:	4642      	mov	r2, r8
 80129e4:	e7e1      	b.n	80129aa <_printf_float+0x3ee>
 80129e6:	2301      	movs	r3, #1
 80129e8:	464a      	mov	r2, r9
 80129ea:	4631      	mov	r1, r6
 80129ec:	4628      	mov	r0, r5
 80129ee:	47b8      	blx	r7
 80129f0:	3001      	adds	r0, #1
 80129f2:	f43f ae3e 	beq.w	8012672 <_printf_float+0xb6>
 80129f6:	f108 0801 	add.w	r8, r8, #1
 80129fa:	68e3      	ldr	r3, [r4, #12]
 80129fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80129fe:	1a5b      	subs	r3, r3, r1
 8012a00:	4543      	cmp	r3, r8
 8012a02:	dcf0      	bgt.n	80129e6 <_printf_float+0x42a>
 8012a04:	e6fc      	b.n	8012800 <_printf_float+0x244>
 8012a06:	f04f 0800 	mov.w	r8, #0
 8012a0a:	f104 0919 	add.w	r9, r4, #25
 8012a0e:	e7f4      	b.n	80129fa <_printf_float+0x43e>

08012a10 <_printf_common>:
 8012a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a14:	4616      	mov	r6, r2
 8012a16:	4698      	mov	r8, r3
 8012a18:	688a      	ldr	r2, [r1, #8]
 8012a1a:	690b      	ldr	r3, [r1, #16]
 8012a1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012a20:	4293      	cmp	r3, r2
 8012a22:	bfb8      	it	lt
 8012a24:	4613      	movlt	r3, r2
 8012a26:	6033      	str	r3, [r6, #0]
 8012a28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012a2c:	4607      	mov	r7, r0
 8012a2e:	460c      	mov	r4, r1
 8012a30:	b10a      	cbz	r2, 8012a36 <_printf_common+0x26>
 8012a32:	3301      	adds	r3, #1
 8012a34:	6033      	str	r3, [r6, #0]
 8012a36:	6823      	ldr	r3, [r4, #0]
 8012a38:	0699      	lsls	r1, r3, #26
 8012a3a:	bf42      	ittt	mi
 8012a3c:	6833      	ldrmi	r3, [r6, #0]
 8012a3e:	3302      	addmi	r3, #2
 8012a40:	6033      	strmi	r3, [r6, #0]
 8012a42:	6825      	ldr	r5, [r4, #0]
 8012a44:	f015 0506 	ands.w	r5, r5, #6
 8012a48:	d106      	bne.n	8012a58 <_printf_common+0x48>
 8012a4a:	f104 0a19 	add.w	sl, r4, #25
 8012a4e:	68e3      	ldr	r3, [r4, #12]
 8012a50:	6832      	ldr	r2, [r6, #0]
 8012a52:	1a9b      	subs	r3, r3, r2
 8012a54:	42ab      	cmp	r3, r5
 8012a56:	dc26      	bgt.n	8012aa6 <_printf_common+0x96>
 8012a58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012a5c:	6822      	ldr	r2, [r4, #0]
 8012a5e:	3b00      	subs	r3, #0
 8012a60:	bf18      	it	ne
 8012a62:	2301      	movne	r3, #1
 8012a64:	0692      	lsls	r2, r2, #26
 8012a66:	d42b      	bmi.n	8012ac0 <_printf_common+0xb0>
 8012a68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012a6c:	4641      	mov	r1, r8
 8012a6e:	4638      	mov	r0, r7
 8012a70:	47c8      	blx	r9
 8012a72:	3001      	adds	r0, #1
 8012a74:	d01e      	beq.n	8012ab4 <_printf_common+0xa4>
 8012a76:	6823      	ldr	r3, [r4, #0]
 8012a78:	6922      	ldr	r2, [r4, #16]
 8012a7a:	f003 0306 	and.w	r3, r3, #6
 8012a7e:	2b04      	cmp	r3, #4
 8012a80:	bf02      	ittt	eq
 8012a82:	68e5      	ldreq	r5, [r4, #12]
 8012a84:	6833      	ldreq	r3, [r6, #0]
 8012a86:	1aed      	subeq	r5, r5, r3
 8012a88:	68a3      	ldr	r3, [r4, #8]
 8012a8a:	bf0c      	ite	eq
 8012a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a90:	2500      	movne	r5, #0
 8012a92:	4293      	cmp	r3, r2
 8012a94:	bfc4      	itt	gt
 8012a96:	1a9b      	subgt	r3, r3, r2
 8012a98:	18ed      	addgt	r5, r5, r3
 8012a9a:	2600      	movs	r6, #0
 8012a9c:	341a      	adds	r4, #26
 8012a9e:	42b5      	cmp	r5, r6
 8012aa0:	d11a      	bne.n	8012ad8 <_printf_common+0xc8>
 8012aa2:	2000      	movs	r0, #0
 8012aa4:	e008      	b.n	8012ab8 <_printf_common+0xa8>
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	4652      	mov	r2, sl
 8012aaa:	4641      	mov	r1, r8
 8012aac:	4638      	mov	r0, r7
 8012aae:	47c8      	blx	r9
 8012ab0:	3001      	adds	r0, #1
 8012ab2:	d103      	bne.n	8012abc <_printf_common+0xac>
 8012ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012abc:	3501      	adds	r5, #1
 8012abe:	e7c6      	b.n	8012a4e <_printf_common+0x3e>
 8012ac0:	18e1      	adds	r1, r4, r3
 8012ac2:	1c5a      	adds	r2, r3, #1
 8012ac4:	2030      	movs	r0, #48	@ 0x30
 8012ac6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012aca:	4422      	add	r2, r4
 8012acc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012ad0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012ad4:	3302      	adds	r3, #2
 8012ad6:	e7c7      	b.n	8012a68 <_printf_common+0x58>
 8012ad8:	2301      	movs	r3, #1
 8012ada:	4622      	mov	r2, r4
 8012adc:	4641      	mov	r1, r8
 8012ade:	4638      	mov	r0, r7
 8012ae0:	47c8      	blx	r9
 8012ae2:	3001      	adds	r0, #1
 8012ae4:	d0e6      	beq.n	8012ab4 <_printf_common+0xa4>
 8012ae6:	3601      	adds	r6, #1
 8012ae8:	e7d9      	b.n	8012a9e <_printf_common+0x8e>
	...

08012aec <_printf_i>:
 8012aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012af0:	7e0f      	ldrb	r7, [r1, #24]
 8012af2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012af4:	2f78      	cmp	r7, #120	@ 0x78
 8012af6:	4691      	mov	r9, r2
 8012af8:	4680      	mov	r8, r0
 8012afa:	460c      	mov	r4, r1
 8012afc:	469a      	mov	sl, r3
 8012afe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012b02:	d807      	bhi.n	8012b14 <_printf_i+0x28>
 8012b04:	2f62      	cmp	r7, #98	@ 0x62
 8012b06:	d80a      	bhi.n	8012b1e <_printf_i+0x32>
 8012b08:	2f00      	cmp	r7, #0
 8012b0a:	f000 80d1 	beq.w	8012cb0 <_printf_i+0x1c4>
 8012b0e:	2f58      	cmp	r7, #88	@ 0x58
 8012b10:	f000 80b8 	beq.w	8012c84 <_printf_i+0x198>
 8012b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012b1c:	e03a      	b.n	8012b94 <_printf_i+0xa8>
 8012b1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012b22:	2b15      	cmp	r3, #21
 8012b24:	d8f6      	bhi.n	8012b14 <_printf_i+0x28>
 8012b26:	a101      	add	r1, pc, #4	@ (adr r1, 8012b2c <_printf_i+0x40>)
 8012b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b2c:	08012b85 	.word	0x08012b85
 8012b30:	08012b99 	.word	0x08012b99
 8012b34:	08012b15 	.word	0x08012b15
 8012b38:	08012b15 	.word	0x08012b15
 8012b3c:	08012b15 	.word	0x08012b15
 8012b40:	08012b15 	.word	0x08012b15
 8012b44:	08012b99 	.word	0x08012b99
 8012b48:	08012b15 	.word	0x08012b15
 8012b4c:	08012b15 	.word	0x08012b15
 8012b50:	08012b15 	.word	0x08012b15
 8012b54:	08012b15 	.word	0x08012b15
 8012b58:	08012c97 	.word	0x08012c97
 8012b5c:	08012bc3 	.word	0x08012bc3
 8012b60:	08012c51 	.word	0x08012c51
 8012b64:	08012b15 	.word	0x08012b15
 8012b68:	08012b15 	.word	0x08012b15
 8012b6c:	08012cb9 	.word	0x08012cb9
 8012b70:	08012b15 	.word	0x08012b15
 8012b74:	08012bc3 	.word	0x08012bc3
 8012b78:	08012b15 	.word	0x08012b15
 8012b7c:	08012b15 	.word	0x08012b15
 8012b80:	08012c59 	.word	0x08012c59
 8012b84:	6833      	ldr	r3, [r6, #0]
 8012b86:	1d1a      	adds	r2, r3, #4
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	6032      	str	r2, [r6, #0]
 8012b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012b94:	2301      	movs	r3, #1
 8012b96:	e09c      	b.n	8012cd2 <_printf_i+0x1e6>
 8012b98:	6833      	ldr	r3, [r6, #0]
 8012b9a:	6820      	ldr	r0, [r4, #0]
 8012b9c:	1d19      	adds	r1, r3, #4
 8012b9e:	6031      	str	r1, [r6, #0]
 8012ba0:	0606      	lsls	r6, r0, #24
 8012ba2:	d501      	bpl.n	8012ba8 <_printf_i+0xbc>
 8012ba4:	681d      	ldr	r5, [r3, #0]
 8012ba6:	e003      	b.n	8012bb0 <_printf_i+0xc4>
 8012ba8:	0645      	lsls	r5, r0, #25
 8012baa:	d5fb      	bpl.n	8012ba4 <_printf_i+0xb8>
 8012bac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012bb0:	2d00      	cmp	r5, #0
 8012bb2:	da03      	bge.n	8012bbc <_printf_i+0xd0>
 8012bb4:	232d      	movs	r3, #45	@ 0x2d
 8012bb6:	426d      	negs	r5, r5
 8012bb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012bbc:	4858      	ldr	r0, [pc, #352]	@ (8012d20 <_printf_i+0x234>)
 8012bbe:	230a      	movs	r3, #10
 8012bc0:	e011      	b.n	8012be6 <_printf_i+0xfa>
 8012bc2:	6821      	ldr	r1, [r4, #0]
 8012bc4:	6833      	ldr	r3, [r6, #0]
 8012bc6:	0608      	lsls	r0, r1, #24
 8012bc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8012bcc:	d402      	bmi.n	8012bd4 <_printf_i+0xe8>
 8012bce:	0649      	lsls	r1, r1, #25
 8012bd0:	bf48      	it	mi
 8012bd2:	b2ad      	uxthmi	r5, r5
 8012bd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8012bd6:	4852      	ldr	r0, [pc, #328]	@ (8012d20 <_printf_i+0x234>)
 8012bd8:	6033      	str	r3, [r6, #0]
 8012bda:	bf14      	ite	ne
 8012bdc:	230a      	movne	r3, #10
 8012bde:	2308      	moveq	r3, #8
 8012be0:	2100      	movs	r1, #0
 8012be2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012be6:	6866      	ldr	r6, [r4, #4]
 8012be8:	60a6      	str	r6, [r4, #8]
 8012bea:	2e00      	cmp	r6, #0
 8012bec:	db05      	blt.n	8012bfa <_printf_i+0x10e>
 8012bee:	6821      	ldr	r1, [r4, #0]
 8012bf0:	432e      	orrs	r6, r5
 8012bf2:	f021 0104 	bic.w	r1, r1, #4
 8012bf6:	6021      	str	r1, [r4, #0]
 8012bf8:	d04b      	beq.n	8012c92 <_printf_i+0x1a6>
 8012bfa:	4616      	mov	r6, r2
 8012bfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8012c00:	fb03 5711 	mls	r7, r3, r1, r5
 8012c04:	5dc7      	ldrb	r7, [r0, r7]
 8012c06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012c0a:	462f      	mov	r7, r5
 8012c0c:	42bb      	cmp	r3, r7
 8012c0e:	460d      	mov	r5, r1
 8012c10:	d9f4      	bls.n	8012bfc <_printf_i+0x110>
 8012c12:	2b08      	cmp	r3, #8
 8012c14:	d10b      	bne.n	8012c2e <_printf_i+0x142>
 8012c16:	6823      	ldr	r3, [r4, #0]
 8012c18:	07df      	lsls	r7, r3, #31
 8012c1a:	d508      	bpl.n	8012c2e <_printf_i+0x142>
 8012c1c:	6923      	ldr	r3, [r4, #16]
 8012c1e:	6861      	ldr	r1, [r4, #4]
 8012c20:	4299      	cmp	r1, r3
 8012c22:	bfde      	ittt	le
 8012c24:	2330      	movle	r3, #48	@ 0x30
 8012c26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012c2a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8012c2e:	1b92      	subs	r2, r2, r6
 8012c30:	6122      	str	r2, [r4, #16]
 8012c32:	f8cd a000 	str.w	sl, [sp]
 8012c36:	464b      	mov	r3, r9
 8012c38:	aa03      	add	r2, sp, #12
 8012c3a:	4621      	mov	r1, r4
 8012c3c:	4640      	mov	r0, r8
 8012c3e:	f7ff fee7 	bl	8012a10 <_printf_common>
 8012c42:	3001      	adds	r0, #1
 8012c44:	d14a      	bne.n	8012cdc <_printf_i+0x1f0>
 8012c46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c4a:	b004      	add	sp, #16
 8012c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c50:	6823      	ldr	r3, [r4, #0]
 8012c52:	f043 0320 	orr.w	r3, r3, #32
 8012c56:	6023      	str	r3, [r4, #0]
 8012c58:	4832      	ldr	r0, [pc, #200]	@ (8012d24 <_printf_i+0x238>)
 8012c5a:	2778      	movs	r7, #120	@ 0x78
 8012c5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012c60:	6823      	ldr	r3, [r4, #0]
 8012c62:	6831      	ldr	r1, [r6, #0]
 8012c64:	061f      	lsls	r7, r3, #24
 8012c66:	f851 5b04 	ldr.w	r5, [r1], #4
 8012c6a:	d402      	bmi.n	8012c72 <_printf_i+0x186>
 8012c6c:	065f      	lsls	r7, r3, #25
 8012c6e:	bf48      	it	mi
 8012c70:	b2ad      	uxthmi	r5, r5
 8012c72:	6031      	str	r1, [r6, #0]
 8012c74:	07d9      	lsls	r1, r3, #31
 8012c76:	bf44      	itt	mi
 8012c78:	f043 0320 	orrmi.w	r3, r3, #32
 8012c7c:	6023      	strmi	r3, [r4, #0]
 8012c7e:	b11d      	cbz	r5, 8012c88 <_printf_i+0x19c>
 8012c80:	2310      	movs	r3, #16
 8012c82:	e7ad      	b.n	8012be0 <_printf_i+0xf4>
 8012c84:	4826      	ldr	r0, [pc, #152]	@ (8012d20 <_printf_i+0x234>)
 8012c86:	e7e9      	b.n	8012c5c <_printf_i+0x170>
 8012c88:	6823      	ldr	r3, [r4, #0]
 8012c8a:	f023 0320 	bic.w	r3, r3, #32
 8012c8e:	6023      	str	r3, [r4, #0]
 8012c90:	e7f6      	b.n	8012c80 <_printf_i+0x194>
 8012c92:	4616      	mov	r6, r2
 8012c94:	e7bd      	b.n	8012c12 <_printf_i+0x126>
 8012c96:	6833      	ldr	r3, [r6, #0]
 8012c98:	6825      	ldr	r5, [r4, #0]
 8012c9a:	6961      	ldr	r1, [r4, #20]
 8012c9c:	1d18      	adds	r0, r3, #4
 8012c9e:	6030      	str	r0, [r6, #0]
 8012ca0:	062e      	lsls	r6, r5, #24
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	d501      	bpl.n	8012caa <_printf_i+0x1be>
 8012ca6:	6019      	str	r1, [r3, #0]
 8012ca8:	e002      	b.n	8012cb0 <_printf_i+0x1c4>
 8012caa:	0668      	lsls	r0, r5, #25
 8012cac:	d5fb      	bpl.n	8012ca6 <_printf_i+0x1ba>
 8012cae:	8019      	strh	r1, [r3, #0]
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	6123      	str	r3, [r4, #16]
 8012cb4:	4616      	mov	r6, r2
 8012cb6:	e7bc      	b.n	8012c32 <_printf_i+0x146>
 8012cb8:	6833      	ldr	r3, [r6, #0]
 8012cba:	1d1a      	adds	r2, r3, #4
 8012cbc:	6032      	str	r2, [r6, #0]
 8012cbe:	681e      	ldr	r6, [r3, #0]
 8012cc0:	6862      	ldr	r2, [r4, #4]
 8012cc2:	2100      	movs	r1, #0
 8012cc4:	4630      	mov	r0, r6
 8012cc6:	f7ed fa5b 	bl	8000180 <memchr>
 8012cca:	b108      	cbz	r0, 8012cd0 <_printf_i+0x1e4>
 8012ccc:	1b80      	subs	r0, r0, r6
 8012cce:	6060      	str	r0, [r4, #4]
 8012cd0:	6863      	ldr	r3, [r4, #4]
 8012cd2:	6123      	str	r3, [r4, #16]
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012cda:	e7aa      	b.n	8012c32 <_printf_i+0x146>
 8012cdc:	6923      	ldr	r3, [r4, #16]
 8012cde:	4632      	mov	r2, r6
 8012ce0:	4649      	mov	r1, r9
 8012ce2:	4640      	mov	r0, r8
 8012ce4:	47d0      	blx	sl
 8012ce6:	3001      	adds	r0, #1
 8012ce8:	d0ad      	beq.n	8012c46 <_printf_i+0x15a>
 8012cea:	6823      	ldr	r3, [r4, #0]
 8012cec:	079b      	lsls	r3, r3, #30
 8012cee:	d413      	bmi.n	8012d18 <_printf_i+0x22c>
 8012cf0:	68e0      	ldr	r0, [r4, #12]
 8012cf2:	9b03      	ldr	r3, [sp, #12]
 8012cf4:	4298      	cmp	r0, r3
 8012cf6:	bfb8      	it	lt
 8012cf8:	4618      	movlt	r0, r3
 8012cfa:	e7a6      	b.n	8012c4a <_printf_i+0x15e>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	4632      	mov	r2, r6
 8012d00:	4649      	mov	r1, r9
 8012d02:	4640      	mov	r0, r8
 8012d04:	47d0      	blx	sl
 8012d06:	3001      	adds	r0, #1
 8012d08:	d09d      	beq.n	8012c46 <_printf_i+0x15a>
 8012d0a:	3501      	adds	r5, #1
 8012d0c:	68e3      	ldr	r3, [r4, #12]
 8012d0e:	9903      	ldr	r1, [sp, #12]
 8012d10:	1a5b      	subs	r3, r3, r1
 8012d12:	42ab      	cmp	r3, r5
 8012d14:	dcf2      	bgt.n	8012cfc <_printf_i+0x210>
 8012d16:	e7eb      	b.n	8012cf0 <_printf_i+0x204>
 8012d18:	2500      	movs	r5, #0
 8012d1a:	f104 0619 	add.w	r6, r4, #25
 8012d1e:	e7f5      	b.n	8012d0c <_printf_i+0x220>
 8012d20:	08018232 	.word	0x08018232
 8012d24:	08018243 	.word	0x08018243

08012d28 <sniprintf>:
 8012d28:	b40c      	push	{r2, r3}
 8012d2a:	b530      	push	{r4, r5, lr}
 8012d2c:	4b18      	ldr	r3, [pc, #96]	@ (8012d90 <sniprintf+0x68>)
 8012d2e:	1e0c      	subs	r4, r1, #0
 8012d30:	681d      	ldr	r5, [r3, #0]
 8012d32:	b09d      	sub	sp, #116	@ 0x74
 8012d34:	da08      	bge.n	8012d48 <sniprintf+0x20>
 8012d36:	238b      	movs	r3, #139	@ 0x8b
 8012d38:	602b      	str	r3, [r5, #0]
 8012d3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d3e:	b01d      	add	sp, #116	@ 0x74
 8012d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d44:	b002      	add	sp, #8
 8012d46:	4770      	bx	lr
 8012d48:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012d4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012d50:	f04f 0300 	mov.w	r3, #0
 8012d54:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012d56:	bf14      	ite	ne
 8012d58:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8012d5c:	4623      	moveq	r3, r4
 8012d5e:	9304      	str	r3, [sp, #16]
 8012d60:	9307      	str	r3, [sp, #28]
 8012d62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012d66:	9002      	str	r0, [sp, #8]
 8012d68:	9006      	str	r0, [sp, #24]
 8012d6a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012d6e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012d70:	ab21      	add	r3, sp, #132	@ 0x84
 8012d72:	a902      	add	r1, sp, #8
 8012d74:	4628      	mov	r0, r5
 8012d76:	9301      	str	r3, [sp, #4]
 8012d78:	f001 f836 	bl	8013de8 <_svfiprintf_r>
 8012d7c:	1c43      	adds	r3, r0, #1
 8012d7e:	bfbc      	itt	lt
 8012d80:	238b      	movlt	r3, #139	@ 0x8b
 8012d82:	602b      	strlt	r3, [r5, #0]
 8012d84:	2c00      	cmp	r4, #0
 8012d86:	d0da      	beq.n	8012d3e <sniprintf+0x16>
 8012d88:	9b02      	ldr	r3, [sp, #8]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	701a      	strb	r2, [r3, #0]
 8012d8e:	e7d6      	b.n	8012d3e <sniprintf+0x16>
 8012d90:	2000009c 	.word	0x2000009c

08012d94 <std>:
 8012d94:	2300      	movs	r3, #0
 8012d96:	b510      	push	{r4, lr}
 8012d98:	4604      	mov	r4, r0
 8012d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8012d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012da2:	6083      	str	r3, [r0, #8]
 8012da4:	8181      	strh	r1, [r0, #12]
 8012da6:	6643      	str	r3, [r0, #100]	@ 0x64
 8012da8:	81c2      	strh	r2, [r0, #14]
 8012daa:	6183      	str	r3, [r0, #24]
 8012dac:	4619      	mov	r1, r3
 8012dae:	2208      	movs	r2, #8
 8012db0:	305c      	adds	r0, #92	@ 0x5c
 8012db2:	f000 f929 	bl	8013008 <memset>
 8012db6:	4b0d      	ldr	r3, [pc, #52]	@ (8012dec <std+0x58>)
 8012db8:	6263      	str	r3, [r4, #36]	@ 0x24
 8012dba:	4b0d      	ldr	r3, [pc, #52]	@ (8012df0 <std+0x5c>)
 8012dbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8012df4 <std+0x60>)
 8012dc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012df8 <std+0x64>)
 8012dc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8012dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8012dfc <std+0x68>)
 8012dc8:	6224      	str	r4, [r4, #32]
 8012dca:	429c      	cmp	r4, r3
 8012dcc:	d006      	beq.n	8012ddc <std+0x48>
 8012dce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012dd2:	4294      	cmp	r4, r2
 8012dd4:	d002      	beq.n	8012ddc <std+0x48>
 8012dd6:	33d0      	adds	r3, #208	@ 0xd0
 8012dd8:	429c      	cmp	r4, r3
 8012dda:	d105      	bne.n	8012de8 <std+0x54>
 8012ddc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012de4:	f000 b942 	b.w	801306c <__retarget_lock_init_recursive>
 8012de8:	bd10      	pop	{r4, pc}
 8012dea:	bf00      	nop
 8012dec:	08014c1d 	.word	0x08014c1d
 8012df0:	08014c3f 	.word	0x08014c3f
 8012df4:	08014c77 	.word	0x08014c77
 8012df8:	08014c9b 	.word	0x08014c9b
 8012dfc:	200006d8 	.word	0x200006d8

08012e00 <stdio_exit_handler>:
 8012e00:	4a02      	ldr	r2, [pc, #8]	@ (8012e0c <stdio_exit_handler+0xc>)
 8012e02:	4903      	ldr	r1, [pc, #12]	@ (8012e10 <stdio_exit_handler+0x10>)
 8012e04:	4803      	ldr	r0, [pc, #12]	@ (8012e14 <stdio_exit_handler+0x14>)
 8012e06:	f000 b869 	b.w	8012edc <_fwalk_sglue>
 8012e0a:	bf00      	nop
 8012e0c:	20000090 	.word	0x20000090
 8012e10:	080144c1 	.word	0x080144c1
 8012e14:	200000a0 	.word	0x200000a0

08012e18 <cleanup_stdio>:
 8012e18:	6841      	ldr	r1, [r0, #4]
 8012e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8012e4c <cleanup_stdio+0x34>)
 8012e1c:	4299      	cmp	r1, r3
 8012e1e:	b510      	push	{r4, lr}
 8012e20:	4604      	mov	r4, r0
 8012e22:	d001      	beq.n	8012e28 <cleanup_stdio+0x10>
 8012e24:	f001 fb4c 	bl	80144c0 <_fflush_r>
 8012e28:	68a1      	ldr	r1, [r4, #8]
 8012e2a:	4b09      	ldr	r3, [pc, #36]	@ (8012e50 <cleanup_stdio+0x38>)
 8012e2c:	4299      	cmp	r1, r3
 8012e2e:	d002      	beq.n	8012e36 <cleanup_stdio+0x1e>
 8012e30:	4620      	mov	r0, r4
 8012e32:	f001 fb45 	bl	80144c0 <_fflush_r>
 8012e36:	68e1      	ldr	r1, [r4, #12]
 8012e38:	4b06      	ldr	r3, [pc, #24]	@ (8012e54 <cleanup_stdio+0x3c>)
 8012e3a:	4299      	cmp	r1, r3
 8012e3c:	d004      	beq.n	8012e48 <cleanup_stdio+0x30>
 8012e3e:	4620      	mov	r0, r4
 8012e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e44:	f001 bb3c 	b.w	80144c0 <_fflush_r>
 8012e48:	bd10      	pop	{r4, pc}
 8012e4a:	bf00      	nop
 8012e4c:	200006d8 	.word	0x200006d8
 8012e50:	20000740 	.word	0x20000740
 8012e54:	200007a8 	.word	0x200007a8

08012e58 <global_stdio_init.part.0>:
 8012e58:	b510      	push	{r4, lr}
 8012e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8012e88 <global_stdio_init.part.0+0x30>)
 8012e5c:	4c0b      	ldr	r4, [pc, #44]	@ (8012e8c <global_stdio_init.part.0+0x34>)
 8012e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8012e90 <global_stdio_init.part.0+0x38>)
 8012e60:	601a      	str	r2, [r3, #0]
 8012e62:	4620      	mov	r0, r4
 8012e64:	2200      	movs	r2, #0
 8012e66:	2104      	movs	r1, #4
 8012e68:	f7ff ff94 	bl	8012d94 <std>
 8012e6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012e70:	2201      	movs	r2, #1
 8012e72:	2109      	movs	r1, #9
 8012e74:	f7ff ff8e 	bl	8012d94 <std>
 8012e78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012e7c:	2202      	movs	r2, #2
 8012e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e82:	2112      	movs	r1, #18
 8012e84:	f7ff bf86 	b.w	8012d94 <std>
 8012e88:	20000810 	.word	0x20000810
 8012e8c:	200006d8 	.word	0x200006d8
 8012e90:	08012e01 	.word	0x08012e01

08012e94 <__sfp_lock_acquire>:
 8012e94:	4801      	ldr	r0, [pc, #4]	@ (8012e9c <__sfp_lock_acquire+0x8>)
 8012e96:	f000 b8ea 	b.w	801306e <__retarget_lock_acquire_recursive>
 8012e9a:	bf00      	nop
 8012e9c:	20000815 	.word	0x20000815

08012ea0 <__sfp_lock_release>:
 8012ea0:	4801      	ldr	r0, [pc, #4]	@ (8012ea8 <__sfp_lock_release+0x8>)
 8012ea2:	f000 b8e5 	b.w	8013070 <__retarget_lock_release_recursive>
 8012ea6:	bf00      	nop
 8012ea8:	20000815 	.word	0x20000815

08012eac <__sinit>:
 8012eac:	b510      	push	{r4, lr}
 8012eae:	4604      	mov	r4, r0
 8012eb0:	f7ff fff0 	bl	8012e94 <__sfp_lock_acquire>
 8012eb4:	6a23      	ldr	r3, [r4, #32]
 8012eb6:	b11b      	cbz	r3, 8012ec0 <__sinit+0x14>
 8012eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ebc:	f7ff bff0 	b.w	8012ea0 <__sfp_lock_release>
 8012ec0:	4b04      	ldr	r3, [pc, #16]	@ (8012ed4 <__sinit+0x28>)
 8012ec2:	6223      	str	r3, [r4, #32]
 8012ec4:	4b04      	ldr	r3, [pc, #16]	@ (8012ed8 <__sinit+0x2c>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d1f5      	bne.n	8012eb8 <__sinit+0xc>
 8012ecc:	f7ff ffc4 	bl	8012e58 <global_stdio_init.part.0>
 8012ed0:	e7f2      	b.n	8012eb8 <__sinit+0xc>
 8012ed2:	bf00      	nop
 8012ed4:	08012e19 	.word	0x08012e19
 8012ed8:	20000810 	.word	0x20000810

08012edc <_fwalk_sglue>:
 8012edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ee0:	4607      	mov	r7, r0
 8012ee2:	4688      	mov	r8, r1
 8012ee4:	4614      	mov	r4, r2
 8012ee6:	2600      	movs	r6, #0
 8012ee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012eec:	f1b9 0901 	subs.w	r9, r9, #1
 8012ef0:	d505      	bpl.n	8012efe <_fwalk_sglue+0x22>
 8012ef2:	6824      	ldr	r4, [r4, #0]
 8012ef4:	2c00      	cmp	r4, #0
 8012ef6:	d1f7      	bne.n	8012ee8 <_fwalk_sglue+0xc>
 8012ef8:	4630      	mov	r0, r6
 8012efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012efe:	89ab      	ldrh	r3, [r5, #12]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d907      	bls.n	8012f14 <_fwalk_sglue+0x38>
 8012f04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f08:	3301      	adds	r3, #1
 8012f0a:	d003      	beq.n	8012f14 <_fwalk_sglue+0x38>
 8012f0c:	4629      	mov	r1, r5
 8012f0e:	4638      	mov	r0, r7
 8012f10:	47c0      	blx	r8
 8012f12:	4306      	orrs	r6, r0
 8012f14:	3568      	adds	r5, #104	@ 0x68
 8012f16:	e7e9      	b.n	8012eec <_fwalk_sglue+0x10>

08012f18 <iprintf>:
 8012f18:	b40f      	push	{r0, r1, r2, r3}
 8012f1a:	b507      	push	{r0, r1, r2, lr}
 8012f1c:	4906      	ldr	r1, [pc, #24]	@ (8012f38 <iprintf+0x20>)
 8012f1e:	ab04      	add	r3, sp, #16
 8012f20:	6808      	ldr	r0, [r1, #0]
 8012f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f26:	6881      	ldr	r1, [r0, #8]
 8012f28:	9301      	str	r3, [sp, #4]
 8012f2a:	f001 f883 	bl	8014034 <_vfiprintf_r>
 8012f2e:	b003      	add	sp, #12
 8012f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f34:	b004      	add	sp, #16
 8012f36:	4770      	bx	lr
 8012f38:	2000009c 	.word	0x2000009c

08012f3c <putchar>:
 8012f3c:	4b02      	ldr	r3, [pc, #8]	@ (8012f48 <putchar+0xc>)
 8012f3e:	4601      	mov	r1, r0
 8012f40:	6818      	ldr	r0, [r3, #0]
 8012f42:	6882      	ldr	r2, [r0, #8]
 8012f44:	f001 bfd2 	b.w	8014eec <_putc_r>
 8012f48:	2000009c 	.word	0x2000009c

08012f4c <_puts_r>:
 8012f4c:	6a03      	ldr	r3, [r0, #32]
 8012f4e:	b570      	push	{r4, r5, r6, lr}
 8012f50:	6884      	ldr	r4, [r0, #8]
 8012f52:	4605      	mov	r5, r0
 8012f54:	460e      	mov	r6, r1
 8012f56:	b90b      	cbnz	r3, 8012f5c <_puts_r+0x10>
 8012f58:	f7ff ffa8 	bl	8012eac <__sinit>
 8012f5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f5e:	07db      	lsls	r3, r3, #31
 8012f60:	d405      	bmi.n	8012f6e <_puts_r+0x22>
 8012f62:	89a3      	ldrh	r3, [r4, #12]
 8012f64:	0598      	lsls	r0, r3, #22
 8012f66:	d402      	bmi.n	8012f6e <_puts_r+0x22>
 8012f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f6a:	f000 f880 	bl	801306e <__retarget_lock_acquire_recursive>
 8012f6e:	89a3      	ldrh	r3, [r4, #12]
 8012f70:	0719      	lsls	r1, r3, #28
 8012f72:	d502      	bpl.n	8012f7a <_puts_r+0x2e>
 8012f74:	6923      	ldr	r3, [r4, #16]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d135      	bne.n	8012fe6 <_puts_r+0x9a>
 8012f7a:	4621      	mov	r1, r4
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f001 fefd 	bl	8014d7c <__swsetup_r>
 8012f82:	b380      	cbz	r0, 8012fe6 <_puts_r+0x9a>
 8012f84:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8012f88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f8a:	07da      	lsls	r2, r3, #31
 8012f8c:	d405      	bmi.n	8012f9a <_puts_r+0x4e>
 8012f8e:	89a3      	ldrh	r3, [r4, #12]
 8012f90:	059b      	lsls	r3, r3, #22
 8012f92:	d402      	bmi.n	8012f9a <_puts_r+0x4e>
 8012f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f96:	f000 f86b 	bl	8013070 <__retarget_lock_release_recursive>
 8012f9a:	4628      	mov	r0, r5
 8012f9c:	bd70      	pop	{r4, r5, r6, pc}
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	da04      	bge.n	8012fac <_puts_r+0x60>
 8012fa2:	69a2      	ldr	r2, [r4, #24]
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	dc17      	bgt.n	8012fd8 <_puts_r+0x8c>
 8012fa8:	290a      	cmp	r1, #10
 8012faa:	d015      	beq.n	8012fd8 <_puts_r+0x8c>
 8012fac:	6823      	ldr	r3, [r4, #0]
 8012fae:	1c5a      	adds	r2, r3, #1
 8012fb0:	6022      	str	r2, [r4, #0]
 8012fb2:	7019      	strb	r1, [r3, #0]
 8012fb4:	68a3      	ldr	r3, [r4, #8]
 8012fb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012fba:	3b01      	subs	r3, #1
 8012fbc:	60a3      	str	r3, [r4, #8]
 8012fbe:	2900      	cmp	r1, #0
 8012fc0:	d1ed      	bne.n	8012f9e <_puts_r+0x52>
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	da11      	bge.n	8012fea <_puts_r+0x9e>
 8012fc6:	4622      	mov	r2, r4
 8012fc8:	210a      	movs	r1, #10
 8012fca:	4628      	mov	r0, r5
 8012fcc:	f001 fe97 	bl	8014cfe <__swbuf_r>
 8012fd0:	3001      	adds	r0, #1
 8012fd2:	d0d7      	beq.n	8012f84 <_puts_r+0x38>
 8012fd4:	250a      	movs	r5, #10
 8012fd6:	e7d7      	b.n	8012f88 <_puts_r+0x3c>
 8012fd8:	4622      	mov	r2, r4
 8012fda:	4628      	mov	r0, r5
 8012fdc:	f001 fe8f 	bl	8014cfe <__swbuf_r>
 8012fe0:	3001      	adds	r0, #1
 8012fe2:	d1e7      	bne.n	8012fb4 <_puts_r+0x68>
 8012fe4:	e7ce      	b.n	8012f84 <_puts_r+0x38>
 8012fe6:	3e01      	subs	r6, #1
 8012fe8:	e7e4      	b.n	8012fb4 <_puts_r+0x68>
 8012fea:	6823      	ldr	r3, [r4, #0]
 8012fec:	1c5a      	adds	r2, r3, #1
 8012fee:	6022      	str	r2, [r4, #0]
 8012ff0:	220a      	movs	r2, #10
 8012ff2:	701a      	strb	r2, [r3, #0]
 8012ff4:	e7ee      	b.n	8012fd4 <_puts_r+0x88>
	...

08012ff8 <puts>:
 8012ff8:	4b02      	ldr	r3, [pc, #8]	@ (8013004 <puts+0xc>)
 8012ffa:	4601      	mov	r1, r0
 8012ffc:	6818      	ldr	r0, [r3, #0]
 8012ffe:	f7ff bfa5 	b.w	8012f4c <_puts_r>
 8013002:	bf00      	nop
 8013004:	2000009c 	.word	0x2000009c

08013008 <memset>:
 8013008:	4402      	add	r2, r0
 801300a:	4603      	mov	r3, r0
 801300c:	4293      	cmp	r3, r2
 801300e:	d100      	bne.n	8013012 <memset+0xa>
 8013010:	4770      	bx	lr
 8013012:	f803 1b01 	strb.w	r1, [r3], #1
 8013016:	e7f9      	b.n	801300c <memset+0x4>

08013018 <__errno>:
 8013018:	4b01      	ldr	r3, [pc, #4]	@ (8013020 <__errno+0x8>)
 801301a:	6818      	ldr	r0, [r3, #0]
 801301c:	4770      	bx	lr
 801301e:	bf00      	nop
 8013020:	2000009c 	.word	0x2000009c

08013024 <__libc_init_array>:
 8013024:	b570      	push	{r4, r5, r6, lr}
 8013026:	4d0d      	ldr	r5, [pc, #52]	@ (801305c <__libc_init_array+0x38>)
 8013028:	4c0d      	ldr	r4, [pc, #52]	@ (8013060 <__libc_init_array+0x3c>)
 801302a:	1b64      	subs	r4, r4, r5
 801302c:	10a4      	asrs	r4, r4, #2
 801302e:	2600      	movs	r6, #0
 8013030:	42a6      	cmp	r6, r4
 8013032:	d109      	bne.n	8013048 <__libc_init_array+0x24>
 8013034:	4d0b      	ldr	r5, [pc, #44]	@ (8013064 <__libc_init_array+0x40>)
 8013036:	4c0c      	ldr	r4, [pc, #48]	@ (8013068 <__libc_init_array+0x44>)
 8013038:	f002 f92c 	bl	8015294 <_init>
 801303c:	1b64      	subs	r4, r4, r5
 801303e:	10a4      	asrs	r4, r4, #2
 8013040:	2600      	movs	r6, #0
 8013042:	42a6      	cmp	r6, r4
 8013044:	d105      	bne.n	8013052 <__libc_init_array+0x2e>
 8013046:	bd70      	pop	{r4, r5, r6, pc}
 8013048:	f855 3b04 	ldr.w	r3, [r5], #4
 801304c:	4798      	blx	r3
 801304e:	3601      	adds	r6, #1
 8013050:	e7ee      	b.n	8013030 <__libc_init_array+0xc>
 8013052:	f855 3b04 	ldr.w	r3, [r5], #4
 8013056:	4798      	blx	r3
 8013058:	3601      	adds	r6, #1
 801305a:	e7f2      	b.n	8013042 <__libc_init_array+0x1e>
 801305c:	0801859c 	.word	0x0801859c
 8013060:	0801859c 	.word	0x0801859c
 8013064:	0801859c 	.word	0x0801859c
 8013068:	080185a4 	.word	0x080185a4

0801306c <__retarget_lock_init_recursive>:
 801306c:	4770      	bx	lr

0801306e <__retarget_lock_acquire_recursive>:
 801306e:	4770      	bx	lr

08013070 <__retarget_lock_release_recursive>:
 8013070:	4770      	bx	lr
	...

08013074 <_localeconv_r>:
 8013074:	4800      	ldr	r0, [pc, #0]	@ (8013078 <_localeconv_r+0x4>)
 8013076:	4770      	bx	lr
 8013078:	200001dc 	.word	0x200001dc

0801307c <quorem>:
 801307c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013080:	6903      	ldr	r3, [r0, #16]
 8013082:	690c      	ldr	r4, [r1, #16]
 8013084:	42a3      	cmp	r3, r4
 8013086:	4607      	mov	r7, r0
 8013088:	db7e      	blt.n	8013188 <quorem+0x10c>
 801308a:	3c01      	subs	r4, #1
 801308c:	f101 0814 	add.w	r8, r1, #20
 8013090:	00a3      	lsls	r3, r4, #2
 8013092:	f100 0514 	add.w	r5, r0, #20
 8013096:	9300      	str	r3, [sp, #0]
 8013098:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801309c:	9301      	str	r3, [sp, #4]
 801309e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80130a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80130a6:	3301      	adds	r3, #1
 80130a8:	429a      	cmp	r2, r3
 80130aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80130ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80130b2:	d32e      	bcc.n	8013112 <quorem+0x96>
 80130b4:	f04f 0a00 	mov.w	sl, #0
 80130b8:	46c4      	mov	ip, r8
 80130ba:	46ae      	mov	lr, r5
 80130bc:	46d3      	mov	fp, sl
 80130be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80130c2:	b298      	uxth	r0, r3
 80130c4:	fb06 a000 	mla	r0, r6, r0, sl
 80130c8:	0c02      	lsrs	r2, r0, #16
 80130ca:	0c1b      	lsrs	r3, r3, #16
 80130cc:	fb06 2303 	mla	r3, r6, r3, r2
 80130d0:	f8de 2000 	ldr.w	r2, [lr]
 80130d4:	b280      	uxth	r0, r0
 80130d6:	b292      	uxth	r2, r2
 80130d8:	1a12      	subs	r2, r2, r0
 80130da:	445a      	add	r2, fp
 80130dc:	f8de 0000 	ldr.w	r0, [lr]
 80130e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80130e4:	b29b      	uxth	r3, r3
 80130e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80130ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80130ee:	b292      	uxth	r2, r2
 80130f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80130f4:	45e1      	cmp	r9, ip
 80130f6:	f84e 2b04 	str.w	r2, [lr], #4
 80130fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80130fe:	d2de      	bcs.n	80130be <quorem+0x42>
 8013100:	9b00      	ldr	r3, [sp, #0]
 8013102:	58eb      	ldr	r3, [r5, r3]
 8013104:	b92b      	cbnz	r3, 8013112 <quorem+0x96>
 8013106:	9b01      	ldr	r3, [sp, #4]
 8013108:	3b04      	subs	r3, #4
 801310a:	429d      	cmp	r5, r3
 801310c:	461a      	mov	r2, r3
 801310e:	d32f      	bcc.n	8013170 <quorem+0xf4>
 8013110:	613c      	str	r4, [r7, #16]
 8013112:	4638      	mov	r0, r7
 8013114:	f001 fc7a 	bl	8014a0c <__mcmp>
 8013118:	2800      	cmp	r0, #0
 801311a:	db25      	blt.n	8013168 <quorem+0xec>
 801311c:	4629      	mov	r1, r5
 801311e:	2000      	movs	r0, #0
 8013120:	f858 2b04 	ldr.w	r2, [r8], #4
 8013124:	f8d1 c000 	ldr.w	ip, [r1]
 8013128:	fa1f fe82 	uxth.w	lr, r2
 801312c:	fa1f f38c 	uxth.w	r3, ip
 8013130:	eba3 030e 	sub.w	r3, r3, lr
 8013134:	4403      	add	r3, r0
 8013136:	0c12      	lsrs	r2, r2, #16
 8013138:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801313c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013140:	b29b      	uxth	r3, r3
 8013142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013146:	45c1      	cmp	r9, r8
 8013148:	f841 3b04 	str.w	r3, [r1], #4
 801314c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013150:	d2e6      	bcs.n	8013120 <quorem+0xa4>
 8013152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801315a:	b922      	cbnz	r2, 8013166 <quorem+0xea>
 801315c:	3b04      	subs	r3, #4
 801315e:	429d      	cmp	r5, r3
 8013160:	461a      	mov	r2, r3
 8013162:	d30b      	bcc.n	801317c <quorem+0x100>
 8013164:	613c      	str	r4, [r7, #16]
 8013166:	3601      	adds	r6, #1
 8013168:	4630      	mov	r0, r6
 801316a:	b003      	add	sp, #12
 801316c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013170:	6812      	ldr	r2, [r2, #0]
 8013172:	3b04      	subs	r3, #4
 8013174:	2a00      	cmp	r2, #0
 8013176:	d1cb      	bne.n	8013110 <quorem+0x94>
 8013178:	3c01      	subs	r4, #1
 801317a:	e7c6      	b.n	801310a <quorem+0x8e>
 801317c:	6812      	ldr	r2, [r2, #0]
 801317e:	3b04      	subs	r3, #4
 8013180:	2a00      	cmp	r2, #0
 8013182:	d1ef      	bne.n	8013164 <quorem+0xe8>
 8013184:	3c01      	subs	r4, #1
 8013186:	e7ea      	b.n	801315e <quorem+0xe2>
 8013188:	2000      	movs	r0, #0
 801318a:	e7ee      	b.n	801316a <quorem+0xee>
 801318c:	0000      	movs	r0, r0
	...

08013190 <_dtoa_r>:
 8013190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013194:	69c7      	ldr	r7, [r0, #28]
 8013196:	b097      	sub	sp, #92	@ 0x5c
 8013198:	ed8d 0b04 	vstr	d0, [sp, #16]
 801319c:	ec55 4b10 	vmov	r4, r5, d0
 80131a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80131a2:	9107      	str	r1, [sp, #28]
 80131a4:	4681      	mov	r9, r0
 80131a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80131a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80131aa:	b97f      	cbnz	r7, 80131cc <_dtoa_r+0x3c>
 80131ac:	2010      	movs	r0, #16
 80131ae:	f001 f859 	bl	8014264 <malloc>
 80131b2:	4602      	mov	r2, r0
 80131b4:	f8c9 001c 	str.w	r0, [r9, #28]
 80131b8:	b920      	cbnz	r0, 80131c4 <_dtoa_r+0x34>
 80131ba:	4ba9      	ldr	r3, [pc, #676]	@ (8013460 <_dtoa_r+0x2d0>)
 80131bc:	21ef      	movs	r1, #239	@ 0xef
 80131be:	48a9      	ldr	r0, [pc, #676]	@ (8013464 <_dtoa_r+0x2d4>)
 80131c0:	f001 ff68 	bl	8015094 <__assert_func>
 80131c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80131c8:	6007      	str	r7, [r0, #0]
 80131ca:	60c7      	str	r7, [r0, #12]
 80131cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80131d0:	6819      	ldr	r1, [r3, #0]
 80131d2:	b159      	cbz	r1, 80131ec <_dtoa_r+0x5c>
 80131d4:	685a      	ldr	r2, [r3, #4]
 80131d6:	604a      	str	r2, [r1, #4]
 80131d8:	2301      	movs	r3, #1
 80131da:	4093      	lsls	r3, r2
 80131dc:	608b      	str	r3, [r1, #8]
 80131de:	4648      	mov	r0, r9
 80131e0:	f001 f9e2 	bl	80145a8 <_Bfree>
 80131e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80131e8:	2200      	movs	r2, #0
 80131ea:	601a      	str	r2, [r3, #0]
 80131ec:	1e2b      	subs	r3, r5, #0
 80131ee:	bfb9      	ittee	lt
 80131f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80131f4:	9305      	strlt	r3, [sp, #20]
 80131f6:	2300      	movge	r3, #0
 80131f8:	6033      	strge	r3, [r6, #0]
 80131fa:	9f05      	ldr	r7, [sp, #20]
 80131fc:	4b9a      	ldr	r3, [pc, #616]	@ (8013468 <_dtoa_r+0x2d8>)
 80131fe:	bfbc      	itt	lt
 8013200:	2201      	movlt	r2, #1
 8013202:	6032      	strlt	r2, [r6, #0]
 8013204:	43bb      	bics	r3, r7
 8013206:	d112      	bne.n	801322e <_dtoa_r+0x9e>
 8013208:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801320a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801320e:	6013      	str	r3, [r2, #0]
 8013210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013214:	4323      	orrs	r3, r4
 8013216:	f000 855a 	beq.w	8013cce <_dtoa_r+0xb3e>
 801321a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801321c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801347c <_dtoa_r+0x2ec>
 8013220:	2b00      	cmp	r3, #0
 8013222:	f000 855c 	beq.w	8013cde <_dtoa_r+0xb4e>
 8013226:	f10a 0303 	add.w	r3, sl, #3
 801322a:	f000 bd56 	b.w	8013cda <_dtoa_r+0xb4a>
 801322e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013232:	2200      	movs	r2, #0
 8013234:	ec51 0b17 	vmov	r0, r1, d7
 8013238:	2300      	movs	r3, #0
 801323a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801323e:	f7ed fc1b 	bl	8000a78 <__aeabi_dcmpeq>
 8013242:	4680      	mov	r8, r0
 8013244:	b158      	cbz	r0, 801325e <_dtoa_r+0xce>
 8013246:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013248:	2301      	movs	r3, #1
 801324a:	6013      	str	r3, [r2, #0]
 801324c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801324e:	b113      	cbz	r3, 8013256 <_dtoa_r+0xc6>
 8013250:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013252:	4b86      	ldr	r3, [pc, #536]	@ (801346c <_dtoa_r+0x2dc>)
 8013254:	6013      	str	r3, [r2, #0]
 8013256:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013480 <_dtoa_r+0x2f0>
 801325a:	f000 bd40 	b.w	8013cde <_dtoa_r+0xb4e>
 801325e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8013262:	aa14      	add	r2, sp, #80	@ 0x50
 8013264:	a915      	add	r1, sp, #84	@ 0x54
 8013266:	4648      	mov	r0, r9
 8013268:	f001 fc80 	bl	8014b6c <__d2b>
 801326c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013270:	9002      	str	r0, [sp, #8]
 8013272:	2e00      	cmp	r6, #0
 8013274:	d078      	beq.n	8013368 <_dtoa_r+0x1d8>
 8013276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013278:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801327c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013284:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013288:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801328c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013290:	4619      	mov	r1, r3
 8013292:	2200      	movs	r2, #0
 8013294:	4b76      	ldr	r3, [pc, #472]	@ (8013470 <_dtoa_r+0x2e0>)
 8013296:	f7ec ffcf 	bl	8000238 <__aeabi_dsub>
 801329a:	a36b      	add	r3, pc, #428	@ (adr r3, 8013448 <_dtoa_r+0x2b8>)
 801329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a0:	f7ed f982 	bl	80005a8 <__aeabi_dmul>
 80132a4:	a36a      	add	r3, pc, #424	@ (adr r3, 8013450 <_dtoa_r+0x2c0>)
 80132a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132aa:	f7ec ffc7 	bl	800023c <__adddf3>
 80132ae:	4604      	mov	r4, r0
 80132b0:	4630      	mov	r0, r6
 80132b2:	460d      	mov	r5, r1
 80132b4:	f7ed f90e 	bl	80004d4 <__aeabi_i2d>
 80132b8:	a367      	add	r3, pc, #412	@ (adr r3, 8013458 <_dtoa_r+0x2c8>)
 80132ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132be:	f7ed f973 	bl	80005a8 <__aeabi_dmul>
 80132c2:	4602      	mov	r2, r0
 80132c4:	460b      	mov	r3, r1
 80132c6:	4620      	mov	r0, r4
 80132c8:	4629      	mov	r1, r5
 80132ca:	f7ec ffb7 	bl	800023c <__adddf3>
 80132ce:	4604      	mov	r4, r0
 80132d0:	460d      	mov	r5, r1
 80132d2:	f7ed fc19 	bl	8000b08 <__aeabi_d2iz>
 80132d6:	2200      	movs	r2, #0
 80132d8:	4607      	mov	r7, r0
 80132da:	2300      	movs	r3, #0
 80132dc:	4620      	mov	r0, r4
 80132de:	4629      	mov	r1, r5
 80132e0:	f7ed fbd4 	bl	8000a8c <__aeabi_dcmplt>
 80132e4:	b140      	cbz	r0, 80132f8 <_dtoa_r+0x168>
 80132e6:	4638      	mov	r0, r7
 80132e8:	f7ed f8f4 	bl	80004d4 <__aeabi_i2d>
 80132ec:	4622      	mov	r2, r4
 80132ee:	462b      	mov	r3, r5
 80132f0:	f7ed fbc2 	bl	8000a78 <__aeabi_dcmpeq>
 80132f4:	b900      	cbnz	r0, 80132f8 <_dtoa_r+0x168>
 80132f6:	3f01      	subs	r7, #1
 80132f8:	2f16      	cmp	r7, #22
 80132fa:	d852      	bhi.n	80133a2 <_dtoa_r+0x212>
 80132fc:	4b5d      	ldr	r3, [pc, #372]	@ (8013474 <_dtoa_r+0x2e4>)
 80132fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013306:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801330a:	f7ed fbbf 	bl	8000a8c <__aeabi_dcmplt>
 801330e:	2800      	cmp	r0, #0
 8013310:	d049      	beq.n	80133a6 <_dtoa_r+0x216>
 8013312:	3f01      	subs	r7, #1
 8013314:	2300      	movs	r3, #0
 8013316:	9310      	str	r3, [sp, #64]	@ 0x40
 8013318:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801331a:	1b9b      	subs	r3, r3, r6
 801331c:	1e5a      	subs	r2, r3, #1
 801331e:	bf45      	ittet	mi
 8013320:	f1c3 0301 	rsbmi	r3, r3, #1
 8013324:	9300      	strmi	r3, [sp, #0]
 8013326:	2300      	movpl	r3, #0
 8013328:	2300      	movmi	r3, #0
 801332a:	9206      	str	r2, [sp, #24]
 801332c:	bf54      	ite	pl
 801332e:	9300      	strpl	r3, [sp, #0]
 8013330:	9306      	strmi	r3, [sp, #24]
 8013332:	2f00      	cmp	r7, #0
 8013334:	db39      	blt.n	80133aa <_dtoa_r+0x21a>
 8013336:	9b06      	ldr	r3, [sp, #24]
 8013338:	970d      	str	r7, [sp, #52]	@ 0x34
 801333a:	443b      	add	r3, r7
 801333c:	9306      	str	r3, [sp, #24]
 801333e:	2300      	movs	r3, #0
 8013340:	9308      	str	r3, [sp, #32]
 8013342:	9b07      	ldr	r3, [sp, #28]
 8013344:	2b09      	cmp	r3, #9
 8013346:	d863      	bhi.n	8013410 <_dtoa_r+0x280>
 8013348:	2b05      	cmp	r3, #5
 801334a:	bfc4      	itt	gt
 801334c:	3b04      	subgt	r3, #4
 801334e:	9307      	strgt	r3, [sp, #28]
 8013350:	9b07      	ldr	r3, [sp, #28]
 8013352:	f1a3 0302 	sub.w	r3, r3, #2
 8013356:	bfcc      	ite	gt
 8013358:	2400      	movgt	r4, #0
 801335a:	2401      	movle	r4, #1
 801335c:	2b03      	cmp	r3, #3
 801335e:	d863      	bhi.n	8013428 <_dtoa_r+0x298>
 8013360:	e8df f003 	tbb	[pc, r3]
 8013364:	2b375452 	.word	0x2b375452
 8013368:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801336c:	441e      	add	r6, r3
 801336e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013372:	2b20      	cmp	r3, #32
 8013374:	bfc1      	itttt	gt
 8013376:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801337a:	409f      	lslgt	r7, r3
 801337c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013380:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013384:	bfd6      	itet	le
 8013386:	f1c3 0320 	rsble	r3, r3, #32
 801338a:	ea47 0003 	orrgt.w	r0, r7, r3
 801338e:	fa04 f003 	lslle.w	r0, r4, r3
 8013392:	f7ed f88f 	bl	80004b4 <__aeabi_ui2d>
 8013396:	2201      	movs	r2, #1
 8013398:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801339c:	3e01      	subs	r6, #1
 801339e:	9212      	str	r2, [sp, #72]	@ 0x48
 80133a0:	e776      	b.n	8013290 <_dtoa_r+0x100>
 80133a2:	2301      	movs	r3, #1
 80133a4:	e7b7      	b.n	8013316 <_dtoa_r+0x186>
 80133a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80133a8:	e7b6      	b.n	8013318 <_dtoa_r+0x188>
 80133aa:	9b00      	ldr	r3, [sp, #0]
 80133ac:	1bdb      	subs	r3, r3, r7
 80133ae:	9300      	str	r3, [sp, #0]
 80133b0:	427b      	negs	r3, r7
 80133b2:	9308      	str	r3, [sp, #32]
 80133b4:	2300      	movs	r3, #0
 80133b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80133b8:	e7c3      	b.n	8013342 <_dtoa_r+0x1b2>
 80133ba:	2301      	movs	r3, #1
 80133bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80133be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80133c0:	eb07 0b03 	add.w	fp, r7, r3
 80133c4:	f10b 0301 	add.w	r3, fp, #1
 80133c8:	2b01      	cmp	r3, #1
 80133ca:	9303      	str	r3, [sp, #12]
 80133cc:	bfb8      	it	lt
 80133ce:	2301      	movlt	r3, #1
 80133d0:	e006      	b.n	80133e0 <_dtoa_r+0x250>
 80133d2:	2301      	movs	r3, #1
 80133d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80133d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80133d8:	2b00      	cmp	r3, #0
 80133da:	dd28      	ble.n	801342e <_dtoa_r+0x29e>
 80133dc:	469b      	mov	fp, r3
 80133de:	9303      	str	r3, [sp, #12]
 80133e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80133e4:	2100      	movs	r1, #0
 80133e6:	2204      	movs	r2, #4
 80133e8:	f102 0514 	add.w	r5, r2, #20
 80133ec:	429d      	cmp	r5, r3
 80133ee:	d926      	bls.n	801343e <_dtoa_r+0x2ae>
 80133f0:	6041      	str	r1, [r0, #4]
 80133f2:	4648      	mov	r0, r9
 80133f4:	f001 f898 	bl	8014528 <_Balloc>
 80133f8:	4682      	mov	sl, r0
 80133fa:	2800      	cmp	r0, #0
 80133fc:	d142      	bne.n	8013484 <_dtoa_r+0x2f4>
 80133fe:	4b1e      	ldr	r3, [pc, #120]	@ (8013478 <_dtoa_r+0x2e8>)
 8013400:	4602      	mov	r2, r0
 8013402:	f240 11af 	movw	r1, #431	@ 0x1af
 8013406:	e6da      	b.n	80131be <_dtoa_r+0x2e>
 8013408:	2300      	movs	r3, #0
 801340a:	e7e3      	b.n	80133d4 <_dtoa_r+0x244>
 801340c:	2300      	movs	r3, #0
 801340e:	e7d5      	b.n	80133bc <_dtoa_r+0x22c>
 8013410:	2401      	movs	r4, #1
 8013412:	2300      	movs	r3, #0
 8013414:	9307      	str	r3, [sp, #28]
 8013416:	9409      	str	r4, [sp, #36]	@ 0x24
 8013418:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801341c:	2200      	movs	r2, #0
 801341e:	f8cd b00c 	str.w	fp, [sp, #12]
 8013422:	2312      	movs	r3, #18
 8013424:	920c      	str	r2, [sp, #48]	@ 0x30
 8013426:	e7db      	b.n	80133e0 <_dtoa_r+0x250>
 8013428:	2301      	movs	r3, #1
 801342a:	9309      	str	r3, [sp, #36]	@ 0x24
 801342c:	e7f4      	b.n	8013418 <_dtoa_r+0x288>
 801342e:	f04f 0b01 	mov.w	fp, #1
 8013432:	f8cd b00c 	str.w	fp, [sp, #12]
 8013436:	465b      	mov	r3, fp
 8013438:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801343c:	e7d0      	b.n	80133e0 <_dtoa_r+0x250>
 801343e:	3101      	adds	r1, #1
 8013440:	0052      	lsls	r2, r2, #1
 8013442:	e7d1      	b.n	80133e8 <_dtoa_r+0x258>
 8013444:	f3af 8000 	nop.w
 8013448:	636f4361 	.word	0x636f4361
 801344c:	3fd287a7 	.word	0x3fd287a7
 8013450:	8b60c8b3 	.word	0x8b60c8b3
 8013454:	3fc68a28 	.word	0x3fc68a28
 8013458:	509f79fb 	.word	0x509f79fb
 801345c:	3fd34413 	.word	0x3fd34413
 8013460:	08018261 	.word	0x08018261
 8013464:	08018278 	.word	0x08018278
 8013468:	7ff00000 	.word	0x7ff00000
 801346c:	08018231 	.word	0x08018231
 8013470:	3ff80000 	.word	0x3ff80000
 8013474:	080183c8 	.word	0x080183c8
 8013478:	080182d0 	.word	0x080182d0
 801347c:	0801825d 	.word	0x0801825d
 8013480:	08018230 	.word	0x08018230
 8013484:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013488:	6018      	str	r0, [r3, #0]
 801348a:	9b03      	ldr	r3, [sp, #12]
 801348c:	2b0e      	cmp	r3, #14
 801348e:	f200 80a1 	bhi.w	80135d4 <_dtoa_r+0x444>
 8013492:	2c00      	cmp	r4, #0
 8013494:	f000 809e 	beq.w	80135d4 <_dtoa_r+0x444>
 8013498:	2f00      	cmp	r7, #0
 801349a:	dd33      	ble.n	8013504 <_dtoa_r+0x374>
 801349c:	4b9c      	ldr	r3, [pc, #624]	@ (8013710 <_dtoa_r+0x580>)
 801349e:	f007 020f 	and.w	r2, r7, #15
 80134a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80134a6:	ed93 7b00 	vldr	d7, [r3]
 80134aa:	05f8      	lsls	r0, r7, #23
 80134ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80134b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80134b4:	d516      	bpl.n	80134e4 <_dtoa_r+0x354>
 80134b6:	4b97      	ldr	r3, [pc, #604]	@ (8013714 <_dtoa_r+0x584>)
 80134b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80134bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80134c0:	f7ed f99c 	bl	80007fc <__aeabi_ddiv>
 80134c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134c8:	f004 040f 	and.w	r4, r4, #15
 80134cc:	2603      	movs	r6, #3
 80134ce:	4d91      	ldr	r5, [pc, #580]	@ (8013714 <_dtoa_r+0x584>)
 80134d0:	b954      	cbnz	r4, 80134e8 <_dtoa_r+0x358>
 80134d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80134d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80134da:	f7ed f98f 	bl	80007fc <__aeabi_ddiv>
 80134de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134e2:	e028      	b.n	8013536 <_dtoa_r+0x3a6>
 80134e4:	2602      	movs	r6, #2
 80134e6:	e7f2      	b.n	80134ce <_dtoa_r+0x33e>
 80134e8:	07e1      	lsls	r1, r4, #31
 80134ea:	d508      	bpl.n	80134fe <_dtoa_r+0x36e>
 80134ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80134f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80134f4:	f7ed f858 	bl	80005a8 <__aeabi_dmul>
 80134f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80134fc:	3601      	adds	r6, #1
 80134fe:	1064      	asrs	r4, r4, #1
 8013500:	3508      	adds	r5, #8
 8013502:	e7e5      	b.n	80134d0 <_dtoa_r+0x340>
 8013504:	f000 80af 	beq.w	8013666 <_dtoa_r+0x4d6>
 8013508:	427c      	negs	r4, r7
 801350a:	4b81      	ldr	r3, [pc, #516]	@ (8013710 <_dtoa_r+0x580>)
 801350c:	4d81      	ldr	r5, [pc, #516]	@ (8013714 <_dtoa_r+0x584>)
 801350e:	f004 020f 	and.w	r2, r4, #15
 8013512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801351e:	f7ed f843 	bl	80005a8 <__aeabi_dmul>
 8013522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013526:	1124      	asrs	r4, r4, #4
 8013528:	2300      	movs	r3, #0
 801352a:	2602      	movs	r6, #2
 801352c:	2c00      	cmp	r4, #0
 801352e:	f040 808f 	bne.w	8013650 <_dtoa_r+0x4c0>
 8013532:	2b00      	cmp	r3, #0
 8013534:	d1d3      	bne.n	80134de <_dtoa_r+0x34e>
 8013536:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013538:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801353c:	2b00      	cmp	r3, #0
 801353e:	f000 8094 	beq.w	801366a <_dtoa_r+0x4da>
 8013542:	4b75      	ldr	r3, [pc, #468]	@ (8013718 <_dtoa_r+0x588>)
 8013544:	2200      	movs	r2, #0
 8013546:	4620      	mov	r0, r4
 8013548:	4629      	mov	r1, r5
 801354a:	f7ed fa9f 	bl	8000a8c <__aeabi_dcmplt>
 801354e:	2800      	cmp	r0, #0
 8013550:	f000 808b 	beq.w	801366a <_dtoa_r+0x4da>
 8013554:	9b03      	ldr	r3, [sp, #12]
 8013556:	2b00      	cmp	r3, #0
 8013558:	f000 8087 	beq.w	801366a <_dtoa_r+0x4da>
 801355c:	f1bb 0f00 	cmp.w	fp, #0
 8013560:	dd34      	ble.n	80135cc <_dtoa_r+0x43c>
 8013562:	4620      	mov	r0, r4
 8013564:	4b6d      	ldr	r3, [pc, #436]	@ (801371c <_dtoa_r+0x58c>)
 8013566:	2200      	movs	r2, #0
 8013568:	4629      	mov	r1, r5
 801356a:	f7ed f81d 	bl	80005a8 <__aeabi_dmul>
 801356e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013572:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8013576:	3601      	adds	r6, #1
 8013578:	465c      	mov	r4, fp
 801357a:	4630      	mov	r0, r6
 801357c:	f7ec ffaa 	bl	80004d4 <__aeabi_i2d>
 8013580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013584:	f7ed f810 	bl	80005a8 <__aeabi_dmul>
 8013588:	4b65      	ldr	r3, [pc, #404]	@ (8013720 <_dtoa_r+0x590>)
 801358a:	2200      	movs	r2, #0
 801358c:	f7ec fe56 	bl	800023c <__adddf3>
 8013590:	4605      	mov	r5, r0
 8013592:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013596:	2c00      	cmp	r4, #0
 8013598:	d16a      	bne.n	8013670 <_dtoa_r+0x4e0>
 801359a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801359e:	4b61      	ldr	r3, [pc, #388]	@ (8013724 <_dtoa_r+0x594>)
 80135a0:	2200      	movs	r2, #0
 80135a2:	f7ec fe49 	bl	8000238 <__aeabi_dsub>
 80135a6:	4602      	mov	r2, r0
 80135a8:	460b      	mov	r3, r1
 80135aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80135ae:	462a      	mov	r2, r5
 80135b0:	4633      	mov	r3, r6
 80135b2:	f7ed fa89 	bl	8000ac8 <__aeabi_dcmpgt>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	f040 8298 	bne.w	8013aec <_dtoa_r+0x95c>
 80135bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80135c0:	462a      	mov	r2, r5
 80135c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80135c6:	f7ed fa61 	bl	8000a8c <__aeabi_dcmplt>
 80135ca:	bb38      	cbnz	r0, 801361c <_dtoa_r+0x48c>
 80135cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80135d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80135d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	f2c0 8157 	blt.w	801388a <_dtoa_r+0x6fa>
 80135dc:	2f0e      	cmp	r7, #14
 80135de:	f300 8154 	bgt.w	801388a <_dtoa_r+0x6fa>
 80135e2:	4b4b      	ldr	r3, [pc, #300]	@ (8013710 <_dtoa_r+0x580>)
 80135e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80135e8:	ed93 7b00 	vldr	d7, [r3]
 80135ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	ed8d 7b00 	vstr	d7, [sp]
 80135f4:	f280 80e5 	bge.w	80137c2 <_dtoa_r+0x632>
 80135f8:	9b03      	ldr	r3, [sp, #12]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	f300 80e1 	bgt.w	80137c2 <_dtoa_r+0x632>
 8013600:	d10c      	bne.n	801361c <_dtoa_r+0x48c>
 8013602:	4b48      	ldr	r3, [pc, #288]	@ (8013724 <_dtoa_r+0x594>)
 8013604:	2200      	movs	r2, #0
 8013606:	ec51 0b17 	vmov	r0, r1, d7
 801360a:	f7ec ffcd 	bl	80005a8 <__aeabi_dmul>
 801360e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013612:	f7ed fa4f 	bl	8000ab4 <__aeabi_dcmpge>
 8013616:	2800      	cmp	r0, #0
 8013618:	f000 8266 	beq.w	8013ae8 <_dtoa_r+0x958>
 801361c:	2400      	movs	r4, #0
 801361e:	4625      	mov	r5, r4
 8013620:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013622:	4656      	mov	r6, sl
 8013624:	ea6f 0803 	mvn.w	r8, r3
 8013628:	2700      	movs	r7, #0
 801362a:	4621      	mov	r1, r4
 801362c:	4648      	mov	r0, r9
 801362e:	f000 ffbb 	bl	80145a8 <_Bfree>
 8013632:	2d00      	cmp	r5, #0
 8013634:	f000 80bd 	beq.w	80137b2 <_dtoa_r+0x622>
 8013638:	b12f      	cbz	r7, 8013646 <_dtoa_r+0x4b6>
 801363a:	42af      	cmp	r7, r5
 801363c:	d003      	beq.n	8013646 <_dtoa_r+0x4b6>
 801363e:	4639      	mov	r1, r7
 8013640:	4648      	mov	r0, r9
 8013642:	f000 ffb1 	bl	80145a8 <_Bfree>
 8013646:	4629      	mov	r1, r5
 8013648:	4648      	mov	r0, r9
 801364a:	f000 ffad 	bl	80145a8 <_Bfree>
 801364e:	e0b0      	b.n	80137b2 <_dtoa_r+0x622>
 8013650:	07e2      	lsls	r2, r4, #31
 8013652:	d505      	bpl.n	8013660 <_dtoa_r+0x4d0>
 8013654:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013658:	f7ec ffa6 	bl	80005a8 <__aeabi_dmul>
 801365c:	3601      	adds	r6, #1
 801365e:	2301      	movs	r3, #1
 8013660:	1064      	asrs	r4, r4, #1
 8013662:	3508      	adds	r5, #8
 8013664:	e762      	b.n	801352c <_dtoa_r+0x39c>
 8013666:	2602      	movs	r6, #2
 8013668:	e765      	b.n	8013536 <_dtoa_r+0x3a6>
 801366a:	9c03      	ldr	r4, [sp, #12]
 801366c:	46b8      	mov	r8, r7
 801366e:	e784      	b.n	801357a <_dtoa_r+0x3ea>
 8013670:	4b27      	ldr	r3, [pc, #156]	@ (8013710 <_dtoa_r+0x580>)
 8013672:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013674:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013678:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801367c:	4454      	add	r4, sl
 801367e:	2900      	cmp	r1, #0
 8013680:	d054      	beq.n	801372c <_dtoa_r+0x59c>
 8013682:	4929      	ldr	r1, [pc, #164]	@ (8013728 <_dtoa_r+0x598>)
 8013684:	2000      	movs	r0, #0
 8013686:	f7ed f8b9 	bl	80007fc <__aeabi_ddiv>
 801368a:	4633      	mov	r3, r6
 801368c:	462a      	mov	r2, r5
 801368e:	f7ec fdd3 	bl	8000238 <__aeabi_dsub>
 8013692:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013696:	4656      	mov	r6, sl
 8013698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801369c:	f7ed fa34 	bl	8000b08 <__aeabi_d2iz>
 80136a0:	4605      	mov	r5, r0
 80136a2:	f7ec ff17 	bl	80004d4 <__aeabi_i2d>
 80136a6:	4602      	mov	r2, r0
 80136a8:	460b      	mov	r3, r1
 80136aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80136ae:	f7ec fdc3 	bl	8000238 <__aeabi_dsub>
 80136b2:	3530      	adds	r5, #48	@ 0x30
 80136b4:	4602      	mov	r2, r0
 80136b6:	460b      	mov	r3, r1
 80136b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80136bc:	f806 5b01 	strb.w	r5, [r6], #1
 80136c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80136c4:	f7ed f9e2 	bl	8000a8c <__aeabi_dcmplt>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	d172      	bne.n	80137b2 <_dtoa_r+0x622>
 80136cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80136d0:	4911      	ldr	r1, [pc, #68]	@ (8013718 <_dtoa_r+0x588>)
 80136d2:	2000      	movs	r0, #0
 80136d4:	f7ec fdb0 	bl	8000238 <__aeabi_dsub>
 80136d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80136dc:	f7ed f9d6 	bl	8000a8c <__aeabi_dcmplt>
 80136e0:	2800      	cmp	r0, #0
 80136e2:	f040 80b4 	bne.w	801384e <_dtoa_r+0x6be>
 80136e6:	42a6      	cmp	r6, r4
 80136e8:	f43f af70 	beq.w	80135cc <_dtoa_r+0x43c>
 80136ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80136f0:	4b0a      	ldr	r3, [pc, #40]	@ (801371c <_dtoa_r+0x58c>)
 80136f2:	2200      	movs	r2, #0
 80136f4:	f7ec ff58 	bl	80005a8 <__aeabi_dmul>
 80136f8:	4b08      	ldr	r3, [pc, #32]	@ (801371c <_dtoa_r+0x58c>)
 80136fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80136fe:	2200      	movs	r2, #0
 8013700:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013704:	f7ec ff50 	bl	80005a8 <__aeabi_dmul>
 8013708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801370c:	e7c4      	b.n	8013698 <_dtoa_r+0x508>
 801370e:	bf00      	nop
 8013710:	080183c8 	.word	0x080183c8
 8013714:	080183a0 	.word	0x080183a0
 8013718:	3ff00000 	.word	0x3ff00000
 801371c:	40240000 	.word	0x40240000
 8013720:	401c0000 	.word	0x401c0000
 8013724:	40140000 	.word	0x40140000
 8013728:	3fe00000 	.word	0x3fe00000
 801372c:	4631      	mov	r1, r6
 801372e:	4628      	mov	r0, r5
 8013730:	f7ec ff3a 	bl	80005a8 <__aeabi_dmul>
 8013734:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013738:	9413      	str	r4, [sp, #76]	@ 0x4c
 801373a:	4656      	mov	r6, sl
 801373c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013740:	f7ed f9e2 	bl	8000b08 <__aeabi_d2iz>
 8013744:	4605      	mov	r5, r0
 8013746:	f7ec fec5 	bl	80004d4 <__aeabi_i2d>
 801374a:	4602      	mov	r2, r0
 801374c:	460b      	mov	r3, r1
 801374e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013752:	f7ec fd71 	bl	8000238 <__aeabi_dsub>
 8013756:	3530      	adds	r5, #48	@ 0x30
 8013758:	f806 5b01 	strb.w	r5, [r6], #1
 801375c:	4602      	mov	r2, r0
 801375e:	460b      	mov	r3, r1
 8013760:	42a6      	cmp	r6, r4
 8013762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013766:	f04f 0200 	mov.w	r2, #0
 801376a:	d124      	bne.n	80137b6 <_dtoa_r+0x626>
 801376c:	4baf      	ldr	r3, [pc, #700]	@ (8013a2c <_dtoa_r+0x89c>)
 801376e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013772:	f7ec fd63 	bl	800023c <__adddf3>
 8013776:	4602      	mov	r2, r0
 8013778:	460b      	mov	r3, r1
 801377a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801377e:	f7ed f9a3 	bl	8000ac8 <__aeabi_dcmpgt>
 8013782:	2800      	cmp	r0, #0
 8013784:	d163      	bne.n	801384e <_dtoa_r+0x6be>
 8013786:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801378a:	49a8      	ldr	r1, [pc, #672]	@ (8013a2c <_dtoa_r+0x89c>)
 801378c:	2000      	movs	r0, #0
 801378e:	f7ec fd53 	bl	8000238 <__aeabi_dsub>
 8013792:	4602      	mov	r2, r0
 8013794:	460b      	mov	r3, r1
 8013796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801379a:	f7ed f977 	bl	8000a8c <__aeabi_dcmplt>
 801379e:	2800      	cmp	r0, #0
 80137a0:	f43f af14 	beq.w	80135cc <_dtoa_r+0x43c>
 80137a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80137a6:	1e73      	subs	r3, r6, #1
 80137a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80137aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80137ae:	2b30      	cmp	r3, #48	@ 0x30
 80137b0:	d0f8      	beq.n	80137a4 <_dtoa_r+0x614>
 80137b2:	4647      	mov	r7, r8
 80137b4:	e03b      	b.n	801382e <_dtoa_r+0x69e>
 80137b6:	4b9e      	ldr	r3, [pc, #632]	@ (8013a30 <_dtoa_r+0x8a0>)
 80137b8:	f7ec fef6 	bl	80005a8 <__aeabi_dmul>
 80137bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80137c0:	e7bc      	b.n	801373c <_dtoa_r+0x5ac>
 80137c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80137c6:	4656      	mov	r6, sl
 80137c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80137cc:	4620      	mov	r0, r4
 80137ce:	4629      	mov	r1, r5
 80137d0:	f7ed f814 	bl	80007fc <__aeabi_ddiv>
 80137d4:	f7ed f998 	bl	8000b08 <__aeabi_d2iz>
 80137d8:	4680      	mov	r8, r0
 80137da:	f7ec fe7b 	bl	80004d4 <__aeabi_i2d>
 80137de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80137e2:	f7ec fee1 	bl	80005a8 <__aeabi_dmul>
 80137e6:	4602      	mov	r2, r0
 80137e8:	460b      	mov	r3, r1
 80137ea:	4620      	mov	r0, r4
 80137ec:	4629      	mov	r1, r5
 80137ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80137f2:	f7ec fd21 	bl	8000238 <__aeabi_dsub>
 80137f6:	f806 4b01 	strb.w	r4, [r6], #1
 80137fa:	9d03      	ldr	r5, [sp, #12]
 80137fc:	eba6 040a 	sub.w	r4, r6, sl
 8013800:	42a5      	cmp	r5, r4
 8013802:	4602      	mov	r2, r0
 8013804:	460b      	mov	r3, r1
 8013806:	d133      	bne.n	8013870 <_dtoa_r+0x6e0>
 8013808:	f7ec fd18 	bl	800023c <__adddf3>
 801380c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013810:	4604      	mov	r4, r0
 8013812:	460d      	mov	r5, r1
 8013814:	f7ed f958 	bl	8000ac8 <__aeabi_dcmpgt>
 8013818:	b9c0      	cbnz	r0, 801384c <_dtoa_r+0x6bc>
 801381a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801381e:	4620      	mov	r0, r4
 8013820:	4629      	mov	r1, r5
 8013822:	f7ed f929 	bl	8000a78 <__aeabi_dcmpeq>
 8013826:	b110      	cbz	r0, 801382e <_dtoa_r+0x69e>
 8013828:	f018 0f01 	tst.w	r8, #1
 801382c:	d10e      	bne.n	801384c <_dtoa_r+0x6bc>
 801382e:	9902      	ldr	r1, [sp, #8]
 8013830:	4648      	mov	r0, r9
 8013832:	f000 feb9 	bl	80145a8 <_Bfree>
 8013836:	2300      	movs	r3, #0
 8013838:	7033      	strb	r3, [r6, #0]
 801383a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801383c:	3701      	adds	r7, #1
 801383e:	601f      	str	r7, [r3, #0]
 8013840:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013842:	2b00      	cmp	r3, #0
 8013844:	f000 824b 	beq.w	8013cde <_dtoa_r+0xb4e>
 8013848:	601e      	str	r6, [r3, #0]
 801384a:	e248      	b.n	8013cde <_dtoa_r+0xb4e>
 801384c:	46b8      	mov	r8, r7
 801384e:	4633      	mov	r3, r6
 8013850:	461e      	mov	r6, r3
 8013852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013856:	2a39      	cmp	r2, #57	@ 0x39
 8013858:	d106      	bne.n	8013868 <_dtoa_r+0x6d8>
 801385a:	459a      	cmp	sl, r3
 801385c:	d1f8      	bne.n	8013850 <_dtoa_r+0x6c0>
 801385e:	2230      	movs	r2, #48	@ 0x30
 8013860:	f108 0801 	add.w	r8, r8, #1
 8013864:	f88a 2000 	strb.w	r2, [sl]
 8013868:	781a      	ldrb	r2, [r3, #0]
 801386a:	3201      	adds	r2, #1
 801386c:	701a      	strb	r2, [r3, #0]
 801386e:	e7a0      	b.n	80137b2 <_dtoa_r+0x622>
 8013870:	4b6f      	ldr	r3, [pc, #444]	@ (8013a30 <_dtoa_r+0x8a0>)
 8013872:	2200      	movs	r2, #0
 8013874:	f7ec fe98 	bl	80005a8 <__aeabi_dmul>
 8013878:	2200      	movs	r2, #0
 801387a:	2300      	movs	r3, #0
 801387c:	4604      	mov	r4, r0
 801387e:	460d      	mov	r5, r1
 8013880:	f7ed f8fa 	bl	8000a78 <__aeabi_dcmpeq>
 8013884:	2800      	cmp	r0, #0
 8013886:	d09f      	beq.n	80137c8 <_dtoa_r+0x638>
 8013888:	e7d1      	b.n	801382e <_dtoa_r+0x69e>
 801388a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801388c:	2a00      	cmp	r2, #0
 801388e:	f000 80ea 	beq.w	8013a66 <_dtoa_r+0x8d6>
 8013892:	9a07      	ldr	r2, [sp, #28]
 8013894:	2a01      	cmp	r2, #1
 8013896:	f300 80cd 	bgt.w	8013a34 <_dtoa_r+0x8a4>
 801389a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801389c:	2a00      	cmp	r2, #0
 801389e:	f000 80c1 	beq.w	8013a24 <_dtoa_r+0x894>
 80138a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80138a6:	9c08      	ldr	r4, [sp, #32]
 80138a8:	9e00      	ldr	r6, [sp, #0]
 80138aa:	9a00      	ldr	r2, [sp, #0]
 80138ac:	441a      	add	r2, r3
 80138ae:	9200      	str	r2, [sp, #0]
 80138b0:	9a06      	ldr	r2, [sp, #24]
 80138b2:	2101      	movs	r1, #1
 80138b4:	441a      	add	r2, r3
 80138b6:	4648      	mov	r0, r9
 80138b8:	9206      	str	r2, [sp, #24]
 80138ba:	f000 ff29 	bl	8014710 <__i2b>
 80138be:	4605      	mov	r5, r0
 80138c0:	b166      	cbz	r6, 80138dc <_dtoa_r+0x74c>
 80138c2:	9b06      	ldr	r3, [sp, #24]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	dd09      	ble.n	80138dc <_dtoa_r+0x74c>
 80138c8:	42b3      	cmp	r3, r6
 80138ca:	9a00      	ldr	r2, [sp, #0]
 80138cc:	bfa8      	it	ge
 80138ce:	4633      	movge	r3, r6
 80138d0:	1ad2      	subs	r2, r2, r3
 80138d2:	9200      	str	r2, [sp, #0]
 80138d4:	9a06      	ldr	r2, [sp, #24]
 80138d6:	1af6      	subs	r6, r6, r3
 80138d8:	1ad3      	subs	r3, r2, r3
 80138da:	9306      	str	r3, [sp, #24]
 80138dc:	9b08      	ldr	r3, [sp, #32]
 80138de:	b30b      	cbz	r3, 8013924 <_dtoa_r+0x794>
 80138e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	f000 80c6 	beq.w	8013a74 <_dtoa_r+0x8e4>
 80138e8:	2c00      	cmp	r4, #0
 80138ea:	f000 80c0 	beq.w	8013a6e <_dtoa_r+0x8de>
 80138ee:	4629      	mov	r1, r5
 80138f0:	4622      	mov	r2, r4
 80138f2:	4648      	mov	r0, r9
 80138f4:	f000 ffc4 	bl	8014880 <__pow5mult>
 80138f8:	9a02      	ldr	r2, [sp, #8]
 80138fa:	4601      	mov	r1, r0
 80138fc:	4605      	mov	r5, r0
 80138fe:	4648      	mov	r0, r9
 8013900:	f000 ff1c 	bl	801473c <__multiply>
 8013904:	9902      	ldr	r1, [sp, #8]
 8013906:	4680      	mov	r8, r0
 8013908:	4648      	mov	r0, r9
 801390a:	f000 fe4d 	bl	80145a8 <_Bfree>
 801390e:	9b08      	ldr	r3, [sp, #32]
 8013910:	1b1b      	subs	r3, r3, r4
 8013912:	9308      	str	r3, [sp, #32]
 8013914:	f000 80b1 	beq.w	8013a7a <_dtoa_r+0x8ea>
 8013918:	9a08      	ldr	r2, [sp, #32]
 801391a:	4641      	mov	r1, r8
 801391c:	4648      	mov	r0, r9
 801391e:	f000 ffaf 	bl	8014880 <__pow5mult>
 8013922:	9002      	str	r0, [sp, #8]
 8013924:	2101      	movs	r1, #1
 8013926:	4648      	mov	r0, r9
 8013928:	f000 fef2 	bl	8014710 <__i2b>
 801392c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801392e:	4604      	mov	r4, r0
 8013930:	2b00      	cmp	r3, #0
 8013932:	f000 81d8 	beq.w	8013ce6 <_dtoa_r+0xb56>
 8013936:	461a      	mov	r2, r3
 8013938:	4601      	mov	r1, r0
 801393a:	4648      	mov	r0, r9
 801393c:	f000 ffa0 	bl	8014880 <__pow5mult>
 8013940:	9b07      	ldr	r3, [sp, #28]
 8013942:	2b01      	cmp	r3, #1
 8013944:	4604      	mov	r4, r0
 8013946:	f300 809f 	bgt.w	8013a88 <_dtoa_r+0x8f8>
 801394a:	9b04      	ldr	r3, [sp, #16]
 801394c:	2b00      	cmp	r3, #0
 801394e:	f040 8097 	bne.w	8013a80 <_dtoa_r+0x8f0>
 8013952:	9b05      	ldr	r3, [sp, #20]
 8013954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013958:	2b00      	cmp	r3, #0
 801395a:	f040 8093 	bne.w	8013a84 <_dtoa_r+0x8f4>
 801395e:	9b05      	ldr	r3, [sp, #20]
 8013960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013964:	0d1b      	lsrs	r3, r3, #20
 8013966:	051b      	lsls	r3, r3, #20
 8013968:	b133      	cbz	r3, 8013978 <_dtoa_r+0x7e8>
 801396a:	9b00      	ldr	r3, [sp, #0]
 801396c:	3301      	adds	r3, #1
 801396e:	9300      	str	r3, [sp, #0]
 8013970:	9b06      	ldr	r3, [sp, #24]
 8013972:	3301      	adds	r3, #1
 8013974:	9306      	str	r3, [sp, #24]
 8013976:	2301      	movs	r3, #1
 8013978:	9308      	str	r3, [sp, #32]
 801397a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801397c:	2b00      	cmp	r3, #0
 801397e:	f000 81b8 	beq.w	8013cf2 <_dtoa_r+0xb62>
 8013982:	6923      	ldr	r3, [r4, #16]
 8013984:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013988:	6918      	ldr	r0, [r3, #16]
 801398a:	f000 fe75 	bl	8014678 <__hi0bits>
 801398e:	f1c0 0020 	rsb	r0, r0, #32
 8013992:	9b06      	ldr	r3, [sp, #24]
 8013994:	4418      	add	r0, r3
 8013996:	f010 001f 	ands.w	r0, r0, #31
 801399a:	f000 8082 	beq.w	8013aa2 <_dtoa_r+0x912>
 801399e:	f1c0 0320 	rsb	r3, r0, #32
 80139a2:	2b04      	cmp	r3, #4
 80139a4:	dd73      	ble.n	8013a8e <_dtoa_r+0x8fe>
 80139a6:	9b00      	ldr	r3, [sp, #0]
 80139a8:	f1c0 001c 	rsb	r0, r0, #28
 80139ac:	4403      	add	r3, r0
 80139ae:	9300      	str	r3, [sp, #0]
 80139b0:	9b06      	ldr	r3, [sp, #24]
 80139b2:	4403      	add	r3, r0
 80139b4:	4406      	add	r6, r0
 80139b6:	9306      	str	r3, [sp, #24]
 80139b8:	9b00      	ldr	r3, [sp, #0]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	dd05      	ble.n	80139ca <_dtoa_r+0x83a>
 80139be:	9902      	ldr	r1, [sp, #8]
 80139c0:	461a      	mov	r2, r3
 80139c2:	4648      	mov	r0, r9
 80139c4:	f000 ffb6 	bl	8014934 <__lshift>
 80139c8:	9002      	str	r0, [sp, #8]
 80139ca:	9b06      	ldr	r3, [sp, #24]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	dd05      	ble.n	80139dc <_dtoa_r+0x84c>
 80139d0:	4621      	mov	r1, r4
 80139d2:	461a      	mov	r2, r3
 80139d4:	4648      	mov	r0, r9
 80139d6:	f000 ffad 	bl	8014934 <__lshift>
 80139da:	4604      	mov	r4, r0
 80139dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d061      	beq.n	8013aa6 <_dtoa_r+0x916>
 80139e2:	9802      	ldr	r0, [sp, #8]
 80139e4:	4621      	mov	r1, r4
 80139e6:	f001 f811 	bl	8014a0c <__mcmp>
 80139ea:	2800      	cmp	r0, #0
 80139ec:	da5b      	bge.n	8013aa6 <_dtoa_r+0x916>
 80139ee:	2300      	movs	r3, #0
 80139f0:	9902      	ldr	r1, [sp, #8]
 80139f2:	220a      	movs	r2, #10
 80139f4:	4648      	mov	r0, r9
 80139f6:	f000 fdf9 	bl	80145ec <__multadd>
 80139fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139fc:	9002      	str	r0, [sp, #8]
 80139fe:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	f000 8177 	beq.w	8013cf6 <_dtoa_r+0xb66>
 8013a08:	4629      	mov	r1, r5
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	220a      	movs	r2, #10
 8013a0e:	4648      	mov	r0, r9
 8013a10:	f000 fdec 	bl	80145ec <__multadd>
 8013a14:	f1bb 0f00 	cmp.w	fp, #0
 8013a18:	4605      	mov	r5, r0
 8013a1a:	dc6f      	bgt.n	8013afc <_dtoa_r+0x96c>
 8013a1c:	9b07      	ldr	r3, [sp, #28]
 8013a1e:	2b02      	cmp	r3, #2
 8013a20:	dc49      	bgt.n	8013ab6 <_dtoa_r+0x926>
 8013a22:	e06b      	b.n	8013afc <_dtoa_r+0x96c>
 8013a24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013a26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013a2a:	e73c      	b.n	80138a6 <_dtoa_r+0x716>
 8013a2c:	3fe00000 	.word	0x3fe00000
 8013a30:	40240000 	.word	0x40240000
 8013a34:	9b03      	ldr	r3, [sp, #12]
 8013a36:	1e5c      	subs	r4, r3, #1
 8013a38:	9b08      	ldr	r3, [sp, #32]
 8013a3a:	42a3      	cmp	r3, r4
 8013a3c:	db09      	blt.n	8013a52 <_dtoa_r+0x8c2>
 8013a3e:	1b1c      	subs	r4, r3, r4
 8013a40:	9b03      	ldr	r3, [sp, #12]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	f6bf af30 	bge.w	80138a8 <_dtoa_r+0x718>
 8013a48:	9b00      	ldr	r3, [sp, #0]
 8013a4a:	9a03      	ldr	r2, [sp, #12]
 8013a4c:	1a9e      	subs	r6, r3, r2
 8013a4e:	2300      	movs	r3, #0
 8013a50:	e72b      	b.n	80138aa <_dtoa_r+0x71a>
 8013a52:	9b08      	ldr	r3, [sp, #32]
 8013a54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013a56:	9408      	str	r4, [sp, #32]
 8013a58:	1ae3      	subs	r3, r4, r3
 8013a5a:	441a      	add	r2, r3
 8013a5c:	9e00      	ldr	r6, [sp, #0]
 8013a5e:	9b03      	ldr	r3, [sp, #12]
 8013a60:	920d      	str	r2, [sp, #52]	@ 0x34
 8013a62:	2400      	movs	r4, #0
 8013a64:	e721      	b.n	80138aa <_dtoa_r+0x71a>
 8013a66:	9c08      	ldr	r4, [sp, #32]
 8013a68:	9e00      	ldr	r6, [sp, #0]
 8013a6a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8013a6c:	e728      	b.n	80138c0 <_dtoa_r+0x730>
 8013a6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013a72:	e751      	b.n	8013918 <_dtoa_r+0x788>
 8013a74:	9a08      	ldr	r2, [sp, #32]
 8013a76:	9902      	ldr	r1, [sp, #8]
 8013a78:	e750      	b.n	801391c <_dtoa_r+0x78c>
 8013a7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8013a7e:	e751      	b.n	8013924 <_dtoa_r+0x794>
 8013a80:	2300      	movs	r3, #0
 8013a82:	e779      	b.n	8013978 <_dtoa_r+0x7e8>
 8013a84:	9b04      	ldr	r3, [sp, #16]
 8013a86:	e777      	b.n	8013978 <_dtoa_r+0x7e8>
 8013a88:	2300      	movs	r3, #0
 8013a8a:	9308      	str	r3, [sp, #32]
 8013a8c:	e779      	b.n	8013982 <_dtoa_r+0x7f2>
 8013a8e:	d093      	beq.n	80139b8 <_dtoa_r+0x828>
 8013a90:	9a00      	ldr	r2, [sp, #0]
 8013a92:	331c      	adds	r3, #28
 8013a94:	441a      	add	r2, r3
 8013a96:	9200      	str	r2, [sp, #0]
 8013a98:	9a06      	ldr	r2, [sp, #24]
 8013a9a:	441a      	add	r2, r3
 8013a9c:	441e      	add	r6, r3
 8013a9e:	9206      	str	r2, [sp, #24]
 8013aa0:	e78a      	b.n	80139b8 <_dtoa_r+0x828>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	e7f4      	b.n	8013a90 <_dtoa_r+0x900>
 8013aa6:	9b03      	ldr	r3, [sp, #12]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	46b8      	mov	r8, r7
 8013aac:	dc20      	bgt.n	8013af0 <_dtoa_r+0x960>
 8013aae:	469b      	mov	fp, r3
 8013ab0:	9b07      	ldr	r3, [sp, #28]
 8013ab2:	2b02      	cmp	r3, #2
 8013ab4:	dd1e      	ble.n	8013af4 <_dtoa_r+0x964>
 8013ab6:	f1bb 0f00 	cmp.w	fp, #0
 8013aba:	f47f adb1 	bne.w	8013620 <_dtoa_r+0x490>
 8013abe:	4621      	mov	r1, r4
 8013ac0:	465b      	mov	r3, fp
 8013ac2:	2205      	movs	r2, #5
 8013ac4:	4648      	mov	r0, r9
 8013ac6:	f000 fd91 	bl	80145ec <__multadd>
 8013aca:	4601      	mov	r1, r0
 8013acc:	4604      	mov	r4, r0
 8013ace:	9802      	ldr	r0, [sp, #8]
 8013ad0:	f000 ff9c 	bl	8014a0c <__mcmp>
 8013ad4:	2800      	cmp	r0, #0
 8013ad6:	f77f ada3 	ble.w	8013620 <_dtoa_r+0x490>
 8013ada:	4656      	mov	r6, sl
 8013adc:	2331      	movs	r3, #49	@ 0x31
 8013ade:	f806 3b01 	strb.w	r3, [r6], #1
 8013ae2:	f108 0801 	add.w	r8, r8, #1
 8013ae6:	e59f      	b.n	8013628 <_dtoa_r+0x498>
 8013ae8:	9c03      	ldr	r4, [sp, #12]
 8013aea:	46b8      	mov	r8, r7
 8013aec:	4625      	mov	r5, r4
 8013aee:	e7f4      	b.n	8013ada <_dtoa_r+0x94a>
 8013af0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	f000 8101 	beq.w	8013cfe <_dtoa_r+0xb6e>
 8013afc:	2e00      	cmp	r6, #0
 8013afe:	dd05      	ble.n	8013b0c <_dtoa_r+0x97c>
 8013b00:	4629      	mov	r1, r5
 8013b02:	4632      	mov	r2, r6
 8013b04:	4648      	mov	r0, r9
 8013b06:	f000 ff15 	bl	8014934 <__lshift>
 8013b0a:	4605      	mov	r5, r0
 8013b0c:	9b08      	ldr	r3, [sp, #32]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d05c      	beq.n	8013bcc <_dtoa_r+0xa3c>
 8013b12:	6869      	ldr	r1, [r5, #4]
 8013b14:	4648      	mov	r0, r9
 8013b16:	f000 fd07 	bl	8014528 <_Balloc>
 8013b1a:	4606      	mov	r6, r0
 8013b1c:	b928      	cbnz	r0, 8013b2a <_dtoa_r+0x99a>
 8013b1e:	4b82      	ldr	r3, [pc, #520]	@ (8013d28 <_dtoa_r+0xb98>)
 8013b20:	4602      	mov	r2, r0
 8013b22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013b26:	f7ff bb4a 	b.w	80131be <_dtoa_r+0x2e>
 8013b2a:	692a      	ldr	r2, [r5, #16]
 8013b2c:	3202      	adds	r2, #2
 8013b2e:	0092      	lsls	r2, r2, #2
 8013b30:	f105 010c 	add.w	r1, r5, #12
 8013b34:	300c      	adds	r0, #12
 8013b36:	f001 fa9f 	bl	8015078 <memcpy>
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	4631      	mov	r1, r6
 8013b3e:	4648      	mov	r0, r9
 8013b40:	f000 fef8 	bl	8014934 <__lshift>
 8013b44:	f10a 0301 	add.w	r3, sl, #1
 8013b48:	9300      	str	r3, [sp, #0]
 8013b4a:	eb0a 030b 	add.w	r3, sl, fp
 8013b4e:	9308      	str	r3, [sp, #32]
 8013b50:	9b04      	ldr	r3, [sp, #16]
 8013b52:	f003 0301 	and.w	r3, r3, #1
 8013b56:	462f      	mov	r7, r5
 8013b58:	9306      	str	r3, [sp, #24]
 8013b5a:	4605      	mov	r5, r0
 8013b5c:	9b00      	ldr	r3, [sp, #0]
 8013b5e:	9802      	ldr	r0, [sp, #8]
 8013b60:	4621      	mov	r1, r4
 8013b62:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8013b66:	f7ff fa89 	bl	801307c <quorem>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	3330      	adds	r3, #48	@ 0x30
 8013b6e:	9003      	str	r0, [sp, #12]
 8013b70:	4639      	mov	r1, r7
 8013b72:	9802      	ldr	r0, [sp, #8]
 8013b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b76:	f000 ff49 	bl	8014a0c <__mcmp>
 8013b7a:	462a      	mov	r2, r5
 8013b7c:	9004      	str	r0, [sp, #16]
 8013b7e:	4621      	mov	r1, r4
 8013b80:	4648      	mov	r0, r9
 8013b82:	f000 ff5f 	bl	8014a44 <__mdiff>
 8013b86:	68c2      	ldr	r2, [r0, #12]
 8013b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b8a:	4606      	mov	r6, r0
 8013b8c:	bb02      	cbnz	r2, 8013bd0 <_dtoa_r+0xa40>
 8013b8e:	4601      	mov	r1, r0
 8013b90:	9802      	ldr	r0, [sp, #8]
 8013b92:	f000 ff3b 	bl	8014a0c <__mcmp>
 8013b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b98:	4602      	mov	r2, r0
 8013b9a:	4631      	mov	r1, r6
 8013b9c:	4648      	mov	r0, r9
 8013b9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ba2:	f000 fd01 	bl	80145a8 <_Bfree>
 8013ba6:	9b07      	ldr	r3, [sp, #28]
 8013ba8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013baa:	9e00      	ldr	r6, [sp, #0]
 8013bac:	ea42 0103 	orr.w	r1, r2, r3
 8013bb0:	9b06      	ldr	r3, [sp, #24]
 8013bb2:	4319      	orrs	r1, r3
 8013bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bb6:	d10d      	bne.n	8013bd4 <_dtoa_r+0xa44>
 8013bb8:	2b39      	cmp	r3, #57	@ 0x39
 8013bba:	d027      	beq.n	8013c0c <_dtoa_r+0xa7c>
 8013bbc:	9a04      	ldr	r2, [sp, #16]
 8013bbe:	2a00      	cmp	r2, #0
 8013bc0:	dd01      	ble.n	8013bc6 <_dtoa_r+0xa36>
 8013bc2:	9b03      	ldr	r3, [sp, #12]
 8013bc4:	3331      	adds	r3, #49	@ 0x31
 8013bc6:	f88b 3000 	strb.w	r3, [fp]
 8013bca:	e52e      	b.n	801362a <_dtoa_r+0x49a>
 8013bcc:	4628      	mov	r0, r5
 8013bce:	e7b9      	b.n	8013b44 <_dtoa_r+0x9b4>
 8013bd0:	2201      	movs	r2, #1
 8013bd2:	e7e2      	b.n	8013b9a <_dtoa_r+0xa0a>
 8013bd4:	9904      	ldr	r1, [sp, #16]
 8013bd6:	2900      	cmp	r1, #0
 8013bd8:	db04      	blt.n	8013be4 <_dtoa_r+0xa54>
 8013bda:	9807      	ldr	r0, [sp, #28]
 8013bdc:	4301      	orrs	r1, r0
 8013bde:	9806      	ldr	r0, [sp, #24]
 8013be0:	4301      	orrs	r1, r0
 8013be2:	d120      	bne.n	8013c26 <_dtoa_r+0xa96>
 8013be4:	2a00      	cmp	r2, #0
 8013be6:	ddee      	ble.n	8013bc6 <_dtoa_r+0xa36>
 8013be8:	9902      	ldr	r1, [sp, #8]
 8013bea:	9300      	str	r3, [sp, #0]
 8013bec:	2201      	movs	r2, #1
 8013bee:	4648      	mov	r0, r9
 8013bf0:	f000 fea0 	bl	8014934 <__lshift>
 8013bf4:	4621      	mov	r1, r4
 8013bf6:	9002      	str	r0, [sp, #8]
 8013bf8:	f000 ff08 	bl	8014a0c <__mcmp>
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	9b00      	ldr	r3, [sp, #0]
 8013c00:	dc02      	bgt.n	8013c08 <_dtoa_r+0xa78>
 8013c02:	d1e0      	bne.n	8013bc6 <_dtoa_r+0xa36>
 8013c04:	07da      	lsls	r2, r3, #31
 8013c06:	d5de      	bpl.n	8013bc6 <_dtoa_r+0xa36>
 8013c08:	2b39      	cmp	r3, #57	@ 0x39
 8013c0a:	d1da      	bne.n	8013bc2 <_dtoa_r+0xa32>
 8013c0c:	2339      	movs	r3, #57	@ 0x39
 8013c0e:	f88b 3000 	strb.w	r3, [fp]
 8013c12:	4633      	mov	r3, r6
 8013c14:	461e      	mov	r6, r3
 8013c16:	3b01      	subs	r3, #1
 8013c18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013c1c:	2a39      	cmp	r2, #57	@ 0x39
 8013c1e:	d04e      	beq.n	8013cbe <_dtoa_r+0xb2e>
 8013c20:	3201      	adds	r2, #1
 8013c22:	701a      	strb	r2, [r3, #0]
 8013c24:	e501      	b.n	801362a <_dtoa_r+0x49a>
 8013c26:	2a00      	cmp	r2, #0
 8013c28:	dd03      	ble.n	8013c32 <_dtoa_r+0xaa2>
 8013c2a:	2b39      	cmp	r3, #57	@ 0x39
 8013c2c:	d0ee      	beq.n	8013c0c <_dtoa_r+0xa7c>
 8013c2e:	3301      	adds	r3, #1
 8013c30:	e7c9      	b.n	8013bc6 <_dtoa_r+0xa36>
 8013c32:	9a00      	ldr	r2, [sp, #0]
 8013c34:	9908      	ldr	r1, [sp, #32]
 8013c36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013c3a:	428a      	cmp	r2, r1
 8013c3c:	d028      	beq.n	8013c90 <_dtoa_r+0xb00>
 8013c3e:	9902      	ldr	r1, [sp, #8]
 8013c40:	2300      	movs	r3, #0
 8013c42:	220a      	movs	r2, #10
 8013c44:	4648      	mov	r0, r9
 8013c46:	f000 fcd1 	bl	80145ec <__multadd>
 8013c4a:	42af      	cmp	r7, r5
 8013c4c:	9002      	str	r0, [sp, #8]
 8013c4e:	f04f 0300 	mov.w	r3, #0
 8013c52:	f04f 020a 	mov.w	r2, #10
 8013c56:	4639      	mov	r1, r7
 8013c58:	4648      	mov	r0, r9
 8013c5a:	d107      	bne.n	8013c6c <_dtoa_r+0xadc>
 8013c5c:	f000 fcc6 	bl	80145ec <__multadd>
 8013c60:	4607      	mov	r7, r0
 8013c62:	4605      	mov	r5, r0
 8013c64:	9b00      	ldr	r3, [sp, #0]
 8013c66:	3301      	adds	r3, #1
 8013c68:	9300      	str	r3, [sp, #0]
 8013c6a:	e777      	b.n	8013b5c <_dtoa_r+0x9cc>
 8013c6c:	f000 fcbe 	bl	80145ec <__multadd>
 8013c70:	4629      	mov	r1, r5
 8013c72:	4607      	mov	r7, r0
 8013c74:	2300      	movs	r3, #0
 8013c76:	220a      	movs	r2, #10
 8013c78:	4648      	mov	r0, r9
 8013c7a:	f000 fcb7 	bl	80145ec <__multadd>
 8013c7e:	4605      	mov	r5, r0
 8013c80:	e7f0      	b.n	8013c64 <_dtoa_r+0xad4>
 8013c82:	f1bb 0f00 	cmp.w	fp, #0
 8013c86:	bfcc      	ite	gt
 8013c88:	465e      	movgt	r6, fp
 8013c8a:	2601      	movle	r6, #1
 8013c8c:	4456      	add	r6, sl
 8013c8e:	2700      	movs	r7, #0
 8013c90:	9902      	ldr	r1, [sp, #8]
 8013c92:	9300      	str	r3, [sp, #0]
 8013c94:	2201      	movs	r2, #1
 8013c96:	4648      	mov	r0, r9
 8013c98:	f000 fe4c 	bl	8014934 <__lshift>
 8013c9c:	4621      	mov	r1, r4
 8013c9e:	9002      	str	r0, [sp, #8]
 8013ca0:	f000 feb4 	bl	8014a0c <__mcmp>
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	dcb4      	bgt.n	8013c12 <_dtoa_r+0xa82>
 8013ca8:	d102      	bne.n	8013cb0 <_dtoa_r+0xb20>
 8013caa:	9b00      	ldr	r3, [sp, #0]
 8013cac:	07db      	lsls	r3, r3, #31
 8013cae:	d4b0      	bmi.n	8013c12 <_dtoa_r+0xa82>
 8013cb0:	4633      	mov	r3, r6
 8013cb2:	461e      	mov	r6, r3
 8013cb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013cb8:	2a30      	cmp	r2, #48	@ 0x30
 8013cba:	d0fa      	beq.n	8013cb2 <_dtoa_r+0xb22>
 8013cbc:	e4b5      	b.n	801362a <_dtoa_r+0x49a>
 8013cbe:	459a      	cmp	sl, r3
 8013cc0:	d1a8      	bne.n	8013c14 <_dtoa_r+0xa84>
 8013cc2:	2331      	movs	r3, #49	@ 0x31
 8013cc4:	f108 0801 	add.w	r8, r8, #1
 8013cc8:	f88a 3000 	strb.w	r3, [sl]
 8013ccc:	e4ad      	b.n	801362a <_dtoa_r+0x49a>
 8013cce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013cd0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8013d2c <_dtoa_r+0xb9c>
 8013cd4:	b11b      	cbz	r3, 8013cde <_dtoa_r+0xb4e>
 8013cd6:	f10a 0308 	add.w	r3, sl, #8
 8013cda:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013cdc:	6013      	str	r3, [r2, #0]
 8013cde:	4650      	mov	r0, sl
 8013ce0:	b017      	add	sp, #92	@ 0x5c
 8013ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ce6:	9b07      	ldr	r3, [sp, #28]
 8013ce8:	2b01      	cmp	r3, #1
 8013cea:	f77f ae2e 	ble.w	801394a <_dtoa_r+0x7ba>
 8013cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013cf0:	9308      	str	r3, [sp, #32]
 8013cf2:	2001      	movs	r0, #1
 8013cf4:	e64d      	b.n	8013992 <_dtoa_r+0x802>
 8013cf6:	f1bb 0f00 	cmp.w	fp, #0
 8013cfa:	f77f aed9 	ble.w	8013ab0 <_dtoa_r+0x920>
 8013cfe:	4656      	mov	r6, sl
 8013d00:	9802      	ldr	r0, [sp, #8]
 8013d02:	4621      	mov	r1, r4
 8013d04:	f7ff f9ba 	bl	801307c <quorem>
 8013d08:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8013d0c:	f806 3b01 	strb.w	r3, [r6], #1
 8013d10:	eba6 020a 	sub.w	r2, r6, sl
 8013d14:	4593      	cmp	fp, r2
 8013d16:	ddb4      	ble.n	8013c82 <_dtoa_r+0xaf2>
 8013d18:	9902      	ldr	r1, [sp, #8]
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	220a      	movs	r2, #10
 8013d1e:	4648      	mov	r0, r9
 8013d20:	f000 fc64 	bl	80145ec <__multadd>
 8013d24:	9002      	str	r0, [sp, #8]
 8013d26:	e7eb      	b.n	8013d00 <_dtoa_r+0xb70>
 8013d28:	080182d0 	.word	0x080182d0
 8013d2c:	08018254 	.word	0x08018254

08013d30 <__ssputs_r>:
 8013d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d34:	688e      	ldr	r6, [r1, #8]
 8013d36:	461f      	mov	r7, r3
 8013d38:	42be      	cmp	r6, r7
 8013d3a:	680b      	ldr	r3, [r1, #0]
 8013d3c:	4682      	mov	sl, r0
 8013d3e:	460c      	mov	r4, r1
 8013d40:	4690      	mov	r8, r2
 8013d42:	d82d      	bhi.n	8013da0 <__ssputs_r+0x70>
 8013d44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013d48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013d4c:	d026      	beq.n	8013d9c <__ssputs_r+0x6c>
 8013d4e:	6965      	ldr	r5, [r4, #20]
 8013d50:	6909      	ldr	r1, [r1, #16]
 8013d52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d56:	eba3 0901 	sub.w	r9, r3, r1
 8013d5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013d5e:	1c7b      	adds	r3, r7, #1
 8013d60:	444b      	add	r3, r9
 8013d62:	106d      	asrs	r5, r5, #1
 8013d64:	429d      	cmp	r5, r3
 8013d66:	bf38      	it	cc
 8013d68:	461d      	movcc	r5, r3
 8013d6a:	0553      	lsls	r3, r2, #21
 8013d6c:	d527      	bpl.n	8013dbe <__ssputs_r+0x8e>
 8013d6e:	4629      	mov	r1, r5
 8013d70:	f000 faa2 	bl	80142b8 <_malloc_r>
 8013d74:	4606      	mov	r6, r0
 8013d76:	b360      	cbz	r0, 8013dd2 <__ssputs_r+0xa2>
 8013d78:	6921      	ldr	r1, [r4, #16]
 8013d7a:	464a      	mov	r2, r9
 8013d7c:	f001 f97c 	bl	8015078 <memcpy>
 8013d80:	89a3      	ldrh	r3, [r4, #12]
 8013d82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d8a:	81a3      	strh	r3, [r4, #12]
 8013d8c:	6126      	str	r6, [r4, #16]
 8013d8e:	6165      	str	r5, [r4, #20]
 8013d90:	444e      	add	r6, r9
 8013d92:	eba5 0509 	sub.w	r5, r5, r9
 8013d96:	6026      	str	r6, [r4, #0]
 8013d98:	60a5      	str	r5, [r4, #8]
 8013d9a:	463e      	mov	r6, r7
 8013d9c:	42be      	cmp	r6, r7
 8013d9e:	d900      	bls.n	8013da2 <__ssputs_r+0x72>
 8013da0:	463e      	mov	r6, r7
 8013da2:	6820      	ldr	r0, [r4, #0]
 8013da4:	4632      	mov	r2, r6
 8013da6:	4641      	mov	r1, r8
 8013da8:	f001 f8d4 	bl	8014f54 <memmove>
 8013dac:	68a3      	ldr	r3, [r4, #8]
 8013dae:	1b9b      	subs	r3, r3, r6
 8013db0:	60a3      	str	r3, [r4, #8]
 8013db2:	6823      	ldr	r3, [r4, #0]
 8013db4:	4433      	add	r3, r6
 8013db6:	6023      	str	r3, [r4, #0]
 8013db8:	2000      	movs	r0, #0
 8013dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dbe:	462a      	mov	r2, r5
 8013dc0:	f000 ff6f 	bl	8014ca2 <_realloc_r>
 8013dc4:	4606      	mov	r6, r0
 8013dc6:	2800      	cmp	r0, #0
 8013dc8:	d1e0      	bne.n	8013d8c <__ssputs_r+0x5c>
 8013dca:	6921      	ldr	r1, [r4, #16]
 8013dcc:	4650      	mov	r0, sl
 8013dce:	f001 f993 	bl	80150f8 <_free_r>
 8013dd2:	230c      	movs	r3, #12
 8013dd4:	f8ca 3000 	str.w	r3, [sl]
 8013dd8:	89a3      	ldrh	r3, [r4, #12]
 8013dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013dde:	81a3      	strh	r3, [r4, #12]
 8013de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013de4:	e7e9      	b.n	8013dba <__ssputs_r+0x8a>
	...

08013de8 <_svfiprintf_r>:
 8013de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dec:	4698      	mov	r8, r3
 8013dee:	898b      	ldrh	r3, [r1, #12]
 8013df0:	061b      	lsls	r3, r3, #24
 8013df2:	b09d      	sub	sp, #116	@ 0x74
 8013df4:	4607      	mov	r7, r0
 8013df6:	460d      	mov	r5, r1
 8013df8:	4614      	mov	r4, r2
 8013dfa:	d510      	bpl.n	8013e1e <_svfiprintf_r+0x36>
 8013dfc:	690b      	ldr	r3, [r1, #16]
 8013dfe:	b973      	cbnz	r3, 8013e1e <_svfiprintf_r+0x36>
 8013e00:	2140      	movs	r1, #64	@ 0x40
 8013e02:	f000 fa59 	bl	80142b8 <_malloc_r>
 8013e06:	6028      	str	r0, [r5, #0]
 8013e08:	6128      	str	r0, [r5, #16]
 8013e0a:	b930      	cbnz	r0, 8013e1a <_svfiprintf_r+0x32>
 8013e0c:	230c      	movs	r3, #12
 8013e0e:	603b      	str	r3, [r7, #0]
 8013e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e14:	b01d      	add	sp, #116	@ 0x74
 8013e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e1a:	2340      	movs	r3, #64	@ 0x40
 8013e1c:	616b      	str	r3, [r5, #20]
 8013e1e:	2300      	movs	r3, #0
 8013e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e22:	2320      	movs	r3, #32
 8013e24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e2c:	2330      	movs	r3, #48	@ 0x30
 8013e2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013fcc <_svfiprintf_r+0x1e4>
 8013e32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e36:	f04f 0901 	mov.w	r9, #1
 8013e3a:	4623      	mov	r3, r4
 8013e3c:	469a      	mov	sl, r3
 8013e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e42:	b10a      	cbz	r2, 8013e48 <_svfiprintf_r+0x60>
 8013e44:	2a25      	cmp	r2, #37	@ 0x25
 8013e46:	d1f9      	bne.n	8013e3c <_svfiprintf_r+0x54>
 8013e48:	ebba 0b04 	subs.w	fp, sl, r4
 8013e4c:	d00b      	beq.n	8013e66 <_svfiprintf_r+0x7e>
 8013e4e:	465b      	mov	r3, fp
 8013e50:	4622      	mov	r2, r4
 8013e52:	4629      	mov	r1, r5
 8013e54:	4638      	mov	r0, r7
 8013e56:	f7ff ff6b 	bl	8013d30 <__ssputs_r>
 8013e5a:	3001      	adds	r0, #1
 8013e5c:	f000 80a7 	beq.w	8013fae <_svfiprintf_r+0x1c6>
 8013e60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e62:	445a      	add	r2, fp
 8013e64:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e66:	f89a 3000 	ldrb.w	r3, [sl]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	f000 809f 	beq.w	8013fae <_svfiprintf_r+0x1c6>
 8013e70:	2300      	movs	r3, #0
 8013e72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013e76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e7a:	f10a 0a01 	add.w	sl, sl, #1
 8013e7e:	9304      	str	r3, [sp, #16]
 8013e80:	9307      	str	r3, [sp, #28]
 8013e82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013e86:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e88:	4654      	mov	r4, sl
 8013e8a:	2205      	movs	r2, #5
 8013e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e90:	484e      	ldr	r0, [pc, #312]	@ (8013fcc <_svfiprintf_r+0x1e4>)
 8013e92:	f7ec f975 	bl	8000180 <memchr>
 8013e96:	9a04      	ldr	r2, [sp, #16]
 8013e98:	b9d8      	cbnz	r0, 8013ed2 <_svfiprintf_r+0xea>
 8013e9a:	06d0      	lsls	r0, r2, #27
 8013e9c:	bf44      	itt	mi
 8013e9e:	2320      	movmi	r3, #32
 8013ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ea4:	0711      	lsls	r1, r2, #28
 8013ea6:	bf44      	itt	mi
 8013ea8:	232b      	movmi	r3, #43	@ 0x2b
 8013eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013eae:	f89a 3000 	ldrb.w	r3, [sl]
 8013eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8013eb4:	d015      	beq.n	8013ee2 <_svfiprintf_r+0xfa>
 8013eb6:	9a07      	ldr	r2, [sp, #28]
 8013eb8:	4654      	mov	r4, sl
 8013eba:	2000      	movs	r0, #0
 8013ebc:	f04f 0c0a 	mov.w	ip, #10
 8013ec0:	4621      	mov	r1, r4
 8013ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ec6:	3b30      	subs	r3, #48	@ 0x30
 8013ec8:	2b09      	cmp	r3, #9
 8013eca:	d94b      	bls.n	8013f64 <_svfiprintf_r+0x17c>
 8013ecc:	b1b0      	cbz	r0, 8013efc <_svfiprintf_r+0x114>
 8013ece:	9207      	str	r2, [sp, #28]
 8013ed0:	e014      	b.n	8013efc <_svfiprintf_r+0x114>
 8013ed2:	eba0 0308 	sub.w	r3, r0, r8
 8013ed6:	fa09 f303 	lsl.w	r3, r9, r3
 8013eda:	4313      	orrs	r3, r2
 8013edc:	9304      	str	r3, [sp, #16]
 8013ede:	46a2      	mov	sl, r4
 8013ee0:	e7d2      	b.n	8013e88 <_svfiprintf_r+0xa0>
 8013ee2:	9b03      	ldr	r3, [sp, #12]
 8013ee4:	1d19      	adds	r1, r3, #4
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	9103      	str	r1, [sp, #12]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	bfbb      	ittet	lt
 8013eee:	425b      	neglt	r3, r3
 8013ef0:	f042 0202 	orrlt.w	r2, r2, #2
 8013ef4:	9307      	strge	r3, [sp, #28]
 8013ef6:	9307      	strlt	r3, [sp, #28]
 8013ef8:	bfb8      	it	lt
 8013efa:	9204      	strlt	r2, [sp, #16]
 8013efc:	7823      	ldrb	r3, [r4, #0]
 8013efe:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f00:	d10a      	bne.n	8013f18 <_svfiprintf_r+0x130>
 8013f02:	7863      	ldrb	r3, [r4, #1]
 8013f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f06:	d132      	bne.n	8013f6e <_svfiprintf_r+0x186>
 8013f08:	9b03      	ldr	r3, [sp, #12]
 8013f0a:	1d1a      	adds	r2, r3, #4
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	9203      	str	r2, [sp, #12]
 8013f10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013f14:	3402      	adds	r4, #2
 8013f16:	9305      	str	r3, [sp, #20]
 8013f18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013fdc <_svfiprintf_r+0x1f4>
 8013f1c:	7821      	ldrb	r1, [r4, #0]
 8013f1e:	2203      	movs	r2, #3
 8013f20:	4650      	mov	r0, sl
 8013f22:	f7ec f92d 	bl	8000180 <memchr>
 8013f26:	b138      	cbz	r0, 8013f38 <_svfiprintf_r+0x150>
 8013f28:	9b04      	ldr	r3, [sp, #16]
 8013f2a:	eba0 000a 	sub.w	r0, r0, sl
 8013f2e:	2240      	movs	r2, #64	@ 0x40
 8013f30:	4082      	lsls	r2, r0
 8013f32:	4313      	orrs	r3, r2
 8013f34:	3401      	adds	r4, #1
 8013f36:	9304      	str	r3, [sp, #16]
 8013f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f3c:	4824      	ldr	r0, [pc, #144]	@ (8013fd0 <_svfiprintf_r+0x1e8>)
 8013f3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013f42:	2206      	movs	r2, #6
 8013f44:	f7ec f91c 	bl	8000180 <memchr>
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	d036      	beq.n	8013fba <_svfiprintf_r+0x1d2>
 8013f4c:	4b21      	ldr	r3, [pc, #132]	@ (8013fd4 <_svfiprintf_r+0x1ec>)
 8013f4e:	bb1b      	cbnz	r3, 8013f98 <_svfiprintf_r+0x1b0>
 8013f50:	9b03      	ldr	r3, [sp, #12]
 8013f52:	3307      	adds	r3, #7
 8013f54:	f023 0307 	bic.w	r3, r3, #7
 8013f58:	3308      	adds	r3, #8
 8013f5a:	9303      	str	r3, [sp, #12]
 8013f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f5e:	4433      	add	r3, r6
 8013f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f62:	e76a      	b.n	8013e3a <_svfiprintf_r+0x52>
 8013f64:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f68:	460c      	mov	r4, r1
 8013f6a:	2001      	movs	r0, #1
 8013f6c:	e7a8      	b.n	8013ec0 <_svfiprintf_r+0xd8>
 8013f6e:	2300      	movs	r3, #0
 8013f70:	3401      	adds	r4, #1
 8013f72:	9305      	str	r3, [sp, #20]
 8013f74:	4619      	mov	r1, r3
 8013f76:	f04f 0c0a 	mov.w	ip, #10
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f80:	3a30      	subs	r2, #48	@ 0x30
 8013f82:	2a09      	cmp	r2, #9
 8013f84:	d903      	bls.n	8013f8e <_svfiprintf_r+0x1a6>
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d0c6      	beq.n	8013f18 <_svfiprintf_r+0x130>
 8013f8a:	9105      	str	r1, [sp, #20]
 8013f8c:	e7c4      	b.n	8013f18 <_svfiprintf_r+0x130>
 8013f8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f92:	4604      	mov	r4, r0
 8013f94:	2301      	movs	r3, #1
 8013f96:	e7f0      	b.n	8013f7a <_svfiprintf_r+0x192>
 8013f98:	ab03      	add	r3, sp, #12
 8013f9a:	9300      	str	r3, [sp, #0]
 8013f9c:	462a      	mov	r2, r5
 8013f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8013fd8 <_svfiprintf_r+0x1f0>)
 8013fa0:	a904      	add	r1, sp, #16
 8013fa2:	4638      	mov	r0, r7
 8013fa4:	f7fe fb0a 	bl	80125bc <_printf_float>
 8013fa8:	1c42      	adds	r2, r0, #1
 8013faa:	4606      	mov	r6, r0
 8013fac:	d1d6      	bne.n	8013f5c <_svfiprintf_r+0x174>
 8013fae:	89ab      	ldrh	r3, [r5, #12]
 8013fb0:	065b      	lsls	r3, r3, #25
 8013fb2:	f53f af2d 	bmi.w	8013e10 <_svfiprintf_r+0x28>
 8013fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013fb8:	e72c      	b.n	8013e14 <_svfiprintf_r+0x2c>
 8013fba:	ab03      	add	r3, sp, #12
 8013fbc:	9300      	str	r3, [sp, #0]
 8013fbe:	462a      	mov	r2, r5
 8013fc0:	4b05      	ldr	r3, [pc, #20]	@ (8013fd8 <_svfiprintf_r+0x1f0>)
 8013fc2:	a904      	add	r1, sp, #16
 8013fc4:	4638      	mov	r0, r7
 8013fc6:	f7fe fd91 	bl	8012aec <_printf_i>
 8013fca:	e7ed      	b.n	8013fa8 <_svfiprintf_r+0x1c0>
 8013fcc:	080182e1 	.word	0x080182e1
 8013fd0:	080182eb 	.word	0x080182eb
 8013fd4:	080125bd 	.word	0x080125bd
 8013fd8:	08013d31 	.word	0x08013d31
 8013fdc:	080182e7 	.word	0x080182e7

08013fe0 <__sfputc_r>:
 8013fe0:	6893      	ldr	r3, [r2, #8]
 8013fe2:	3b01      	subs	r3, #1
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	b410      	push	{r4}
 8013fe8:	6093      	str	r3, [r2, #8]
 8013fea:	da08      	bge.n	8013ffe <__sfputc_r+0x1e>
 8013fec:	6994      	ldr	r4, [r2, #24]
 8013fee:	42a3      	cmp	r3, r4
 8013ff0:	db01      	blt.n	8013ff6 <__sfputc_r+0x16>
 8013ff2:	290a      	cmp	r1, #10
 8013ff4:	d103      	bne.n	8013ffe <__sfputc_r+0x1e>
 8013ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ffa:	f000 be80 	b.w	8014cfe <__swbuf_r>
 8013ffe:	6813      	ldr	r3, [r2, #0]
 8014000:	1c58      	adds	r0, r3, #1
 8014002:	6010      	str	r0, [r2, #0]
 8014004:	7019      	strb	r1, [r3, #0]
 8014006:	4608      	mov	r0, r1
 8014008:	f85d 4b04 	ldr.w	r4, [sp], #4
 801400c:	4770      	bx	lr

0801400e <__sfputs_r>:
 801400e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014010:	4606      	mov	r6, r0
 8014012:	460f      	mov	r7, r1
 8014014:	4614      	mov	r4, r2
 8014016:	18d5      	adds	r5, r2, r3
 8014018:	42ac      	cmp	r4, r5
 801401a:	d101      	bne.n	8014020 <__sfputs_r+0x12>
 801401c:	2000      	movs	r0, #0
 801401e:	e007      	b.n	8014030 <__sfputs_r+0x22>
 8014020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014024:	463a      	mov	r2, r7
 8014026:	4630      	mov	r0, r6
 8014028:	f7ff ffda 	bl	8013fe0 <__sfputc_r>
 801402c:	1c43      	adds	r3, r0, #1
 801402e:	d1f3      	bne.n	8014018 <__sfputs_r+0xa>
 8014030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014034 <_vfiprintf_r>:
 8014034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014038:	460d      	mov	r5, r1
 801403a:	b09d      	sub	sp, #116	@ 0x74
 801403c:	4614      	mov	r4, r2
 801403e:	4698      	mov	r8, r3
 8014040:	4606      	mov	r6, r0
 8014042:	b118      	cbz	r0, 801404c <_vfiprintf_r+0x18>
 8014044:	6a03      	ldr	r3, [r0, #32]
 8014046:	b90b      	cbnz	r3, 801404c <_vfiprintf_r+0x18>
 8014048:	f7fe ff30 	bl	8012eac <__sinit>
 801404c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801404e:	07d9      	lsls	r1, r3, #31
 8014050:	d405      	bmi.n	801405e <_vfiprintf_r+0x2a>
 8014052:	89ab      	ldrh	r3, [r5, #12]
 8014054:	059a      	lsls	r2, r3, #22
 8014056:	d402      	bmi.n	801405e <_vfiprintf_r+0x2a>
 8014058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801405a:	f7ff f808 	bl	801306e <__retarget_lock_acquire_recursive>
 801405e:	89ab      	ldrh	r3, [r5, #12]
 8014060:	071b      	lsls	r3, r3, #28
 8014062:	d501      	bpl.n	8014068 <_vfiprintf_r+0x34>
 8014064:	692b      	ldr	r3, [r5, #16]
 8014066:	b99b      	cbnz	r3, 8014090 <_vfiprintf_r+0x5c>
 8014068:	4629      	mov	r1, r5
 801406a:	4630      	mov	r0, r6
 801406c:	f000 fe86 	bl	8014d7c <__swsetup_r>
 8014070:	b170      	cbz	r0, 8014090 <_vfiprintf_r+0x5c>
 8014072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014074:	07dc      	lsls	r4, r3, #31
 8014076:	d504      	bpl.n	8014082 <_vfiprintf_r+0x4e>
 8014078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801407c:	b01d      	add	sp, #116	@ 0x74
 801407e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014082:	89ab      	ldrh	r3, [r5, #12]
 8014084:	0598      	lsls	r0, r3, #22
 8014086:	d4f7      	bmi.n	8014078 <_vfiprintf_r+0x44>
 8014088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801408a:	f7fe fff1 	bl	8013070 <__retarget_lock_release_recursive>
 801408e:	e7f3      	b.n	8014078 <_vfiprintf_r+0x44>
 8014090:	2300      	movs	r3, #0
 8014092:	9309      	str	r3, [sp, #36]	@ 0x24
 8014094:	2320      	movs	r3, #32
 8014096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801409a:	f8cd 800c 	str.w	r8, [sp, #12]
 801409e:	2330      	movs	r3, #48	@ 0x30
 80140a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014250 <_vfiprintf_r+0x21c>
 80140a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80140a8:	f04f 0901 	mov.w	r9, #1
 80140ac:	4623      	mov	r3, r4
 80140ae:	469a      	mov	sl, r3
 80140b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140b4:	b10a      	cbz	r2, 80140ba <_vfiprintf_r+0x86>
 80140b6:	2a25      	cmp	r2, #37	@ 0x25
 80140b8:	d1f9      	bne.n	80140ae <_vfiprintf_r+0x7a>
 80140ba:	ebba 0b04 	subs.w	fp, sl, r4
 80140be:	d00b      	beq.n	80140d8 <_vfiprintf_r+0xa4>
 80140c0:	465b      	mov	r3, fp
 80140c2:	4622      	mov	r2, r4
 80140c4:	4629      	mov	r1, r5
 80140c6:	4630      	mov	r0, r6
 80140c8:	f7ff ffa1 	bl	801400e <__sfputs_r>
 80140cc:	3001      	adds	r0, #1
 80140ce:	f000 80a7 	beq.w	8014220 <_vfiprintf_r+0x1ec>
 80140d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80140d4:	445a      	add	r2, fp
 80140d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80140d8:	f89a 3000 	ldrb.w	r3, [sl]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f000 809f 	beq.w	8014220 <_vfiprintf_r+0x1ec>
 80140e2:	2300      	movs	r3, #0
 80140e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80140e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140ec:	f10a 0a01 	add.w	sl, sl, #1
 80140f0:	9304      	str	r3, [sp, #16]
 80140f2:	9307      	str	r3, [sp, #28]
 80140f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80140f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80140fa:	4654      	mov	r4, sl
 80140fc:	2205      	movs	r2, #5
 80140fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014102:	4853      	ldr	r0, [pc, #332]	@ (8014250 <_vfiprintf_r+0x21c>)
 8014104:	f7ec f83c 	bl	8000180 <memchr>
 8014108:	9a04      	ldr	r2, [sp, #16]
 801410a:	b9d8      	cbnz	r0, 8014144 <_vfiprintf_r+0x110>
 801410c:	06d1      	lsls	r1, r2, #27
 801410e:	bf44      	itt	mi
 8014110:	2320      	movmi	r3, #32
 8014112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014116:	0713      	lsls	r3, r2, #28
 8014118:	bf44      	itt	mi
 801411a:	232b      	movmi	r3, #43	@ 0x2b
 801411c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014120:	f89a 3000 	ldrb.w	r3, [sl]
 8014124:	2b2a      	cmp	r3, #42	@ 0x2a
 8014126:	d015      	beq.n	8014154 <_vfiprintf_r+0x120>
 8014128:	9a07      	ldr	r2, [sp, #28]
 801412a:	4654      	mov	r4, sl
 801412c:	2000      	movs	r0, #0
 801412e:	f04f 0c0a 	mov.w	ip, #10
 8014132:	4621      	mov	r1, r4
 8014134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014138:	3b30      	subs	r3, #48	@ 0x30
 801413a:	2b09      	cmp	r3, #9
 801413c:	d94b      	bls.n	80141d6 <_vfiprintf_r+0x1a2>
 801413e:	b1b0      	cbz	r0, 801416e <_vfiprintf_r+0x13a>
 8014140:	9207      	str	r2, [sp, #28]
 8014142:	e014      	b.n	801416e <_vfiprintf_r+0x13a>
 8014144:	eba0 0308 	sub.w	r3, r0, r8
 8014148:	fa09 f303 	lsl.w	r3, r9, r3
 801414c:	4313      	orrs	r3, r2
 801414e:	9304      	str	r3, [sp, #16]
 8014150:	46a2      	mov	sl, r4
 8014152:	e7d2      	b.n	80140fa <_vfiprintf_r+0xc6>
 8014154:	9b03      	ldr	r3, [sp, #12]
 8014156:	1d19      	adds	r1, r3, #4
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	9103      	str	r1, [sp, #12]
 801415c:	2b00      	cmp	r3, #0
 801415e:	bfbb      	ittet	lt
 8014160:	425b      	neglt	r3, r3
 8014162:	f042 0202 	orrlt.w	r2, r2, #2
 8014166:	9307      	strge	r3, [sp, #28]
 8014168:	9307      	strlt	r3, [sp, #28]
 801416a:	bfb8      	it	lt
 801416c:	9204      	strlt	r2, [sp, #16]
 801416e:	7823      	ldrb	r3, [r4, #0]
 8014170:	2b2e      	cmp	r3, #46	@ 0x2e
 8014172:	d10a      	bne.n	801418a <_vfiprintf_r+0x156>
 8014174:	7863      	ldrb	r3, [r4, #1]
 8014176:	2b2a      	cmp	r3, #42	@ 0x2a
 8014178:	d132      	bne.n	80141e0 <_vfiprintf_r+0x1ac>
 801417a:	9b03      	ldr	r3, [sp, #12]
 801417c:	1d1a      	adds	r2, r3, #4
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	9203      	str	r2, [sp, #12]
 8014182:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014186:	3402      	adds	r4, #2
 8014188:	9305      	str	r3, [sp, #20]
 801418a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014260 <_vfiprintf_r+0x22c>
 801418e:	7821      	ldrb	r1, [r4, #0]
 8014190:	2203      	movs	r2, #3
 8014192:	4650      	mov	r0, sl
 8014194:	f7eb fff4 	bl	8000180 <memchr>
 8014198:	b138      	cbz	r0, 80141aa <_vfiprintf_r+0x176>
 801419a:	9b04      	ldr	r3, [sp, #16]
 801419c:	eba0 000a 	sub.w	r0, r0, sl
 80141a0:	2240      	movs	r2, #64	@ 0x40
 80141a2:	4082      	lsls	r2, r0
 80141a4:	4313      	orrs	r3, r2
 80141a6:	3401      	adds	r4, #1
 80141a8:	9304      	str	r3, [sp, #16]
 80141aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141ae:	4829      	ldr	r0, [pc, #164]	@ (8014254 <_vfiprintf_r+0x220>)
 80141b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80141b4:	2206      	movs	r2, #6
 80141b6:	f7eb ffe3 	bl	8000180 <memchr>
 80141ba:	2800      	cmp	r0, #0
 80141bc:	d03f      	beq.n	801423e <_vfiprintf_r+0x20a>
 80141be:	4b26      	ldr	r3, [pc, #152]	@ (8014258 <_vfiprintf_r+0x224>)
 80141c0:	bb1b      	cbnz	r3, 801420a <_vfiprintf_r+0x1d6>
 80141c2:	9b03      	ldr	r3, [sp, #12]
 80141c4:	3307      	adds	r3, #7
 80141c6:	f023 0307 	bic.w	r3, r3, #7
 80141ca:	3308      	adds	r3, #8
 80141cc:	9303      	str	r3, [sp, #12]
 80141ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141d0:	443b      	add	r3, r7
 80141d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80141d4:	e76a      	b.n	80140ac <_vfiprintf_r+0x78>
 80141d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80141da:	460c      	mov	r4, r1
 80141dc:	2001      	movs	r0, #1
 80141de:	e7a8      	b.n	8014132 <_vfiprintf_r+0xfe>
 80141e0:	2300      	movs	r3, #0
 80141e2:	3401      	adds	r4, #1
 80141e4:	9305      	str	r3, [sp, #20]
 80141e6:	4619      	mov	r1, r3
 80141e8:	f04f 0c0a 	mov.w	ip, #10
 80141ec:	4620      	mov	r0, r4
 80141ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141f2:	3a30      	subs	r2, #48	@ 0x30
 80141f4:	2a09      	cmp	r2, #9
 80141f6:	d903      	bls.n	8014200 <_vfiprintf_r+0x1cc>
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d0c6      	beq.n	801418a <_vfiprintf_r+0x156>
 80141fc:	9105      	str	r1, [sp, #20]
 80141fe:	e7c4      	b.n	801418a <_vfiprintf_r+0x156>
 8014200:	fb0c 2101 	mla	r1, ip, r1, r2
 8014204:	4604      	mov	r4, r0
 8014206:	2301      	movs	r3, #1
 8014208:	e7f0      	b.n	80141ec <_vfiprintf_r+0x1b8>
 801420a:	ab03      	add	r3, sp, #12
 801420c:	9300      	str	r3, [sp, #0]
 801420e:	462a      	mov	r2, r5
 8014210:	4b12      	ldr	r3, [pc, #72]	@ (801425c <_vfiprintf_r+0x228>)
 8014212:	a904      	add	r1, sp, #16
 8014214:	4630      	mov	r0, r6
 8014216:	f7fe f9d1 	bl	80125bc <_printf_float>
 801421a:	4607      	mov	r7, r0
 801421c:	1c78      	adds	r0, r7, #1
 801421e:	d1d6      	bne.n	80141ce <_vfiprintf_r+0x19a>
 8014220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014222:	07d9      	lsls	r1, r3, #31
 8014224:	d405      	bmi.n	8014232 <_vfiprintf_r+0x1fe>
 8014226:	89ab      	ldrh	r3, [r5, #12]
 8014228:	059a      	lsls	r2, r3, #22
 801422a:	d402      	bmi.n	8014232 <_vfiprintf_r+0x1fe>
 801422c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801422e:	f7fe ff1f 	bl	8013070 <__retarget_lock_release_recursive>
 8014232:	89ab      	ldrh	r3, [r5, #12]
 8014234:	065b      	lsls	r3, r3, #25
 8014236:	f53f af1f 	bmi.w	8014078 <_vfiprintf_r+0x44>
 801423a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801423c:	e71e      	b.n	801407c <_vfiprintf_r+0x48>
 801423e:	ab03      	add	r3, sp, #12
 8014240:	9300      	str	r3, [sp, #0]
 8014242:	462a      	mov	r2, r5
 8014244:	4b05      	ldr	r3, [pc, #20]	@ (801425c <_vfiprintf_r+0x228>)
 8014246:	a904      	add	r1, sp, #16
 8014248:	4630      	mov	r0, r6
 801424a:	f7fe fc4f 	bl	8012aec <_printf_i>
 801424e:	e7e4      	b.n	801421a <_vfiprintf_r+0x1e6>
 8014250:	080182e1 	.word	0x080182e1
 8014254:	080182eb 	.word	0x080182eb
 8014258:	080125bd 	.word	0x080125bd
 801425c:	0801400f 	.word	0x0801400f
 8014260:	080182e7 	.word	0x080182e7

08014264 <malloc>:
 8014264:	4b02      	ldr	r3, [pc, #8]	@ (8014270 <malloc+0xc>)
 8014266:	4601      	mov	r1, r0
 8014268:	6818      	ldr	r0, [r3, #0]
 801426a:	f000 b825 	b.w	80142b8 <_malloc_r>
 801426e:	bf00      	nop
 8014270:	2000009c 	.word	0x2000009c

08014274 <sbrk_aligned>:
 8014274:	b570      	push	{r4, r5, r6, lr}
 8014276:	4e0f      	ldr	r6, [pc, #60]	@ (80142b4 <sbrk_aligned+0x40>)
 8014278:	460c      	mov	r4, r1
 801427a:	6831      	ldr	r1, [r6, #0]
 801427c:	4605      	mov	r5, r0
 801427e:	b911      	cbnz	r1, 8014286 <sbrk_aligned+0x12>
 8014280:	f000 feb6 	bl	8014ff0 <_sbrk_r>
 8014284:	6030      	str	r0, [r6, #0]
 8014286:	4621      	mov	r1, r4
 8014288:	4628      	mov	r0, r5
 801428a:	f000 feb1 	bl	8014ff0 <_sbrk_r>
 801428e:	1c43      	adds	r3, r0, #1
 8014290:	d103      	bne.n	801429a <sbrk_aligned+0x26>
 8014292:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8014296:	4620      	mov	r0, r4
 8014298:	bd70      	pop	{r4, r5, r6, pc}
 801429a:	1cc4      	adds	r4, r0, #3
 801429c:	f024 0403 	bic.w	r4, r4, #3
 80142a0:	42a0      	cmp	r0, r4
 80142a2:	d0f8      	beq.n	8014296 <sbrk_aligned+0x22>
 80142a4:	1a21      	subs	r1, r4, r0
 80142a6:	4628      	mov	r0, r5
 80142a8:	f000 fea2 	bl	8014ff0 <_sbrk_r>
 80142ac:	3001      	adds	r0, #1
 80142ae:	d1f2      	bne.n	8014296 <sbrk_aligned+0x22>
 80142b0:	e7ef      	b.n	8014292 <sbrk_aligned+0x1e>
 80142b2:	bf00      	nop
 80142b4:	20000818 	.word	0x20000818

080142b8 <_malloc_r>:
 80142b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142bc:	1ccd      	adds	r5, r1, #3
 80142be:	f025 0503 	bic.w	r5, r5, #3
 80142c2:	3508      	adds	r5, #8
 80142c4:	2d0c      	cmp	r5, #12
 80142c6:	bf38      	it	cc
 80142c8:	250c      	movcc	r5, #12
 80142ca:	2d00      	cmp	r5, #0
 80142cc:	4606      	mov	r6, r0
 80142ce:	db01      	blt.n	80142d4 <_malloc_r+0x1c>
 80142d0:	42a9      	cmp	r1, r5
 80142d2:	d904      	bls.n	80142de <_malloc_r+0x26>
 80142d4:	230c      	movs	r3, #12
 80142d6:	6033      	str	r3, [r6, #0]
 80142d8:	2000      	movs	r0, #0
 80142da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80143b4 <_malloc_r+0xfc>
 80142e2:	f000 f915 	bl	8014510 <__malloc_lock>
 80142e6:	f8d8 3000 	ldr.w	r3, [r8]
 80142ea:	461c      	mov	r4, r3
 80142ec:	bb44      	cbnz	r4, 8014340 <_malloc_r+0x88>
 80142ee:	4629      	mov	r1, r5
 80142f0:	4630      	mov	r0, r6
 80142f2:	f7ff ffbf 	bl	8014274 <sbrk_aligned>
 80142f6:	1c43      	adds	r3, r0, #1
 80142f8:	4604      	mov	r4, r0
 80142fa:	d158      	bne.n	80143ae <_malloc_r+0xf6>
 80142fc:	f8d8 4000 	ldr.w	r4, [r8]
 8014300:	4627      	mov	r7, r4
 8014302:	2f00      	cmp	r7, #0
 8014304:	d143      	bne.n	801438e <_malloc_r+0xd6>
 8014306:	2c00      	cmp	r4, #0
 8014308:	d04b      	beq.n	80143a2 <_malloc_r+0xea>
 801430a:	6823      	ldr	r3, [r4, #0]
 801430c:	4639      	mov	r1, r7
 801430e:	4630      	mov	r0, r6
 8014310:	eb04 0903 	add.w	r9, r4, r3
 8014314:	f000 fe6c 	bl	8014ff0 <_sbrk_r>
 8014318:	4581      	cmp	r9, r0
 801431a:	d142      	bne.n	80143a2 <_malloc_r+0xea>
 801431c:	6821      	ldr	r1, [r4, #0]
 801431e:	1a6d      	subs	r5, r5, r1
 8014320:	4629      	mov	r1, r5
 8014322:	4630      	mov	r0, r6
 8014324:	f7ff ffa6 	bl	8014274 <sbrk_aligned>
 8014328:	3001      	adds	r0, #1
 801432a:	d03a      	beq.n	80143a2 <_malloc_r+0xea>
 801432c:	6823      	ldr	r3, [r4, #0]
 801432e:	442b      	add	r3, r5
 8014330:	6023      	str	r3, [r4, #0]
 8014332:	f8d8 3000 	ldr.w	r3, [r8]
 8014336:	685a      	ldr	r2, [r3, #4]
 8014338:	bb62      	cbnz	r2, 8014394 <_malloc_r+0xdc>
 801433a:	f8c8 7000 	str.w	r7, [r8]
 801433e:	e00f      	b.n	8014360 <_malloc_r+0xa8>
 8014340:	6822      	ldr	r2, [r4, #0]
 8014342:	1b52      	subs	r2, r2, r5
 8014344:	d420      	bmi.n	8014388 <_malloc_r+0xd0>
 8014346:	2a0b      	cmp	r2, #11
 8014348:	d917      	bls.n	801437a <_malloc_r+0xc2>
 801434a:	1961      	adds	r1, r4, r5
 801434c:	42a3      	cmp	r3, r4
 801434e:	6025      	str	r5, [r4, #0]
 8014350:	bf18      	it	ne
 8014352:	6059      	strne	r1, [r3, #4]
 8014354:	6863      	ldr	r3, [r4, #4]
 8014356:	bf08      	it	eq
 8014358:	f8c8 1000 	streq.w	r1, [r8]
 801435c:	5162      	str	r2, [r4, r5]
 801435e:	604b      	str	r3, [r1, #4]
 8014360:	4630      	mov	r0, r6
 8014362:	f000 f8db 	bl	801451c <__malloc_unlock>
 8014366:	f104 000b 	add.w	r0, r4, #11
 801436a:	1d23      	adds	r3, r4, #4
 801436c:	f020 0007 	bic.w	r0, r0, #7
 8014370:	1ac2      	subs	r2, r0, r3
 8014372:	bf1c      	itt	ne
 8014374:	1a1b      	subne	r3, r3, r0
 8014376:	50a3      	strne	r3, [r4, r2]
 8014378:	e7af      	b.n	80142da <_malloc_r+0x22>
 801437a:	6862      	ldr	r2, [r4, #4]
 801437c:	42a3      	cmp	r3, r4
 801437e:	bf0c      	ite	eq
 8014380:	f8c8 2000 	streq.w	r2, [r8]
 8014384:	605a      	strne	r2, [r3, #4]
 8014386:	e7eb      	b.n	8014360 <_malloc_r+0xa8>
 8014388:	4623      	mov	r3, r4
 801438a:	6864      	ldr	r4, [r4, #4]
 801438c:	e7ae      	b.n	80142ec <_malloc_r+0x34>
 801438e:	463c      	mov	r4, r7
 8014390:	687f      	ldr	r7, [r7, #4]
 8014392:	e7b6      	b.n	8014302 <_malloc_r+0x4a>
 8014394:	461a      	mov	r2, r3
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	42a3      	cmp	r3, r4
 801439a:	d1fb      	bne.n	8014394 <_malloc_r+0xdc>
 801439c:	2300      	movs	r3, #0
 801439e:	6053      	str	r3, [r2, #4]
 80143a0:	e7de      	b.n	8014360 <_malloc_r+0xa8>
 80143a2:	230c      	movs	r3, #12
 80143a4:	6033      	str	r3, [r6, #0]
 80143a6:	4630      	mov	r0, r6
 80143a8:	f000 f8b8 	bl	801451c <__malloc_unlock>
 80143ac:	e794      	b.n	80142d8 <_malloc_r+0x20>
 80143ae:	6005      	str	r5, [r0, #0]
 80143b0:	e7d6      	b.n	8014360 <_malloc_r+0xa8>
 80143b2:	bf00      	nop
 80143b4:	2000081c 	.word	0x2000081c

080143b8 <__sflush_r>:
 80143b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80143bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143c0:	0716      	lsls	r6, r2, #28
 80143c2:	4605      	mov	r5, r0
 80143c4:	460c      	mov	r4, r1
 80143c6:	d454      	bmi.n	8014472 <__sflush_r+0xba>
 80143c8:	684b      	ldr	r3, [r1, #4]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	dc02      	bgt.n	80143d4 <__sflush_r+0x1c>
 80143ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	dd48      	ble.n	8014466 <__sflush_r+0xae>
 80143d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80143d6:	2e00      	cmp	r6, #0
 80143d8:	d045      	beq.n	8014466 <__sflush_r+0xae>
 80143da:	2300      	movs	r3, #0
 80143dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80143e0:	682f      	ldr	r7, [r5, #0]
 80143e2:	6a21      	ldr	r1, [r4, #32]
 80143e4:	602b      	str	r3, [r5, #0]
 80143e6:	d030      	beq.n	801444a <__sflush_r+0x92>
 80143e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80143ea:	89a3      	ldrh	r3, [r4, #12]
 80143ec:	0759      	lsls	r1, r3, #29
 80143ee:	d505      	bpl.n	80143fc <__sflush_r+0x44>
 80143f0:	6863      	ldr	r3, [r4, #4]
 80143f2:	1ad2      	subs	r2, r2, r3
 80143f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80143f6:	b10b      	cbz	r3, 80143fc <__sflush_r+0x44>
 80143f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80143fa:	1ad2      	subs	r2, r2, r3
 80143fc:	2300      	movs	r3, #0
 80143fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014400:	6a21      	ldr	r1, [r4, #32]
 8014402:	4628      	mov	r0, r5
 8014404:	47b0      	blx	r6
 8014406:	1c43      	adds	r3, r0, #1
 8014408:	89a3      	ldrh	r3, [r4, #12]
 801440a:	d106      	bne.n	801441a <__sflush_r+0x62>
 801440c:	6829      	ldr	r1, [r5, #0]
 801440e:	291d      	cmp	r1, #29
 8014410:	d82b      	bhi.n	801446a <__sflush_r+0xb2>
 8014412:	4a2a      	ldr	r2, [pc, #168]	@ (80144bc <__sflush_r+0x104>)
 8014414:	40ca      	lsrs	r2, r1
 8014416:	07d6      	lsls	r6, r2, #31
 8014418:	d527      	bpl.n	801446a <__sflush_r+0xb2>
 801441a:	2200      	movs	r2, #0
 801441c:	6062      	str	r2, [r4, #4]
 801441e:	04d9      	lsls	r1, r3, #19
 8014420:	6922      	ldr	r2, [r4, #16]
 8014422:	6022      	str	r2, [r4, #0]
 8014424:	d504      	bpl.n	8014430 <__sflush_r+0x78>
 8014426:	1c42      	adds	r2, r0, #1
 8014428:	d101      	bne.n	801442e <__sflush_r+0x76>
 801442a:	682b      	ldr	r3, [r5, #0]
 801442c:	b903      	cbnz	r3, 8014430 <__sflush_r+0x78>
 801442e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014432:	602f      	str	r7, [r5, #0]
 8014434:	b1b9      	cbz	r1, 8014466 <__sflush_r+0xae>
 8014436:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801443a:	4299      	cmp	r1, r3
 801443c:	d002      	beq.n	8014444 <__sflush_r+0x8c>
 801443e:	4628      	mov	r0, r5
 8014440:	f000 fe5a 	bl	80150f8 <_free_r>
 8014444:	2300      	movs	r3, #0
 8014446:	6363      	str	r3, [r4, #52]	@ 0x34
 8014448:	e00d      	b.n	8014466 <__sflush_r+0xae>
 801444a:	2301      	movs	r3, #1
 801444c:	4628      	mov	r0, r5
 801444e:	47b0      	blx	r6
 8014450:	4602      	mov	r2, r0
 8014452:	1c50      	adds	r0, r2, #1
 8014454:	d1c9      	bne.n	80143ea <__sflush_r+0x32>
 8014456:	682b      	ldr	r3, [r5, #0]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d0c6      	beq.n	80143ea <__sflush_r+0x32>
 801445c:	2b1d      	cmp	r3, #29
 801445e:	d001      	beq.n	8014464 <__sflush_r+0xac>
 8014460:	2b16      	cmp	r3, #22
 8014462:	d11e      	bne.n	80144a2 <__sflush_r+0xea>
 8014464:	602f      	str	r7, [r5, #0]
 8014466:	2000      	movs	r0, #0
 8014468:	e022      	b.n	80144b0 <__sflush_r+0xf8>
 801446a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801446e:	b21b      	sxth	r3, r3
 8014470:	e01b      	b.n	80144aa <__sflush_r+0xf2>
 8014472:	690f      	ldr	r7, [r1, #16]
 8014474:	2f00      	cmp	r7, #0
 8014476:	d0f6      	beq.n	8014466 <__sflush_r+0xae>
 8014478:	0793      	lsls	r3, r2, #30
 801447a:	680e      	ldr	r6, [r1, #0]
 801447c:	bf08      	it	eq
 801447e:	694b      	ldreq	r3, [r1, #20]
 8014480:	600f      	str	r7, [r1, #0]
 8014482:	bf18      	it	ne
 8014484:	2300      	movne	r3, #0
 8014486:	eba6 0807 	sub.w	r8, r6, r7
 801448a:	608b      	str	r3, [r1, #8]
 801448c:	f1b8 0f00 	cmp.w	r8, #0
 8014490:	dde9      	ble.n	8014466 <__sflush_r+0xae>
 8014492:	6a21      	ldr	r1, [r4, #32]
 8014494:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014496:	4643      	mov	r3, r8
 8014498:	463a      	mov	r2, r7
 801449a:	4628      	mov	r0, r5
 801449c:	47b0      	blx	r6
 801449e:	2800      	cmp	r0, #0
 80144a0:	dc08      	bgt.n	80144b4 <__sflush_r+0xfc>
 80144a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144aa:	81a3      	strh	r3, [r4, #12]
 80144ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80144b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144b4:	4407      	add	r7, r0
 80144b6:	eba8 0800 	sub.w	r8, r8, r0
 80144ba:	e7e7      	b.n	801448c <__sflush_r+0xd4>
 80144bc:	20400001 	.word	0x20400001

080144c0 <_fflush_r>:
 80144c0:	b538      	push	{r3, r4, r5, lr}
 80144c2:	690b      	ldr	r3, [r1, #16]
 80144c4:	4605      	mov	r5, r0
 80144c6:	460c      	mov	r4, r1
 80144c8:	b913      	cbnz	r3, 80144d0 <_fflush_r+0x10>
 80144ca:	2500      	movs	r5, #0
 80144cc:	4628      	mov	r0, r5
 80144ce:	bd38      	pop	{r3, r4, r5, pc}
 80144d0:	b118      	cbz	r0, 80144da <_fflush_r+0x1a>
 80144d2:	6a03      	ldr	r3, [r0, #32]
 80144d4:	b90b      	cbnz	r3, 80144da <_fflush_r+0x1a>
 80144d6:	f7fe fce9 	bl	8012eac <__sinit>
 80144da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d0f3      	beq.n	80144ca <_fflush_r+0xa>
 80144e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80144e4:	07d0      	lsls	r0, r2, #31
 80144e6:	d404      	bmi.n	80144f2 <_fflush_r+0x32>
 80144e8:	0599      	lsls	r1, r3, #22
 80144ea:	d402      	bmi.n	80144f2 <_fflush_r+0x32>
 80144ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80144ee:	f7fe fdbe 	bl	801306e <__retarget_lock_acquire_recursive>
 80144f2:	4628      	mov	r0, r5
 80144f4:	4621      	mov	r1, r4
 80144f6:	f7ff ff5f 	bl	80143b8 <__sflush_r>
 80144fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80144fc:	07da      	lsls	r2, r3, #31
 80144fe:	4605      	mov	r5, r0
 8014500:	d4e4      	bmi.n	80144cc <_fflush_r+0xc>
 8014502:	89a3      	ldrh	r3, [r4, #12]
 8014504:	059b      	lsls	r3, r3, #22
 8014506:	d4e1      	bmi.n	80144cc <_fflush_r+0xc>
 8014508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801450a:	f7fe fdb1 	bl	8013070 <__retarget_lock_release_recursive>
 801450e:	e7dd      	b.n	80144cc <_fflush_r+0xc>

08014510 <__malloc_lock>:
 8014510:	4801      	ldr	r0, [pc, #4]	@ (8014518 <__malloc_lock+0x8>)
 8014512:	f7fe bdac 	b.w	801306e <__retarget_lock_acquire_recursive>
 8014516:	bf00      	nop
 8014518:	20000814 	.word	0x20000814

0801451c <__malloc_unlock>:
 801451c:	4801      	ldr	r0, [pc, #4]	@ (8014524 <__malloc_unlock+0x8>)
 801451e:	f7fe bda7 	b.w	8013070 <__retarget_lock_release_recursive>
 8014522:	bf00      	nop
 8014524:	20000814 	.word	0x20000814

08014528 <_Balloc>:
 8014528:	b570      	push	{r4, r5, r6, lr}
 801452a:	69c6      	ldr	r6, [r0, #28]
 801452c:	4604      	mov	r4, r0
 801452e:	460d      	mov	r5, r1
 8014530:	b976      	cbnz	r6, 8014550 <_Balloc+0x28>
 8014532:	2010      	movs	r0, #16
 8014534:	f7ff fe96 	bl	8014264 <malloc>
 8014538:	4602      	mov	r2, r0
 801453a:	61e0      	str	r0, [r4, #28]
 801453c:	b920      	cbnz	r0, 8014548 <_Balloc+0x20>
 801453e:	4b18      	ldr	r3, [pc, #96]	@ (80145a0 <_Balloc+0x78>)
 8014540:	4818      	ldr	r0, [pc, #96]	@ (80145a4 <_Balloc+0x7c>)
 8014542:	216b      	movs	r1, #107	@ 0x6b
 8014544:	f000 fda6 	bl	8015094 <__assert_func>
 8014548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801454c:	6006      	str	r6, [r0, #0]
 801454e:	60c6      	str	r6, [r0, #12]
 8014550:	69e6      	ldr	r6, [r4, #28]
 8014552:	68f3      	ldr	r3, [r6, #12]
 8014554:	b183      	cbz	r3, 8014578 <_Balloc+0x50>
 8014556:	69e3      	ldr	r3, [r4, #28]
 8014558:	68db      	ldr	r3, [r3, #12]
 801455a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801455e:	b9b8      	cbnz	r0, 8014590 <_Balloc+0x68>
 8014560:	2101      	movs	r1, #1
 8014562:	fa01 f605 	lsl.w	r6, r1, r5
 8014566:	1d72      	adds	r2, r6, #5
 8014568:	0092      	lsls	r2, r2, #2
 801456a:	4620      	mov	r0, r4
 801456c:	f000 fdb0 	bl	80150d0 <_calloc_r>
 8014570:	b160      	cbz	r0, 801458c <_Balloc+0x64>
 8014572:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014576:	e00e      	b.n	8014596 <_Balloc+0x6e>
 8014578:	2221      	movs	r2, #33	@ 0x21
 801457a:	2104      	movs	r1, #4
 801457c:	4620      	mov	r0, r4
 801457e:	f000 fda7 	bl	80150d0 <_calloc_r>
 8014582:	69e3      	ldr	r3, [r4, #28]
 8014584:	60f0      	str	r0, [r6, #12]
 8014586:	68db      	ldr	r3, [r3, #12]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d1e4      	bne.n	8014556 <_Balloc+0x2e>
 801458c:	2000      	movs	r0, #0
 801458e:	bd70      	pop	{r4, r5, r6, pc}
 8014590:	6802      	ldr	r2, [r0, #0]
 8014592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014596:	2300      	movs	r3, #0
 8014598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801459c:	e7f7      	b.n	801458e <_Balloc+0x66>
 801459e:	bf00      	nop
 80145a0:	08018261 	.word	0x08018261
 80145a4:	080182f2 	.word	0x080182f2

080145a8 <_Bfree>:
 80145a8:	b570      	push	{r4, r5, r6, lr}
 80145aa:	69c6      	ldr	r6, [r0, #28]
 80145ac:	4605      	mov	r5, r0
 80145ae:	460c      	mov	r4, r1
 80145b0:	b976      	cbnz	r6, 80145d0 <_Bfree+0x28>
 80145b2:	2010      	movs	r0, #16
 80145b4:	f7ff fe56 	bl	8014264 <malloc>
 80145b8:	4602      	mov	r2, r0
 80145ba:	61e8      	str	r0, [r5, #28]
 80145bc:	b920      	cbnz	r0, 80145c8 <_Bfree+0x20>
 80145be:	4b09      	ldr	r3, [pc, #36]	@ (80145e4 <_Bfree+0x3c>)
 80145c0:	4809      	ldr	r0, [pc, #36]	@ (80145e8 <_Bfree+0x40>)
 80145c2:	218f      	movs	r1, #143	@ 0x8f
 80145c4:	f000 fd66 	bl	8015094 <__assert_func>
 80145c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80145cc:	6006      	str	r6, [r0, #0]
 80145ce:	60c6      	str	r6, [r0, #12]
 80145d0:	b13c      	cbz	r4, 80145e2 <_Bfree+0x3a>
 80145d2:	69eb      	ldr	r3, [r5, #28]
 80145d4:	6862      	ldr	r2, [r4, #4]
 80145d6:	68db      	ldr	r3, [r3, #12]
 80145d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80145dc:	6021      	str	r1, [r4, #0]
 80145de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80145e2:	bd70      	pop	{r4, r5, r6, pc}
 80145e4:	08018261 	.word	0x08018261
 80145e8:	080182f2 	.word	0x080182f2

080145ec <__multadd>:
 80145ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f0:	690d      	ldr	r5, [r1, #16]
 80145f2:	4607      	mov	r7, r0
 80145f4:	460c      	mov	r4, r1
 80145f6:	461e      	mov	r6, r3
 80145f8:	f101 0c14 	add.w	ip, r1, #20
 80145fc:	2000      	movs	r0, #0
 80145fe:	f8dc 3000 	ldr.w	r3, [ip]
 8014602:	b299      	uxth	r1, r3
 8014604:	fb02 6101 	mla	r1, r2, r1, r6
 8014608:	0c1e      	lsrs	r6, r3, #16
 801460a:	0c0b      	lsrs	r3, r1, #16
 801460c:	fb02 3306 	mla	r3, r2, r6, r3
 8014610:	b289      	uxth	r1, r1
 8014612:	3001      	adds	r0, #1
 8014614:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014618:	4285      	cmp	r5, r0
 801461a:	f84c 1b04 	str.w	r1, [ip], #4
 801461e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014622:	dcec      	bgt.n	80145fe <__multadd+0x12>
 8014624:	b30e      	cbz	r6, 801466a <__multadd+0x7e>
 8014626:	68a3      	ldr	r3, [r4, #8]
 8014628:	42ab      	cmp	r3, r5
 801462a:	dc19      	bgt.n	8014660 <__multadd+0x74>
 801462c:	6861      	ldr	r1, [r4, #4]
 801462e:	4638      	mov	r0, r7
 8014630:	3101      	adds	r1, #1
 8014632:	f7ff ff79 	bl	8014528 <_Balloc>
 8014636:	4680      	mov	r8, r0
 8014638:	b928      	cbnz	r0, 8014646 <__multadd+0x5a>
 801463a:	4602      	mov	r2, r0
 801463c:	4b0c      	ldr	r3, [pc, #48]	@ (8014670 <__multadd+0x84>)
 801463e:	480d      	ldr	r0, [pc, #52]	@ (8014674 <__multadd+0x88>)
 8014640:	21ba      	movs	r1, #186	@ 0xba
 8014642:	f000 fd27 	bl	8015094 <__assert_func>
 8014646:	6922      	ldr	r2, [r4, #16]
 8014648:	3202      	adds	r2, #2
 801464a:	f104 010c 	add.w	r1, r4, #12
 801464e:	0092      	lsls	r2, r2, #2
 8014650:	300c      	adds	r0, #12
 8014652:	f000 fd11 	bl	8015078 <memcpy>
 8014656:	4621      	mov	r1, r4
 8014658:	4638      	mov	r0, r7
 801465a:	f7ff ffa5 	bl	80145a8 <_Bfree>
 801465e:	4644      	mov	r4, r8
 8014660:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014664:	3501      	adds	r5, #1
 8014666:	615e      	str	r6, [r3, #20]
 8014668:	6125      	str	r5, [r4, #16]
 801466a:	4620      	mov	r0, r4
 801466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014670:	080182d0 	.word	0x080182d0
 8014674:	080182f2 	.word	0x080182f2

08014678 <__hi0bits>:
 8014678:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801467c:	4603      	mov	r3, r0
 801467e:	bf36      	itet	cc
 8014680:	0403      	lslcc	r3, r0, #16
 8014682:	2000      	movcs	r0, #0
 8014684:	2010      	movcc	r0, #16
 8014686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801468a:	bf3c      	itt	cc
 801468c:	021b      	lslcc	r3, r3, #8
 801468e:	3008      	addcc	r0, #8
 8014690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014694:	bf3c      	itt	cc
 8014696:	011b      	lslcc	r3, r3, #4
 8014698:	3004      	addcc	r0, #4
 801469a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801469e:	bf3c      	itt	cc
 80146a0:	009b      	lslcc	r3, r3, #2
 80146a2:	3002      	addcc	r0, #2
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	db05      	blt.n	80146b4 <__hi0bits+0x3c>
 80146a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80146ac:	f100 0001 	add.w	r0, r0, #1
 80146b0:	bf08      	it	eq
 80146b2:	2020      	moveq	r0, #32
 80146b4:	4770      	bx	lr

080146b6 <__lo0bits>:
 80146b6:	6803      	ldr	r3, [r0, #0]
 80146b8:	4602      	mov	r2, r0
 80146ba:	f013 0007 	ands.w	r0, r3, #7
 80146be:	d00b      	beq.n	80146d8 <__lo0bits+0x22>
 80146c0:	07d9      	lsls	r1, r3, #31
 80146c2:	d421      	bmi.n	8014708 <__lo0bits+0x52>
 80146c4:	0798      	lsls	r0, r3, #30
 80146c6:	bf49      	itett	mi
 80146c8:	085b      	lsrmi	r3, r3, #1
 80146ca:	089b      	lsrpl	r3, r3, #2
 80146cc:	2001      	movmi	r0, #1
 80146ce:	6013      	strmi	r3, [r2, #0]
 80146d0:	bf5c      	itt	pl
 80146d2:	6013      	strpl	r3, [r2, #0]
 80146d4:	2002      	movpl	r0, #2
 80146d6:	4770      	bx	lr
 80146d8:	b299      	uxth	r1, r3
 80146da:	b909      	cbnz	r1, 80146e0 <__lo0bits+0x2a>
 80146dc:	0c1b      	lsrs	r3, r3, #16
 80146de:	2010      	movs	r0, #16
 80146e0:	b2d9      	uxtb	r1, r3
 80146e2:	b909      	cbnz	r1, 80146e8 <__lo0bits+0x32>
 80146e4:	3008      	adds	r0, #8
 80146e6:	0a1b      	lsrs	r3, r3, #8
 80146e8:	0719      	lsls	r1, r3, #28
 80146ea:	bf04      	itt	eq
 80146ec:	091b      	lsreq	r3, r3, #4
 80146ee:	3004      	addeq	r0, #4
 80146f0:	0799      	lsls	r1, r3, #30
 80146f2:	bf04      	itt	eq
 80146f4:	089b      	lsreq	r3, r3, #2
 80146f6:	3002      	addeq	r0, #2
 80146f8:	07d9      	lsls	r1, r3, #31
 80146fa:	d403      	bmi.n	8014704 <__lo0bits+0x4e>
 80146fc:	085b      	lsrs	r3, r3, #1
 80146fe:	f100 0001 	add.w	r0, r0, #1
 8014702:	d003      	beq.n	801470c <__lo0bits+0x56>
 8014704:	6013      	str	r3, [r2, #0]
 8014706:	4770      	bx	lr
 8014708:	2000      	movs	r0, #0
 801470a:	4770      	bx	lr
 801470c:	2020      	movs	r0, #32
 801470e:	4770      	bx	lr

08014710 <__i2b>:
 8014710:	b510      	push	{r4, lr}
 8014712:	460c      	mov	r4, r1
 8014714:	2101      	movs	r1, #1
 8014716:	f7ff ff07 	bl	8014528 <_Balloc>
 801471a:	4602      	mov	r2, r0
 801471c:	b928      	cbnz	r0, 801472a <__i2b+0x1a>
 801471e:	4b05      	ldr	r3, [pc, #20]	@ (8014734 <__i2b+0x24>)
 8014720:	4805      	ldr	r0, [pc, #20]	@ (8014738 <__i2b+0x28>)
 8014722:	f240 1145 	movw	r1, #325	@ 0x145
 8014726:	f000 fcb5 	bl	8015094 <__assert_func>
 801472a:	2301      	movs	r3, #1
 801472c:	6144      	str	r4, [r0, #20]
 801472e:	6103      	str	r3, [r0, #16]
 8014730:	bd10      	pop	{r4, pc}
 8014732:	bf00      	nop
 8014734:	080182d0 	.word	0x080182d0
 8014738:	080182f2 	.word	0x080182f2

0801473c <__multiply>:
 801473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014740:	4617      	mov	r7, r2
 8014742:	690a      	ldr	r2, [r1, #16]
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	429a      	cmp	r2, r3
 8014748:	bfa8      	it	ge
 801474a:	463b      	movge	r3, r7
 801474c:	4689      	mov	r9, r1
 801474e:	bfa4      	itt	ge
 8014750:	460f      	movge	r7, r1
 8014752:	4699      	movge	r9, r3
 8014754:	693d      	ldr	r5, [r7, #16]
 8014756:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	6879      	ldr	r1, [r7, #4]
 801475e:	eb05 060a 	add.w	r6, r5, sl
 8014762:	42b3      	cmp	r3, r6
 8014764:	b085      	sub	sp, #20
 8014766:	bfb8      	it	lt
 8014768:	3101      	addlt	r1, #1
 801476a:	f7ff fedd 	bl	8014528 <_Balloc>
 801476e:	b930      	cbnz	r0, 801477e <__multiply+0x42>
 8014770:	4602      	mov	r2, r0
 8014772:	4b41      	ldr	r3, [pc, #260]	@ (8014878 <__multiply+0x13c>)
 8014774:	4841      	ldr	r0, [pc, #260]	@ (801487c <__multiply+0x140>)
 8014776:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801477a:	f000 fc8b 	bl	8015094 <__assert_func>
 801477e:	f100 0414 	add.w	r4, r0, #20
 8014782:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014786:	4623      	mov	r3, r4
 8014788:	2200      	movs	r2, #0
 801478a:	4573      	cmp	r3, lr
 801478c:	d320      	bcc.n	80147d0 <__multiply+0x94>
 801478e:	f107 0814 	add.w	r8, r7, #20
 8014792:	f109 0114 	add.w	r1, r9, #20
 8014796:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801479a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801479e:	9302      	str	r3, [sp, #8]
 80147a0:	1beb      	subs	r3, r5, r7
 80147a2:	3b15      	subs	r3, #21
 80147a4:	f023 0303 	bic.w	r3, r3, #3
 80147a8:	3304      	adds	r3, #4
 80147aa:	3715      	adds	r7, #21
 80147ac:	42bd      	cmp	r5, r7
 80147ae:	bf38      	it	cc
 80147b0:	2304      	movcc	r3, #4
 80147b2:	9301      	str	r3, [sp, #4]
 80147b4:	9b02      	ldr	r3, [sp, #8]
 80147b6:	9103      	str	r1, [sp, #12]
 80147b8:	428b      	cmp	r3, r1
 80147ba:	d80c      	bhi.n	80147d6 <__multiply+0x9a>
 80147bc:	2e00      	cmp	r6, #0
 80147be:	dd03      	ble.n	80147c8 <__multiply+0x8c>
 80147c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d055      	beq.n	8014874 <__multiply+0x138>
 80147c8:	6106      	str	r6, [r0, #16]
 80147ca:	b005      	add	sp, #20
 80147cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147d0:	f843 2b04 	str.w	r2, [r3], #4
 80147d4:	e7d9      	b.n	801478a <__multiply+0x4e>
 80147d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80147da:	f1ba 0f00 	cmp.w	sl, #0
 80147de:	d01f      	beq.n	8014820 <__multiply+0xe4>
 80147e0:	46c4      	mov	ip, r8
 80147e2:	46a1      	mov	r9, r4
 80147e4:	2700      	movs	r7, #0
 80147e6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80147ea:	f8d9 3000 	ldr.w	r3, [r9]
 80147ee:	fa1f fb82 	uxth.w	fp, r2
 80147f2:	b29b      	uxth	r3, r3
 80147f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80147f8:	443b      	add	r3, r7
 80147fa:	f8d9 7000 	ldr.w	r7, [r9]
 80147fe:	0c12      	lsrs	r2, r2, #16
 8014800:	0c3f      	lsrs	r7, r7, #16
 8014802:	fb0a 7202 	mla	r2, sl, r2, r7
 8014806:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801480a:	b29b      	uxth	r3, r3
 801480c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014810:	4565      	cmp	r5, ip
 8014812:	f849 3b04 	str.w	r3, [r9], #4
 8014816:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801481a:	d8e4      	bhi.n	80147e6 <__multiply+0xaa>
 801481c:	9b01      	ldr	r3, [sp, #4]
 801481e:	50e7      	str	r7, [r4, r3]
 8014820:	9b03      	ldr	r3, [sp, #12]
 8014822:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014826:	3104      	adds	r1, #4
 8014828:	f1b9 0f00 	cmp.w	r9, #0
 801482c:	d020      	beq.n	8014870 <__multiply+0x134>
 801482e:	6823      	ldr	r3, [r4, #0]
 8014830:	4647      	mov	r7, r8
 8014832:	46a4      	mov	ip, r4
 8014834:	f04f 0a00 	mov.w	sl, #0
 8014838:	f8b7 b000 	ldrh.w	fp, [r7]
 801483c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014840:	fb09 220b 	mla	r2, r9, fp, r2
 8014844:	4452      	add	r2, sl
 8014846:	b29b      	uxth	r3, r3
 8014848:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801484c:	f84c 3b04 	str.w	r3, [ip], #4
 8014850:	f857 3b04 	ldr.w	r3, [r7], #4
 8014854:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014858:	f8bc 3000 	ldrh.w	r3, [ip]
 801485c:	fb09 330a 	mla	r3, r9, sl, r3
 8014860:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014864:	42bd      	cmp	r5, r7
 8014866:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801486a:	d8e5      	bhi.n	8014838 <__multiply+0xfc>
 801486c:	9a01      	ldr	r2, [sp, #4]
 801486e:	50a3      	str	r3, [r4, r2]
 8014870:	3404      	adds	r4, #4
 8014872:	e79f      	b.n	80147b4 <__multiply+0x78>
 8014874:	3e01      	subs	r6, #1
 8014876:	e7a1      	b.n	80147bc <__multiply+0x80>
 8014878:	080182d0 	.word	0x080182d0
 801487c:	080182f2 	.word	0x080182f2

08014880 <__pow5mult>:
 8014880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014884:	4615      	mov	r5, r2
 8014886:	f012 0203 	ands.w	r2, r2, #3
 801488a:	4607      	mov	r7, r0
 801488c:	460e      	mov	r6, r1
 801488e:	d007      	beq.n	80148a0 <__pow5mult+0x20>
 8014890:	4c25      	ldr	r4, [pc, #148]	@ (8014928 <__pow5mult+0xa8>)
 8014892:	3a01      	subs	r2, #1
 8014894:	2300      	movs	r3, #0
 8014896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801489a:	f7ff fea7 	bl	80145ec <__multadd>
 801489e:	4606      	mov	r6, r0
 80148a0:	10ad      	asrs	r5, r5, #2
 80148a2:	d03d      	beq.n	8014920 <__pow5mult+0xa0>
 80148a4:	69fc      	ldr	r4, [r7, #28]
 80148a6:	b97c      	cbnz	r4, 80148c8 <__pow5mult+0x48>
 80148a8:	2010      	movs	r0, #16
 80148aa:	f7ff fcdb 	bl	8014264 <malloc>
 80148ae:	4602      	mov	r2, r0
 80148b0:	61f8      	str	r0, [r7, #28]
 80148b2:	b928      	cbnz	r0, 80148c0 <__pow5mult+0x40>
 80148b4:	4b1d      	ldr	r3, [pc, #116]	@ (801492c <__pow5mult+0xac>)
 80148b6:	481e      	ldr	r0, [pc, #120]	@ (8014930 <__pow5mult+0xb0>)
 80148b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80148bc:	f000 fbea 	bl	8015094 <__assert_func>
 80148c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80148c4:	6004      	str	r4, [r0, #0]
 80148c6:	60c4      	str	r4, [r0, #12]
 80148c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80148cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80148d0:	b94c      	cbnz	r4, 80148e6 <__pow5mult+0x66>
 80148d2:	f240 2171 	movw	r1, #625	@ 0x271
 80148d6:	4638      	mov	r0, r7
 80148d8:	f7ff ff1a 	bl	8014710 <__i2b>
 80148dc:	2300      	movs	r3, #0
 80148de:	f8c8 0008 	str.w	r0, [r8, #8]
 80148e2:	4604      	mov	r4, r0
 80148e4:	6003      	str	r3, [r0, #0]
 80148e6:	f04f 0900 	mov.w	r9, #0
 80148ea:	07eb      	lsls	r3, r5, #31
 80148ec:	d50a      	bpl.n	8014904 <__pow5mult+0x84>
 80148ee:	4631      	mov	r1, r6
 80148f0:	4622      	mov	r2, r4
 80148f2:	4638      	mov	r0, r7
 80148f4:	f7ff ff22 	bl	801473c <__multiply>
 80148f8:	4631      	mov	r1, r6
 80148fa:	4680      	mov	r8, r0
 80148fc:	4638      	mov	r0, r7
 80148fe:	f7ff fe53 	bl	80145a8 <_Bfree>
 8014902:	4646      	mov	r6, r8
 8014904:	106d      	asrs	r5, r5, #1
 8014906:	d00b      	beq.n	8014920 <__pow5mult+0xa0>
 8014908:	6820      	ldr	r0, [r4, #0]
 801490a:	b938      	cbnz	r0, 801491c <__pow5mult+0x9c>
 801490c:	4622      	mov	r2, r4
 801490e:	4621      	mov	r1, r4
 8014910:	4638      	mov	r0, r7
 8014912:	f7ff ff13 	bl	801473c <__multiply>
 8014916:	6020      	str	r0, [r4, #0]
 8014918:	f8c0 9000 	str.w	r9, [r0]
 801491c:	4604      	mov	r4, r0
 801491e:	e7e4      	b.n	80148ea <__pow5mult+0x6a>
 8014920:	4630      	mov	r0, r6
 8014922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014926:	bf00      	nop
 8014928:	08018394 	.word	0x08018394
 801492c:	08018261 	.word	0x08018261
 8014930:	080182f2 	.word	0x080182f2

08014934 <__lshift>:
 8014934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014938:	460c      	mov	r4, r1
 801493a:	6849      	ldr	r1, [r1, #4]
 801493c:	6923      	ldr	r3, [r4, #16]
 801493e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014942:	68a3      	ldr	r3, [r4, #8]
 8014944:	4607      	mov	r7, r0
 8014946:	4691      	mov	r9, r2
 8014948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801494c:	f108 0601 	add.w	r6, r8, #1
 8014950:	42b3      	cmp	r3, r6
 8014952:	db0b      	blt.n	801496c <__lshift+0x38>
 8014954:	4638      	mov	r0, r7
 8014956:	f7ff fde7 	bl	8014528 <_Balloc>
 801495a:	4605      	mov	r5, r0
 801495c:	b948      	cbnz	r0, 8014972 <__lshift+0x3e>
 801495e:	4602      	mov	r2, r0
 8014960:	4b28      	ldr	r3, [pc, #160]	@ (8014a04 <__lshift+0xd0>)
 8014962:	4829      	ldr	r0, [pc, #164]	@ (8014a08 <__lshift+0xd4>)
 8014964:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014968:	f000 fb94 	bl	8015094 <__assert_func>
 801496c:	3101      	adds	r1, #1
 801496e:	005b      	lsls	r3, r3, #1
 8014970:	e7ee      	b.n	8014950 <__lshift+0x1c>
 8014972:	2300      	movs	r3, #0
 8014974:	f100 0114 	add.w	r1, r0, #20
 8014978:	f100 0210 	add.w	r2, r0, #16
 801497c:	4618      	mov	r0, r3
 801497e:	4553      	cmp	r3, sl
 8014980:	db33      	blt.n	80149ea <__lshift+0xb6>
 8014982:	6920      	ldr	r0, [r4, #16]
 8014984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014988:	f104 0314 	add.w	r3, r4, #20
 801498c:	f019 091f 	ands.w	r9, r9, #31
 8014990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014994:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014998:	d02b      	beq.n	80149f2 <__lshift+0xbe>
 801499a:	f1c9 0e20 	rsb	lr, r9, #32
 801499e:	468a      	mov	sl, r1
 80149a0:	2200      	movs	r2, #0
 80149a2:	6818      	ldr	r0, [r3, #0]
 80149a4:	fa00 f009 	lsl.w	r0, r0, r9
 80149a8:	4310      	orrs	r0, r2
 80149aa:	f84a 0b04 	str.w	r0, [sl], #4
 80149ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80149b2:	459c      	cmp	ip, r3
 80149b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80149b8:	d8f3      	bhi.n	80149a2 <__lshift+0x6e>
 80149ba:	ebac 0304 	sub.w	r3, ip, r4
 80149be:	3b15      	subs	r3, #21
 80149c0:	f023 0303 	bic.w	r3, r3, #3
 80149c4:	3304      	adds	r3, #4
 80149c6:	f104 0015 	add.w	r0, r4, #21
 80149ca:	4560      	cmp	r0, ip
 80149cc:	bf88      	it	hi
 80149ce:	2304      	movhi	r3, #4
 80149d0:	50ca      	str	r2, [r1, r3]
 80149d2:	b10a      	cbz	r2, 80149d8 <__lshift+0xa4>
 80149d4:	f108 0602 	add.w	r6, r8, #2
 80149d8:	3e01      	subs	r6, #1
 80149da:	4638      	mov	r0, r7
 80149dc:	612e      	str	r6, [r5, #16]
 80149de:	4621      	mov	r1, r4
 80149e0:	f7ff fde2 	bl	80145a8 <_Bfree>
 80149e4:	4628      	mov	r0, r5
 80149e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80149ee:	3301      	adds	r3, #1
 80149f0:	e7c5      	b.n	801497e <__lshift+0x4a>
 80149f2:	3904      	subs	r1, #4
 80149f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80149f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80149fc:	459c      	cmp	ip, r3
 80149fe:	d8f9      	bhi.n	80149f4 <__lshift+0xc0>
 8014a00:	e7ea      	b.n	80149d8 <__lshift+0xa4>
 8014a02:	bf00      	nop
 8014a04:	080182d0 	.word	0x080182d0
 8014a08:	080182f2 	.word	0x080182f2

08014a0c <__mcmp>:
 8014a0c:	690a      	ldr	r2, [r1, #16]
 8014a0e:	4603      	mov	r3, r0
 8014a10:	6900      	ldr	r0, [r0, #16]
 8014a12:	1a80      	subs	r0, r0, r2
 8014a14:	b530      	push	{r4, r5, lr}
 8014a16:	d10e      	bne.n	8014a36 <__mcmp+0x2a>
 8014a18:	3314      	adds	r3, #20
 8014a1a:	3114      	adds	r1, #20
 8014a1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014a20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014a24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014a28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014a2c:	4295      	cmp	r5, r2
 8014a2e:	d003      	beq.n	8014a38 <__mcmp+0x2c>
 8014a30:	d205      	bcs.n	8014a3e <__mcmp+0x32>
 8014a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a36:	bd30      	pop	{r4, r5, pc}
 8014a38:	42a3      	cmp	r3, r4
 8014a3a:	d3f3      	bcc.n	8014a24 <__mcmp+0x18>
 8014a3c:	e7fb      	b.n	8014a36 <__mcmp+0x2a>
 8014a3e:	2001      	movs	r0, #1
 8014a40:	e7f9      	b.n	8014a36 <__mcmp+0x2a>
	...

08014a44 <__mdiff>:
 8014a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a48:	4689      	mov	r9, r1
 8014a4a:	4606      	mov	r6, r0
 8014a4c:	4611      	mov	r1, r2
 8014a4e:	4648      	mov	r0, r9
 8014a50:	4614      	mov	r4, r2
 8014a52:	f7ff ffdb 	bl	8014a0c <__mcmp>
 8014a56:	1e05      	subs	r5, r0, #0
 8014a58:	d112      	bne.n	8014a80 <__mdiff+0x3c>
 8014a5a:	4629      	mov	r1, r5
 8014a5c:	4630      	mov	r0, r6
 8014a5e:	f7ff fd63 	bl	8014528 <_Balloc>
 8014a62:	4602      	mov	r2, r0
 8014a64:	b928      	cbnz	r0, 8014a72 <__mdiff+0x2e>
 8014a66:	4b3f      	ldr	r3, [pc, #252]	@ (8014b64 <__mdiff+0x120>)
 8014a68:	f240 2137 	movw	r1, #567	@ 0x237
 8014a6c:	483e      	ldr	r0, [pc, #248]	@ (8014b68 <__mdiff+0x124>)
 8014a6e:	f000 fb11 	bl	8015094 <__assert_func>
 8014a72:	2301      	movs	r3, #1
 8014a74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014a78:	4610      	mov	r0, r2
 8014a7a:	b003      	add	sp, #12
 8014a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a80:	bfbc      	itt	lt
 8014a82:	464b      	movlt	r3, r9
 8014a84:	46a1      	movlt	r9, r4
 8014a86:	4630      	mov	r0, r6
 8014a88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014a8c:	bfba      	itte	lt
 8014a8e:	461c      	movlt	r4, r3
 8014a90:	2501      	movlt	r5, #1
 8014a92:	2500      	movge	r5, #0
 8014a94:	f7ff fd48 	bl	8014528 <_Balloc>
 8014a98:	4602      	mov	r2, r0
 8014a9a:	b918      	cbnz	r0, 8014aa4 <__mdiff+0x60>
 8014a9c:	4b31      	ldr	r3, [pc, #196]	@ (8014b64 <__mdiff+0x120>)
 8014a9e:	f240 2145 	movw	r1, #581	@ 0x245
 8014aa2:	e7e3      	b.n	8014a6c <__mdiff+0x28>
 8014aa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014aa8:	6926      	ldr	r6, [r4, #16]
 8014aaa:	60c5      	str	r5, [r0, #12]
 8014aac:	f109 0310 	add.w	r3, r9, #16
 8014ab0:	f109 0514 	add.w	r5, r9, #20
 8014ab4:	f104 0e14 	add.w	lr, r4, #20
 8014ab8:	f100 0b14 	add.w	fp, r0, #20
 8014abc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014ac0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014ac4:	9301      	str	r3, [sp, #4]
 8014ac6:	46d9      	mov	r9, fp
 8014ac8:	f04f 0c00 	mov.w	ip, #0
 8014acc:	9b01      	ldr	r3, [sp, #4]
 8014ace:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014ad2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014ad6:	9301      	str	r3, [sp, #4]
 8014ad8:	fa1f f38a 	uxth.w	r3, sl
 8014adc:	4619      	mov	r1, r3
 8014ade:	b283      	uxth	r3, r0
 8014ae0:	1acb      	subs	r3, r1, r3
 8014ae2:	0c00      	lsrs	r0, r0, #16
 8014ae4:	4463      	add	r3, ip
 8014ae6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014aea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014af4:	4576      	cmp	r6, lr
 8014af6:	f849 3b04 	str.w	r3, [r9], #4
 8014afa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014afe:	d8e5      	bhi.n	8014acc <__mdiff+0x88>
 8014b00:	1b33      	subs	r3, r6, r4
 8014b02:	3b15      	subs	r3, #21
 8014b04:	f023 0303 	bic.w	r3, r3, #3
 8014b08:	3415      	adds	r4, #21
 8014b0a:	3304      	adds	r3, #4
 8014b0c:	42a6      	cmp	r6, r4
 8014b0e:	bf38      	it	cc
 8014b10:	2304      	movcc	r3, #4
 8014b12:	441d      	add	r5, r3
 8014b14:	445b      	add	r3, fp
 8014b16:	461e      	mov	r6, r3
 8014b18:	462c      	mov	r4, r5
 8014b1a:	4544      	cmp	r4, r8
 8014b1c:	d30e      	bcc.n	8014b3c <__mdiff+0xf8>
 8014b1e:	f108 0103 	add.w	r1, r8, #3
 8014b22:	1b49      	subs	r1, r1, r5
 8014b24:	f021 0103 	bic.w	r1, r1, #3
 8014b28:	3d03      	subs	r5, #3
 8014b2a:	45a8      	cmp	r8, r5
 8014b2c:	bf38      	it	cc
 8014b2e:	2100      	movcc	r1, #0
 8014b30:	440b      	add	r3, r1
 8014b32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014b36:	b191      	cbz	r1, 8014b5e <__mdiff+0x11a>
 8014b38:	6117      	str	r7, [r2, #16]
 8014b3a:	e79d      	b.n	8014a78 <__mdiff+0x34>
 8014b3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014b40:	46e6      	mov	lr, ip
 8014b42:	0c08      	lsrs	r0, r1, #16
 8014b44:	fa1c fc81 	uxtah	ip, ip, r1
 8014b48:	4471      	add	r1, lr
 8014b4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014b4e:	b289      	uxth	r1, r1
 8014b50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014b54:	f846 1b04 	str.w	r1, [r6], #4
 8014b58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014b5c:	e7dd      	b.n	8014b1a <__mdiff+0xd6>
 8014b5e:	3f01      	subs	r7, #1
 8014b60:	e7e7      	b.n	8014b32 <__mdiff+0xee>
 8014b62:	bf00      	nop
 8014b64:	080182d0 	.word	0x080182d0
 8014b68:	080182f2 	.word	0x080182f2

08014b6c <__d2b>:
 8014b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014b70:	460f      	mov	r7, r1
 8014b72:	2101      	movs	r1, #1
 8014b74:	ec59 8b10 	vmov	r8, r9, d0
 8014b78:	4616      	mov	r6, r2
 8014b7a:	f7ff fcd5 	bl	8014528 <_Balloc>
 8014b7e:	4604      	mov	r4, r0
 8014b80:	b930      	cbnz	r0, 8014b90 <__d2b+0x24>
 8014b82:	4602      	mov	r2, r0
 8014b84:	4b23      	ldr	r3, [pc, #140]	@ (8014c14 <__d2b+0xa8>)
 8014b86:	4824      	ldr	r0, [pc, #144]	@ (8014c18 <__d2b+0xac>)
 8014b88:	f240 310f 	movw	r1, #783	@ 0x30f
 8014b8c:	f000 fa82 	bl	8015094 <__assert_func>
 8014b90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014b94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014b98:	b10d      	cbz	r5, 8014b9e <__d2b+0x32>
 8014b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014b9e:	9301      	str	r3, [sp, #4]
 8014ba0:	f1b8 0300 	subs.w	r3, r8, #0
 8014ba4:	d023      	beq.n	8014bee <__d2b+0x82>
 8014ba6:	4668      	mov	r0, sp
 8014ba8:	9300      	str	r3, [sp, #0]
 8014baa:	f7ff fd84 	bl	80146b6 <__lo0bits>
 8014bae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014bb2:	b1d0      	cbz	r0, 8014bea <__d2b+0x7e>
 8014bb4:	f1c0 0320 	rsb	r3, r0, #32
 8014bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8014bbc:	430b      	orrs	r3, r1
 8014bbe:	40c2      	lsrs	r2, r0
 8014bc0:	6163      	str	r3, [r4, #20]
 8014bc2:	9201      	str	r2, [sp, #4]
 8014bc4:	9b01      	ldr	r3, [sp, #4]
 8014bc6:	61a3      	str	r3, [r4, #24]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	bf0c      	ite	eq
 8014bcc:	2201      	moveq	r2, #1
 8014bce:	2202      	movne	r2, #2
 8014bd0:	6122      	str	r2, [r4, #16]
 8014bd2:	b1a5      	cbz	r5, 8014bfe <__d2b+0x92>
 8014bd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014bd8:	4405      	add	r5, r0
 8014bda:	603d      	str	r5, [r7, #0]
 8014bdc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014be0:	6030      	str	r0, [r6, #0]
 8014be2:	4620      	mov	r0, r4
 8014be4:	b003      	add	sp, #12
 8014be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bea:	6161      	str	r1, [r4, #20]
 8014bec:	e7ea      	b.n	8014bc4 <__d2b+0x58>
 8014bee:	a801      	add	r0, sp, #4
 8014bf0:	f7ff fd61 	bl	80146b6 <__lo0bits>
 8014bf4:	9b01      	ldr	r3, [sp, #4]
 8014bf6:	6163      	str	r3, [r4, #20]
 8014bf8:	3020      	adds	r0, #32
 8014bfa:	2201      	movs	r2, #1
 8014bfc:	e7e8      	b.n	8014bd0 <__d2b+0x64>
 8014bfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014c02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014c06:	6038      	str	r0, [r7, #0]
 8014c08:	6918      	ldr	r0, [r3, #16]
 8014c0a:	f7ff fd35 	bl	8014678 <__hi0bits>
 8014c0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014c12:	e7e5      	b.n	8014be0 <__d2b+0x74>
 8014c14:	080182d0 	.word	0x080182d0
 8014c18:	080182f2 	.word	0x080182f2

08014c1c <__sread>:
 8014c1c:	b510      	push	{r4, lr}
 8014c1e:	460c      	mov	r4, r1
 8014c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c24:	f000 f9d2 	bl	8014fcc <_read_r>
 8014c28:	2800      	cmp	r0, #0
 8014c2a:	bfab      	itete	ge
 8014c2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8014c30:	181b      	addge	r3, r3, r0
 8014c32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014c36:	bfac      	ite	ge
 8014c38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014c3a:	81a3      	strhlt	r3, [r4, #12]
 8014c3c:	bd10      	pop	{r4, pc}

08014c3e <__swrite>:
 8014c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c42:	461f      	mov	r7, r3
 8014c44:	898b      	ldrh	r3, [r1, #12]
 8014c46:	05db      	lsls	r3, r3, #23
 8014c48:	4605      	mov	r5, r0
 8014c4a:	460c      	mov	r4, r1
 8014c4c:	4616      	mov	r6, r2
 8014c4e:	d505      	bpl.n	8014c5c <__swrite+0x1e>
 8014c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c54:	2302      	movs	r3, #2
 8014c56:	2200      	movs	r2, #0
 8014c58:	f000 f9a6 	bl	8014fa8 <_lseek_r>
 8014c5c:	89a3      	ldrh	r3, [r4, #12]
 8014c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014c66:	81a3      	strh	r3, [r4, #12]
 8014c68:	4632      	mov	r2, r6
 8014c6a:	463b      	mov	r3, r7
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c72:	f000 b9cd 	b.w	8015010 <_write_r>

08014c76 <__sseek>:
 8014c76:	b510      	push	{r4, lr}
 8014c78:	460c      	mov	r4, r1
 8014c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c7e:	f000 f993 	bl	8014fa8 <_lseek_r>
 8014c82:	1c43      	adds	r3, r0, #1
 8014c84:	89a3      	ldrh	r3, [r4, #12]
 8014c86:	bf15      	itete	ne
 8014c88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014c8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014c8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014c92:	81a3      	strheq	r3, [r4, #12]
 8014c94:	bf18      	it	ne
 8014c96:	81a3      	strhne	r3, [r4, #12]
 8014c98:	bd10      	pop	{r4, pc}

08014c9a <__sclose>:
 8014c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c9e:	f000 b9c9 	b.w	8015034 <_close_r>

08014ca2 <_realloc_r>:
 8014ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ca6:	4607      	mov	r7, r0
 8014ca8:	4614      	mov	r4, r2
 8014caa:	460d      	mov	r5, r1
 8014cac:	b921      	cbnz	r1, 8014cb8 <_realloc_r+0x16>
 8014cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cb2:	4611      	mov	r1, r2
 8014cb4:	f7ff bb00 	b.w	80142b8 <_malloc_r>
 8014cb8:	b92a      	cbnz	r2, 8014cc6 <_realloc_r+0x24>
 8014cba:	f000 fa1d 	bl	80150f8 <_free_r>
 8014cbe:	4625      	mov	r5, r4
 8014cc0:	4628      	mov	r0, r5
 8014cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cc6:	f000 fa73 	bl	80151b0 <_malloc_usable_size_r>
 8014cca:	4284      	cmp	r4, r0
 8014ccc:	4606      	mov	r6, r0
 8014cce:	d802      	bhi.n	8014cd6 <_realloc_r+0x34>
 8014cd0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014cd4:	d8f4      	bhi.n	8014cc0 <_realloc_r+0x1e>
 8014cd6:	4621      	mov	r1, r4
 8014cd8:	4638      	mov	r0, r7
 8014cda:	f7ff faed 	bl	80142b8 <_malloc_r>
 8014cde:	4680      	mov	r8, r0
 8014ce0:	b908      	cbnz	r0, 8014ce6 <_realloc_r+0x44>
 8014ce2:	4645      	mov	r5, r8
 8014ce4:	e7ec      	b.n	8014cc0 <_realloc_r+0x1e>
 8014ce6:	42b4      	cmp	r4, r6
 8014ce8:	4622      	mov	r2, r4
 8014cea:	4629      	mov	r1, r5
 8014cec:	bf28      	it	cs
 8014cee:	4632      	movcs	r2, r6
 8014cf0:	f000 f9c2 	bl	8015078 <memcpy>
 8014cf4:	4629      	mov	r1, r5
 8014cf6:	4638      	mov	r0, r7
 8014cf8:	f000 f9fe 	bl	80150f8 <_free_r>
 8014cfc:	e7f1      	b.n	8014ce2 <_realloc_r+0x40>

08014cfe <__swbuf_r>:
 8014cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d00:	460e      	mov	r6, r1
 8014d02:	4614      	mov	r4, r2
 8014d04:	4605      	mov	r5, r0
 8014d06:	b118      	cbz	r0, 8014d10 <__swbuf_r+0x12>
 8014d08:	6a03      	ldr	r3, [r0, #32]
 8014d0a:	b90b      	cbnz	r3, 8014d10 <__swbuf_r+0x12>
 8014d0c:	f7fe f8ce 	bl	8012eac <__sinit>
 8014d10:	69a3      	ldr	r3, [r4, #24]
 8014d12:	60a3      	str	r3, [r4, #8]
 8014d14:	89a3      	ldrh	r3, [r4, #12]
 8014d16:	071a      	lsls	r2, r3, #28
 8014d18:	d501      	bpl.n	8014d1e <__swbuf_r+0x20>
 8014d1a:	6923      	ldr	r3, [r4, #16]
 8014d1c:	b943      	cbnz	r3, 8014d30 <__swbuf_r+0x32>
 8014d1e:	4621      	mov	r1, r4
 8014d20:	4628      	mov	r0, r5
 8014d22:	f000 f82b 	bl	8014d7c <__swsetup_r>
 8014d26:	b118      	cbz	r0, 8014d30 <__swbuf_r+0x32>
 8014d28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014d2c:	4638      	mov	r0, r7
 8014d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d30:	6823      	ldr	r3, [r4, #0]
 8014d32:	6922      	ldr	r2, [r4, #16]
 8014d34:	1a98      	subs	r0, r3, r2
 8014d36:	6963      	ldr	r3, [r4, #20]
 8014d38:	b2f6      	uxtb	r6, r6
 8014d3a:	4283      	cmp	r3, r0
 8014d3c:	4637      	mov	r7, r6
 8014d3e:	dc05      	bgt.n	8014d4c <__swbuf_r+0x4e>
 8014d40:	4621      	mov	r1, r4
 8014d42:	4628      	mov	r0, r5
 8014d44:	f7ff fbbc 	bl	80144c0 <_fflush_r>
 8014d48:	2800      	cmp	r0, #0
 8014d4a:	d1ed      	bne.n	8014d28 <__swbuf_r+0x2a>
 8014d4c:	68a3      	ldr	r3, [r4, #8]
 8014d4e:	3b01      	subs	r3, #1
 8014d50:	60a3      	str	r3, [r4, #8]
 8014d52:	6823      	ldr	r3, [r4, #0]
 8014d54:	1c5a      	adds	r2, r3, #1
 8014d56:	6022      	str	r2, [r4, #0]
 8014d58:	701e      	strb	r6, [r3, #0]
 8014d5a:	6962      	ldr	r2, [r4, #20]
 8014d5c:	1c43      	adds	r3, r0, #1
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d004      	beq.n	8014d6c <__swbuf_r+0x6e>
 8014d62:	89a3      	ldrh	r3, [r4, #12]
 8014d64:	07db      	lsls	r3, r3, #31
 8014d66:	d5e1      	bpl.n	8014d2c <__swbuf_r+0x2e>
 8014d68:	2e0a      	cmp	r6, #10
 8014d6a:	d1df      	bne.n	8014d2c <__swbuf_r+0x2e>
 8014d6c:	4621      	mov	r1, r4
 8014d6e:	4628      	mov	r0, r5
 8014d70:	f7ff fba6 	bl	80144c0 <_fflush_r>
 8014d74:	2800      	cmp	r0, #0
 8014d76:	d0d9      	beq.n	8014d2c <__swbuf_r+0x2e>
 8014d78:	e7d6      	b.n	8014d28 <__swbuf_r+0x2a>
	...

08014d7c <__swsetup_r>:
 8014d7c:	b538      	push	{r3, r4, r5, lr}
 8014d7e:	4b29      	ldr	r3, [pc, #164]	@ (8014e24 <__swsetup_r+0xa8>)
 8014d80:	4605      	mov	r5, r0
 8014d82:	6818      	ldr	r0, [r3, #0]
 8014d84:	460c      	mov	r4, r1
 8014d86:	b118      	cbz	r0, 8014d90 <__swsetup_r+0x14>
 8014d88:	6a03      	ldr	r3, [r0, #32]
 8014d8a:	b90b      	cbnz	r3, 8014d90 <__swsetup_r+0x14>
 8014d8c:	f7fe f88e 	bl	8012eac <__sinit>
 8014d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d94:	0719      	lsls	r1, r3, #28
 8014d96:	d422      	bmi.n	8014dde <__swsetup_r+0x62>
 8014d98:	06da      	lsls	r2, r3, #27
 8014d9a:	d407      	bmi.n	8014dac <__swsetup_r+0x30>
 8014d9c:	2209      	movs	r2, #9
 8014d9e:	602a      	str	r2, [r5, #0]
 8014da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014da4:	81a3      	strh	r3, [r4, #12]
 8014da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014daa:	e033      	b.n	8014e14 <__swsetup_r+0x98>
 8014dac:	0758      	lsls	r0, r3, #29
 8014dae:	d512      	bpl.n	8014dd6 <__swsetup_r+0x5a>
 8014db0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014db2:	b141      	cbz	r1, 8014dc6 <__swsetup_r+0x4a>
 8014db4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014db8:	4299      	cmp	r1, r3
 8014dba:	d002      	beq.n	8014dc2 <__swsetup_r+0x46>
 8014dbc:	4628      	mov	r0, r5
 8014dbe:	f000 f99b 	bl	80150f8 <_free_r>
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8014dc6:	89a3      	ldrh	r3, [r4, #12]
 8014dc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014dcc:	81a3      	strh	r3, [r4, #12]
 8014dce:	2300      	movs	r3, #0
 8014dd0:	6063      	str	r3, [r4, #4]
 8014dd2:	6923      	ldr	r3, [r4, #16]
 8014dd4:	6023      	str	r3, [r4, #0]
 8014dd6:	89a3      	ldrh	r3, [r4, #12]
 8014dd8:	f043 0308 	orr.w	r3, r3, #8
 8014ddc:	81a3      	strh	r3, [r4, #12]
 8014dde:	6923      	ldr	r3, [r4, #16]
 8014de0:	b94b      	cbnz	r3, 8014df6 <__swsetup_r+0x7a>
 8014de2:	89a3      	ldrh	r3, [r4, #12]
 8014de4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014dec:	d003      	beq.n	8014df6 <__swsetup_r+0x7a>
 8014dee:	4621      	mov	r1, r4
 8014df0:	4628      	mov	r0, r5
 8014df2:	f000 f83f 	bl	8014e74 <__smakebuf_r>
 8014df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dfa:	f013 0201 	ands.w	r2, r3, #1
 8014dfe:	d00a      	beq.n	8014e16 <__swsetup_r+0x9a>
 8014e00:	2200      	movs	r2, #0
 8014e02:	60a2      	str	r2, [r4, #8]
 8014e04:	6962      	ldr	r2, [r4, #20]
 8014e06:	4252      	negs	r2, r2
 8014e08:	61a2      	str	r2, [r4, #24]
 8014e0a:	6922      	ldr	r2, [r4, #16]
 8014e0c:	b942      	cbnz	r2, 8014e20 <__swsetup_r+0xa4>
 8014e0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014e12:	d1c5      	bne.n	8014da0 <__swsetup_r+0x24>
 8014e14:	bd38      	pop	{r3, r4, r5, pc}
 8014e16:	0799      	lsls	r1, r3, #30
 8014e18:	bf58      	it	pl
 8014e1a:	6962      	ldrpl	r2, [r4, #20]
 8014e1c:	60a2      	str	r2, [r4, #8]
 8014e1e:	e7f4      	b.n	8014e0a <__swsetup_r+0x8e>
 8014e20:	2000      	movs	r0, #0
 8014e22:	e7f7      	b.n	8014e14 <__swsetup_r+0x98>
 8014e24:	2000009c 	.word	0x2000009c

08014e28 <__swhatbuf_r>:
 8014e28:	b570      	push	{r4, r5, r6, lr}
 8014e2a:	460c      	mov	r4, r1
 8014e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e30:	2900      	cmp	r1, #0
 8014e32:	b096      	sub	sp, #88	@ 0x58
 8014e34:	4615      	mov	r5, r2
 8014e36:	461e      	mov	r6, r3
 8014e38:	da0d      	bge.n	8014e56 <__swhatbuf_r+0x2e>
 8014e3a:	89a3      	ldrh	r3, [r4, #12]
 8014e3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014e40:	f04f 0100 	mov.w	r1, #0
 8014e44:	bf14      	ite	ne
 8014e46:	2340      	movne	r3, #64	@ 0x40
 8014e48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	6031      	str	r1, [r6, #0]
 8014e50:	602b      	str	r3, [r5, #0]
 8014e52:	b016      	add	sp, #88	@ 0x58
 8014e54:	bd70      	pop	{r4, r5, r6, pc}
 8014e56:	466a      	mov	r2, sp
 8014e58:	f000 f8fc 	bl	8015054 <_fstat_r>
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	dbec      	blt.n	8014e3a <__swhatbuf_r+0x12>
 8014e60:	9901      	ldr	r1, [sp, #4]
 8014e62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014e66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014e6a:	4259      	negs	r1, r3
 8014e6c:	4159      	adcs	r1, r3
 8014e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e72:	e7eb      	b.n	8014e4c <__swhatbuf_r+0x24>

08014e74 <__smakebuf_r>:
 8014e74:	898b      	ldrh	r3, [r1, #12]
 8014e76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e78:	079d      	lsls	r5, r3, #30
 8014e7a:	4606      	mov	r6, r0
 8014e7c:	460c      	mov	r4, r1
 8014e7e:	d507      	bpl.n	8014e90 <__smakebuf_r+0x1c>
 8014e80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014e84:	6023      	str	r3, [r4, #0]
 8014e86:	6123      	str	r3, [r4, #16]
 8014e88:	2301      	movs	r3, #1
 8014e8a:	6163      	str	r3, [r4, #20]
 8014e8c:	b003      	add	sp, #12
 8014e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e90:	ab01      	add	r3, sp, #4
 8014e92:	466a      	mov	r2, sp
 8014e94:	f7ff ffc8 	bl	8014e28 <__swhatbuf_r>
 8014e98:	9f00      	ldr	r7, [sp, #0]
 8014e9a:	4605      	mov	r5, r0
 8014e9c:	4639      	mov	r1, r7
 8014e9e:	4630      	mov	r0, r6
 8014ea0:	f7ff fa0a 	bl	80142b8 <_malloc_r>
 8014ea4:	b948      	cbnz	r0, 8014eba <__smakebuf_r+0x46>
 8014ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eaa:	059a      	lsls	r2, r3, #22
 8014eac:	d4ee      	bmi.n	8014e8c <__smakebuf_r+0x18>
 8014eae:	f023 0303 	bic.w	r3, r3, #3
 8014eb2:	f043 0302 	orr.w	r3, r3, #2
 8014eb6:	81a3      	strh	r3, [r4, #12]
 8014eb8:	e7e2      	b.n	8014e80 <__smakebuf_r+0xc>
 8014eba:	89a3      	ldrh	r3, [r4, #12]
 8014ebc:	6020      	str	r0, [r4, #0]
 8014ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014ec2:	81a3      	strh	r3, [r4, #12]
 8014ec4:	9b01      	ldr	r3, [sp, #4]
 8014ec6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014eca:	b15b      	cbz	r3, 8014ee4 <__smakebuf_r+0x70>
 8014ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	f000 f859 	bl	8014f88 <_isatty_r>
 8014ed6:	b128      	cbz	r0, 8014ee4 <__smakebuf_r+0x70>
 8014ed8:	89a3      	ldrh	r3, [r4, #12]
 8014eda:	f023 0303 	bic.w	r3, r3, #3
 8014ede:	f043 0301 	orr.w	r3, r3, #1
 8014ee2:	81a3      	strh	r3, [r4, #12]
 8014ee4:	89a3      	ldrh	r3, [r4, #12]
 8014ee6:	431d      	orrs	r5, r3
 8014ee8:	81a5      	strh	r5, [r4, #12]
 8014eea:	e7cf      	b.n	8014e8c <__smakebuf_r+0x18>

08014eec <_putc_r>:
 8014eec:	b570      	push	{r4, r5, r6, lr}
 8014eee:	460d      	mov	r5, r1
 8014ef0:	4614      	mov	r4, r2
 8014ef2:	4606      	mov	r6, r0
 8014ef4:	b118      	cbz	r0, 8014efe <_putc_r+0x12>
 8014ef6:	6a03      	ldr	r3, [r0, #32]
 8014ef8:	b90b      	cbnz	r3, 8014efe <_putc_r+0x12>
 8014efa:	f7fd ffd7 	bl	8012eac <__sinit>
 8014efe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f00:	07d8      	lsls	r0, r3, #31
 8014f02:	d405      	bmi.n	8014f10 <_putc_r+0x24>
 8014f04:	89a3      	ldrh	r3, [r4, #12]
 8014f06:	0599      	lsls	r1, r3, #22
 8014f08:	d402      	bmi.n	8014f10 <_putc_r+0x24>
 8014f0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f0c:	f7fe f8af 	bl	801306e <__retarget_lock_acquire_recursive>
 8014f10:	68a3      	ldr	r3, [r4, #8]
 8014f12:	3b01      	subs	r3, #1
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	60a3      	str	r3, [r4, #8]
 8014f18:	da05      	bge.n	8014f26 <_putc_r+0x3a>
 8014f1a:	69a2      	ldr	r2, [r4, #24]
 8014f1c:	4293      	cmp	r3, r2
 8014f1e:	db12      	blt.n	8014f46 <_putc_r+0x5a>
 8014f20:	b2eb      	uxtb	r3, r5
 8014f22:	2b0a      	cmp	r3, #10
 8014f24:	d00f      	beq.n	8014f46 <_putc_r+0x5a>
 8014f26:	6823      	ldr	r3, [r4, #0]
 8014f28:	1c5a      	adds	r2, r3, #1
 8014f2a:	6022      	str	r2, [r4, #0]
 8014f2c:	701d      	strb	r5, [r3, #0]
 8014f2e:	b2ed      	uxtb	r5, r5
 8014f30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f32:	07da      	lsls	r2, r3, #31
 8014f34:	d405      	bmi.n	8014f42 <_putc_r+0x56>
 8014f36:	89a3      	ldrh	r3, [r4, #12]
 8014f38:	059b      	lsls	r3, r3, #22
 8014f3a:	d402      	bmi.n	8014f42 <_putc_r+0x56>
 8014f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f3e:	f7fe f897 	bl	8013070 <__retarget_lock_release_recursive>
 8014f42:	4628      	mov	r0, r5
 8014f44:	bd70      	pop	{r4, r5, r6, pc}
 8014f46:	4629      	mov	r1, r5
 8014f48:	4622      	mov	r2, r4
 8014f4a:	4630      	mov	r0, r6
 8014f4c:	f7ff fed7 	bl	8014cfe <__swbuf_r>
 8014f50:	4605      	mov	r5, r0
 8014f52:	e7ed      	b.n	8014f30 <_putc_r+0x44>

08014f54 <memmove>:
 8014f54:	4288      	cmp	r0, r1
 8014f56:	b510      	push	{r4, lr}
 8014f58:	eb01 0402 	add.w	r4, r1, r2
 8014f5c:	d902      	bls.n	8014f64 <memmove+0x10>
 8014f5e:	4284      	cmp	r4, r0
 8014f60:	4623      	mov	r3, r4
 8014f62:	d807      	bhi.n	8014f74 <memmove+0x20>
 8014f64:	1e43      	subs	r3, r0, #1
 8014f66:	42a1      	cmp	r1, r4
 8014f68:	d008      	beq.n	8014f7c <memmove+0x28>
 8014f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014f72:	e7f8      	b.n	8014f66 <memmove+0x12>
 8014f74:	4402      	add	r2, r0
 8014f76:	4601      	mov	r1, r0
 8014f78:	428a      	cmp	r2, r1
 8014f7a:	d100      	bne.n	8014f7e <memmove+0x2a>
 8014f7c:	bd10      	pop	{r4, pc}
 8014f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014f86:	e7f7      	b.n	8014f78 <memmove+0x24>

08014f88 <_isatty_r>:
 8014f88:	b538      	push	{r3, r4, r5, lr}
 8014f8a:	4d06      	ldr	r5, [pc, #24]	@ (8014fa4 <_isatty_r+0x1c>)
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	4604      	mov	r4, r0
 8014f90:	4608      	mov	r0, r1
 8014f92:	602b      	str	r3, [r5, #0]
 8014f94:	f7ee f96a 	bl	800326c <_isatty>
 8014f98:	1c43      	adds	r3, r0, #1
 8014f9a:	d102      	bne.n	8014fa2 <_isatty_r+0x1a>
 8014f9c:	682b      	ldr	r3, [r5, #0]
 8014f9e:	b103      	cbz	r3, 8014fa2 <_isatty_r+0x1a>
 8014fa0:	6023      	str	r3, [r4, #0]
 8014fa2:	bd38      	pop	{r3, r4, r5, pc}
 8014fa4:	20000820 	.word	0x20000820

08014fa8 <_lseek_r>:
 8014fa8:	b538      	push	{r3, r4, r5, lr}
 8014faa:	4d07      	ldr	r5, [pc, #28]	@ (8014fc8 <_lseek_r+0x20>)
 8014fac:	4604      	mov	r4, r0
 8014fae:	4608      	mov	r0, r1
 8014fb0:	4611      	mov	r1, r2
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	602a      	str	r2, [r5, #0]
 8014fb6:	461a      	mov	r2, r3
 8014fb8:	f7ee f963 	bl	8003282 <_lseek>
 8014fbc:	1c43      	adds	r3, r0, #1
 8014fbe:	d102      	bne.n	8014fc6 <_lseek_r+0x1e>
 8014fc0:	682b      	ldr	r3, [r5, #0]
 8014fc2:	b103      	cbz	r3, 8014fc6 <_lseek_r+0x1e>
 8014fc4:	6023      	str	r3, [r4, #0]
 8014fc6:	bd38      	pop	{r3, r4, r5, pc}
 8014fc8:	20000820 	.word	0x20000820

08014fcc <_read_r>:
 8014fcc:	b538      	push	{r3, r4, r5, lr}
 8014fce:	4d07      	ldr	r5, [pc, #28]	@ (8014fec <_read_r+0x20>)
 8014fd0:	4604      	mov	r4, r0
 8014fd2:	4608      	mov	r0, r1
 8014fd4:	4611      	mov	r1, r2
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	602a      	str	r2, [r5, #0]
 8014fda:	461a      	mov	r2, r3
 8014fdc:	f7ee f90d 	bl	80031fa <_read>
 8014fe0:	1c43      	adds	r3, r0, #1
 8014fe2:	d102      	bne.n	8014fea <_read_r+0x1e>
 8014fe4:	682b      	ldr	r3, [r5, #0]
 8014fe6:	b103      	cbz	r3, 8014fea <_read_r+0x1e>
 8014fe8:	6023      	str	r3, [r4, #0]
 8014fea:	bd38      	pop	{r3, r4, r5, pc}
 8014fec:	20000820 	.word	0x20000820

08014ff0 <_sbrk_r>:
 8014ff0:	b538      	push	{r3, r4, r5, lr}
 8014ff2:	4d06      	ldr	r5, [pc, #24]	@ (801500c <_sbrk_r+0x1c>)
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	4604      	mov	r4, r0
 8014ff8:	4608      	mov	r0, r1
 8014ffa:	602b      	str	r3, [r5, #0]
 8014ffc:	f7ee f94e 	bl	800329c <_sbrk>
 8015000:	1c43      	adds	r3, r0, #1
 8015002:	d102      	bne.n	801500a <_sbrk_r+0x1a>
 8015004:	682b      	ldr	r3, [r5, #0]
 8015006:	b103      	cbz	r3, 801500a <_sbrk_r+0x1a>
 8015008:	6023      	str	r3, [r4, #0]
 801500a:	bd38      	pop	{r3, r4, r5, pc}
 801500c:	20000820 	.word	0x20000820

08015010 <_write_r>:
 8015010:	b538      	push	{r3, r4, r5, lr}
 8015012:	4d07      	ldr	r5, [pc, #28]	@ (8015030 <_write_r+0x20>)
 8015014:	4604      	mov	r4, r0
 8015016:	4608      	mov	r0, r1
 8015018:	4611      	mov	r1, r2
 801501a:	2200      	movs	r2, #0
 801501c:	602a      	str	r2, [r5, #0]
 801501e:	461a      	mov	r2, r3
 8015020:	f7ed fe12 	bl	8002c48 <_write>
 8015024:	1c43      	adds	r3, r0, #1
 8015026:	d102      	bne.n	801502e <_write_r+0x1e>
 8015028:	682b      	ldr	r3, [r5, #0]
 801502a:	b103      	cbz	r3, 801502e <_write_r+0x1e>
 801502c:	6023      	str	r3, [r4, #0]
 801502e:	bd38      	pop	{r3, r4, r5, pc}
 8015030:	20000820 	.word	0x20000820

08015034 <_close_r>:
 8015034:	b538      	push	{r3, r4, r5, lr}
 8015036:	4d06      	ldr	r5, [pc, #24]	@ (8015050 <_close_r+0x1c>)
 8015038:	2300      	movs	r3, #0
 801503a:	4604      	mov	r4, r0
 801503c:	4608      	mov	r0, r1
 801503e:	602b      	str	r3, [r5, #0]
 8015040:	f7ee f8f8 	bl	8003234 <_close>
 8015044:	1c43      	adds	r3, r0, #1
 8015046:	d102      	bne.n	801504e <_close_r+0x1a>
 8015048:	682b      	ldr	r3, [r5, #0]
 801504a:	b103      	cbz	r3, 801504e <_close_r+0x1a>
 801504c:	6023      	str	r3, [r4, #0]
 801504e:	bd38      	pop	{r3, r4, r5, pc}
 8015050:	20000820 	.word	0x20000820

08015054 <_fstat_r>:
 8015054:	b538      	push	{r3, r4, r5, lr}
 8015056:	4d07      	ldr	r5, [pc, #28]	@ (8015074 <_fstat_r+0x20>)
 8015058:	2300      	movs	r3, #0
 801505a:	4604      	mov	r4, r0
 801505c:	4608      	mov	r0, r1
 801505e:	4611      	mov	r1, r2
 8015060:	602b      	str	r3, [r5, #0]
 8015062:	f7ee f8f3 	bl	800324c <_fstat>
 8015066:	1c43      	adds	r3, r0, #1
 8015068:	d102      	bne.n	8015070 <_fstat_r+0x1c>
 801506a:	682b      	ldr	r3, [r5, #0]
 801506c:	b103      	cbz	r3, 8015070 <_fstat_r+0x1c>
 801506e:	6023      	str	r3, [r4, #0]
 8015070:	bd38      	pop	{r3, r4, r5, pc}
 8015072:	bf00      	nop
 8015074:	20000820 	.word	0x20000820

08015078 <memcpy>:
 8015078:	440a      	add	r2, r1
 801507a:	4291      	cmp	r1, r2
 801507c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015080:	d100      	bne.n	8015084 <memcpy+0xc>
 8015082:	4770      	bx	lr
 8015084:	b510      	push	{r4, lr}
 8015086:	f811 4b01 	ldrb.w	r4, [r1], #1
 801508a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801508e:	4291      	cmp	r1, r2
 8015090:	d1f9      	bne.n	8015086 <memcpy+0xe>
 8015092:	bd10      	pop	{r4, pc}

08015094 <__assert_func>:
 8015094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015096:	4614      	mov	r4, r2
 8015098:	461a      	mov	r2, r3
 801509a:	4b09      	ldr	r3, [pc, #36]	@ (80150c0 <__assert_func+0x2c>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	4605      	mov	r5, r0
 80150a0:	68d8      	ldr	r0, [r3, #12]
 80150a2:	b14c      	cbz	r4, 80150b8 <__assert_func+0x24>
 80150a4:	4b07      	ldr	r3, [pc, #28]	@ (80150c4 <__assert_func+0x30>)
 80150a6:	9100      	str	r1, [sp, #0]
 80150a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80150ac:	4906      	ldr	r1, [pc, #24]	@ (80150c8 <__assert_func+0x34>)
 80150ae:	462b      	mov	r3, r5
 80150b0:	f000 f886 	bl	80151c0 <fiprintf>
 80150b4:	f000 f8a3 	bl	80151fe <abort>
 80150b8:	4b04      	ldr	r3, [pc, #16]	@ (80150cc <__assert_func+0x38>)
 80150ba:	461c      	mov	r4, r3
 80150bc:	e7f3      	b.n	80150a6 <__assert_func+0x12>
 80150be:	bf00      	nop
 80150c0:	2000009c 	.word	0x2000009c
 80150c4:	08018355 	.word	0x08018355
 80150c8:	08018362 	.word	0x08018362
 80150cc:	08018390 	.word	0x08018390

080150d0 <_calloc_r>:
 80150d0:	b570      	push	{r4, r5, r6, lr}
 80150d2:	fba1 5402 	umull	r5, r4, r1, r2
 80150d6:	b934      	cbnz	r4, 80150e6 <_calloc_r+0x16>
 80150d8:	4629      	mov	r1, r5
 80150da:	f7ff f8ed 	bl	80142b8 <_malloc_r>
 80150de:	4606      	mov	r6, r0
 80150e0:	b928      	cbnz	r0, 80150ee <_calloc_r+0x1e>
 80150e2:	4630      	mov	r0, r6
 80150e4:	bd70      	pop	{r4, r5, r6, pc}
 80150e6:	220c      	movs	r2, #12
 80150e8:	6002      	str	r2, [r0, #0]
 80150ea:	2600      	movs	r6, #0
 80150ec:	e7f9      	b.n	80150e2 <_calloc_r+0x12>
 80150ee:	462a      	mov	r2, r5
 80150f0:	4621      	mov	r1, r4
 80150f2:	f7fd ff89 	bl	8013008 <memset>
 80150f6:	e7f4      	b.n	80150e2 <_calloc_r+0x12>

080150f8 <_free_r>:
 80150f8:	b538      	push	{r3, r4, r5, lr}
 80150fa:	4605      	mov	r5, r0
 80150fc:	2900      	cmp	r1, #0
 80150fe:	d041      	beq.n	8015184 <_free_r+0x8c>
 8015100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015104:	1f0c      	subs	r4, r1, #4
 8015106:	2b00      	cmp	r3, #0
 8015108:	bfb8      	it	lt
 801510a:	18e4      	addlt	r4, r4, r3
 801510c:	f7ff fa00 	bl	8014510 <__malloc_lock>
 8015110:	4a1d      	ldr	r2, [pc, #116]	@ (8015188 <_free_r+0x90>)
 8015112:	6813      	ldr	r3, [r2, #0]
 8015114:	b933      	cbnz	r3, 8015124 <_free_r+0x2c>
 8015116:	6063      	str	r3, [r4, #4]
 8015118:	6014      	str	r4, [r2, #0]
 801511a:	4628      	mov	r0, r5
 801511c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015120:	f7ff b9fc 	b.w	801451c <__malloc_unlock>
 8015124:	42a3      	cmp	r3, r4
 8015126:	d908      	bls.n	801513a <_free_r+0x42>
 8015128:	6820      	ldr	r0, [r4, #0]
 801512a:	1821      	adds	r1, r4, r0
 801512c:	428b      	cmp	r3, r1
 801512e:	bf01      	itttt	eq
 8015130:	6819      	ldreq	r1, [r3, #0]
 8015132:	685b      	ldreq	r3, [r3, #4]
 8015134:	1809      	addeq	r1, r1, r0
 8015136:	6021      	streq	r1, [r4, #0]
 8015138:	e7ed      	b.n	8015116 <_free_r+0x1e>
 801513a:	461a      	mov	r2, r3
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	b10b      	cbz	r3, 8015144 <_free_r+0x4c>
 8015140:	42a3      	cmp	r3, r4
 8015142:	d9fa      	bls.n	801513a <_free_r+0x42>
 8015144:	6811      	ldr	r1, [r2, #0]
 8015146:	1850      	adds	r0, r2, r1
 8015148:	42a0      	cmp	r0, r4
 801514a:	d10b      	bne.n	8015164 <_free_r+0x6c>
 801514c:	6820      	ldr	r0, [r4, #0]
 801514e:	4401      	add	r1, r0
 8015150:	1850      	adds	r0, r2, r1
 8015152:	4283      	cmp	r3, r0
 8015154:	6011      	str	r1, [r2, #0]
 8015156:	d1e0      	bne.n	801511a <_free_r+0x22>
 8015158:	6818      	ldr	r0, [r3, #0]
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	6053      	str	r3, [r2, #4]
 801515e:	4408      	add	r0, r1
 8015160:	6010      	str	r0, [r2, #0]
 8015162:	e7da      	b.n	801511a <_free_r+0x22>
 8015164:	d902      	bls.n	801516c <_free_r+0x74>
 8015166:	230c      	movs	r3, #12
 8015168:	602b      	str	r3, [r5, #0]
 801516a:	e7d6      	b.n	801511a <_free_r+0x22>
 801516c:	6820      	ldr	r0, [r4, #0]
 801516e:	1821      	adds	r1, r4, r0
 8015170:	428b      	cmp	r3, r1
 8015172:	bf04      	itt	eq
 8015174:	6819      	ldreq	r1, [r3, #0]
 8015176:	685b      	ldreq	r3, [r3, #4]
 8015178:	6063      	str	r3, [r4, #4]
 801517a:	bf04      	itt	eq
 801517c:	1809      	addeq	r1, r1, r0
 801517e:	6021      	streq	r1, [r4, #0]
 8015180:	6054      	str	r4, [r2, #4]
 8015182:	e7ca      	b.n	801511a <_free_r+0x22>
 8015184:	bd38      	pop	{r3, r4, r5, pc}
 8015186:	bf00      	nop
 8015188:	2000081c 	.word	0x2000081c

0801518c <__ascii_mbtowc>:
 801518c:	b082      	sub	sp, #8
 801518e:	b901      	cbnz	r1, 8015192 <__ascii_mbtowc+0x6>
 8015190:	a901      	add	r1, sp, #4
 8015192:	b142      	cbz	r2, 80151a6 <__ascii_mbtowc+0x1a>
 8015194:	b14b      	cbz	r3, 80151aa <__ascii_mbtowc+0x1e>
 8015196:	7813      	ldrb	r3, [r2, #0]
 8015198:	600b      	str	r3, [r1, #0]
 801519a:	7812      	ldrb	r2, [r2, #0]
 801519c:	1e10      	subs	r0, r2, #0
 801519e:	bf18      	it	ne
 80151a0:	2001      	movne	r0, #1
 80151a2:	b002      	add	sp, #8
 80151a4:	4770      	bx	lr
 80151a6:	4610      	mov	r0, r2
 80151a8:	e7fb      	b.n	80151a2 <__ascii_mbtowc+0x16>
 80151aa:	f06f 0001 	mvn.w	r0, #1
 80151ae:	e7f8      	b.n	80151a2 <__ascii_mbtowc+0x16>

080151b0 <_malloc_usable_size_r>:
 80151b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151b4:	1f18      	subs	r0, r3, #4
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	bfbc      	itt	lt
 80151ba:	580b      	ldrlt	r3, [r1, r0]
 80151bc:	18c0      	addlt	r0, r0, r3
 80151be:	4770      	bx	lr

080151c0 <fiprintf>:
 80151c0:	b40e      	push	{r1, r2, r3}
 80151c2:	b503      	push	{r0, r1, lr}
 80151c4:	4601      	mov	r1, r0
 80151c6:	ab03      	add	r3, sp, #12
 80151c8:	4805      	ldr	r0, [pc, #20]	@ (80151e0 <fiprintf+0x20>)
 80151ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80151ce:	6800      	ldr	r0, [r0, #0]
 80151d0:	9301      	str	r3, [sp, #4]
 80151d2:	f7fe ff2f 	bl	8014034 <_vfiprintf_r>
 80151d6:	b002      	add	sp, #8
 80151d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80151dc:	b003      	add	sp, #12
 80151de:	4770      	bx	lr
 80151e0:	2000009c 	.word	0x2000009c

080151e4 <__ascii_wctomb>:
 80151e4:	4603      	mov	r3, r0
 80151e6:	4608      	mov	r0, r1
 80151e8:	b141      	cbz	r1, 80151fc <__ascii_wctomb+0x18>
 80151ea:	2aff      	cmp	r2, #255	@ 0xff
 80151ec:	d904      	bls.n	80151f8 <__ascii_wctomb+0x14>
 80151ee:	228a      	movs	r2, #138	@ 0x8a
 80151f0:	601a      	str	r2, [r3, #0]
 80151f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80151f6:	4770      	bx	lr
 80151f8:	700a      	strb	r2, [r1, #0]
 80151fa:	2001      	movs	r0, #1
 80151fc:	4770      	bx	lr

080151fe <abort>:
 80151fe:	b508      	push	{r3, lr}
 8015200:	2006      	movs	r0, #6
 8015202:	f000 f82b 	bl	801525c <raise>
 8015206:	2001      	movs	r0, #1
 8015208:	f7ed ffec 	bl	80031e4 <_exit>

0801520c <_raise_r>:
 801520c:	291f      	cmp	r1, #31
 801520e:	b538      	push	{r3, r4, r5, lr}
 8015210:	4605      	mov	r5, r0
 8015212:	460c      	mov	r4, r1
 8015214:	d904      	bls.n	8015220 <_raise_r+0x14>
 8015216:	2316      	movs	r3, #22
 8015218:	6003      	str	r3, [r0, #0]
 801521a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801521e:	bd38      	pop	{r3, r4, r5, pc}
 8015220:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015222:	b112      	cbz	r2, 801522a <_raise_r+0x1e>
 8015224:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015228:	b94b      	cbnz	r3, 801523e <_raise_r+0x32>
 801522a:	4628      	mov	r0, r5
 801522c:	f000 f830 	bl	8015290 <_getpid_r>
 8015230:	4622      	mov	r2, r4
 8015232:	4601      	mov	r1, r0
 8015234:	4628      	mov	r0, r5
 8015236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801523a:	f000 b817 	b.w	801526c <_kill_r>
 801523e:	2b01      	cmp	r3, #1
 8015240:	d00a      	beq.n	8015258 <_raise_r+0x4c>
 8015242:	1c59      	adds	r1, r3, #1
 8015244:	d103      	bne.n	801524e <_raise_r+0x42>
 8015246:	2316      	movs	r3, #22
 8015248:	6003      	str	r3, [r0, #0]
 801524a:	2001      	movs	r0, #1
 801524c:	e7e7      	b.n	801521e <_raise_r+0x12>
 801524e:	2100      	movs	r1, #0
 8015250:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015254:	4620      	mov	r0, r4
 8015256:	4798      	blx	r3
 8015258:	2000      	movs	r0, #0
 801525a:	e7e0      	b.n	801521e <_raise_r+0x12>

0801525c <raise>:
 801525c:	4b02      	ldr	r3, [pc, #8]	@ (8015268 <raise+0xc>)
 801525e:	4601      	mov	r1, r0
 8015260:	6818      	ldr	r0, [r3, #0]
 8015262:	f7ff bfd3 	b.w	801520c <_raise_r>
 8015266:	bf00      	nop
 8015268:	2000009c 	.word	0x2000009c

0801526c <_kill_r>:
 801526c:	b538      	push	{r3, r4, r5, lr}
 801526e:	4d07      	ldr	r5, [pc, #28]	@ (801528c <_kill_r+0x20>)
 8015270:	2300      	movs	r3, #0
 8015272:	4604      	mov	r4, r0
 8015274:	4608      	mov	r0, r1
 8015276:	4611      	mov	r1, r2
 8015278:	602b      	str	r3, [r5, #0]
 801527a:	f7ed ffa3 	bl	80031c4 <_kill>
 801527e:	1c43      	adds	r3, r0, #1
 8015280:	d102      	bne.n	8015288 <_kill_r+0x1c>
 8015282:	682b      	ldr	r3, [r5, #0]
 8015284:	b103      	cbz	r3, 8015288 <_kill_r+0x1c>
 8015286:	6023      	str	r3, [r4, #0]
 8015288:	bd38      	pop	{r3, r4, r5, pc}
 801528a:	bf00      	nop
 801528c:	20000820 	.word	0x20000820

08015290 <_getpid_r>:
 8015290:	f7ed bf90 	b.w	80031b4 <_getpid>

08015294 <_init>:
 8015294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015296:	bf00      	nop
 8015298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801529a:	bc08      	pop	{r3}
 801529c:	469e      	mov	lr, r3
 801529e:	4770      	bx	lr

080152a0 <_fini>:
 80152a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152a2:	bf00      	nop
 80152a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152a6:	bc08      	pop	{r3}
 80152a8:	469e      	mov	lr, r3
 80152aa:	4770      	bx	lr
